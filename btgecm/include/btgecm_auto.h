//AHSRC:brush/b_brush.c
BTGE_API int Hull_LinePlaneIntersect(float *start, float *end,float *norm, float *point);
BTGE_API int Hull_LinePlaneIntersectST(float *sv, float *sst,float *ev, float *est, float *norm, float *ov, float *ost);
BTGE_API void Hull_AdjacentNormals(float *norm, float *udir, float *vdir);
BTGE_API void Hull_AdjacentNormals2(float *norm, float *udir, float *vdir);
BTGE_API void Hull_AdjacentNormals21(float *norm, float *udir, float *vdir);
BTGE_API void Hull_AdjacentNormals22(float *norm, float *udir, float *vdir);
BTGE_API void Hull_AdjacentNormals23(float *norm, float *udir, float *vdir);
BTGE_API void Hull_MakePlaneFace(float *norm, float *pts);
BTGE_API int Hull_ClipFace(float *norm,float *ipts, float *opts, int num);
BTGE_API int Hull_ClipFaceST(float *norm,float *ipts, float *ist, float *opts, float *ost, int num);
BTGE_API void Hull_BoxPlaneExtents(float *mins, float *maxs, float *norm,float *rm, float *rn);
BTGE_API void Hull_SpherePlaneExtents(float *org, float rad, float *norm,float *rm, float *rn);
int BTGE_Brush_CombineTextureFlags(int fl0, int fl1);
int BTGE_Brush_BuildFace(BTGE_Brush *brush, int id,float *xyz, float *st, int *rtn);
BTGE_API void BTGE_Brush_BuildFaces(BTGE_Brush *brush);
BTGE_API void BTGE_Brush_DestroyFaces(BTGE_Brush *brush);
BTGE_API void BTGE_Brush_DestroyBrush(BTGE_Brush *brush);
BTGE_API int BTGE_Brush_CheckPointBrush(BTGE_Brush *brush, float *pt);
BTGE_API int BTGE_Brush_CheckLineBrushClip(BTGE_Brush *brush,float *sv, float *ev, float *csv, float *cev);
BTGE_API int BTGE_Brush_CheckLineBrush(BTGE_Brush *brush,float *sv, float *ev);
BTGE_API int BTGE_Brush_CheckBoxBrush(BTGE_Brush *brush,float *mins, float *maxs);
BTGE_API int BTGE_Brush_CheckSphereBrush(BTGE_Brush *brush,float *org, float rad);
BTGE_API int BTGE_Brush_GetExtents(BTGE_Brush *brush, float *vec,float *rm, float *rn);
BTGE_API int BTGE_Brush_GetPlaneExtents(BTGE_Brush *brush, float *norm,float *rm, float *rn);
BTGE_API void BTGE_Brush_GetBBoxExtents(BTGE_Brush *brush, float *vec,float *rm, float *rn);
BTGE_API void BTGE_Brush_GetBBoxPlaneExtents(BTGE_Brush *brush,float *norm, float *rm, float *rn);
BTGE_API void BTGE_Brush_GetBrushFacePlaneExtents(BTGE_Brush *brush, int fn, float *norm, float *rm, float *rn);
BTGE_API BTGE_Brush *BTGE_Brush_New(int num);
BTGE_API BTGE_Brush *BTGE_Brush_MakeCubeExtentsTexPos(float mx, float my, float mz, float nx, float ny, float nz, char *tex, float tx, float ty, float tz, int tp);
BTGE_API BTGE_Brush *BTGE_Brush_MakeCubeExtents(float mx, float my, float mz, float nx, float ny, float nz, char *tex);
BTGE_API BTGE_Brush *BTGE_Brush_MakeCube(float x, float y, float z,float xs, float ys, float zs, char *tex);
BTGE_API void BTGE_Brush_CheckExpandFaces(BTGE_Brush *brush, int num);
BTGE_API BTGE_Brush *BTGE_Brush_CloneBrush(BTGE_Brush *brush);
BTGE_API void BTGE_Brush_DestroyBrush(BTGE_Brush *brush);
BTGE_API BTGE_Brush *BTGE_Brush_CloneBrushList(BTGE_Brush *brush);
BTGE_API void BTGE_Brush_DestroyBrushList(BTGE_Brush *brush);
BTGE_API BTGE_Brush *BTGE_Brush_CloneBrushEntList(BTGE_Brush *brush);
BTGE_API BTGE_Brush *BTGE_Brush_CloneBrushChainList(BTGE_Brush *brush);
BTGE_API void BTGE_Brush_DestroyBrushEntList(BTGE_Brush *brush);
BTGE_API void BTGE_Brush_TranslateBrush(BTGE_Brush *brush, float *offs);
BTGE_API void BTGE_Brush_TranslateBrushChainList(BTGE_Brush *brush, float *offs);
BTGE_API void BTGE_Brush_Init();
//AHSRC:brush/b_bsp.c
BTGE_API BTGE_BrushNode *BTGE_BrushBSP_AllocNode();
BTGE_API void BTGE_BrushBSP_FreeNode(BTGE_BrushNode *tmp);
BTGE_API void BTGE_BrushBSP_FreeTreeNode(BTGE_BrushNode *tmp);
BTGE_API void BTGE_BrushBSP_BBoxList(BTGE_Brush *lst, float *mins, float *maxs);
BTGE_API float BTGE_BrushBSP_WeightPlaneBrushList(BTGE_Brush *lst, float *norm);
BTGE_API int BTGE_BrushBSP_BestPlaneBrushList(BTGE_Brush *lst, float *norm);
BTGE_API BTGE_BrushNode *BTGE_BrushBSP_BuildNodeList(BTGE_Brush *lst);
BTGE_API BTGE_BrushNode *BTGE_BrushBSP_BuildNodeListFast(BTGE_Brush *lst);
BTGE_API int BTGE_BrushBSP_CheckPointNode(BTGE_BrushNode *node, float *pt);
BTGE_API int BTGE_BrushBSP_LastNodeID(BTGE_BrushNode *node);
BTGE_API BTGE_BrushNode *BTGE_BrushBSP_BuildTreeListFast(BTGE_Brush *lst);
BTGE_API float BTGE_BrushBSP_WeightPlaneFaceList(BTGE_BrushTempFace *lst, float *norm);
BTGE_API int BTGE_BrushBSP_BestPlaneFaceList(BTGE_BrushTempFace *lst, float *norm);
BTGE_API BTGE_BrushNode *BTGE_BrushBSP_BuildNodeFaceList(BTGE_BrushTempFace *lst);
BTGE_API void BTGE_BrushBSP_BindNodeBrushList(BTGE_BrushNode *node, BTGE_Brush *lst);
BTGE_API BTGE_BrushNode *BTGE_BrushBSP_BuildTreeList(BTGE_Brush *lst);
BTGE_Brush *BTGE_BrushBSP_QueryTreeNodeR(BTGE_BrushNode *node,BTGE_Brush *lst, float *org, float rad);
BTGE_API BTGE_Brush *BTGE_BrushBSP_QueryTreeNode(BTGE_BrushNode *node,float *org, float rad);
BTGE_API BTGE_Brush *BTGE_BrushBSP_TracelineMid(BTGE_BrushNode *node, BTGE_Brush *lst, float *sv, float *ev);
BTGE_API BTGE_Brush *BTGE_BrushBSP_Traceline(BTGE_BrushNode *node, BTGE_Brush *lst, float *sv, float *ev);
BTGE_API BTGE_Brush *BTGE_BrushBSP_TracelineFirstMid(BTGE_BrushNode *node,float *sv, float *ev);
BTGE_API BTGE_Brush *BTGE_BrushBSP_TracelineFirst(BTGE_BrushNode *node,float *sv, float *ev);
BTGE_API BTGE_Brush *BTGE_BrushBSP_TracelineFirstSkip(BTGE_BrushNode *node,float *sv, float *ev, BTGE_Brush *skip);
BTGE_Brush *BTGE_BrushBSP_GetBrushListR(BTGE_BrushNode *node, BTGE_Brush *lst);
BTGE_API BTGE_Brush *BTGE_BrushBSP_GetBrushList(BTGE_BrushNode *root);
BTGE_API BTGE_Brush *BTGE_BrushBSP_BoxQueryTreeNode(BTGE_BrushNode *node,float *mins, float *maxs);
//AHSRC:brush/b_csg.c
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_AllocFace();
BTGE_API void BTGE_BrushCSG_FreeFace(BTGE_BrushTempFace *face);
BTGE_API void BTGE_BrushCSG_FreeFaceList(BTGE_BrushTempFace *face);
BTGE_API void BTGE_BrushCSG_FreeDrawFace(BTGE_BrushDrawFace *face);
BTGE_API void BTGE_BrushCSG_DestroyBrushFaces(BTGE_Brush *brush);
BTGE_API BTGE_BrushDrawFace *BTGE_BrushCSG_GetBrushFaces(BTGE_Brush *brush, BTGE_BrushDrawFace *lst);
BTGE_API BTGE_BrushDrawFace *BTGE_BrushCSG_MakeBrushDrawFacesClip(BTGE_Brush *brush);
BTGE_API BTGE_BrushDrawFace *BTGE_BrushCSG_MakeBrushDrawFaces(BTGE_Brush *brsh, BTGE_BrushDrawFace *lst);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_MakeBrushFaces(BTGE_Brush *brsh, BTGE_BrushTempFace *lst);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_MakeFacesBrushList(BTGE_Brush *fst);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_CopyFace(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_LeftFacePlane(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst, float *norm);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_RightFacePlane(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst, float *norm);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ChainLeftFacePlane(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst, float *norm);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ChainRightFacePlane(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst, float *norm);
BTGE_API void BTGE_BrushCSG_FaceExtents(BTGE_BrushTempFace *face,float *dir, float *rm, float *rn);
BTGE_API void BTGE_BrushCSG_FacePlaneExtents(BTGE_BrushTempFace *face,float *norm, float *rm, float *rn);
BTGE_API void BTGE_BrushCSG_BBoxFace(BTGE_BrushTempFace *face, float *min, float *max);
BTGE_API void BTGE_BrushCSG_BBoxFaceList(BTGE_BrushTempFace *lst,float *min, float *max);
BTGE_API void BTGE_BrushCSG_GetFaceOrigin(BTGE_BrushTempFace *face, float *org);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_SubdivideFace(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst, float max);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_SubdivideFaceList(BTGE_BrushTempFace *lst, float max);
BTGE_API int BTGE_BrushCSG_InferFaceOutside(BTGE_BrushTempFace *face);
BTGE_API int BTGE_BrushCSG_CheckFaceBrush(BTGE_BrushTempFace *face, BTGE_Brush *brsh);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ClipFaceBrush(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst, BTGE_Brush *brsh);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ClipFaceListBrush(BTGE_BrushTempFace *ilst, BTGE_Brush *brsh);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ClipFaceListBrushList(BTGE_BrushTempFace *ilst, BTGE_Brush *blst);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_BuildBrushFacesClip(BTGE_Brush *brush, BTGE_BrushNode *root);
BTGE_API float BTGE_BrushCSG_ExpandRadius(float *norm, float *rad);
BTGE_API int BTGE_BrushCSG_CheckFaceBrushExpand(BTGE_BrushTempFace *face,BTGE_Brush *brsh, float *rad);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ClipFaceBrushExpand(BTGE_BrushTempFace *face, BTGE_BrushTempFace *lst, BTGE_Brush *brsh, float *rad);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ClipFaceListBrushExpand(BTGE_BrushTempFace *ilst, BTGE_Brush *brsh, float *rad);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_ClipFaceListBrushListExpand(BTGE_BrushTempFace *ilst, BTGE_Brush *blst, float *rad);
BTGE_API void BTGE_BrushCSG_SplitListFacePlane(BTGE_BrushTempFace *lst, float *norm, BTGE_BrushTempFace **rllst, BTGE_BrushTempFace **rrlst);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_MergeFaceList(BTGE_BrushTempFace *lsta, BTGE_BrushTempFace *lstb);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_BindFaceListNode(BTGE_BrushNode *root, BTGE_BrushNode *node, BTGE_BrushTempFace *ilst);
BTGE_API BTGE_BrushTempFace *BTGE_BrushCSG_BuildFaces(BTGE_BrushNode *root);
//AHSRC:brush/b_vis2.c
BTGE_BrushTempPortal *BTGE_BrushBSP_QueryPortalsNode(BTGE_BrushTempPortal *prt, BTGE_BrushNode *node);
BTGE_BrushTempPortal *BTGE_BrushBSP_QueryPortalsNodeList(BTGE_BrushTempPortal *prt, BTGE_BrushNode *node, BTGE_BrushTempPortal *lst);
int BTGE_BrushBSP_CheckPortalAOrg(BTGE_BrushTempPortal *prt,BTGE_BrushTempPortal *prta, float *org);
int BTGE_BrushBSP_CheckPortalAB(BTGE_BrushTempPortal *prt,BTGE_BrushTempPortal *prta, BTGE_BrushTempPortal *prtb);
int BTGE_BrushBSP_CheckPortalAB(BTGE_BrushTempPortal *prt,BTGE_BrushTempPortal *prta, BTGE_BrushTempPortal *prtb);
BTGE_BrushTempPortal *BTGE_BrushBSP_QueryPortalsNodeListClipAB(BTGE_BrushTempPortal *prt, BTGE_BrushNode *node, BTGE_BrushTempPortal *lst, BTGE_BrushTempPortal *prta, BTGE_BrushTempPortal *prtb);
int BTGE_BrushBSP_GetVis(byte *vis, int id);
void BTGE_BrushBSP_SetVis(byte *vis, int id);
void BTGE_BrushBSP_BuildVisNodePrtB(BTGE_BrushNode *root,BTGE_BrushNode *node, BTGE_BrushTempPortal *prt, byte *vis, BTGE_BrushTempPortal *plst, BTGE_BrushTempPortal *pcura, BTGE_BrushTempPortal *pcurb);
void BTGE_BrushBSP_BuildVisNodePrt(BTGE_BrushNode *root,BTGE_BrushNode *node, BTGE_BrushTempPortal *prt, byte *vis, BTGE_BrushTempPortal *plst, BTGE_BrushTempPortal *pcur);
void BTGE_BrushBSP_BuildVisNode(BTGE_BrushNode *root,BTGE_BrushNode *node, BTGE_BrushTempPortal *prt);
void BTGE_BrushBSP_BuildVisR(BTGE_BrushNode *root,BTGE_BrushNode *node, BTGE_BrushTempPortal *prt);
void BTGE_BrushBSP_BuildVis(BTGE_BrushNode *root,BTGE_BrushTempPortal *prt);
BTGE_BrushNode *BTGE_BrushBSP_LookupLeafPoint(BTGE_BrushNode *node, float *org);
int BTGE_BrushBSP_GetPVSLeafID(BTGE_BrushNode *root, float *org);
int BTGE_BrushBSP_CheckLeafVisBBox(BTGE_BrushNode *node, float *mins, float *maxs, byte *vis);
int BTGE_BrushBSP_CheckBrushPVS(BTGE_BrushNode *root,BTGE_Brush *brush, float *org);
int BTGE_BrushBSP_CheckPointPVS(BTGE_BrushNode *root,float *pt, float *org);
//AHSRC:brush/b_portal.c
BTGE_Brush *BTGE_BrushBSP_GetNodeBrushListR(BTGE_BrushNode *node, BTGE_Brush *lst);
BTGE_BrushTempPortal *BTGE_BrushBSP_AllocPortal();
void BTGE_BrushBSP_FreePortal(BTGE_BrushTempPortal *prt);
void BTGE_BrushBSP_PortalExtents(BTGE_BrushTempPortal *prt,float *dir, float *rm, float *rn);
void BTGE_BrushBSP_PortalPlaneExtents(BTGE_BrushTempPortal *prt,float *norm, float *rm, float *rn);
int BTGE_BrushBSP_CheckPortalBrush(BTGE_BrushTempPortal *prt,BTGE_Brush *brsh);
BTGE_BrushTempPortal *BTGE_BrushBSP_ClipPortalBrush(BTGE_BrushTempPortal *prt, BTGE_BrushTempPortal *lst, BTGE_Brush *brsh);
BTGE_BrushTempPortal *BTGE_BrushBSP_ClipPortalListBrush(BTGE_BrushTempPortal *prt, BTGE_Brush *brsh);
BTGE_BrushTempPortal *BTGE_BrushBSP_SplitPortalPlane(BTGE_BrushTempPortal *prt, BTGE_BrushTempPortal *lst, float *norm);
BTGE_BrushTempPortal *BTGE_BrushBSP_LeftPortalPlane(BTGE_BrushTempPortal *prt, BTGE_BrushTempPortal *lst, float *norm);
BTGE_BrushTempPortal *BTGE_BrushBSP_RightPortalPlane(BTGE_BrushTempPortal *prt, BTGE_BrushTempPortal *lst, float *norm);
BTGE_BrushTempPortal *BTGE_BrushBSP_SplitPortalListPlane(BTGE_BrushTempPortal *prt, float *norm);
void BTGE_BrushBSP_SplitListPortalPlaneLeft(BTGE_BrushTempPortal *lst, float *norm, BTGE_BrushTempPortal **rllst, BTGE_BrushTempPortal **rrlst);
void BTGE_BrushBSP_SplitListPortalPlaneRight(BTGE_BrushTempPortal *lst, float *norm, BTGE_BrushTempPortal **rllst, BTGE_BrushTempPortal **rrlst);
BTGE_BrushTempPortal *BTGE_BrushBSP_MergePortalList(BTGE_BrushTempPortal *lsta, BTGE_BrushTempPortal *lstb);
BTGE_BrushTempPortal *BTGE_BrushBSP_BuildPortalListNode(BTGE_BrushNode *root, BTGE_BrushNode *node, BTGE_BrushTempPortal *lst);
BTGE_BrushTempPortal *BTGE_BrushBSP_ClipPortalListNodeLeft(BTGE_BrushNode *root, BTGE_BrushNode *node, BTGE_BrushTempPortal *ilst);
BTGE_BrushTempPortal *BTGE_BrushBSP_ClipPortalListNodeRight(BTGE_BrushNode *root, BTGE_BrushNode *node, BTGE_BrushTempPortal *ilst);
void BTGE_BrushBSP_SplitChainPortalPlaneLeft(BTGE_BrushTempPortal *lst, float *norm, BTGE_BrushTempPortal **rllst, BTGE_BrushTempPortal **rrlst);
void BTGE_BrushBSP_SplitChainPortalPlaneRight(BTGE_BrushTempPortal *lst, float *norm, BTGE_BrushTempPortal **rllst, BTGE_BrushTempPortal **rrlst);
void BTGE_BrushBSP_BindPortalListLeftNode(BTGE_BrushNode *root, BTGE_BrushNode *node, BTGE_BrushTempPortal *ilst);
void BTGE_BrushBSP_BindPortalListRightNode(BTGE_BrushNode *root, BTGE_BrushNode *node, BTGE_BrushTempPortal *ilst);
BTGE_BrushTempPortal *BTGE_BrushBSP_DropOutsidePortals(BTGE_BrushTempPortal *ilst);
BTGE_BrushTempPortal *BTGE_BrushBSP_BuildPortals(BTGE_BrushNode *root);
//AHSRC:brush/b_light.c
BTGE_Brush *BTGE_BrushWorld_QueryBrushesLight(BTGE_BrushWorld *world, BTGE_Brush *fst, BTGE_Light *light);
BTGE_Brush *BTGE_BrushWorld_QueryBrushesLight2(BTGE_BrushWorld *world, BTGE_Brush *fst, BTGE_Light *light);
float BTGE_BrushWorld_SetupLightFrame(BTGE_BrushWorld *world, BTGE_Light *light);
BTGE_API BTGE_Light *BTGE_WorldNewLight(BTGE_BrushWorld *wrl);
BTGE_API BTGE_Light *BTGE_WorldFetchLight(BTGE_BrushWorld *wrl, int id);
BTGE_API BTGE_Light *BTGE_WorldGetLight(BTGE_BrushWorld *wrl, int id);
BTGE_API void BTGE_FreeServerLight(BTGE_BrushWorld *wrl,BTGE_Light *light);
//AHSRC:brush/b_bmodel.c
BTGE_API BTGE_BrushModel *BTGE_BrushBSP_BuildBrushModelListFast(BTGE_Brush *lst);
BTGE_API void BTGE_BrushBSP_FreeBrushModel(BTGE_BrushModel *bmdl);
BTGE_API void BTGE_BrushModel_BoxModel(BTGE_BrushModel *bmdl,float *mins, float *maxs);
BTGE_API void BTGE_BrushModel_GetExtents(BTGE_BrushModel *bmdl,float *dir, float *min, float *max);
//AHSRC:brush/b_world.c
BTGE_API BTGE_BrushWorld *BTGE_Brush_NewWorld();
BTGE_API void BTGE_Brush_FreeWorld(BTGE_BrushWorld *world);
BTGE_API BTGE_SEntity *BTGE_BrushWorld_FindSEnt(BTGE_BrushWorld *world, BTGE_SEntity *last, char *key, char *val);
BTGE_API void BTGE_BrushWorld_AddBrush(BTGE_BrushWorld *world, BTGE_Brush *brsh);
BTGE_API void BTGE_BrushWorld_AddEntityBrush(BTGE_BrushWorld *world, BTGE_SEntity *ent, BTGE_Brush *brsh);
BTGE_API void BTGE_BrushWorld_AddBrush(BTGE_BrushWorld *world, BTGE_Brush *brsh);
BTGE_API void BTGE_BrushWorld_AddBrushChainList(BTGE_BrushWorld *world, BTGE_Brush *brsh);
BTGE_API void BTGE_BrushWorld_AddBrushChainListTransient(BTGE_BrushWorld *world, BTGE_Brush *brsh);
BTGE_API void BTGE_BrushWorld_BrushSpawnEntity(BTGE_BrushWorld *world, BTGE_Brush *brsh);
BTGE_API void BTGE_BrushWorld_SpawnEntity(BTGE_BrushWorld *world, BTGE_SEntity *ent);
BTGE_API void BTGE_BrushWorld_DrawBuildFast(BTGE_BrushWorld *world);
BTGE_API void BTGE_BrushWorld_DrawBuild(BTGE_BrushWorld *world);
BTGE_API void BTGE_BrushWorld_DrawFlushBrush(BTGE_BrushWorld *world, BTGE_Brush *brush);
BTGE_API void BTGE_BrushWorld_DrawFlush(BTGE_BrushWorld *world);
BTGE_API void BTGE_BrushWorld_Teardown(BTGE_BrushWorld *world);
BTGE_API BTGE_Brush *BTGE_BrushWorld_TraceLineBrush(BTGE_BrushWorld *world,float *s, float *e, BTGE_Brush *ignore);
BTGE_API BTGE_Brush *BTGE_BrushWorld_LookupBrush(BTGE_BrushWorld *world, int id);
BTGE_API BTGE_SEntity *BTGE_BrushWorld_LookupSEntityId(BTGE_BrushWorld *world, int id);
BTGE_API BTGE_SEntity *BTGE_BrushWorld_GetSEntityId(BTGE_BrushWorld *world, int id);
BTGE_API BTGE_Brush *BTGE_BrushWorld_CreateBrushId(BTGE_BrushWorld *world, int sentid, int brushid);
//AHSRC:brush/b_solidmap.c
int BTGE_BrushSolid_CheckBBoxBrush(BTGE_Brush *brush,float *mins, float *maxs);
int BTGE_BrushSolid_CheckBBoxBrushList(BTGE_Brush *lst,float *mins, float *maxs);
BTGE_Brush *BTGE_BrushBSP_QueryBoxNodeR(BTGE_BrushNode *node,BTGE_Brush *lst, float *mins, float *maxs);
BTGE_Brush *BTGE_BrushBSP_QueryBoxNode(BTGE_BrushNode *node,float *mins, float *maxs);
int BTGE_BrushSolid_BuildBoxMapBits(BTGE_BrushNode *root,byte *bits, int xs, int ys, int zs, float *org, float *box);
//AHSRC:brush/b_texture.c
BTGE_API BTGE_TexImage *BTGE_Texture_LookupImage(char *name);
BTGE_API BTGE_TexImage *BTGE_Texture_LookupNum(int num);
BTGE_API int BTGE_Texture_LoadInfo(BTGE_TexImage *tmp);
BTGE_API int BTGE_Texture_LoadImageSize(char *name, int *rxs, int *rys);
BTGE_API int BTGE_Texture_LoadImage(char *name);
BTGE_API int BTGE_Texture_GetImageSize(int num, int *xs, int *ys);
BTGE_API byte *BTGE_Texture_GetImageBuffer(int num, int *xs, int *ys);
BTGE_API int BTGE_Texture_GetImageFlags(int num);
BTGE_API int BTGE_Texture_GetImageFlags2(int num);
BTGE_API int BTGE_Texture_GetImageFlags3(int num);
BTGE_API int BTGE_Texture_GetImageFlags4(int num);
BTGE_API float BTGE_Texture_GetImageScaleX(int num);
BTGE_API float BTGE_Texture_GetImageScaleY(int num);
//AHSRC:brush/b_map.c
BTGE_API void BTGE_BrushMap_SaveBrushPatch(BTGE_BrushWorld *world, VFILE *fd, BTGE_Brush *brush);
BTGE_API void BTGE_BrushMap_SaveBrushEntity(BTGE_BrushWorld *world, VFILE *fd, BTGE_Brush *brush);
BTGE_API void BTGE_BrushMap_SaveBrush(BTGE_BrushWorld *world, VFILE *fd, BTGE_Brush *brush);
BTGE_API void BTGE_BrushMap_SaveEntity(BTGE_BrushWorld *world, VFILE *fd, BTGE_SEntity *ent);
BTGE_API void BTGE_BrushMap_SaveFile(BTGE_BrushWorld *world, char *name);
BTGE_API void BTGE_BrushMap_LoadPatchPoints(BTGE_BrushWorld *world, BTGE_Brush *brush, VFILE *fd);
BTGE_API void BTGE_BrushMap_LoadPatch(BTGE_BrushWorld *world, BTGE_Brush *brush, VFILE *fd);
BTGE_API void BTGE_BrushMap_LoadBrush3(BTGE_BrushWorld *world, BTGE_Brush *brush, VFILE *fd);
BTGE_API void BTGE_BrushMap_LoadBrush1(BTGE_BrushWorld *world, BTGE_Brush *brush, VFILE *fd);
BTGE_API void BTGE_BrushMap_LoadBrushEntity(BTGE_BrushWorld *world, BTGE_Brush *brush, VFILE *fd);
BTGE_API BTGE_Brush *BTGE_BrushMap_LoadBrush(BTGE_BrushWorld *world, VFILE *fd);
BTGE_API BTGE_Brush *BTGE_BrushMap_LoadEntityDef(BTGE_BrushWorld *world, VFILE *fd);
BTGE_API char *BTGE_BrushMap_ReadBlockString(BTGE_BrushWorld *world, VFILE *fd);
BTGE_API BTGE_SEntity *BTGE_BrushMap_LoadEntity(BTGE_BrushWorld *world, VFILE *fd);
BTGE_API void BTGE_BrushMap_LoadFile(BTGE_BrushWorld *world, char *name);
//AHSRC:brush/b_mapmesh.c
BTGE_API void BTGE_BrushMap_SaveBrushMesh(BTGE_BrushWorld *world, VFILE *fd, BTGE_Brush *brush);
BTGE_API void BTGE_BrushMap_LoadMeshFaces(BTGE_BrushWorld *world, BTGE_Brush *brush, VFILE *fd);
BTGE_API void BTGE_BrushMap_LoadBrushMesh(BTGE_BrushWorld *world,BTGE_Brush *brush, VFILE *fd);
BTGE_API void BTGE_BrushMap_LoadBrushMeshList(BTGE_BrushWorld *world, BTGE_Brush *brush, VFILE *fd);
//AHSRC:brush/b_mesh.c
BTGE_API BTGE_Brush *BTGE_BrushMesh_MakeBrushUsingPrim(BTGE_MeshPrim *prim);
void BTGE_BrushMesh_BuildFaces(BTGE_Brush *brush);
BTGE_API int BTGE_BrushMesh_CheckPointBrush(BTGE_Brush *brush, float *pt);
BTGE_API int BTGE_BrushMesh_CheckLineBrushClip(BTGE_Brush *brush,float *sv, float *ev, float *csv, float *cev);
BTGE_API int BTGE_BrushMesh_CheckLineBrush(BTGE_Brush *brush,float *sv, float *ev);
BTGE_API int BTGE_BrushMesh_CheckBoxBrush(BTGE_Brush *brush,float *mins, float *maxs);
BTGE_API int BTGE_BrushMesh_CheckSphereBrush(BTGE_Brush *brush,float *org, float rad);
BTGE_API int BTGE_BrushMesh_GetExtents(BTGE_Brush *brush, float *vec,float *rm, float *rn);
BTGE_API int BTGE_BrushMesh_GetPlaneExtents(BTGE_Brush *brush, float *vec,float *rm, float *rn);
void BTGE_BrushMesh_InitPatchRGB(BTGE_BrushWorld *world, BTGE_Brush *brush);
BTGE_API void BTGE_BrushMesh_UpdatePatchLight(BTGE_BrushWorld *world, BTGE_Brush *brush, BTGE_Light *light);
BTGE_API int BTGE_Mesh_CheckBoxFace(BTGE_MeshPrim *prim, int fn, float *mins, float *maxs);
BTGE_API int BTGE_Mesh_CheckBoxPrim(BTGE_MeshPrim *prim, float *mins, float *maxs);
//AHSRC:brush/b_patch.c
BTGE_BrushPatchPoint *BTGE_BrushPatch_GetPoint(BTGE_Brush *brush, int x, int y);
void BTGE_BrushPatch_InterpolateVecXYZ(float *xyz0, float *uv0, float *xyz1, float *uv1, float *xyz2, float *uv2, float *xyz, float *uv, float t);
void BTGE_BrushPatch_Interpolate5VecXYZ(float *xyz0, float *uv0, float *xyz1, float *uv1, float *xyz2, float *uv2, float *xyz3, float *uv3, float *xyz4, float *uv4, float *xyz, float *uv, float t);
void BTGE_BrushPatch_InterpolateVecPts(BTGE_BrushPatchPoint *pt0, BTGE_BrushPatchPoint *pt1, BTGE_BrushPatchPoint *pt2, BTGE_BrushPatchPoint *pt, float t);
void BTGE_BrushPatch_Interpolate5VecPts(BTGE_BrushPatchPoint *pt0, BTGE_BrushPatchPoint *pt1, BTGE_BrushPatchPoint *pt2, BTGE_BrushPatchPoint *pt3, BTGE_BrushPatchPoint *pt4, BTGE_BrushPatchPoint *pt, float t);
void BTGE_BrushPatch_InterpolateVec(BTGE_Brush *brush, BTGE_BrushPatchPoint *vec, float xpos, float ypos);
void BTGE_BrushPatch_InterpolateVec(BTGE_Brush *brush, BTGE_BrushPatchPoint *vec, float xpos, float ypos);
void BTGE_BrushPatch_BuildFaces(BTGE_Brush *brush);
void BTGE_BrushPatch_CalcNormalPts(BTGE_BrushPatchPoint *pt0, BTGE_BrushPatchPoint *pt1, BTGE_BrushPatchPoint *pt2, float *norm);
BTGE_API int BTGE_BrushPatch_CheckPointBrush(BTGE_Brush *brush, float *pt);
BTGE_API int BTGE_BrushPatch_CheckLineBrushClip(BTGE_Brush *brush,float *sv, float *ev, float *csv, float *cev);
BTGE_API int BTGE_BrushPatch_CheckBoxBrushSeg(BTGE_Brush *brush,BTGE_BrushPatchPoint *p0, BTGE_BrushPatchPoint *p1, float *norm, float *mins, float *maxs);
BTGE_API int BTGE_BrushPatch_CheckBoxBrushFace(BTGE_Brush *brush,BTGE_BrushPatchPoint *p0, BTGE_BrushPatchPoint *p1, BTGE_BrushPatchPoint *p2, BTGE_BrushPatchPoint *p3, float *mins, float *maxs);
BTGE_API int BTGE_BrushPatch_CheckSphereBrushSeg(BTGE_Brush *brush,BTGE_BrushPatchPoint *p0, BTGE_BrushPatchPoint *p1, float *norm, float *org, float rad);
BTGE_API int BTGE_BrushPatch_CheckSphereBrushFace(BTGE_Brush *brush,BTGE_BrushPatchPoint *p0, BTGE_BrushPatchPoint *p1, BTGE_BrushPatchPoint *p2, BTGE_BrushPatchPoint *p3, float *org, float rad);
BTGE_API int BTGE_BrushPatch_CheckBoxBrush(BTGE_Brush *brush,float *mins, float *maxs);
BTGE_API int BTGE_BrushPatch_CheckSphereBrush(BTGE_Brush *brush,float *org, float rad);
BTGE_API int BTGE_BrushPatch_GetExtents(BTGE_Brush *brush, float *vec,float *rm, float *rn);
BTGE_API int BTGE_BrushPatch_GetPlaneExtents(BTGE_Brush *brush, float *vec,float *rm, float *rn);
//AHSRC:brush/b_prefab.c
BTGE_API BTGE_BrushWorld *BTGE_BrushPrefab_LookupName(char *name);
BTGE_API BTGE_BrushWorld *BTGE_BrushPrefab_GetName(char *name);
BTGE_API BTGE_BrushModel *BTGE_BrushPrefab_GetBModelName(char *name);
//AHSRC:brush/be_misc.c
BTGE_API void BtSb_mesh_stairs(BTGE_BrushWorld *world, BTGE_Brush *brush);
BTGE_API void BtSb_mesh_pipes(BTGE_BrushWorld *world, BTGE_Brush *brush);
BTGE_API void BtSg_gen_tiles(BTGE_BrushWorld *world, BTGE_SEntity *ent);
//AHSRC:brush/sentity.c
BTGE_API char *BTGE_SEnt_GetStr(BTGE_SEntity *ent, char *name);
BTGE_API void BTGE_SEnt_SetStr(BTGE_SEntity *ent, char *name, char *val);
BTGE_API float BTGE_SEnt_GetNum(BTGE_SEntity *ent, char *name);
BTGE_API void BTGE_SEnt_SetNum(BTGE_SEntity *ent, char *name, float val);
BTGE_API int BTGE_SEnt_GetVec2(BTGE_SEntity *ent, char *name, float *val);
BTGE_API int BTGE_SEnt_GetVec3(BTGE_SEntity *ent, char *name, float *val);
BTGE_API int BTGE_SEnt_GetVec4(BTGE_SEntity *ent, char *name, float *val);
BTGE_API void BTGE_SEnt_SetVec2(BTGE_SEntity *ent, char *name, float *val);
BTGE_API void BTGE_SEnt_SetVec3(BTGE_SEntity *ent, char *name, float *val);
BTGE_API void BTGE_SEnt_SetVec4(BTGE_SEntity *ent, char *name, float *val);
BTGE_API void BTGE_SEnt_SetDynamic(BTGE_SEntity *ent,char *name, dyt val);
BTGE_API void BTGE_SEnt_AddEntity(BTGE_SEntity **wrl, BTGE_SEntity *ent);
BTGE_API BTGE_SEntity *BTGE_SEnt_AllocEntity(void);
BTGE_API BTGE_SEntity *BTGE_SEnt_NewEntity(BTGE_SEntity **wrl, char *type);
BTGE_API BTGE_SEntity *BTGE_SEnt_NewBasicEntity(BTGE_SEntity **wrl,char *type, float *org);
BTGE_API BTGE_SEntity *BTGE_SEnt_NewBasicLight(BTGE_SEntity **wrl,float *org, float val);
BTGE_API void BTGE_SEnt_DestroyEntity(BTGE_SEntity *ent);
BTGE_API BTGE_SEntity *BTGE_SEnt_NewCloneEntity(BTGE_SEntity **wrl,char *type, BTGE_SEntity *sent);
BTGE_API BTGE_SEntity *BTGE_SEnt_FindEntity(BTGE_SEntity *first,char *key, char *value);
//AHSRC:base/cm_ac3d.c
int BTGE_AC3D_IndexXYZ(BTGE_MeshPrim *prim, float x, float y, float z);
int BTGE_AC3D_IndexST(BTGE_MeshPrim *prim, float s, float t);
void BTGE_AC3D_LoadSurface(BTGE_MeshPrim *prim, VFILE *fd);
int BTGE_AC3D_LoadSurfaces(BTGE_MeshPrim *prim, int num, VFILE *fd);
char *BTGE_AC3D_GenAbs(char *base, char *name);
BTGE_MeshPrim *BTGE_AC3D_LoadPolyObject(VFILE *fd, float *offs, char *base);
BTGE_MeshGroup *BTGE_AC3D_LoadGroupObject(VFILE *fd, float *offs, char *base);
BTGE_MeshGroup *BTGE_AC3D_LoadModel(char *name);
void BTGE_AC3D_SaveSurface(BTGE_MeshPrim *prim, VFILE *fd);
int BTGE_AC3D_SavePrim(BTGE_MeshPrim *prim, VFILE *fd);
int BTGE_AC3D_SaveGroup(BTGE_MeshGroup *grp, VFILE *fd);
int BTGE_AC3D_SaveModel(BTGE_MeshGroup *grp, char *name);
//AHSRC:base/cm_conedit.c
void con_memcpy(short *dst, short *src, int cnt);
void con_memset(short *dst, int val, int cnt);
void con_strcpy(short *dst, short *src);
int con_strlen(short *src);
void con_strcpy16to8(char *dst, short *src);
void con_strcpy8to16(short *dst, char *src);
short *con_strdup(short *src);
short *con_strdup8(char *src);
void con_strcat(short *dst, short *src);
BTGE_API BTGE_ConsoleInfo *BTGE_Console_AllocConsoleInfo();
BTGE_API void BTGE_Console_WriteString(BTGE_ConsoleInfo *con, char *str);
BTGE_API int BTGE_Console_Printf(BTGE_ConsoleInfo *con, char *s, ...);
BTGE_API int BTGE_Console_KeyDown(BTGE_ConsoleInfo *con, int key);
BTGE_ConEdit *BTGE_ConEdit_LookupModule(char *name);
BTGE_ConEdit *BTGE_ConEdit_GetModule(char *name);
BTGE_ConEdit *BTGE_ConEdit_SetActiveModule(BTGE_ConsoleInfo *con, char *name);
void BTGE_ConEdit_CheckEditLine(BTGE_ConEdit *edit, int idx);
void BTGE_ConEdit_LineInsert(BTGE_ConEdit *edit, int i, int j);
void BTGE_ConEdit_LineDelete(BTGE_ConEdit *edit, int i, int j);
void BTGE_ConEdit_LineUpdate8(BTGE_ConEdit *edit, int i, char *str);
void BTGE_ConEdit_LineEval(BTGE_ConEdit *edit, int i, int j);
void BTGE_ConEdit_LoadFile(BTGE_ConsoleInfo *con, char *name);
void BTGE_ConEdit_SaveFile(BTGE_ConsoleInfo *con, char *name);
BTGE_API int BTGE_ConEdit_Handler(BTGE_ConsoleInfo *con, char *str);
BTGE_API short *BTGE_ConEdit_GetClipboardString16(BTGE_ConsoleInfo *con);
BTGE_API void BTGE_ConEdit_SetClipboardString16(BTGE_ConsoleInfo *con, short *str);
BTGE_API short *BTGE_ConEdit_GetSelectionString16(BTGE_ConsoleInfo *con);
BTGE_API int BTGE_ConEdit_RedrawCheckSel(BTGE_ConsoleInfo *con, int x, int y);
BTGE_API int BTGE_ConEdit_RedrawUI(BTGE_ConsoleInfo *con);
void BTGE_ConEditUI_WriteString(BTGE_ConsoleInfo *con, char *str);
int BTGE_ConEditUI_Update(BTGE_ConsoleInfo *con, float dt);
short *BTGE_ConEdit_GetLine(BTGE_ConsoleInfo *con, int i);
void BTGE_ConEdit_UpdateLine(BTGE_ConsoleInfo *con, int i, short *str);
void BTGE_ConEditUI_AdjustEditWindow(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_AdjustLineTabs(BTGE_ConsoleInfo *con,short *dst, short *src);
void BTGE_ConEdit_AdjustLineTabsDel(BTGE_ConsoleInfo *con,short *dst, short *src);
void BTGE_ConEdit_AdjustCursorTabAlign(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_AdjustCursorTabAlignB(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_AdjustCursorTabAlignAfter(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_AdjustCursorLineEnd(BTGE_ConsoleInfo *con);
bool BTGE_ConEdit_CheckCursorPastEOL(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_AdjustCursorClampEOL(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_UpdateStartSelection(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_UpdateEndSelection(BTGE_ConsoleInfo *con);
void BTGE_ConEdit_UpdateClearSelection(BTGE_ConsoleInfo *con);
int BTGE_ConEditUI_HandleKey(BTGE_ConsoleInfo *con, int num, int down);
int BTGE_ConEditUI_Clear(BTGE_ConsoleInfo *con);
int BTGE_ConEdit_InitUI(BTGE_ConsoleInfo *con);
//AHSRC:base/cm_cvar.c
BTGE_Cvar *BTGE_LookupCvar(char *name);
BTGE_Cvar *BTGE_GetCvar(char *name);
BTGE_Cvar *BTGE_LookupCvarPrefix(char *name);
BTGE_API char *BTGE_CvarComplete(char *name);
BTGE_API char *BTGE_CvarGet(char *name);
BTGE_API bool BTGE_CvarSet(char *name, char *val);
BTGE_API bool BTGE_CvarSetDefault(char *name, char *val);
BTGE_API double BTGE_CvarGetNum(char *name);
BTGE_API bool BTGE_CvarSetNum(char *name, double val);
BTGE_API char *BTGE_AliasGet(char *str);
BTGE_API bool BTGE_AliasSet(char *name, char *val);
BTGE_API int BTGE_SetConsoleHandler(int (*fcn)(char *str));
BTGE_API int BTGE_ConsoleCmd(char *str);
BTGE_API int BTGE_SetConsoleDoExec(int (*fcn)(void));
BTGE_API int BTGE_DoExecCmds(void);
BTGE_API char *btCvarGet(char *var);
BTGE_API void btCvarSet(char *var, char *val);
BTGE_API void btCvarSetDefault(char *var, char *val);
BTGE_API double btCvarGetf(char *var);
BTGE_API void btCvarSetf(char *var, double val);
BTGE_API bool btCvarGet3fv(char *var, float *fv);
BTGE_API bool btCvarGet4fv(char *var, float *fv);
BTGE_API int btCvarGeti(char *var);
BTGE_API dyt btScriptEval(char *str);
BTGE_API dyt btScriptEvalObj(char *str, dyt obj);
BTGE_API dyt btScriptLoad(char *name);
BTGE_API dyt btScriptEvalFromServer(char *str);
BTGE_API int BTGE_ConCmd_TryExec(char *str);
BTGE_API int BTGE_ConCmd_TryExecScript(char *str, char **args);
//AHSRC:base/cm_filecache.c
void BTGECM_DataAdler32_Step16(byte *buf, int *rs1, int *rs2);
BTGE_API u32 BTGECM_DataAdler32(void *buf, int sz, u32 lcrc);
BTGE_API u32 BTGECM_CRC32(void *buf, int sz, u32 lcrc);
BTGE_API u64 BTGECM_CRC64(void *buf, int sz, u64 lcrc);
u64 BTGECM_FileCache_HashName(char *name);
char *BTGECM_FileCache_StrHashName(char *name);
void BTGECM_FileCache_LoadManifest(char *svname);
void BTGECM_FileCache_SaveManifest(char *svname);
BTGE_CachedFile *BTGECM_FileCache_GeneralLookupFile(char *name);
BTGE_CachedFile *BTGECM_FileCache_GeneralGetFile(char *name);
BTGE_CachedFile *BTGECM_FileCache_ClientLookupFile(char *name);
BTGE_CachedFile *BTGECM_FileCache_ClientGetFile(char *name);
BTGE_API void BTGE_FileCache_ClientDecodePushFile(BTGE_BrushWorld *world, dyt msg);
BTGE_API VFILE *BTGE_FileCache_ClientOpenFile(char *name, char *mode);
BTGE_API VFILE *btcl_vffopen(char *name, char *mode);
//AHSRC:base/cm_maze.c
BTGE_API int BTGE_QuickRand(int *rseed);
BTGE_API int BTGE_QuickRangeRand(int *rseed, int min, int max);
BTGE_API bool BTGE_CheckPointMaze(int xs, int ys, int px, int py);
BTGE_API bool BTGE_CheckNewPointMaze(byte *buf, int xs, int ys, int px, int py);
BTGE_API int BTGE_GetPointMaze(byte *buf, int xs, int ys, int px, int py);
BTGE_API bool BTGE_CheckWallPointMaze(byte *buf, int xs, int ys, int px, int py);
BTGE_API void BTGE_GenerateMaze(byte *buf,int xs, int ys, int seed, int flags);
BTGE_API void BTGE_GenerateMaze3D(byte *buf,int xs, int ys, int zs, int seed, int flags);
//AHSRC:base/cm_mesh.c
BTGE_API BTGE_MeshGroup *BTGE_Mesh_LoadModel(char *name);
BTGE_API int BTGE_Mesh_SaveModel(char *name, BTGE_MeshGroup *grp);
BTGE_API void BTGE_Mesh_DestroyPrim(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_DestroyGroup(BTGE_MeshGroup *grp);
BTGE_API BTGE_MeshPrim *BTGE_Mesh_LookupPrimGroup(BTGE_MeshGroup *grp, char *name);
BTGE_API BTGE_MeshPrim *BTGE_Mesh_ClonePrim(BTGE_MeshPrim *prim);
BTGE_API BTGE_MeshGroup *BTGE_Mesh_CloneGroup(BTGE_MeshGroup *grp);
BTGE_API BTGE_MeshPrim *BTGE_Mesh_CreatePrim(BTGE_MeshGroup *up, char *name);
BTGE_API BTGE_MeshGroup *BTGE_Mesh_CreateGroup(BTGE_MeshGroup *up, char *name);
BTGE_API void BTGE_Mesh_CheckExpandXYZ(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_CheckExpandST(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_CheckExpandPTS(BTGE_MeshPrim *prim, int amt);
BTGE_API void BTGE_Mesh_CheckExpandFace(BTGE_MeshPrim *prim);
BTGE_API int BTGE_Mesh_AllocVertex(BTGE_MeshPrim *prim);
BTGE_API int BTGE_Mesh_AllocST(BTGE_MeshPrim *prim);
BTGE_API int BTGE_Mesh_AllocPTS(BTGE_MeshPrim *prim, int num);
BTGE_API int BTGE_Mesh_AllocFace(BTGE_MeshPrim *prim);
BTGE_API int BTGE_Mesh_CopyVertex(BTGE_MeshPrim *prim, int vn);
BTGE_API int BTGE_Mesh_CopyST(BTGE_MeshPrim *prim, int vn);
BTGE_API int BTGE_Mesh_IndexXYZ(BTGE_MeshPrim *prim, float *v);
BTGE_API int BTGE_Mesh_IndexST(BTGE_MeshPrim *prim, float *v);
BTGE_API int BTGE_Mesh_IndexST2(BTGE_MeshPrim *prim, float *v);
BTGE_API int BTGE_Mesh_AddTriangle(BTGE_MeshPrim *prim,int i0, int j0, int i1, int j1, int i2, int j2);
BTGE_API int BTGE_Mesh_AddQuad(BTGE_MeshPrim *prim,int i0, int j0, int i1, int j1, int i2, int j2, int i3, int j3);
BTGE_API int BTGE_Mesh_AddPolygon(BTGE_MeshPrim *prim,int *vidx, int *stidx, int n);
BTGE_API void BTGE_Mesh_RotatePointAxisAngle(float *n, float th, float *pt);
BTGE_API void BTGE_Mesh_RotatePointOrgAxisAngle(float *o, float *n, float th, float *pt);
BTGE_API void BTGE_Mesh_CalcCenter(BTGE_MeshPrim *prim, float *org);
BTGE_API void BTGE_Mesh_CalcFaceCenter(BTGE_MeshPrim *prim, int fn, float *org);
BTGE_API void BTGE_Mesh_CalcFaceNormal(BTGE_MeshPrim *prim, int fn, float *norm);
BTGE_API void BTGE_Mesh_TranslateFace(BTGE_MeshPrim *prim, int fn, float *offs);
BTGE_API void BTGE_Mesh_RotateFace(BTGE_MeshPrim *prim, int fn,float *org, float *norm, float th);
BTGE_API void BTGE_Mesh_ScaleFace(BTGE_MeshPrim *prim, int fn, float *org, float f);
BTGE_API void BTGE_Mesh_BoxFace(BTGE_MeshPrim *prim, int fn,float *mins, float *maxs);
BTGE_API void BTGE_Mesh_DeleteFace(BTGE_MeshPrim *prim, int fn);
BTGE_API int BTGE_Mesh_CheckFaceVertex(BTGE_MeshPrim *prim, int fn, int vn);
BTGE_API void BTGE_Mesh_DeleteVertex(BTGE_MeshPrim *prim, int vn);
BTGE_API int BTGE_Mesh_CheckLineFace(BTGE_MeshPrim *prim, int fn, float *src, float *dst);
BTGE_API int BTGE_Mesh_CheckLineFaceClip(BTGE_MeshPrim *prim, int fn, float *src, float *dst, float *csv, float *cev);
BTGE_API int BTGE_Mesh_CheckLinePrim(BTGE_MeshPrim *prim, float *src, float *dst);
BTGE_API int BTGE_Mesh_CheckLinePrimClip(BTGE_MeshPrim *prim, float *src, float *dst, float *csv, float *cev);
BTGE_API void BTGE_Mesh_BoxPrim(BTGE_MeshPrim *prim, float *mins, float *maxs);
BTGE_API void BTGE_Mesh_BoxGroup(BTGE_MeshGroup *grp, float *mins, float *maxs);
BTGE_API void BTGE_Mesh_CleanFaceEdges(BTGE_MeshPrim *prim);
BTGE_API int BTGE_Mesh_SubdivideMesh(BTGE_MeshPrim *prim);
BTGE_API int BTGE_Mesh_OptimizePrim(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_MergePrim(BTGE_MeshPrim *prim, BTGE_MeshPrim *prim2);
BTGE_API void BTGE_Mesh_ProjectPointST(BTGE_MeshPrim *prim,float *pt, float *st, float *nv, float *sdir, float *tdir, float *udir, float sv, float tv, int w, int h);
BTGE_API void BTGE_Mesh_ReprojectPrim(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_ReprojectPrimXY(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_ReprojectPrimXZ(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_FlushCache(BTGE_MeshPrim *prim);
BTGE_API void BTGE_Mesh_BuildCache(BTGE_MeshPrim *prim);
//AHSRC:base/cm_meshutil.c
BTGE_API int BTGE_Mesh_IndexSTf(BTGE_MeshPrim *prim,float s, float t);
BTGE_API int BTGE_Mesh_IndexXYZf(BTGE_MeshPrim *prim,float x, float y, float z);
BTGE_API int BTGE_Mesh_AddQuadVec(BTGE_MeshPrim *prim,float *xyz0, float *st0, float *xyz1, float *st1, float *xyz2, float *st2, float *xyz3, float *st3);
BTGE_API int BTGE_Mesh_AddCube(BTGE_MeshPrim *prim, float *mins, float *maxs);
BTGE_API void BTGE_Mesh_AdjacentNormals(float *norm, float *udir, float *vdir);
BTGE_API int BTGE_Mesh_AddCapsule(BTGE_MeshPrim *prim, float *v0, float *v1, float ra, float t1, float t2);
//AHSRC:base/cm_model.c
BTGE_API void *BTGE_Mdl_LoadModel(char *name);
BTGE_API BTGE_ModelState *BTGE_Mdl_LoadModelInstance(char *name);
BTGE_API BTGE_ModelState *BTGE_Mdl_WrapModelInstance(void *mdl);
BTGE_API void BTGE_Mdl_SetModel(BTGE_ModelState *ctx, void *mdl);
BTGE_API void BTGE_Mdl_FreeModel(BTGE_ModelState *ctx);
BTGE_API BTGE_ModelState *BTGE_Mdl_GetCurrentModel(void);
BTGE_API void BTGE_Mdl_SetAnim(BTGE_ModelState *ctx, char *name);
BTGE_API void BTGE_Mdl_SetAnimFrame(BTGE_ModelState *ctx,char *name, int frame);
BTGE_API void BTGE_Mdl_SetFrame(BTGE_ModelState *ctx, int frame);
BTGE_API void BTGE_Mdl_StepTime(BTGE_ModelState *ctx, float dt);
BTGE_API float BTGE_Mdl_LodForDistance(float d);
BTGE_API int BTGE_Mdl_AlphaModelP(BTGE_ModelState *ctx);
BTGE_API void BTGE_Mdl_CalcModelTransform(BTGE_ModelState *ctx, float *tmat);
BTGE_API void BTGE_Mdl_ObbPlaneExtents(float *mins, float *maxs,float *org, float *rot, float *norm, float *rmin, float *rmax);
BTGE_API void BTGE_Mdl_BoxObb(float *mins, float *maxs, float *org, float *rot,float *rmins, float *rmaxs);
BTGE_API void BTGE_Mdl_BoxModel(BTGE_ModelState *ctx, float *mins, float *maxs);
BTGE_API int BTGE_Mdl_CheckModelLight(BTGE_ModelState *ctx, BTGE_Light *light);
//AHSRC:base/cm_net.c
void btge_net_lock();
void btge_net_unlock();
BTGE_API void BTGE_Net_ClientConnect(char *host);
BTGE_API void BTGE_Net_ClientDisconnect();
BTGE_API void BTGE_Net_ClientFlush();
BTGE_API dyt BTGE_Net_ClientGetUpdate();
BTGE_API void BTGE_Net_ClientSendUpdate(dyt msg);
BTGE_API dyt BTGE_Net_ServerGetUpdate(int *rclnum);
BTGE_API s64 BTGE_Net_ServerGetClientMask();
BTGE_API void BTGE_Net_ServerSendUpdate(int clnum, dyt msg);
int btge_net_svaccept(BSXRP_Context *ctx);
BTGE_API void BTGE_Net_Init();
//AHSRC:base/cm_noise.c
int BTGE_Noise_Rand(BTGE_NoiseContext *ctx);
float BTGE_Noise_Random(BTGE_NoiseContext *ctx);
float BTGE_Noise_SRandom(BTGE_NoiseContext *ctx);
float BTGE_Noise_SqRandom(BTGE_NoiseContext *ctx);
float BTGE_Noise_SSqRandom(BTGE_NoiseContext *ctx);
BTGE_NoiseContext *BTGE_Noise_CreateContext(int ord, int sz, s64 seed);
float BTGE_Noise_GenValue(BTGE_NoiseContext *ctx, float *vec);
float btge_clamp(float x, float m, float n);
float btge_lerp(float a, float b, float t);
float btge_scurve(float a);
int btge_clampi(int x, int m, int n);
float btge_noise2(BTGE_NoiseContext *ctx, float *vec);
float btge_noise3(BTGE_NoiseContext *ctx, float *vec);
float BTGE_Noise_GenValue1(BTGE_NoiseContext *ctx, float x);
float BTGE_Noise_GenValue2(BTGE_NoiseContext *ctx, float x, float y);
float BTGE_Noise_GenValue3(BTGE_NoiseContext *ctx,float x, float y, float z);
//AHSRC:base/cm_seqevent.c
BTGE_API BTGE_SequencedEvent *BTGE_AllocSequencedEvent(void);
BTGE_API void BTGE_AddSequencedEventCmd(BTGE_SequencedEvent *sev, char *str);
BTGE_API void BTGE_AddSequencedEventVar(BTGE_SequencedEvent *sev, char *var, char *val);
BTGE_API BTGE_SequencedEvent *BTGE_LoadSequencedEvent(char *name);
BTGE_API BTGE_SequencedEvent *BTGE_ParseSequencedEvent(char *cmdbuf);
BTGE_API void BTGE_StartSequencedEvent(BTGE_SequencedEvent *sev);
BTGE_API void BTGE_UnlinkSequencedEvent(BTGE_SequencedEvent *sev);
BTGE_API void BTGE_FreeSequencedEvent(BTGE_SequencedEvent *sev);
BTGE_API int BTGE_SeqEvent_PlaySound(BTGE_SequencedEvent *sev, char *name);
BTGE_API int BTGE_SeqEvent_PlaySpeak(BTGE_SequencedEvent *sev, char *voice, char *text);
BTGE_API int BTGE_SeqEvent_SoundStillPlayingP(BTGE_SequencedEvent *sev, int id);
BTGE_API BTGE_SequencedEvent *BTGE_LoadStartSequencedEvent(char *name);
BTGE_API char *BTGE_CmdSeq_LookupSeqVar(BTGE_SequencedEvent *sev, char *name);
BTGE_API char *BTGE_CmdSeq_GetCmdReplaceVars(BTGE_SequencedEvent *sev);
BTGE_API void BTGE_CmdEvalBlock(BTGE_SequencedEvent *sev);
BTGE_API BTGE_SequencedEvent *BTGE_CmdAsyncBlock(BTGE_SequencedEvent *sev);
BTGE_API void BTGE_RunSequencedEventCmds(BTGE_SequencedEvent *sev);
BTGE_API void BTGE_StepSequencedEvent(BTGE_SequencedEvent *sev, float dt);
BTGE_API void BTGE_RunStepSequencedEvent(BTGE_SequencedEvent *sev, float dt);
BTGE_API void BTGE_RunStepSequencedEvents(float dt);
BTGE_API int btSequenceExec(char *name);
BTGE_API int btSequenceExecArgv(char *name, char **argv);
//AHSRC:base/cm_server.c
BTGE_API char *BTGE_IdArch();
int BGTE_Base64CharVal(int ch);
int BGTE_InitGlobalFlags();
BTGE_API int BGTE_GlobalFlags();
void btge_server_lock();
void btge_server_unlock();
void BGTE_ServerInit();
void btge_server_dummy();
void BTGE_ServerInitFunc(char *name, void **ptr);
BTGE_API void btSpawnWorld(void);
BTGE_API bool btStepWorld(float dt);
BTGE_API int btBindWorld(BTGE_BrushWorld *wrl);
BTGE_API int btWorldTeardown(BTGE_BrushWorld *world);
BTGE_API dyt btComposeUpdate(int clnum);
BTGE_API void btFinishUpdate(void);
BTGE_API void btFlushUpdate(void);
BTGE_API void btFreeUpdate(dyt msg);
BTGE_API void btDecodeClientUpdate(dyt msg, float dt, int clnum);
BTGE_API void btWorldSaveGame(BTGE_BrushWorld *world, char *name);
BTGE_API void btsvLoadMapFile(BTGE_BrushWorld *wrl, char *map);
BTGE_API void btsvLoadMap(BTGE_BrushWorld *wrl, char *map);
//AHSRC:base/cm_tile2d.c
void BGTE_Tile2DInit();
void btge_tile2d_dummy();
void BTGE_Tile2DInitFunc(char *name, void **ptr);
BTGE_API void bt2dUpdateWorld(float dt);
BTGE_API void bt2dDrawWorld(void);
BTGE_API int bt2dHandleInput(void);
//AHSRC:base/cm_client.c
void BGTE_ClientInit();
void btge_client_dummy();
void BTGE_ClientInitFunc(char *name, void **ptr);
BTGE_API BTCL_World_Dummy *btclNewWorld(void);
BTGE_API void btclBindWorld(BTCL_World_Dummy *wrl);
BTGE_API void btclBindBrushWorld(BTCL_BrushWorld_Dummy *wrl);
BTGE_API void btclStepWorld(BTCL_World_Dummy *wrl, float dt);
BTGE_API void btclLoadMapFile(BTCL_World_Dummy *wrl, char *map);
BTGE_API void btclLoadMap(BTCL_World_Dummy *wrl, char *map);
BTGE_API void btclFlushWorld(BTCL_World_Dummy *wrl);
BTGE_API void btclDecodeUpdate(BTCL_World_Dummy *wrl, dyt msg);
BTGE_API void btclSetupClientFrame(BTCL_World_Dummy *wrl);
BTGE_API void btclSetupClientCamera(BTCL_World_Dummy *wrl);
BTGE_API dyt btclComposeUpdate(BTCL_World_Dummy *wrl);
BTGE_API void btclDraw2D(BTCL_World_Dummy *wrl);
BTGE_API int btclHandleInput(BTCL_World_Dummy *wrl);
//AHSRC:base/cm_png.c
u32 BTGECM_PNG_DataAdler32(void *buf, int sz, u32 lcrc);
u32 BTGECM_PNG_CRC32(void *buf, int sz, u32 lcrc);
char *BTGECM_PNG_Fourcc2String(u32 fcc);
int BTGECM_PNG_Paeth(int a, int b, int c);
u32 BTGECM_PNG_ReadInt32BE(VFILE *fd);
u32 BTGECM_PNG_ReadFourcc(VFILE *fd);
int BTGECM_PNG_Pred0(int pa, int pb, int pc);
int BTGECM_PNG_Pred1(int pa, int pb, int pc);
int BTGECM_PNG_Pred2(int pa, int pb, int pc);
int BTGECM_PNG_Pred3(int pa, int pb, int pc);
int BTGECM_PNG_Pred4(int pa, int pb, int pc);
BTGE_API byte *BTGECM_PNG_LoadName(char *name, int *w, int *h);
BTGE_API byte *BTGECM_PNG_Load(VFILE *ifd, int *w, int *h);
BTGE_API byte *BTGECM_PNG_LoadN(VFILE *ifd, int *w, int *h, char *name);
void BTGECM_PNG_WriteInt32LE(VFILE *fd, u32 v);
void BTGECM_PNG_WriteInt32BE(VFILE *fd, u32 v);
void BTGECM_PNG_WriteFourcc(VFILE *fd, u32 v);
void BTGECM_PNG_WriteChunk(VFILE *fd, u32 fcc, byte *buf, int len);
BTGE_API void BTGECM_PNG_Store(VFILE *fd, byte *buf, int xs, int ys);
//AHSRC:base/cm_colorkey.c
BTGE_API int BTGECM_Misc_GetColorIndexPDN(byte *clr);
BTGE_API int BTGECM_ColorKey_GetColorPaletteIndex(byte *clr, byte *colors, int ncolors);
BTGE_API int BTGECM_ColorKey_LoadPaletteDefault(byte *clrbuf, int maxcolors);
BTGE_API int BTGECM_ColorKey_LoadPalette(char *name, byte *clrbuf, int maxcolors);
BTGE_API int BTGECM_ColorKey_LoadNames(char *name, char *key, char **namebuf, int maxnames);
//AHSRC:base/cm_bsglue.c
BTGE_API void BTCM_ScriptInit();
//AHSRC:base/cmui_delta.c
dyt BTCMUI_WidgetDelta(BTCMUI_Widget *widget);
void BTCMUI_WidgetPostDelta(BTCMUI_Widget *widget);
dyt BTCMUI_FormDelta(BTCMUI_Form *form);
void BTCMUI_FormPostDelta(BTCMUI_Form *form);
dyt BTCMUI_ContextDelta(BTCMUI_Context *uictx);
BTGE_API void BTCMUI_ContextPostDelta(BTCMUI_Context *uictx);
BTGE_API dyt BTCMUI_WorldDelta(BTGE_BrushWorld *world, dyt lst);
BTGE_API void BTCMUI_WorldPostDelta(BTGE_BrushWorld *world);
BTGE_API void BTCMUI_WorldDecodeDelta(BTGE_BrushWorld *world, dyt msg);
void BTCMUI_DecodeFormWidgetDeltaAttr(BTGE_BrushWorld *wrl,BTCMUI_Context *uictx, BTCMUI_Form *form, BTCMUI_Widget *widget, dyt msg);
void BTCMUI_DecodeFormWidgetDelta(BTGE_BrushWorld *wrl,BTCMUI_Context *uictx, BTCMUI_Form *form, dyt msg);
void BTCMUI_DecodeFormEventAttr(BTGE_BrushWorld *wrl,BTCMUI_Context *uictx, BTCMUI_Form *form, BTCMUI_Event *ev, dyt msg);
void BTCMUI_DecodeFormEvent(BTGE_BrushWorld *wrl,BTCMUI_Context *uictx, BTCMUI_Form *form, dyt msg);
void BTCMUI_DecodeFormDeltaAttr(BTGE_BrushWorld *wrl,BTCMUI_Context *uictx, BTCMUI_Form *form, dyt msg);
void BTCMUI_DecodeFormDelta(BTGE_BrushWorld *wrl,BTCMUI_Context *uictx, dyt msg);
void BTCMUI_DecodeUIDeltaAttr(BTGE_BrushWorld *wrl,BTCMUI_Context *uictx, dyt msg);
//AHSRC:base/cmui_form.c
BTCMUI_WidgetType *BTCMUI_LookupWidgetType(char *name);
BTCMUI_WidgetType *BTCMUI_GetWidgetType(char *name);
BTCMUI_Form *BTCMUI_LookupUIForm(BTCMUI_Context *uictx,int idnum);
BTCMUI_Widget *BTCMUI_LookupFormWidget(BTCMUI_Form *form,int idnum);
BTGE_API BTCMUI_Context *BTCMUI_NewUIContext(int idnum);
BTGE_API BTCMUI_Context *BTCMUI_WorldNewUIContext(BTGE_BrushWorld *world, int idnum);
BTGE_API void BTCMUI_UnlinkUIContext(BTCMUI_Context *uictx);
BTGE_API BTCMUI_Context *BTCMUI_WorldLookupUIContext(BTGE_BrushWorld *world, int idnum);
BTGE_API BTCMUI_Context *BTCMUI_WorldGetUIContext(BTGE_BrushWorld *world, int idnum);
BTGE_API BTCMUI_Form *BTCMUI_NewForm(BTCMUI_Context *uictx, int idnum);
BTGE_API BTCMUI_Widget *BTCMUI_NewWidget(BTCMUI_Context *uictx, BTCMUI_Form *form, int idnum);
BTGE_API void BTCMUI_UnlinkWidget(BTCMUI_Widget *widget);
BTGE_API void BTCMUI_WidgetSetParent(BTCMUI_Widget *widget, BTCMUI_Widget *other);
//AHSRC:base/voxcm_biome.c
BTGE_API int BTGE_Voxel_SetupBiome();
BTGE_API int BTGE_Voxel_IndexBiomeName(char *name);
BTGE_API int BTGE_Voxel_LoadBiomeInfo(BTGE_VoxelBiomeInfo *tmp, char *name);
BTGE_API void BTGE_Voxel_CalcBiomeParms(BTGE_BrushWorld *world, BTGE_VoxelTerrGen *terr, int x, int y, float *tv);
BTGE_API BTGE_VoxelBiomeInfo *BTGE_Voxel_GenerateFindBiome(BTGE_BrushWorld *world, BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API BTGE_VoxelBiomeInfo *BTGE_Voxel_GenerateFindBiomeID(BTGE_BrushWorld *world, BTGE_VoxelTerrGen *terr, int id);
BTGE_API BTGE_VoxelBiomeInfo *BTGE_Voxel_FetchBiomeForPoint(BTGE_BrushWorld *world, int x, int y, int z);
BTGE_API BTGE_VoxelBiomeInfo *BTGE_Voxel_FetchBiomeForID(BTGE_BrushWorld *world, int id);
BTGE_API bool BTGE_Voxel_CalculateGrassColorForPoint(BTGE_BrushWorld *world, int x, int y, int z, float *rcr, float *rcg, float *rcb);
BTGE_API bool BTGE_Voxel_CalculateLeavesColorForPoint(BTGE_BrushWorld *world, int x, int y, int z, float *rcr, float *rcg, float *rcb);
BTGE_API bool BTGE_Voxel_CalculateWaterColorForPoint(BTGE_BrushWorld *world, int x, int y, int z, float *rcr, float *rcg, float *rcb);
BTGE_API bool BTGE_Voxel_CalculateSunColorForPoint(BTGE_BrushWorld *world, int x, int y, int z, float *rcr, float *rcg, float *rcb);
//AHSRC:base/voxcm_chunk.c
void btge_voxel_lock();
void btge_voxel_unlock();
BTGE_API void BTGE_Voxel_SetInfoDefaults(BTGE_VoxelInfo *tmp);
BTGE_API int BTGE_Voxel_LoadInfo(BTGE_VoxelInfo *tmp, char *name);
BTGE_API int BTGE_Voxel_LoadVoxelType(int idx, char *name);
void BTGE_Voxel_GlobalThink(BTGE_BrushWorld *world);
void BTGE_Voxel_Setup();
BTGE_API int BTGE_Voxel_IndexVoxelName(char *name);
BTGE_API char *BTGE_Voxel_GetNameForVoxelIndex(int idx);
BTGE_API bool BTGE_Voxel_VoxelOpaqueP(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelFluidP(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelFluidOverlayP(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelAlphaP(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelNoShadowP(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelSolidP(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelAlphaNonMatP(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelFlexformP(BTGE_VoxelData *vox);
BTGE_API int BTGE_Voxel_GetVoxelFlags(BTGE_VoxelData *vox);
BTGE_API int BTGE_Voxel_GetVoxelFlags2(BTGE_VoxelData *vox);
BTGE_API int BTGE_Voxel_GetVoxelFlags3(BTGE_VoxelData *vox);
BTGE_API int BTGE_Voxel_GetVoxelFlags4(BTGE_VoxelData *vox);
BTGE_API BTGE_VoxelInfo *BTGE_Voxel_GetVoxelInfo(BTGE_VoxelData *vox);
BTGE_API bool BTGE_Voxel_VoxelDataOpaqueP(BTGE_VoxelData vox);
BTGE_API bool BTGE_Voxel_VoxelTypeNoFlexformP(BTGE_BrushWorld *world, int type);
BTGE_API BTGE_VoxelInfo *BTGE_Voxel_GetWorldVoxelInfo(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API BTGE_VoxelInfo *BTGE_Voxel_GetWorldChunkVoxelInfo(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_WorldChunkVoxelOpaqueP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_WorldChunkVoxelFluidP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_WorldChunkVoxelAlphaP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_WorldChunkVoxelSolidP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_WorldChunkVoxelFlexformP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API int BTGE_Voxel_GetWorldChunkVoxelFlags(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API int BTGE_Voxel_GetWorldChunkVoxelFlags2(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API int BTGE_Voxel_GetWorldChunkVoxelFlags3(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API int BTGE_Voxel_GetWorldChunkVoxelFlags4(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_FlushChunk(BTGE_VoxelChunk *chk);
BTGE_API void BTGE_Voxel_FlushReleaseChunk(BTGE_VoxelChunk *chk);
void BTGE_Voxel_CheckExpandFace(BTGE_VoxelChunk *chk);
void BTGE_Voxel_CheckExpandAlphaFace(BTGE_VoxelChunk *chk);
BTGE_API float BTGE_Voxel_GetVoxelGamma(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox);
BTGE_API void BTGE_Voxel_RebuildChunk(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_Voxel_CheckRebuildChunk(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_Voxel_BoxChunk(BTGE_VoxelChunk *chk,float *mins, float *maxs);
BTGE_API void BTGE_Voxel_BoxRegion(BTGE_VoxelRegion *rgn,float *mins, float *maxs);
BTGE_API bool BTGE_Voxel_CheckChunkFrustum(BTGE_VoxelChunk *chk);
BTGE_API bool BTGE_Voxel_CheckRegionFrustum(BTGE_VoxelRegion *rgn);
BTGE_API bool BTGE_Voxel_CheckChunkLight(BTGE_VoxelChunk *chk, BTGE_Light *light);
BTGE_API bool BTGE_Voxel_CheckRegionLight(BTGE_VoxelRegion *rgn, BTGE_Light *light);
BTGE_API bool BTGE_Voxel_RegionVoxelOpaqueP(BTGE_VoxelRegion *rgn,int x, int y, int z);
BTGE_API bool BTGE_Voxel_RegionVoxelSkipFaceP(BTGE_VoxelRegion *rgn,BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_WorldRegionVoxelOpaqueP(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z);
BTGE_API bool BTGE_Voxel_WorldRegionVoxelSkipFaceP(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_CheckPointRegion(BTGE_VoxelRegion *rgn,int x, int y, int z);
BTGE_API BTGE_VoxelData BTGE_Voxel_GetRegionVoxelDataFlags(BTGE_VoxelRegion *rgn, int x, int y, int z, int fl);
BTGE_API BTGE_VoxelData BTGE_Voxel_GetWorldRegionVoxelDataFlags(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z, int fl);
BTGE_API bool BTGE_Voxel_SetRegionVoxelDataFlags(BTGE_VoxelRegion *rgn, int x, int y, int z, int fl, BTGE_VoxelData val);
BTGE_API bool BTGE_Voxel_SetWorldRegionVoxelDataFlags(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z, int fl, BTGE_VoxelData val);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetRegionVoxelFlags(BTGE_VoxelRegion *rgn, int x, int y, int z, int fl);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetRegionVoxelFlags2(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z, int fl);
BTGE_API bool BTGE_Voxel_SetRegionVoxelDataFlags2(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z, int fl, BTGE_VoxelData vox);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetRegionVoxel(BTGE_VoxelRegion *rgn, int x, int y, int z);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetRegionVoxelDirty(BTGE_VoxelRegion *rgn, int x, int y, int z);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetRegionVoxelDirty2(BTGE_VoxelRegion *rgn, int x, int y, int z);
BTGE_API BTGE_VoxelChunk *BTGE_Voxel_GetRegionChunkFlags2(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z, int fl);
BTGE_API BTGE_VoxelChunk *BTGE_Voxel_GetWorldChunkFlags(BTGE_BrushWorld *world, int x, int y, int z, int fl);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldVoxelFlags(BTGE_BrushWorld *world, int x, int y, int z, int fl);
BTGE_API bool BTGE_Voxel_SetWorldVoxelDataFlags(BTGE_BrushWorld *world, int x, int y, int z, int fl, BTGE_VoxelData val);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldRegionVoxelFlags(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z, int fl);
BTGE_API BTGE_VoxelRegion *BTGE_Voxel_GetWorldRegionFlags(BTGE_BrushWorld *world, int x, int y, int z, int fl);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldVoxel(BTGE_BrushWorld *world, int x, int y, int z);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldVoxelDirty(BTGE_BrushWorld *world, int x, int y, int z);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldVoxelDirty2(BTGE_BrushWorld *world, int x, int y, int z);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldVoxelDirty3(BTGE_BrushWorld *world, int x, int y, int z);
BTGE_API BTGE_VoxelData BTGE_Voxel_GetWorldVoxelData(BTGE_BrushWorld *world, int x, int y, int z);
BTGE_API bool BTGE_Voxel_SetWorldVoxelData(BTGE_BrushWorld *world, int x, int y, int z, BTGE_VoxelData vox);
BTGE_API BTGE_VoxelData BTGE_Voxel_GetWorldVoxelDataFlags(BTGE_BrushWorld *world, int x, int y, int z, int fl);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldRegionVoxel(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldRegionVoxelDirty(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z);
BTGE_API BTGE_VoxelData *BTGE_Voxel_GetWorldRegionVoxelDirty2(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, int z);
BTGE_API void BTGE_Voxel_RebuildRegionVisible(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_RebuildRegionListVisible(BTGE_BrushWorld *world, BTGE_VoxelRegion *lst);
BTGE_API bool BTGE_Voxel_GetWorldVoxelBBox(BTGE_BrushWorld *world, int x, int y, int z, int fl, float *mins, float *maxs);
BTGE_API int BTGE_Voxel_GetWorldVoxelBBoxList(BTGE_BrushWorld *world, int x, int y, int z, int fl, float *mins, float *maxs, int max);
BTGE_API void BTGE_Voxel_UpdateBlastDamage(BTGE_BrushWorld *world, vec3d origin, float radius, float damage);
BTGE_API void BTGE_Voxel_UpdateBlastDamage2(BTGE_BrushWorld *world, vec3d origin, float radius, float damage, int flags);
BTGE_API BTGE_VoxelData *BTGE_Voxel_TraceLineVoxel(BTGE_BrushWorld *world, vec3 spos, vec3 epos, int flags, float *rpt);
BTGE_API BTGE_SEntity *BTGE_VoxelRegion_LookupSEntityId(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int id);
BTGE_API BTGE_SEntity *BTGE_VoxelRegion_GetSEntityId(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int id);
BTGE_API BTGE_Brush *BTGE_VoxelRegion_LookupBrush(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int id);
BTGE_API BTGE_Brush *BTGE_VoxelRegion_CreateBrushId(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int sentid, int brushid);
//AHSRC:base/voxcm_delta.c
int BTGE_Voxel_EncodeBufferRLE(byte *obuf, byte *ibuf, int isz);
int BTGE_Voxel_DecodeBufferRLE(byte *obuf, int osz, byte *ibuf, int isz);
int BTGE_Voxel_EncodeBufferRLE(byte *obuf, byte *ibuf, int isz);
int BTGE_Voxel_DecodeBufferRLE(byte *obuf, int osz, byte *ibuf, int isz);
int BTGE_Voxel_EncodeBufferRLE(byte *obuf, byte *ibuf, int isz);
int BTGE_Voxel_DecodeBufferRLE(byte *obuf, int osz, byte *ibuf, int isz);
byte *BTGE_Voxel_EmitVLI(byte *ct, int val);
byte *BTGE_Voxel_EmitSVLI(byte *ct, int val);
byte *BTGE_Voxel_EmitString(byte *ct, char *str);
byte *BTGE_Voxel_EmitFloat(byte *ct, float val);
byte *BTGE_Voxel_EmitVec2(byte *ct, float *val);
byte *BTGE_Voxel_EmitVec3(byte *ct, float *val);
byte *BTGE_Voxel_EmitVec4(byte *ct, float *val);
byte *BTGE_Voxel_EmitPlane4(byte *ct, float *val);
byte *BTGE_Voxel_FlattenChunkBuffer(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, byte *obuf, int osz);
byte *BTGE_Voxel_DeltaChunkBuffer(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, byte *obuf, int osz);
BTGE_API byte *BTGE_Voxel_DeltaRegionBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, byte *obuf, int osz);
BTGE_API void BTGE_Voxel_PostDeltaRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API dyt BTGE_Voxel_ComposeWorldDelta(BTGE_BrushWorld *world);
BTGE_API void BTGE_Voxel_WorldPreDelta(BTGE_BrushWorld *world);
BTGE_API void BTGE_Voxel_WorldPostDelta(BTGE_BrushWorld *world);
byte *BTGE_Voxel_DecodeVLI(byte *cs, int *rval);
byte *BTGE_Voxel_DecodeSVLI(byte *cs, int *rval);
byte *BTGE_Voxel_DecodeFloat(byte *cs, float *rval);
byte *BTGE_Voxel_DecodeVec2(byte *cs, float *rval);
byte *BTGE_Voxel_DecodeVec3(byte *cs, float *rval);
byte *BTGE_Voxel_DecodeVec4(byte *cs, float *rval);
byte *BTGE_Voxel_DecodePlane4(byte *cs, float *rval);
byte *BTGE_Voxel_DecodeString(byte *cs, char *buf, int szBuf);
byte *BTGE_Voxel_DecodeFindNextMarker(byte *cs, byte *cse);
BTGE_API void BTGE_Voxel_CheckDecodeChunkVoxelRLE(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API byte *BTGE_Voxel_DecodeChunkVoxelRLE(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API byte *BTGE_Voxel_DecodeDeltaChunkBuffer(BTGE_BrushWorld *world, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeLoadChunkBuffer(BTGE_BrushWorld *world, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeChunkBufferFlags(BTGE_BrushWorld *world, byte *ibuf, int isz, int flags);
BTGE_API byte *BTGE_Voxel_DecodeLoadChunkBuffer(BTGE_BrushWorld *world, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeDeltaValuesBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeDeltaVoxelTypesBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeDeltaRegionBuffer(BTGE_BrushWorld *world, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeDeltaBuffer(BTGE_BrushWorld *world, byte *ibuf, int isz);
BTGE_API void BTGE_Voxel_WorldDecodeDelta(BTGE_BrushWorld *world, dyt msg);
BTGE_API void BTGE_Voxel_WorldRegionValueCheckIndex(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int idx);
BTGE_API int BTGE_Voxel_WorldIndexValue(BTGE_BrushWorld *world, int x, int y, int z, dyt val);
BTGE_API dyt BTGE_Voxel_WorldGetIndexValue(BTGE_BrushWorld *world, int x, int y, int z, int idx);
//AHSRC:base/voxcm_dungeon.c
int BTGE_Voxel_LoadDungeonInfo(BTGE_VoxelDungeonInfo *inf, char *name);
BTGE_API int BTGE_Voxel_LoadDungeonType(int idx, char *name);
int BTGE_Voxel_LoadDungeonList(char *name);
BTGE_API int BTGE_Voxel_IndexDungeonName(char *name);
void BTGE_Voxel_SetupDungeon();
BTGE_API bool BTGE_VoxelDungeon_SpawnWorldDungeon(BTGE_BrushWorld *world, BTGE_VoxelDungeonInfo *dung, int xo, int yo, int zo, int fl);
BTGE_API int BTGE_VoxelDungeon_PickChunkEdgeDungeonRandom(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, int edge);
BTGE_API int BTGE_VoxelDungeon_PickChunkEdgeDungeonCommon(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk0, BTGE_VoxelChunk *chk1, int edge0, int edge1);
BTGE_API int BTGE_VoxelDungeon_PickChunkBecomeDungeon(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API int BTGE_VoxelDungeon_PickChunkBecomeDungeonChance(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API bool BTGE_Voxel_GenerateFillDungeonRange(BTGE_BrushWorld *world, int ox, int oy, int xs, int ys);
//AHSRC:base/voxcm_elastic.c
BTGE_API BTGE_VoxelElasticNode *BTGE_VoxelESN_AllocNode();
BTGE_API void BTGE_VoxelESN_FreeNode(BTGE_VoxelElasticNode *tmp);
BTGE_API BTGE_VoxelElasticNode *BTGE_VoxelESN_LookupChunkNode(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, int x, int y, int z);
BTGE_API void BTGE_VoxelESN_LinkChunkNodes(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_VoxelESN_AdjustChunkNode(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelElasticNode *node);
BTGE_API void BTGE_VoxelESN_AdjustChunkNodes(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API bool BTGE_VoxelESN_CheckPointOpaqueP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, float *org);
BTGE_API bool BTGE_VoxelESN_ProjectNodePointCoords(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelElasticNode *node, float *org, float *nv, float *st);
BTGE_API void BTGE_VoxelESN_EmitChunkNodeSurfaces(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelElasticNode *node);
BTGE_API void BTGE_VoxelESN_EmitChunkSurfaces(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_VoxelESN_RebuildChunk(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
//AHSRC:base/voxcm_elastic2.c
BTGE_API BTGE_VoxelElasticVertex *BTGE_VoxelESN_AllocVertex();
BTGE_API BTGE_VoxelElasticFace *BTGE_VoxelESN_AllocFace();
BTGE_API void BTGE_VoxelESN_FreeVertex(BTGE_VoxelElasticVertex *tmp);
BTGE_API void BTGE_VoxelESN_FreeFace(BTGE_VoxelElasticFace *tmp);
BTGE_API BTGE_VoxelElasticVertex *BTGE_VoxelESN_LookupChunkVertex(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, float *org);
BTGE_API BTGE_VoxelElasticVertex *BTGE_VoxelESN_LookupRegionVertex(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, float *org);
BTGE_API BTGE_VoxelElasticVertex *BTGE_VoxelESN_GetRegionVertex(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, float *org);
BTGE_API BTGE_VoxelElasticVertex *BTGE_VoxelESN_GetChunkVertex(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, float *org);
BTGE_API BTGE_VoxelElasticVertex *BTGE_VoxelESN_GetChunkVertexAnchor(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, float *org);
void BTGE_VoxelESN_EmitFace3(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *vlrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *vlrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *vlrgba2, float *xyz3, float *st3, float *norm3, float *rgba3, float *slrgba3, float *vlrgba3, int tex);
BTGE_API void BTGE_VoxelESN_EmitBlock(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_VoxelESN2_FlushChunk(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_VoxelESN_AdjustChunkFace(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelElasticFace *face);
BTGE_API void BTGE_VoxelESN_AdjustChunkVertex(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelElasticVertex *vert);
BTGE_API void BTGE_VoxelESN_AdjustChunkFaces(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_VoxelESN_ProjectFacePointCoords(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelElasticFace *face, float *org, float *nv, float *st);
BTGE_API void BTGE_VoxelESN_EmitChunkFace(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelElasticFace *face);
BTGE_API void BTGE_VoxelESN_EmitChunkFaces(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_VoxelESN2_RebuildChunk(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
//AHSRC:base/voxcm_emit.c
void BTGE_Voxel_EmitFace(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *xyz1, float *st1, float *xyz2, float *st2, float *xyz3, float *st3, float *norm, float *rgba, int tex);
void BTGE_Voxel_EmitSolidFace(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *xyz1, float *st1, float *xyz2, float *st2, float *xyz3, float *st3, float *norm, float *rgba, int tex);
void BTGE_Voxel_EmitSolidFace2(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *xyz3, float *st3, float *norm3, float *rgba3, float *slrgba3, int tex);
void V3F2SB_COPY(float *fv, sbyte *bv);
void V4F2UB_COPY(float *fv, sbyte *bv);
void V3F2SB_COPY_NORMXY(float *fv, sbyte *bvx, sbyte *bvy);
void V3SB_ZERO(sbyte *bv);
void BTGE_Voxel_EmitSolidFace3(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *vlrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *vlrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *vlrgba2, float *xyz3, float *st3, float *norm3, float *rgba3, float *slrgba3, float *vlrgba3, int tex);
void BTGE_Voxel_EmitAlphaFace(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *xyz1, float *st1, float *xyz2, float *st2, float *xyz3, float *st3, float *norm, float *rgba, int tex);
void BTGE_Voxel_EmitAlphaFace2(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *xyz3, float *st3, float *norm3, float *rgba3, float *slrgba3, int tex);
void BTGE_Voxel_EmitAlphaFace3(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *vlrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *vlrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *vlrgba2, float *xyz3, float *st3, float *norm3, float *rgba3, float *slrgba3, float *vlrgba3, int tex);
void BTGE_Voxel_EmitFace2(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *xyz3, float *st3, float *norm3, float *rgba3, float *slrgba3, int tex);
void BTGE_Voxel_EmitFace3(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *vlrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *vlrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *vlrgba2, float *xyz3, float *st3, float *norm3, float *rgba3, float *slrgba3, float *vlrgba3, int tex);
void BTGE_Voxel_EmitTriangle3(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *xyz0, float *st0, float *norm0, float *rgba0, float *slrgba0, float *vlrgba0, float *xyz1, float *st1, float *norm1, float *rgba1, float *slrgba1, float *vlrgba1, float *xyz2, float *st2, float *norm2, float *rgba2, float *slrgba2, float *vlrgba2, int tex);
BTGE_API void BTGE_Voxel_EmitBlockFluid(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_ProjectFacePointCoords(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z, float *org, float *nv, float *st);
BTGE_API void BTGE_Voxel_EmitBlock_FluidFlow(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitMaterialCube(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag);
BTGE_API void BTGE_Voxel_EmitMaterialColorCube(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, float cr, float cg, float cb);
BTGE_API void BTGE_Voxel_EmitMaterialAlphaCube(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, float alpha, float gamma);
BTGE_API void BTGE_Voxel_EmitMaterialTextureCube(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int tex);
BTGE_API void BTGE_Voxel_EmitMaterialTextureColorCube(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int tex, float cr, float cg, float cb);
BTGE_API void BTGE_Voxel_EmitBlock_Fence(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_RebuildSwapFaces(BTGE_VoxelChunk *chk, int a, int b);
BTGE_API void BTGE_Voxel_RebuildSwapAlphaFaces(BTGE_VoxelChunk *chk, int a, int b);
BTGE_API void BTGE_Voxel_RebuildSortFaces(BTGE_VoxelChunk *chk);
BTGE_API BTGE_Light *BTGE_Voxel_EmitLight(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, float x, float y, float z, float cr, float cg, float cb, float cv, int flags);
BTGE_API BTGE_Light *BTGE_Voxel_EmitLightStyle(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, float x, float y, float z, float cr, float cg, float cb, float cv, int flags, int style);
//AHSRC:base/voxcm_entity.c
BTGE_API byte *BTGE_Voxel_FlattenRegionBrushBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, BTGE_Brush *brush, byte *obuf, int osz);
BTGE_API byte *BTGE_Voxel_FlattenRegionSEntityBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, BTGE_SEntity *sent, byte *obuf, int osz);
BTGE_API byte *BTGE_Voxel_FlattenRegionSEntityListBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, BTGE_SEntity *sent, byte *obuf, int osz);
BTGE_API byte *BTGE_Voxel_FlattenRegionSEntityDeltaListBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, BTGE_SEntity *sent, byte *obuf, int osz);
BTGE_API byte *BTGE_Voxel_DecodeBrushBuffer(BTGE_BrushWorld *world, BTGE_Brush *brush, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeSEntityBuffer(BTGE_BrushWorld *world, BTGE_SEntity *sent, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeSEntityListBuffer(BTGE_BrushWorld *world, BTGE_SEntity **rsent, byte *ibuf, int isz);
BTGE_API byte *BTGE_Voxel_DecodeRegionSEntityListBuffer(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, byte *ibuf, int isz);
//AHSRC:base/voxcm_idxchunk.c
BTGE_API bool BTGE_Voxel_CheckRepackChunkVoxelIndex(BTGE_VoxelChunk *chk);
BTGE_API bool BTGE_Voxel_CheckRegionChunkExpandVoxelIndex(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, BTGE_VoxelChunk *chk);
BTGE_API bool BTGE_Voxel_CheckChunkExpandVoxelIndex(BTGE_VoxelChunk *chk);
BTGE_API bool BTGE_Voxel_CheckSetupChunkVoxelIndex(BTGE_VoxelChunk *chk, int szidx);
BTGE_API int BTGE_Voxel_CheckChunkIndexVoxel(BTGE_VoxelChunk *chk, BTGE_VoxelData vox);
BTGE_API bool BTGE_Voxel_PackVoxelIndexChunk(BTGE_VoxelChunk *chk);
BTGE_API bool BTGE_Voxel_UnpackVoxelIndexChunk(BTGE_VoxelChunk *chk);
//AHSRC:base/voxcm_light.c
int BTGE_Voxel_IndexVLightColor(char *name);
int BTGE_Voxel_IndexVLightStyle(char *name);
void BTGE_Voxel_InitVLightColors();
void BTGE_Voxel_GetVLightBaseColor(BTGE_BrushWorld *world, int vl, float *rgb);
void BTGE_Voxel_GetVLightColor(BTGE_BrushWorld *world, int vl, float *rgb);
void BTGE_Voxel_GetSLightColor(BTGE_BrushWorld *world, int vl, float *rgb);
int BTGE_Voxel_AddBlendVLight(BTGE_BrushWorld *world, int vl0, int vl1);
int BTGE_Voxel_GetVoxelTransmitLight(BTGE_BrushWorld *world, BTGE_VoxelData *vox);
int BTGE_Voxel_GetVoxelTransmitVLight(BTGE_BrushWorld *world, BTGE_VoxelData *vox);
int BTGE_Voxel_GetVoxelTransmitSLight(BTGE_BrushWorld *world, BTGE_VoxelData *vox);
void BTGE_Voxel_UpdateChunkLightVert(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
void BTGE_Voxel_UpdateChunkLightHoriz(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
bool BTGE_Voxel_UpdateChunkLight(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
void BTGE_Voxel_UpdateRegionLight(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
void BTGE_Voxel_UpdateChunkVLightClear(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
void BTGE_Voxel_UpdateChunkVLightVert(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
void BTGE_Voxel_UpdateChunkVLightHoriz(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
void BTGE_Voxel_UpdateChunkVLightHoriz2(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
//AHSRC:base/voxcm_piston.c
BTGE_API void BTGE_VoxelPiston_EmitBlock(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_VoxelPiston_EmitBlock_PistonHead(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_VoxelPiston_UpdateVoxel_Piston(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPiston_UpdateVoxel(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
//AHSRC:base/voxcm_props.c
BTGE_API void BTGE_VoxelProps_FreeModel(BTGE_ModelState *ctx);
BTGE_API BTGE_ModelState *BTGE_VoxelProps_AllocModel(void);
BTGE_API void BTGE_VoxelProps_FlushReleaseChunk(BTGE_VoxelChunk *chk);
BTGE_ModelState *BTGE_VoxelProps_EmitProp(BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *org, float *rot, char *name);
//AHSRC:base/voxcm_save.c
BTGE_API void BTGE_VoxelSave_CheckImageSize(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int cells);
BTGE_API int BTGE_VoxelSave_TryAllocSpan(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int cells);
BTGE_API int BTGE_VoxelSave_AllocSpan(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int cells);
BTGE_API void BTGE_VoxelSave_FreeSpan(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int base);
BTGE_API void BTGE_VoxelSave_MarkSpanUsed(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int base, int cells);
BTGE_API bool BTGE_VoxelSave_CheckSpanSane(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int base, int cells);
BTGE_API int BTGE_VoxelSave_GetSpanLength(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int base);
BTGE_API bool BTGE_VoxelSave_FlattenRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_FlattenWorld(BTGE_BrushWorld *world);
BTGE_API char *BTGE_VoxelSave_GetMapBase(BTGE_BrushWorld *world);
BTGE_API char *BTGE_VoxelSave_GetRegionName(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API char *BTGE_VoxelSave_GetRegionTagName(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, char *tag);
BTGE_API char *BTGE_VoxelSave_GetRegionLockName(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API char *BTGE_VoxelSave_GetRegionBaseName(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API bool BTGE_Voxel_WorldIsServerP(BTGE_BrushWorld *world);
BTGE_API bool BTGE_Voxel_WorldSaveDisabledP(BTGE_BrushWorld *world);
BTGE_API bool BTGE_VoxelSave_SaveRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_SaveWorld(BTGE_BrushWorld *world);
BTGE_API bool BTGE_VoxelSave_TrySaveRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_TrySaveWorld(BTGE_BrushWorld *world);
BTGE_API void BTGE_VoxelSave_LoadRegionChunk(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int cn);
BTGE_API void BTGE_VoxelSave_LoadRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API char *BTGE_VoxelSave_GetTerrainName(BTGE_BrushWorld *world);
BTGE_API void BTGE_VoxelSave_LoadTerrain(BTGE_BrushWorld *world);
BTGE_API void BTGE_Voxel_FreeChunk(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_Voxel_FreeRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_FreeWorld(BTGE_BrushWorld *world);
BTGE_API void BTGE_Voxel_WorldTeardown(BTGE_BrushWorld *world);
//AHSRC:base/voxcm_stairs.c
BTGE_API void BTGE_Voxel_EmitBlock_Stairs(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API int BTGE_VoxelStairs_GetWorldVoxelBBoxList(BTGE_BrushWorld *world, int x, int y, int z, int fl, float *mins, float *maxs, int max);
BTGE_API void BTGE_Voxel_EmitBlock_Ladder(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API int BTGE_VoxelLadder_GetWorldVoxelBBoxList(BTGE_BrushWorld *world, int x, int y, int z, int fl, float *mins, float *maxs, int max);
BTGE_API void BTGE_VoxelDoor_EmitBlock(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API int BTGE_VoxelDoor_GetWorldVoxelBBoxList(BTGE_BrushWorld *world, int x, int y, int z, int fl, float *mins, float *maxs, int max);
BTGE_API int BTGE_VoxelDoor_SmallDamageEvent(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z, double *org, float radius, float damage, float dmg);
BTGE_API void BTGE_VoxelDoor_UpdateVoxel(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
//AHSRC:base/voxcm_terrgen.c
BTGE_API int BTGE_Voxel_GetWorldRegionXSizeVoxels(BTGE_BrushWorld *world);
BTGE_API int BTGE_Voxel_GetWorldRegionYSizeVoxels(BTGE_BrushWorld *world);
BTGE_API int BTGE_Voxel_GetWorldRegionZSizeVoxels(BTGE_BrushWorld *world);
BTGE_API int BTGE_Voxel_GetWorldRegionXSizeVoxels(BTGE_BrushWorld *world);
BTGE_API int BTGE_Voxel_GetWorldRegionYSizeVoxels(BTGE_BrushWorld *world);
BTGE_API int BTGE_Voxel_GetWorldRegionZSizeVoxels(BTGE_BrushWorld *world);
BTGE_API BTGE_VoxelRegion *BTGE_Voxel_AllocRegion(BTGE_BrushWorld *world);
BTGE_API BTGE_VoxelRegion *BTGE_Voxel_AllocRegionForPoint(BTGE_BrushWorld *world, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateTree(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateGiantShroom(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateMetalTree(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateMegaTree(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateSmallHouse(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateDirtPanel(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateSpawner(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateTallGrass(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API float BTGE_Voxel_CalcSpanBaseHeightI(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API float BTGE_Voxel_CalcSpanBaseHeight(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API void BTGE_Voxel_GenerateSpanBase(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API void BTGE_Voxel_GenerateVoxelOre(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, BTGE_VoxelBiomeInfo *biome, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_GenerateSpanCaves(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y, float height);
BTGE_API void BTGE_Voxel_GenerateSpanFillLava(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y, int height);
BTGE_API void BTGE_Voxel_GenerateSpanBorder(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API void BTGE_Voxel_GenerateSpanBldg(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API void BTGE_Voxel_GenerateLightSpan(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API void BTGE_Voxel_GenerateSpanBaseAcid(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API void BTGE_Voxel_GenerateSpanBaseCave(BTGE_BrushWorld *world,BTGE_VoxelTerrGen *terr, int x, int y);
BTGE_API int BTGE_Voxel_SetTerrainDefaults(BTGE_VoxelTerrGen *tmp);
BTGE_API int BTGE_Voxel_LoadTerrainInfo(BTGE_VoxelTerrGen *tmp, char *name);
BTGE_API void BTGE_Voxel_GenerateFillGlobeMapPixel(BTGE_BrushWorld *world, BTGE_VoxelTerrGen *terr, int mx, int my, byte *map, byte *rgb);
BTGE_API void BTGE_Voxel_GenerateChunks(BTGE_BrushWorld *world);
BTGE_API void BTGE_Voxel_GenerateChunks(BTGE_BrushWorld *world);
BTGE_API void BTGE_Voxel_BoxFloodFill(BTGE_BrushWorld *world, int mx, int my, int mz, int nx, int ny, int nz, int type);
BTGE_API bool BTGE_Voxel_GenerateFillRegion(BTGE_BrushWorld *world, BTGE_VoxelTerrGen *terr, BTGE_VoxelRegion *rgn);
BTGE_API bool BTGE_Voxel_GenerateFillRange(BTGE_BrushWorld *world, int ox, int oy, int xs, int ys);
BTGE_API BTGE_VoxelRegion *BTGE_Voxel_CheckGenerateRegionForPoint(BTGE_BrushWorld *world, int x, int y, int z, int fl);
BTGE_API bool BTGE_Voxel_CheckGenerateFillChucks(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, int x, int y, float *org, int fl);
BTGE_API void BTGE_Voxel_UnlinkRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_UnloadRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_CheckUnloadRegions(BTGE_BrushWorld *world);
//AHSRC:base/voxcm_tick.c
BTGE_API void BTGE_Voxel_SetSpawnerTick(void (*fcn)( BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z));
BTGE_API void BTGE_Voxel_UpdateVoxel_SpawnerTick(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_CheckVoxel_FluidSourceFlowInto(BTGE_VoxelData *vox, BTGE_VoxelData *vox1);
BTGE_API void BTGE_Voxel_CheckUpdateVoxel_FluidSourceFillInto(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, BTGE_VoxelData *vox1, BTGE_VoxelData *vox2, int x, int y, int z);
BTGE_API void BTGE_Voxel_UpdateVoxel_FluidSource(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_CheckUpdateVoxel_FluidFlow(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_CheckUpdateVoxel_FluidFlowFrom(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int sx, int sy, int sz, int x, int y, int z);
BTGE_API void BTGE_Voxel_UpdateVoxel_TouchAdjacent(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_UpdateVoxel_FluidFlow(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_UpdateVoxel_Falling(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_UpdateVoxel(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_Voxel_ChunkActiveP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_Voxel_UpdateChunk(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk);
BTGE_API void BTGE_Voxel_UpdateRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_UpdateRegionList(BTGE_BrushWorld *world, BTGE_VoxelRegion *lst);
BTGE_API void BTGE_Voxel_ClearActiveRegionTick(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
BTGE_API void BTGE_Voxel_SetActiveRegionTick(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn, float *org);
BTGE_API void BTGE_Voxel_UpdateWorldTick(BTGE_BrushWorld *world, float dt);
BTGE_API void BTGE_Voxel_ClearActiveWorldTick(BTGE_BrushWorld *world);
BTGE_API void BTGE_Voxel_SetActiveWorldTick(BTGE_BrushWorld *world, vec3 org);
BTGE_API void BTGE_Voxel_WorldEntityMoveTick(BTGE_BrushWorld *world, vec3d oldorg, vec3d neworg);
BTGE_API int BTGE_Voxel_SmallDamageEvent(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z, double *org, float radius, float damage, float dmg);
BTGE_API int BTGE_Voxel_LargeDamageEvent(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z, double *org, float radius, float damage, float dmg);
BTGE_API bool BTGE_Voxel_FindNearestBlockType(BTGE_BrushWorld *world, int sx, int sy, int sz, int *rx, int *ry, int *rz, int voxty, int dist);
BTGE_API bool BTGE_Voxel_FindNearestSpawnBlockType(BTGE_BrushWorld *world, int sx, int sy, int sz, int *rx, int *ry, int *rz, int voxty, int dist);
//AHSRC:base/voxcm_rail.c
BTGE_API bool BTGE_VoxelRail_VoxelCanConnectP(BTGE_VoxelData *vox, BTGE_VoxelData *vox1);
BTGE_API bool BTGE_VoxelRail_CheckVoxelCanConnectP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API bool BTGE_VoxelRail_VoxelRailP(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_Rail(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_VoxelRail_UpdateVoxel_Rail(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelRail_UpdateVoxel(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
int BTGE_Voxel_GetPointVoxelCoord(BTGE_BrushWorld *world,double *org, int *rxyz);
BTGE_API int BTGE_VoxelRail_AlignPointRail(BTGE_BrushWorld *world,  double *org, float *mins, float *maxs, double *org1);
BTGE_API vec3d BTGE_VoxelRail_AlignPointRail2(BTGE_BrushWorld *world,  vec3d org, vec3 mins, vec3 maxs);
//AHSRC:base/voxcm_randthink.c
BTGE_API void BTGE_Voxel_RandomThink_Grass(BTGE_BrushWorld *world, BTGE_VoxelData vox, int x, int y, int z, int fl);
BTGE_API void BTGE_Voxel_RandomThink_Mycelium(BTGE_BrushWorld *world, BTGE_VoxelData vox, int x, int y, int z, int fl);
BTGE_API void BTGE_Voxel_RandomThink_Cactus(BTGE_BrushWorld *world, BTGE_VoxelData vox, int x, int y, int z, int fl);
//AHSRC:base/voxcm_redtick.c
BTGE_API bool BTGE_VoxelPower_VoxelCanPoweredP(BTGE_VoxelData *vox, BTGE_VoxelData *vox1);
BTGE_API bool BTGE_VoxelPower_CheckVoxelCanPowerP(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_RedstoneWire(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_RedstoneRelay(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_Torch(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_RedstoneTorch(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_Lever(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_PressurePlate(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API void BTGE_Voxel_EmitBlock_RedstonePipe(BTGE_BrushWorld *world,  BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, float *min, float *max, int flag, int x, int y, int z);
BTGE_API int BTGE_VoxelPower_WorldVoxelGetPower(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, BTGE_VoxelData *vox1, int x0, int y0, int z0, int x1, int y1, int z1);
BTGE_API int BTGE_VoxelPower_WorldVoxelGetPower2(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, BTGE_VoxelData *vox1, int x0, int y0, int z0, int x1, int y1, int z1);
BTGE_API void BTGE_VoxelPower_TouchAdjacent(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_VoxelUpdatePower(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, BTGE_VoxelData *vox1, int xo, int yo, int zo, int x, int y, int z, int pwr);
BTGE_API void BTGE_VoxelPower_UpdateVoxel_RedstoneLamp(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdateVoxel_Redstone(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdateVoxel_RedstoneTorch0(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdateVoxel_RedstoneTorch1(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdateVoxel_RedstoneRelay(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdateVoxel_RedstoneGate(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdateVoxel_PressurePlate(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdateVoxel(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API void BTGE_VoxelPower_UpdatePoweredVoxel(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTGE_API int BTGE_VoxelPower_GetBlockAmbientPower(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
