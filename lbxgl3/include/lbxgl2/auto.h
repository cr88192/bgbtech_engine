//AHSRC:geom/prim3d1.c
int Prim3D_DrawSquare3D(float x, float y, float z, float xs, float ys, float zs);
LBXGL_API int Prim3D_DrawFlatCube(float minx, float miny, float minz, float maxx, float maxy, float maxz, float r, float g, float b, float a);
LBXGL_API int Prim3D_DrawFlatLineCube(float minx, float miny, float minz, float maxx, float maxy, float maxz, float r, float g, float b, float a);
LBXGL_API int Prim3D_DrawCube(float minx, float miny, float minz, float maxx, float maxy, float maxz);
LBXGL_API int Prim3D_DrawTextureCube(float minx, float miny, float minz, float maxx, float maxy, float maxz, int texnum);
LBXGL_API int Prim3D_DrawSphere(float x, float y, float z, float ra);
LBXGL_API int Prim3D_DrawFlatSphere(float x, float y, float z, float ra,float r, float g, float b, float a);
LBXGL_API int Prim3D_DrawTextureSphere(float x, float y, float z, float ra,int tex);
LBXGL_API float Prim3D_DrawGrid(float x, float y, float w, int ax);
LBXGL_API float Prim3D_DrawXYGrid(float x, float y, float w);
LBXGL_API float Prim3D_DrawXZGrid(float x, float z, float w);
LBXGL_API int Prim3D_DrawCylinder(float x, float y, float z, float h, float rt, float rb);
LBXGL_API int Prim3D_DrawTextureCylinder(float x, float y, float z, float h, float rt, float rb, int tex);
//AHSRC:geom/prim3d2.c
int PD3D_DrawSquare3D(float x, float y, float z, float xs, float ys, float zs);
LBXGL_API int PD3D_DrawFlatCube(float minx, float miny, float minz, float maxx, float maxy, float maxz, float r, float g, float b, float a);
LBXGL_API int PD3D_DrawFlatLineCube(float minx, float miny, float minz, float maxx, float maxy, float maxz, float r, float g, float b, float a);
LBXGL_API int PD3D_DrawCube(float minx, float miny, float minz, float maxx, float maxy, float maxz);
LBXGL_API int PD3D_DrawGammaCube(float minx, float miny, float minz, float maxx, float maxy, float maxz, float y);
LBXGL_API int PD3D_DrawTextureCube(float minx, float miny, float minz, float maxx, float maxy, float maxz, int texnum);
LBXGL_API int PD3D_DrawFlatCube2(float mx, float my, float mz, float nx, float ny, float nz);
LBXGL_API int PD3D_DrawFlatCube3(float mx, float my, float mz, float nx, float ny, float nz);
LBXGL_API int PD3D_DrawFlatCube4(float mx, float my, float mz, float nx, float ny, float nz);
LBXGL_API int PD3D_DrawSphere(float x, float y, float z, float ra);
LBXGL_API int PD3D_DrawFlatSphere(float x, float y, float z, float ra,float r, float g, float b, float a);
LBXGL_API int PD3D_DrawGammaSphere(float ra, float gg);
LBXGL_API float PD3D_DrawGrid(float x, float y, float w, int ax);
LBXGL_API float PD3D_DrawXYGrid(float x, float y, float w);
LBXGL_API float PD3D_DrawXZGrid(float x, float z, float w);
LBXGL_API float PD3D_DrawYZGrid(float y, float z, float w);
LBXGL_API void PD3D_DrawGrid2(float w, float step);
LBXGL_API void PD3D_DrawGrid3(float w, float step, int ax);
LBXGL_API void PD3D_DrawXYGrid2(float w, float s);
LBXGL_API void PD3D_DrawXZGrid2(float w, float s);
LBXGL_API void PD3D_DrawYZGrid2(float w, float s);
LBXGL_API void PD3D_DrawGrid3D(float w, float step);
LBXGL_API int PD3D_DrawCylinder(float x, float y, float z, float h, float rt, float rb);
LBXGL_API int PD3D_DrawDisk(float z, float h, float rad);
LBXGL_API int PD3D_DrawPlane(float x, float y, float z, float d, float w);
LBXGL_API void PD3D_AdjacentNormals(float *norm, float *udir, float *vdir);
LBXGL_API int PD3D_DrawFlatCapsule(float *v0, float *v1, float ra,float r, float g, float b, float a);
//AHSRC:geom/draw2.c
LBXGL_API void Draw_MatMult(float *mat);
LBXGL_API void Draw_RotateQuat(float *rot);
LBXGL_API void Draw_TranslateRotateQuat(float *org, float *rot);
//AHSRC:geom/texture.c
LBXGL_API LBXGL_TexImage *LBXGL_Texture_LookupImage(char *name);
LBXGL_API LBXGL_TexImage *LBXGL_Texture_LookupNum(int num);
LBXGL_API int LBXGL_Texture_LoadInfoCommand(LBXGL_TexImage *tmp, char **a);
LBXGL_API int LBXGL_Texture_LoadInfo(LBXGL_TexImage *tmp);
LBXGL_API int LBXGL_Texture_LoadImageBTJ(LBXGL_TexImage *tmp,char *name, int *rxs, int *rys);
int LBXGL_Texture_LoadImageAltImg(LBXGL_TexImage *tmp);
void *LBXGL_Texture_LoadImageAltImg_cb(void *data);
LBXGL_API int LBXGL_Texture_LoadImageSize(char *name, int *rxs, int *rys);
LBXGL_API int LBXGL_Texture_LoadImage(char *name);
LBXGL_API int LBXGL_Texture_LoadImageBufferSize(char *name, char *ty,byte *ibuf, int isz, int *rxs, int *rys);
LBXGL_API int LBXGL_Texture_GetImageSize(int num, int *xs, int *ys);
LBXGL_API byte *LBXGL_Texture_GetImageBuffer(int num, int *xs, int *ys);
LBXGL_API int LBXGL_Texture_GetImageFlags(int num);
LBXGL_API int LBXGL_Texture_GetImageFlags2(int num);
LBXGL_API float LBXGL_Texture_GetImageScaleX(int num);
LBXGL_API float LBXGL_Texture_GetImageScaleY(int num);
LBXGL_API int LBXGL_Texture_GetImageGlow(int num);
LBXGL_API float LBXGL_Texture_GetImageAlpha(int num);
LBXGL_API float LBXGL_Texture_GetImageFParm(int num, int idx);
LBXGL_API void LBXGL_Texture_GetImageVParm(int num, int idx, float *tv);
LBXGL_API void LBXGL_Texture_BindImage(int num);
void LBXGL_Texture_SetImageMaterial(int tex);
void LBXGL_Texture_SetImageMaterialImg(LBXGL_TexImage *img);
void LBXGL_Texture_Update(float dt);
//AHSRC:geom/skyplane.c
int LBXGL_SkyPlane_SetCamera(double x, double y, double z);
int LBXGL_SkyPlane_SetSky(char *name);
int LBXGL_SkyPlane_RenderGround(int t);
int LBXGL_SkyPlane_RenderSky(int t);
int LBXGL_SkyPlane_RenderSky2(int t);
int LBXGL_SkyPlane_Render(int t);
//AHSRC:geom/skycube.c
LBXGL_API int LBXGL_InitCam();
LBXGL_API void LBXGL_Sky_SetTorque(float *v);
LBXGL_API void LBXGL_Sky_SetTorque2(float *v);
LBXGL_API void LBXGL_Sky_SetSunOrigin(float *v);
LBXGL_API void LBXGL_Sky_SetSunColor(float *v);
LBXGL_API void LBXGL_Sky_SetSunLight(float v);
LBXGL_API void LBXGL_Sky_GetSunOrigin(float *v);
LBXGL_API void LBXGL_Sky_GetSunColor(float *v);
LBXGL_API float LBXGL_Sky_GetSunLight(void);
LBXGL_API void LBXGL_Sky_SetAlphas(float *v, int n);
LBXGL_API int LBXGL_SkyBox_LoadSky(char *name);
LBXGL_API int LBXGL_SkyBox_LoadSkyNum(char *name, int num);
LBXGL_API int LBXGL_SkyBox_LoadSkyCS(char *name);
LBXGL_API int LBXGL_SkyBox_LoadSkyNumCS(char *name, int num);
LBXGL_API int LBXGL_SkyBox_LoadSkyDP(char *name);
LBXGL_API int LBXGL_SkyBox_LoadSkyNumDP(char *name, int num);
LBXGL_API int LBXGL_SkyDome_LoadSky(char *name);
LBXGL_API int LBXGL_SkyDome_LoadSkyBottom(char *name);
void LBXGL_Sky_AddPlane(char *tex, float *org, float *sdir, float *tdir);
LBXGL_API int LBXGL_Sky_LoadSkyInfo(char *name);
LBXGL_API int LBXGL_Sky_LoadSky(char *name);
LBXGL_API int LBXGL_Sky_LoadSkyNum(char *name, int num);
void LBXGL_SkyBox_DrawSkyFace(int fn);
LBXGL_API void LBXGL_Sky_CalcRotateTorque();
LBXGL_API void LBXGL_SkyBox_DrawSkyBox();
LBXGL_API void LBXGL_SkyDome_DrawSkyDome();
void LBXGL_Sky_DrawPlane(int num);
LBXGL_API void LBXGL_Sky_DrawSkyBasic();
LBXGL_API void LBXGL_Sky_DrawSky();
LBXGL_API int LBXGL_Sky_GetHasAlt();
LBXGL_API void LBXGL_Sky_SetHasAlt(int fl);
LBXGL_API int LBXGL_Sky_GetSkyAlt(int n);
LBXGL_API void LBXGL_Sky_SetSkyAlt(int n, int tex);
LBXGL_API int *LBXGL_Sky_RefSkyAlt();
LBXGL_API void LBXGL_Sky_GetAltOrigin(float *org);
LBXGL_API void LBXGL_Sky_SetAltOrigin(float *org);
//AHSRC:geom/skyclouds.c
LBXGL_API void LBXGL_SkyCoulds_SetSunAngle(float angle);
LBXGL_API void LBXGL_SkyCoulds_SetColor(float *tv);
LBXGL_API void LBXGL_SkyCoulds_SetEnabled(bool val);
LBXGL_API void LBXGL_SkyCoulds_DrawSun();
LBXGL_API void LBXGL_SkyCoulds_DrawClouds();
//AHSRC:geom/mesh.c
LBXGL_API LBXGL_MeshGroup *LBXGL_Mesh_LoadModel(char *name);
LBXGL_API int LBXGL_Mesh_SaveModel(char *name, LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_DestroyPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DestroyGroup(LBXGL_MeshGroup *grp);
LBXGL_API LBXGL_MeshPrim *LBXGL_Mesh_LookupPrimGroup(LBXGL_MeshGroup *grp, char *name);
LBXGL_API LBXGL_MeshPrim *LBXGL_Mesh_ClonePrim(LBXGL_MeshPrim *prim);
LBXGL_API LBXGL_MeshGroup *LBXGL_Mesh_CloneGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_DrawPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_DrawPrimFlat(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawGroupFlat(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_DrawPrimDark(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawPrimLight(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawGroupDark(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_DrawGroupLight(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_DrawPolyShadowVolume(float *xyz, int *pts, int nvec, float *org);
LBXGL_API void LBXGL_Mesh_DrawPrimShadowVolumeEdge(LBXGL_MeshPrim *prim, float *org);
LBXGL_API void LBXGL_Mesh_DrawPrimShadowVolumeClip(LBXGL_MeshPrim *prim, float *lorg, float lrad);
LBXGL_API void LBXGL_Mesh_DrawPrimShadowVolume(LBXGL_MeshPrim *prim, float *org, float rad, int flags);
LBXGL_API void LBXGL_Mesh_DrawGroupShadowVolume(LBXGL_MeshGroup *grp, float *org, float rad, int flags);
LBXGL_API void LBXGL_Mesh_DrawPrimFinal(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawGroupFinal(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_DrawPrimAlpha(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawGroupAlpha(LBXGL_MeshGroup *grp);
LBXGL_API LBXGL_MeshPrim *LBXGL_Mesh_CreatePrim(LBXGL_MeshGroup *up, char *name);
LBXGL_API LBXGL_MeshGroup *LBXGL_Mesh_CreateGroup(LBXGL_MeshGroup *up, char *name);
LBXGL_API void LBXGL_Mesh_CheckExpandXYZ(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_CheckExpandST(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_CheckExpandPTS(LBXGL_MeshPrim *prim, int amt);
LBXGL_API void LBXGL_Mesh_CheckExpandFace(LBXGL_MeshPrim *prim);
LBXGL_API int LBXGL_Mesh_AllocVertex(LBXGL_MeshPrim *prim);
LBXGL_API int LBXGL_Mesh_AllocST(LBXGL_MeshPrim *prim);
LBXGL_API int LBXGL_Mesh_AllocPTS(LBXGL_MeshPrim *prim, int num);
LBXGL_API int LBXGL_Mesh_AllocFace(LBXGL_MeshPrim *prim);
LBXGL_API int LBXGL_Mesh_CopyVertex(LBXGL_MeshPrim *prim, int vn);
LBXGL_API int LBXGL_Mesh_CopyST(LBXGL_MeshPrim *prim, int vn);
LBXGL_API int LBXGL_Mesh_IndexXYZ(LBXGL_MeshPrim *prim, float *v);
LBXGL_API int LBXGL_Mesh_IndexST(LBXGL_MeshPrim *prim, float *v);
LBXGL_API int LBXGL_Mesh_IndexST2(LBXGL_MeshPrim *prim, float *v);
LBXGL_API int LBXGL_Mesh_AddTriangle(LBXGL_MeshPrim *prim,int i0, int j0, int i1, int j1, int i2, int j2);
LBXGL_API int LBXGL_Mesh_AddQuad(LBXGL_MeshPrim *prim,int i0, int j0, int i1, int j1, int i2, int j2, int i3, int j3);
LBXGL_API int LBXGL_Mesh_AddPolygon(LBXGL_MeshPrim *prim,int *vidx, int *stidx, int n);
LBXGL_API void LBXGL_Mesh_RotatePointAxisAngle(float *n, float th, float *pt);
LBXGL_API void LBXGL_Mesh_RotatePointOrgAxisAngle(float *o, float *n, float th, float *pt);
LBXGL_API void LBXGL_Mesh_CalcCenter(LBXGL_MeshPrim *prim, float *org);
LBXGL_API void LBXGL_Mesh_CalcFaceCenter(LBXGL_MeshPrim *prim, int fn, float *org);
LBXGL_API void LBXGL_Mesh_CalcFaceNormal(LBXGL_MeshPrim *prim, int fn, float *norm);
LBXGL_API void LBXGL_Mesh_TranslateFace(LBXGL_MeshPrim *prim, int fn, float *offs);
LBXGL_API void LBXGL_Mesh_RotateFace(LBXGL_MeshPrim *prim, int fn,float *org, float *norm, float th);
LBXGL_API void LBXGL_Mesh_ScaleFace(LBXGL_MeshPrim *prim, int fn, float *org, float f);
LBXGL_API void LBXGL_Mesh_BoxFace(LBXGL_MeshPrim *prim, int fn,float *mins, float *maxs);
LBXGL_API void LBXGL_Mesh_DeleteFace(LBXGL_MeshPrim *prim, int fn);
LBXGL_API int LBXGL_Mesh_CheckFaceVertex(LBXGL_MeshPrim *prim, int fn, int vn);
LBXGL_API void LBXGL_Mesh_DeleteVertex(LBXGL_MeshPrim *prim, int vn);
LBXGL_API int LBXGL_Mesh_CheckLineFace(LBXGL_MeshPrim *prim, int fn, float *src, float *dst);
LBXGL_API int LBXGL_Mesh_CheckLinePrim(LBXGL_MeshPrim *prim, float *src, float *dst);
LBXGL_API void LBXGL_Mesh_BoxPrim(LBXGL_MeshPrim *prim, float *mins, float *maxs);
LBXGL_API void LBXGL_Mesh_BoxGroup(LBXGL_MeshGroup *grp, float *mins, float *maxs);
LBXGL_API void LBXGL_Mesh_CleanFaceEdges(LBXGL_MeshPrim *prim);
LBXGL_API int LBXGL_Mesh_SubdivideMesh(LBXGL_MeshPrim *prim);
LBXGL_API int LBXGL_Mesh_OptimizePrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_MergePrim(LBXGL_MeshPrim *prim, LBXGL_MeshPrim *prim2);
LBXGL_API void LBXGL_Mesh_ProjectPointST(LBXGL_MeshPrim *prim,float *pt, float *st, float *nv, float *sdir, float *tdir, float *udir, float sv, float tv, int w, int h);
LBXGL_API int LBXGL_Mesh_LoadTexture(LBXGL_MeshPrim *prim, int *rw, int *rh);
LBXGL_API void LBXGL_Mesh_ReprojectPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_ReprojectPrimXY(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_ReprojectPrimXZ(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_FlushCache(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_BuildCache(LBXGL_MeshPrim *prim);
//AHSRC:geom/mesh_edit.c
LBXGL_API LBXGL_MeshGroup *lbxgl_mesh_mdl;
LBXGL_API LBXGL_MeshGroup *lbxgl_meshsel_grp;
LBXGL_API LBXGL_MeshPrim *lbxgl_meshsel_prim;
LBXGL_API int lbxgl_meshsel_multi;
LBXGL_API int lbxgl_mesh_mode;
LBXGL_API int lbxgl_mesh_cmd;
LBXGL_API LBXGL_MeshGroup *lbxgl_mesh_clip;
LBXGL_API int lbxgl_mesh_dirty;
LBXGL_API int lbxgl_mesh_lutime;
LBXGL_API LBXGL_MeshGroup *LBXGL_Mesh_GetModel();
LBXGL_API void LBXGL_Mesh_SetDirty();
LBXGL_API void LBXGL_Mesh_AddUndo();
LBXGL_API void LBXGL_Mesh_Undo();
LBXGL_API void LBXGL_Mesh_Redo();
void lbxgl_mesh_draw_star(float *org);
LBXGL_API void LBXGL_Mesh_DrawPrimEditOrtho(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawPrimEdit(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawPrimEditAlpha(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_DrawGroupEdit(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_ClearSelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_ClearSelGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_ClearOpSelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_ClearOpSelGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_ClearSel();
LBXGL_API void LBXGL_Mesh_SelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_SelGroup(LBXGL_MeshGroup *grp);
LBXGL_API int LBXGL_Mesh_PointInMBox(float *org);
LBXGL_API void LBXGL_Mesh_SelPrimBox(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_SelGroupBox(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_ExtrudeFace(LBXGL_MeshPrim *prim, int fn);
LBXGL_API void LBXGL_Mesh_DivideFace(LBXGL_MeshPrim *prim, int fn);
LBXGL_API void LBXGL_Mesh_FlipFace(LBXGL_MeshPrim *prim, int fn);
LBXGL_API void LBXGL_Mesh_CreateFace(LBXGL_MeshPrim *prim);
LBXGL_API LBXGL_MeshPrim *LBXGL_Mesh_CreateCube();
LBXGL_API void LBXGL_Mesh_CalcTranslate(float *org, float *offs);
LBXGL_API float LBXGL_Mesh_CalcRotate(float *org);
LBXGL_API float LBXGL_Mesh_CalcScale(float *org);
LBXGL_API void LBXGL_Mesh_CalcScaleHV(float *org, float *sc);
LBXGL_API void LBXGL_Mesh_CmdSelPrim(LBXGL_MeshPrim *prim, int cmd);
LBXGL_API void LBXGL_Mesh_CmdSelGroup(LBXGL_MeshGroup *grp, int cmd);
LBXGL_API void LBXGL_Mesh_BoxSelPrim(LBXGL_MeshPrim *prim,float *mins, float *maxs);
LBXGL_API void LBXGL_Mesh_BoxSelGroup(LBXGL_MeshGroup *grp, float *mins, float *maxs);
LBXGL_API void LBXGL_Mesh_OpSelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_Mesh_OpSelGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_CmdOpSelPrim(LBXGL_MeshPrim *prim, int cmd, float *org);
LBXGL_API void LBXGL_Mesh_CmdOpSelGroup(LBXGL_MeshGroup *grp, int cmd, float *org);
LBXGL_API void LBXGL_Mesh_CmdMSelPrim(LBXGL_MeshPrim *prim, int cmd, float *org);
LBXGL_API void LBXGL_Mesh_CmdMSelGroup(LBXGL_MeshGroup *grp, int cmd, float *org);
LBXGL_API void LBXGL_Mesh_CopyMSelPrim(LBXGL_MeshGroup *gtmp, LBXGL_MeshPrim *prim, int cmd, float *org);
LBXGL_API void LBXGL_Mesh_CopyMSelGroup(LBXGL_MeshGroup *gtmp, LBXGL_MeshGroup *grp, int cmd, float *org);
LBXGL_API void LBXGL_Mesh_InsertPrim(LBXGL_MeshGroup *gtmp, LBXGL_MeshPrim *prim, float *org);
LBXGL_API void LBXGL_Mesh_InsertGroup(LBXGL_MeshGroup *gtmp, LBXGL_MeshGroup *grp, float *org);
LBXGL_API void LBXGL_Mesh_MergeSelGroup(LBXGL_MeshPrim *prim, LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_Mesh_CmdMultiSel(int cmd);
LBXGL_API void LBXGL_Mesh_CmdSel(int cmd);
LBXGL_API void LBXGL_Mesh_Paste();
//AHSRC:geom/shader.c
LBXGL_API void LBXGL_Shader_LoadIdentityMatrix();
LBXGL_API void LBXGL_Shader_PushMatrix(void);
LBXGL_API void LBXGL_Shader_PopMatrix(void);
LBXGL_API void LBXGL_Shader_MultMatrix(float *mat);
LBXGL_API void LBXGL_Shader_PushMultMatrix(float *mat);
LBXGL_API void LBXGL_Shader_TransformPoint(float *src, float *dst);
LBXGL_API void LBXGL_Shader_TransformPointLocal(float *src, float *dst);
LBXGL_API void LBXGL_Shader_TransformVector(float *src, float *dst);
LBXGL_API void LBXGL_Shader_TransformVectorLocal(float *src, float *dst);
LBXGL_API void LBXGL_Shader_Translatef(float x, float y, float z);
LBXGL_API void LBXGL_Shader_Init(void);
LBXGL_API void LBXGL_Shader_FlushState(void);
LBXGL_TexImage *LBXGL_Shader_BindTexture_AnimMatchSound(LBXGL_TexImage *img);
LBXGL_API void LBXGL_Shader_FlushTexture();
LBXGL_API void LBXGL_Shader_SetupTextureFinal();
LBXGL_API void LBXGL_Shader_SetupTexture();
LBXGL_API void LBXGL_Shader_BindTexture(int num);
LBXGL_API int LBXGL_Shader_GetCurrentTexture(void);
LBXGL_API int LBXGL_Shader_GetCurrentTextureImage(void);
LBXGL_API int LBXGL_Shader_GetCurrentTextureFlags(void);
LBXGL_API int LBXGL_Shader_GetTextureFlags(int num);
LBXGL_API void LBXGL_Shader_SetCurrentMaterial(void);
LBXGL_API void LBXGL_Shader_SetCurrentLight(LBXGL_Light *light);
LBXGL_API void LBXGL_Shader_SetCurrentMixerChannel(int num);
LBXGL_API void LBXGL_Shader_SetGlossEnv(int tex);
LBXGL_API void LBXGL_Shader_SetNoGloss(int fl);
LBXGL_API void LBXGL_Shader_SetBudget(int fl);
LBXGL_API void LBXGL_Shader_SetParallax(int fl);
LBXGL_API void LBXGL_Shader_SetFlat(int fl);
LBXGL_API void LBXGL_Shader_SetFinal(int fl);
LBXGL_API void LBXGL_Shader_BlendFunc(int src, int dst);
LBXGL_API void LBXGL_Shader_SetUseScreen(int tex);
LBXGL_API void LBXGL_Shader_SetUseDepth(int tex);
LBXGL_API void LBXGL_Shader_ForceDraw(int fl);
LBXGL_API void LBXGL_Shader_ClearTexture(void);
LBXGL_API void LBXGL_Shader_BeginPoly(void);
LBXGL_API void LBXGL_Shader_EndPoly(void);
LBXGL_API void LBXGL_Shader_Begin(int prim);
LBXGL_API void LBXGL_Shader_End(void);
LBXGL_API void LBXGL_Shader_EndFlat(void);
LBXGL_API void LBXGL_Shader_EndFlatVA(void);
LBXGL_API void LBXGL_Shader_BeginLight(int prim);
LBXGL_API void LBXGL_Shader_EndLight(void);
LBXGL_API void LBXGL_Shader_BeginShadow(int prim);
LBXGL_API void LBXGL_Shader_EndShadow();
LBXGL_API void LBXGL_Shader_EndPrim_DrawArrays(int prim, float *xyz, float *st, float *norm, float *rgba, int nxyz);
LBXGL_API void LBXGL_Shader_EndPrim_JiggleWarpArrays(int prim, float *xyz, float *st, float *norm, float *rgba, int nxyz);
LBXGL_API void LBXGL_Shader_EndPrim_DoWarp(int prim);
LBXGL_API void LBXGL_Shader_GetWindowOrigin(int *rxs, int *rys);
LBXGL_API void LBXGL_Shader_GetWindowSize(int *rxs, int *rys);
LBXGL_API void LBXGL_Shader_GetWindowMaxSize(int *rxs, int *rys);
LBXGL_API void LBXGL_Shader_GetWindowTexSize(int *rxs, int *rys);
LBXGL_API void LBXGL_Shader_GetWindowMaxTexSize(int *rxs, int *rys);
LBXGL_API void LBXGL_Shader_EndPrim_SetupForShader(int shader);
LBXGL_API void LBXGL_Shader_EndPrim_TeardownForShader(int shader);
LBXGL_API void LBXGL_Shader_EndPrim_DrawShader(int prim, int shader);
LBXGL_API void LBXGL_Shader_EndPrim_DrawGlow(int prim);
LBXGL_API void LBXGL_Shader_EndPrim_DrawTexture(int prim);
LBXGL_API void LBXGL_Shader_EndPrim_DrawGloss(int prim);
LBXGL_API void LBXGL_Shader_EndPrim(int prim);
LBXGL_API void LBXGL_Shader_VertexDownProject();
LBXGL_API void LBXGL_Shader_EndPrimFlat(int prim);
LBXGL_API void LBXGL_Shader_EndPrimFlatNoRGB(int prim);
LBXGL_API void LBXGL_Shader_EndPrimFlatVA(int prim);
LBXGL_API void LBXGL_Shader_VertexCheckExpand();
LBXGL_API void LBXGL_Shader_Vertex3fv(float *v);
LBXGL_API void LBXGL_Shader_Vertex4fv(float *v);
LBXGL_API void LBXGL_Shader_TexCoord2fv(float *v);
LBXGL_API void LBXGL_Shader_Normal3fv(float *v);
LBXGL_API void LBXGL_Shader_Normal4fv(float *v);
LBXGL_API void LBXGL_Shader_Normal3sbv(sbyte *v);
LBXGL_API void LBXGL_Shader_NormalX3fv(float *v);
LBXGL_API void LBXGL_Shader_NormalX4fv(float *v);
LBXGL_API void LBXGL_Shader_NormalY3fv(float *v);
LBXGL_API void LBXGL_Shader_NormalY4fv(float *v);
LBXGL_API void LBXGL_Shader_Color3fv(float *v);
LBXGL_API void LBXGL_Shader_Color4fv(float *v);
LBXGL_API void LBXGL_Shader_Color4ubv(byte *v);
LBXGL_API void LBXGL_Shader_Color3f(float r, float g, float b);
LBXGL_API void LBXGL_Shader_Color4f(float r, float g, float b, float a);
LBXGL_API void LBXGL_Shader_TexCoord2f(float s, float t);
LBXGL_API void LBXGL_Shader_Vertex2f(float x, float y);
LBXGL_API void LBXGL_Shader_Vertex3f(float x, float y, float z);
LBXGL_API void LBXGL_Shader_Normal3f(float x, float y, float z);
LBXGL_API void LBXGL_Shader_Normal4f(float x, float y, float z, float w);
LBXGL_API void LBXGL_Shader_NormalX3f(float x, float y, float z);
LBXGL_API void LBXGL_Shader_NormalY3f(float x, float y, float z);
LBXGL_API void LBXGL_Shader_Vertex4f(float x, float y, float z, float w);
LBXGL_API void LBXGL_Shader_PushMatrix4D();
LBXGL_API void LBXGL_Shader_PopMatrix4D();
LBXGL_API void LBXGL_Shader_LoadIdentity4D();
LBXGL_API void LBXGL_Shader_Translate4D(float x, float y, float z, float w);
LBXGL_API void LBXGL_Shader_RotateAngles4D(float *ang);
LBXGL_API void LBXGL_Shader_RotateAngles4D_f(float yz, float xz, float xy, float xw, float yw, float zw);
LBXGL_API void LBXGL_Shader_DrawSilhouette(float *xyz, int n_xyz, float *norm, int n_norm, int *edge, int n_edge, int flags);
LBXGL_API void LBXGL_Shader_DrawSilhouetteFacePts(float *xyz, int n_xyz,			 float *norm, int n_norm,		 int *edge, int n_edge,			 int *pts, int n_pts,			 int *faces, int n_faces,		 int flags);
LBXGL_API void LBXGL_Shader_DrawArraysSimpleFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz);
LBXGL_API void LBXGL_Shader_DrawArraysNormalFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm);
LBXGL_API void LBXGL_Shader_DrawArraysNormalFlatRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
LBXGL_API void LBXGL_Shader_DrawArraysNormalTex(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm);
LBXGL_API void LBXGL_Shader_DrawArraysNormalTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
LBXGL_API void LBXGL_Shader_DrawElementsSimpleFlat(int prim, int nelem, int elemtype, void *elems, int xyzsize, int xyztype, int xyzstep, void *xyz);
LBXGL_API void LBXGL_Shader_DrawElementsNormalTexRGB(int prim, int nelem, int elemtype, void *elems, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
//AHSRC:geom/shader2.c
LBXGL_API void LBXGL_Shader2_Init();
LBXGL_API void lbxShaderSetMode(int mode);
LBXGL_API void lbxBindTexture(int tex);
LBXGL_API void lbxBegin(int prim);
LBXGL_API void lbxEnd(void);
LBXGL_API void lbxVertex3fv(float *fv);
LBXGL_API void lbxNormal3fv(float *fv);
LBXGL_API void lbxTexCoord2fv(float *fv);
LBXGL_API void lbxColor3fv(float *fv);
LBXGL_API void lbxColor4fv(float *fv);
LBXGL_API void lbxColor3f(float r, float g, float b);
LBXGL_API void lbxColor4f(float r, float g, float b, float a);
LBXGL_API void lbxTexCoord2f(float s, float t);
LBXGL_API void lbxVertex3f(float x, float y, float z);
LBXGL_API void lbxNormal3f(float x, float y, float z);
//AHSRC:geom/particle.c
LBXGL_API void LBXGL_Particle_Init();
LBXGL_API int LBXGL_Particle_LookupType(char *name);
LBXGL_API int LBXGL_Particle_GetType(char *name);
LBXGL_API LBXGL_ParticleInfo *LBXGL_Particle_GetTypeInfo(char *name);
LBXGL_API LBXGL_Particle *LBXGL_Particle_Alloc(char *name, int cnt);
LBXGL_API void LBXGL_Particle_Free(LBXGL_Particle *cur);
LBXGL_API void LBXGL_Particle_Step(float dt);
LBXGL_API void LBXGL_Particle_DrawR(LBXGL_ParticleNode *node);
LBXGL_API void LBXGL_Particle_Draw();
LBXGL_API void LBXGL_Particle_DrawWorld(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_Particle_Spawn(char *ty, int cnt,float *org, float *vel);
LBXGL_API void LBXGL_Particle_SpawnSpread(char *ty, int cnt, int clr, float *org, float *vel, float *svel);
LBXGL_API LBXGL_ParticleNode *LBXGL_Particle_AllocNode();
LBXGL_API void LBXGL_Particle_FreeNode(LBXGL_ParticleNode *tmp);
LBXGL_API void LBXGL_Particle_FreeTreeNode(LBXGL_ParticleNode *tmp);
LBXGL_API LBXGL_ParticleNode *LBXGL_Particle_BuildNodeList(LBXGL_Particle *lst);
LBXGL_API void LBXGL_Particle_RebuildTree();
void LBXGL_Particle_CalcPsiPartR(LBXGL_ParticleNode *node,LBXGL_Particle *self, float *vec);
LBXGL_API void LBXGL_Particle_CalcPsiPart(LBXGL_Particle *self, float *vec);
void lbxgl_part_sprite_draw_deform(LBXGL_Particle *self);
LBXGL_Particle *lbxgl_part_sprite_drawMulti(LBXGL_Particle *self);
LBXGL_Particle *lbxgl_part_sprite_drawMulti_light(LBXGL_Particle *self);
LBXGL_Particle *lbxgl_part_sprite_drawMulti_lightexpose(LBXGL_Particle *self);
void lbxgl_part_sprite_draw(LBXGL_Particle *self);
void lbxgl_part_sprite_draw_light(LBXGL_Particle *self);
void lbxgl_part_sprite_draw_lightexpose(LBXGL_Particle *self);
void lbxgl_part_sprite_draw(LBXGL_Particle *self);
void lbxgl_part_sprite_draw_light(LBXGL_Particle *self);
void lbxgl_part_sprite_draw_lightexpose(LBXGL_Particle *self);
void lbxgl_part_flame_step(LBXGL_Particle *self, float dt);
void lbxgl_part_fall_step(LBXGL_Particle *self, float dt);
void lbxgl_part_colorjitter(LBXGL_Particle *self,float scr, float scg, float scb);
void lbxgl_part_flame_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_flame2_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_flame_blue_step(LBXGL_Particle *self, float dt);
void lbxgl_part_flame_blue_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_smoke_step(LBXGL_Particle *self, float dt);
void lbxgl_part_smoke_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_smoke_light_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_generic_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_square_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_gib_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_metgib_spawn(LBXGL_Particle *self, float *org, float *vel);
int shader_flame_orgvel(int nvec, float *xyz, float *vn, float pwr,float *org, float *vel);
LBXGL_API int shader_flame(LBXGL_TexImage *sdr, int lnum, int nvec,float *xyz, float *st, float *vn, float *clr);
LBXGL_API int shader_flame_blue(LBXGL_TexImage *sdr, int lnum, int nvec,float *xyz, float *st, float *vn, float *clr);
LBXGL_API int shader_smoke(LBXGL_TexImage *sdr, int lnum, int nvec,float *xyz, float *st, float *vn, float *clr);
LBXGL_API int shader_smoke_light(LBXGL_TexImage *sdr, int lnum, int nvec,float *xyz, float *st, float *vn, float *clr);
LBXGL_API int texgen_maze(LBXGL_TexImage *sdr);
//AHSRC:geom/particle2.c
LBXGL_API void LBXGL_Particle_Init2();
LBXGL_API int LBXGL_Particle_DrawSphere(float x, float y, float z,float ra, int texnum);
void lbxgl_part_glob_draw(LBXGL_Particle *self);
void lbxgl_part_glob_spawn(LBXGL_Particle *self, float *org, float *vel);
void lbxgl_part_waterglob_spawn(LBXGL_Particle *self, float *org, float *vel);
//AHSRC:geom/method.c
LBXGL_API LBXGL_RenderMethods *LBXGL_Method_LookupRenderMethods(char *type);
LBXGL_API LBXGL_RenderMethods *LBXGL_Method_GetRenderMethods(char *type);
LBXGL_API LBXGL_RenderMethods *LBXGL_Method_GetRenderMethodsObj(dyt obj);
LBXGL_API int LBXGL_GenericRenderDark(dyt obj);
LBXGL_API int LBXGL_GenericRenderLight(dyt obj);
LBXGL_API int LBXGL_GenericRenderShadow(dyt obj, float *org);
LBXGL_API int LBXGL_GenericRenderFinal(dyt obj);
LBXGL_API int LBXGL_GenericRenderDraw(dyt obj);
LBXGL_API int LBXGL_GenericGetSphere(dyt obj, float *org, float *rad);
//AHSRC:geom/model.c
void LBXGL_Mdl_Init();
void lbxgl_mdl_lock();
void lbxgl_mdl_unlock();
LBXGL_API void *LBXGL_Mdl_LoadModel(char *name);
void *LBXGL_Mdl_LoadModelInstance_cb(LBXGL_ModelState *tmp);
LBXGL_API LBXGL_ModelState *LBXGL_Mdl_LoadModelInstance(char *name);
LBXGL_API LBXGL_ModelState *LBXGL_Mdl_WrapModelInstance(void *mdl);
LBXGL_API void LBXGL_Mdl_SetModel(LBXGL_ModelState *ctx, void *mdl);
LBXGL_API void LBXGL_Mdl_SetModelName(LBXGL_ModelState *ctx, char *mdlname);
LBXGL_API void LBXGL_Mdl_FreeModel(LBXGL_ModelState *ctx);
LBXGL_API LBXGL_ModelState *LBXGL_Mdl_GetCurrentModel(void);
LBXGL_API void LBXGL_Mdl_SetAnim(LBXGL_ModelState *ctx, char *name);
LBXGL_API void LBXGL_Mdl_SetAnimFrame(LBXGL_ModelState *ctx,char *name, int frame);
LBXGL_API void LBXGL_Mdl_SetFrame(LBXGL_ModelState *ctx, int frame);
LBXGL_API void LBXGL_Mdl_SetFrameBone(LBXGL_ModelState *ctx,int bone, float *org, float *qrot, int flag);
LBXGL_API void LBXGL_Mdl_StepTime(LBXGL_ModelState *ctx, float dt);
LBXGL_API float LBXGL_Mdl_LodForDistance(float d);
LBXGL_API float LBXGL_Mdl_LodForModelDistance(LBXGL_ModelState *ctx, float d);
LBXGL_API int LBXGL_Mdl_AlphaModelP(LBXGL_ModelState *ctx);
LBXGL_API int LBXGL_Mdl_ViewModelP(LBXGL_ModelState *ctx);
LBXGL_API float LBXGL_Mdl_CalcModelScale(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_CalcModelTransform(LBXGL_ModelState *ctx, float *tmat);
LBXGL_API void LBXGL_Mdl_CalcModelDelayIndexTransform(LBXGL_ModelState *ctx, float *tmat, int idx);
LBXGL_API void LBXGL_Mdl_CalcModelDelayTransform(LBXGL_ModelState *ctx, float *tmat, float delay);
LBXGL_API void LBXGL_Mdl_CalcModelDelayRelTransform(LBXGL_ModelState *ctx, float *tmat, float delay);
LBXGL_API void LBXGL_Mdl_SaveRelPosition(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_DrawModel(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_DrawModelAlpha(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_DrawModelDark(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_DrawModelLight(LBXGL_ModelState *ctx,LBXGL_Light *light);
LBXGL_API void LBXGL_Mdl_DrawModelShadow(LBXGL_ModelState *ctx,LBXGL_Light *light, float *org, float rad);
LBXGL_API void LBXGL_Mdl_DrawModelFinal(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_DrawModelFlat(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_DrawModelFlatApprox(LBXGL_ModelState *ctx);
LBXGL_API void LBXGL_Mdl_ObbPlaneExtents(float *mins, float *maxs,float *org, float *rot, float *norm, float *rmin, float *rmax);
LBXGL_API void LBXGL_Mdl_BoxObb(float *mins, float *maxs, float *org, float *rot,float *rmins, float *rmaxs);
LBXGL_API void LBXGL_Mdl_BoxModel(LBXGL_ModelState *ctx, float *mins, float *maxs);
LBXGL_API int LBXGL_Mdl_CheckModelLight(LBXGL_ModelState *ctx, LBXGL_Light *light);
LBXGL_API BTGE_BrushDrawFace *LBXGL_Mdl_QueryDrawFaces(LBXGL_ModelState *ctx);
//AHSRC:geom/frac_tree.c
s64 LBXGL_Frac_StepRandom(s64 seed);
float LBXGL_Frac_Random(s64 *rseed);
int lbxgl_fractree_draw(LBXGL_ModelState *ctx);
void LBXGL_Frac_Init();
void LBXGL_Frac_DrawTreeNode(s64 seed);
void LBXGL_Frac_DrawTreeLeaves(s64 seed);
void LBXGL_Frac_DrawTreeR(s64 seed, int level, int height);
void LBXGL_Frac_DrawTree(s64 seed, int height);
LBXGL_API void *LBXGL_Frac_GenModel(char *name);
//AHSRC:brush/brush.c
void LBXGL_Hull_BBoxSphere(float *org, float rad,float *mins, float *maxs);
int LBXGL_Hull_CheckSphereBBox(float *org, float rad,float *mins, float *maxs);
int LBXGL_Brush_CombineTextureFlags(int fl0, int fl1);
int LBXGL_Brush_BuildFace(LBXGL_Brush *brush, int id,float *xyz, float *st, int *rtn);
LBXGL_API void LBXGL_Brush_BuildFaces(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DestroyFaces(LBXGL_Brush *brush);
LBXGL_API int LBXGL_Brush_CheckPointBrush(LBXGL_Brush *brush, float *pt);
LBXGL_API float LBXGL_Brush_DistancePointBrush(LBXGL_Brush *brush, float *pt);
LBXGL_API int LBXGL_Brush_CheckLineBrushClip(LBXGL_Brush *brush,float *sv, float *ev, float *csv, float *cev);
LBXGL_API int LBXGL_Brush_CheckLineBrush(LBXGL_Brush *brush, float *sv, float *ev);
LBXGL_API int LBXGL_Brush_CheckBoxBrush(LBXGL_Brush *brush,float *mins, float *maxs);
LBXGL_API int LBXGL_Brush_CheckSphereBrush(LBXGL_Brush *brush,float *org, float rad);
LBXGL_API int LBXGL_Brush_GetExtents(LBXGL_Brush *brush, float *vec,float *rm, float *rn);
LBXGL_API int LBXGL_Brush_GetPlaneExtents(LBXGL_Brush *brush, float *norm,float *rm, float *rn);
LBXGL_API void LBXGL_Brush_GetBBoxExtents(LBXGL_Brush *brush, float *vec,float *rm, float *rn);
LBXGL_API void LBXGL_Brush_GetBBoxPlaneExtents(LBXGL_Brush *brush, float *norm,float *rm, float *rn);
LBXGL_API LBXGL_Brush *LBXGL_Brush_New(int num);
LBXGL_API LBXGL_Brush *LBXGL_Brush_MakeCubeExtentsTexPos(float mx, float my, float mz, float nx, float ny, float nz, char *tex, float tx, float ty, float tz, int tp);
LBXGL_API LBXGL_Brush *LBXGL_Brush_MakeCubeExtents(float mx, float my, float mz, float nx, float ny, float nz, char *tex);
LBXGL_API LBXGL_Brush *LBXGL_Brush_MakeCube(float x, float y, float z,float xs, float ys, float zs, char *tex);
LBXGL_API void LBXGL_Brush_MakeRoomFromBrush(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_MakeRoomExtents(LBXGL_BrushWorld *world, float mx, float my, float mz, float nx, float ny, float nz, char *floortex, char *walltex, char *ceiltex);
LBXGL_API int LBXGL_Brush_SubtractBrushAB(LBXGL_BrushWorld *world, LBXGL_Brush **rlst, LBXGL_Brush *lbrush, LBXGL_Brush *rbrush);
LBXGL_API void LBXGL_Brush_SubtractBrush(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
LBXGL_API int LBXGL_Brush_SubtractBrushLstBBox(LBXGL_BrushWorld *world, LBXGL_Brush **rlst, LBXGL_Brush *lbrush, float *rmins, float *rmaxs);
LBXGL_API void LBXGL_Brush_SubtractBrushBBox(LBXGL_BrushWorld *world, float *mins, float *maxs);
LBXGL_API void LBXGL_Brush_CheckExpandFaces(LBXGL_Brush *brush, int num);
LBXGL_API LBXGL_Brush *LBXGL_Brush_CloneBrush(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DestroyBrush(LBXGL_Brush *brush);
LBXGL_API LBXGL_Brush *LBXGL_Brush_CloneBrushList(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DestroyBrushList(LBXGL_Brush *brush);
LBXGL_API LBXGL_Brush *LBXGL_Brush_CloneBrushEntList(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DestroyBrushEntList(LBXGL_Brush *brush);
int lbxgl_brush_renderdark(dyt obj);
int lbxgl_brush_renderlight(dyt obj);
int lbxgl_brush_rendershadow(dyt obj, float *org);
int lbxgl_brush_renderfinal(dyt obj);
int lbxgl_brush_getsphere(dyt obj, float *org, float *rad);
LBXGL_API void LBXGL_Brush_Init();
//AHSRC:brush/brush_antiportal.c
LBXGL_API int LBXGL_Brush_CheckBBoxBrushVolume(LBXGL_Brush *brush,float *mins, float *maxs, float *vorg);
LBXGL_API int LBXGL_Brush_CheckBrushBrushVolume(LBXGL_Brush *tbrush, LBXGL_Brush *vbrush, float *vorg);
LBXGL_API int LBXGL_Brush_ClipFaceBrushVolume(LBXGL_Brush *brush,float *vorg, float vrad, float *ipts, float *opts, int npts);
LBXGL_API int LBXGL_Brush_ClipFacePlanes(float *clip, int nclip,float *ipts, float *opts, int npts);
int LBXGL_Brush_CheckBBoxAntiportal(LBXGL_BrushWorld *world, float *mins, float *maxs, float *vorg);
int LBXGL_Brush_CheckNodeAntiportal(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, float *vorg);
int LBXGL_Brush_CheckLineAntiportal(LBXGL_BrushWorld *world, float *sv, float *ev);
int LBXGL_Brush_CheckBBoxBrushVolumeList(LBXGL_BrushWorld *world, LBXGL_Brush *lst, float *mins, float *maxs, float *vorg);
int LBXGL_Brush_CheckBrushBrushVolumeList(LBXGL_BrushWorld *world, LBXGL_Brush *lst, LBXGL_Brush *brush, float *vorg);
//AHSRC:brush/brush_autovis.c
int LBXGL_BrushVis_CheckNodeMarkVisible(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
int LBXGL_BrushVis_CheckNodeMarkVisible2(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushVis_MarkNodeInvisible(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushVis_MarkNodeInvisible2(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushVis_OccludeNodeBrushesMidBrush(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_Brush *brush, float *vorg);
void LBXGL_BrushWorld_OccludeNodeBrushesBrush(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_Brush *brush, float *vorg);
void LBXGL_BrushVis_OccludeNodeBrushesMid(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, float *vorg);
void LBXGL_BrushWorld_OccludeNodeBrushes(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, float *vorg);
LBXGL_API void LBXGL_BrushWorld_DrawTestAutovis(LBXGL_BrushWorld *world);
void LBXGL_BrushVis_DrawNodeBrushesMidQuery(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesQuery(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushVis_FetchNodeBrushesMidQuery(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_FetchNodeBrushesQuery(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
int LBXGL_BrushVis_AlphaBrushP(LBXGL_BrushWorld *world, LBXGL_Brush *cur);
void LBXGL_BrushVis_DrawNodeBrushesMidQueryAlpha(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesQueryAlpha(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
LBXGL_API void LBXGL_BrushWorld_DrawTestAutovis(LBXGL_BrushWorld *world);
//AHSRC:brush/brush_bmodel.c
int LBXGL_BrushModel_CheckBBoxFrustum(float *mins, float *maxs);
int LBXGL_BrushModel_CheckNodeFrustum(LBXGL_BrushNode *node);
int LBXGL_BrushModel_CheckBrushFrustum(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushModel_DrawBrushDark(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushModel_DrawBrushLight(LBXGL_Brush *brush,LBXGL_Light *light);
LBXGL_API void LBXGL_BrushModel_DrawBrushShadow(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushModel_DrawShadowVolume(LBXGL_Brush *brush,float *org, float rad, int flags);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesMidDark(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesDark(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesMidLight(LBXGL_BrushNode *node, LBXGL_Light *light, float *lorg, float rad);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesLight(LBXGL_BrushNode *node, LBXGL_Light *light, float *lorg, float rad);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesMidShadow(LBXGL_BrushNode *node, float *lorg, float rad, int flags);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesShadow(LBXGL_BrushNode *node, float *lorg, float rad, int flags);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesMidFinal(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesFinal(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesMidFlat(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_BrushModel_DrawNodeBrushesFlat(LBXGL_BrushNode *node);
LBXGL_API LBXGL_BrushModel *LBXGL_BrushBSP_BuildBrushModelListFast(LBXGL_Brush *lst);
LBXGL_API void LBXGL_BrushBSP_FreeBrushModel(LBXGL_BrushModel *bmdl);
LBXGL_API void LBXGL_BrushModel_DrawBrushModel(LBXGL_BrushModel *bmdl);
LBXGL_API void LBXGL_BrushModel_DrawBrushModelAlpha(LBXGL_BrushModel *bmdl);
LBXGL_API void LBXGL_BrushModel_DrawBrushModelDark(LBXGL_BrushModel *bmdl);
LBXGL_API void LBXGL_BrushModel_DrawBrushModelLight(LBXGL_BrushModel *bmdl,LBXGL_Light *light, float *org, float rad);
LBXGL_API void LBXGL_BrushModel_DrawBrushModelFinal(LBXGL_BrushModel *bmdl);
LBXGL_API void LBXGL_BrushModel_DrawBrushModelFlat(LBXGL_BrushModel *bmdl);
LBXGL_API void LBXGL_BrushModel_DrawBrushModelShadow(LBXGL_BrushModel *bmdl, float *org, float rad);
LBXGL_API void LBXGL_BrushModel_BoxModel(LBXGL_BrushModel *bmdl,float *mins, float *maxs);
LBXGL_API void LBXGL_BrushModel_GetExtents(LBXGL_BrushModel *bmdl,float *dir, float *min, float *max);
//AHSRC:brush/brush_bsp.c
LBXGL_API LBXGL_BrushNode *LBXGL_BrushBSP_AllocNode();
LBXGL_API void LBXGL_BrushBSP_FreeNode(LBXGL_BrushNode *tmp);
LBXGL_API void LBXGL_BrushBSP_FreeTreeNode(LBXGL_BrushNode *tmp);
LBXGL_API void LBXGL_BrushBSP_BBoxList(LBXGL_Brush *lst, float *mins, float *maxs);
LBXGL_API void LBXGL_BrushBSP_SphereList(LBXGL_Brush *lst,float *org, float *rad);
LBXGL_API float LBXGL_BrushBSP_WeightPlaneBrushList(LBXGL_Brush *lst, float *norm);
LBXGL_API int LBXGL_BrushBSP_BestPlaneBrushList(LBXGL_Brush *lst, float *norm);
LBXGL_API LBXGL_BrushNode *LBXGL_BrushBSP_BuildNodeList(LBXGL_Brush *lst);
LBXGL_API LBXGL_BrushNode *LBXGL_BrushBSP_BuildNodeListFast(LBXGL_Brush *lst);
LBXGL_API int LBXGL_BrushBSP_CheckPointNode(LBXGL_BrushNode *node, float *pt);
LBXGL_API int LBXGL_BrushBSP_LastNodeID(LBXGL_BrushNode *node);
LBXGL_API LBXGL_BrushNode *LBXGL_BrushBSP_BuildTreeListFast(LBXGL_Brush *lst);
LBXGL_API float LBXGL_BrushBSP_WeightPlaneFaceList(LBXGL_BrushTempFace *lst, float *norm);
LBXGL_API int LBXGL_BrushBSP_BestPlaneFaceList(LBXGL_BrushTempFace *lst, float *norm);
LBXGL_API LBXGL_BrushNode *LBXGL_BrushBSP_BuildNodeFaceList(LBXGL_BrushTempFace *lst);
LBXGL_API void LBXGL_BrushBSP_BindNodeBrushList(LBXGL_BrushNode *node, LBXGL_Brush *lst);
LBXGL_API LBXGL_BrushNode *LBXGL_BrushBSP_BuildTreeList(LBXGL_Brush *lst);
LBXGL_Brush *LBXGL_BrushBSP_QueryTreeNodeR(LBXGL_BrushNode *node,LBXGL_Brush *lst, float *org, float rad);
LBXGL_API LBXGL_Brush *LBXGL_BrushBSP_QueryTreeNode(LBXGL_BrushNode *node,float *org, float rad);
LBXGL_API LBXGL_Brush *LBXGL_BrushBSP_TracelineFirst(LBXGL_BrushNode *node,float *sv, float *ev);
LBXGL_API LBXGL_Brush *LBXGL_BrushBSP_TracelineFirstSkip(LBXGL_BrushNode *node,float *sv, float *ev, LBXGL_Brush *skip);
LBXGL_Brush *LBXGL_BrushBSP_GetBrushListR(LBXGL_BrushNode *node, LBXGL_Brush *lst);
LBXGL_API LBXGL_Brush *LBXGL_BrushBSP_GetBrushList(LBXGL_BrushNode *root);
void LBXGL_BrushBSP_BBoxVisR(LBXGL_BrushNode *node, byte *vis,float *mins, float *maxs);
LBXGL_API void LBXGL_BrushBSP_BBoxVis(LBXGL_BrushNode *root, byte *vis,float *mins, float *maxs);
LBXGL_Brush *LBXGL_BrushBSP_QueryTreeNodeVisibleMid(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_Brush *lst, float *org, float rad);
LBXGL_Brush *LBXGL_BrushBSP_QueryTreeNodeVisibleR(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_Brush *lst, float *org, float rad);
LBXGL_API LBXGL_Brush *LBXGL_BrushBSP_QueryTreeNodeVisible(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, float *org, float rad);
//AHSRC:brush/brush_cull.c
LBXGL_API int LBXGL_Brush_CheckSphereFrustum(float *org, float rad);
LBXGL_API int LBXGL_Brush_CheckBBoxFrustum(float *mins, float *maxs);
LBXGL_API int LBXGL_Brush_CheckBBoxFrustumVisible(LBXGL_BrushWorld *world, float *mins, float *maxs);
LBXGL_API int LBXGL_Brush_CheckSphereFrustumVisible(LBXGL_BrushWorld *world, float *org, float rad);
LBXGL_API int LBXGL_Brush_CheckBBoxFrustumDistance(float *mins, float *maxs, float dist);
LBXGL_API int LBXGL_Brush_CheckBBoxFrustumDistanceVisible(LBXGL_BrushWorld *world, float *mins, float *maxs, float dist);
LBXGL_API float LBXGL_Brush_GetBBoxFrustumDistance(float *mins, float *maxs);
LBXGL_API int LBXGL_Brush_CheckBrushFrustum(LBXGL_Brush *brush);
LBXGL_API int LBXGL_Brush_CheckBrushFrustumVisible(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
LBXGL_API int LBXGL_Brush_CheckBrushFrustumVisible2(LBXGL_Brush *brush);
LBXGL_API int LBXGL_Brush_CheckBrushMarkedVisible(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
LBXGL_API int LBXGL_Brush_CheckBrushShadowFrustum(LBXGL_Brush *brush, float *org);
LBXGL_API int LBXGL_Brush_CheckPointBrushShadow(LBXGL_Brush *brush, float *lorg, float lrad, float *pt);
LBXGL_API int LBXGL_Brush_CheckSphereShadowFrustum(float *sorg, float srad, float *lorg, float lrad);
LBXGL_API int LBXGL_Brush_CheckSphereShadowFrustumVisible(LBXGL_BrushWorld *world, float *sorg, float srad, float *lorg, float lrad);
LBXGL_API int LBXGL_Brush_CheckBBoxShadowFrustumVisible(LBXGL_BrushWorld *world,  float *mins, float *maxs, float *lorg, float lrad);
LBXGL_API int LBXGL_Brush_CheckBoxBrushShadow(LBXGL_Brush *brush, float *mins, float *maxs, float *lorg, float lrad);
LBXGL_API int LBXGL_Brush_CheckViewBrushShadow(LBXGL_Brush *brush, float *lorg, float lrad);
LBXGL_API int LBXGL_Brush_CheckViewSphereShadow(float *sorg, float srad, float *lorg, float lrad);
LBXGL_API int LBXGL_Brush_CheckViewSphereShadowFlags(float *sorg, float srad, float *lorg, float lrad, int flags);
//AHSRC:brush/brush_csg.c
LBXGL_BrushTempFace *LBXGL_BrushCSG_AllocFace();
void LBXGL_BrushCSG_FreeFace(LBXGL_BrushTempFace *face);
void LBXGL_BrushCSG_FreeFaceList(LBXGL_BrushTempFace *face);
LBXGL_BrushTempFace *LBXGL_BrushCSG_MakeBrushFaces(LBXGL_Brush *brsh, LBXGL_BrushTempFace *lst);
LBXGL_BrushTempFace *LBXGL_BrushCSG_MakeFacesBrushList(LBXGL_Brush *fst);
LBXGL_BrushTempFace *LBXGL_BrushCSG_LeftFacePlane(LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *lst, float *norm);
LBXGL_BrushTempFace *LBXGL_BrushCSG_RightFacePlane(LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *lst, float *norm);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ChainLeftFacePlane(LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *lst, float *norm);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ChainRightFacePlane(LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *lst, float *norm);
void LBXGL_BrushCSG_FaceExtents(LBXGL_BrushTempFace *face,float *dir, float *rm, float *rn);
void LBXGL_BrushCSG_FacePlaneExtents(LBXGL_BrushTempFace *face,float *norm, float *rm, float *rn);
void LBXGL_BrushCSG_BBoxFace(LBXGL_BrushTempFace *face, float *min, float *max);
void LBXGL_BrushCSG_BBoxFaceList(LBXGL_BrushTempFace *lst,float *min, float *max);
void LBXGL_BrushCSG_GetFaceOrigin(LBXGL_BrushTempFace *face, float *org);
int LBXGL_BrushCSG_CheckFaceBrush(LBXGL_BrushTempFace *face,LBXGL_Brush *brsh);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ClipFaceBrush(LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *lst, LBXGL_Brush *brsh);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ClipFaceListBrush(LBXGL_BrushTempFace *ilst, LBXGL_Brush *brsh);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ClipFaceListBrushList(LBXGL_BrushTempFace *ilst, LBXGL_Brush *blst);
float LBXGL_BrushCSG_ExpandRadius(float *norm, float *rad);
int LBXGL_BrushCSG_CheckFaceBrushExpand(LBXGL_BrushTempFace *face,LBXGL_Brush *brsh, float *rad);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ClipFaceBrushExpand(LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *lst, LBXGL_Brush *brsh, float *rad);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ClipFaceListBrushExpand(LBXGL_BrushTempFace *ilst, LBXGL_Brush *brsh, float *rad);
LBXGL_BrushTempFace *LBXGL_BrushCSG_ClipFaceListBrushListExpand(LBXGL_BrushTempFace *ilst, LBXGL_Brush *blst, float *rad);
void LBXGL_BrushCSG_SplitListFacePlane(LBXGL_BrushTempFace *lst, float *norm, LBXGL_BrushTempFace **rllst, LBXGL_BrushTempFace **rrlst);
LBXGL_BrushTempFace *LBXGL_BrushCSG_MergeFaceList(LBXGL_BrushTempFace *lsta, LBXGL_BrushTempFace *lstb);
LBXGL_BrushTempFace *LBXGL_BrushCSG_BindFaceListNode(LBXGL_BrushNode *root, LBXGL_BrushNode *node, LBXGL_BrushTempFace *ilst);
LBXGL_BrushTempFace *LBXGL_BrushCSG_BuildFaces(LBXGL_BrushNode *root);
void LBXGL_BrushBSP_DrawFacesNodeFlat(LBXGL_BrushNode *node);
void LBXGL_BrushBSP_DrawFacesNodeFlatSphere(LBXGL_BrushNode *node,float *org, float rad);
void LBXGL_BrushBSP_DrawNodeFacesShadow(LBXGL_BrushNode *node);
void LBXGL_BrushBSP_DrawVolFacesNodeFlatSphere(LBXGL_BrushNode *node,float *org, float rad);
//AHSRC:brush/brush_draw.c
LBXGL_API void LBXGL_Brush_DrawBrushQuad3_Shader(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawFacesQuads(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawFaces(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawFacesAlpha(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawFacesShadow(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawBrushFinal(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawBrushDark(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawBrushLight2(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawBrushLightQuad3(LBXGL_Brush *brush,LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawBrushLightQuad3_Shader(LBXGL_Brush *brush,LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawBrushLight3_Shader(LBXGL_Brush *brush,LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawBrushLight3(LBXGL_Brush *brush,LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawList(LBXGL_Brush *fst);
LBXGL_API void LBXGL_Brush_DrawGroup(LBXGL_BrushGroup *grp);
LBXGL_API void LBXGL_Brush_DrawGlow(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawBSPGlow(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_Brush_DrawFlatQuad(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawFlat(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawSolidFlatQuad(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawSolidFlat(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawSolidFlatRGBQuad(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawSolidFlatRGB(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawBSPNodeColorsMid(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_Brush_DrawBSPNodeColors(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_Brush_DrawBSPNodeBlack(LBXGL_BrushNode *node);
LBXGL_API void LBXGL_Brush_DrawBSPShadowNodeColors(LBXGL_BrushNode *node,float *org, float rad);
LBXGL_API void LBXGL_Brush_DrawFluidFlat(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawFluid(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawFluid2(LBXGL_Brush *brush);
LBXGL_API void LBXGL_Brush_DrawLayerFog(float *rgba, float dist, float step, int cnt);
LBXGL_API void LBXGL_Brush_DrawFogVolume(LBXGL_BrushWorld *world, LBXGL_Brush *lst, float *rgba);
LBXGL_API void LBXGL_Brush_DrawFluidSurfaces(LBXGL_BrushWorld *world, LBXGL_Brush *lst);
//AHSRC:brush/brush_draw2.c
LBXGL_BrushDrawFace *LBXGL_BrushDraw2_QueryNodeBrushFacesVisibleMid(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_BrushDrawFace *lst);
LBXGL_BrushDrawFace *LBXGL_BrushDraw2_QueryNodeBrushFacesVisible(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_BrushDrawFace *lst);
LBXGL_BrushDrawFace *LBXGL_BrushDraw2_QueryBrushListFacesVisible(LBXGL_BrushWorld *world, LBXGL_Brush *brush, LBXGL_BrushDrawFace *lst);
LBXGL_BrushDrawFace *LBXGL_BrushDraw2_QueryModelFacesVisible(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst);
LBXGL_BrushDrawFace *LBXGL_BrushDraw2_QueryModelFacesVisibleLight(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst, LBXGL_Light *light);
void LBXGL_BrushDraw2_DrawFaceListDark(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst);
void LBXGL_BrushDraw2_DrawBrushListDark(LBXGL_BrushWorld *world, LBXGL_Brush *lst);
void LBXGL_BrushDraw2_DrawWorldDark(LBXGL_BrushWorld *world);
int LBXGL_BrushDraw2_SplitFaceListTextures(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst, LBXGL_BrushDrawFace **chains);
int LBXGL_BrushDraw2_SplitFaceListLightTextures(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst, LBXGL_BrushDrawFace **chains);
void LBXGL_BrushDraw2_SplitFaceListQuadPoly(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst, LBXGL_BrushDrawFace **rqlst, LBXGL_BrushDrawFace **rplst);
void LBXGL_BrushDraw2_DrawFaceListFinal(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst);
void LBXGL_BrushDraw2_DrawWorldFinal(LBXGL_BrushWorld *world);
void LBXGL_BrushDraw2_DrawFaceListBasic(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst);
void LBXGL_BrushDraw2_DrawWorldBasic(LBXGL_BrushWorld *world);
void LBXGL_BrushDraw2_DrawFaceListLight(LBXGL_BrushWorld *world, LBXGL_BrushDrawFace *lst, LBXGL_Light *light);
void LBXGL_BrushDraw2_DrawBrushesLight(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
//AHSRC:brush/brush_drawcube.c
void LBXGL_BrushWorld_DrawRenderView(LBXGL_BrushWorld *world, float *org, float *rot, int xs, int ys, float aspect, float fov,  LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawRenderCubeFace(LBXGL_BrushWorld *world, float *org, int face, int xs, int ys, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawRenderViewBuffer(LBXGL_BrushWorld *world, float *org, float *rot, int *stbuf, int *zbuf, int xs, int ys, float aspect, float fov,  LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawRenderCubeFaceBuffer(LBXGL_BrushWorld *world, float *org, int face, int *stbuf, int *zbuf, int xs, int ys, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawRenderToCubeMap(LBXGL_BrushWorld *world, float *org, int texnum, int ztexnum, int flags, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawRenderToCubeMap(LBXGL_BrushWorld *world, float *org, int texnum, int ztexnum, int flags, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawGlossCubeMap(LBXGL_BrushWorld *world, int texnum);
LBXGL_API void LBXGL_BrushWorld_DrawRenderToCubeFaces(LBXGL_BrushWorld *world, float *org, int *rtex);
LBXGL_API void LBXGL_BrushWorld_FlushLightEnvMap(LBXGL_BrushWorld *world, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_UpdateLightEnvMap_Delay(LBXGL_BrushWorld *world, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_UpdateLightEnvMap(LBXGL_BrushWorld *world, LBXGL_Light *light);
//AHSRC:brush/brush_drawnode.c
void LBXGL_BrushWorld_PushWorld(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_PopWorld(void);
int LBXGL_BrushWorld_CheckNodeFrustum(LBXGL_BrushNode *node);
int LBXGL_BrushWorld_CheckNodeVisibleFast(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
int LBXGL_BrushWorld_CheckNodeFrustumVisible(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesMidDark(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_GetCamAbsOrg(LBXGL_BrushWorld *world, float *tv);
float LBXGL_BrushWorld_CameraPlaneOffset(LBXGL_BrushWorld *world, float *norm);
void LBXGL_BrushWorld_DrawNodeBrushesDark(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesMidFinal(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesFinal(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesMidFlat(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesFlat(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawBrushesFluidSurface(LBXGL_BrushWorld *world,LBXGL_Brush *lst);
void LBXGL_BrushWorld_DrawBrushesFluidSubmergedBasic(LBXGL_BrushWorld *world, LBXGL_Brush *lst, LBXGL_Brush *brsh);
void LBXGL_BrushWorld_DrawBrushesFluidSubmerged(LBXGL_BrushWorld *world,LBXGL_Brush *lst, LBXGL_Brush *brsh);
void LBXGL_BrushWorld_DrawBrushesFluid(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawBrushesFog(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawBrushesDecal(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawNodeBrushesMid(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushes(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesFastMid(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesFast(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesFastShadowMid(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawNodeBrushesFastShadow(LBXGL_BrushWorld *world, LBXGL_BrushNode *node, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawNodeBrushesMidPointLight(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesPointLight(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesMidAlpha(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_DrawNodeBrushesAlpha(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_UpdateNodeBrushesMidPT(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
void LBXGL_BrushWorld_UpdateNodeBrushesPT(LBXGL_BrushWorld *world, LBXGL_BrushNode *node);
LBXGL_API void LBXGL_BrushWorld_PreLightWorldFast(LBXGL_BrushWorld *world, float *vorg);
LBXGL_API void LBXGL_BrushWorld_DrawWorldFast(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawWorldLightViewFast(LBXGL_BrushWorld *world, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawBrushesFlat(LBXGL_BrushWorld *world, LBXGL_Brush *fst);
LBXGL_API int LBXGL_BrushWorld_DrawSetupFBO(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawBeginFBO(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawEndFBO(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawBrushes(LBXGL_BrushWorld *world, LBXGL_Brush *fst);
LBXGL_API void LBXGL_BrushWorld_DrawUpdateBloom(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawPreRender(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawSetupModels(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawPreRenderSky(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawTestSmallLight(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawTestSmallScreen(LBXGL_BrushWorld *world,int stex, int dtex, float gam, int xs, int ys);
//AHSRC:brush/brush_edit.c
LBXGL_API LBXGL_MeshGroup *lbxgl_brushmesh_mdl;
LBXGL_API LBXGL_BrushWorld *lbxgl_brushmesh_world;
LBXGL_API int lbxgl_brushmesh_mode;
LBXGL_API int lbxgl_brushmesh_cmd;
LBXGL_API LBXGL_BrushWorld *MapEdit_CloneWorld(LBXGL_BrushWorld *world);
LBXGL_API void MapEdit_DestroyWorld(LBXGL_BrushWorld *world);
LBXGL_API void MapEdit_RelinkMesh();
LBXGL_API void MapEdit_SetDirty();
LBXGL_API void MapEdit_AddUndo();
LBXGL_API void MapEdit_Undo();
LBXGL_API void MapEdit_Redo();
LBXGL_API int MapEdit_CheckPrimHasBrush(LBXGL_MeshPrim *prim);
LBXGL_API void MapEdit_CmdSel(int cmd);
LBXGL_API void MapEdit_ClearSel();
LBXGL_API int MapEdit_NewWorld(LBXGL_BrushWorld *world);
LBXGL_API void MapEdit_CreateCube(float x, float y, float z,float xs, float ys, float zs, char *tex);
LBXGL_API void MapEdit_CreateRoomExtents(float mx, float my, float mz, float nx, float ny, float nz, char *floortex, char *walltex, char *ceiltex);
LBXGL_API void MapEdit_CreateRoom(float x, float y, float z,float xs, float ys, float zs, char *floortex, char *walltex, char *ceiltex);
LBXGL_API void MapEdit_SubtractBoxExtents(float mx, float my, float mz, float nx, float ny, float nz);
LBXGL_API void MapEdit_SubtractBox(float x, float y, float z, float xs, float ys, float zs);
//AHSRC:brush/brush_ground.c
void LBXGL_BrushGround_BuildFaceEVec(LBXGL_BrushTempFace *face);
int LBXGL_BrushGround_TraceFace(LBXGL_BrushTempFace *face,float *sp, float *ep, float *io);
LBXGL_GroundPanel *LBXGL_BrushGround_GetPanelForPoint(LBXGL_BrushWorld *world, float *pt, float *io);
LBXGL_GroundPanel *LBXGL_BrushGround_FindGoodPanelForPoint(LBXGL_BrushWorld *world, float *pt);
void LBXGL_BrushGround_GetPanelOrigin(LBXGL_GroundPanel *face, float *org);
int LBXGL_BrushGround_CheckVertexOnFace(LBXGL_BrushTempFace *face, float *vec);
int LBXGL_BrushGround_FindAdjacentFaces(LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *flst);
int LBXGL_BrushGround_FindAdjacentFacesList(LBXGL_BrushTempFace *flst);
int LBXGL_BrushGround_TracelineCheckBlocked(LBXGL_BrushWorld *world,float *sv, float *ev);
int LBXGL_BrushGround_CheckVertexSlideFace(LBXGL_BrushWorld *world,LBXGL_BrushTempFace *face, float *vec);
int LBXGL_BrushGround_FindLinkedFaces(LBXGL_BrushWorld *world,LBXGL_BrushTempFace *face, LBXGL_BrushTempFace *flst);
int LBXGL_BrushGround_FindLinkedFacesList(LBXGL_BrushWorld *world, LBXGL_BrushTempFace *flst);
LBXGL_Brush *LBXGL_BrushGround_GetWorldBrushList(LBXGL_BrushWorld *world);
LBXGL_BrushTempFace *LBXGL_BrushGround_BuildGroundFaceList(LBXGL_BrushWorld *world);
LBXGL_BrushTempFace *LBXGL_BrushGround_GetGroundFaceList(LBXGL_BrushWorld *world);
void LBXGL_BrushGround_FlushGround(LBXGL_BrushWorld *world);
void LBXGL_BrushGround_DrawGroundFaces(LBXGL_BrushWorld *world);
//AHSRC:brush/brush_light.c
void LBXGL_BrushWorld_FlushLightStatic(LBXGL_BrushWorld *world, LBXGL_Light *light);
LBXGL_Brush *LBXGL_BrushWorld_QueryBrushesLightStatic(LBXGL_BrushWorld *world, LBXGL_Light *light);
int LBXGL_BrushWorld_CheckBrushShadowVisible(LBXGL_BrushWorld *world, LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_Brush *LBXGL_BrushWorld_QueryBrushesLight(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
LBXGL_Brush *LBXGL_BrushWorld_QueryBrushesLight2(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
LBXGL_Brush *LBXGL_BrushWorld_QueryBrushesLightPT(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
LBXGL_Brush *LBXGL_BrushWorld_QueryBrushesLightPT2(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
LBXGL_Brush *LBXGL_BrushWorld_QueryBrushesLightB(LBXGL_BrushWorld *world, LBXGL_Light *light);
LBXGL_Brush *LBXGL_BrushWorld_QueryBrushesLight2B(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_BrushWorld_UpdateLightBrushes(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawBrushesLightVol(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawModelsLight(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawModelsShadow(LBXGL_BrushWorld *world, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawModelsDark(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawModelsFinal(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawModelsAlpha(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawModelsFlat(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawModelsPointLight(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawModels(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawModelListLight(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawModelListShadow(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushWorld_DrawModelListDark(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh);
LBXGL_API void LBXGL_BrushWorld_DrawModelListFinal(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh);
LBXGL_API void LBXGL_BrushWorld_DrawModelListAlpha(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh);
LBXGL_API void LBXGL_BrushWorld_DrawModelListFlat(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh);
LBXGL_API void LBXGL_BrushWorld_DrawModelListPointLight(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh);
LBXGL_API void LBXGL_BrushWorld_DrawModelList(LBXGL_BrushWorld *world, LBXGL_ModelState *mesh);
void LBXGL_BrushWorld_DrawShadowsLightDP(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light, int flags);
void LBXGL_BrushWorld_DrawShadowsLight(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light, int flags);
float LBXGL_BrushWorld_SetupLightFrame(LBXGL_BrushWorld *world, LBXGL_Light *light);
float LBXGL_BrushWorld_DrawSetupLight(LBXGL_BrushWorld *world, LBXGL_Light *light);
float LBXGL_BrushWorld_DrawSetupHiLight(LBXGL_BrushWorld *world, LBXGL_Light *light);
float LBXGL_BrushWorld_DrawSetupLightScale(LBXGL_BrushWorld *world, LBXGL_Light *light, float gscale, int flags);
float LBXGL_BrushWorld_DrawSetupLightScale_NoPhong(LBXGL_BrushWorld *world, LBXGL_Light *light, float gscale);
void LBXGL_BrushLight_DrawPrimLight_Reset(LBXGL_Light *light);
int LBXGL_BrushLight_DrawSetupLightImage(LBXGL_Light *light, LBXGL_TexImage *img);
void LBXGL_BrushLight_DrawTeardownLightImage(LBXGL_Light *light, LBXGL_TexImage *img);
void LBXGL_BrushLight_DrawPrimLight(LBXGL_Light *light,int prim, float *xyz, float *st, float *norm, int nxyz, int tex);
void LBXGL_BrushLight_DrawPrimLightImage2(LBXGL_TexImage *img, LBXGL_Light *light, int prim, float *xyz, float *st, float *norm, float *xnorm, float *ynorm, int nxyz);
void LBXGL_BrushLight_DrawPrimLightImage3(LBXGL_TexImage *img, LBXGL_Light *light, int prim, float *xyz, float *st, float *norm, float *rgba, float *xnorm, float *ynorm, int nxyz);
void LBXGL_BrushWorld_DrawBrushesLight(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawBrushesLightFlags(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light, int flags);
void LBXGL_BrushWorld_DrawBrushesHiLight(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
void LBXGL_BrushWorld_InitBrushRGB(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
void LBXGL_BrushWorld_UpdateBrushesLight(LBXGL_BrushWorld *world, LBXGL_Brush *fst, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawForLight(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawForSceneryLight(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawForLightFlags(LBXGL_BrushWorld *world, LBXGL_Light *light, int flags);
void LBXGL_BrushWorld_DrawForLightNoShadow(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_BrushWorld_DrawForHiLight(LBXGL_BrushWorld *world, LBXGL_Light *light);
LBXGL_Light *LBXGL_BrushWorld_QueryLightsCam(LBXGL_BrushWorld *world);
LBXGL_Light *LBXGL_BrushWorld_QueryHiLightsCam(LBXGL_BrushWorld *world);
LBXGL_Light *LBXGL_BrushWorld_QuerySceneryLightsCam(LBXGL_BrushWorld *world);
LBXGL_Light *LBXGL_BrushWorld_QueryGlossMapCam(LBXGL_BrushWorld *world);
LBXGL_Light *LBXGL_BrushWorld_QueryAddLightList(LBXGL_BrushWorld *world, LBXGL_Light *lcur, LBXGL_Light *lst, int flags);
bool LBXGL_BrushWorld_QueryLightsCam_CheckIgnoreFlags(LBXGL_BrushWorld *world, LBXGL_Light *cur, int flags);
LBXGL_Light *LBXGL_BrushWorld_QueryLightsCamFlags(LBXGL_BrushWorld *world, int flags);
LBXGL_Light *LBXGL_BrushWorld_QueryLightsSphere(LBXGL_BrushWorld *world, float *org, float rad);
void LBXGL_BrushWorld_ClearSun(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_SetupSun(LBXGL_BrushWorld *world,float *org, float *clr, float val);
void LBXGL_BrushWorld_UpdateSun(LBXGL_BrushWorld *world);
LBXGL_API LBXGL_Light *lbxWorldNewLight(lbxWorld *wrl);
LBXGL_API LBXGL_Light *lbxWorldFetchLight(lbxWorld *wrl, int id);
LBXGL_API LBXGL_Light *lbxWorldGetLight(lbxWorld *wrl, int id);
//AHSRC:brush/brush_map.c
LBXGL_API void LBXGL_BrushMap_SaveBrushPatch(LBXGL_BrushWorld *world, VFILE *fd, LBXGL_Brush *brush);
int LBXGL_BrushMap_SaveBrushTryCube_CheckTProj(LBXGL_BrushWorld *world, VFILE *fd, LBXGL_Brush *brush, float *tvo, int tty);
LBXGL_API int LBXGL_BrushMap_SaveBrushTryCube(LBXGL_BrushWorld *world, VFILE *fd, LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMap_SaveBrushEntity(LBXGL_BrushWorld *world, VFILE *fd, LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMap_SaveBrush(LBXGL_BrushWorld *world, VFILE *fd, LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMap_SaveEntity(LBXGL_BrushWorld *world, VFILE *fd, LBXGL_SEntity *ent);
LBXGL_API void LBXGL_BrushMap_SaveFile(LBXGL_BrushWorld *world, char *name);
LBXGL_API void LBXGL_BrushMap_LoadPatchPoints(LBXGL_BrushWorld *world, LBXGL_Brush *brush, VFILE *fd);
LBXGL_API void LBXGL_BrushMap_LoadPatch(LBXGL_BrushWorld *world, LBXGL_Brush *brush, VFILE *fd);
LBXGL_API void LBXGL_BrushMap_LoadBrush3(LBXGL_BrushWorld *world, LBXGL_Brush *brush, VFILE *fd);
LBXGL_API void LBXGL_BrushMap_LoadBrush1(LBXGL_BrushWorld *world, LBXGL_Brush *brush, VFILE *fd);
LBXGL_API void LBXGL_BrushMap_LoadBrushEntity(LBXGL_BrushWorld *world, LBXGL_Brush *brush, VFILE *fd);
LBXGL_API LBXGL_Brush *LBXGL_BrushMap_LoadBrush(LBXGL_BrushWorld *world, VFILE *fd);
LBXGL_API LBXGL_Brush *LBXGL_BrushMap_LoadEntityDef(LBXGL_BrushWorld *world, VFILE *fd);
LBXGL_API char *LBXGL_BrushMap_ReadBlockString(LBXGL_BrushWorld *world, VFILE *fd);
LBXGL_API LBXGL_SEntity *LBXGL_BrushMap_LoadEntity(LBXGL_BrushWorld *world, VFILE *fd);
LBXGL_API void LBXGL_BrushMap_ClearMap(LBXGL_BrushWorld *world, char *name);
LBXGL_API void LBXGL_BrushMap_LoadFile(LBXGL_BrushWorld *world, char *name);
//AHSRC:brush/brush_mapmesh.c
LBXGL_API void LBXGL_BrushMap_SaveBrushMesh(LBXGL_BrushWorld *world, VFILE *fd, LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMap_LoadMeshFaces(LBXGL_BrushWorld *world, LBXGL_Brush *brush, VFILE *fd);
LBXGL_API void LBXGL_BrushMap_LoadBrushMesh(LBXGL_BrushWorld *world,LBXGL_Brush *brush, VFILE *fd);
LBXGL_API void LBXGL_BrushMap_LoadBrushMeshList(LBXGL_BrushWorld *world, LBXGL_Brush *brush, VFILE *fd);
//AHSRC:brush/brush_mesh.c
LBXGL_API LBXGL_Brush *LBXGL_BrushMesh_MakeBrushUsingPrim(LBXGL_MeshPrim *prim);
void LBXGL_BrushMesh_BuildFaces(LBXGL_Brush *brush);
void LBXGL_BrushMesh_DestroyFaces(LBXGL_Brush *brush);
LBXGL_API int LBXGL_BrushMesh_CheckPointBrush(LBXGL_Brush *brush, float *pt);
LBXGL_API int LBXGL_BrushMesh_CheckLineBrushClip(LBXGL_Brush *brush,float *sv, float *ev, float *csv, float *cev);
LBXGL_API int LBXGL_BrushMesh_CheckBoxBrush(LBXGL_Brush *brush,float *mins, float *maxs);
LBXGL_API int LBXGL_BrushMesh_CheckSphereBrush(LBXGL_Brush *brush,float *org, float rad);
LBXGL_API int LBXGL_BrushMesh_GetExtents(LBXGL_Brush *brush, float *vec,float *rm, float *rn);
LBXGL_API int LBXGL_BrushMesh_GetPlaneExtents(LBXGL_Brush *brush, float *vec,float *rm, float *rn);
LBXGL_API void LBXGL_BrushMesh_DrawFaces(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMesh_DrawFacesAlpha(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMesh_DrawFacesShadow(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMesh_DrawShadowVolumeDP(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushMesh_DrawShadowVolume(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushMesh_DrawShadowVolumeOrg(LBXGL_Brush *brush, float *lorg, float lrad);
LBXGL_API void LBXGL_BrushMesh_DrawShadowVolumeDPOrgClip(LBXGL_Brush *brush, LBXGL_Light *light, float *lorg, float lrad);
LBXGL_API void LBXGL_BrushMesh_DrawBrushDark(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMesh_DrawBrushLight2(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMesh_DrawBrushLight3(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushMesh_DrawSolidFlat(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMesh_DrawFlat(LBXGL_Brush *brush);
void LBXGL_BrushMesh_InitMeshRGB(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushMesh_UpdateMeshLight(LBXGL_BrushWorld *world, LBXGL_Brush *brush, LBXGL_Light *light);
//AHSRC:brush/brush_meshedit.c
LBXGL_API LBXGL_MeshGroup *LBXGL_BrushMesh_GetModel();
LBXGL_API void LBXGL_BrushMesh_SetDirty();
LBXGL_API void LBXGL_BrushMesh_AddUndo();
void lbxgl_brushmesh_draw_star(float *org);
LBXGL_API void LBXGL_BrushMesh_DrawPrimEditOrtho(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_DrawPrimEdit(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_DrawPrimEditAlpha(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_DrawGroupEdit(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_BrushMesh_ClearSelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_ClearSelGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_BrushMesh_ClearOpSelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_ClearOpSelGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_BrushMesh_ClearSel();
LBXGL_API void LBXGL_BrushMesh_SelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_SelGroup(LBXGL_MeshGroup *grp);
LBXGL_API int LBXGL_BrushMesh_PointInMBox(float *org);
LBXGL_API void LBXGL_BrushMesh_SelPrimBox(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_SelGroupBox(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_BrushMesh_ExtrudeFace(LBXGL_MeshPrim *prim, int fn);
LBXGL_API void LBXGL_BrushMesh_DivideFace(LBXGL_MeshPrim *prim, int fn);
LBXGL_API void LBXGL_BrushMesh_FlipFace(LBXGL_MeshPrim *prim, int fn);
LBXGL_API void LBXGL_BrushMesh_CreateFace(LBXGL_MeshPrim *prim);
LBXGL_API LBXGL_MeshPrim *LBXGL_BrushMesh_CreateCube();
LBXGL_API void LBXGL_BrushMesh_CalcTranslate(float *org, float *offs);
LBXGL_API float LBXGL_BrushMesh_CalcRotate(float *org);
LBXGL_API float LBXGL_BrushMesh_CalcScale(float *org);
LBXGL_API void LBXGL_BrushMesh_CalcScaleHV(float *org, float *sc);
LBXGL_API void LBXGL_BrushMesh_CmdSelPrim(LBXGL_MeshPrim *prim, int cmd);
LBXGL_API void LBXGL_BrushMesh_CmdSelGroup(LBXGL_MeshGroup *grp, int cmd);
LBXGL_API void LBXGL_BrushMesh_BoxSelPrim(LBXGL_MeshPrim *prim,float *mins, float *maxs);
LBXGL_API void LBXGL_BrushMesh_BoxSelGroup(LBXGL_MeshGroup *grp, float *mins, float *maxs);
LBXGL_API void LBXGL_BrushMesh_OpSelPrim(LBXGL_MeshPrim *prim);
LBXGL_API void LBXGL_BrushMesh_OpSelGroup(LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_BrushMesh_CmdOpSelPrim(LBXGL_MeshPrim *prim, int cmd, float *org);
LBXGL_API void LBXGL_BrushMesh_CmdOpSelGroup(LBXGL_MeshGroup *grp, int cmd, float *org);
LBXGL_API void LBXGL_BrushMesh_CmdMSelPrim(LBXGL_MeshPrim *prim, int cmd, float *org);
LBXGL_API void LBXGL_BrushMesh_CmdMSelGroup(LBXGL_MeshGroup *grp, int cmd, float *org);
LBXGL_API void LBXGL_BrushMesh_CopyMSelPrim(LBXGL_MeshGroup *gtmp, LBXGL_MeshPrim *prim, int cmd, float *org);
LBXGL_API void LBXGL_BrushMesh_CopyMSelGroup(LBXGL_MeshGroup *gtmp, LBXGL_MeshGroup *grp, int cmd, float *org);
LBXGL_API void LBXGL_BrushMesh_InsertPrim(LBXGL_MeshGroup *gtmp, LBXGL_MeshPrim *prim, float *org);
LBXGL_API void LBXGL_BrushMesh_InsertGroup(LBXGL_MeshGroup *gtmp, LBXGL_MeshGroup *grp, float *org);
LBXGL_API void LBXGL_BrushMesh_MergeSelGroup(LBXGL_MeshPrim *prim, LBXGL_MeshGroup *grp);
LBXGL_API void LBXGL_BrushMesh_CmdMultiSel(int cmd);
LBXGL_API void LBXGL_BrushMesh_CmdSel(int cmd);
LBXGL_API void LBXGL_BrushMesh_Paste();
LBXGL_API void LBXGL_BrushMesh_ReprojectPrim(LBXGL_MeshPrim *prim);
//AHSRC:brush/brush_patch.c
LBXGL_BrushPatchPoint *LBXGL_BrushPatch_GetPoint(LBXGL_Brush *brush, int x, int y);
void LBXGL_BrushPatch_InterpolateVecXYZ(float *xyz0, float *uv0, float *xyz1, float *uv1, float *xyz2, float *uv2, float *xyz, float *uv, float t);
void LBXGL_BrushPatch_Interpolate5VecXYZ(float *xyz0, float *uv0, float *xyz1, float *uv1, float *xyz2, float *uv2, float *xyz3, float *uv3, float *xyz4, float *uv4, float *xyz, float *uv, float t);
void LBXGL_BrushPatch_InterpolateVecPts(LBXGL_BrushPatchPoint *pt0, LBXGL_BrushPatchPoint *pt1, LBXGL_BrushPatchPoint *pt2, LBXGL_BrushPatchPoint *pt, float t);
void LBXGL_BrushPatch_Interpolate5VecPts(LBXGL_BrushPatchPoint *pt0, LBXGL_BrushPatchPoint *pt1, LBXGL_BrushPatchPoint *pt2, LBXGL_BrushPatchPoint *pt3, LBXGL_BrushPatchPoint *pt4, LBXGL_BrushPatchPoint *pt, float t);
void LBXGL_BrushPatch_InterpolateVec(LBXGL_Brush *brush, LBXGL_BrushPatchPoint *vec, float xpos, float ypos);
void LBXGL_BrushPatch_InterpolateVec(LBXGL_Brush *brush, LBXGL_BrushPatchPoint *vec, float xpos, float ypos);
void LBXGL_BrushPatch_BuildFaces(LBXGL_Brush *brush);
void LBXGL_BrushPatch_DestroyFaces(LBXGL_Brush *brush);
void LBXGL_BrushPatch_CalcNormalPts(LBXGL_BrushPatchPoint *pt0, LBXGL_BrushPatchPoint *pt1, LBXGL_BrushPatchPoint *pt2, float *norm);
LBXGL_API int LBXGL_BrushPatch_CheckPointBrush(LBXGL_Brush *brush, float *pt);
LBXGL_API int LBXGL_BrushPatch_CheckLineBrushClip(LBXGL_Brush *brush,float *sv, float *ev, float *csv, float *cev);
LBXGL_API int LBXGL_BrushPatch_CheckBoxBrush(LBXGL_Brush *brush,float *mins, float *maxs);
LBXGL_API int LBXGL_BrushPatch_CheckSphereBrush(LBXGL_Brush *brush,float *org, float rad);
LBXGL_API int LBXGL_BrushPatch_GetExtents(LBXGL_Brush *brush, float *vec,float *rm, float *rn);
LBXGL_API int LBXGL_BrushPatch_GetPlaneExtents(LBXGL_Brush *brush, float *vec,float *rm, float *rn);
LBXGL_API void LBXGL_BrushPatch_DrawFaces(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushPatch_DrawFacesAlpha(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushPatch_DrawFacesShadow(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushPatch_DrawShadowVolumeDP(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushPatch_DrawShadowVolume(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushPatch_DrawShadowVolumeOrg(LBXGL_Brush *brush, float *org, float rad);
LBXGL_API void LBXGL_BrushPatch_DrawShadowVolumeDPOrgClip(LBXGL_Brush *brush, LBXGL_Light *light, float *lorg, float lrad);
LBXGL_API void LBXGL_BrushPatch_DrawBrushDark(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushPatch_DrawBrushLight2(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushPatch_DrawBrushLight3(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushPatch_DrawBrushLight3(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_BrushPatch_DrawSolidFlat(LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushPatch_DrawFlat(LBXGL_Brush *brush);
void LBXGL_BrushPatch_InitPatchRGB(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
LBXGL_API void LBXGL_BrushPatch_UpdatePatchLight(LBXGL_BrushWorld *world, LBXGL_Brush *brush, LBXGL_Light *light);
//AHSRC:brush/brush_path.c
int LBXGL_BrushPath_ClassifyPanelsForPoint(LBXGL_GroundPanel *panel, LBXGL_GroundPanel **lst, int mlst, float *point);
int LBXGL_BrushPath_FindPathPanelList(LBXGL_BrushWorld *world, LBXGL_GroundPanel **lst, float *src, float *dst);
int LBXGL_BrushPath_FindPathPanelList_R(LBXGL_BrushPath_FindPathPanelList_State *ctx, LBXGL_GroundPanel *panel);
//AHSRC:brush/brush_portal.c
LBXGL_Brush *LBXGL_BrushBSP_GetNodeBrushListR(LBXGL_BrushNode *node, LBXGL_Brush *lst);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_AllocPortal();
void LBXGL_BrushBSP_FreePortal(LBXGL_BrushTempPortal *prt);
void LBXGL_BrushBSP_PortalExtents(LBXGL_BrushTempPortal *prt,float *dir, float *rm, float *rn);
void LBXGL_BrushBSP_PortalPlaneExtents(LBXGL_BrushTempPortal *prt,float *norm, float *rm, float *rn);
int LBXGL_BrushBSP_CheckPortalBrush(LBXGL_BrushTempPortal *prt,LBXGL_Brush *brsh);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_ClipPortalBrush(LBXGL_BrushTempPortal *prt, LBXGL_BrushTempPortal *lst, LBXGL_Brush *brsh);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_ClipPortalListBrush(LBXGL_BrushTempPortal *prt, LBXGL_Brush *brsh);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_SplitPortalPlane(LBXGL_BrushTempPortal *prt, LBXGL_BrushTempPortal *lst, float *norm);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_LeftPortalPlane(LBXGL_BrushTempPortal *prt, LBXGL_BrushTempPortal *lst, float *norm);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_RightPortalPlane(LBXGL_BrushTempPortal *prt, LBXGL_BrushTempPortal *lst, float *norm);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_SplitPortalListPlane(LBXGL_BrushTempPortal *prt, float *norm);
void LBXGL_BrushBSP_SplitListPortalPlaneLeft(LBXGL_BrushTempPortal *lst, float *norm, LBXGL_BrushTempPortal **rllst, LBXGL_BrushTempPortal **rrlst);
void LBXGL_BrushBSP_SplitListPortalPlaneRight(LBXGL_BrushTempPortal *lst, float *norm, LBXGL_BrushTempPortal **rllst, LBXGL_BrushTempPortal **rrlst);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_MergePortalList(LBXGL_BrushTempPortal *lsta, LBXGL_BrushTempPortal *lstb);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_BuildPortalListNode(LBXGL_BrushNode *root, LBXGL_BrushNode *node, LBXGL_BrushTempPortal *lst);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_ClipPortalListNodeLeft(LBXGL_BrushNode *root, LBXGL_BrushNode *node, LBXGL_BrushTempPortal *ilst);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_ClipPortalListNodeRight(LBXGL_BrushNode *root, LBXGL_BrushNode *node, LBXGL_BrushTempPortal *ilst);
void LBXGL_BrushBSP_SplitChainPortalPlaneLeft(LBXGL_BrushTempPortal *lst, float *norm, LBXGL_BrushTempPortal **rllst, LBXGL_BrushTempPortal **rrlst);
void LBXGL_BrushBSP_SplitChainPortalPlaneRight(LBXGL_BrushTempPortal *lst, float *norm, LBXGL_BrushTempPortal **rllst, LBXGL_BrushTempPortal **rrlst);
void LBXGL_BrushBSP_BindPortalListLeftNode(LBXGL_BrushNode *root, LBXGL_BrushNode *node, LBXGL_BrushTempPortal *ilst);
void LBXGL_BrushBSP_BindPortalListRightNode(LBXGL_BrushNode *root, LBXGL_BrushNode *node, LBXGL_BrushTempPortal *ilst);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_DropOutsidePortals(LBXGL_BrushTempPortal *ilst);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_BuildPortals(LBXGL_BrushNode *root);
void LBXGL_BrushBSP_DrawPortalList(LBXGL_BrushNode *root,LBXGL_BrushTempPortal *lst);
//AHSRC:brush/brush_prefab.c
LBXGL_API LBXGL_BrushWorld *LBXGL_BrushPrefab_LookupName(char *name);
LBXGL_API LBXGL_BrushWorld *LBXGL_BrushPrefab_GetName(char *name);
LBXGL_API LBXGL_BrushModel *LBXGL_BrushPrefab_GetBModelName(char *name);
//AHSRC:brush/brush_shadow.c
LBXGL_API void LBXGL_Brush_DrawShadowVolume2(LBXGL_Brush *brush, float *org);
LBXGL_API void LBXGL_Brush_DrawShadowVolumeDP(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawShadowVolumeDP2(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawShadowVolumeDP3(LBXGL_Brush *brush, LBXGL_Light *light, int flags);
LBXGL_API void LBXGL_Brush_DrawShadowVolumeDP3Quad(LBXGL_Brush *brush, LBXGL_Light *light, int flags);
LBXGL_API int LBXGL_Brush_DrawShadowVolumeDP3ClipPlanes(LBXGL_Brush *brush, LBXGL_Light *light, int flags, float *clip);
LBXGL_API int LBXGL_Brush_DrawShadowVolumeDPOrgClipPlanes(LBXGL_Brush *brush, float *lorg, float lrad, int flags, float *clip);
LBXGL_API void LBXGL_Brush_DrawShadowVolume(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawShadowVolumeDPClip(LBXGL_Brush *brush, LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawShadowVolumeDPOrgClip(LBXGL_Brush *brush, LBXGL_Light *light, float *lorg, float lrad);
LBXGL_API void LBXGL_Brush_DrawShadowVolumeDPOrg(LBXGL_Brush *brush, LBXGL_Light *light, float *lorg, float lrad);
LBXGL_API int LBXGL_Brush_DrawPolyShadowVolumeDPOrgClipPlanes(float *xyz, int *pts, int nvec, float *lorg, float lrad, int flags, float *clip);
LBXGL_API void LBXGL_Brush_DrawPolyShadowVolumeDPOrgClip(float *xyz, int *idx, int nvec, LBXGL_Light *light, float *lorg, float lrad, int flags);
LBXGL_API void LBXGL_Brush_DrawPolyShadowVolumeDPOrg(float *xyz, int *pts, int nvec, LBXGL_Light *light, float *lorg, float lrad, int flags);
LBXGL_API void LBXGL_Brush_DrawPrimShadowArrays(int prim, float *xyz, float *st, float *norm, float *rgba, int nxyz, LBXGL_Light *light);
LBXGL_API void LBXGL_Brush_DrawEdgeShadowVolume_ViewCap(float *xyza, float *xyzb, int n_xyz, float *a_norm, int n_norm,		 int *a_tedge, int n_tedge,		 LBXGL_Light *light, float *lorg, float lrad, int flags);
LBXGL_API void LBXGL_Brush_DrawEdgeShadowVolume(float *a_xyz, int n_xyz,		 float *a_norm, int n_norm,		 int *a_edge, int n_edge,		 int *a_pts, int n_pts,			 int *a_face, int n_face,		 LBXGL_Light *light, float *lorg, float lrad, int flags);
//AHSRC:brush/brush_solidmap.c
int LBXGL_BrushSolid_CheckBBoxBrush(LBXGL_Brush *brush,float *mins, float *maxs);
int LBXGL_BrushSolid_CheckBBoxBrushList(LBXGL_Brush *lst,float *mins, float *maxs);
LBXGL_Brush *LBXGL_BrushBSP_QueryBoxNodeR(LBXGL_BrushNode *node,LBXGL_Brush *lst, float *mins, float *maxs);
LBXGL_Brush *LBXGL_BrushBSP_QueryBoxNode(LBXGL_BrushNode *node,float *mins, float *maxs);
int LBXGL_BrushSolid_BuildBoxMapBits(LBXGL_BrushNode *root,byte *bits, int xs, int ys, int zs, float *org, float *box);
//AHSRC:brush/brush_vis2.c
LBXGL_BrushTempPortal *LBXGL_BrushBSP_QueryPortalsNode(LBXGL_BrushTempPortal *prt, LBXGL_BrushNode *node);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_QueryPortalsNodeList(LBXGL_BrushTempPortal *prt, LBXGL_BrushNode *node, LBXGL_BrushTempPortal *lst);
int LBXGL_BrushBSP_CheckPortalAOrg(LBXGL_BrushTempPortal *prt,LBXGL_BrushTempPortal *prta, float *org);
int LBXGL_BrushBSP_CheckPortalAB(LBXGL_BrushTempPortal *prt,LBXGL_BrushTempPortal *prta, LBXGL_BrushTempPortal *prtb);
int LBXGL_BrushBSP_CheckPortalAB(LBXGL_BrushTempPortal *prt,LBXGL_BrushTempPortal *prta, LBXGL_BrushTempPortal *prtb);
LBXGL_BrushTempPortal *LBXGL_BrushBSP_QueryPortalsNodeListClipAB(LBXGL_BrushTempPortal *prt, LBXGL_BrushNode *node, LBXGL_BrushTempPortal *lst, LBXGL_BrushTempPortal *prta, LBXGL_BrushTempPortal *prtb);
int LBXGL_BrushBSP_GetVis(byte *vis, int id);
void LBXGL_BrushBSP_SetVis(byte *vis, int id);
void LBXGL_BrushBSP_BuildVisNodePrtB(LBXGL_BrushNode *root,LBXGL_BrushNode *node, LBXGL_BrushTempPortal *prt, byte *vis, LBXGL_BrushTempPortal *plst, LBXGL_BrushTempPortal *pcura, LBXGL_BrushTempPortal *pcurb);
void LBXGL_BrushBSP_BuildVisNodePrt(LBXGL_BrushNode *root,LBXGL_BrushNode *node, LBXGL_BrushTempPortal *prt, byte *vis, LBXGL_BrushTempPortal *plst, LBXGL_BrushTempPortal *pcur);
void LBXGL_BrushBSP_BuildVisNode(LBXGL_BrushNode *root,LBXGL_BrushNode *node, LBXGL_BrushTempPortal *prt);
void LBXGL_BrushBSP_BuildVisR(LBXGL_BrushNode *root,LBXGL_BrushNode *node, LBXGL_BrushTempPortal *prt);
void LBXGL_BrushBSP_BuildVis(LBXGL_BrushNode *root,LBXGL_BrushTempPortal *prt);
LBXGL_BrushNode *LBXGL_BrushBSP_LookupLeafPoint(LBXGL_BrushNode *node, float *org);
int LBXGL_BrushBSP_GetPVSLeafID(LBXGL_BrushNode *root, float *org);
int LBXGL_BrushBSP_CheckLeafVisBBox(LBXGL_BrushNode *node, float *mins, float *maxs, byte *vis);
int LBXGL_BrushBSP_CheckBrushPVS(LBXGL_BrushNode *root,LBXGL_Brush *brush, float *org);
int LBXGL_BrushBSP_CheckPointPVS(LBXGL_BrushNode *root,float *pt, float *org);
//AHSRC:brush/brush_world.c
LBXGL_API LBXGL_BrushWorld *LBXGL_Brush_NewWorld();
LBXGL_API void LBXGL_Brush_FreeWorld(LBXGL_BrushWorld *world);
LBXGL_API LBXGL_BrushWorld *LBXGL_Brush_CloneWorld(LBXGL_BrushWorld *world);
LBXGL_API LBXGL_SEntity *LBXGL_BrushWorld_FindSEnt(LBXGL_BrushWorld *world, LBXGL_SEntity *last, char *key, char *val);
LBXGL_API void LBXGL_BrushWorld_AddEntityBrush(LBXGL_BrushWorld *world, LBXGL_SEntity *ent, LBXGL_Brush *brsh);
LBXGL_API void LBXGL_BrushWorld_AddBrush(LBXGL_BrushWorld *world, LBXGL_Brush *brsh);
LBXGL_API LBXGL_SEntity *LBXGL_BrushWorld_NewBrushEntity(LBXGL_BrushWorld *world, char *type);
LBXGL_API void LBXGL_BrushWorld_DrawBuildFast(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushWorld_DrawBuild(LBXGL_BrushWorld *world);
LBXGL_API LBXGL_Brush *LBXGL_BrushWorld_LookupBrush(LBXGL_BrushWorld *world, int id);
LBXGL_API LBXGL_SEntity *LBXGL_BrushWorld_LookupSEntityId(LBXGL_BrushWorld *world, int id);
LBXGL_API LBXGL_SEntity *LBXGL_BrushWorld_GetSEntityId(LBXGL_BrushWorld *world, int id);
LBXGL_API LBXGL_Brush *LBXGL_BrushWorld_CreateBrushId(LBXGL_BrushWorld *world, int sentid, int brushid);
LBXGL_API void LBXGL_BrushWorld_DrawFlush(LBXGL_BrushWorld *world);
float lbxgl_brush_roundsnap(float val, int snap);
float lbxgl_brush_roundsnap2(float val, int snap);
void lbxgl_brush_v3fdiv(float *a, float *b, float *c);
int LBXGL_BrushWorld_CheckBrushNormalValidP(LBXGL_BrushWorld *world, LBXGL_Brush *brush, float *norm, int fn);
LBXGL_API void LBXGL_BrushWorld_DrawFlushBrush(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
void LBXGL_BrushWorld_UpdateBrushFace(LBXGL_BrushWorld *world, LBXGL_Brush *brush, int id);
LBXGL_API LBXGL_Brush *LBXGL_BrushWorld_TraceLineBrush(LBXGL_BrushWorld *world,float *s, float *e, LBXGL_Brush *ignore);
LBXGL_API void LBXGL_BrushWorld_DrawControlsBrush(LBXGL_BrushWorld *world, LBXGL_Brush *brush);
void LBXGL_BrushWorld_DrawFlashlight(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawLightTexture(LBXGL_BrushWorld *world);
void LBXGL_BrushWorld_DrawScreenTexture(LBXGL_BrushWorld *world, int tex, float gam);
void LBXGL_BrushWorld_DrawScreenTexture(LBXGL_BrushWorld *world, int tex, float gam);
void LBXGL_BrushWorld_DrawShaderOverlay(LBXGL_BrushWorld *world, char *name);
void LBXGL_BrushWorld_DrawScreenShaderOverlay(LBXGL_BrushWorld *world, char *name, int tex_screen, int tex_depth, float gam);
void LBXGL_BrushWorld_DrawColorOverlay(LBXGL_BrushWorld *world,float *rgba);
void LBXGL_BrushWorld_DrawScreenTexture2(LBXGL_BrushWorld *world, int tex, float gam);
void LBXGL_BrushWorld_DrawScreenTexture2(LBXGL_BrushWorld *world, int tex, float gam);
LBXGL_API LBXGL_ModelState *LBXGL_BrushWorld_LookupModelStateEntNum(LBXGL_BrushWorld *world, int entnum);
LBXGL_API LBXGL_ModelState *LBXGL_BrushWorld_LookupModelStateMdlNum(LBXGL_BrushWorld *world, int mdlnum);
LBXGL_API LBXGL_ModelState *LBXGL_BrushWorld_GetModelStateEntNum(LBXGL_BrushWorld *world, int entnum);
LBXGL_API void LBXGL_BrushWorld_AddModelStateEntNum(LBXGL_BrushWorld *world, LBXGL_ModelState *mdl, int entnum);
LBXGL_API int LBXGL_BrushWorld_DeleteModelStateEntNum(LBXGL_BrushWorld *world, int entnum);
//AHSRC:voxel/vox_barf.c
void LBXGL_Voxel_BarfEmitChunk(LBXGL_BARF_RenderContext *bctx, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_BarfEmitChunkAlpha(LBXGL_BARF_RenderContext *bctx, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_BarfEmitRegion(LBXGL_BARF_RenderContext *bctx, LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_BarfEmitRegionList(LBXGL_BARF_RenderContext *bctx, LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_BarfEmitWorld(LBXGL_BARF_RenderContext *bctx, LBXGL_BrushWorld *world);
void LBXGL_Voxel_EmitWorldBarf(LBXGL_BrushWorld *world);
//AHSRC:voxel/vox_build.c
void LBXGL_Voxel_GenerateChunks(LBXGL_BrushWorld *world);
float LBXGL_Voxel_CalcChunkCameraDistance(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_RecalcStaticLight(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_CheckUploadVBO(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_CheckUploadSolidVBO(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_CheckUploadAlphaVBO(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_CheckFlushVBO(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_MarkDirtyVBO(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_CheckFlushChunkLights(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_CheckFlushRegion(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rgn);
void *LBXGL_Voxel_CheckRebuildChunk_cb(void *data);
void LBXGL_Voxel_CheckRebuildChunk(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_CheckChunkEmitSound(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_FlushChunkEmitSound(LBXGL_BrushWorld *world, LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_RebuildRegionVisible_SortVisChksR(LBXGL_VoxelChunk **arr, int n, int rd);
void LBXGL_Voxel_RebuildRegionVisible_SortVisChks(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_RebuildRegionVisible_StatVisChunks(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_RebuildRegionVisible(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_RebuildWorldVisibleChunks(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rlst);
void LBXGL_Voxel_RebuildRegionListVisible(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_UnlinkRegion(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_RebuildWorldRegions(LBXGL_BrushWorld *world);
//AHSRC:voxel/vox_draw.c
void LBXGL_Voxel_DrawChunkSimpleFlat(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkFlat(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkFlatRGB(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkFlatVLRGB(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkFlatVLRGB_AlphaLightMat(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkLight_AlphaLightMat(LBXGL_VoxelChunk *chk, LBXGL_Light *light);
void LBXGL_Voxel_DrawChunkLight(LBXGL_VoxelChunk *chk, LBXGL_Light *light);
void LBXGL_Voxel_DrawChunkShadow(LBXGL_VoxelChunk *chk, LBXGL_Light *light);
void LBXGL_Voxel_DrawChunkForLight(LBXGL_VoxelChunk *chk, LBXGL_Light *light);
void LBXGL_Voxel_DrawChunkStaticLight(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkFinal(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkFinalRGB(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkFinal_AlphaLightMat(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkBasic(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkAlphaRGB(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkSimpleAlphaFlat(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkAlphaFlat(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkAlphaFluidFlat(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkAlphaFluid(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawChunkAlphaFluid2(LBXGL_VoxelChunk *chk);
void LBXGL_Voxel_DrawBeginTranslateForRegion(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawEndTranslateForRegion(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionLight(LBXGL_VoxelRegion *rgn, LBXGL_Light *light);
void LBXGL_Voxel_DrawRegionShadow(LBXGL_VoxelRegion *rgn, LBXGL_Light *light);
void LBXGL_Voxel_DrawRegionForLight(LBXGL_VoxelRegion *rgn, LBXGL_Light *light);
void LBXGL_Voxel_DrawRegionFlat(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionFlatRGB(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionFlatVLRGB(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionStaticLight(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionFinal(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionFinalRGB(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionBasic(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionAlphaRGB(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionAlphaFlat(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionAlphaFluidFlat(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionAlphaFluid(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionAlphaFluid2(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionListFlat(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListLight(LBXGL_VoxelRegion *lst, LBXGL_Light *light);
void LBXGL_Voxel_DrawRegionListShadow(LBXGL_VoxelRegion *lst, LBXGL_Light *light);
void LBXGL_Voxel_DrawRegionListForLight(LBXGL_VoxelRegion *lst, LBXGL_Light *light);
void LBXGL_Voxel_DrawRegionListFlatRGB(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListFlatVLRGB(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListStaticLight(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListFinal(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListFinalRGB(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListBasic(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListAlphaRGB(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListAlphaFlat(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListAlphaFluidFlat(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListAlphaFluid(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawRegionListAlphaFluid2(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawWorldChunksAlphaRGB(LBXGL_BrushWorld *world);
void LBXGL_Voxel_BeginTranslateForWorld(LBXGL_BrushWorld *world);
void LBXGL_Voxel_EndTranslateForWorld(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldDark(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldLight(LBXGL_BrushWorld *world,LBXGL_Light *light);
void LBXGL_Voxel_DrawWorldShadows(LBXGL_BrushWorld *world,LBXGL_Light *light);
void LBXGL_Voxel_DrawWorldForLight(LBXGL_BrushWorld *world,LBXGL_Light *light);
void LBXGL_Voxel_DrawWorldPointLight(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldFinal(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldStaticLight(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldFlat(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorld(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldAlpha(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldFluidFlat(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldFluid(LBXGL_BrushWorld *world);
void LBXGL_Voxel_DrawWorldFluid2(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_Voxel_DrawFluidFogVolume(LBXGL_BrushWorld *world, float *rgba);
LBXGL_API void LBXGL_Voxel_DrawFluidSurfaceFogVolume(LBXGL_BrushWorld *world);
//AHSRC:voxel/vox_light.c
int LBXGL_Voxel_CheckFluidCam(LBXGL_BrushWorld *world);
float LBXGL_Voxel_GetCameraSunGamma(LBXGL_BrushWorld *world);
float LBXGL_Voxel_GetPointSunGamma(LBXGL_BrushWorld *world, float *org);
void LBXGL_Voxel_GetPointSunLightColor(LBXGL_BrushWorld *world, float *org, float *rgb);
LBXGL_API LBXGL_Light *LBXGL_Voxel_QueryLightsCamRegion(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rgn, LBXGL_Light *lst);
LBXGL_API LBXGL_Light *LBXGL_Voxel_QueryLightsCamWorld(LBXGL_BrushWorld *world);
LBXGL_API LBXGL_ModelState *LBXGL_Voxel_QueryModelsVisibleRegion(LBXGL_BrushWorld *world, LBXGL_VoxelRegion *rgn, LBXGL_ModelState *lst);
LBXGL_API LBXGL_ModelState *LBXGL_Voxel_QueryModelsVisibleWorld(LBXGL_BrushWorld *world);
void LBXGL_Voxel_ClearWorldPointLight(LBXGL_BrushWorld *world);
void LBXGL_Voxel_UpdateWorldPointLight(LBXGL_BrushWorld *world,LBXGL_Light *light);
//AHSRC:voxel/vox_misc.c
int LBXGL_Voxel_MapTexture(LBXGL_VoxelChunk *chk, int id);
int LBXGL_Voxel_MapTexture2(LBXGL_VoxelChunk *chk, int id);
void LBXGL_Voxel_BoxChunk(LBXGL_VoxelChunk *chk,float *mins, float *maxs);
void LBXGL_Voxel_BoxRegion(LBXGL_VoxelRegion *rgn,float *mins, float *maxs);
void LBXGL_Voxel_BoxChunkRel(LBXGL_VoxelChunk *chk,float *mins, float *maxs);
void LBXGL_Voxel_BoxRegionRel(LBXGL_VoxelRegion *rgn,float *mins, float *maxs);
bool LBXGL_Voxel_CheckChunkFrustum(LBXGL_VoxelChunk *chk);
bool LBXGL_Voxel_CheckChunkFrustumDist(LBXGL_VoxelChunk *chk, float dist);
void LBXGL_Voxel_BoxChunkVoxelRel(LBXGL_VoxelChunk *chk,int x, int y, int z, float *mins, float *maxs);
bool LBXGL_Voxel_CheckChunkLight(LBXGL_VoxelChunk *chk, LBXGL_Light *light);
bool LBXGL_Voxel_CheckRegionLight(LBXGL_VoxelRegion *rgn, LBXGL_Light *light);
float LBXGL_Voxel_GetChunkFrustumDistance(LBXGL_VoxelChunk *chk);
bool LBXGL_Voxel_CheckRegionFrustum(LBXGL_VoxelRegion *rgn);
bool LBXGL_Voxel_CheckRegionChunkFrustumDistance(LBXGL_VoxelRegion *rgn, int x, int y, int z, float dist);
bool LBXGL_Voxel_CheckRegionDistance(LBXGL_VoxelRegion *rgn, float dist);
//AHSRC:voxel/vox_query.c
void LBXGL_Voxel_DrawRegionQuery(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_DrawRegionListQuery(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_DrawWorldQuery(LBXGL_BrushWorld *world);
void LBXGL_Voxel_FakeRegionQuery(LBXGL_VoxelRegion *rgn);
void LBXGL_Voxel_FakeRegionListQuery(LBXGL_VoxelRegion *lst);
void LBXGL_Voxel_FakeWorldQuery(LBXGL_BrushWorld *world);
//AHSRC:geom/barf_array.c
LBXGL_BARF_RenderArray *LBXGL_BARF_AllocRenderArray();
LBXGL_BARF_RenderContext *LBXGL_BARF_AllocRenderContext();
void LBXGL_BARF_CheckExpandContextArrays(LBXGL_BARF_RenderContext *ctx);
LBXGL_BARF_RenderArray *LBXGL_BARF_GetRenderArrayForTexture(LBXGL_BARF_RenderContext *ctx, int texnum);
void LBXGL_BARF_ResetContextArrays(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_CheckExpandArrayTriangles(LBXGL_BARF_RenderArray *arr, int ntris);
void LBXGL_BARF_UpdateArrayVBO(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_UpdateContextArrayVBOs(LBXGL_BARF_RenderContext *ctx);
void lbxgl_barf_copyArrayXYZ(lbxgl_barf_xyzfloat *dst, int nvec,int vsize, int vtype, int vstep, void *src);
void lbxgl_barf_copyArrayST(lbxgl_barf_stfloat *dst, int nvec,int vsize, int vtype, int vstep, void *src);
u32 lbxgl_barf_Float3ToNvFloat(float x, float y, float z);
u32 lbxgl_barf_UByte3ToNvFloat(int x, int y, int z);
u32 lbxgl_barf_SByte3ToNvFloat(int x, int y, int z);
void lbxgl_barf_copyArrayNorm(lbxgl_barf_nvfloat *dst, int nvec,int vsize, int vtype, int vstep, void *src);
lbxgl_barf_clrfloat lbxgl_barf_float2clrfloat(float val);
lbxgl_barf_clrfloat lbxgl_barf_halffloat2clrfloat(u16 val);
lbxgl_barf_clrfloat lbxgl_barf_ubyte2clrfloat(int val);
lbxgl_barf_clrfloat lbxgl_barf_sbyte2clrfloat(int val);
void lbxgl_barf_copyArrayRGBA(lbxgl_barf_clrfloat *dst, int nvec,int vsize, int vtype, int vstep, void *src, int vsize2, int vtype2, int vstep2, void *src2);
void LBXGL_BARF_ArraysEmitTriangles(LBXGL_BARF_RenderArray *arr, int ntris, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int xnormsize, int xnormtype, int xnormstep, void *xnorm, int ynormsize, int ynormtype, int ynormstep, void *ynorm, int rgbsize, int rgbtype, int rgbstep, void *rgb, int srgbsize, int srgbtype, int srgbstep, void *srgb, int vrgbsize, int vrgbtype, int vrgbstep, void *vrgb, int trgbsize, int trgbtype, int trgbstep, void *trgb);
void *lbxgl_barf_arrayIndexOffset(int base,int vsize, int vtype, int *rvstep, void *vec);
void LBXGL_BARF_ArraysEmitVertices(LBXGL_BARF_RenderArray *arr,  int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int xnormsize, int xnormtype, int xnormstep, void *xnorm, int ynormsize, int ynormtype, int ynormstep, void *ynorm, int rgbsize, int rgbtype, int rgbstep, void *rgb, int srgbsize, int srgbtype, int srgbstep, void *srgb, int vrgbsize, int vrgbtype, int vrgbstep, void *vrgb, int trgbsize, int trgbtype, int trgbstep, void *trgb);
void LBXGL_BARF_DrawArraysSimpleFlat(LBXGL_BARF_RenderArray *arr,  int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz);
void LBXGL_BARF_DrawArraysNormalFlat(LBXGL_BARF_RenderArray *arr,  int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm);
void LBXGL_BARF_DrawArraysNormalFlatRGB(LBXGL_BARF_RenderArray *arr,  int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
void LBXGL_BARF_DrawArraysNormalTex(LBXGL_BARF_RenderArray *arr,  int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm);
void LBXGL_BARF_DrawArraysNormalTexRGB(LBXGL_BARF_RenderArray *arr,  int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
void LBXGL_BARF_DrawArraysTexRGB(LBXGL_BARF_RenderArray *arr,  int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int rgbsize, int rgbtype, int rgbstep, void *rgb);
//AHSRC:geom/barf_draw.c
void LBXGL_BARF_DrawArraySimpleFlat(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayFlat(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayFlatRGB(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayFlatVLRGB(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayLight(LBXGL_BARF_RenderArray *arr, LBXGL_Light *light);
void LBXGL_BARF_DrawArrayForLight(LBXGL_BARF_RenderArray *arr, LBXGL_Light *light);
void LBXGL_BARF_DrawArrayStaticLight(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayFinal(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayFinalRGB(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayBasic(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayAlpha(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayAlphaRGB(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayAlphaFluidFlat(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayAlphaFluid(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawArrayAlphaFluid2(LBXGL_BARF_RenderArray *arr);
void LBXGL_BARF_DrawContextDark(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextLight(LBXGL_BARF_RenderContext *ctx,LBXGL_Light *light);
void LBXGL_BARF_DrawContextShadows(LBXGL_BARF_RenderContext *ctx,LBXGL_Light *light);
void LBXGL_BARF_DrawContextForLight(LBXGL_BARF_RenderContext *ctx,LBXGL_Light *light);
void LBXGL_BARF_DrawContextPointLight(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextFinal(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextStaticLight(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextFlat(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContext(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextAlpha(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextFluidFlat(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextFluid(LBXGL_BARF_RenderContext *ctx);
void LBXGL_BARF_DrawContextFluid2(LBXGL_BARF_RenderContext *ctx);
//AHSRC:draw2d/misc_draw2d.c
LBXGL_API void LBXGL_BrushDraw2D_BindWorld(LBXGL_BrushWorld *world);
LBXGL_API LBXGL_BrushWorld *LBXGL_BrushDraw2D_GetBoundWorld(void);
LBXGL_API int LBXGL_BrushDraw2D_HandleInput(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushDraw2D_DrawWorld2D(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushDraw2D_DrawWorldSky2D(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushDraw2D_UpdateWorld2D(LBXGL_BrushWorld *world, float dt);
LBXGL_API BTGE_DrawableObject2D *LBXGL_BrushDraw2D_CreateObject(LBXGL_BrushWorld *world);
LBXGL_API void LBXGL_BrushDraw2D_DestroyObj(BTGE_DrawableObject2D *obj);
LBXGL_API void LBXGL_BrushDraw2D_DrawImage(BTGE_DrawableObject2D *obj);
LBXGL_API void LBXGL_BrushDraw2D_DrawImage2(BTGE_DrawableObject2D *obj);
LBXGL_API void LBXGL_BrushDraw2D_UpdateDefault(BTGE_DrawableObject2D *obj, float dt);
LBXGL_API void LBXGL_BrushDraw2D_UpdateDefaultFall(BTGE_DrawableObject2D *obj, float dt);
LBXGL_API void LBXGL_BrushDraw2D_UpdateDefaultFallTemp(BTGE_DrawableObject2D *obj, float dt);
LBXGL_API vec2 LBXGL_BrushDraw2D_UpdateJitterVec2(vec2 v, float r);
LBXGL_API void LBXGL_BrushDraw2D_UpdateEmitter(BTGE_DrawableObject2D *obj, float dt);
LBXGL_API BTGE_DrawableObject2D *LBXGL_BrushDraw2D_CreateObjectSize(LBXGL_BrushWorld *world, float ox, float oy, float xs, float ys);
LBXGL_API BTGE_DrawableObject2D *LBXGL_BrushDraw2D_CreateObjectSizeObject(LBXGL_BrushWorld *world, float ox, float oy, float xs, float ys, dyt obj);
LBXGL_API BTGE_DrawableObject2D *LBXGL_BrushDraw2D_CreateDisplayImage(LBXGL_BrushWorld *world, char *name, float ox, float oy, float xs, float ys);
LBXGL_API BTGE_DrawableObject2D *LBXGL_BrushDraw2D_CreateDisplayImage2(char *name, float ox, float oy, float xs, float ys);
LBXGL_API BTGE_DrawableObject2D *LBXGL_BrushDraw2D_CreateSpriteEmitter(LBXGL_BrushWorld *world, char *name, float ox, float oy, float xs, float ys, float vx, float vy, float rate);
LBXGL_API BTGE_DrawableObject2D *LBXGL_BrushDraw2D_CreateSpriteEmitter2(char *name, float ox, float oy, float xs, float ys, float vx, float vy, float rate);
LBXGL_API void LBXGL_BrushDraw2D_SetObjectImage(BTGE_DrawableObject2D *obj, char *name);
LBXGL_API void LBXGL_BrushDraw2D_SetObjectOrdinal(BTGE_DrawableObject2D *obj, float ord);
LBXGL_API void LBXGL_BrushDraw2D_SetObjectAngle(BTGE_DrawableObject2D *obj, float ang);
LBXGL_API void LBXGL_BrushDraw2D_SetObjectAngularVelocity(BTGE_DrawableObject2D *obj, float avel);
LBXGL_API void LBXGL_BrushDraw2D_SetObjectOrigin(BTGE_DrawableObject2D *obj, vec2 org);
LBXGL_API void LBXGL_BrushDraw2D_SetObjectVelocity(BTGE_DrawableObject2D *obj, vec2 vel);
LBXGL_API void LBXGL_BrushDraw2D_SetObjectCenter(BTGE_DrawableObject2D *obj, vec2 offs);
LBXGL_API int LBXGL_BrushDraw2D_CheckPointObject(BTGE_DrawableObject2D *obj, vec2 pt);
LBXGL_API vec2 LBXGL_BrushDraw2D_CalcObjectCenter(BTGE_DrawableObject2D *obj);
//AHSRC:draw2d/draw2d_sequence.c
LBXGL_API BTGE_DrawSequence2D *LBXGL_Draw2D_AllocSequence(void);
LBXGL_API void LBXGL_Draw2D_WriteSequence_FramePos(VFILE *fd,BTGE_DrawSequence2D_FramePos *frpos, int entid);
LBXGL_API void LBXGL_Draw2D_WriteSequence_Frame(VFILE *fd,BTGE_DrawSequence2D_Frame *frame, int frnum);
LBXGL_API void LBXGL_Draw2D_WriteSequence_Entity(VFILE *fd,BTGE_DrawSequence2D *seq, BTGE_DrawableObject2D *ent);
LBXGL_API void LBXGL_Draw2D_WriteSequence(VFILE *fd,BTGE_DrawSequence2D *seq);
LBXGL_API void LBXGL_Draw2D_CheckExpandFrame(BTGE_DrawSequence2D *seq, int frnum);
LBXGL_API void LBXGL_Draw2D_CheckFrameEntID(BTGE_DrawSequence2D_Frame *frame, int entid);
LBXGL_API void LBXGL_Draw2D_ReadSequence_Frame(VFILE *fd,BTGE_DrawSequence2D *seq, int frnum);
LBXGL_API void LBXGL_Draw2D_ReadSequence_Entity(VFILE *fd,BTGE_DrawSequence2D *seq, int entid);
LBXGL_API void LBXGL_Draw2D_ReadSequence(VFILE *fd,BTGE_DrawSequence2D *seq);
LBXGL_API BTGE_DrawSequence2D *LBXGL_Draw2D_LoadSequence(char *name);
LBXGL_API int LBXGL_Draw2D_SaveSequence(char *name,BTGE_DrawSequence2D *seq);
LBXGL_API int LBXGL_Draw2D_SequenceInterpolateEntityPosition(BTGE_DrawSequence2D *seq, int entid, float frame, BTGE_DrawSequence2D_FramePos *pos);
LBXGL_API BTGE_DrawableObject2D *LBXGL_Draw2D_SequenceLookupEntity(BTGE_DrawSequence2D *seq, int entid);
LBXGL_API int LBXGL_Draw2D_SequenceUpdateEntity(BTGE_DrawSequence2D *seq, int entid, float frame);
LBXGL_API int LBXGL_Draw2D_SequenceUpdateEntities(BTGE_DrawSequence2D *seq, float frame);
LBXGL_API int LBXGL_Draw2D_SequenceUpdate(BTGE_DrawSequence2D *seq, float dt);
LBXGL_API int LBXGL_Draw2D_SequenceInsertFrame(BTGE_DrawSequence2D *seq, int frame);
LBXGL_API int LBXGL_Draw2D_SequenceDeleteFrame(BTGE_DrawSequence2D *seq, int frame);
LBXGL_API int LBXGL_Draw2D_SequenceDeleteFramePos(BTGE_DrawSequence2D *seq, int frnum, int entid);
LBXGL_API BTGE_DrawableObject2D *LBXGL_Draw2D_SequenceCreateEntity(BTGE_DrawSequence2D *seq);
//AHSRC:draw2d/draw2d_seq_ui.c
void LBXGL_Draw2D_DrawStar(float *org);
int LBXGL_Draw2DSeq_HandleInput_Select(BTGE_DrawSequence2D *seq);
vec2 LBXGL_Draw2DSeq_HandleInput_GetMouseRelPos(BTGE_DrawSequence2D *seq);
vec2 LBXGL_Draw2DSeq_HandleInput_GetMouseRelLPos(BTGE_DrawSequence2D *seq);
void LBXGL_Draw2DSeq_SetSelectTexture(BTGE_DrawSequence2D *seq, char *tex);
void LBXGL_Draw2DSeq_SetSelectSize(BTGE_DrawSequence2D *seq,float xs, float ys);
void LBXGL_Draw2DSeq_HandleInput_UpdateSelection(BTGE_DrawSequence2D *seq);
int LBXGL_Draw2DSeq_HandleInput_Insert(BTGE_DrawSequence2D *seq);
int LBXGL_Draw2DSeq_HandleInput_Delete(BTGE_DrawSequence2D *seq);
int LBXGL_Draw2DSeq_HandleInput(BTGE_DrawSequence2D *seq);
void LBXGL_Draw2DSeq_DrawUI(BTGE_DrawSequence2D *seq);
void LBXGL_Draw2DSeq_UpdateUI(BTGE_DrawSequence2D *seq, float dt);
LBXGL_API void LBXGL_Draw2DSeq_BeginEditNew(void);
LBXGL_API int ConCmd_draw2d_new(char **a);
LBXGL_API int ConCmd_draw2d_settexture(char **a);
LBXGL_API int ConCmd_draw2d_setsize(char **a);
LBXGL_API void LBXGL_Draw2DSeq_Init(void);
//AHSRC:brush/terr_draw.c
LBXGL_API void LBXGL_Terrain_GenTerrain(LBXGL_BrushWorld *world);
void LBXGL_Terrain_DrawFlat(LBXGL_BrushWorld *world);
void LBXGL_Terrain_DrawFlatNorm(LBXGL_BrushWorld *world);
void LBXGL_Terrain_DrawFlatNormClip(LBXGL_BrushWorld *world,int mx, int my, int nx, int ny);
void LBXGL_Terrain_DrawDark(LBXGL_BrushWorld *world);
void LBXGL_Terrain_DrawLight(LBXGL_BrushWorld *world, LBXGL_Light *light);
void LBXGL_Terrain_DrawFinal(LBXGL_BrushWorld *world);
void LBXGL_Terrain_DrawTexture(LBXGL_BrushWorld *world);
//AHSRC:geom/shadow.c
LBXGL_API float LBXGL_Shadow_LightGammaPoint(LBXGL_Light *light, float *org, float rad);
LBXGL_API float LBXGL_Shadow_LightGammaDist(LBXGL_Light *light, float dist);
LBXGL_API float LBXGL_Shadow_LightGammaRadius(LBXGL_Light *light);
LBXGL_API float LBXGL_Shadow_LightGammaEffectRadius(LBXGL_Light *light, float gamma);
LBXGL_API void LBXGL_Shadow_DrawShadowsLight(dyt fst, LBXGL_Light *light);
LBXGL_API float LBXGL_Shadow_SetupLight(LBXGL_Light *light);
LBXGL_API void LBXGL_Shadow_DrawObjectsLight(dyt fst, LBXGL_Light *light);
LBXGL_API void LBXGL_Shadow_DrawObjects(dyt fst, LBXGL_Light *lights);
LBXGL_API LBXGL_LightNode *LBXGL_Light_AllocNode();
LBXGL_API void LBXGL_Light_FreeNode(LBXGL_LightNode *tmp);
LBXGL_API void LBXGL_Light_FreeTreeNode(LBXGL_LightNode *tmp);
LBXGL_API LBXGL_LightNode *LBXGL_Light_BuildNodeList(LBXGL_Light *lst);
void LBXGL_Shadow_RebuildTree();
LBXGL_Light *LBXGL_Light_QueryTreeNodeR(LBXGL_LightNode *node,LBXGL_Light *llst, float *org, float rad);
LBXGL_API LBXGL_Light *LBXGL_Light_QueryTreeNode(LBXGL_LightNode *node,float *org, float rad);
//AHSRC:format/sprite.c
LBXGL_API int LBXGL_Sprite_SetCamera(float x, float y, float z);
LBXGL_API int LBXGL_Sprite_SetCameraAngles(float x, float y, float z);
LBXGL_API int LBXGL_Sprite_SetCameraOrgRot(float *org, float *rot);
LBXGL_API int LBXGL_Sprite_Render(LBXGL_Sprite *spr,float *org, float ang, char *seq, int fr, float scale);
LBXGL_API int LBXGL_Sprite_RenderState(LBXGL_SpriteState *ctx, float *org);
LBXGL_API int LBXGL_Sprite_RenderStateScale(LBXGL_SpriteState *ctx, float *org, float scale);
LBXGL_API int LBXGL_Sprite_BoxState(LBXGL_SpriteState *ctx,float *mins, float *maxs);
LBXGL_SpriteState *LBXGL_Sprite_NewStateInstance(LBXGL_Sprite *spr);
LBXGL_API void LBXGL_Sprite_SetFrame(LBXGL_SpriteState *ctx, int frame);
LBXGL_API int LBXGL_Sprite_RenderFlareFrag(int tnum, float xsz, float ysz, float *org);
LBXGL_API int LBXGL_Sprite_RenderFlare(LBXGL_LensFlare *flare, float *org, float ra);
LBXGL_API int LBXGL_Sprite_RenderFlareName(char *name, float *org, float ra);
LBXGL_API LBXGL_LensFlare *LBXGL_Sprite_LookupFlare(char *name);
LBXGL_API LBXGL_LensFlare *LBXGL_Sprite_CreateFlare(char *name,char *bname, float bsz, char *fname, float fsz, float fdist, int fcnt);
LBXGL_API int LBXGL_Sprite_Init();
LBXGL_Sprite *LBXGL_Sprite_LoadSprites(char *inf);
LBXGL_Sprite *LBXGL_Sprite_LoadSprites(char *inf);
LBXGL_Sprite *LBXGL_Sprite_LoadSprites(char *inf);
//AHSRC:format/asm.c
int LBXGL_ASM_Init();
int LBXGL_ASM_LoadFile(char *name);
void LBXGL_ASM_RegisterPtr(char *name, void *ptr);
void *LBXGL_ASM_LookupPtr(char *name);
int LBXGL_ASM_GetVarByteIdx(char *name, int i);
int LBXGL_ASM_GetVarShortIdx(char *name, int i);
int LBXGL_ASM_GetVarIntIdx(char *name, int i);
void LBXGL_ASM_SetVarByteIdx(char *name, int i, int val);
void LBXGL_ASM_SetVarShortIdx(char *name, int i, int val);
void LBXGL_ASM_SetVarIntIdx(char *name, int i, int val);
int LBXGL_ASM_GetVarByte(char *name);
int LBXGL_ASM_GetVarShort(char *name);
int LBXGL_ASM_GetVarInt(char *name);
void LBXGL_ASM_SetVarByte(char *name, int val);
void LBXGL_ASM_SetVarShort(char *name, int val);
void LBXGL_ASM_SetVarInt(char *name, int val);
//AHSRC:format/effect.c
int lbxgl_lasereffect_draw(LBXGL_ModelState *ctx);
LBXGL_API void *LBXGL_LaserEffect_Create(float *sv, float *ev, float *clr, float rad);
//AHSRC:format/fmt_qmdl.c
LBXGL_QMDL *LBXGL_QuakeMDL_Load(char *name, char *pal);
LBXGL_QMDL *LBXGL_QuakeMD2_Load(char *name);
int LBXGL_QuakeMDL_Render(LBXGL_QMDL *mdl, int frame, int skin);
int LBXGL_QuakeMDL_RenderFlat(LBXGL_QMDL *mdl, int frame, int skin);
LBXGL_QMDL *LBXGL_QuakeMDL_LoadModel(char *name);
int LBXGL_QuakeMDL_IndexFrame(LBXGL_QMDL *mdl, char *name);
int LBXGL_QuakeMDL_GenPartVerts(LBXGL_QMDL *mdl, int *parts);
int LBXGL_QuakeMDL_RenderState(LBXGL_ModelState *ctx);
int LBXGL_QuakeMDL_RenderStateFlat(LBXGL_ModelState *ctx);
int LBXGL_QuakeMDL_RenderStateDark(LBXGL_ModelState *ctx);
int LBXGL_QuakeMDL_RenderStateLight(LBXGL_ModelState *ctx);
int LBXGL_QuakeMDL_RenderStateFinal(LBXGL_ModelState *ctx);
int LBXGL_QuakeMDL_RenderStateShadow(LBXGL_ModelState *ctx,float *org, float rad);
//AHSRC:format/fmt_qmd3.c
LBXGL_QMDL *LBXGL_QuakeMD3_Load(char *name);
int LBXGL_QuakeMD4_LoadSurfs(LBXGL_QMDL *tmp,quake_md4lod_t *lod, VFILE *fd, int base);
LBXGL_QMDL *LBXGL_QuakeMD4_StageLoad(LBXGL_QMDL *tmp, VFILE *fd);
int LBXGL_QuakeMD3_Render(LBXGL_QMDL *mdl, int frame, int skin);
int LBXGL_QuakeMD3_RenderFlat(LBXGL_QMDL *mdl, int frame, int skin);
//AHSRC:format/fmt_smd.c
void LBXGL_FmtSmd_FromAngles(float *a, float *b);
void LBXGL_FmtSmd_ToMatrix(float *a, float *b);
int LBXGL_FmtSmd_LoadBaseBones(LBXGL_SkelMesh *mdl, VFILE *fd);
int LBXGL_FmtSmd_LoadBaseFrame(LBXGL_SkelMesh *mdl, VFILE *fd);
int LBXGL_FmtSmd_IndexSkin(char *name);
int LBXGL_FmtSmd_IndexXYZ(int b, float *v);
int LBXGL_FmtSmd_IndexNorm(int b, float *v);
int LBXGL_FmtSmd_IndexST(float *v);
int LBXGL_FmtSmd_LoadTriangles(LBXGL_SkelMesh *mdl, VFILE *fd);
LBXGL_SkelMesh *LBXGL_FmtSmd_LoadReference(char *name, char *base);
int LBXGL_FmtSmd_LoadAnimBones(LBXGL_SkelAnim *anim, VFILE *fd);
int LBXGL_FmtSmd_LoadAnimFrames(LBXGL_SkelAnim *anim, VFILE *fd);
LBXGL_SkelAnim *LBXGL_FmtSmd_LoadAnimation(LBXGL_SkelMesh *mdl, char *sname, char *fname);
void *LBXGL_FmtSmd_String2Object(char *str);
LBXGL_SkelMesh *LBXGL_FmtSmd_LoadModelInfo(char *name);
int LBXGL_FmtSmd_IndexAnim(LBXGL_SkelMesh *mdl, char *name);
int LBXGL_FmtSmd_CalcTransforms(LBXGL_SkelMesh *mdl, int seq, int frame,float *xforms);
int LBXGL_FmtSmd_CalcTransformsQuat(float *orgs, float *quats, int num,float *xforms);
int LBXGL_FmtSmd_RenderModel(LBXGL_SkelMesh *mdl, float *xforms);
int LBXGL_FmtSmd_RenderBox(float *xform, float *min, float *max, float *c);
int LBXGL_FmtSmd_RenderHitboxes(LBXGL_SkelMesh *mdl, float *xforms);
int LBXGL_FmtSmd_RenderBones(LBXGL_SkelMesh *mdl, float *xforms);
int LBXGL_FmtSmd_Render(LBXGL_SkelMesh *mdl, int seq, int frame);
int LBXGL_FmtSmd_SetStateFrame(LBXGL_SkelState *state, int seq, int frame);
//AHSRC:format/fmt_ac3d.c
int LBXGL_AC3D_IndexXYZ(LBXGL_MeshPrim *prim, float x, float y, float z);
int LBXGL_AC3D_IndexST(LBXGL_MeshPrim *prim, float s, float t);
void LBXGL_AC3D_LoadSurface(LBXGL_MeshPrim *prim, VFILE *fd);
int LBXGL_AC3D_LoadSurfaces(LBXGL_MeshPrim *prim, int num, VFILE *fd);
char *LBXGL_AC3D_GenAbs(char *base, char *name);
LBXGL_MeshPrim *LBXGL_AC3D_LoadPolyObject(VFILE *fd, float *offs, char *base);
LBXGL_MeshGroup *LBXGL_AC3D_LoadGroupObject(VFILE *fd, float *offs, char *base);
LBXGL_MeshGroup *LBXGL_AC3D_LoadModel(char *name);
void LBXGL_AC3D_SaveSurface(LBXGL_MeshPrim *prim, VFILE *fd);
int LBXGL_AC3D_SavePrim(LBXGL_MeshPrim *prim, VFILE *fd);
int LBXGL_AC3D_SaveGroup(LBXGL_MeshGroup *grp, VFILE *fd);
int LBXGL_AC3D_SaveModel(LBXGL_MeshGroup *grp, char *name);
//AHSRC:format/fmt_ase.c
void LBXGL_ASE_LoadDummy(VFILE *fd);
void LBXGL_ASE_LoadMeshVertices(VFILE *fd, LBXGL_MeshPrim *prim);
void LBXGL_ASE_LoadMeshFaces(VFILE *fd, LBXGL_MeshPrim *prim);
void LBXGL_ASE_LoadMeshVertST(VFILE *fd, LBXGL_MeshPrim *prim);
void LBXGL_ASE_LoadMeshFaceST(VFILE *fd, LBXGL_MeshPrim *prim);
LBXGL_MeshPrim *LBXGL_ASE_LoadMesh(VFILE *fd, LBXGL_MeshGroup *grp);
LBXGL_MeshGroup *LBXGL_ASE_LoadGeomObject(VFILE *fd,LBXGL_MeshGroup *grp);
LBXGL_MeshGroup *LBXGL_ASE_LoadModel(char *name);
//AHSRC:geom/video/avi.c
int RIFF_ReadInt32(VFILE *fd);
int RIFF_ReadChunkInfo(VFILE *fd, int ofs, int *id, int *sz, int *lid);
int RIFF_NextChunk(VFILE *fd, int ofs);
int RIFF_FindSubChunk(VFILE *fd, int ofs, int id, int lid);
void *RIFF_ReadInChunk(VFILE *fd, int ofs, int *size);
void *RIFF_FindReadInChunk(VFILE *fd, int ofs, int id, int *size);
int AVI_DumpMainAVIHeader(LBXGL_MainAVIHeader *avihead);
int AVI_DumpAVIStreamHeader(LBXGL_AVIStreamHeader *strhead, int num);
int AVI_DumpAVIWaveFmt(LBXGL_WAVEFORMATEX *wavefmt, int num);
int AVI_DumpBMIHead(LBXGL_BITMAPINFOHEADER *bmihead, int num);
int AVI_ExtractTagNum(int tag);
int AVI_Init();
int avi_getsamples(short *samples, int cnt, void *data);
LBXGL_AVI_Context *AVI_LookupAVI(char *name);
LBXGL_AVI_Context *AVI_LoadAVI(char *name);
LBXGL_Video_Stats *AVI_GetStats(LBXGL_AVI_Context *ctx);
int AVI_DecodeAudio(LBXGL_AVI_Context *ctx, int ofs);
int AVI_DecodeVideo(LBXGL_AVI_Context *ctx, int ofs, int skip);
void *AVI_DecodeFrame2(LBXGL_AVI_Context *ctx, int skip);
void *AVI_DecodeFrame(LBXGL_AVI_Context *ctx);
void *AVI_SkipFrame(LBXGL_AVI_Context *ctx);
int AVI_SkipFrames(LBXGL_AVI_Context *ctx, int num);
int AVI_BackFrames(LBXGL_AVI_Context *ctx, int num);
void *AVI_FrameRaw(LBXGL_AVI_Context *ctx, float dt);
void *AVI_FrameTexnum_cb(void *data);
int AVI_GetFrameTexnum(LBXGL_AVI_Context *ctx);
int AVI_FrameTexnum(LBXGL_AVI_Context *ctx, float dt);
int AVI_FrameTexnumI(LBXGL_AVI_Context *ctx, float dt);
int AVI_FrameTexnumNorm(LBXGL_AVI_Context *ctx, float dt);
int AVI_FrameTexnumSpec(LBXGL_AVI_Context *ctx, float dt);
int AVI_FrameTexnumLuma(LBXGL_AVI_Context *ctx, float dt);
int AVI_Seek(LBXGL_AVI_Context *ctx, float dt);
float AVI_GetPosition(LBXGL_AVI_Context *ctx);
int AVI_SetChromaKey(LBXGL_AVI_Context *ctx, int r, int g, int b, int rad);
int AVI_FilterChroma(LBXGL_AVI_Context *ctx, byte *buf);
int AVI_HasAudioP(LBXGL_AVI_Context *ctx);
int AVI_GetAudioSampleRate(LBXGL_AVI_Context *ctx);
void AVI_GetAudioSamples(LBXGL_AVI_Context *ctx, short **rpcm, int *rlen);
void AVI_ClearAudioSamples(LBXGL_AVI_Context *ctx);
char *AVI_GetVideoName(LBXGL_AVI_Context *ctx);
bool AVI_GetDeltaTick(LBXGL_AVI_Context *ctx);
void AVI_ClearDeltaTick(LBXGL_AVI_Context *ctx);
void AVI_SetDeltaTick(LBXGL_AVI_Context *ctx);
void AVI_ClearAllDeltaTicks(void);
//AHSRC:geom/video/codec.c
LBXGL_VidCodec *LBXGL_VidCodec_New();
LBXGL_VidCodecCTX *LBXGL_VidCodecCTX_New();
LBXGL_VidCodecCTX *LBXGL_Codec_BeginDecompress(int fcc,PDGL_BMPInfoHeader *in, PDGL_BMPInfoHeader *out);
int LBXGL_Codec_DecompressFrame(LBXGL_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int LBXGL_Codec_Init();
//AHSRC:geom/video/codec_vfw.c
void LBXGL_ConvBGR2RGB(byte *sbuf, byte *tbuf, int sz);
void LBXGL_ConvBGRA2RGBA(byte *sbuf, byte *tbuf, int sz);
int LBXGL_CodecVFW_Init();
int LBXGL_CodecVFW_Init();
//AHSRC:geom/video/codec_mbtc.c
int LBXGL_MBTIC_DecompressFrame(LBXGL_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int lbxgl_mbtc_decompress_frame(LBXGL_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int LBXGL_CodecMBTC_Init();
//AHSRC:geom/video/codec_mjpg.c
int LBXGL_MJPEG_DecompressFrame(LBXGL_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int lbxgl_mjpg_decompress_frame(LBXGL_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int LBXGL_CodecMJPG_Init();
//AHSRC:geom/video/codec_mpng.c
int LBXGL_MPNG_DecompressFrame(LBXGL_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int lbxgl_mpng_decompress_frame(LBXGL_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int LBXGL_CodecMPNG_Init();
//AHSRC:geom/video/codec_rpza.c
int LBXGL_RPZA_DecompressFrame(LBXGL_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int LBXGL_BT1C_DecompressFrame(LBXGL_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int lbxgl_rpza_decompress_frame(LBXGL_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int lbxgl_bt1c_decompress_frame(LBXGL_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int LBXGL_CodecRPZA_Init();
//AHSRC:skel/skel_base.c
LBXGL_API int Skel_LoadBones(LBXGL_Skel2Model *mdl, char *name);
LBXGL_API int Skel_LoadAnimRaw_I(LBXGL_Skel2Model *mdl,char *name, LBXGL_Skel2Anim *tmp);
LBXGL_API LBXGL_Skel2Anim *Skel_LoadAnimRawMulti(LBXGL_Skel2Model *mdl, char **names);
LBXGL_API LBXGL_Skel2Anim *Skel_LoadAnimRaw(LBXGL_Skel2Model *mdl, char *name);
LBXGL_API float Skel_WeightVertexSolid(LBXGL_Skel2State *ctx, float *pt, int num);
LBXGL_API int Skel_WeightVertexNV(LBXGL_Skel2State *ctx,float *pt, float *nv, float *txyz, float *tnv, int *tidx, float *tval, int n);
LBXGL_API void Skel_TempCalcMeshVNorm(LBXGL_Skel2State *ctx, LBXGL_Skel2Mesh *mesh, float *txyz, float *tnorm, float *tvnorm);
LBXGL_API void Skel_BindMesh(LBXGL_Skel2State *ctx, LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_BindMeshGroup(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_UnbindMesh(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_UnbindMeshGroup(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_CalcHitboxMesh(LBXGL_Skel2Model *mdl,LBXGL_Skel2Mesh *mesh, float *borg, float *brad, float *bwght);
LBXGL_API void Skel_CalcHitboxGroup(LBXGL_Skel2Model *mdl,LBXGL_Skel2MeshGroup *grp, float *borg, float *brad, float *bwght);
LBXGL_API void Skel_BindCalculateHitbox(LBXGL_Skel2Model *mdl);
LBXGL_Skel2Mesh *Skel_CloneMesh(LBXGL_Skel2Mesh *mesh);
LBXGL_Skel2MeshGroup *Skel_CloneMeshGroup(LBXGL_Skel2MeshGroup *grp);
LBXGL_API int Skel_LoadMeshAC3D(LBXGL_Skel2Model *mdl, char *name);
LBXGL_API int Skel_LoadMesh(LBXGL_Skel2Model *mdl, char *name);
LBXGL_API LBXGL_Skel2Anim *Skel_LoadAnim(LBXGL_Skel2Model *mdl, char *name);
LBXGL_API LBXGL_Skel2Anim *Skel_LoadAnimMulti(LBXGL_Skel2Model *mdl,char **names);
LBXGL_API LBXGL_Skel2Model *Skel_LoadModel(char *name);
LBXGL_API LBXGL_Skel2State *Skel_NewInstance(LBXGL_Skel2Model *mdl);
LBXGL_API LBXGL_Skel2State *Skel_NewTempInstance(LBXGL_Skel2Model *mdl);
LBXGL_API void Skel_FreeInstance(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_FlushInstance(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_LerpRotFrame(LBXGL_Skel2State *ctx,int num, float *rot, LBXGL_Skel2Anim *anim, int frame);
LBXGL_API void Skel_LerpOrgFrame(LBXGL_Skel2State *ctx,int num, float *org, LBXGL_Skel2Anim *anim, int frame);
LBXGL_API void Skel_LerpRot(LBXGL_Skel2State *ctx, int num, float *rot);
LBXGL_API void Skel_LerpOrg(LBXGL_Skel2State *ctx, int num, float *org);
LBXGL_API LBXGL_Skel2MeshState *Skel_NewMeshInstance(LBXGL_Skel2Mesh *prim);
LBXGL_API LBXGL_Skel2MeshStateGroup *Skel_NewGroupInstance(LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_SetupMeshState(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshState *mesh);
LBXGL_API void Skel_SetupMeshStateGroup(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshStateGroup *grp);
LBXGL_API void Skel_SetupFrameBasic(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_SetupFrame(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_SetFrameBone(LBXGL_Skel2State *ctx,int bone, float *org, float *qrot, int flag);
LBXGL_API void Skel_SetAnimFrame(LBXGL_Skel2State *ctx,char *name, int frame);
LBXGL_API void Skel_SetAnim(LBXGL_Skel2State *ctx, char *name);
LBXGL_API void Skel_SetFrame(LBXGL_Skel2State *ctx, int frame);
LBXGL_API void Skel_StepTime(LBXGL_Skel2State *ctx, float dt);
LBXGL_API void Skel_BuildMeshEdges(LBXGL_Skel2Mesh *prim);
void Skel_BuildGroupEdges(LBXGL_Skel2MeshGroup *grp);
//AHSRC:skel/skel_draw.c
void Skel_glNormal3fv(float *fv);
void Skel_glTexCoord2fv(float *fv);
void Skel_glColor4fv(float *fv);
void Skel_glColor4f(float r, float g, float b, float a);
void Skel_glVertex3fv(float *fv);
void Skel_glBegin(int prim);
void Skel_glEnd();
void Skel_glVertex3fv2(float *fv);
void Skel_glEnd2();
LBXGL_API void Skel_CalcMeshTempVPos(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_CalcMeshTempFNorm(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_CalcMeshTempPos2(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_CalcMeshTempVNorm(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_CalcMeshTempPos(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_CalcMeshTempPos2(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_SetupMeshGroupTempPos(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_SetupMeshTempPos(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawMesh(LBXGL_Skel2State *ctx, LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_DrawMeshGroup(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_DrawMeshGroupFinal(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_DrawMeshFlat(LBXGL_Skel2State *ctx, LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_DrawMeshGroupFlat(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_DrawMeshFlat2(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh);
LBXGL_API void Skel_DrawMeshGroupFlat2(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshGroup *grp);
LBXGL_API void Skel_DrawMeshShadowVolumeClip(LBXGL_Skel2State *ctx, LBXGL_Skel2Mesh *prim, float *lorg, float lrad);
LBXGL_API void Skel_DrawMeshShadow(LBXGL_Skel2State *ctx,LBXGL_Skel2Mesh *mesh, float *org, float rad, int flags);
LBXGL_API void Skel_DrawMeshGroupShadow(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshGroup *grp, float *org, float rad, int flags);
LBXGL_API void Skel_DrawMeshState(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshState *mesh);
LBXGL_API void Skel_DrawMeshStateGroup(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshStateGroup *grp);
LBXGL_API void Skel_DrawMeshStateFlat(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshState *mesh);
LBXGL_API void Skel_DrawMeshStateFlat2(LBXGL_Skel2State *ctx, LBXGL_Skel2MeshState *mesh);
LBXGL_API void Skel_DrawMeshStateGroupFlat(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshStateGroup *grp);
LBXGL_API void Skel_DrawMeshStateGroupFlat2(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshStateGroup *grp);
LBXGL_API void Skel_DrawMeshStateShadow(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshState *mesh, float *org, float rad);
LBXGL_API void Skel_DrawMeshStateGroupShadow(LBXGL_Skel2State *ctx,LBXGL_Skel2MeshStateGroup *grp, float *org, float rad);
LBXGL_Skel2MeshGroup *Skel_MeshForLod(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawModel(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawModelAlpha(LBXGL_Skel2State *ctx, float alpha);
LBXGL_API void Skel_DrawModelDark(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawModelLight(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawModelLightColor(LBXGL_Skel2State *ctx, float cr, float cg, float cb);
LBXGL_API void Skel_DrawModelFlat(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawModelFinal(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawModelShadow(LBXGL_Skel2State *ctx, float *org, float rad);
LBXGL_API void Skel_DrawModelShadowFlags(LBXGL_Skel2State *ctx,float *org, float rad, int flags);
LBXGL_API int Skel_DrawFlatCubeOrgRot(LBXGL_Skel2State *ctx,float *mins, float *maxs, float *org, float *rot);
LBXGL_API void Skel_DrawModelFlatApprox(LBXGL_Skel2State *ctx);
LBXGL_API void Skel_DrawSetLOD(LBXGL_Skel2State *ctx, int lod);
LBXGL_API int Skel_DrawGetLOD(LBXGL_Skel2State *ctx);
LBXGL_API int Skel_BoxCubeOrgRot(LBXGL_Skel2State *ctx,float *mins, float *maxs, float *org, float *rot, float *rmins, float *rmaxs);
LBXGL_API void Skel_BoxModelApprox(LBXGL_Skel2State *ctx,float *rmins, float *rmaxs);
//AHSRC:skel/skel_save.c
LBXGL_API void Skel_ClampV3F(float *iv, float *ov);
LBXGL_API char *Skel_Num2Str(float f);
LBXGL_API int Skel_SaveBones(LBXGL_Skel2Model *mdl, char *name);
LBXGL_API int Skel_SaveStateBones(LBXGL_Skel2State *state, char *name);
LBXGL_API int Skel_SaveAnim(LBXGL_Skel2Model *mdl, LBXGL_Skel2Anim *anim, char *name);
//AHSRC:skel/skel_mesh.c
LBXGL_API LBXGL_Skel2Mesh *AC3D_CreateMesh();
LBXGL_API LBXGL_Skel2MeshGroup *AC3D_CreateMeshGroup();
LBXGL_API int AC3D_IndexST(LBXGL_Skel2Mesh *prim, float s, float t);
LBXGL_API int AC3D_IndexXYZ(LBXGL_Skel2Mesh *prim,float x, float y, float z);
LBXGL_API void AC3D_LoadSurface(LBXGL_Skel2Mesh *prim, VFILE *fd);
LBXGL_API int AC3D_LoadSurfaces(LBXGL_Skel2Mesh *prim, int num, VFILE *fd);
LBXGL_API char *AC3D_GenAbs(char *base, char *name);
LBXGL_API LBXGL_Skel2Mesh *AC3D_LoadPolyObject(VFILE *fd, float *offs, char *base);
LBXGL_API LBXGL_Skel2MeshGroup *AC3D_LoadGroupObject(VFILE *fd, float *offs, char *base);
LBXGL_API LBXGL_Skel2MeshGroup *AC3D_LoadModel(char *name);
LBXGL_API LBXGL_Skel2MeshGroup *AC3D_LoadModelPos(char *name, float *pos);
LBXGL_API void AC3D_AssignVecsMesh(LBXGL_Skel2Mesh *mesh,int *rxyz, int *rst, int *rface);
LBXGL_API void AC3D_AssignVecsMeshGroup(LBXGL_Skel2MeshGroup *grp,int *rxyz, int *rst, int *rface);
LBXGL_API void AC3D_MoveMesh(LBXGL_Skel2Mesh *mesh, float *pos);
LBXGL_API void AC3D_MoveMeshGroup(LBXGL_Skel2MeshGroup *grp, float *pos);
void Skel_glNormal3fv(float *fv);
void Skel_glTexCoord2fv(float *fv);
void Skel_glColor4fv(float *fv);
void Skel_glColor4f(float r, float g, float b, float a);
void Skel_glVertex3fv(float *fv);
void Skel_glBegin(int prim);
void Skel_glEnd();
LBXGL_API void AC3D_DrawMesh(LBXGL_Skel2Mesh *mesh, float *pos);
LBXGL_API void AC3D_DrawMeshGroup(LBXGL_Skel2MeshGroup *grp, float *pos);
LBXGL_API void AC3D_DrawMeshGroupNH(LBXGL_Skel2MeshGroup *grp, float *pos, float *clr, float alpha);
LBXGL_API void AC3D_DrawMeshFlat(LBXGL_Skel2Mesh *mesh, float *pos);
LBXGL_API void AC3D_DrawMeshGroupFlat(LBXGL_Skel2MeshGroup *grp, float *pos);
LBXGL_API void AC3D_DrawMeshShadow(LBXGL_Skel2Mesh *mesh, float *pos, float *org, float rad);
LBXGL_API void AC3D_DrawMeshGroupShadow(LBXGL_Skel2MeshGroup *grp,float *pos, float *org, float rad);
//AHSRC:skel/skel_smd.c
LBXGL_API void LBXGL_SkelSmd_FromAngles(float *a, float *b);
LBXGL_API void LBXGL_SkelSmd_ToMatrix(float *a, float *b);
LBXGL_API int LBXGL_SkelSmd_LoadBaseBones(LBXGL_Skel2Model *mdl, VFILE *fd);
LBXGL_API int LBXGL_SkelSmd_LoadBaseFrame(LBXGL_Skel2Model *mdl, VFILE *fd);
LBXGL_API int LBXGL_SkelSmd_IndexSkin(char *name);
LBXGL_API LBXGL_Skel2Mesh *LBXGL_SkelSmd_BuildMesh();
LBXGL_API void LBXGL_SkelSmd_BindMesh(LBXGL_Skel2Mesh *mesh);
LBXGL_API int LBXGL_SkelSmd_LoadTriangles(LBXGL_Skel2Model *mdl, VFILE *fd);
LBXGL_API int LBXGL_SkelSmd_LoadReference(LBXGL_Skel2Model *mdl, char *name);
LBXGL_API LBXGL_Skel2Anim *LBXGL_SkelSmd_LoadAnim(LBXGL_Skel2Model *mdl, char *name);
//AHSRC:skel/skel_util.c
LBXGL_API int SkelUtil_CheckLineBox(float *m, float *n,float *p0, float *p1);
LBXGL_API int SkelUtil_CheckLineSolid(LBXGL_Skel2State *ctx, int num,float *org, float *dir);
void Skel_RecalcMeshVFIdx(LBXGL_Skel2Mesh *prim);
LBXGL_Skel2MeshFace *Skel_CloneMeshFace(LBXGL_Skel2MeshFace *face);
LBXGL_Skel2Mesh *Skel_CloneMesh(LBXGL_Skel2Mesh *mesh);
LBXGL_Skel2MeshGroup *Skel_CloneMeshGroup(LBXGL_Skel2MeshGroup *grp);
void Skel_RecalcMeshVFIdx(LBXGL_Skel2Mesh *prim);
void Skel_RecalcGroupVFIdx(LBXGL_Skel2MeshGroup *grp);
void Skel_RecalcMeshFaceNorm(LBXGL_Skel2Mesh *mesh,LBXGL_Skel2MeshFace *face);
void Skel_RecalcMeshFaceVNorm(LBXGL_Skel2Mesh *mesh,LBXGL_Skel2MeshFace *face);
void Skel_RecalcMeshNorm(LBXGL_Skel2Mesh *mesh);
void Skel_RecalcMeshVNorm(LBXGL_Skel2Mesh *mesh);
void Skel_RecalcGroupNorm(LBXGL_Skel2MeshGroup *grp);
void Skel_RecalcGroupVNorm(LBXGL_Skel2MeshGroup *grp);
void Skel_CalcMeshVecANorm(LBXGL_Skel2Mesh *mesh, int vec, float *norm);
float Skel_CalcMeshVecAVal(LBXGL_Skel2Mesh *mesh, int vec);
int Skel_CalcMeshVecAVecI(LBXGL_Skel2Mesh *mesh, int vec, int nl);
int Skel_CalcMeshVecAVec(LBXGL_Skel2Mesh *mesh, int vec);
int Skel_CalcMeshVecAVecNl(LBXGL_Skel2Mesh *mesh, int vec);
int Skel_TempIndexST(LBXGL_Skel2Mesh *prim, float *st);
int Skel_TempIndexXYZ(LBXGL_Skel2Mesh *prim, float *xyz);
int Skel_IndexTempST(LBXGL_Skel2Mesh *prim, float *st);
int Skel_IndexTempXYZ(LBXGL_Skel2Mesh *prim, float *xyz);
float *Skel_GetTempXYZ(LBXGL_Skel2Mesh *mesh, int vec);
float *Skel_GetTempST(LBXGL_Skel2Mesh *mesh, int vec);
void Skel_MeshMergeVecs_I(LBXGL_Skel2Mesh *mesh, int dv, int sv);
void SkelLod_MeshAddVecs(LBXGL_Skel2Mesh *mesh);
void SkelLod_GroupAddVecs(LBXGL_Skel2MeshGroup *grp);
void SkelLod_GroupSwapVecs(int i, int j);
void SkelLod_GroupRankVecs(LBXGL_Skel2MeshGroup *grp);
LBXGL_API int AC3D_IndexST(LBXGL_Skel2Mesh *prim, float s, float t);
LBXGL_API int AC3D_IndexXYZ(LBXGL_Skel2Mesh *prim,float x, float y, float z);
void SkelLod_MeshReIndex(LBXGL_Skel2Mesh *mesh);
void SkelLod_GroupReIndex(LBXGL_Skel2MeshGroup *grp);
int SkelLod_GroupMergeVecsFrac(LBXGL_Skel2MeshGroup *grp, int frac);
int SkelLod_GroupMergeVecs(LBXGL_Skel2MeshGroup *grp);
//AHSRC:skel/skel_pose.c
LBXGL_API LBXGL_Skel2State *Skel_GetPose(LBXGL_Skel2Model *mdl, int idx);
LBXGL_API LBXGL_Skel2State *Skel_TryGetPose(LBXGL_Skel2Model *mdl, int idx);
LBXGL_API int Skel_SetPoseAnimFrame(LBXGL_Skel2Model *mdl, int idx, char *anim, int frame);
LBXGL_API int Skel_SetPoseBoneOrgQRot(LBXGL_Skel2Model *mdl, int pose, int bone, float *org, float *qrot);
LBXGL_API LBXGL_Skel2State *Skel_GetTempPoseAnimFrame(LBXGL_Skel2Model *mdl, char *anim, int frame);
LBXGL_API LBXGL_Skel2State *Skel_GetTempPoseFrame(LBXGL_Skel2Model *mdl, int frame);
LBXGL_API LBXGL_Skel2State *Skel_GetPoseOrFrame(LBXGL_Skel2Model *mdl, int frame);
LBXGL_API LBXGL_Skel2State *Skel_GetPoseOrFrame2(LBXGL_Skel2Model *mdl, int frame, int lframe, float backlerp);
LBXGL_API void Skel_DrawPoseModelLerp(LBXGL_Skel2Model *mdl,int frame, int lframe, float backlerp);
LBXGL_API void Skel_DrawPoseModelLerpNH(LBXGL_Skel2Model *mdl,int frame, int lframe, float backlerp, float *clr, float alpha);
LBXGL_API void Skel_DrawPoseModel(LBXGL_Skel2Model *mdl, int pose);
LBXGL_API void Skel_DrawPoseModelFlat(LBXGL_Skel2Model *mdl, int pose);
LBXGL_API void Skel_DrawPoseModelLerpFlat(LBXGL_Skel2Model *mdl,int frame, int lframe, float backlerp);
LBXGL_API void Skel_DrawPoseModelFinal(LBXGL_Skel2Model *mdl, int pose);
LBXGL_API void Skel_DrawPoseModelLerpFinal(LBXGL_Skel2Model *mdl,int frame, int lframe, float backlerp);
LBXGL_API void Skel_DrawPoseModelShadow(LBXGL_Skel2Model *mdl, int pose,float *lorg, float lrad);
LBXGL_API void Skel_DrawPoseModelLerpShadow(LBXGL_Skel2Model *mdl,int frame, int lframe, float backlerp, float *lorg, float lrad);
LBXGL_API float Skel_GetPoseModelRadius(LBXGL_Skel2Model *mdl, int pose);
//AHSRC:skel/skel_vbo.c
int SkelVBO_IndexTexCoord(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, float *st);
int SkelVBO_IndexRGBA(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, float *rgba);
int SkelVBO_IndexColor4f(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, float r, float g, float b, float a);
int SkelVBO_IndexVertex(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, int xyz, int st, int norm, int rgba);
int SkelVBO_IndexEmitElem(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, int xyz, int st, int norm, int rgba);
int SkelVBO_IndexBeginSegment(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, int tex);
void SkelVBO_IndexEndSegment(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo);
void SkelVBO_IndexMesh(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, LBXGL_Skel2Mesh *mesh);
void SkelVBO_IndexMeshGroup(LBXGL_Skel2Model *mdl, LBXGL_Skel2ModelVBO *vbo, LBXGL_Skel2MeshGroup *grp);
void SkelVBO_ModelRebuildLodVBO(LBXGL_Skel2Model *mdl, int lvl);
LBXGL_Skel2ModelVBO *SkelVBO_VBOForLod(LBXGL_Skel2State *ctx);
void SkelVBO_RebuildVBO(LBXGL_Skel2State *ctx);
void SkelVBO_DestroyVBO(LBXGL_Skel2State *ctx);
LBXGL_API int SkelVBO_CheckModelVBO(LBXGL_Skel2State *ctx);
LBXGL_API void SkelVBO_DrawModelFlatVL(LBXGL_Skel2State *ctx);
LBXGL_API void SkelVBO_DrawModelFlat(LBXGL_Skel2State *ctx);
LBXGL_API void SkelVBO_DrawModelFinal(LBXGL_Skel2State *ctx);
//AHSRC:entity21/sentity.c
LBXGL_API char *LBXGL_SEnt_GetStr(LBXGL_SEntity *ent, char *name);
LBXGL_API void LBXGL_SEnt_SetStr(LBXGL_SEntity *ent, char *name, char *val);
LBXGL_API void LBXGL_SEnt_QuietSetStr(LBXGL_SEntity *ent,char *name, char *val);
LBXGL_API void LBXGL_SEnt_SetStrNoDirty(LBXGL_SEntity *ent,char *name, char *val);
LBXGL_API float LBXGL_SEnt_GetNum(LBXGL_SEntity *ent, char *name);
LBXGL_API void LBXGL_SEnt_SetNum(LBXGL_SEntity *ent, char *name, float val);
LBXGL_API int LBXGL_SEnt_GetVec2(LBXGL_SEntity *ent, char *name, float *val);
LBXGL_API int LBXGL_SEnt_GetVec3(LBXGL_SEntity *ent, char *name, float *val);
LBXGL_API int LBXGL_SEnt_GetVec4(LBXGL_SEntity *ent, char *name, float *val);
LBXGL_API void LBXGL_SEnt_SetVec2(LBXGL_SEntity *ent, char *name, float *val);
LBXGL_API void LBXGL_SEnt_SetVec3(LBXGL_SEntity *ent, char *name, float *val);
LBXGL_API void LBXGL_SEnt_SetVec4(LBXGL_SEntity *ent, char *name, float *val);
LBXGL_API void LBXGL_SEnt_AddEntity(LBXGL_SEntity **wrl, LBXGL_SEntity *ent);
LBXGL_API LBXGL_SEntity *LBXGL_SEnt_NewEntity(LBXGL_SEntity **wrl, char *type);
LBXGL_API LBXGL_SEntity *LBXGL_SEnt_NewBasicEntity(LBXGL_SEntity **wrl,char *type, float *org);
LBXGL_API LBXGL_SEntity *LBXGL_SEnt_NewBasicLight(LBXGL_SEntity **wrl,float *org, float val);
LBXGL_API void LBXGL_SEnt_DestroyEntity(LBXGL_SEntity *ent);
LBXGL_API LBXGL_SEntity *LBXGL_SEnt_NewCloneEntity(LBXGL_SEntity **wrl,char *type, LBXGL_SEntity *sent);
