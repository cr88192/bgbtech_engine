/*
Texture Finding Dialog.
*/

#include <pdgl.h>

#include <windows.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <unistd.h>

#include <time.h>

extern int pdgl_mx, pdgl_my, pdgl_mb;
extern int pdgl_lmx, pdgl_lmy, pdgl_lmb;
extern unsigned short *pdgl_keybuf;

char *texfinder_title;
char *texfinder_path=NULL;
char *texfinder_fnames[4096];
int texfinder_n_fnames;
int texfinder_index;
int texfinder_selindex;
char *texfinder_name;

char *texfinder_basepath=NULL;

char texfinder_namebuf[64];
int texfinder_namepos;

char *UI_TexFinder_GenAbs(char *tn)
{
	char buf[256];

	if(tn)
	{
		sprintf(buf, "%s/resource/textures/%s/%s",
			texfinder_basepath, texfinder_path, tn);
	}else
	{
		sprintf(buf, "%s/resource/textures/%s",
			texfinder_basepath, texfinder_path);
	}

	return(krstrdup(buf));
}

void UI_TexFinder_ReloadPath()
{
	struct stat st;
	char buf[256];
	DIR *dir;
	struct dirent *de;
	char *s;
	int i, j, k, l;

//	strcpy(buf, texfinder_path);
//	strcat(buf, "/");
//	dir=opendir(buf);

	s=UI_TexFinder_GenAbs(NULL);
	dir=opendir(s);

	printf("Load path %s\n", s);

//	dir=opendir(texfinder_path);

	if(!dir)
	{
		printf("Fail Load path %s\n", s);

		for(i=0; i<texfinder_n_fnames; i++)
			free(texfinder_fnames[i]);
		texfinder_n_fnames=0;
		texfinder_index=0;
		return;
	}

	texfinder_n_fnames=0;
	texfinder_index=0;

	while(1)
	{
		de=readdir(dir);
		if(!de)break;

//		sprintf(buf, "resource/textures/%s/%s",
//			texfinder_path, de->d_name);

		strcpy(buf, UI_TexFinder_GenAbs(de->d_name));
		i=stat(buf, &st);
		if(i<0)continue;

		if(S_ISREG(st.st_mode))
		{
			s=vfgetext(de->d_name);

			if(stricmp(s, "bmp") && stricmp(s, "tga") &&
				stricmp(s, "png") && stricmp(s, "pcx") &&
				stricmp(s, "jpg"))
					continue;
		}

		for(i=0; i<texfinder_n_fnames; i++)
			if(stricmp(texfinder_fnames[i], de->d_name)>0)
				break;
		for(j=texfinder_n_fnames; j>i; j--)
			texfinder_fnames[j]=texfinder_fnames[j-1];
		texfinder_fnames[i]=strdup(de->d_name);
		texfinder_n_fnames++;
	}

	closedir(dir);
}

void UI_TexFinder_SetTitle(char *name)
{
	char buf[256];

	texfinder_title=kstrdup(name);
	texfinder_name=NULL;

	if(!texfinder_path)
	{
		texfinder_path=kstrdup("");

		getcwd(buf, 255);
		texfinder_basepath=kstrdup(buf);
	}

	UI_TexFinder_ReloadPath();
}

char *UI_TexFinder_GetName()
{
	return(texfinder_name);
}

void UI_TexFinder_HandleName(char *name)
{
	struct stat st;
	char buf[256];
	char *s;
	int i;

	if(!strcmp(name, "."))return;
	if(!strcmp(name, ".."))
	{
		s=texfinder_path+strlen(texfinder_path);
		while((s>texfinder_path) && (*s!='/') && (*s!='\\'))
			s--;
		if(s>texfinder_path)
		{
			if(*(s-1)==':')*s++='\\';
			*s=0;
		}else *s=0;

//		chdir(texfinder_path);
//		getcwd(buf, 255);
//		texfinder_path=kstrdup(buf);

		UI_TexFinder_ReloadPath();
		return;
	}

//	sprintf(buf, "resource/textures/%s/%s", texfinder_path, name);
	strcpy(buf, UI_TexFinder_GenAbs(name));
	i=stat(buf, &st);
	if(i<0)
	{
		texfinder_name=strdup(buf);
		return;
	}

	if(S_ISDIR(st.st_mode))
	{
//		chdir(buf);
//		getcwd(buf, 255);
//		texfinder_path=kstrdup(buf);

		sprintf(buf, "%s/%s", texfinder_path, name);
		texfinder_path=kstrdup(buf);

		UI_TexFinder_ReloadPath();
		return;
	}


	if(*texfinder_path)
		sprintf(buf, "%s/%s", texfinder_path, name);
		else strcpy(buf, name);
	s=buf+strlen(buf);
	while((s>buf) && (*s!='.') && (*s!='/'))s--;
	if(*s=='.')*s=0;

	texfinder_name=strdup(buf);
	while(*texfinder_name=='/')texfinder_name++;
	return;
}

void UI_TexFinder_Draw()
{
	char buf[256];
	unsigned short *kcur;
	char *s;
	int i, j, w, h;

	glDisable(GL_TEXTURE_2D);
	glBegin(GL_QUADS);

	glColor4f(0, 0, 1, 1);
	glVertex2f(-400, 300-16);
	glVertex2f(-400, 300-24);
	glVertex2f(200, 300-24);
	glVertex2f(200, 300-16);

	glColor4f(0.5, 0.5, 0.5, 1);
	glVertex2f(-400, 300-24);
	glVertex2f(-400, -200);
	glVertex2f(200, -200);
	glVertex2f(200, 300-24);

	glColor4f(1, 1, 1, 1);
	glVertex2f(-400, 300-32);
	glVertex2f(-400, 300-40);
	glVertex2f(200, 300-40);
	glVertex2f(200, 300-32);

	glEnd();

	GfxFont_DrawString(texfinder_title, -400, 300-24,
		8, 8,  255, 255, 255, 255);
	GfxFont_DrawString(texfinder_path, -400, 300-32,
		8, 8,  0, 0, 0, 255);

	GfxFont_DrawString(texfinder_namebuf, -400, 300-40,
		8, 8,  0, 0, 0, 255);

	i=(clock()*1000)/CLOCKS_PER_SEC;
	i=(i/250)&1;
	j=texfinder_namepos;
	if(i)GfxFont_DrawChar('|',
		-400+(j*8), 300-40, 8, 8,
		127, 127, 127, 255);


	for(i=0; i<56; i++)
	{
		j=texfinder_index+i;
		if(j>=texfinder_n_fnames)
			break;

		s=texfinder_fnames[texfinder_index+i];
		GfxFont_DrawString(s, -400+32, 300-48-i*8,
			8, 8,  0, (j==texfinder_selindex)?255:0, 0, 255);
	}

	s=vfgetext(texfinder_namebuf);
	if(s && (!stricmp(s, "bmp") ||
		!stricmp(s, "tga") ||
		!stricmp(s, "png") ||
		!stricmp(s, "pcx") ||
		!stricmp(s, "jpg")
		))
	{
//		sprintf(buf, "resource/textures/%s", brush_sel->tex[i]);

		strcpy(buf, UI_TexFinder_GenAbs(texfinder_namebuf));
		j=Tex_LoadFile(buf, &w, &h);

		glColor4f(1, 1, 1, 1);
		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, j);

		if(w==h)
		{
			glBegin(GL_POLYGON);
			glTexCoord2f(0, 0);
			glVertex2f(200-24*8, -200);
			glTexCoord2f(1, 0);
			glVertex2f(200, -200);
			glTexCoord2f(1, 1);
			glVertex2f(200, -200+24*8);
			glTexCoord2f(0, 1);
			glVertex2f(200-24*8, -200+24*8);
			glEnd();
		}else if(w>h)
		{
			j=(24*8*h)/w;
			glBegin(GL_POLYGON);
			glTexCoord2f(0, 0);
			glVertex2f(200-24*8, -200);
			glTexCoord2f(1, 0);
			glVertex2f(200, -200);
			glTexCoord2f(1, 1);
			glVertex2f(200, -200+j);
			glTexCoord2f(0, 1);
			glVertex2f(200-24*8, -200+j);
			glEnd();
		}else
		{
			j=(24*8*w)/h;
			glBegin(GL_POLYGON);
			glTexCoord2f(0, 0);
			glVertex2f(200-j, -200);
			glTexCoord2f(1, 0);
			glVertex2f(200, -200);
			glTexCoord2f(1, 1);
			glVertex2f(200, -200+24*8);
			glTexCoord2f(0, 1);
			glVertex2f(200-j, -200+24*8);
			glEnd();
		}
	}

	if(pdgl_mb&1)
	{
		j=pdgl_my+300-40;
		if(j>0)i=j/8; else i=-1;
		if((i>=0) && (i<56))
		{
			j=texfinder_index+i;
			if((j>=0) && (j<texfinder_n_fnames))
				texfinder_selindex=j;
			strcpy(texfinder_namebuf,
				texfinder_fnames[texfinder_selindex]);
			texfinder_namepos=strlen(texfinder_namebuf);
		}
	}

	kcur=pdgl_keybuf;
	while(*kcur)
	{
		if(*kcur==K_ESCAPE)
		{
			texfinder_name="";
		}

		if(*kcur==K_ENTER)
		{
//			UI_TexFinder_HandleName(
//				texfinder_fnames[texfinder_selindex]);
			UI_TexFinder_HandleName(texfinder_namebuf);
		}

		if(*kcur==K_UPARROW)
		{
			j=texfinder_selindex-1;
			if((j>=0) && (j<texfinder_n_fnames))
				texfinder_selindex=j;
			strcpy(texfinder_namebuf,
				texfinder_fnames[texfinder_selindex]);
			texfinder_namepos=strlen(texfinder_namebuf);
		}
		if(*kcur==K_DOWNARROW)
		{
			j=texfinder_selindex+1;
			if((j>=0) && (j<texfinder_n_fnames))
				texfinder_selindex=j;
			strcpy(texfinder_namebuf,
				texfinder_fnames[texfinder_selindex]);
			texfinder_namepos=strlen(texfinder_namebuf);
		}

		if(*kcur==K_LEFTARROW)
		{
			texfinder_namepos--;
			if(texfinder_namepos<0)texfinder_namepos=0;
		}
		if(*kcur==K_RIGHTARROW)
		{
			texfinder_namepos++;
			i=strlen(texfinder_namebuf);
			if(texfinder_namepos>i)texfinder_namepos=i;
		}
		if((*kcur>=' ') && (*kcur<='~'))
		{
			for(i=63; i>texfinder_namepos; i--)
				texfinder_namebuf[i]=texfinder_namebuf[i-1];
			texfinder_namebuf[i]=*kcur;
			texfinder_namepos++;
		}
		if(*kcur==K_BACKSPACE)
		{
			if(texfinder_namepos>0)
			{
				for(i=texfinder_namepos-1; i<63; i++)
					texfinder_namebuf[i]=texfinder_namebuf[i+1];
				texfinder_namepos--;
			}
		}

		if(*kcur==K_PGDN)
		{
			texfinder_index+=25;
			if(texfinder_index<0)texfinder_index=0;
			if(texfinder_index>texfinder_n_fnames)
				texfinder_index=texfinder_n_fnames;
		}
		if(*kcur==K_PGUP)
		{
			texfinder_index-=25;
			if(texfinder_index<0)texfinder_index=0;
			if(texfinder_index>texfinder_n_fnames)
				texfinder_index=texfinder_n_fnames;
		}

		kcur++;
	}
}
