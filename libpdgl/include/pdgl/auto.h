//AHSRC:base/render/fonts.c
PDGL_API int GfxFont_Register(char *name, char *buf, int w, int h, int s, int e);
PDGL_API PDGL_FontInfo *GfxFont_FindFont(char *name);
PDGL_API byte *GfxFont_FetchChar(PDGL_FontInfo *font, int c, int *w, int *h);
PDGL_API int GfxFont_GetCellBit(byte *cell, int w, int h, int x, int y, int rw, int rh);
PDGL_API int GfxFont_RenderCell(PDGL_FontInfo *font,PDGL_FontFrag *frag, int c);
PDGL_API PDGL_FontFrag *GfxFont_TryFetchFrag(PDGL_FontInfo *font, int c);
PDGL_API PDGL_FontFrag *GfxFont_FetchFrag(PDGL_FontInfo *font, int c);
PDGL_API int GfxFont_DrawChar(int c, int x, int y, int w, int h, int r, int g, int b, int a);
PDGL_API int GfxFont_DrawCharMode(int c,int x, int y, int w, int h, int r, int g, int b, int a, int m);
PDGL_API int GfxFont_DrawCharModeQI(int c,int x, int y, int w, int h, int r, int g, int b, int a, int m);
PDGL_API int GfxFont_DrawString(char *str, int x, int y, int w, int h,int r, int g, int b, int a);
PDGL_API int GfxFont_DrawString2(char *str, int x, int y, int w, int h,int r, int g, int b, int a);
PDGL_API int GfxFont_DrawFormatString(char *str, int x, int y, int w, int h,int r, int g, int b, int a);
PDGL_API int GfxFont_SetTime(int time);
PDGL_API int GfxFont_SetFont(char *name, int mode);
PDGL_API int GfxFont_SetFontSize(char *name, int mode, int size);
PDGL_API int GfxFont_LoadFont(char *name, char *fname);
PDGL_API int GfxFont_LoadFontBase(char *name, char *fname, int base);
PDGL_API int GfxFont_AddFontSearch(char *name, char *cname);
PDGL_API int GfxFont_Init();
//AHSRC:base/render/fonts_qi2.c
int pdgl_clampi(int v, int m, int n);
PDGL_API PDGL_TextVBO *PDGL_TextVBO_Create(void);
PDGL_API void PDGL_TextVBO_Reset(PDGL_TextVBO *ctx);
PDGL_API void PDGL_TextVBO_Upload(PDGL_TextVBO *ctx);
PDGL_API void PDGL_TextVBO_Draw(PDGL_TextVBO *ctx);
PDGL_API void PDGL_TextVBO_Color4fv(PDGL_TextVBO *ctx, float *fv);
PDGL_API void PDGL_TextVBO_Color4f(PDGL_TextVBO *ctx,float r, float g, float b, float a);
PDGL_API void PDGL_TextVBO_TexCoord2fv(PDGL_TextVBO *ctx, float *fv);
PDGL_API void PDGL_TextVBO_TexCoord2f(PDGL_TextVBO *ctx,float s, float t);
PDGL_API void PDGL_TextVBO_VertexCheckExpand(PDGL_TextVBO *ctx);
PDGL_API void PDGL_TextVBO_Vertex3fv(PDGL_TextVBO *ctx, float *fv);
PDGL_API void PDGL_TextVBO_Vertex2f(PDGL_TextVBO *ctx, float x, float y);
PDGL_API void PDGL_TextVBO_CheckExpandPrim(PDGL_TextVBO *ctx);
PDGL_API void PDGL_TextVBO_Begin(PDGL_TextVBO *ctx, int prim);
PDGL_API void PDGL_TextVBO_End(PDGL_TextVBO *ctx);
PDGL_API void PDGL_TextVBO_BindTexture(PDGL_TextVBO *ctx, int tex);
PDGL_API int PDGL_TextVBO_DrawCharModeQI2(PDGL_TextVBO *ctx,int c, int x, int y, int w, int h, int r, int g, int b, int a, int m);
//AHSRC:base/render/console.c
PDGL_API int GfxFont_SetFont(char *name, int mode);
PDGL_API int GfxFont_DrawChar(int c, int x, int y, int w, int h,int r, int g, int b, int a);
PDGL_API int Con_HandleKey(int num, int down);
PDGL_API int Con_DoExecCmds(void);
PDGL_API int Con_Update(float dt);
PDGL_API int Con_UpdateInfo(BTGE_ConsoleInfo *con, float dt);
PDGL_API int Con_StuffCmdInfo(BTGE_ConsoleInfo *con, char *str);
PDGL_API int Con_StuffCmd(char *str);
PDGL_API int Con_StuffCmdBuf(char *buf);
PDGL_API int Con_ExecCmdBuf(char *name);
PDGL_API int Con_IsDown();
PDGL_API int Con_SetHandler(char ch, int (*handler)(char *s), int down);
PDGL_API int Con_AddMode(char ch, int (*handler)(char *s));
PDGL_API int Con_AddModeComplete(char ch, int (*handler)(char *s),char *(*complete)(char *s));
PDGL_API int Con_SetDown(int down);
PDGL_API int Con_Clear();
PDGL_API int Con_ClearInfo(BTGE_ConsoleInfo *con);
PDGL_API int Con_Init();
PDGL_API int Con_ReInit();
PDGL_API int Con_RenderBackground();
PDGL_API int Con_RenderBackgroundInfo(BTGE_ConsoleInfo *con);
PDGL_API int Con_Render();
PDGL_API int Con_RenderInfo(BTGE_ConsoleInfo *con);
PDGL_API int Con_RenderBackgroundVBO(BTGE_ConsoleInfo *con, PDGL_TextVBO *vbo);
PDGL_API int Con_RenderTextVBO(BTGE_ConsoleInfo *con, PDGL_TextVBO *vbo);
PDGL_API int Con_RenderInfo2(BTGE_ConsoleInfo *con);
void cb_scrollup();
void con_memcpy(short *dst, short *src, int cnt);
void con_memset(short *dst, int val, int cnt);
void con_strcpy(short *dst, short *src);
int con_strlen(short *src);
void con_strcpy16to8(char *dst, short *src);
void con_strcpy8to16(short *dst, char *src);
void Con_ScrollUpInfo(BTGE_ConsoleInfo *con);
void Con_HandleAnsi(char **rstr);
void Con_HandleAnsiInfo(BTGE_ConsoleInfo *con, char **rstr);
PDGL_API void Con_WriteStringBase(char *str);
PDGL_API void Con_WriteString(char *str);
PDGL_API void Con_WriteString2(BTGE_ConsoleInfo *con, char *str);
PDGL_API int Con_HandleKey(int num, int down);
PDGL_API int Con_HandleKeyInfo(BTGE_ConsoleInfo *con, int num, int down);
PDGL_API int Con_KeyDown(BTGE_ConsoleInfo *con, int key);
PDGL_API int Con_Printf(char *s, ...);
//AHSRC:base/render/concmds.c
PDGL_API char *ConCmds_CvarGet(char *name);
PDGL_API bool ConCmds_CvarSet(char *name, char *val);
PDGL_API char *ConCmds_CvarComplete(char *str);
PDGL_API char *ConCmds_CvarGet(char *name);
PDGL_API bool ConCmds_CvarSet(char *name, char *val);
PDGL_API char *ConCmds_CvarComplete(char *str);
PDGL_API double ConCmds_CvarGetNum(char *name);
PDGL_API bool ConCmds_CvarSetNum(char *name, double val);
PDGL_API char *ConCmds_AliasGet(char *str);
PDGL_API bool ConCmds_AliasSet(char *name, char *val);
int concmd_isalpha(int c);
PDGL_API int ConCmds_FilteredHandler(char *str);
PDGL_API int ConCmds_Handler(char *str);
PDGL_API char *ConCmds_Complete(char *str);
PDGL_API int ConCmds_Register(char *name, char *desc, int (*func)(char **args));
int ConCmds_Cwd(char **a);
int ConCmds_Chdir(char **a);
int ConCmds_Mkdir(char **a);
int ConCmds_Ls(char **a);
int ConCmds_Cwd(char **a);
int ConCmds_Chdir(char **a);
int ConCmds_Mkdir(char **a);
int ConCmds_Ls(char **a);
int ConCmds_Exec(char **a);
int ConCmds_Set(char **a);
int ConCmds_Alias(char **a);
int ConCmds_Bind(char **a);
int ConCmds_Mount(char **a);
int ConCmds_LocalSpeak(char **a);
PDGL_API int ConCmds_Init();
//AHSRC:base/render/gl_draw.c
PDGL_API void PDGL_GetViewOrigin(int *rxo, int *ryo);
PDGL_API void PDGL_GetViewSize(int *rxs, int *rys);
PDGL_API int Draw_SetSolid_2D(float aspect, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetSolid2_2D(float aspect, float size,float *org, float *angles, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetOrtho_3D(float aspect, float size,float *org, float *angles, int x, int y, int w, int h);
PDGL_API int Draw_SetSolid3_2D(float lxs, float lys,float *org, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetSolid4_2D(float *mins, float *maxs, float *org, float *ang, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetPerspective_3D(float aspect, float fov, float d,float *org, float *angles, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetPerspective2_3D(float aspect, float fov, float width,float *org, float *rot, int xo, int yo, int xs, int ys);
PDGL_API int Draw_Square(int x, int y, int w, int h);
PDGL_API int Draw_FillSquare(int x, int y, int w, int h, float c[4]);
PDGL_API int Draw_FillSquareRGBA(int x, int y, int w, int h,int r, int g, int b, int a);
PDGL_API int Draw_Circle(int ox, int oy, int r);
PDGL_API int Draw_FillCircle(int ox, int oy, int ra, int r, int g, int b, int a);
PDGL_API int Draw_PictureCircle(int ox, int oy, int r, int texnum);
PDGL_API int Draw_Bind(int num);
PDGL_API int Draw_DisableTextures();
PDGL_API int Draw_EnableTextures();
PDGL_API int Draw_ColorRGBA(int r, int g, int b, int a);
PDGL_API int Draw_Picture(int x, int y, int w, int h, int num);
//AHSRC:base/render/gl_draw_gles.c
PDGL_API int Draw_SetSolid_2D(float aspect, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetSolid2_2D(float aspect, float size,float *org, float *angles, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetOrtho_3D(float aspect, float size,float *org, float *angles, int x, int y, int w, int h);
PDGL_API int Draw_SetSolid3_2D(float lxs, float lys,float *org, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetSolid4_2D(float *mins, float *maxs, float *org, float *ang, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetPerspective_3D(float aspect, float fov, float d,float *org, float *angles, int xo, int yo, int xs, int ys);
PDGL_API int Draw_SetPerspective2_3D(float aspect, float fov, float width,float *org, float *rot, int xo, int yo, int xs, int ys);
PDGL_API int Draw_Square(int x, int y, int w, int h);
PDGL_API int Draw_FillSquare(int x, int y, int w, int h, float c[4]);
PDGL_API int Draw_FillSquareRGBA(int x, int y, int w, int h,int r, int g, int b, int a);
PDGL_API int Draw_Circle(int ox, int oy, int r);
PDGL_API int Draw_FillCircle(int ox, int oy, int ra, int r, int g, int b, int a);
PDGL_API int Draw_PictureCircle(int ox, int oy, int r, int texnum);
PDGL_API int Draw_Bind(int num);
PDGL_API int Draw_DisableTextures();
PDGL_API int Draw_EnableTextures();
PDGL_API int Draw_ColorRGBA(int r, int g, int b, int a);
PDGL_API int Draw_Picture(int x, int y, int w, int h, int num);
//AHSRC:base/render/gl_drawprim.c
PDGL_API void pdglBegin(int prim);
PDGL_API void pdglEnd(void);
PDGL_API void pdglVertex2fv(float *v);
PDGL_API void pdglVertex3fv(float *v);
PDGL_API void pdglVertex3dv(double *v);
PDGL_API void pdglTexCoord2fv(float *v);
PDGL_API void pdglNormal3fv(float *v);
PDGL_API void pdglNormal3sbv(sbyte *v);
PDGL_API void pdglNormal3bv(sbyte *v);
PDGL_API void pdglColor3fv(float *v);
PDGL_API void pdglColor4fv(float *v);
PDGL_API void pdglColor4ubv(byte *v);
PDGL_API void pdglColor3f(float r, float g, float b);
PDGL_API void pdglColor4f(float r, float g, float b, float a);
PDGL_API void pdglColor4ub(int r, int g, int b, int a);
PDGL_API void pdglTexCoord2f(float s, float t);
PDGL_API void pdglVertex2f(float x, float y);
PDGL_API void pdglVertex3f(float x, float y, float z);
PDGL_API void pdglNormal3f(float x, float y, float z);
PDGL_API void pdglColorMask(bool r, bool g, bool b, bool a);
PDGL_API void pdglEnableTexture2D(void);
PDGL_API void pdglDisableTexture2D(void);
PDGL_API void pdglEnableLighting(void);
PDGL_API void pdglDisableLighting(void);
PDGL_API void pdglModelviewMatrix(void);
PDGL_API void pdglProjectionMatrix(void);
PDGL_API void pdglLoadIdentity(void);
PDGL_API void pdglPushMatrix(void);
PDGL_API void pdglPopMatrix(void);
PDGL_API void pdglMultMatrixf(float *mat);
PDGL_API void pdglTranslatef(float x, float y, float z);
PDGL_API void pdglScalef(float x, float y, float z);
PDGL_API void pdglRotatef(float th, float nx, float ny, float nz);
PDGL_API void pdglGetModelviewMatrix(float *v);
PDGL_API void pdglOrtho(float mx, float nx, float my, float ny, float mz, float nz);
PDGL_API void PDGL_Light0_ConstantAttenuation(float v);
PDGL_API void PDGL_Light0_LinearAttenuation(float v);
PDGL_API void PDGL_Light0_QuadraticAttenuation(float v);
PDGL_API void PDGL_Enable_Light0(void);
PDGL_API void PDGL_ColorMaterial_Ambient(float *v);
PDGL_API void PDGL_ColorMaterial_Diffuse(float *v);
PDGL_API void PDGL_ColorMaterial_Specular(float *v);
PDGL_API void PDGL_ColorMaterial_Emission(float *v);
PDGL_API void PDGL_ColorMaterial_Shininess(float *v);
PDGL_API void PDGL_Light0_Ambient(float *v);
PDGL_API void PDGL_Light0_Diffuse(float *v);
PDGL_API void PDGL_Light0_Specular(float *v);
PDGL_API void PDGL_Light0_Position(float *v);
PDGL_API void PDGL_Light0_SpotDirection(float *v);
PDGL_API void PDGL_Light0_SpotCutoff(float v);
PDGL_API void PDGL_Light0_SpotExponent(float v);
PDGL_API void PDGL_DrawPrim_DrawArraysSimpleFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalFlatRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalTex(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
PDGL_API void PDGL_DrawPrim_DrawArraysTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int rgbsize, int rgbtype, int rgbstep, void *rgb);
void pdgl_worker_begin(BGBGC_WorkerInfo *info);
void pdgl_worker_end(BGBGC_WorkerInfo *info);
BGBGC_WorkerInfo *pdgl_worker_spawn(void *data);
PDGL_API BGBGC_Job *pdglAddJob(void *(*fcn)(void *data), void *data);
//AHSRC:base/render/gl_drawprim_gles.c
PDGL_API void pdglBegin(int prim);
PDGL_API void pdglEnd(void);
void PDGL_DrawPrim_DrawArrays(int prim, float *xyz, float *st, float *norm, float *rgba, int nxyz);
void PDGL_DrawPrim_VertexCheckExpand();
PDGL_API void pdglVertex3fv(float *v);
PDGL_API void pdglVertex3dv(double *v);
PDGL_API void pdglTexCoord2fv(float *v);
PDGL_API void pdglNormal3fv(float *v);
PDGL_API void pdglNormal4fv(float *v);
PDGL_API void pdglNormal3sbv(sbyte *v);
PDGL_API void pdglNormal3bv(sbyte *v);
PDGL_API void pdglColor3fv(float *v);
PDGL_API void pdglColor4fv(float *v);
PDGL_API void pdglColor4ubv(byte *v);
PDGL_API void pdglColor3f(float r, float g, float b);
PDGL_API void pdglColor4f(float r, float g, float b, float a);
PDGL_API void pdglColor4ub(int r, int g, int b, int a);
PDGL_API void pdglTexCoord2f(float s, float t);
PDGL_API void pdglVertex2f(float x, float y);
PDGL_API void pdglVertex3f(float x, float y, float z);
PDGL_API void pdglNormal3f(float x, float y, float z);
PDGL_API void pdglColorMask(bool r, bool g, bool b, bool a);
PDGL_API void pdglEnableTexture2D(void);
PDGL_API void pdglDisableTexture2D(void);
PDGL_API void pdglEnableLighting(void);
PDGL_API void pdglDisableLighting(void);
PDGL_API void pdglModelviewMatrix(void);
PDGL_API void pdglProjectionMatrix(void);
PDGL_API void pdglLoadIdentity();
PDGL_API void pdglPushMatrix(void);
PDGL_API void pdglPopMatrix(void);
PDGL_API void pdglMultMatrixf(float *mat);
PDGL_API void pdglTranslatef(float x, float y, float z);
PDGL_API void pdglScalef(float x, float y, float z);
PDGL_API void pdglRotatef(float th, float nx, float ny, float nz);
PDGL_API void pdglGetModelviewMatrix(float *v);
PDGL_API void pdglOrtho(float mx, float nx, float my, float ny, float mz, float nz);
PDGL_API void PDGL_Light0_ConstantAttenuation(float v);
PDGL_API void PDGL_Light0_LinearAttenuation(float v);
PDGL_API void PDGL_Light0_QuadraticAttenuation(float v);
PDGL_API void PDGL_Enable_Light0(void);
PDGL_API void PDGL_ColorMaterial_Ambient(float *v);
PDGL_API void PDGL_ColorMaterial_Diffuse(float *v);
PDGL_API void PDGL_ColorMaterial_Specular(float *v);
PDGL_API void PDGL_ColorMaterial_Emission(float *v);
PDGL_API void PDGL_ColorMaterial_Shininess(float *v);
PDGL_API void PDGL_Light0_Ambient(float *v);
PDGL_API void PDGL_Light0_Diffuse(float *v);
PDGL_API void PDGL_Light0_Specular(float *v);
PDGL_API void PDGL_Light0_Position(float *v);
PDGL_API void PDGL_Light0_SpotDirection(float *v);
PDGL_API void PDGL_Light0_SpotCutoff(float v);
PDGL_API void PDGL_Light0_SpotExponent(float v);
PDGL_API void PDGL_DrawPrim_DrawArraysSimpleFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalFlat(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalFlatRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalTex(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm);
PDGL_API void PDGL_DrawPrim_DrawArraysNormalTexRGB(int prim, int base, int nxyz, int xyzsize, int xyztype, int xyzstep, void *xyz,  int stsize, int sttype, int ststep, void *st,  int normsize, int normtype, int normstep, void *norm, int rgbsize, int rgbtype, int rgbstep, void *rgb);
//AHSRC:base/render/gl_texture.c
PDGL_API int Tex_GetModeinfo(int *min, int *mag);
void tex_lock();
void tex_unlock();
PDGL_API int Tex_Init2();
PDGL_API int Tex_AllocTexnum();
PDGL_API int Tex_FreeTexnum(int n);
PDGL_API int Tex_MarkTexnum(int n);
PDGL_API int Tex_DeleteTexture(int n);
PDGL_API int Tex_AllocBlock(int *x, int *y, int *b);
PDGL_API int Tex_FindFragment(int xs, int ys, int *x, int *y, int *z);
PDGL_API int Tex_LockFragment(int x, int y, int z, int xs, int ys);
PDGL_API int Tex_AllocFragment(int xs, int ys, int *x, int *y, int *z);
PDGL_API int Tex_LoadTextureFragment(int xs, int ys, byte *buf,float *stmin, float *stmax);
PDGL_API int Tex_Resample(byte *src, int iw, int ih, byte *dst, int ow, int oh);
PDGL_API int Tex_ResampleMono(byte *src, int iw, int ih,byte *dst, int ow, int oh);
PDGL_API int Tex_PadResample(int *src, int iw, int ih,int *dst, int ow, int oh);
PDGL_API int Tex_HalfSample(byte *src, int w, int h);
PDGL_API int Tex_HalfSample(byte *src, int w, int h);
PDGL_API int Tex_HalfSample2(byte *src, int w, int h);
PDGL_API double Tex_Sinc(double x);
PDGL_API double Tex_Lanczos(double x, double a);
PDGL_API int Tex_SincPolateRGBA8(byte *src, int w, int h,float x, float y, float *rgba, int n);
PDGL_API int Tex_ResampleSinc(byte *src, int iw, int ih,byte *dst, int ow, int oh);
PDGL_API int Tex_SplinePolateRGBA8(byte *src, int w, int h,float x, float y, float *rgba);
PDGL_API int Tex_ResampleSpline(byte *src, int iw, int ih,byte *dst, int ow, int oh);
PDGL_API int Tex_FilterBlur2(byte *src, byte *dst, int w, int h);
PDGL_API int Tex_FilterHBlur(byte *src, byte *dst,int w, int h, float bf);
PDGL_API int Tex_FilterVBlur(byte *src, byte *dst, int w, int h, float bf);
PDGL_API int Tex_FilterBlurHV(byte *src, byte *dst,int w, int h, float xf, float yf);
PDGL_API int Tex_FilterBlur(byte *src, byte *dst, int w, int h, int rad);
PDGL_API int Tex_ResampleSpline2(byte *src, int iw, int ih,byte *dst, int ow, int oh);
PDGL_API int Tex_SetUseColorFormat(int clrfmt);
PDGL_API int Tex_GetLastColorFormat();
PDGL_API int Tex_LoadTexture(int w, int h, byte *buf, int calcmip);
PDGL_API int Tex_LoadTexture(int w, int h, byte *buf, int calcmip);
PDGL_API int Tex_LoadTexture2(int w, int h, byte *buf,int mip, int rnum, int enc);
PDGL_API int Tex_LoadTexture3A(int *wp, int *hp, byte *buf,int num, int clrs);
PDGL_API int Tex_LoadTexture3B(int *wp, int *hp, byte *buf,int num, int clrs, int mip);
PDGL_API int Tex_LoadTexture3(int *wp, int *hp, byte *buf, int num);
PDGL_API int Tex_LoadTextureMono(int w, int h, byte *buf);
PDGL_API byte *Img_LoadTGA(VFILE *fd, int *w, int *h);
PDGL_API int Img_StoreTGA(VFILE *fd, byte *buf, int w, int h);
PDGL_API byte *Img_LoadBMP(VFILE *fd, int *w, int *h);
PDGL_API byte *Img_FlattenDIB(byte *img, int w, int h);
PDGL_API byte *Img_UnFlattenDIB(byte *img, int *w, int *h);
PDGL_API byte *Img_FlattenBPX(byte *img, int w, int h, int clrs, int *rsz);
PDGL_API byte *Img_LoadBPX(VFILE *fd, int *w, int *h, int *rtxc);
PDGL_API byte *Img_TryLoadTextureBPX(char *name, int *w, int *h, int *rtxc);
PDGL_API int Img_SaveTextureCacheBPX(char *name, int w, int h, byte *buf, int calcmip);
PDGL_API int Tex_LoadFile(char *name, int *w, int *h);
PDGL_API byte *Tex_GetBuffer(int n);
PDGL_API void Tex_FreeRaw(void *p);
PDGL_API byte *Tex_LoadFileRaw(char *name, int *w, int *h);
PDGL_API byte *Tex_LoadFileExtAlphaRaw(char *name, char *ext, int *w, int *h);
PDGL_API byte *Tex_LoadFileExtBaseSuffixRaw(char *name, char *ext, char *base, char *suff, int *w, int *h);
PDGL_API byte *Tex_LoadFileJpegAlphaRaw(char *name, int *w, int *h);
PDGL_API int Tex_LoadFileExtAlpha(char *name, char *ext, int *w, int *h);
PDGL_API int Tex_LoadFileJpegAlpha(char *name, int *w, int *h);
PDGL_API int Tex_LoadFileExtBaseSuffix(char *name, char *ext, char *base, char *suff, int *w, int *h);
PDGL_API int Tex_LoadFileBaseSuffix(char *name, char *base, char *suff, int *w, int *h);
PDGL_API byte *Tex_LoadImageBufferRaw(char *name, char *type,byte *imgbuf, int imgsz, int *rw, int *rh);
PDGL_API int Tex_StoreFile(char *name, byte *buf, int w, int h);
PDGL_API int Tex_Screenshot_Clipboard();
PDGL_API int Tex_Screenshot(char *name);
PDGL_API int Tex_Screenshot2(char *name);
PDGL_API int Tex_DoScreenshot();
PDGL_API int Tex_DoScreenshotFrame();
PDGL_API int Tex_ScreenshotTexture();
PDGL_API int Tex_ScreenshotDepthTexture();
PDGL_API int Tex_FillTextureScreenshot(int texnum);
PDGL_API int Tex_FillTextureScreenshotDepth(int texnum);
PDGL_API int Tex_EmptyTexture(int xs, int ys);
PDGL_API int Tex_EmptyTextureRGB(int xs, int ys);
//AHSRC:base/render/drawtext.c
PDGL_API int PDGL_SetTextOrigin(int x, int y);
PDGL_API int PDGL_SetTextSize(int sz);
PDGL_API int PDGL_SetTextSize2(int w, int h);
PDGL_API int PDGL_SetTextColor(float *c);
PDGL_API int PDGL_SetTextColor2(int r, int g, int b, int a);
PDGL_API int PDGL_DrawText(char *str);
//AHSRC:base/render/pcx.c
PDGL_API byte *PCX_Load(VFILE *fd, int *w, int *h, char *pal);
PDGL_API byte *PCX_Load32(VFILE *fd, int *w, int *h);
PDGL_API int PCX_Store(VFILE *fd, unsigned char *img, int width, int height, char *pal);
PDGL_API int PCX_StoreRaw(char *name, unsigned char *buf, int w, int h, char *pal);
//AHSRC:base/render/png.c
uint PDPNG_DataAdler32(void *buf, int sz, uint lcrc);
void PDPNG_DataAdler32_Step16(byte *buf, int *rs1, int *rs2);
uint PDPNG_DataAdler32(void *buf, int sz, uint lcrc);
uint PDPNG_CRC32(void *buf, int sz, uint lcrc);
char *PDPNG_Fourcc2String(uint fcc);
int PDPNG_Paeth(int a, int b, int c);
int PDPNG_Paeth(int a, int b, int c);
int PDPNG_Paeth(int a, int b, int c);
uint PDPNG_ReadInt32BE(VFILE *fd);
uint PDPNG_ReadFourcc(VFILE *fd);
int PDPNG_Pred0(int pa, int pb, int pc);
int PDPNG_Pred1(int pa, int pb, int pc);
int PDPNG_Pred2(int pa, int pb, int pc);
int PDPNG_Pred3(int pa, int pb, int pc);
int PDPNG_Pred4(int pa, int pb, int pc);
byte *PDPNG_PredLinePaethRGB(byte *buf, int xs, int ys, int i, byte *s);
byte *PDPNG_PredLinePaethRGBA(byte *buf, int xs, int ys, int i, byte *s);
PDGL_API byte *PDPNG_Load(VFILE *ifd, int *w, int *h);
PDGL_API byte *PDPNG_LoadN(VFILE *ifd, int *w, int *h, char *name);
void PDPNG_WriteInt32LE(VFILE *fd, uint v);
void PDPNG_WriteInt32BE(VFILE *fd, uint v);
void PDPNG_WriteFourcc(VFILE *fd, uint v);
void PDPNG_WriteChunk(VFILE *fd, uint fcc, byte *buf, int len);
PDGL_API void PDPNG_Store(VFILE *fd, byte *buf, int xs, int ys);
//AHSRC:base/render/jpg2.c
PDGL_API PDJPG_Context *PDJPG_AllocContext();
PDGL_API void PDJPG_FreeContext(PDJPG_Context *ctx);
PDGL_API void PDJPG_SetContextAlphaColor(PDJPG_Context *ctx,int cr, int cg, int cb, int ca);
void PDJPG_TransDCT_Horiz(byte *iblk, int *oblk);
void PDJPG_TransDCT_Vert(int *iblk, int *oblk);
void PDJPG_TransDCT(byte *iblk, short *oblk);
void PDJPG_TransIDCT_Horiz(short *iblk, int *oblk);
void PDJPG_TransIDCT_Vert(int *iblk, int *oblk);
void PDJPG_TransIDCT(short *iblk, byte *oblk);
int PDJHUFF_NextByte(PDJPG_Context *ctx);
int PDJHUFF_InitStream(PDJPG_Context *ctx, byte *buf);
int PDJHUFF_ReadBit(PDJPG_Context *ctx);
int PDJHUFF_ReadNBits(PDJPG_Context *ctx, int n);
void PDJHUFF_SkipNBits(PDJPG_Context *ctx, int n);
int PDJHUFF_PeekWord(PDJPG_Context *ctx);
int PDJHUFF_DecodeSymbol(PDJPG_Context *ctx, int tab);
int PDJHUFF_DecodeSymbol(PDJPG_Context *ctx, int tab);
int PDJHUFF_DecodeDiffDC(PDJPG_Context *ctx, int tab);
int PDJHUFF_DecodeBlock(PDJPG_Context *ctx,short *buf, int dctab, int actab, int ni, int nn);
void PDJHUFF_QuantBlock(PDJPG_Context *ctx, short *ibuf, short *obuf, int qid);
void PDJHUFF_DequantBlock(PDJPG_Context *ctx, short *ibuf, short *obuf, int qid);
void PDJPG_SetupQuantTabDivFP(PDJPG_Context *ctx, int qid);
int PDJPG_MarkerSOS(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerSOF0(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerDQT(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerDHT(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPP0(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPP11(PDJPG_Context *ctx, byte *buf);
int PDJPG_MarkerAPPN(PDJPG_Context *ctx, byte *buf);
int PDJPG_GetComponentPixel(PDJPG_Context *ctx, int cn, int x, int y);
int PDJPG_GetComponentPixel(PDJPG_Context *ctx, int cn, int x, int y);
int PDJPG_GetComponentPixelS1(PDJPG_Context *ctx, int cn, int x, int y);
int PDJPG_GetComponentPixelS2(PDJPG_Context *ctx, int cn, int x, int y);
int PDJPG_GetComponentPixelS122(PDJPG_Context *ctx, int x, int y,int *ry, int *ru, int *rv);
int PDJPG_GetComponentPixelS420(PDJPG_Context *ctx, int x, int y,int *ry0, int *ry1, int *ry2, int *ry3, int *ru, int *rv);
PDGL_API byte *PDJPG_DecodeCtx(PDJPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
PDGL_API void PDJPG_Free(byte *buf);
byte *PDJPG_DecodeScanForComponentLayer(byte *buf, int sz, char *name);
PDGL_API byte *PDJPG_Decode(byte *buf, int sz, int *xs, int *ys);
PDGL_API int PDJPG_DecodeComponentType(byte *buf, int sz);
PDGL_API byte *PDJPG_DecodeLDatCtx(PDJPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
PDGL_API int PDJPG_DecodeComponentCtx(PDJPG_Context *ctx,byte *buf, int sz, byte *rgba, byte *norm, byte *spec, byte *luma, int *xs, int *ys);
PDGL_API int PDJPG_DecodeComponent(byte *buf, int sz,byte *rgba, byte *norm, byte *spec, byte *luma, int *xs, int *ys);
void PDJHUFF_WriteBit(PDJPG_Context *ctx, int i);
void PDJHUFF_WriteNBits(PDJPG_Context *ctx, int v, int n);
void PDJHUFF_FlushBits(PDJPG_Context *ctx);
void PDJHUFF_WriteString(PDJPG_Context *ctx, char *str);
int PDJHUFF_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDJHUFF_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int PDJHUFF_BuildLengths(int *stat, int nc, byte *cl, int ml);
int PDJHUFF_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void PDJHUFF_EncodeSymbol(PDJPG_Context *ctx, int tab, int v);
void PDJHUFF_EncodeVal(PDJPG_Context *ctx, int tab, int z, int v);
void PDJHUFF_StatVal(int *stat, int z, int v);
int PDJHUFF_EncodeBlock(PDJPG_Context *ctx,short *buf, int dctab, int actab);
int PDJHUFF_StatBlock(short *buf, int *dcstat, int *acstat);
int PDJPG_GetImgBlk(char *blk, int xo, int yo, byte *img, int xs, int ys);
int PDJPG_FilterImageDCT(byte *ibuf, short *obuf, int xs, int ys);
void PDJPG_EmitDQT(PDJPG_Context *ctx, int n);
void PDJPG_EmitSOF(PDJPG_Context *ctx, int xs, int ys);
void PDJPG_EmitSOS(PDJPG_Context *ctx);
void PDJPG_EmitDHT(PDJPG_Context *ctx, int tab);
void PDJPG_MakeQuantTabInput(short *in, int cnt, byte *tab, float q);
void PDJPG_MakeQuantTabInputFast(short *in, int cnt, byte *tab, float q);
PDGL_API int PDJPG_EncodeCtx(PDJPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
PDGL_API PDJPG_Context *PDJPG_AllocContext();
PDGL_API void PDJPG_FreeContext(PDJPG_Context *ctx);
PDGL_API int PDJPG_Encode(byte *ibuf, byte *obuf, int xs, int ys, int qf);
PDGL_API void PDJPG_FlushEncodeFast(PDJPG_Context *ctx);
PDGL_API void PDJPG_SetContextAlphaColor(PDJPG_Context *ctx,int cr, int cg, int cb, int ca);
void PDJPG_ConvertImageYUV(PDJPG_Context *ctx,byte *ibuf, int xs, int ys, int pf, int xs2, int ys2, int xs3, int ys3);
PDGL_API int PDJPG_EncodeFastCtx(PDJPG_Context *ctx,byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
PDGL_API int PDJPG_EncodeFast(byte *ibuf, byte *obuf, int xs, int ys, int qf);
byte *PDJPG_EmitComponentLayer(PDJPG_Context *ctx,byte *ct, char *name);
byte *PDJPG_EmitMarkerJFIF(PDJPG_Context *ctx, byte *ct);
PDGL_API int PDJPG_EscapeEncodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
PDGL_API int PDJPG_EscapeEncodeSingleBuffer(byte *buf, int sz);
PDGL_API int PDJPG_EscapeDecodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
PDGL_API int PDJPG_EscapeDecodeSingleBuffer(byte *buf, int sz);
PDGL_API int PDJPG_EncodeLDatCtx(PDJPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
PDGL_API int PDJPG_EncodeBaseCtx(PDJPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
PDGL_API int PDJPG_EncodeComponentCtx(PDJPG_Context *ctx, byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
PDGL_API int PDJPG_EncodeComponent(byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
PDGL_API byte *PDJPG_Load(VFILE *fd, int *xs, int *ys);
PDGL_API int PDJPG_Store(VFILE *fd, byte *ibuf, int xs, int ys, int qf);
//AHSRC:base/render/out_avi.c
void PDGL_AVI_UpdateSize(VFILE *fd, int o);
PDGL_AVICtx *PDGL_AVI_OpenOutStream(char *name,int w, int h, float fps, int fcc);
PDGL_AVICtx *PDGL_AVI_OpenOutStream2(char *name,int w, int h, float fps, int fcc, int auid);
void PDGL_AVI_CloseOutStream(PDGL_AVICtx *ctx);
int PDGL_AVI_AddIndex(PDGL_AVICtx *ctx, uint tag, uint len, uint fl);
void PDGL_AVI_EmitCodedFrame(PDGL_AVICtx *ctx, byte *buf, int sz);
void PDGL_AVI_EmitAudioFrame(PDGL_AVICtx *ctx);
void PDGL_AVI_EmitAudioFrame(PDGL_AVICtx *ctx);
bool PDGL_AVI_CheckEatAudioFrame(PDGL_AVICtx *ctx);
void PDGL_AVI_EncodeFrame(PDGL_AVICtx *ctx, byte *ibuf, int w, int h);
void PDGL_AVI_Scale800x600to320x240(byte *ibuf, byte *obuf);
void PDGL_AVI_Lock(void);
void PDGL_AVI_Unlock(void);
void PDGL_AVI_FrameLock(void);
void PDGL_AVI_FrameUnlock(void);
int PDGL_AVI_EncoderLoop(void *p);
PDGL_API int PDGL_AVI_GetEncodeTime();
PDGL_API int PDGL_AVI_WriteStereoSamples(short *buf, int cnt);
PDGL_API int PDGL_AVI_Screenshot(int doshot);
PDGL_API int PDGL_AVI_DoScreenshotFrame(double dt, int doshot);
PDGL_API int PDGL_AVI_NoCapture(int doshot);
PDGL_API double PDGL_AVI_GetFrameTime();
//AHSRC:base/render/gl_shader.c
void *pdglGetProcAddress(char *name);
PDGL_API int PDGL_InitShader();
PDGL_API int PDGL_LookupShaderSource(char *name, int ty);
PDGL_API int PDGL_LoadShaderSource(char *name, int ty);
PDGL_API int PDGL_LookupShader(char *name);
PDGL_API int PDGL_LoadShader(char *name);
PDGL_API int PDGL_BindShader(int num);
PDGL_API int PDGL_UnbindShader();
PDGL_API int PDGL_CheckGlExtension(char *str);
PDGL_API int PDGL_GetFreeVideoMemory();
PDGL_API int pdglGetUniformLocation(int shader, char *name);
PDGL_API int pdglGetUniformLocationF(int shader, char *name);
PDGL_API void PDGL_ErrorStatusUniform(char *name);
PDGL_API int PDGL_CheckForUniform(char *name);
PDGL_API int PDGL_Uniform1f(char *name, float x);
PDGL_API int PDGL_Uniform2f(char *name, float x, float y);
PDGL_API int PDGL_Uniform3f(char *name, float x, float y, float z);
PDGL_API int PDGL_Uniform4f(char *name, float x, float y, float z, float w);
PDGL_API int PDGL_Uniform1i(char *name, int x);
PDGL_API int PDGL_Uniform2i(char *name, int x, int y);
PDGL_API int PDGL_Uniform3i(char *name, int x, int y, int z);
PDGL_API int PDGL_Uniform4i(char *name, int x, int y, int z, int w);
PDGL_API int PDGL_Uniform1fv(char *name, int cnt, float *pf);
PDGL_API int PDGL_Uniform2fv(char *name, int cnt, float *pf);
PDGL_API int PDGL_Uniform3fv(char *name, int cnt, float *pf);
PDGL_API int PDGL_Uniform4fv(char *name, int cnt, float *pf);
PDGL_API void pdglUniform1f(int var, float x);
PDGL_API void pdglUniform2f(int var, float x, float y);
PDGL_API void pdglUniform3f(int var, float x, float y, float z);
PDGL_API void pdglUniform4f(int var, float x, float y, float z, float w);
PDGL_API void pdglUniform1i(int var, int x);
PDGL_API void pdglUniform2i(int var, int x, int y);
PDGL_API void pdglUniform3i(int var, int x, int y, int z);
PDGL_API void pdglUniform4i(int var, int x, int y, int z, int w);
PDGL_API void pdglUniform1fv(int var, int cnt, float *pf);
PDGL_API void pdglUniform2fv(int var, int cnt, float *pf);
PDGL_API void pdglUniform3fv(int var, int cnt, float *pf);
PDGL_API void pdglUniform4fv(int var, int cnt, float *pf);
PDGL_API int pdglVertexAttrib1f(int index, float v0);
PDGL_API int pdglVertexAttrib2f(int index, float v0, float v1);
PDGL_API int pdglVertexAttrib3f(int index, float v0, float v1, float v2);
PDGL_API int pdglVertexAttrib4f(int index,float v0, float v1, float v2, float v3);
PDGL_API int pdglVertexAttrib1fv(int index, float *v);
PDGL_API int pdglVertexAttrib2fv(int index, float *v);
PDGL_API int pdglVertexAttrib3fv(int index, float *v);
PDGL_API int pdglVertexAttrib4fv(int index, float *v);
PDGL_API int pdglGetAttribLocation(int program, char *name);
PDGL_API int PDGL_GetAttribLocation(char *name);
PDGL_API int pdglVertexAttribPointer(int index, int size, int type, int normalized, int stride, void *pointer);
PDGL_API int pdglEnableVertexAttribArray(int idx);
PDGL_API int pdglDisableVertexAttribArray(int idx);
PDGL_API int pdglActiveTexture(int idx);
PDGL_API int pdglMultiTexCoord1f(int idx, float s);
PDGL_API int pdglMultiTexCoord2f(int idx, float s, float t);
PDGL_API int pdglMultiTexCoord3f(int idx, float s, float t, float p);
PDGL_API int pdglMultiTexCoord4f(int idx, float s, float t, float p, float q);
PDGL_API int pdglMultiTexCoord1fv(int idx, float *v);
PDGL_API int pdglMultiTexCoord2fv(int idx, float *v);
PDGL_API int pdglMultiTexCoord3fv(int idx, float *v);
PDGL_API int pdglMultiTexCoord4fv(int idx, float *v);
PDGL_API int pdglBeginQuery(int tgt, int id);
PDGL_API int pdglEndQuery(int tgt);
PDGL_API int pdglGetQueryObjectiv(int id, int pname, int *params);
PDGL_API int pdglGetQueryObjectuiv(int id, int pname, uint *params);
PDGL_API int pdglGenFramebuffers(int n, int *ids);
PDGL_API int pdglGenRenderbuffers(int n, int *ids);
PDGL_API int pdglBindFramebuffer(int target, int framebuffer);
PDGL_API int pdglBindRenderbuffer(int target, int framebuffer);
PDGL_API int pdglRenderbufferStorage(int target,int internalformat, int width, int height);
PDGL_API int pdglFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level);
PDGL_API int pdglFramebufferRenderbuffer(int target, int attachment, int textarget, int texture);
PDGL_API int pdglCheckFramebufferStatus(int target);
PDGL_API int pdglDrawBuffers(int n, int *ids);
PDGL_API int pdglGenBuffers(int n, int *ids);
PDGL_API int pdglDeleteBuffers(int n, int *ids);
PDGL_API int pdglBindBuffer(int target, int buffer);
PDGL_API int pdglBufferData(int target, int size, const void *data, int usage);
PDGL_API int pdglBufferSubData(int target, int offset, int size, const void *data);
PDGL_API void *pdglMapBuffer(int target, int access);
PDGL_API bool pdglUnmapBuffer(int target);
PDGL_API int pdglCompressedTexImage2D(int		target, int		level, int		internalformat, int		width, int		height, int		border, int		imageSize, const void *data);
//AHSRC:base/render/gl_shader_gles.c
void *pdglGetProcAddress(char *name);
PDGL_API int PDGL_InitShader();
PDGL_API int PDGL_LookupShaderSource(char *name, int ty);
PDGL_API int PDGL_LoadShaderSource(char *name, int ty);
PDGL_API int PDGL_LookupShader(char *name);
PDGL_API int PDGL_LoadShader(char *name);
PDGL_API int PDGL_BindShader(int num);
PDGL_API int PDGL_UnbindShader();
PDGL_API int pdglGetUniformLocation(int shader, char *name);
PDGL_API int PDGL_CheckForUniform(char *name);
PDGL_API int PDGL_Uniform1f(char *name, float x);
PDGL_API int PDGL_Uniform2f(char *name, float x, float y);
PDGL_API int PDGL_Uniform3f(char *name, float x, float y, float z);
PDGL_API int PDGL_Uniform4f(char *name, float x, float y, float z, float w);
PDGL_API int PDGL_Uniform1i(char *name, int x);
PDGL_API int PDGL_Uniform2i(char *name, int x, int y);
PDGL_API int PDGL_Uniform3i(char *name, int x, int y, int z);
PDGL_API int PDGL_Uniform4i(char *name, int x, int y, int z, int w);
PDGL_API int PDGL_Uniform1fv(char *name, int cnt, float *pf);
PDGL_API int PDGL_Uniform2fv(char *name, int cnt, float *pf);
PDGL_API int PDGL_Uniform3fv(char *name, int cnt, float *pf);
PDGL_API int PDGL_Uniform4fv(char *name, int cnt, float *pf);
PDGL_API void pdglUniform1f(int var, float x);
PDGL_API void pdglUniform2f(int var, float x, float y);
PDGL_API void pdglUniform3f(int var, float x, float y, float z);
PDGL_API void pdglUniform4f(int var, float x, float y, float z, float w);
PDGL_API void pdglUniform1i(int var, int x);
PDGL_API void pdglUniform2i(int var, int x, int y);
PDGL_API void pdglUniform3i(int var, int x, int y, int z);
PDGL_API void pdglUniform4i(int var, int x, int y, int z, int w);
PDGL_API void pdglUniform1fv(int var, int cnt, float *pf);
PDGL_API void pdglUniform2fv(int var, int cnt, float *pf);
PDGL_API void pdglUniform3fv(int var, int cnt, float *pf);
PDGL_API void pdglUniform4fv(int var, int cnt, float *pf);
PDGL_API int pdglVertexAttrib1f(int index, float v0);
PDGL_API int pdglVertexAttrib2f(int index, float v0, float v1);
PDGL_API int pdglVertexAttrib3f(int index, float v0, float v1, float v2);
PDGL_API int pdglVertexAttrib4f(int index,float v0, float v1, float v2, float v3);
PDGL_API int pdglVertexAttrib1fv(int index, float *v);
PDGL_API int pdglVertexAttrib2fv(int index, float *v);
PDGL_API int pdglVertexAttrib3fv(int index, float *v);
PDGL_API int pdglVertexAttrib4fv(int index, float *v);
PDGL_API int pdglGetAttribLocation(int program, char *name);
PDGL_API int PDGL_GetAttribLocation(char *name);
PDGL_API int pdglVertexAttribPointer(int index, int size, int type, int normalized, int stride, void *pointer);
PDGL_API int pdglEnableVertexAttribArray(int idx);
PDGL_API int pdglDisableVertexAttribArray(int idx);
PDGL_API int pdglActiveTexture(int idx);
PDGL_API int pdglMultiTexCoord1f(int idx, float s);
PDGL_API int pdglMultiTexCoord2f(int idx, float s, float t);
PDGL_API int pdglMultiTexCoord3f(int idx, float s, float t, float p);
PDGL_API int pdglMultiTexCoord4f(int idx, float s, float t, float p, float q);
PDGL_API int pdglMultiTexCoord1fv(int idx, float *v);
PDGL_API int pdglMultiTexCoord2fv(int idx, float *v);
PDGL_API int pdglMultiTexCoord3fv(int idx, float *v);
PDGL_API int pdglMultiTexCoord4fv(int idx, float *v);
PDGL_API int pdglBeginQuery(int tgt, int id);
PDGL_API int pdglEndQuery(int tgt);
PDGL_API int pdglGetQueryObjectiv(int id, int pname, int *params);
PDGL_API int pdglGetQueryObjectuiv(int id, int pname, uint *params);
PDGL_API int pdglGenFramebuffers(int n, int *ids);
PDGL_API int pdglGenRenderbuffers(int n, int *ids);
PDGL_API int pdglBindFramebuffer(int target, int framebuffer);
PDGL_API int pdglBindRenderbuffer(int target, int framebuffer);
PDGL_API int pdglRenderbufferStorage(int target,int internalformat, int width, int height);
PDGL_API int pdglFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level);
PDGL_API int pdglFramebufferRenderbuffer(int target, int attachment, int textarget, int texture);
PDGL_API int pdglCheckFramebufferStatus(int target);
PDGL_API int pdglDrawBuffers(int n, int *ids);
PDGL_API int pdglCompressedTexImage2D(int		target, int		level, int		internalformat, int		width, int		height, int		border, int		imageSize, const void *data);
//AHSRC:base/sound/sound3_bmid.c
PDGL_API PDGL_Sample *PDGL_Sound_SampleFromBuf(char *name,byte *buf, int chan, int rate, int bits, int len);
PDGL_API PDGL_Sample *PDGL_Sound_LoadDecodeSampleBuffer(char *name, char *type, byte *ibuf, int isz);
PDGL_API PDGL_Sample *PDGL_Sound_LoadSample(char *name);
PDGL_API PDGL_Sample *PDGL_Sound_FindSample(char *name);
PDGL_API PDGL_Sample *PDGL_Sound_GetSample(char *name);
PDGL_API int PDGL_Sound_PlaySample(char *name, int flags, float vol);
PDGL_API int PDGL_Sound_PlayPointSample(char *name, int flags, float vol,float scale, float *org, float *vel);
PDGL_API int PDGL_Sound_PlayStream(char *name,int (*getsamples)(short *samples, int cnt, void *data), void *data, int flags, float vol);
PDGL_API int PDGL_Sound_PlayPointStream(char *name,int (*getsamples)(short *samples, int cnt, void *data), void *data, int flags, float vol, float scale, float *org, float *vel);
PDGL_API PDGL_MixChannel *PDGL_Sound_LookupPlaying(int id);
PDGL_API void PDGL_Sound_StopPlaying(int id);
PDGL_API int PDGL_Sound_StillPlayingP(int id);
PDGL_API void PDGL_Sound_SetPlayingOrigin(int id,float *org, float *vel);
PDGL_API void PDGL_Sound_CreateStreamName(char *name, int rate, int len);
PDGL_API void PDGL_Sound_WriteStreamSamples(char *name, short *pcm, int len);
PDGL_API void PDGL_Sound_WriteStreamStereoSamples(char *name, short *pcm, int len);
PDGL_API int PDGL_Sound_PointSpeak(char *voice, char *text,int flags, float vol, float scale, float *org, float *vel);
PDGL_API int PDGL_Sound_Speak(char *voice, char *text,int flags, float vol, float scale);
PDGL_API int PDGL_Sound_GetPlayingCurVol(int id);
PDGL_API int PDGL_Sound_GetPlayingRelCurVol(int id);
PDGL_API int PDGL_Sound_GetPlayingCurDCT(int id, int *dct);
PDGL_API int PDGL_Sound_GetSampleMatchDCT(char *name, int *dct);
PDGL_API int PDGL_Sound_MatchCompareDCT(int *dct1, int *dct2, int dctsz);
PDGL_API int PDGL_Sound_GetRecordSpectrum(int *dct, int msz);
PDGL_API int PDGL_Sound_GetPriorRecordSpectrum(int idx, int *dct, int msz);
PDGL_API int PDGL_Sound_WriteSamples(int cnt);
int PDGL_Sound_WriteStereoSamples2_i(short *buffer, int cnt, int ovcnt);
PDGL_API int PDGL_Sound_Pop();
PDGL_API int PDGL_Sound_SetWorld(BTGE_BrushWorld *world);
PDGL_API int PDGL_Sound_CamOrigin(float x, float y, float z);
PDGL_API int PDGL_Sound_CamVelocity(float x, float y, float z);
PDGL_API int PDGL_Sound_CamOriginFV(float *v);
PDGL_API int PDGL_Sound_CamVelocityFV(float *v);
PDGL_API int PDGL_Sound_CamRotationFV(float *v);
PDGL_API int PDGL_Sound_Frame(double dt);
PDGL_API int PDGL_Sound_DeInit();
PDGL_API int PDGL_Sound_Init();
//AHSRC:base/system/gl_win2.c
void gfxdrv_lock();
void gfxdrv_unlock();
PDGL_API void GfxDrv_GetWindowSize(int *xs, int *ys);
PDGL_API void GfxDrv_GetWindowTexSize(int *xs, int *ys);
PDGL_API void GfxDrv_GetWindowMaxSize(int *xs, int *ys);
PDGL_API void GfxDrv_GetWindowMaxTexSize(int *xs, int *ys);
PDGL_API bool GfxDrv_WindowIsActiveP(void);
PDGL_API bool GfxDrv_WindowIsFullActiveP(void);
PDGL_API bool GfxDrv_WindowIsFullscreenP(void);
PDGL_API void GfxDrv_BeginDrawing();
PDGL_API void GfxDrv_EndDrawing(void);
void GfxDrv_V_HandleMessages();
int GfxDrv_V_SetWindowedMode();
int GfxDrv_V_GetDesktopSize();
int GfxDrv_V_SetFullscreenMode();
void GfxDrv_UpdateMode();
int GfxDrv_V_SetupWindow();
void GfxDrv_InitGL();
void GfxDrv_InitGL2();
PDGL_API void GfxDrv_Shutdown();
int GfxDrv_MapKey(int key);
void GfxDrv_AppActivate(BOOL active, BOOL minimized);
PDGL_API void GfxDrv_SetDefaults(char *label, int width, int height);
PDGL_API void GfxDrv_SetDefaultFullscreen(int fs);
PDGL_API void GfxDrv_SetFullscreenResolution(int width, int height);
PDGL_API int GfxDrv_SetupMainDC();
PDGL_API int GfxDrv_Start();
PDGL_API int GfxDrv_SetupThreadShareLists();
PDGL_API int GfxDrv_TeardownThreadShareLists();
PDGL_API int GfxDrv_Init(void *hInstance, int nCmdShow, int *rkill);
//AHSRC:base/system/gl_glx.c
int Window_Init();
void GfxDrv_InitGL();
PDGL_API void GfxDrv_GetWindowSize(int *xs, int *ys);
PDGL_API void GfxDrv_BeginDrawing();
PDGL_API void GfxDrv_EndDrawing();
PDGL_API void GfxDrv_SetDefaults(char *label, int width, int height);
PDGL_API int GfxDrv_Start();
PDGL_API int GfxDrv_Init(void *hInstance, int nCmdShow, int *rkill);
PDGL_API void GfxDrv_Shutdown();
PDGL_API int Mouse_GetPos(int *mx, int *my, int *mb);
PDGL_API int Mouse_SetPos(int mx, int my);
//AHSRC:base/system/gl_nacl.c
void GfxDrv_InitGL();
PDGL_API void GfxDrv_GetWindowSize(int *xs, int *ys);
PDGL_API void GfxDrv_BeginDrawing();
PDGL_API void GfxDrv_EndDrawing();
PDGL_API void GfxDrv_SetDefaults(char *label, int width, int height);
PDGL_API int GfxDrv_Start();
PDGL_API int GfxDrv_Init(void *hInstance, int nCmdShow, int *rkill);
PDGL_API void GfxDrv_Shutdown();
PDGL_API int Mouse_GetPos(int *mx, int *my, int *mb);
PDGL_API int Mouse_SetPos(int mx, int my);
//AHSRC:base/system/mouse_win.c
PDGL_API int Mouse_GetRelPos(int *dx, int *dy, int *mb);
PDGL_API int Mouse_GetPos(int *mx, int *my, int *mb);
PDGL_API int Mouse_SetPos(int mx, int my);
//AHSRC:base/system/input.c
PDGL_API int PDGL_AddKeyHandler(int (*fcn)(int key, int down));
PDGL_API int PDGL_KeyDown(int key);
PDGL_API int PDGL_GetKeyMap(byte *map);
PDGL_API int GfxDev_Key_Event(int key, int down);
PDGL_API short *PDGL_GetKeybuf();
PDGL_API int PDGL_TimeMS();
PDGL_API int PDGL_DeltaMS(int *l);
PDGL_API void PDGL_RegisterShutdown(void (*fcn)());
PDGL_API void PDGL_Shutdown();
//AHSRC:base/system/misc_win.c
PDGL_API void *PDGL_LookupName(char *name);
//AHSRC:base/system/asm_x86.c
PDGL_API int PDGL_InitASM(int argc, char **argv);
PDGL_API int PDGL_LoadModule(char *name);
PDGL_API void *PDGL_GetPtr(char *name);
PDGL_API int PDGL_CheckLinkage();
//AHSRC:base/system/ui_keybind.c
PDGL_API int UI_LookupKey(char *name);
PDGL_API char *UI_NameForKey(int key);
PDGL_API char *UI_NameForKey2(int key);
PDGL_API int UI_BindKey(char *name, char *cmd);
PDGL_API char *UI_BindingForKey(int key);
PDGL_API char *UI_BindingForKey2(int key);
