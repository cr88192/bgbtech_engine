//#define USE_JPEGLIB

#include <GL/GL.h>

#include <math.h>

#include <pdlib.h>
#include <pdgl.h>

#ifdef USE_JPEGLIB
#include <stdio.h>
#include <jpeglib.h>
#endif

//typedef unsigned char byte;

//allows small textures to be grouped into bigger ones
#define TEXBLOCKS	16
#define TEXBLOCK_SZ	1024
#define TEXBLOCK_DIV	64
static byte *texblock[TEXBLOCKS];
static byte texblockfl[TEXBLOCKS*64*64];
static int texblocknum[TEXBLOCKS];

#define MAX_GLTEXTURES 16384
unsigned char texturebm[MAX_GLTEXTURES/8];
int lasttexture;
short tex_width[MAX_GLTEXTURES], tex_height[MAX_GLTEXTURES];
byte *tex_buffer[MAX_GLTEXTURES];
char *tex_name[MAX_GLTEXTURES];

//elem gl_texfilter_var=MISC_NULL;
char *gl_texfilter_var=NULL;

struct
{
	char *name;
	int	min, mag;
} texmodes[] = {
	{"GL_NEAREST", GL_NEAREST, GL_NEAREST},
	{"GL_LINEAR", GL_LINEAR, GL_LINEAR},
	{"GL_NEAREST_MIPMAP_NEAREST", GL_NEAREST_MIPMAP_NEAREST, GL_NEAREST},
	{"GL_LINEAR_MIPMAP_NEAREST", GL_LINEAR_MIPMAP_NEAREST, GL_LINEAR},
	{"GL_NEAREST_MIPMAP_LINEAR", GL_NEAREST_MIPMAP_LINEAR, GL_NEAREST},
	{"GL_LINEAR_MIPMAP_LINEAR", GL_LINEAR_MIPMAP_LINEAR, GL_LINEAR},
	{NULL, 0, 0}
};

int Tex_GetModeinfo(int *min, int *mag)
{
	int i;

	*min=GL_NEAREST;
	*mag=GL_NEAREST;

	for(i=0; i<6; i++)if(!strcmp(gl_texfilter_var, texmodes[i].name))
	{
		*min=texmodes[i].min;
		*mag=texmodes[i].mag;
	}
	return(0);
}

int Tex_Init2()
{
	printf("GL_Textures Init.\n");
//	gl_texfilter_var=Var_SetString("gl_texfilter", "GL_LINEAR_MIPMAP_LINEAR");
	gl_texfilter_var="GL_LINEAR_MIPMAP_LINEAR";
//	gl_texfilter_var="GL_NEAREST";

	memset(texblockfl, 0, TEXBLOCKS*64*64);

//	memset(texturebm, 0, MAX_GLTEXTURES/8);
	lasttexture=1;
	return(0);
}

int Tex_AllocTexnum()
{
	int i;
	i=lasttexture+1;
	while(1)
	{
		if(!(texturebm[i>>3]&(1<<(i&7))))
		{
			texturebm[i>>3]|=1<<(i&7);
			lasttexture=i;
			return(i);
		}
		i++;
		if(i==lasttexture)
			return(-1);
	}
}

int Tex_FreeTexnum(int n)
{
	texturebm[n>>3]&=~(1<<(n&7));
	return(0);
}

int Tex_MarkTexnum(int n)
{
	texturebm[n>>3]|=(1<<(n&7));
	return(0);
}

#if 0
int Tex_AllocBlock(int *x, int *y, int *b)
{
	int i, j, k;
	for(i=0; i<TEXBLOCKS; i++)
		for(j=0; j<4; j++)
			for(k=0; k<4; k++)
	{
		if(!texblockfl[(i*16)+(j*4)+k])
		{
			*x=k;
			*y=j;
			*b=i;
			return(0);
		}
	}
	return(-1);
}
#endif

int Tex_FindFragment(int xs, int ys, int *x, int *y, int *z)
{
	int i, j,  k, l, m, n;
	int xf, yf;

	xf=(xs+15)/16;
	yf=(ys+15)/16;

	for(i=0; i<TEXBLOCKS; i++)
		for(k=0; k<64; k++)
	{
		if((k+yf)>64)break;
		for(l=0; l<64; l++)
		{
			if((l+xf)>64)break;

			j=0;
			for(m=0; m<yf; m++)for(n=0; n<xf; n++)
			{
				if(texblockfl[(i*64*64)+((k+m)*64)+(l+n)])
					j=1;
			}

			if(!j)
			{
				*x=l;
				*y=k;
				*z=i;
				return(0);
			}
		}
	}
	return(-1);
}

int Tex_LockFragment(int x, int y, int z, int xs, int ys)
{
	int i, j;

	for(i=0; i<ys; i++)for(j=0; j<xs; j++)
		texblockfl[(z*64*64)+((y+i)*64)+(x+j)]=1;
	return(0);
}

int Tex_AllocFragment(int xs, int ys, int *x, int *y, int *z)
{
	int xf, yf;
	int i;

	xf=(xs+15)/16;
	yf=(ys+15)/16;

	i=Tex_FindFragment(xs, ys, x, y, z);
	if(i<0)return(-1);
	Tex_LockFragment(*x, *y, *z, xf, yf);
	return(0);
}

int Tex_LoadTextureFragment(int xs, int ys, byte *buf,
	float *stmin, float *stmax)
{
	int x, y, z;
	int xo, yo;
	int i, j, k;

	i=Tex_AllocFragment(xs, ys, &x, &y, &z);
	if(i<0)return(-1);

	if(!texblock[z])
	{
		texblock[z]=malloc(1024*1024*4);
		memset(texblock[z], 0, 1024*1024*4);
		texblocknum[z]=Tex_AllocTexnum();
	}

	xo=x*16;
	yo=y*16;

	for(i=0; i<ys; i++)for(j=0; j<xs; j++)for(k=0; k<4; k++)
		texblock[z][((yo+i)*1024+(xo+j))*4+k]=buf[(i*xs+j)*4+k];

	Tex_LoadTexture2(1024, 1024, texblock[z], 1, texblocknum[z], 0);

	stmin[0]=(x/64.0);
	stmin[1]=(y/64.0);
	stmax[0]=((x*16+xs)/1024.0);
	stmax[1]=((y*16+ys)/1024.0);

	return(texblocknum[z]);
}


#if 0

//faster buf uglier
int Tex_Resample
	(int *src, int iw, int ih, int *dst, int ow, int oh) //AH:ignore
{
	int i, j, ik, ix, iy;
	float xs, ys, xc, yc;

//	return(0);

	xs=((float)iw/(float)ow);
	ys=((float)ih/(float)oh);
	xc=0;
	yc=0;

	for(i=0; i<oh; i++)
	{
		iy=yc;
		ik=iy*iw;
		for(j=0; j<ow; j++)
		{
			ix=xc;
			*dst=src[ik+ix];

			dst++;
			xc+=xs;
		}

		xc=0;
		yc+=ys;
	}
	return(0);
}

#endif

int Tex_Resample(byte *src, int iw, int ih, byte *dst, int ow, int oh)
{
	float xs, ys, xc, yc;
	float ix, iy, fx, fy;
	int i, j, k, l, ik, il;

//	return(0);

	xs=((float)iw/(float)ow);
	ys=((float)ih/(float)oh);

	for(i=0; i<oh; i++)
	{
		iy=i*ys;
		ik=iy; fy=iy-ik;

		for(j=0; j<ow; j++)
		{
			ix=j*xs;
			il=ix; fx=ix-il;
			l=(ik*iw+il)*4;

			for(k=0; k<4; k++)
				dst[k]=	src[l+k]	  *(1-fx)*(1-fy)+
					src[l+4+k]	  *fx*(1-fy)+
					src[l+(iw*4)+k]	  *(1-fx)*fy+
					src[l+(iw*4)+4+k] *fx*fy;

			dst+=4;
		}
	}
	return(0);
}


int Tex_ResampleMono(byte *src, int iw, int ih, byte *dst, int ow, int oh)
{
	int i, j, ik, ix, iy;
	float xs, ys, xc, yc;

	xs=((float)iw/(float)ow);
	ys=((float)ih/(float)oh);
	xc=0;
	yc=0;

	for(i=0; i<oh; i++)
	{
		iy=yc;
		ik=iy*iw;
		for(j=0; j<ow; j++)
		{
			ix=xc;
			*dst=src[ik+ix];

			dst++;
			xc+=xs;
		}

		xc=0;
		yc+=ys;
	}
	return(0);
}


static inline void Tex_ScaleSpan(int *src, int iw, int *dst, int ow)
{
	int i, xc;

	if(ow>iw)
	{
		xc=ow;
		for(i=0; i<iw; i++)
		{
			*dst++=*src++;

			xc-=iw;
			while(xc<=iw)
			{
				*dst++=*src;
				xc+=ow;
			}
		}
	}else
	{
		xc=iw;
		for(i=0; i<iw; i++)
		{
			*dst++=*src++;

			xc-=ow;
			while(xc<=ow)
			{
				src++;
				xc+=iw;
			}
		}
	}
}

//assembler scale funcs
extern void LBXGL_ScaleSpan32(int *src, int iw, int *dst, int ow);
extern void LBXGL_ScaleImage32(int *src, int iw, int ih, 
	int *dst, int ow, int oh);

static inline void Tex_Resample2(
	int *src, int iw, int ih,
	int *dst, int ow, int oh)
{
	int i, yc;

	yc=oh;
	for(i=0; i<ih; i++)
	{
		Tex_ScaleSpan(src, iw, dst, ow);
//		LBXGL_ScaleSpan32(src, iw, dst, ow);
		src+=iw;
		dst+=ow;
		yc-=ih;

		if(yc<=ih)
		{
			Tex_ScaleSpan(src, iw, dst, ow);
//			LBXGL_ScaleSpan32(src, iw, dst, ow);
			dst+=ow;

			yc+=oh;
		}
	}
}

static inline void Tex_Resample2DN(
	int *src, int iw, int ih,
	int *dst, int ow, int oh)
{
	int i, yc;

	yc=ih;
	for(i=0; i<oh; i++)
	{
		Tex_ScaleSpan(src, iw, dst, ow);
//		LBXGL_ScaleSpan32(src, iw, dst, ow);
		src+=iw;
		dst+=ow;

//		yc-=oh;
		if(yc<=oh)
		{
			src+=iw;
			yc+=ih;
		}
	}
}

int Tex_PadResample(int *src, int iw, int ih, int *dst, int ow, int oh)
{
	int i, j;

	for(i=0; i<ih; i++)
	{
		memcpy(dst, src, iw*4);
		src+=iw;
		dst+=ow;
	}
	return(0);
}

int Tex_HalfSample(byte *src, int w, int h)
{
	int i, j, w2, h2, i2, j2;

	w2=w>>1;
	h2=h>>1;
	for(i=0;i<h2; i++)
		for(j=0; j<w2; j++)
	{
		i2=i<<1;
		j2=j<<1;
		src[((i*w2+j)<<2)+0]=
			(src[((i2*w+j2)<<2)+0]+		src[((i2*w+(j2+1))<<2)+0]+
			src[(((i2+1)*w+j2)<<2)+0]+	src[(((i2+1)*w+(j2+1))<<2)+0])>>2;

		src[((i*w2+j)<<2)+1]=
			(src[((i2*w+j2)<<2)+1]+		src[((i2*w+(j2+1))<<2)+1]+
			src[(((i2+1)*w+j2)<<2)+1]+	src[(((i2+1)*w+(j2+1))<<2)+1])>>2;

		src[((i*w2+j)<<2)+2]=
			(src[((i2*w+j2)<<2)+2]+		src[((i2*w+(j2+1))<<2)+2]+
			src[(((i2+1)*w+j2)<<2)+2]+	src[(((i2+1)*w+(j2+1))<<2)+2])>>2;

		src[((i*w2+j)<<2)+3]=
			(src[((i2*w+j2)<<2)+3]+		src[((i2*w+(j2+1))<<2)+3]+
			src[(((i2+1)*w+j2)<<2)+3]+	src[(((i2+1)*w+(j2+1))<<2)+3])>>2;
	}
}

int Tex_HalfSample2(byte *src, int w, int h)
{
	int i, j, w2, h2, i2, j2;

	w2=w>>1;
	h2=h>>1;
	for(i=0;i<h2; i++)
		for(j=0; j<w2; j++)
	{
		i2=i<<1;
		j2=j<<1;
		src[((i*w2+j)<<2)+0]=
			(src[((i2*w+j2)<<2)+0]+		src[((i2*w+(j2+1))<<2)+0]+
			src[(((i2+1)*w+j2)<<2)+0]+	src[(((i2+1)*w+(j2+1))<<2)+0]);

		src[((i*w2+j)<<2)+1]=
			(src[((i2*w+j2)<<2)+1]+		src[((i2*w+(j2+1))<<2)+1]+
			src[(((i2+1)*w+j2)<<2)+1]+	src[(((i2+1)*w+(j2+1))<<2)+1]);

		src[((i*w2+j)<<2)+2]=
			(src[((i2*w+j2)<<2)+2]+		src[((i2*w+(j2+1))<<2)+2]+
			src[(((i2+1)*w+j2)<<2)+2]+	src[(((i2+1)*w+(j2+1))<<2)+2]);

		src[((i*w2+j)<<2)+3]=
			(src[((i2*w+j2)<<2)+3]+		src[((i2*w+(j2+1))<<2)+3]+
			src[(((i2+1)*w+j2)<<2)+3]+	src[(((i2+1)*w+(j2+1))<<2)+3]);
	}
}

static byte *resampbuf=0;

int Tex_LoadTexture(int w, int h, byte *buf, int calcmip)
{
//	static byte resampbuf[2048*2048*4];
	int tw, th, tl;
	int min, mag;
	int num;

	if(!resampbuf)resampbuf=malloc(2048*2048*4);

	tw=1;
	th=1;
	while((tw<<1)<=w)tw<<=1;
	while((th<<1)<=h)th<<=1;
	if(tw<w && (tw<<1)>w)tw<<=1;
	if(th<h && (th<<1)>h)th<<=1;
//	if(tw>256)tw=256;
//	if(th>256)th=256;

	if(tw<th)tw=th;
	if(th<tw)th=tw;

	if((w!=tw) || (h!=th))Tex_Resample(buf, w, h, resampbuf, tw, th);
		else memcpy(resampbuf, buf, w*h*4);

	num=Tex_AllocTexnum();
	tex_width[num]=w;
	tex_height[num]=h;

	glEnable(GL_TEXTURE_2D);

	glBindTexture(GL_TEXTURE_2D, num);

	glTexImage2D (GL_TEXTURE_2D, 0, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);

	if(!calcmip)
	{
//		printf("tex: nonmip\n");
//		glTexImage2D (GL_TEXTURE_2D, 0, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);
		Tex_GetModeinfo(&min, &mag);

//		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
//		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, mag);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag);
	}else if(calcmip==2)
	{
		tl=0;
		while(tw>1 && th>1)
		{
			Tex_HalfSample(resampbuf, tw, th);
			tw>>=1;
			th>>=1;
			tl++;
			glTexImage2D (GL_TEXTURE_2D, tl, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);
		}

		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	}else
	{
//		printf("tex: mipmap\n");
		tl=0;
		while(tw>1 && th>1)
		{
			Tex_HalfSample(resampbuf, tw, th);
			tw>>=1;
			th>>=1;
			tl++;
			glTexImage2D (GL_TEXTURE_2D, tl, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);
		}

		Tex_GetModeinfo(&min, &mag);

		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, min);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag);

//		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
//		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

//		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR);
//		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	}

	return(num);
}

int Tex_LoadTexture2(int w, int h, byte *buf, int mip, int rnum, int enc)
{
	int tw, th, tl;
	int min, mag;
	int num;

	if(!resampbuf)resampbuf=malloc(2048*2048*4);

	tw=1;
	th=1;
	while((tw<<1)<=w)tw<<=1;
	while((th<<1)<=h)th<<=1;
	if(tw<w && (tw<<1)>w)tw<<=1;
	if(th<h && (th<<1)>h)th<<=1;

	if(tw<th)tw=th;
	if(th<tw)th=tw;

#if 0
	if(mip==2)
	{
		tw<<=1;
		th<<=1;
	}
#endif

	if((w!=tw) || (h!=th))Tex_Resample(buf, w, h, resampbuf, tw, th);
		else memcpy(resampbuf, buf, w*h*4);

	num=rnum;
	if(!num)num=Tex_AllocTexnum();

	tex_width[num]=w;
	tex_height[num]=h;

	glEnable(GL_TEXTURE_2D);

	glBindTexture(GL_TEXTURE_2D, num);

	if(!mip)
	{
//		printf("tex: nonmip\n");
		glTexImage2D (GL_TEXTURE_2D, 0, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);
		Tex_GetModeinfo(&min, &mag);

		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, mag);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag);
	}else if(mip==2)
	{
		glTexImage2D (GL_TEXTURE_2D, 0, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);

		tl=0;
		while(tw>1 && th>1)
		{
			Tex_HalfSample2(resampbuf, tw, th);
			tw>>=1;
			th>>=1;
			tl++;
			glTexImage2D (GL_TEXTURE_2D, tl, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);
		}

//		Tex_GetModeinfo(&min, &mag);
		min=GL_NEAREST;
		mag=GL_NEAREST;
//		min=GL_LINEAR_MIPMAP_LINEAR;
//		mag=GL_LINEAR;

		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, min);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag);
	}else
	{
		glTexImage2D (GL_TEXTURE_2D, 0, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);

//		printf("tex: mipmap\n");
		tl=0;
		while(tw>1 && th>1)
		{
			Tex_HalfSample(resampbuf, tw, th);
			tw>>=1;
			th>>=1;
			tl++;
			glTexImage2D (GL_TEXTURE_2D, tl, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);
		}

		Tex_GetModeinfo(&min, &mag);

		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, min);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag);
	}

//	free(resampbuf);

	return(num);
}

int Tex_LoadTexture3(int *wp, int *hp, byte *buf, int num)
{
//	static byte resampbuf[2048*2048*4];
	int tw, th, tl;
	int min, mag;
	int h, w, rl;

	if(!resampbuf)resampbuf=malloc(2048*2048*4);

	w=*wp;
	h=*hp;

	tw=1;
	th=1;
	while((tw<<1)<=w)tw<<=1;
	while((th<<1)<=h)th<<=1;
//	if(tw<w && (tw<<1)>w)tw<<=1;
//	if(th<h && (th<<1)>h)th<<=1;

//	if(tw<th)tw=th;
//	if(th<tw)th=tw;

	*wp=tw;
	*hp=th;

	if((w!=tw) || (h!=th))
		Tex_Resample(buf, w, h, resampbuf, tw, th);
//		Tex_Resample2(buf, w, h, resampbuf, tw, th);
//		LBXGL_ScaleImage32(buf, w, h, resampbuf, tw, th);
		else memcpy(resampbuf, buf, w*h*4);

	if(num<=0)
	{
		num=Tex_AllocTexnum();
		rl=1;
	}else rl=0;

//	tex_width[num]=w;
//	tex_height[num]=h;

//	kprint("LT3 %d %d %d %d (%d)\n", w, h, tw, th, num);

	glEnable(GL_TEXTURE_2D);

	glBindTexture(GL_TEXTURE_2D, num);

	glTexImage2D (GL_TEXTURE_2D, 0, 4, tw, th, 0, GL_RGBA, GL_UNSIGNED_BYTE, resampbuf);

	if(rl)
	{
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	}
		
	return(num);
}

int Tex_LoadTextureMono(int w, int h, byte *buf)
{
	int tw, th, tl;
	int num;

	if(!resampbuf)resampbuf=malloc(2048*2048*4);

	tw=1;
	th=1;
	while((tw<<1)<=w)tw<<=1;
	while((th<<1)<=h)th<<=1;
	if(tw<w && (tw<<1)>w)tw<<=1;
	if(th<h && (th<<1)>h)th<<=1;
//	if(tw>256)tw=256;
//	if(th>256)th=256;

//	if(tw<th)tw=th;
//	if(th<tw)th=tw;

	if((w!=tw) || (h!=th))
		Tex_ResampleMono(buf, w, h, resampbuf, tw, th);
		else memcpy(resampbuf, buf, w*h);

	num=Tex_AllocTexnum();
	tex_width[num]=w;
	tex_height[num]=h;

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, num);
	glTexImage2D (GL_TEXTURE_2D, 0, 1, tw, th, 0, GL_LUMINANCE,
		GL_UNSIGNED_BYTE, resampbuf);

	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		
	return(num);
}

#ifdef USE_JPEGLIB		//JPEG loader
byte *Img_LoadJPEG(VFILE *fd, int *w, int *h)
{
	struct jpeg_decompress_struct cinfo;
	struct jpeg_error_mgr jerr;

	FILE *sfd;
	byte *buf, *buf2, *ebuf;
	byte **lbuf;
	int i, xs, ys, ps;

	sfd=fopen("ldr_temp.jpg", "w+b");

	vfseek(fd, 0, 2);
	i=vftell(fd);
	buf=malloc(i);
	vfseek(fd, 0, 0);
	vfread(buf, 1, i, fd);
	fwrite(buf, 1, i, sfd);
	free(buf);

	fclose(sfd);
	sfd=fopen("ldr_temp.jpg", "rb");

//	fseek(sfd, 0, 0);

	if(!fd)kprint("JPG: no in fd\n");
	if(!sfd)kprint("JPG: no temp fd\n");
	if(!buf)kprint("JPG: no buffer\n");

	cinfo.err = jpeg_std_error(&jerr);
	jpeg_create_decompress(&cinfo);

	jpeg_stdio_src(&cinfo, sfd);
	jpeg_read_header(&cinfo, TRUE);

//	jpeg_set_defaults (&cinfo);

	jpeg_start_decompress(&cinfo);

	xs=cinfo.output_width;
	ys=cinfo.output_height;
	ps=cinfo.output_components;

	buf=malloc(xs*ys*ps);
	ebuf=buf;

	lbuf=kralloc(ys*sizeof(byte *));
	for(i=0; i<ys; i++)lbuf[i]=buf+(ys-i-1)*xs*ps;

	while (cinfo.output_scanline < cinfo.output_height)
	{
		i = jpeg_read_scanlines(&cinfo, lbuf,
			cinfo.output_height - cinfo.output_scanline);

		lbuf+=i;
//		ebuf+=i*cinfo.output_width*cinfo.output_components;
	}

	jpeg_finish_decompress(&cinfo);
	jpeg_destroy_decompress(&cinfo);

	fclose(sfd);

	if(w)*w=xs;
	if(h)*h=ys;

	kprint("JPG: %d %d %d bpp\n", xs, ys, ps*8);

	buf2=malloc(xs*ys*4);
	for(i=0; i<xs*ys; i++)
	{
//		if(!(i%4))buf[i*ps]=0;

		buf2[i*4+0]=buf[i*ps];
		if(ps>1)
		{
			buf2[i*4+1]=buf[i*ps+1];
			buf2[i*4+2]=buf[i*ps+2];
		}else
		{
			buf2[i*4+1]=buf[i*ps];
			buf2[i*4+2]=buf[i*ps];
		}

/*
		if(i%4==0)
		{
			buf2[i*4+0]=0;
			buf2[i*4+1]=0;
			buf2[i*4+2]=0;
		}
*/

		buf2[i*4+3]=255;
	}
	free(buf);

	return(buf2);
}

#endif

#if 1
typedef struct TargaHeader_s {
	unsigned char 	id_length, ctype, itype;
	unsigned short	cindex, clength;
	unsigned char	csize;
	unsigned short	x_origin, y_origin, width, height;
	unsigned char	bpp, attributes;
} TargaHeader;

byte *Img_LoadTGA(VFILE *fd, int *w, int *h)
{
	TargaHeader head;
	int pixlin, i, j;
	byte *dest, *src, *buf, *obuf, r, g, b, a;

	head.id_length=vfgetc(fd);
	head.ctype=vfgetc(fd);
	head.itype=vfgetc(fd);
	head.cindex=vfgetc(fd)+(vfgetc(fd)<<8);
	head.clength=vfgetc(fd)+(vfgetc(fd)<<8);
	head.csize=vfgetc(fd);
	head.x_origin=vfgetc(fd)+(vfgetc(fd)<<8);
	head.y_origin=vfgetc(fd)+(vfgetc(fd)<<8);
	head.width=vfgetc(fd)+(vfgetc(fd)<<8);
	head.height=vfgetc(fd)+(vfgetc(fd)<<8);
	head.bpp=vfgetc(fd);
	head.attributes=vfgetc(fd);

	if(((head.itype!=2) && (head.itype!=10)) ||
			((head.bpp!=32) && (head.bpp!=24)) || (head.ctype!=0))
	{
		kprint("Img_LoadTGA: only RGB(24)/RGBA(32) uncompressed images supported.\n");
		kprint("   bpp: %d, type: %d\n", head.bpp, head.ctype);
		return(NULL);
	}

	vfseek(fd, head.id_length, 1); /* skip comment */

	pixlin=head.width*head.height;
	obuf=malloc(pixlin*4);
	dest=obuf;

	buf=malloc(2*pixlin*(head.bpp>>3));
	vfread(buf, 1, 2*pixlin*(head.bpp>>3), fd);
	src=buf;

	if(head.itype==2)
	{
		for(i=0; i<pixlin; i++)
		{
			b=*src++;
			g=*src++;
			r=*src++;
			if(head.bpp==32)
				a=*src++;
				else a=255;
			*dest++=r;
			*dest++=g;
			*dest++=b;
			*dest++=a;
		}
	}

	if(head.itype==10)
	{
		i=0;
		while(i<pixlin)
		{
			j=*src++;
			if(j<128)
			{
				j++;
				while(j)
				{
					b=*src++;
					g=*src++;
					r=*src++;
					if(head.bpp==32)
						a=*src++;
						else a=255;
					*dest++=r;
					*dest++=g;
					*dest++=b;
					*dest++=a;

					j--;
					i++;
				}
			}else
			{
				b=*src++;
				g=*src++;
				r=*src++;
				if(head.bpp==32)
					a=*src++;
					else a=255;

				j-=127;
				while(j)
				{
					*dest++=r;
					*dest++=g;
					*dest++=b;
					*dest++=a;

					j--;
					i++;
				}
			}
		}
	}

	free(buf);

	if(head.attributes&32)
	{
		dest=malloc(pixlin*4);
		for(i=0; i<head.height; i++)
			memcpy(&dest[i*head.width*4], &obuf[(head.height-(i+1))*head.width*4], head.width*4);
		memcpy(obuf, dest, pixlin*4);
		free(dest);
	}

	*w=head.width;
	*h=head.height;
	return(obuf);
}

int Img_StoreTGA(VFILE *fd, byte *buf, int w, int h)
{
	TargaHeader head;
	int i;
	byte *s;

	head.id_length=0;
	head.ctype=0;
	head.itype=2;
	head.cindex=0;
	head.clength=0;
	head.csize=0;
	head.x_origin=0;
	head.y_origin=0;
	head.width=w;
	head.height=h;
	head.bpp=24;
	head.attributes=0;

	vfputc(head.id_length, fd);
	vfputc(head.ctype, fd);
	vfputc(head.itype, fd);

	vfputc(head.cindex, fd);
	vfputc(head.cindex>>8, fd);
	vfputc(head.clength, fd);
	vfputc(head.clength>>8, fd);

	vfputc(head.csize, fd);

	vfputc(head.x_origin, fd);
	vfputc(head.x_origin>>8, fd);
	vfputc(head.y_origin, fd);
	vfputc(head.y_origin>>8, fd);

	vfputc(head.width, fd);
	vfputc(head.width>>8, fd);
	vfputc(head.height, fd);
	vfputc(head.height>>8, fd);

	vfputc(head.bpp, fd);
	vfputc(head.attributes, fd);

//	vfwrite(buf, w*4, h, fd);

	s=buf;
	for(i=0; i<w*h; i++)
	{
		vfputc(s[2], fd);
		vfputc(s[1], fd);
		vfputc(s[0], fd);
		s+=4;
	}

	return(0);
}

typedef struct {
unsigned short tag; //BM, 0x4D42
unsigned int filesize;
unsigned int resv;
unsigned int dataoffs;
}BMPFileHeader;

typedef struct {
unsigned int infosize;
unsigned int width;
unsigned int height;
unsigned short planes;
unsigned short bpp;
unsigned int compression;
unsigned int imagesize;
unsigned int hdensity;
unsigned int vdensity;
unsigned int numcolors;
unsigned int numimportant;
}BMPInfoHeader;

typedef struct {
//BMP File Header
unsigned short tag; //BM, 0x4D42
unsigned int filesize;
unsigned int resv;
unsigned int dataoffs;
//BMP Info Header
unsigned int infosize;
unsigned int width;
unsigned int height;
unsigned short planes;
unsigned short bpp;
unsigned int compression;
unsigned int imagesize;
unsigned int hdensity;
unsigned int vdensity;
unsigned int numcolors;
unsigned int numimportant;
}BMPHeader;

byte *Img_LoadBMP(VFILE *fd, int *w, int *h)
{
	BMPHeader head;
	int i, pixlin;
	int b, g, r, a;
	byte *buf;

	memset(&head, 0, sizeof(head));

	for(i=0; i<2; i++)
		head.tag|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.filesize|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		vfgetc(fd);
	for(i=0; i<4; i++)
		head.dataoffs|=vfgetc(fd)<<(i*8);

	for(i=0; i<4; i++)
		head.infosize|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.width|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.height|=vfgetc(fd)<<(i*8);
	for(i=0; i<2; i++)
		head.planes|=vfgetc(fd)<<(i*8);
	for(i=0; i<2; i++)
		head.bpp|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.compression|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.imagesize|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.hdensity|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.vdensity|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.numcolors|=vfgetc(fd)<<(i*8);
	for(i=0; i<4; i++)
		head.numimportant|=vfgetc(fd)<<(i*8);

	if(head.tag!=0x4D42)
	{
		kprint("Img_LoadBMP: Invalid BM Tag\n");
		return(NULL);
	}
	if(head.bpp!=24)
	{
		kprint("Img_LoadBMP: Bits Per Pixel is not 24 bits (%d)\n", head.bpp);
		return(NULL);
	}
	if(head.compression!=0)
	{
		kprint("Img_LoadBMP: Don't support compressed images\n");
		return(NULL);
	}

	if(w)*w=head.width;
	if(h)*h=head.height;

	pixlin=head.width*head.height;
	buf=malloc(pixlin*4);

	vfseek(fd, head.dataoffs, 0);

	for(i=0; i<pixlin; i++)
	{
		b=vfgetc(fd);
		g=vfgetc(fd);
		r=vfgetc(fd);
		a=255;

		buf[(i*4)+0]=r;
		buf[(i*4)+1]=g;
		buf[(i*4)+2]=b;
		buf[(i*4)+3]=a;
	}

	return(buf);
}

//flatten the bitmap
byte *Img_FlattenDIB(byte *img, int w, int h)
{
	BMPInfoHeader *ihead;
	byte *buf, *t;
	int i, n;
	static int init=0;

	if(!init)
	{
		ObjType_NewType("img_dib_t", "byte+");
		init=1;
	}

	buf=ObjType_New("img_dib_t", (w*h*3)+sizeof(BMPInfoHeader));
	ihead=(BMPInfoHeader *)buf;
	t=buf+sizeof(BMPInfoHeader);

	ihead->infosize=sizeof(BMPInfoHeader);
	ihead->width=w;
	ihead->height=h;
	ihead->planes=1;
	ihead->bpp=24;
	ihead->compression=0;
	ihead->imagesize=w*h*3;
	ihead->hdensity=72*12*3;
	ihead->vdensity=72*12*3;
	ihead->numcolors=0;
	ihead->numimportant=0;

	n=w*h;
	for(i=0; i<n; i++)
	{
		t[(i*3)+0]=img[(i*4)+2];
		t[(i*3)+1]=img[(i*4)+1];
		t[(i*3)+2]=img[(i*4)+0];
	}

	return(buf);
}

byte *Img_UnFlattenDIB(byte *img, int *w, int *h)
{
	BMPInfoHeader *ihead;
	byte *buf, *s;
	int i, n;

	ihead=img;
	s=img+sizeof(BMPInfoHeader);

	if(ihead->infosize!=sizeof(BMPInfoHeader))
	{
		kprint("Img_UnFlattenDIB: "
			"Header Size mismatch (%d, %d)\n",
			ihead->infosize, sizeof(BMPInfoHeader));
		return(NULL);
	}

	if(ihead->bpp!=24)
	{
		kprint("Img_UnFlattenDIB: "
			"Bits Per Pixel is not 24 bits (%d)\n", ihead->bpp);
		return(NULL);
	}
	if(ihead->compression!=0)
	{
		kprint("Img_UnFlattenDIB: "
			"Doesn't support compressed images\n");
		return(NULL);
	}

	*w=ihead->width;
	*h=ihead->height;
	n=ihead->width*ihead->height;
	buf=kalloc(n*3);

	for(i=0; i<n; i++)
	{
		buf[(i*4)+0]=s[(i*3)+2];
		buf[(i*4)+1]=s[(i*3)+1];
		buf[(i*4)+2]=s[(i*3)+0];
		buf[(i*4)+3]=255;
	}

	return(buf);
}

//int tex_basecmp(char *s)

int Tex_LoadFile(char *name, int *w, int *h)
{
	static int hash[256];

	VFILE *fd;
	byte *buf;
	int i, j, n, tw, th;
	char *t;

	j=0; t=name;
	while(*t)j=j*251+(*t++);
	j=(j>>8)&0xFF;

	i=hash[j];
	if(tex_name[i] && !strcmp(tex_name[i], name))
	{
		if(w)*w=tex_width[i];
		if(h)*h=tex_height[i];
		return(i);
	}


	t=name+strlen(name);
	while((t>name) && (*t!='.'))t--;

	buf=NULL;
	if(*t!='.')
	{
		t=ksprint("%s.tga", name);
		i=Tex_LoadFile(t, w, h);
		if(i>=0) { hash[j]=i; return(i); }

		t=ksprint("%s.png", name);
		i=Tex_LoadFile(t, w, h);
		if(i>=0) { hash[j]=i; return(i); }

		t=ksprint("%s.jpg", name);
		i=Tex_LoadFile(t, w, h);
		if(i>=0) { hash[j]=i; return(i); }


		t=ksprint("%s.bmp", name);
		i=Tex_LoadFile(t, w, h);
		if(i>=0) { hash[j]=i; return(i); }

		t=ksprint("%s.pcx", name);
		i=Tex_LoadFile(t, w, h);
		if(i>=0) { hash[j]=i; return(i); }

		return(-1);
	}

	//brute force search
	for(i=0; i<MAX_GLTEXTURES; i++)
		if(tex_name[i] && !strcmp(tex_name[i], name))
	{
		hash[j]=i;
		if(w)*w=tex_width[i];
		if(h)*h=tex_height[i];
		return(i);
	}

	if(!gl_texfilter_var)
		Tex_Init2();

	if(!w)w=&tw;
	if(!h)h=&th;


	t++;

	fd=vffopen(name, "rb");
	if(!fd)return(-1);

	if(!kstricmp(t, "tga"))
	{
		printf("load tga %s\n", name);
		buf=Img_LoadTGA(fd, w, h);
		vfclose(fd);
	}
	if(!kstricmp(t, "bmp"))
	{
		printf("load bmp %s\n", name);
		buf=Img_LoadBMP(fd, w, h);
		vfclose(fd);
	}
	if(!kstricmp(t, "pcx"))
	{
		printf("load pcx %s\n", name);
		buf=PCX_Load32(fd, w, h);
		vfclose(fd);
	}
	if(!kstricmp(t, "png"))
	{
		printf("load png %s\n", name);
		buf=PDPNG_Load(fd, w, h);
		vfclose(fd);
	}

	if(!kstricmp(t, "jpg") || !kstricmp(t, "jpeg"))
	{
		printf("load jpeg %s\n", name);
		buf=PDJPG_Load(fd, w, h);
		vfclose(fd);
	}

	if(!buf)return(-1);

	printf("file %s loaded %d %d\n", name, *w, *h);

	n=Tex_LoadTexture(*w, *h, buf, 1);
	tex_buffer[n]=buf;
	tex_width[n]=*w;
	tex_height[n]=*h;
	tex_name[n]=strdup(name);

//	free(buf);

	printf("loaded %d %d %d\n", n, *w, *h);

	return(n);
}

byte *Tex_GetBuffer(int n)
{
	return(tex_buffer[n]);
}

byte *Tex_LoadFileRaw(char *name, int *w, int *h)
{
	VFILE *fd;
	byte *buf;
	char *t;

	fd=vffopen(name, "rb");
	if(!fd)return(NULL);

	t=name+strlen(name);
	while((t>name) && (*t!='.'))t--;
	if(*t=='.')t++;

	buf=NULL;
	if(!kstricmp(t, "tga"))
	{
		printf("load tga raw %s\n", name);
		buf=Img_LoadTGA(fd, w, h);
		vfclose(fd);
	}
	if(!kstricmp(t, "bmp"))
	{
		printf("load bmp raw %s\n", name);
		buf=Img_LoadBMP(fd, w, h);
		vfclose(fd);
	}
	if(!kstricmp(t, "pcx"))
	{
		printf("load pcx raw %s\n", name);
		buf=PCX_Load32(fd, w, h);
		vfclose(fd);
	}
	if(!kstricmp(t, "png"))
	{
		printf("load png %s\n", name);
		buf=PDPNG_Load(fd, w, h);
		vfclose(fd);
	}

	if(!kstricmp(t, "jpg") || !kstricmp(t, "jpeg"))
	{
		printf("load jpeg %s\n", name);
		buf=PDJPG_Load(fd, w, h);
		vfclose(fd);
	}

#ifdef USE_JPEGLIB
	if(!kstricmp(t, "jpg") || !kstricmp(t, "jpeg"))
	{
		printf("load jpeg %s\n", name);
		buf=Img_LoadJPEG(fd, w, h);
//		vfclose(fd);
	}
#endif

	return(buf);
}

void Tex_StoreFile(char *name, byte *buf, int w, int h)
{
	VFILE *fd;
	char *t;

	fd=vffopen(name, "wb");
	if(!fd)return(NULL);

	t=name+strlen(name);
	while((t>name) && (*t!='.'))t--;
	if(*t=='.')t++;

	if(!kstricmp(t, "tga"))
	{
		Img_StoreTGA(fd, buf, w, h);
		vfclose(fd);
	}

#if 0
	if(!kstricmp(t, "bmp"))
	{
		Img_StoreBMP(fd, buf, w, h);
		vfclose(fd);
	}
#endif

	if(!kstricmp(t, "png"))
	{
		printf("store png %s\n", name);
		PDPNG_Store(fd, buf, w, h);
		vfclose(fd);
	}

	if(!kstricmp(t, "jpg") || !kstricmp(t, "jpeg"))
	{
		PDJPG_Store(fd, buf, w, h, 85);
		vfclose(fd);
	}
}

#if 0
int Tex_Screenshot_Clipboard()
{
	int width, height, pixlin;
	byte *buf, *dib;

	width=800;
	height=600;

	pixlin=width*height;
	buf=malloc(pixlin*4);

	glFinish();
	glReadPixels (0, 0, width, height, GL_RGBA, GL_UNSIGNED_BYTE, buf); 

	dib=Img_FlattenDIB(buf, width, height);
	free(buf);
	LBXGL_ClipBoard_Export(dib);

	return(0);
}
#endif

int Tex_Screenshot(char *name)
{
	static byte *buf;
	VFILE *fd;
	int width, height, pixlin;

	width=800;
	height=600;

	pixlin=width*height;
	if(!buf)buf=malloc(pixlin*4);

	glFinish();
	glReadPixels (0, 0, width, height, GL_RGBA, GL_UNSIGNED_BYTE, buf); 

//	fd=vffopen(name, "wb");
//	Img_StoreTGA(fd, buf, width, height);
//	PDPNG_Store(fd, buf, width, height);
//	free(buf);

	Tex_StoreFile(name, buf, width, height);

	return(0);
}

int Tex_Screenshot2(char *name)
{
	static byte *buf;
	VFILE *fd;
	int width, height;
	int i, j, k, l;

	width=800;
	height=600;

	if(!buf)buf=malloc(width*(height+1)*4);

	glFinish();
	glReadPixels (0, 0, width, height, GL_RGBA, GL_UNSIGNED_BYTE, buf); 

#if 1
	for(i=0; i<300; i++)
		for(j=0; j<400; j++)
	{
		k=buf[((i*2+0)*800+(j*2+0))*4+0];
		k+=buf[((i*2+0)*800+(j*2+1))*4+0];
		k+=buf[((i*2+1)*800+(j*2+0))*4+0];
		k+=buf[((i*2+1)*800+(j*2+1))*4+0];
		buf[(i*400+j)*4+0]=k>>2;

		k=buf[((i*2+0)*800+(j*2+0))*4+1];
		k+=buf[((i*2+0)*800+(j*2+1))*4+1];
		k+=buf[((i*2+1)*800+(j*2+0))*4+1];
		k+=buf[((i*2+1)*800+(j*2+1))*4+1];
		buf[(i*400+j)*4+1]=k>>2;

		k=buf[((i*2+0)*800+(j*2+0))*4+2];
		k+=buf[((i*2+0)*800+(j*2+1))*4+2];
		k+=buf[((i*2+1)*800+(j*2+0))*4+2];
		k+=buf[((i*2+1)*800+(j*2+1))*4+2];
		buf[(i*400+j)*4+2]=k>>2;
	}
#endif

#if 0
	for(i=0; i<600; i++)
		for(j=0; j<160; j++)
			for(k=0; k<3; k++)
	{
		l=buf[(i*800+(j*5+0))*4+k];
		l+=buf[(i*800+(j*5+1))*4+k];
		l+=buf[(i*800+(j*5+2))*4+k];
		buf[(i*320+j*2+0)*4+k]=l/3;

		l=buf[(i*800+(j*5+2))*4+k];
		l+=buf[(i*800+(j*5+3))*4+k];
		l+=buf[(i*800+(j*5+4))*4+k];
		buf[(i*320+j*2+1)*4+k]=l/3;
	}

	for(i=0; i<120; i++)
		for(j=0; j<320; j++)
			for(k=0; k<3; k++)
	{
		l=buf[((i*5+0)*320+j)*4+k];
		l+=buf[((i*5+1)*320+j)*4+k];
		l+=buf[((i*5+2)*320+j)*4+k];
		buf[((i*2+0)*320+j)*4+k]=l/3;

		l=buf[((i*5+2)*320+j)*4+k];
		l+=buf[((i*5+2)*320+j)*4+k];
		l+=buf[((i*5+4)*320+j)*4+k];
		buf[((i*2+1)*320+j)*4+k]=l/3;
	}
#endif

	Tex_StoreFile(name, buf, 400, 300);

	return(0);
}

int Tex_DoScreenshot()
{
	static int num=0;
	char buf[64];

	sprintf(buf, "shot%d.tga", num++);

	kprint("screenshot to %s\n", buf);

	Tex_Screenshot(buf);

	return(0);
}

int Tex_DoScreenshotFrame()
{
	static char *base=NULL;
	static int num=0;
	char buf[64];

	if(!base)
	{
		base=strdup(Sys_GetTimeStr2());
		sprintf(buf, "record_%s", base);
		Sys_MkDir(buf);
	}

	sprintf(buf, "record_%s/frame%d.jpg", base, num++);
	Tex_Screenshot2(buf);

	return(0);
}
#endif
