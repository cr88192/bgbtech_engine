; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	F:\bgb.proj.pdsys52\libpdgl\base\render\jpg2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_03GJALCMIF@COM?$AA@			; `string'
PUBLIC	??_C@_05POMDCIO@JPG13?$AA@			; `string'
PUBLIC	??_C@_05BGPHADMP@JPG12?$AA@			; `string'
PUBLIC	??_C@_05DNNKFAAM@JPG11?$AA@			; `string'
PUBLIC	??_C@_05CEMBGBEN@JPG10?$AA@			; `string'
PUBLIC	??_C@_04JLMCFBFH@JPG9?$AA@			; `string'
PUBLIC	??_C@_04ICNJGABG@JPG8?$AA@			; `string'
PUBLIC	??_C@_04FEBHMNJ@JPG7?$AA@			; `string'
PUBLIC	??_C@_04BMFKENJI@JPG6?$AA@			; `string'
PUBLIC	??_C@_04DHHHBOFL@JPG5?$AA@			; `string'
PUBLIC	??_C@_04COGMCPBK@JPG4?$AA@			; `string'
PUBLIC	??_C@_04GBCNLJNN@JPG3?$AA@			; `string'
PUBLIC	??_C@_04HIDGIIJM@JPG2?$AA@			; `string'
PUBLIC	??_C@_04FDBLNLFP@JPG1?$AA@			; `string'
PUBLIC	??_C@_04EKAAOKBO@JPG0?$AA@			; `string'
PUBLIC	??_C@_05POLPAKON@APP15?$AA@			; `string'
PUBLIC	??_C@_05OHKEDLKM@APP14?$AA@			; `string'
PUBLIC	??_C@_05KIOFKNGL@APP13?$AA@			; `string'
PUBLIC	??_C@_05LBPOJMCK@APP12?$AA@			; `string'
PUBLIC	??_C@_05JKNDMPOJ@APP11?$AA@			; `string'
PUBLIC	??_C@_05IDMIPOKI@APP10?$AA@			; `string'
PUBLIC	??_C@_04PFHLNFLD@APP9?$AA@			; `string'
PUBLIC	??_C@_04OMGAOEPC@APP8?$AA@			; `string'
PUBLIC	??_C@_04GLPIPIDN@APP7?$AA@			; `string'
PUBLIC	??_C@_04HCODMJHM@APP6?$AA@			; `string'
PUBLIC	??_C@_04FJMOJKLP@APP5?$AA@			; `string'
PUBLIC	??_C@_04EANFKLPO@APP4?$AA@			; `string'
PUBLIC	??_C@_04PJEDNDJ@APP3?$AA@			; `string'
PUBLIC	??_C@_04BGIPAMHI@APP2?$AA@			; `string'
PUBLIC	??_C@_04DNKCFPLL@APP1?$AA@			; `string'
PUBLIC	??_C@_04CELJGOPK@APP0?$AA@			; `string'
PUBLIC	??_C@_03KKGFKKLA@EXP?$AA@			; `string'
PUBLIC	??_C@_03OPPGOKF@DHP?$AA@			; `string'
PUBLIC	??_C@_03IEEOOBBL@DRI?$AA@			; `string'
PUBLIC	??_C@_03OMAFEPEK@DNL?$AA@			; `string'
PUBLIC	??_C@_03HJGEDDFO@DQT?$AA@			; `string'
PUBLIC	??_C@_03ONFDEEMF@SOS?$AA@			; `string'
PUBLIC	??_C@_03CIAMLGFN@EOI?$AA@			; `string'
PUBLIC	??_C@_03FNHOLOBO@SOI?$AA@			; `string'
PUBLIC	??_C@_04FJAEBCFN@RST7?$AA@			; `string'
PUBLIC	??_C@_04EABPCDBM@RST6?$AA@			; `string'
PUBLIC	??_C@_04GLDCHANP@RST5?$AA@			; `string'
PUBLIC	??_C@_04HCCJEBJO@RST4?$AA@			; `string'
PUBLIC	??_C@_04DNGINHFJ@RST3?$AA@			; `string'
PUBLIC	??_C@_04CEHDOGBI@RST2?$AA@			; `string'
PUBLIC	??_C@_04PFOLFNL@RST1?$AA@			; `string'
PUBLIC	??_C@_04BGEFIEJK@RST0?$AA@			; `string'
PUBLIC	??_C@_05CHGDKBGN@SOF15?$AA@			; `string'
PUBLIC	??_C@_05DOHIJACM@SOF14?$AA@			; `string'
PUBLIC	??_C@_05HBDJAGOL@SOF13?$AA@			; `string'
PUBLIC	??_C@_03GAMBBELI@DAC?$AA@			; `string'
PUBLIC	??_C@_05EDAPGEGJ@SOF11?$AA@			; `string'
PUBLIC	??_C@_05FKBEFFCI@SOF10?$AA@			; `string'
PUBLIC	??_C@_04PPIKIJFK@SOF9?$AA@			; `string'
PUBLIC	??_C@_03PJJGGPMI@JPG?$AA@			; `string'
PUBLIC	??_C@_04GBAJKENE@SOF7?$AA@			; `string'
PUBLIC	??_C@_04HIBCJFJF@SOF6?$AA@			; `string'
PUBLIC	??_C@_04FDDPMGFG@SOF5?$AA@			; `string'
PUBLIC	??_C@_03GKJDKLKB@DHT?$AA@			; `string'
PUBLIC	??_C@_04FGFGBNA@SOF3?$AA@			; `string'
PUBLIC	??_C@_04BMHOFAJB@SOF2?$AA@			; `string'
PUBLIC	??_C@_04DHFDADFC@SOF1?$AA@			; `string'
PUBLIC	??_C@_04COEIDCBD@SOF0?$AA@			; `string'
PUBLIC	_pdjpg_marker
PUBLIC	_pdjpg_zigzag
PUBLIC	_pdjpg_zigzag2
_DATA	SEGMENT
COMM	_pdjhuff_win:DWORD
COMM	_pdjhuff_isend:DWORD
COMM	_pdjhuff_pos:DWORD
COMM	_pdjhuff_ct:DWORD
COMM	_pdjhuff_cs:DWORD
_DATA	ENDS
_BSS	SEGMENT
?yb@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::yb
?ydb@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::ydb
?lxs@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::lxs
?lys@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::lys
?ctx@?1??PDJPG_EncodeFast@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeFast'::`2'::ctx
?buf@?1??PDJPG_Store@@9@9 DD 01H DUP (?)		; `PDJPG_Store'::`2'::buf
_BSS	ENDS
_DATA	SEGMENT
_pdjpg_marker DD FLAT:??_C@_04COEIDCBD@SOF0?$AA@
	DD	FLAT:??_C@_04DHFDADFC@SOF1?$AA@
	DD	FLAT:??_C@_04BMHOFAJB@SOF2?$AA@
	DD	FLAT:??_C@_04FGFGBNA@SOF3?$AA@
	DD	FLAT:??_C@_03GKJDKLKB@DHT?$AA@
	DD	FLAT:??_C@_04FDDPMGFG@SOF5?$AA@
	DD	FLAT:??_C@_04HIBCJFJF@SOF6?$AA@
	DD	FLAT:??_C@_04GBAJKENE@SOF7?$AA@
	DD	FLAT:??_C@_03PJJGGPMI@JPG?$AA@
	DD	FLAT:??_C@_04PPIKIJFK@SOF9?$AA@
	DD	FLAT:??_C@_05FKBEFFCI@SOF10?$AA@
	DD	FLAT:??_C@_05EDAPGEGJ@SOF11?$AA@
	DD	FLAT:??_C@_03GAMBBELI@DAC?$AA@
	DD	FLAT:??_C@_05HBDJAGOL@SOF13?$AA@
	DD	FLAT:??_C@_05DOHIJACM@SOF14?$AA@
	DD	FLAT:??_C@_05CHGDKBGN@SOF15?$AA@
	DD	FLAT:??_C@_04BGEFIEJK@RST0?$AA@
	DD	FLAT:??_C@_04PFOLFNL@RST1?$AA@
	DD	FLAT:??_C@_04CEHDOGBI@RST2?$AA@
	DD	FLAT:??_C@_04DNGINHFJ@RST3?$AA@
	DD	FLAT:??_C@_04HCCJEBJO@RST4?$AA@
	DD	FLAT:??_C@_04GLDCHANP@RST5?$AA@
	DD	FLAT:??_C@_04EABPCDBM@RST6?$AA@
	DD	FLAT:??_C@_04FJAEBCFN@RST7?$AA@
	DD	FLAT:??_C@_03FNHOLOBO@SOI?$AA@
	DD	FLAT:??_C@_03CIAMLGFN@EOI?$AA@
	DD	FLAT:??_C@_03ONFDEEMF@SOS?$AA@
	DD	FLAT:??_C@_03HJGEDDFO@DQT?$AA@
	DD	FLAT:??_C@_03OMAFEPEK@DNL?$AA@
	DD	FLAT:??_C@_03IEEOOBBL@DRI?$AA@
	DD	FLAT:??_C@_03OPPGOKF@DHP?$AA@
	DD	FLAT:??_C@_03KKGFKKLA@EXP?$AA@
	DD	FLAT:??_C@_04CELJGOPK@APP0?$AA@
	DD	FLAT:??_C@_04DNKCFPLL@APP1?$AA@
	DD	FLAT:??_C@_04BGIPAMHI@APP2?$AA@
	DD	FLAT:??_C@_04PJEDNDJ@APP3?$AA@
	DD	FLAT:??_C@_04EANFKLPO@APP4?$AA@
	DD	FLAT:??_C@_04FJMOJKLP@APP5?$AA@
	DD	FLAT:??_C@_04HCODMJHM@APP6?$AA@
	DD	FLAT:??_C@_04GLPIPIDN@APP7?$AA@
	DD	FLAT:??_C@_04OMGAOEPC@APP8?$AA@
	DD	FLAT:??_C@_04PFHLNFLD@APP9?$AA@
	DD	FLAT:??_C@_05IDMIPOKI@APP10?$AA@
	DD	FLAT:??_C@_05JKNDMPOJ@APP11?$AA@
	DD	FLAT:??_C@_05LBPOJMCK@APP12?$AA@
	DD	FLAT:??_C@_05KIOFKNGL@APP13?$AA@
	DD	FLAT:??_C@_05OHKEDLKM@APP14?$AA@
	DD	FLAT:??_C@_05POLPAKON@APP15?$AA@
	DD	FLAT:??_C@_04EKAAOKBO@JPG0?$AA@
	DD	FLAT:??_C@_04FDBLNLFP@JPG1?$AA@
	DD	FLAT:??_C@_04HIDGIIJM@JPG2?$AA@
	DD	FLAT:??_C@_04GBCNLJNN@JPG3?$AA@
	DD	FLAT:??_C@_04COGMCPBK@JPG4?$AA@
	DD	FLAT:??_C@_04DHHHBOFL@JPG5?$AA@
	DD	FLAT:??_C@_04BMFKENJI@JPG6?$AA@
	DD	FLAT:??_C@_04FEBHMNJ@JPG7?$AA@
	DD	FLAT:??_C@_04ICNJGABG@JPG8?$AA@
	DD	FLAT:??_C@_04JLMCFBFH@JPG9?$AA@
	DD	FLAT:??_C@_05CEMBGBEN@JPG10?$AA@
	DD	FLAT:??_C@_05DNNKFAAM@JPG11?$AA@
	DD	FLAT:??_C@_05BGPHADMP@JPG12?$AA@
	DD	FLAT:??_C@_05POMDCIO@JPG13?$AA@
	DD	FLAT:??_C@_03GJALCMIF@COM?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
_pdjpg_zigzag DB 00H
	DB	01H
	DB	05H
	DB	06H
	DB	0eH
	DB	0fH
	DB	01bH
	DB	01cH
	DB	02H
	DB	04H
	DB	07H
	DB	0dH
	DB	010H
	DB	01aH
	DB	01dH
	DB	02aH
	DB	03H
	DB	08H
	DB	0cH
	DB	011H
	DB	019H
	DB	01eH
	DB	029H
	DB	02bH
	DB	09H
	DB	0bH
	DB	012H
	DB	018H
	DB	01fH
	DB	028H
	DB	02cH
	DB	035H
	DB	0aH
	DB	013H
	DB	017H
	DB	020H
	DB	027H
	DB	02dH
	DB	034H
	DB	036H
	DB	014H
	DB	016H
	DB	021H
	DB	026H
	DB	02eH
	DB	033H
	DB	037H
	DB	03cH
	DB	015H
	DB	022H
	DB	025H
	DB	02fH
	DB	032H
	DB	038H
	DB	03bH
	DB	03dH
	DB	023H
	DB	024H
	DB	030H
	DB	031H
	DB	039H
	DB	03aH
	DB	03eH
	DB	03fH
_pdjpg_zigzag2 DB 00H
	DB	01H
	DB	08H
	DB	010H
	DB	09H
	DB	02H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03dH
	DB	036H
	DB	02fH
	DB	037H
	DB	03eH
	DB	03fH
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJALCMIF@COM?$AA@
CONST	SEGMENT
??_C@_03GJALCMIF@COM?$AA@ DB 'COM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05POMDCIO@JPG13?$AA@
CONST	SEGMENT
??_C@_05POMDCIO@JPG13?$AA@ DB 'JPG13', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BGPHADMP@JPG12?$AA@
CONST	SEGMENT
??_C@_05BGPHADMP@JPG12?$AA@ DB 'JPG12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNNKFAAM@JPG11?$AA@
CONST	SEGMENT
??_C@_05DNNKFAAM@JPG11?$AA@ DB 'JPG11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CEMBGBEN@JPG10?$AA@
CONST	SEGMENT
??_C@_05CEMBGBEN@JPG10?$AA@ DB 'JPG10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLMCFBFH@JPG9?$AA@
CONST	SEGMENT
??_C@_04JLMCFBFH@JPG9?$AA@ DB 'JPG9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ICNJGABG@JPG8?$AA@
CONST	SEGMENT
??_C@_04ICNJGABG@JPG8?$AA@ DB 'JPG8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FEBHMNJ@JPG7?$AA@
CONST	SEGMENT
??_C@_04FEBHMNJ@JPG7?$AA@ DB 'JPG7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMFKENJI@JPG6?$AA@
CONST	SEGMENT
??_C@_04BMFKENJI@JPG6?$AA@ DB 'JPG6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHHHBOFL@JPG5?$AA@
CONST	SEGMENT
??_C@_04DHHHBOFL@JPG5?$AA@ DB 'JPG5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COGMCPBK@JPG4?$AA@
CONST	SEGMENT
??_C@_04COGMCPBK@JPG4?$AA@ DB 'JPG4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBCNLJNN@JPG3?$AA@
CONST	SEGMENT
??_C@_04GBCNLJNN@JPG3?$AA@ DB 'JPG3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIDGIIJM@JPG2?$AA@
CONST	SEGMENT
??_C@_04HIDGIIJM@JPG2?$AA@ DB 'JPG2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDBLNLFP@JPG1?$AA@
CONST	SEGMENT
??_C@_04FDBLNLFP@JPG1?$AA@ DB 'JPG1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKAAOKBO@JPG0?$AA@
CONST	SEGMENT
??_C@_04EKAAOKBO@JPG0?$AA@ DB 'JPG0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05POLPAKON@APP15?$AA@
CONST	SEGMENT
??_C@_05POLPAKON@APP15?$AA@ DB 'APP15', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHKEDLKM@APP14?$AA@
CONST	SEGMENT
??_C@_05OHKEDLKM@APP14?$AA@ DB 'APP14', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KIOFKNGL@APP13?$AA@
CONST	SEGMENT
??_C@_05KIOFKNGL@APP13?$AA@ DB 'APP13', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBPOJMCK@APP12?$AA@
CONST	SEGMENT
??_C@_05LBPOJMCK@APP12?$AA@ DB 'APP12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKNDMPOJ@APP11?$AA@
CONST	SEGMENT
??_C@_05JKNDMPOJ@APP11?$AA@ DB 'APP11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDMIPOKI@APP10?$AA@
CONST	SEGMENT
??_C@_05IDMIPOKI@APP10?$AA@ DB 'APP10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFHLNFLD@APP9?$AA@
CONST	SEGMENT
??_C@_04PFHLNFLD@APP9?$AA@ DB 'APP9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMGAOEPC@APP8?$AA@
CONST	SEGMENT
??_C@_04OMGAOEPC@APP8?$AA@ DB 'APP8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GLPIPIDN@APP7?$AA@
CONST	SEGMENT
??_C@_04GLPIPIDN@APP7?$AA@ DB 'APP7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCODMJHM@APP6?$AA@
CONST	SEGMENT
??_C@_04HCODMJHM@APP6?$AA@ DB 'APP6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJMOJKLP@APP5?$AA@
CONST	SEGMENT
??_C@_04FJMOJKLP@APP5?$AA@ DB 'APP5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EANFKLPO@APP4?$AA@
CONST	SEGMENT
??_C@_04EANFKLPO@APP4?$AA@ DB 'APP4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJEDNDJ@APP3?$AA@
CONST	SEGMENT
??_C@_04PJEDNDJ@APP3?$AA@ DB 'APP3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGIPAMHI@APP2?$AA@
CONST	SEGMENT
??_C@_04BGIPAMHI@APP2?$AA@ DB 'APP2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNKCFPLL@APP1?$AA@
CONST	SEGMENT
??_C@_04DNKCFPLL@APP1?$AA@ DB 'APP1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CELJGOPK@APP0?$AA@
CONST	SEGMENT
??_C@_04CELJGOPK@APP0?$AA@ DB 'APP0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KKGFKKLA@EXP?$AA@
CONST	SEGMENT
??_C@_03KKGFKKLA@EXP?$AA@ DB 'EXP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPPGOKF@DHP?$AA@
CONST	SEGMENT
??_C@_03OPPGOKF@DHP?$AA@ DB 'DHP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IEEOOBBL@DRI?$AA@
CONST	SEGMENT
??_C@_03IEEOOBBL@DRI?$AA@ DB 'DRI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OMAFEPEK@DNL?$AA@
CONST	SEGMENT
??_C@_03OMAFEPEK@DNL?$AA@ DB 'DNL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HJGEDDFO@DQT?$AA@
CONST	SEGMENT
??_C@_03HJGEDDFO@DQT?$AA@ DB 'DQT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ONFDEEMF@SOS?$AA@
CONST	SEGMENT
??_C@_03ONFDEEMF@SOS?$AA@ DB 'SOS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIAMLGFN@EOI?$AA@
CONST	SEGMENT
??_C@_03CIAMLGFN@EOI?$AA@ DB 'EOI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FNHOLOBO@SOI?$AA@
CONST	SEGMENT
??_C@_03FNHOLOBO@SOI?$AA@ DB 'SOI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJAEBCFN@RST7?$AA@
CONST	SEGMENT
??_C@_04FJAEBCFN@RST7?$AA@ DB 'RST7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EABPCDBM@RST6?$AA@
CONST	SEGMENT
??_C@_04EABPCDBM@RST6?$AA@ DB 'RST6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GLDCHANP@RST5?$AA@
CONST	SEGMENT
??_C@_04GLDCHANP@RST5?$AA@ DB 'RST5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCCJEBJO@RST4?$AA@
CONST	SEGMENT
??_C@_04HCCJEBJO@RST4?$AA@ DB 'RST4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNGINHFJ@RST3?$AA@
CONST	SEGMENT
??_C@_04DNGINHFJ@RST3?$AA@ DB 'RST3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEHDOGBI@RST2?$AA@
CONST	SEGMENT
??_C@_04CEHDOGBI@RST2?$AA@ DB 'RST2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFOLFNL@RST1?$AA@
CONST	SEGMENT
??_C@_04PFOLFNL@RST1?$AA@ DB 'RST1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGEFIEJK@RST0?$AA@
CONST	SEGMENT
??_C@_04BGEFIEJK@RST0?$AA@ DB 'RST0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CHGDKBGN@SOF15?$AA@
CONST	SEGMENT
??_C@_05CHGDKBGN@SOF15?$AA@ DB 'SOF15', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DOHIJACM@SOF14?$AA@
CONST	SEGMENT
??_C@_05DOHIJACM@SOF14?$AA@ DB 'SOF14', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HBDJAGOL@SOF13?$AA@
CONST	SEGMENT
??_C@_05HBDJAGOL@SOF13?$AA@ DB 'SOF13', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GAMBBELI@DAC?$AA@
CONST	SEGMENT
??_C@_03GAMBBELI@DAC?$AA@ DB 'DAC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EDAPGEGJ@SOF11?$AA@
CONST	SEGMENT
??_C@_05EDAPGEGJ@SOF11?$AA@ DB 'SOF11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKBEFFCI@SOF10?$AA@
CONST	SEGMENT
??_C@_05FKBEFFCI@SOF10?$AA@ DB 'SOF10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPIKIJFK@SOF9?$AA@
CONST	SEGMENT
??_C@_04PPIKIJFK@SOF9?$AA@ DB 'SOF9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJJGGPMI@JPG?$AA@
CONST	SEGMENT
??_C@_03PJJGGPMI@JPG?$AA@ DB 'JPG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBAJKENE@SOF7?$AA@
CONST	SEGMENT
??_C@_04GBAJKENE@SOF7?$AA@ DB 'SOF7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBCJFJF@SOF6?$AA@
CONST	SEGMENT
??_C@_04HIBCJFJF@SOF6?$AA@ DB 'SOF6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDDPMGFG@SOF5?$AA@
CONST	SEGMENT
??_C@_04FDDPMGFG@SOF5?$AA@ DB 'SOF5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GKJDKLKB@DHT?$AA@
CONST	SEGMENT
??_C@_03GKJDKLKB@DHT?$AA@ DB 'DHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGFGBNA@SOF3?$AA@
CONST	SEGMENT
??_C@_04FGFGBNA@SOF3?$AA@ DB 'SOF3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMHOFAJB@SOF2?$AA@
CONST	SEGMENT
??_C@_04BMHOFAJB@SOF2?$AA@ DB 'SOF2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHFDADFC@SOF1?$AA@
CONST	SEGMENT
??_C@_04DHFDADFC@SOF1?$AA@ DB 'SOF1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COEIDCBD@SOF0?$AA@
CONST	SEGMENT
??_C@_04COEIDCBD@SOF0?$AA@ DB 'SOF0', 00H		; `string'
CONST	ENDS
PUBLIC	_PDJPG_TransDCT_Horiz
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_TransDCT_Horiz
_TEXT	SEGMENT
tv618 = -44						; size = 4
tv610 = -40						; size = 4
tv612 = -36						; size = 4
tv614 = -32						; size = 4
tv652 = -28						; size = 4
tv228 = -28						; size = 4
tv607 = -24						; size = 4
tv639 = -20						; size = 4
tv629 = -16						; size = 4
tv608 = -12						; size = 4
tv632 = -8						; size = 4
_ib$ = -8						; size = 8
_iblk$ = 8						; size = 4
_oblk$ = 12						; size = 4
_PDJPG_TransDCT_Horiz PROC				; COMDAT
; File f:\bgb.proj.pdsys52\libpdgl\base\render\jpg2.c
; Line 191
	sub	esp, 44					; 0000002cH
; Line 195
	push	ebx
; Line 196
	push	ebp
; Line 200
	push	esi
	push	edi
; Line 194
	mov	eax, DWORD PTR _iblk$[esp+56]
; Line 195
	mov	dl, BYTE PTR [eax+3]
	mov	cl, BYTE PTR [eax+1]
	mov	bl, BYTE PTR [eax]
	add	dl, -128				; ffffff80H
	mov	BYTE PTR _ib$[esp+63], dl
; Line 196
	mov	dl, BYTE PTR [eax+4]
	add	dl, -128				; ffffff80H
	mov	BYTE PTR _ib$[esp+64], dl
	mov	dl, BYTE PTR [eax+5]
	add	cl, -128				; ffffff80H
	add	dl, -128				; ffffff80H
	mov	BYTE PTR _ib$[esp+61], cl
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _ib$[esp+65], dl
; Line 197
	mov	dl, BYTE PTR [eax+6]
	mov	al, BYTE PTR [eax+7]
	add	al, -128				; ffffff80H
; Line 200
	movsx	ebp, al
	movsx	eax, BYTE PTR _ib$[esp+65]
	add	bl, -128				; ffffff80H
	mov	DWORD PTR tv610[esp+60], eax
	movsx	eax, BYTE PTR _ib$[esp+64]
	mov	DWORD PTR tv612[esp+60], eax
	movsx	eax, BYTE PTR _ib$[esp+61]
	mov	DWORD PTR tv618[esp+60], eax
	movsx	eax, bl
	mov	ebx, DWORD PTR tv618[esp+60]
	add	ebx, eax
	add	cl, -128				; ffffff80H
	movsx	edi, BYTE PTR _ib$[esp+63]
	mov	esi, DWORD PTR _oblk$[esp+56]
	movsx	ecx, cl
	add	ebx, ecx
	add	ebx, edi
	add	ebx, DWORD PTR tv612[esp+60]
	mov	DWORD PTR tv614[esp+60], edi
	mov	edi, ebx
	mov	ebx, DWORD PTR tv610[esp+60]
	add	edi, ebx
	add	dl, -128				; ffffff80H
	movsx	edx, dl
	add	edi, edx
	add	edi, ebp
	imul	edi, 91					; 0000005bH
	mov	DWORD PTR tv607[esp+60], ebp
	mov	DWORD PTR [esi], edi
; Line 202
	mov	edi, eax
	sub	edi, ebp
	mov	ebp, ecx
	sub	ebp, ebx
	mov	ebx, DWORD PTR tv614[esp+60]
	sub	ebx, DWORD PTR tv612[esp+60]
	mov	DWORD PTR tv629[esp+60], ebp
	mov	ebp, DWORD PTR tv618[esp+60]
	mov	DWORD PTR tv632[esp+60], ebx
	imul	ebx, 25					; 00000019H
	sub	ebp, edx
	imul	ebp, 106				; 0000006aH
	add	ebp, ebx
	mov	ebx, DWORD PTR tv629[esp+60]
	imul	ebx, 71					; 00000047H
	add	ebp, ebx
	mov	ebx, edi
	imul	ebx, 126				; 0000007eH
	add	ebp, ebx
; Line 204
	mov	ebx, eax
	sub	ebx, DWORD PTR tv614[esp+60]
	mov	DWORD PTR [esi+4], ebp
	sub	ebx, DWORD PTR tv612[esp+60]
	mov	ebp, DWORD PTR tv607[esp+60]
	add	ebx, ebp
	mov	DWORD PTR tv639[esp+60], ebx
	mov	ebx, DWORD PTR tv618[esp+60]
	mov	DWORD PTR tv608[esp+60], edx
	sub	ebx, ecx
	sub	ebx, DWORD PTR tv610[esp+60]
	mov	ebp, DWORD PTR tv639[esp+60]
	add	ebx, edx
	imul	ebp, 118				; 00000076H
; Line 206
	sub	edx, DWORD PTR tv618[esp+60]
	imul	ebx, 49					; 00000031H
	add	ebx, ebp
; Line 208
	sub	eax, DWORD PTR tv618[esp+60]
	mov	DWORD PTR [esi+8], ebx
	mov	ebx, DWORD PTR tv612[esp+60]
	sub	ebx, DWORD PTR tv614[esp+60]
	mov	ebp, edx
	mov	DWORD PTR tv652[esp+60], ebx
	imul	ebp, 25					; 00000019H
	mov	ebx, DWORD PTR tv610[esp+60]
	sub	ebx, ecx
	imul	ebx, 126				; 0000007eH
	add	ebx, ebp
	mov	ebp, DWORD PTR tv652[esp+60]
	sub	eax, ecx
	imul	ebp, 71					; 00000047H
	sub	eax, DWORD PTR tv610[esp+60]
	add	ebx, ebp
	sub	eax, DWORD PTR tv608[esp+60]
	mov	ebp, edi
	add	eax, DWORD PTR tv614[esp+60]
	imul	ebp, 106				; 0000006aH
	add	eax, DWORD PTR tv612[esp+60]
	add	ebx, ebp
	add	eax, DWORD PTR tv607[esp+60]
	mov	DWORD PTR [esi+12], ebx
	imul	eax, 91					; 0000005bH
	mov	DWORD PTR [esi+16], eax
; Line 210
	mov	eax, DWORD PTR tv632[esp+60]
	mov	ebx, edx
	imul	eax, 106				; 0000006aH
; Line 214
	imul	edx, 71					; 00000047H
	imul	ebx, 126				; 0000007eH
	sub	ecx, DWORD PTR tv618[esp+60]
	add	ebx, eax
	mov	eax, DWORD PTR tv629[esp+60]
	sub	ecx, DWORD PTR tv608[esp+60]
	mov	ebp, eax
	imul	eax, 106				; 0000006aH
	add	ecx, DWORD PTR tv610[esp+60]
	imul	ebp, 25					; 00000019H
	add	ebx, ebp
	imul	ecx, 118				; 00000076H
	mov	ebp, edi
	imul	edi, 25					; 00000019H
	imul	ebp, 71					; 00000047H
	add	ebx, ebp
	mov	DWORD PTR [esi+20], ebx
	mov	ebx, DWORD PTR tv639[esp+60]
	imul	ebx, 49					; 00000031H
	add	ecx, ebx
	mov	DWORD PTR [esi+24], ecx
	mov	ecx, DWORD PTR tv652[esp+60]
	imul	ecx, 126				; 0000007eH
	add	edx, ecx
	add	edx, eax
	add	edx, edi
	pop	edi
	mov	DWORD PTR [esi+28], edx
	pop	esi
	pop	ebp
	pop	ebx
; Line 215
	add	esp, 44					; 0000002cH
	ret	0
_PDJPG_TransDCT_Horiz ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_TransDCT_Vert
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_TransDCT_Vert
_TEXT	SEGMENT
_iblk$ = 8						; size = 4
_oblk$ = 12						; size = 4
_PDJPG_TransDCT_Vert PROC				; COMDAT
; Line 222
	mov	eax, DWORD PTR _iblk$[esp-4]
	mov	edx, DWORD PTR [eax+32]
	add	edx, DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _oblk$[esp-4]
	add	edx, DWORD PTR [eax+96]
	push	esi
	add	edx, DWORD PTR [eax+160]
	add	edx, DWORD PTR [eax+128]
	add	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [eax+192]
	add	edx, DWORD PTR [eax+224]
	imul	edx, 91					; 0000005bH
	mov	DWORD PTR [ecx], edx
; Line 226
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [eax+224]
	mov	esi, DWORD PTR [eax+32]
	sub	esi, DWORD PTR [eax+192]
	imul	edx, 126				; 0000007eH
	imul	esi, 106				; 0000006aH
	add	edx, esi
	mov	esi, DWORD PTR [eax+64]
	sub	esi, DWORD PTR [eax+160]
	imul	esi, 71					; 00000047H
	add	edx, esi
	mov	esi, DWORD PTR [eax+96]
	sub	esi, DWORD PTR [eax+128]
	imul	esi, 25					; 00000019H
	add	edx, esi
	mov	DWORD PTR [ecx+32], edx
; Line 230
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [eax+128]
	mov	esi, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [eax+96]
	sub	esi, DWORD PTR [eax+64]
	add	edx, DWORD PTR [eax+224]
	sub	esi, DWORD PTR [eax+160]
	imul	edx, 118				; 00000076H
	add	esi, DWORD PTR [eax+192]
	imul	esi, 49					; 00000031H
	add	edx, esi
	mov	DWORD PTR [ecx+64], edx
; Line 234
	mov	edx, DWORD PTR [eax+192]
	sub	edx, DWORD PTR [eax+32]
	mov	esi, DWORD PTR [eax+160]
	sub	esi, DWORD PTR [eax+64]
	imul	edx, 25					; 00000019H
	imul	esi, 126				; 0000007eH
	add	edx, esi
	mov	esi, DWORD PTR [eax]
	sub	esi, DWORD PTR [eax+224]
	imul	esi, 106				; 0000006aH
	add	edx, esi
	mov	esi, DWORD PTR [eax+128]
	sub	esi, DWORD PTR [eax+96]
	imul	esi, 71					; 00000047H
	add	edx, esi
	mov	DWORD PTR [ecx+96], edx
; Line 238
	mov	edx, DWORD PTR [eax+128]
	sub	edx, DWORD PTR [eax+160]
	sub	edx, DWORD PTR [eax+64]
	sub	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [eax+192]
	add	edx, DWORD PTR [eax+96]
	add	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [eax+224]
	imul	edx, 91					; 0000005bH
	mov	DWORD PTR [ecx+128], edx
; Line 242
	mov	edx, DWORD PTR [eax+192]
	sub	edx, DWORD PTR [eax+32]
	mov	esi, DWORD PTR [eax+96]
	sub	esi, DWORD PTR [eax+128]
	imul	edx, 126				; 0000007eH
	imul	esi, 106				; 0000006aH
	add	edx, esi
	mov	esi, DWORD PTR [eax]
	sub	esi, DWORD PTR [eax+224]
	imul	esi, 71					; 00000047H
	add	edx, esi
	mov	esi, DWORD PTR [eax+64]
	sub	esi, DWORD PTR [eax+160]
	imul	esi, 25					; 00000019H
	add	edx, esi
	mov	DWORD PTR [ecx+160], edx
; Line 246
	mov	edx, DWORD PTR [eax+160]
	sub	edx, DWORD PTR [eax+32]
	mov	esi, DWORD PTR [eax]
	sub	esi, DWORD PTR [eax+128]
	sub	edx, DWORD PTR [eax+192]
	sub	esi, DWORD PTR [eax+96]
	add	edx, DWORD PTR [eax+64]
	add	esi, DWORD PTR [eax+224]
	imul	edx, 118				; 00000076H
	imul	esi, 49					; 00000031H
	add	edx, esi
	mov	DWORD PTR [ecx+192], edx
; Line 250
	mov	edx, DWORD PTR [eax+192]
	sub	edx, DWORD PTR [eax+32]
	mov	esi, DWORD PTR [eax+128]
	sub	esi, DWORD PTR [eax+96]
	imul	edx, 71					; 00000047H
	imul	esi, 126				; 0000007eH
	add	edx, esi
	mov	esi, DWORD PTR [eax+64]
	sub	esi, DWORD PTR [eax+160]
	imul	esi, 106				; 0000006aH
	add	edx, esi
	mov	esi, DWORD PTR [eax]
	sub	esi, DWORD PTR [eax+224]
	imul	esi, 25					; 00000019H
	add	edx, esi
	mov	DWORD PTR [ecx+224], edx
	pop	esi
; Line 251
	ret	0
_PDJPG_TransDCT_Vert ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_TransDCT
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_TransDCT
_TEXT	SEGMENT
_s$ = -512						; size = 256
_t$ = -256						; size = 256
_iblk$ = 8						; size = 4
_oblk$ = 12						; size = 4
_PDJPG_TransDCT PROC					; COMDAT
; Line 254
	sub	esp, 512				; 00000200H
	push	esi
; Line 259
	mov	esi, DWORD PTR _iblk$[esp+512]
	lea	eax, DWORD PTR _s$[esp+516]
	push	eax
	push	esi
	call	_PDJPG_TransDCT_Horiz
; Line 260
	lea	ecx, DWORD PTR _s$[esp+556]
	push	ecx
	lea	edx, DWORD PTR [esi+8]
	push	edx
	call	_PDJPG_TransDCT_Horiz
; Line 261
	lea	eax, DWORD PTR _s$[esp+596]
	push	eax
	lea	ecx, DWORD PTR [esi+16]
	push	ecx
	call	_PDJPG_TransDCT_Horiz
; Line 262
	lea	edx, DWORD PTR _s$[esp+636]
	push	edx
	lea	eax, DWORD PTR [esi+24]
	push	eax
	call	_PDJPG_TransDCT_Horiz
; Line 263
	lea	ecx, DWORD PTR _s$[esp+676]
	push	ecx
	lea	edx, DWORD PTR [esi+32]
	push	edx
	call	_PDJPG_TransDCT_Horiz
; Line 264
	lea	eax, DWORD PTR _s$[esp+716]
	push	eax
	lea	ecx, DWORD PTR [esi+40]
	push	ecx
	call	_PDJPG_TransDCT_Horiz
; Line 265
	lea	edx, DWORD PTR _s$[esp+756]
	push	edx
	lea	eax, DWORD PTR [esi+48]
	push	eax
	call	_PDJPG_TransDCT_Horiz
; Line 266
	lea	ecx, DWORD PTR _s$[esp+796]
	push	ecx
	add	esi, 56					; 00000038H
	push	esi
	call	_PDJPG_TransDCT_Horiz
	add	esp, 64					; 00000040H
; Line 268
	lea	edx, DWORD PTR _t$[esp+516]
	push	edx
	lea	eax, DWORD PTR _s$[esp+520]
	push	eax
	call	_PDJPG_TransDCT_Vert
; Line 269
	lea	ecx, DWORD PTR _t$[esp+528]
	push	ecx
	lea	edx, DWORD PTR _s$[esp+532]
	push	edx
	call	_PDJPG_TransDCT_Vert
; Line 270
	lea	eax, DWORD PTR _t$[esp+540]
	push	eax
	lea	ecx, DWORD PTR _s$[esp+544]
	push	ecx
	call	_PDJPG_TransDCT_Vert
; Line 271
	lea	edx, DWORD PTR _t$[esp+552]
	push	edx
	lea	eax, DWORD PTR _s$[esp+556]
	push	eax
	call	_PDJPG_TransDCT_Vert
; Line 272
	lea	ecx, DWORD PTR _t$[esp+564]
	push	ecx
	lea	edx, DWORD PTR _s$[esp+568]
	push	edx
	call	_PDJPG_TransDCT_Vert
; Line 273
	lea	eax, DWORD PTR _t$[esp+576]
	push	eax
	lea	ecx, DWORD PTR _s$[esp+580]
	push	ecx
	call	_PDJPG_TransDCT_Vert
; Line 274
	lea	edx, DWORD PTR _t$[esp+588]
	push	edx
	lea	eax, DWORD PTR _s$[esp+592]
	push	eax
	call	_PDJPG_TransDCT_Vert
; Line 275
	lea	ecx, DWORD PTR _t$[esp+600]
	push	ecx
	lea	edx, DWORD PTR _s$[esp+604]
	push	edx
	call	_PDJPG_TransDCT_Vert
; Line 277
	mov	ecx, DWORD PTR _oblk$[esp+576]
	add	esp, 64					; 00000040H
	xor	eax, eax
	pop	esi
	npad	9
$LL3@PDJPG_Tran:
; Line 278
	mov	dx, WORD PTR _t$[esp+eax*4+514]
	mov	WORD PTR [ecx+eax*2], dx
	inc	eax
	cmp	eax, 64					; 00000040H
	jl	SHORT $LL3@PDJPG_Tran
; Line 279
	add	esp, 512				; 00000200H
	ret	0
_PDJPG_TransDCT ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_TransIDCT_Horiz
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_TransIDCT_Horiz
_TEXT	SEGMENT
tv292 = -16						; size = 4
_l$ = -12						; size = 4
_f$ = -12						; size = 4
_k$ = -8						; size = 4
tv309 = -4						; size = 4
tv297 = 8						; size = 4
_p$ = 8							; size = 4
_d$ = 8							; size = 4
_iblk$ = 8						; size = 4
_oblk$ = 12						; size = 4
_PDJPG_TransIDCT_Horiz PROC				; COMDAT
; Line 285
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
; Line 290
	mov	esi, DWORD PTR _iblk$[esp+24]
; Line 291
	movsx	ecx, WORD PTR [esi+4]
; Line 292
	movsx	ebp, WORD PTR [esi+12]
	movsx	eax, WORD PTR [esi+8]
	mov	ebx, ecx
	imul	ecx, 49					; 00000031H
	imul	eax, 91					; 0000005bH
	mov	edx, ecx
	imul	ebx, 118				; 00000076H
	push	edi
	movsx	edi, WORD PTR [esi]
	imul	edi, 91					; 0000005bH
	mov	ecx, ebp
	imul	ebp, 49					; 00000031H
	imul	ecx, 118				; 00000076H
	mov	DWORD PTR _d$[esp+28], edx
; Line 293
	sub	edx, ecx
	sub	ecx, DWORD PTR _d$[esp+28]
	sub	edx, eax
	sub	ecx, eax
	add	ecx, edi
	mov	DWORD PTR _f$[esp+32], ebp
	add	ebp, ebx
	add	ebp, eax
	sub	eax, DWORD PTR _f$[esp+32]
	mov	DWORD PTR _k$[esp+32], ecx
; Line 294
	movsx	ecx, WORD PTR [esi+6]
	sub	eax, ebx
	movsx	ebx, WORD PTR [esi+14]
	add	eax, edi
	mov	DWORD PTR _l$[esp+32], eax
	movsx	eax, WORD PTR [esi+2]
	mov	DWORD PTR tv297[esp+28], ecx
	movsx	ecx, WORD PTR [esi+10]
	add	ebp, edi
	add	edx, edi
	mov	esi, ebx
	mov	edi, ecx
	imul	esi, 25					; 00000019H
	imul	edi, 71					; 00000047H
	mov	DWORD PTR tv292[esp+32], eax
	imul	eax, 126				; 0000007eH
	add	esi, edi
	mov	edi, DWORD PTR tv297[esp+28]
	imul	edi, 106				; 0000006aH
	add	esi, edi
	add	esi, eax
; Line 295
	mov	eax, ebx
	imul	eax, 71					; 00000047H
	mov	edi, ecx
	imul	edi, -126				; ffffff82H
	sub	edi, eax
	mov	eax, DWORD PTR tv297[esp+28]
	imul	eax, 25					; 00000019H
	sub	edi, eax
	mov	eax, DWORD PTR tv292[esp+32]
	imul	eax, 106				; 0000006aH
	add	edi, eax
	mov	DWORD PTR tv309[esp+32], ebx
; Line 296
	imul	ebx, 106				; 0000006aH
	mov	eax, ecx
; Line 297
	imul	ecx, 106				; 0000006aH
	imul	eax, 25					; 00000019H
	add	ebx, eax
	mov	eax, DWORD PTR tv297[esp+28]
	imul	eax, 126				; 0000007eH
	sub	ebx, eax
	mov	eax, DWORD PTR tv292[esp+32]
	imul	eax, 71					; 00000047H
	add	ebx, eax
	mov	eax, DWORD PTR tv309[esp+32]
	imul	eax, 126				; 0000007eH
	sub	ecx, eax
	mov	eax, DWORD PTR tv297[esp+28]
	imul	eax, 71					; 00000047H
	sub	ecx, eax
	mov	eax, DWORD PTR tv292[esp+32]
	imul	eax, 25					; 00000019H
	add	ecx, eax
; Line 298
	mov	eax, DWORD PTR _oblk$[esp+28]
	mov	DWORD PTR _p$[esp+28], ecx
	lea	ecx, DWORD PTR [esi+ebp]
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [edi+edx]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _k$[esp+32]
	add	ecx, ebx
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _l$[esp+32]
	mov	eax, DWORD PTR _p$[esp+28]
	add	eax, ecx
	mov	ecx, DWORD PTR _oblk$[esp+28]
	mov	DWORD PTR [ecx+12], eax
; Line 299
	mov	ecx, DWORD PTR _l$[esp+32]
	sub	ecx, DWORD PTR _p$[esp+28]
	mov	eax, DWORD PTR _oblk$[esp+28]
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR _k$[esp+32]
	sub	edx, edi
	sub	ecx, ebx
	pop	edi
	sub	ebp, esi
	pop	esi
	mov	DWORD PTR [eax+28], ebp
	pop	ebp
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], edx
	pop	ebx
; Line 300
	add	esp, 16					; 00000010H
	ret	0
_PDJPG_TransIDCT_Horiz ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_TransIDCT_Vert
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_TransIDCT_Vert
_TEXT	SEGMENT
tv255 = -16						; size = 4
_l$ = -12						; size = 4
_f$ = -12						; size = 4
_k$ = -8						; size = 4
tv264 = -4						; size = 4
tv259 = 8						; size = 4
_p$ = 8							; size = 4
_d$ = 8							; size = 4
_iblk$ = 8						; size = 4
_oblk$ = 12						; size = 4
_PDJPG_TransIDCT_Vert PROC				; COMDAT
; Line 303
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
; Line 308
	mov	esi, DWORD PTR _iblk$[esp+24]
; Line 309
	mov	ecx, DWORD PTR [esi+64]
; Line 310
	mov	ebp, DWORD PTR [esi+192]
	mov	eax, DWORD PTR [esi+128]
	mov	ebx, ecx
	imul	ecx, 49					; 00000031H
	imul	eax, 91					; 0000005bH
	imul	ebx, 118				; 00000076H
	mov	edx, ecx
	mov	ecx, ebp
	imul	ebp, 49					; 00000031H
	imul	ecx, 118				; 00000076H
	push	edi
	mov	edi, DWORD PTR [esi]
	imul	edi, 91					; 0000005bH
	mov	DWORD PTR _d$[esp+28], edx
; Line 311
	sub	edx, ecx
	sub	ecx, DWORD PTR _d$[esp+28]
	sub	edx, eax
	sub	ecx, eax
	mov	DWORD PTR _f$[esp+32], ebp
	add	ebp, ebx
	add	ebp, eax
	sub	eax, DWORD PTR _f$[esp+32]
	add	ecx, edi
	sub	eax, ebx
	add	eax, edi
	mov	DWORD PTR _l$[esp+32], eax
; Line 312
	mov	eax, DWORD PTR [esi+160]
	mov	DWORD PTR tv259[esp+28], eax
	mov	eax, DWORD PTR [esi+96]
	mov	ebx, eax
	imul	ebx, 106				; 0000006aH
	add	ebp, edi
	add	edx, edi
	mov	edi, DWORD PTR [esi+224]
	mov	DWORD PTR _k$[esp+32], ecx
	mov	ecx, DWORD PTR [esi+32]
	mov	esi, ecx
	imul	esi, 126				; 0000007eH
	add	esi, ebx
	mov	ebx, DWORD PTR tv259[esp+28]
	imul	ebx, 71					; 00000047H
	mov	DWORD PTR tv255[esp+32], edi
	imul	edi, 25					; 00000019H
	add	esi, ebx
; Line 313
	mov	ebx, eax
	imul	ebx, 25					; 00000019H
	add	esi, edi
	mov	edi, ecx
	imul	edi, 106				; 0000006aH
	sub	edi, ebx
	mov	ebx, DWORD PTR tv259[esp+28]
	imul	ebx, 126				; 0000007eH
	sub	edi, ebx
	mov	ebx, DWORD PTR tv255[esp+32]
	imul	ebx, 71					; 00000047H
	mov	DWORD PTR tv264[esp+32], eax
; Line 314
	imul	eax, 126				; 0000007eH
	sub	edi, ebx
	mov	ebx, ecx
; Line 315
	imul	ecx, 25					; 00000019H
	imul	ebx, 71					; 00000047H
	sub	ebx, eax
	mov	eax, DWORD PTR tv259[esp+28]
	imul	eax, 25					; 00000019H
	add	ebx, eax
	mov	eax, DWORD PTR tv255[esp+32]
	imul	eax, 106				; 0000006aH
	add	ebx, eax
	mov	eax, DWORD PTR tv264[esp+32]
	imul	eax, 71					; 00000047H
	sub	ecx, eax
	mov	eax, DWORD PTR tv259[esp+28]
	imul	eax, 106				; 0000006aH
	add	ecx, eax
	mov	eax, DWORD PTR tv255[esp+32]
	imul	eax, 126				; 0000007eH
	sub	ecx, eax
; Line 316
	mov	eax, DWORD PTR _oblk$[esp+28]
	mov	DWORD PTR _p$[esp+28], ecx
	lea	ecx, DWORD PTR [esi+ebp]
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [edi+edx]
	mov	DWORD PTR [eax+32], ecx
	mov	ecx, DWORD PTR _k$[esp+32]
	add	ecx, ebx
	mov	DWORD PTR [eax+64], ecx
	mov	ecx, DWORD PTR _l$[esp+32]
	mov	eax, DWORD PTR _p$[esp+28]
	add	eax, ecx
	mov	ecx, DWORD PTR _oblk$[esp+28]
	mov	DWORD PTR [ecx+96], eax
; Line 317
	mov	ecx, DWORD PTR _l$[esp+32]
	sub	ecx, DWORD PTR _p$[esp+28]
	mov	eax, DWORD PTR _oblk$[esp+28]
	mov	DWORD PTR [eax+128], ecx
	mov	ecx, DWORD PTR _k$[esp+32]
	sub	edx, edi
	sub	ecx, ebx
	pop	edi
	sub	ebp, esi
	pop	esi
	mov	DWORD PTR [eax+224], ebp
	pop	ebp
	mov	DWORD PTR [eax+160], ecx
	mov	DWORD PTR [eax+192], edx
	pop	ebx
; Line 318
	add	esp, 16					; 00000010H
	ret	0
_PDJPG_TransIDCT_Vert ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_TransIDCT
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_TransIDCT
_TEXT	SEGMENT
_s$ = -512						; size = 256
_t$ = -256						; size = 256
_iblk$ = 8						; size = 4
_oblk$ = 12						; size = 4
_PDJPG_TransIDCT PROC					; COMDAT
; Line 321
	sub	esp, 512				; 00000200H
	push	esi
; Line 326
	mov	esi, DWORD PTR _iblk$[esp+512]
	lea	eax, DWORD PTR _s$[esp+516]
	push	eax
	push	esi
	call	_PDJPG_TransIDCT_Horiz
; Line 327
	lea	ecx, DWORD PTR _s$[esp+556]
	push	ecx
	lea	edx, DWORD PTR [esi+16]
	push	edx
	call	_PDJPG_TransIDCT_Horiz
; Line 328
	lea	eax, DWORD PTR _s$[esp+596]
	push	eax
	lea	ecx, DWORD PTR [esi+32]
	push	ecx
	call	_PDJPG_TransIDCT_Horiz
; Line 329
	lea	edx, DWORD PTR _s$[esp+636]
	push	edx
	lea	eax, DWORD PTR [esi+48]
	push	eax
	call	_PDJPG_TransIDCT_Horiz
; Line 330
	lea	ecx, DWORD PTR _s$[esp+676]
	push	ecx
	lea	edx, DWORD PTR [esi+64]
	push	edx
	call	_PDJPG_TransIDCT_Horiz
; Line 331
	lea	eax, DWORD PTR _s$[esp+716]
	push	eax
	lea	ecx, DWORD PTR [esi+80]
	push	ecx
	call	_PDJPG_TransIDCT_Horiz
; Line 332
	lea	edx, DWORD PTR _s$[esp+756]
	push	edx
	lea	eax, DWORD PTR [esi+96]
	push	eax
	call	_PDJPG_TransIDCT_Horiz
; Line 333
	lea	ecx, DWORD PTR _s$[esp+796]
	push	ecx
	add	esi, 112				; 00000070H
	push	esi
	call	_PDJPG_TransIDCT_Horiz
	add	esp, 64					; 00000040H
; Line 335
	lea	edx, DWORD PTR _t$[esp+516]
	push	edx
	lea	eax, DWORD PTR _s$[esp+520]
	push	eax
	call	_PDJPG_TransIDCT_Vert
; Line 336
	lea	ecx, DWORD PTR _t$[esp+528]
	push	ecx
	lea	edx, DWORD PTR _s$[esp+532]
	push	edx
	call	_PDJPG_TransIDCT_Vert
; Line 337
	lea	eax, DWORD PTR _t$[esp+540]
	push	eax
	lea	ecx, DWORD PTR _s$[esp+544]
	push	ecx
	call	_PDJPG_TransIDCT_Vert
; Line 338
	lea	edx, DWORD PTR _t$[esp+552]
	push	edx
	lea	eax, DWORD PTR _s$[esp+556]
	push	eax
	call	_PDJPG_TransIDCT_Vert
; Line 339
	lea	ecx, DWORD PTR _t$[esp+564]
	push	ecx
	lea	edx, DWORD PTR _s$[esp+568]
	push	edx
	call	_PDJPG_TransIDCT_Vert
; Line 340
	lea	eax, DWORD PTR _t$[esp+576]
	push	eax
	lea	ecx, DWORD PTR _s$[esp+580]
	push	ecx
	call	_PDJPG_TransIDCT_Vert
; Line 341
	lea	edx, DWORD PTR _t$[esp+588]
	push	edx
	lea	eax, DWORD PTR _s$[esp+592]
	push	eax
	call	_PDJPG_TransIDCT_Vert
; Line 342
	lea	ecx, DWORD PTR _t$[esp+600]
	push	ecx
	lea	edx, DWORD PTR _s$[esp+604]
	push	edx
	call	_PDJPG_TransIDCT_Vert
; Line 344
	mov	edx, DWORD PTR _oblk$[esp+576]
	add	esp, 64					; 00000040H
	xor	eax, eax
	pop	esi
	npad	9
$LL3@PDJPG_Tran@2:
; Line 346
	movsx	ecx, WORD PTR _t$[esp+eax*4+514]
	add	ecx, 128				; 00000080H
; Line 347
	jns	SHORT $LN8@PDJPG_Tran@2
	xor	ecx, ecx
	jmp	SHORT $LN6@PDJPG_Tran@2
$LN8@PDJPG_Tran@2:
	cmp	ecx, 255				; 000000ffH
	jle	SHORT $LN6@PDJPG_Tran@2
	mov	ecx, 255				; 000000ffH
$LN6@PDJPG_Tran@2:
	mov	BYTE PTR [eax+edx], cl
	inc	eax
	cmp	eax, 64					; 00000040H
	jl	SHORT $LL3@PDJPG_Tran@2
; Line 349
	add	esp, 512				; 00000200H
	ret	0
_PDJPG_TransIDCT ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_NextByte
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_NextByte
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_PDJHUFF_NextByte PROC					; COMDAT
; Line 361
	cmp	DWORD PTR _pdjhuff_isend, 0
	je	SHORT $LN3@PDJHUFF_Ne
	mov	eax, 255				; 000000ffH
; Line 374
	ret	0
$LN3@PDJHUFF_Ne:
; Line 363
	mov	ecx, DWORD PTR _pdjhuff_cs
	movzx	eax, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR _pdjhuff_cs, ecx
; Line 364
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN4@PDJHUFF_Ne
; Line 366
	movzx	edx, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR _pdjhuff_cs, ecx
; Line 367
	test	edx, edx
	je	SHORT $LN4@PDJHUFF_Ne
; Line 370
	mov	DWORD PTR _pdjhuff_isend, 1
$LN4@PDJHUFF_Ne:
; Line 374
	ret	0
_PDJHUFF_NextByte ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_InitStream
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_InitStream
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_PDJHUFF_InitStream PROC				; COMDAT
; Line 381
	mov	eax, DWORD PTR _buf$[esp-4]
	xor	edx, edx
	mov	DWORD PTR _pdjhuff_cs, eax
	mov	DWORD PTR _pdjhuff_pos, 0
	mov	DWORD PTR _pdjhuff_isend, edx
; Line 382
	movzx	ecx, BYTE PTR [eax]
	inc	eax
	push	esi
	mov	DWORD PTR _pdjhuff_cs, eax
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $LN3@PDJHUFF_In
	movzx	esi, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	test	esi, esi
	je	SHORT $LN3@PDJHUFF_In
	mov	edx, 1
	mov	DWORD PTR _pdjhuff_isend, edx
$LN3@PDJHUFF_In:
	push	edi
	mov	DWORD PTR _pdjhuff_win, ecx
; Line 383
	test	edx, edx
	je	SHORT $LN10@PDJHUFF_In
	mov	esi, 255				; 000000ffH
	jmp	SHORT $LN8@PDJHUFF_In
$LN10@PDJHUFF_In:
	movzx	esi, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	cmp	esi, 255				; 000000ffH
	jne	SHORT $LN8@PDJHUFF_In
	movzx	edi, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	test	edi, edi
	je	SHORT $LN8@PDJHUFF_In
	mov	edx, 1
	mov	DWORD PTR _pdjhuff_isend, edx
$LN8@PDJHUFF_In:
	shl	ecx, 8
	or	ecx, esi
	mov	DWORD PTR _pdjhuff_win, ecx
; Line 384
	test	edx, edx
	je	SHORT $LN15@PDJHUFF_In
	mov	esi, 255				; 000000ffH
	jmp	SHORT $LN13@PDJHUFF_In
$LN15@PDJHUFF_In:
	movzx	esi, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	cmp	esi, 255				; 000000ffH
	jne	SHORT $LN13@PDJHUFF_In
	movzx	edi, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	test	edi, edi
	je	SHORT $LN13@PDJHUFF_In
	mov	edx, 1
	mov	DWORD PTR _pdjhuff_isend, edx
$LN13@PDJHUFF_In:
	shl	ecx, 8
	or	ecx, esi
	mov	DWORD PTR _pdjhuff_win, ecx
	pop	edi
; Line 385
	test	edx, edx
	je	SHORT $LN20@PDJHUFF_In
	mov	esi, 255				; 000000ffH
	shl	ecx, 8
	or	ecx, esi
	mov	DWORD PTR _pdjhuff_win, ecx
	pop	esi
; Line 386
	ret	0
; Line 385
$LN20@PDJHUFF_In:
	movzx	esi, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	cmp	esi, 255				; 000000ffH
	jne	SHORT $LN18@PDJHUFF_In
	movzx	edx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	test	edx, edx
	je	SHORT $LN18@PDJHUFF_In
	mov	DWORD PTR _pdjhuff_isend, 1
$LN18@PDJHUFF_In:
	shl	ecx, 8
	or	ecx, esi
	mov	DWORD PTR _pdjhuff_win, ecx
	pop	esi
; Line 386
	ret	0
_PDJHUFF_InitStream ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_ReadBit
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_ReadBit
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_PDJHUFF_ReadBit PROC					; COMDAT
; Line 392
	mov	edx, DWORD PTR _pdjhuff_win
	push	esi
	mov	esi, DWORD PTR _pdjhuff_pos
	mov	ecx, 31					; 0000001fH
	sub	ecx, esi
	mov	eax, edx
	shr	eax, cl
; Line 393
	inc	esi
	mov	DWORD PTR _pdjhuff_pos, esi
	and	eax, 1
; Line 394
	cmp	esi, 8
	jl	SHORT $LN1@PDJHUFF_Re
; Line 396
	cmp	DWORD PTR _pdjhuff_isend, 0
	je	SHORT $LN6@PDJHUFF_Re
	mov	ecx, 255				; 000000ffH
	jmp	SHORT $LN7@PDJHUFF_Re
$LN6@PDJHUFF_Re:
	mov	ecx, DWORD PTR _pdjhuff_cs
	push	ebx
	movzx	ebx, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR _pdjhuff_cs, ecx
	cmp	ebx, 255				; 000000ffH
	jne	SHORT $LN4@PDJHUFF_Re
	push	edi
	movzx	edi, BYTE PTR [ecx]
	inc	ecx
	test	edi, edi
	mov	DWORD PTR _pdjhuff_cs, ecx
	pop	edi
	je	SHORT $LN4@PDJHUFF_Re
	mov	DWORD PTR _pdjhuff_isend, 1
$LN4@PDJHUFF_Re:
	mov	ecx, ebx
	pop	ebx
$LN7@PDJHUFF_Re:
	shl	edx, 8
	or	edx, ecx
; Line 397
	sub	esi, 8
	mov	DWORD PTR _pdjhuff_win, edx
	mov	DWORD PTR _pdjhuff_pos, esi
$LN1@PDJHUFF_Re:
	pop	esi
; Line 400
	ret	0
_PDJHUFF_ReadBit ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_ReadNBits
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_ReadNBits
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_n$ = 12						; size = 4
_PDJHUFF_ReadNBits PROC					; COMDAT
; Line 406
	mov	edx, DWORD PTR _n$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _pdjhuff_win
	push	esi
	mov	esi, DWORD PTR _pdjhuff_pos
	mov	ecx, 32					; 00000020H
	sub	ecx, esi
	sub	ecx, edx
	push	edi
	mov	eax, ebx
	shr	eax, cl
	mov	edi, 1
	mov	ecx, edx
	shl	edi, cl
; Line 407
	add	esi, edx
	mov	DWORD PTR _pdjhuff_pos, esi
	dec	edi
	and	eax, edi
; Line 408
	cmp	esi, 8
	jl	SHORT $LN1@PDJHUFF_Re@2
	mov	ecx, DWORD PTR _pdjhuff_cs
	push	ebp
	mov	ebp, DWORD PTR _pdjhuff_isend
$LL2@PDJHUFF_Re@2:
; Line 410
	test	ebp, ebp
	je	SHORT $LN7@PDJHUFF_Re@2
	mov	edx, 255				; 000000ffH
	jmp	SHORT $LN13@PDJHUFF_Re@2
$LN7@PDJHUFF_Re@2:
	movzx	edx, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR _pdjhuff_cs, ecx
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN13@PDJHUFF_Re@2
	movzx	edi, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR _pdjhuff_cs, ecx
	test	edi, edi
	je	SHORT $LN13@PDJHUFF_Re@2
	mov	ebp, 1
	mov	DWORD PTR _pdjhuff_isend, ebp
$LN13@PDJHUFF_Re@2:
	shl	ebx, 8
; Line 411
	sub	esi, 8
	or	ebx, edx
	cmp	esi, 8
	mov	DWORD PTR _pdjhuff_win, ebx
	mov	DWORD PTR _pdjhuff_pos, esi
	jge	SHORT $LL2@PDJHUFF_Re@2
	pop	ebp
$LN1@PDJHUFF_Re@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 414
	ret	0
_PDJHUFF_ReadNBits ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_SkipNBits
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_SkipNBits
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_n$ = 12						; size = 4
_PDJHUFF_SkipNBits PROC					; COMDAT
; Line 417
	push	esi
; Line 418
	mov	esi, DWORD PTR _pdjhuff_pos
	add	esi, DWORD PTR _n$[esp]
; Line 419
	cmp	esi, 8
	mov	DWORD PTR _pdjhuff_pos, esi
	jl	SHORT $LN1@PDJHUFF_Sk
	mov	eax, DWORD PTR _pdjhuff_cs
	push	ebx
	mov	ebx, DWORD PTR _pdjhuff_isend
	push	edi
	mov	edi, DWORD PTR _pdjhuff_win
	npad	7
$LL2@PDJHUFF_Sk:
; Line 421
	test	ebx, ebx
	je	SHORT $LN7@PDJHUFF_Sk
	mov	ecx, 255				; 000000ffH
	jmp	SHORT $LN5@PDJHUFF_Sk
$LN7@PDJHUFF_Sk:
	movzx	ecx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $LN5@PDJHUFF_Sk
	movzx	edx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _pdjhuff_cs, eax
	test	edx, edx
	je	SHORT $LN5@PDJHUFF_Sk
	mov	ebx, 1
	mov	DWORD PTR _pdjhuff_isend, ebx
$LN5@PDJHUFF_Sk:
	shl	edi, 8
; Line 422
	sub	esi, 8
	or	edi, ecx
	cmp	esi, 8
	mov	DWORD PTR _pdjhuff_win, edi
	mov	DWORD PTR _pdjhuff_pos, esi
	jge	SHORT $LL2@PDJHUFF_Sk
	pop	edi
	pop	ebx
$LN1@PDJHUFF_Sk:
	pop	esi
; Line 424
	ret	0
_PDJHUFF_SkipNBits ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_PeekWord
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_PeekWord
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_PDJHUFF_PeekWord PROC					; COMDAT
; Line 429
	mov	eax, DWORD PTR _pdjhuff_win
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR _pdjhuff_pos
	shr	eax, cl
	and	eax, 65535				; 0000ffffH
; Line 431
	ret	0
_PDJHUFF_PeekWord ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_DecodeSymbol
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_DecodeSymbol
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_tab$ = 12						; size = 4
_PDJHUFF_DecodeSymbol PROC				; COMDAT
; Line 437
	shl	DWORD PTR _tab$[esp-4], 8
	push	ebx
; Line 439
	mov	ebx, DWORD PTR _pdjhuff_win
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR _pdjhuff_pos
	push	ebp
	shr	ebx, cl
	push	esi
	push	edi
; Line 440
	mov	edi, DWORD PTR _ctx$[esp+12]
	and	ebx, 65535				; 0000ffffH
	xor	esi, esi
	npad	8
$LL12@PDJHUFF_De:
; Line 442
	mov	eax, esi
	or	eax, DWORD PTR _tab$[esp+12]
	movzx	edx, BYTE PTR [eax+edi+4096]
; Line 443
	test	edx, edx
	je	SHORT $LN4@PDJHUFF_De
; Line 445
	movzx	eax, WORD PTR [edi+eax*2]
	mov	ecx, 16					; 00000010H
	sub	ecx, edx
	mov	ebp, ebx
	sar	ebp, cl
	cmp	ebp, eax
	je	SHORT $LN1@PDJHUFF_De
$LN4@PDJHUFF_De:
; Line 440
	inc	esi
	cmp	esi, 256				; 00000100H
	jl	SHORT $LL12@PDJHUFF_De
	pop	edi
	pop	esi
	pop	ebp
; Line 450
	or	eax, -1
	pop	ebx
; Line 451
	ret	0
$LN1@PDJHUFF_De:
; Line 447
	push	edx
	push	edi
	call	_PDJHUFF_SkipNBits
	add	esp, 8
	pop	edi
; Line 448
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 451
	ret	0
_PDJHUFF_DecodeSymbol ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_DecodeDiffDC
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_DecodeDiffDC
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_tab$ = 12						; size = 4
_PDJHUFF_DecodeDiffDC PROC				; COMDAT
; Line 457
	mov	eax, DWORD PTR _tab$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+4]
	push	eax
	push	edi
	call	_PDJHUFF_DecodeSymbol
	mov	esi, eax
; Line 458
	push	esi
	push	edi
	call	_PDJHUFF_ReadNBits
; Line 460
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, 1
	shl	edx, cl
	add	esp, 16					; 00000010H
	test	edx, eax
	jne	SHORT $LN1@PDJHUFF_De@2
; Line 461
	mov	ecx, esi
	mov	edx, 1
	shl	edx, cl
	mov	ecx, 1
	sub	ecx, edx
	add	eax, ecx
$LN1@PDJHUFF_De@2:
	pop	edi
	pop	esi
; Line 463
	ret	0
_PDJHUFF_DecodeDiffDC ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@BLJIIONI@bad?5dct?5block1?5?$CF02X?5?$CFd?1?$CFd?6?$AA@ ; `string'
PUBLIC	_PDJHUFF_DecodeBlock
EXTRN	__imp__gc_printf:PROC
;	COMDAT ??_C@_0BL@BLJIIONI@bad?5dct?5block1?5?$CF02X?5?$CFd?1?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BL@BLJIIONI@bad?5dct?5block1?5?$CF02X?5?$CFd?1?$CFd?6?$AA@ DB 'bad'
	DB	' dct block1 %02X %d/%d', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PDJHUFF_DecodeBlock
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_dctab$ = 16						; size = 4
_actab$ = 20						; size = 4
_ni$ = 24						; size = 4
_nn$ = 28						; size = 4
_PDJHUFF_DecodeBlock PROC				; COMDAT
; Line 471
	xor	eax, eax
	push	ebx
; Line 473
	mov	ebx, DWORD PTR _ctx$[esp]
	movzx	edx, ax
	push	ebp
	mov	ebp, DWORD PTR _buf$[esp+4]
	push	esi
	push	edi
	mov	eax, edx
	shl	edx, 16					; 00000010H
	or	eax, edx
	lea	edi, DWORD PTR [ebp+2]
	mov	ecx, 31					; 0000001fH
	rep stosd
	stosw
	mov	eax, DWORD PTR _dctab$[esp+12]
	push	eax
	push	ebx
	call	_PDJHUFF_DecodeSymbol
	mov	esi, eax
	push	esi
	push	ebx
	call	_PDJHUFF_ReadNBits
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, 1
	shl	edx, cl
	add	esp, 16					; 00000010H
	test	edx, eax
	jne	SHORT $LN14@PDJHUFF_De@3
	mov	ecx, esi
	mov	edx, 1
	shl	edx, cl
	mov	ecx, 1
	sub	ecx, edx
	add	eax, ecx
$LN14@PDJHUFF_De@3:
	add	WORD PTR [ebp], ax
; Line 474
	mov	edi, 1
$LL8@PDJHUFF_De@3:
; Line 476
	mov	edx, DWORD PTR _actab$[esp+12]
	push	edx
	push	ebx
	call	_PDJHUFF_DecodeSymbol
	add	esp, 8
; Line 477
	test	eax, eax
	jle	SHORT $LN22@PDJHUFF_De@3
; Line 487
	mov	ecx, eax
	sar	ecx, 4
; Line 488
	mov	esi, eax
	add	edi, ecx
	and	esi, 15					; 0000000fH
	je	SHORT $LN7@PDJHUFF_De@3
; Line 491
	push	esi
	push	ebx
	call	_PDJHUFF_ReadNBits
	mov	edx, eax
; Line 492
	lea	ecx, DWORD PTR [esi-1]
	mov	eax, 1
	shl	eax, cl
	add	esp, 8
	test	eax, edx
	jne	SHORT $LN2@PDJHUFF_De@3
; Line 493
	mov	ecx, esi
	mov	eax, 1
	shl	eax, cl
	mov	ecx, 1
	sub	ecx, eax
	add	edx, ecx
$LN2@PDJHUFF_De@3:
; Line 495
	movzx	eax, BYTE PTR _pdjpg_zigzag2[edi]
; Line 496
	mov	WORD PTR [ebp+eax*2], dx
$LN7@PDJHUFF_De@3:
	inc	edi
	cmp	edi, 64					; 00000040H
	jl	SHORT $LL8@PDJHUFF_De@3
$LN4@PDJHUFF_De@3:
; Line 499
	cmp	edi, 64					; 00000040H
; Line 502
	jg	SHORT $LN23@PDJHUFF_De@3
	pop	edi
	pop	esi
	pop	ebp
; Line 505
	xor	eax, eax
	pop	ebx
; Line 506
	ret	0
$LN22@PDJHUFF_De@3:
; Line 479
	jge	SHORT $LN4@PDJHUFF_De@3
$LN23@PDJHUFF_De@3:
; Line 481
	mov	edx, DWORD PTR _nn$[esp+12]
	mov	ecx, DWORD PTR _ni$[esp+12]
	push	edx
	push	ecx
	push	eax
	push	OFFSET ??_C@_0BL@BLJIIONI@bad?5dct?5block1?5?$CF02X?5?$CFd?1?$CFd?6?$AA@
	call	DWORD PTR __imp__gc_printf
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
; Line 482
	or	eax, -1
	pop	ebx
; Line 506
	ret	0
_PDJHUFF_DecodeBlock ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_QuantBlock
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_QuantBlock
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_ibuf$ = 12						; size = 4
_obuf$ = 16						; size = 4
_qid$ = 20						; size = 4
_PDJHUFF_QuantBlock PROC				; COMDAT
; Line 516
	mov	ecx, DWORD PTR _qid$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _ctx$[esp]
	push	esi
	mov	esi, DWORD PTR _ibuf$[esp+4]
	push	edi
	mov	edi, DWORD PTR _obuf$[esp+8]
	shl	ecx, 8
	lea	edx, DWORD PTR [esi+6]
	lea	eax, DWORD PTR [edi+2]
	sub	esi, edi
	lea	ecx, DWORD PTR [ecx+ebx+6424]
	mov	edi, 16					; 00000010H
	npad	6
$LL3@PDJHUFF_Qu:
; Line 517
	movsx	ebx, WORD PTR [edx-6]
	imul	ebx, DWORD PTR [ecx-4]
	sar	ebx, 12					; 0000000cH
	mov	WORD PTR [eax-2], bx
	movsx	ebx, WORD PTR [esi+eax]
	imul	ebx, DWORD PTR [ecx]
	sar	ebx, 12					; 0000000cH
	mov	WORD PTR [eax], bx
	movsx	ebx, WORD PTR [edx-2]
	imul	ebx, DWORD PTR [ecx+4]
	sar	ebx, 12					; 0000000cH
	mov	WORD PTR [eax+2], bx
	movsx	ebx, WORD PTR [edx]
	imul	ebx, DWORD PTR [ecx+8]
	sar	ebx, 12					; 0000000cH
	mov	WORD PTR [eax+4], bx
	add	ecx, 16					; 00000010H
	add	eax, 8
	add	edx, 8
	sub	edi, 1
	jne	SHORT $LL3@PDJHUFF_Qu
	pop	edi
	pop	esi
	pop	ebx
; Line 518
	ret	0
_PDJHUFF_QuantBlock ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_DequantBlock
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_DequantBlock
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_ibuf$ = 12						; size = 4
_obuf$ = 16						; size = 4
_qid$ = 20						; size = 4
_PDJHUFF_DequantBlock PROC				; COMDAT
; Line 522
	push	ebx
; Line 524
	mov	ebx, DWORD PTR _ctx$[esp]
	push	esi
	mov	esi, DWORD PTR _obuf$[esp+4]
	push	edi
	mov	edi, DWORD PTR _ibuf$[esp+8]
	lea	ecx, DWORD PTR [esi+2]
	lea	edx, DWORD PTR [edi+6]
	sub	edi, esi
	mov	esi, DWORD PTR _qid$[esp+8]
	xor	eax, eax
	shl	esi, 6
	lea	esi, DWORD PTR [esi+ebx+6165]
	npad	9
$LL3@PDJHUFF_De@4:
; Line 525
	movzx	ebx, BYTE PTR [esi+eax-1]
	imul	bx, WORD PTR [edx-6]
	mov	WORD PTR [ecx-2], bx
	movzx	ebx, BYTE PTR [esi+eax]
	imul	bx, WORD PTR [edi+ecx]
	mov	WORD PTR [ecx], bx
	movzx	ebx, BYTE PTR [esi+eax+1]
	imul	bx, WORD PTR [edx-2]
	mov	WORD PTR [ecx+2], bx
	movzx	ebx, BYTE PTR [esi+eax+2]
	imul	bx, WORD PTR [edx]
	mov	WORD PTR [ecx+4], bx
	add	eax, 4
	add	ecx, 8
	add	edx, 8
	cmp	eax, 64					; 00000040H
	jl	SHORT $LL3@PDJHUFF_De@4
	pop	edi
	pop	esi
	pop	ebx
; Line 526
	ret	0
_PDJHUFF_DequantBlock ENDP
_TEXT	ENDS
PUBLIC	__real@40b0000000000000
PUBLIC	_PDJPG_SetupQuantTabDivFP
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@40b0000000000000
CONST	SEGMENT
__real@40b0000000000000 DQ 040b0000000000000r	; 4096
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PDJPG_SetupQuantTabDivFP
_TEXT	SEGMENT
tv222 = -4						; size = 4
_ctx$ = 8						; size = 4
_qid$ = 12						; size = 4
_PDJPG_SetupQuantTabDivFP PROC				; COMDAT
; Line 529
	push	ecx
; Line 532
	mov	eax, DWORD PTR _qid$[esp]
	fld	QWORD PTR __real@40b0000000000000
	mov	ecx, DWORD PTR _ctx$[esp]
	push	ebx
	mov	edx, eax
	push	esi
	shl	edx, 8
	xor	esi, esi
	shl	eax, 6
	push	edi
	lea	edi, DWORD PTR [edx+ecx+6420]
	lea	ebx, DWORD PTR [eax+ecx+6164]
$LN3@PDJPG_Setu:
; Line 533
	movzx	eax, BYTE PTR [ebx+esi]
	mov	DWORD PTR tv222[esp+16], eax
	fild	DWORD PTR tv222[esp+16]
	fdivr	ST(0), ST(1)
	call	__ftol2_sse
	mov	DWORD PTR [edi], eax
	inc	esi
	add	edi, 4
	cmp	esi, 64					; 00000040H
	jl	SHORT $LN3@PDJPG_Setu
	pop	edi
	fstp	ST(0)
	pop	esi
	pop	ebx
; Line 534
	pop	ecx
	ret	0
_PDJPG_SetupQuantTabDivFP ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@OBMFHDOH@PDJPG_MarkerSOS?3?5Bad?5Image?6?$AA@ ; `string'
PUBLIC	_PDJPG_MarkerSOS
EXTRN	_malloc:PROC
_BSS	SEGMENT
?dbuf@?1??PDJPG_MarkerSOS@@9@9 DW 0100H DUP (?)		; `PDJPG_MarkerSOS'::`2'::dbuf
_BSS	ENDS
;	COMDAT ??_C@_0BM@OBMFHDOH@PDJPG_MarkerSOS?3?5Bad?5Image?6?$AA@
CONST	SEGMENT
??_C@_0BM@OBMFHDOH@PDJPG_MarkerSOS?3?5Bad?5Image?6?$AA@ DB 'PDJPG_MarkerS'
	DB	'OS: Bad Image', 0aH, 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PDJPG_MarkerSOS
_TEXT	SEGMENT
tv1084 = -132						; size = 4
_s$ = -132						; size = 4
tv1154 = -128						; size = 4
_step$ = -128						; size = 4
_rt$ = -128						; size = 4
tv1160 = -124						; size = 4
_k$ = -120						; size = 4
_n$ = -116						; size = 4
_i$ = -112						; size = 4
_l$ = -108						; size = 4
_cv$ = -104						; size = 4
_ch$ = -100						; size = 4
tv387 = -96						; size = 4
_qid$ = -92						; size = 4
_cdt$ = -88						; size = 4
_cat$ = -84						; size = 4
_yi$ = -80						; size = 16
_wi$ = -64						; size = 16
_xi$ = -48						; size = 16
_ccnt$ = -16						; size = 16
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_PDJPG_MarkerSOS PROC					; COMDAT
; Line 537
	sub	esp, 132				; 00000084H
; Line 552
	mov	eax, DWORD PTR _buf$[esp+128]
	movzx	edx, BYTE PTR [eax+2]
	push	ebx
	push	ebp
	push	esi
; Line 553
	lea	ecx, DWORD PTR [eax+3]
; Line 554
	xor	esi, esi
	push	edi
	mov	DWORD PTR tv387[esp+148], edx
	mov	DWORD PTR _s$[esp+148], ecx
	test	edx, edx
	jle	$LN45@PDJPG_Mark
	mov	edi, DWORD PTR _ctx$[esp+144]
	lea	ebx, DWORD PTR [edi+7684]
	jmp	SHORT $LN25@PDJPG_Mark
	npad	7
$LL49@PDJPG_Mark:
; Line 552
	mov	edi, DWORD PTR _ctx$[esp+144]
$LN25@PDJPG_Mark:
; Line 558
	mov	al, BYTE PTR [ecx+1]
	mov	dl, al
; Line 559
	and	al, 15					; 0000000fH
	mov	BYTE PTR _cat$[esp+esi+148], al
	mov	eax, DWORD PTR [edi+7656]
	shr	dl, 4
; Line 561
	xor	ebp, ebp
	mov	BYTE PTR _cdt$[esp+esi+148], dl
	test	eax, eax
	jle	SHORT $LN20@PDJPG_Mark
	mov	cl, BYTE PTR [ecx]
$LL22@PDJPG_Mark:
; Line 562
	cmp	BYTE PTR [edi+ebp+7464], cl
	je	SHORT $LN35@PDJPG_Mark
	inc	ebp
	cmp	ebp, eax
	jl	SHORT $LL22@PDJPG_Mark
; Line 618
	jmp	SHORT $LN20@PDJPG_Mark
$LN35@PDJPG_Mark:
; Line 565
	mov	al, BYTE PTR [edi+ebp+7496]
	mov	cl, BYTE PTR [edi+ebp+7480]
; Line 566
	mov	dl, BYTE PTR [edi+ebp+7512]
	mov	BYTE PTR _cv$[esp+esi+148], al
; Line 570
	imul	cl
	mov	BYTE PTR _qid$[esp+esi+148], dl
	mov	edx, DWORD PTR [edi+ebp*4+7528]
	mov	DWORD PTR _xi$[esp+esi*4+148], edx
	mov	edx, DWORD PTR [edi+ebp*4+7592]
	mov	BYTE PTR _ch$[esp+esi+148], cl
	mov	DWORD PTR _yi$[esp+esi*4+148], edx
	mov	BYTE PTR _step$[esp+esi+148], al
$LN20@PDJPG_Mark:
; Line 574
	mov	eax, DWORD PTR _xi$[esp+esi*4+148]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
; Line 575
	mov	eax, DWORD PTR _yi$[esp+esi*4+148]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	ecx, 3
	sar	eax, 3
; Line 578
	mov	DWORD PTR _wi$[esp+esi*4+148], ecx
; Line 581
	lea	edi, DWORD PTR [eax+2]
; Line 582
	mov	eax, DWORD PTR _s$[esp+148]
	inc	ecx
	imul	edi, ecx
	movzx	ecx, BYTE PTR [eax]
; Line 584
	mov	edx, edi
	shl	edx, 7
	push	edx
	mov	DWORD PTR [ebx-16], ecx
	mov	DWORD PTR [ebx], ebp
	call	_malloc
; Line 585
	shl	edi, 6
	push	edi
	mov	DWORD PTR [ebx+16], eax
	call	_malloc
; Line 591
	add	DWORD PTR _s$[esp+156], 2
	mov	DWORD PTR [ebx+32], eax
	mov	eax, DWORD PTR _buf$[esp+152]
	movzx	ecx, BYTE PTR [eax+2]
	mov	DWORD PTR _ccnt$[esp+esi*4+156], 0
	inc	esi
	add	esp, 8
	add	ebx, 4
	cmp	esi, ecx
	mov	ecx, DWORD PTR _s$[esp+148]
	jl	$LL49@PDJPG_Mark
$LN45@PDJPG_Mark:
; Line 596
	mov	ebx, DWORD PTR _ctx$[esp+144]
	mov	edi, DWORD PTR [ebx+7660]
; Line 597
	mov	edx, DWORD PTR [ebx+7456]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	lea	eax, DWORD PTR [edx+edi-1]
	cdq
	idiv	edi
	mov	esi, DWORD PTR [ebx+7664]
	add	esi, esi
	add	esi, esi
	add	esi, esi
	add	ecx, 3
; Line 599
	push	ecx
	push	ebx
	mov	edi, eax
	mov	eax, DWORD PTR [ebx+7460]
	lea	eax, DWORD PTR [eax+esi-1]
	cdq
	idiv	esi
	imul	edi, eax
	mov	DWORD PTR _n$[esp+156], edi
	call	_PDJHUFF_InitStream
; Line 601
	xor	eax, eax
	movzx	edx, ax
	mov	eax, edx
	shl	edx, 16					; 00000010H
; Line 603
	xor	ebp, ebp
	or	eax, edx
	add	esp, 8
; Line 604
	cmp	DWORD PTR _n$[esp+148], ebp
	mov	ecx, 128				; 00000080H
	mov	edi, OFFSET ?dbuf@?1??PDJPG_MarkerSOS@@9@9
	rep stosd
	mov	DWORD PTR _rt$[esp+148], ebp
	mov	DWORD PTR _i$[esp+148], ebp
	jle	$LN1@PDJPG_Mark
$LL51@PDJPG_Mark:
; Line 606
	xor	edi, edi
	cmp	DWORD PTR tv387[esp+148], edi
	jle	$LN14@PDJPG_Mark
	lea	eax, DWORD PTR [ebx+7700]
	mov	DWORD PTR tv1084[esp+148], OFFSET ?dbuf@?1??PDJPG_MarkerSOS@@9@9
	mov	DWORD PTR tv1160[esp+148], eax
	npad	2
$LL50@PDJPG_Mark:
; Line 607
	cmp	BYTE PTR _cv$[esp+edi+148], 0
	mov	DWORD PTR _k$[esp+148], 0
	jbe	$LN11@PDJPG_Mark
	movzx	ebx, BYTE PTR _ch$[esp+edi+148]
	npad	8
$LL9@PDJPG_Mark:
; Line 608
	mov	DWORD PTR _l$[esp+148], 0
	test	ebx, ebx
	jle	$LN8@PDJPG_Mark
$LL6@PDJPG_Mark:
; Line 610
	cmp	DWORD PTR _rt$[esp+148], 0
	jl	$LN8@PDJPG_Mark
; Line 612
	mov	ecx, DWORD PTR _wi$[esp+edi*4+148]
	mov	eax, ecx
	cdq
	idiv	ebx
	mov	esi, eax
	mov	eax, ebp
	cdq
	idiv	esi
	mov	esi, ebx
	imul	esi, eax
; Line 614
	add	esi, DWORD PTR _k$[esp+148]
	imul	esi, ecx
; Line 617
	mov	ecx, DWORD PTR _n$[esp+148]
	mov	eax, esi
	add	eax, DWORD PTR _l$[esp+148]
	mov	esi, ebx
	imul	esi, edx
	movzx	edx, BYTE PTR _cat$[esp+edi+148]
	push	ecx
	movzx	ecx, BYTE PTR _cdt$[esp+edi+152]
	add	esi, eax
	push	ebp
	lea	eax, DWORD PTR [edx+edx+1]
	mov	edx, DWORD PTR tv1084[esp+156]
	push	eax
	mov	eax, DWORD PTR _ctx$[esp+156]
	add	ecx, ecx
	push	ecx
	push	edx
	push	eax
	call	_PDJHUFF_DecodeBlock
	add	esp, 24					; 00000018H
	mov	DWORD PTR _rt$[esp+148], eax
; Line 618
	test	eax, eax
	jl	SHORT $LN8@PDJPG_Mark
; Line 620
	movzx	ecx, BYTE PTR _qid$[esp+edi+148]
	mov	edx, DWORD PTR tv1160[esp+148]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _ctx$[esp+144]
	mov	ebp, esi
	push	ecx
	mov	ecx, DWORD PTR tv1084[esp+152]
	shl	ebp, 7
	add	eax, ebp
	push	eax
	push	ecx
	push	edx
	call	_PDJHUFF_DequantBlock
; Line 622
	mov	eax, DWORD PTR tv1160[esp+164]
	shl	esi, 6
	add	esi, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [eax]
	add	eax, ebp
	push	esi
	push	eax
	call	_PDJPG_TransIDCT
	mov	eax, DWORD PTR _l$[esp+172]
	movzx	ecx, BYTE PTR _ch$[esp+edi+172]
	mov	ebp, DWORD PTR _i$[esp+172]
	inc	eax
	add	esp, 24					; 00000018H
	cmp	eax, ecx
	mov	DWORD PTR _l$[esp+148], eax
	jl	$LL6@PDJPG_Mark
$LN8@PDJPG_Mark:
; Line 607
	mov	ecx, DWORD PTR _k$[esp+148]
	movzx	eax, BYTE PTR _cv$[esp+edi+148]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _k$[esp+148], ecx
	jl	$LL9@PDJPG_Mark
	mov	ebx, DWORD PTR _ctx$[esp+144]
$LN11@PDJPG_Mark:
; Line 606
	sub	DWORD PTR tv1084[esp+148], -128		; ffffff80H
	add	DWORD PTR tv1160[esp+148], 4
	inc	edi
	cmp	edi, DWORD PTR tv387[esp+148]
	jl	$LL50@PDJPG_Mark
$LN14@PDJPG_Mark:
; Line 604
	inc	ebp
	cmp	ebp, DWORD PTR _n$[esp+148]
	mov	DWORD PTR _i$[esp+148], ebp
	jl	$LL51@PDJPG_Mark
; Line 626
	cmp	DWORD PTR _rt$[esp+148], 0
	jge	SHORT $LN1@PDJPG_Mark
; Line 628
	push	OFFSET ??_C@_0BM@OBMFHDOH@PDJPG_MarkerSOS?3?5Bad?5Image?6?$AA@
	call	DWORD PTR __imp__gc_printf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
; Line 629
	or	eax, -1
	pop	ebx
; Line 633
	add	esp, 132				; 00000084H
	ret	0
$LN1@PDJPG_Mark:
	pop	edi
	pop	esi
	pop	ebp
; Line 632
	xor	eax, eax
	pop	ebx
; Line 633
	add	esp, 132				; 00000084H
	ret	0
_PDJPG_MarkerSOS ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_MarkerSOF0
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_MarkerSOF0
_TEXT	SEGMENT
_k$ = 8							; size = 4
_ctx$ = 8						; size = 4
_n$ = 12						; size = 4
_buf$ = 12						; size = 4
_PDJPG_MarkerSOF0 PROC					; COMDAT
; Line 643
	mov	eax, DWORD PTR _buf$[esp-4]
	movzx	edx, BYTE PTR [eax+3]
	movzx	ecx, BYTE PTR [eax+4]
	push	ebx
	push	ebp
	push	esi
; Line 646
	movzx	esi, BYTE PTR [eax+5]
	push	edi
	movzx	edi, BYTE PTR [eax+6]
	shl	edx, 8
	shl	esi, 8
	or	edx, ecx
	mov	ecx, DWORD PTR _ctx$[esp+12]
	or	esi, edi
	mov	DWORD PTR [ecx+7456], esi
; Line 647
	mov	DWORD PTR [ecx+7460], edx
; Line 652
	movzx	ebx, BYTE PTR [eax+7]
	xor	edi, edi
	xor	ebp, ebp
	mov	DWORD PTR _n$[esp+12], edi
	mov	DWORD PTR _k$[esp+12], ebx
; Line 653
	lea	esi, DWORD PTR [eax+8]
; Line 654
	test	ebx, ebx
	jle	SHORT $LN6@PDJPG_Mark@2
; Line 643
	lea	eax, DWORD PTR [ecx+7480]
	npad	1
$LL8@PDJPG_Mark@2:
; Line 656
	movzx	edx, BYTE PTR [esi]
	mov	BYTE PTR [eax-16], dl
; Line 657
	movzx	edx, BYTE PTR [esi+1]
	shr	dl, 4
	mov	BYTE PTR [eax], dl
; Line 658
	movzx	edx, BYTE PTR [esi+1]
	and	dl, 15					; 0000000fH
	mov	BYTE PTR [eax+16], dl
; Line 659
	movzx	edx, BYTE PTR [esi+2]
	mov	BYTE PTR [eax+32], dl
; Line 661
	movzx	edx, BYTE PTR [eax]
	cmp	edx, ebp
	jle	SHORT $LN5@PDJPG_Mark@2
	mov	ebp, edx
$LN5@PDJPG_Mark@2:
; Line 662
	movzx	edx, BYTE PTR [eax+16]
	cmp	edx, edi
	jle	SHORT $LN4@PDJPG_Mark@2
	mov	edi, edx
$LN4@PDJPG_Mark@2:
; Line 666
	add	esi, 3
	inc	eax
	sub	ebx, 1
	jne	SHORT $LL8@PDJPG_Mark@2
	mov	ebx, DWORD PTR _k$[esp+12]
	mov	DWORD PTR _n$[esp+12], edi
$LN6@PDJPG_Mark@2:
; Line 669
	mov	DWORD PTR [ecx+7660], ebp
; Line 670
	mov	DWORD PTR [ecx+7664], edi
; Line 672
	test	ebx, ebx
	jle	SHORT $LN15@PDJPG_Mark@2
	lea	edi, DWORD PTR [ecx+7496]
	lea	esi, DWORD PTR [ecx+7592]
$LL3@PDJPG_Mark@2:
; Line 674
	movzx	eax, BYTE PTR [edi-16]
	imul	eax, DWORD PTR [ecx+7456]
	cdq
	idiv	ebp
	add	esi, 4
	inc	edi
	mov	DWORD PTR [esi-68], eax
; Line 675
	movzx	eax, BYTE PTR [edi-1]
	imul	eax, DWORD PTR [ecx+7460]
	cdq
	idiv	DWORD PTR _n$[esp+12]
	sub	ebx, 1
	mov	DWORD PTR [esi-4], eax
	jne	SHORT $LL3@PDJPG_Mark@2
; Line 678
	mov	eax, DWORD PTR _k$[esp+12]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+7656], eax
; Line 680
	xor	eax, eax
	pop	ebx
; Line 681
	ret	0
$LN15@PDJPG_Mark@2:
	pop	edi
	pop	esi
	pop	ebp
; Line 678
	mov	DWORD PTR [ecx+7656], ebx
; Line 680
	xor	eax, eax
	pop	ebx
; Line 681
	ret	0
_PDJPG_MarkerSOF0 ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_MarkerDQT
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_MarkerDQT
_TEXT	SEGMENT
_s$ = -8						; size = 4
_se$ = -4						; size = 4
_ctx$ = 8						; size = 4
tv499 = 12						; size = 4
_buf$ = 12						; size = 4
_PDJPG_MarkerDQT PROC					; COMDAT
; Line 684
	sub	esp, 8
; Line 690
	mov	edx, DWORD PTR _buf$[esp+4]
; Line 691
	movzx	ecx, BYTE PTR [edx]
	push	ebx
	push	ebp
	push	esi
	movzx	esi, BYTE PTR [edx+1]
	shl	ecx, 8
	or	ecx, esi
	lea	eax, DWORD PTR [edx+2]
	add	ecx, edx
	push	edi
	mov	DWORD PTR _s$[esp+24], eax
	mov	DWORD PTR _se$[esp+24], ecx
; Line 693
	cmp	eax, ecx
	jae	$LN5@PDJPG_Mark@3
	mov	edi, DWORD PTR _ctx$[esp+20]
	mov	ebp, OFFSET _pdjpg_zigzag2+1
	sub	ebp, eax
	npad	9
$LL6@PDJPG_Mark@3:
; Line 695
	mov	cl, BYTE PTR [eax]
; Line 696
	test	cl, 240					; 000000f0H
	jne	$LN11@PDJPG_Mark@3
; Line 701
	movzx	ecx, cl
	and	ecx, 15					; 0000000fH
	shl	ecx, 6
	mov	esi, OFFSET _pdjpg_zigzag2+1
	add	eax, 2
	mov	DWORD PTR tv499[esp+20], 16		; 00000010H
$LL3@PDJPG_Mark@3:
; Line 705
	movzx	edx, BYTE PTR [esi-1]
	movzx	ebx, BYTE PTR [eax-1]
	add	edx, ecx
	mov	BYTE PTR [edx+edi+6164], bl
	movzx	edx, BYTE PTR [esi]
	movzx	ebx, BYTE PTR [eax]
	add	edx, ecx
	mov	BYTE PTR [edx+edi+6164], bl
	movzx	edx, BYTE PTR [eax+ebp-1]
	movzx	ebx, BYTE PTR [eax+1]
	add	edx, ecx
	mov	BYTE PTR [edx+edi+6164], bl
	movzx	edx, BYTE PTR [eax+ebp]
	movzx	ebx, BYTE PTR [eax+2]
	add	edx, ecx
	add	eax, 4
	add	esi, 4
	sub	DWORD PTR tv499[esp+20], 1
	mov	BYTE PTR [edx+edi+6164], bl
	jne	SHORT $LL3@PDJPG_Mark@3
; Line 706
	mov	eax, DWORD PTR _s$[esp+24]
	add	eax, 65					; 00000041H
	sub	ebp, 65					; 00000041H
	mov	DWORD PTR _s$[esp+24], eax
	cmp	eax, DWORD PTR _se$[esp+24]
	jb	$LL6@PDJPG_Mark@3
$LN5@PDJPG_Mark@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 709
	xor	eax, eax
	pop	ebx
; Line 710
	add	esp, 8
	ret	0
$LN11@PDJPG_Mark@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 699
	or	eax, -1
	pop	ebx
; Line 710
	add	esp, 8
	ret	0
_PDJPG_MarkerDQT ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_MarkerDHT
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_MarkerDHT
_TEXT	SEGMENT
tv295 = -17						; size = 1
tv234 = -16						; size = 4
tv249 = -12						; size = 4
tv296 = -8						; size = 4
_tn$ = -4						; size = 4
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_PDJPG_MarkerDHT PROC					; COMDAT
; Line 713
	sub	esp, 20					; 00000014H
; Line 720
	mov	edx, DWORD PTR _ctx$[esp+16]
	push	ebx
; Line 723
	mov	ebx, DWORD PTR _buf$[esp+20]
	movzx	eax, BYTE PTR [ebx+2]
	push	ebp
	mov	ecx, eax
	push	esi
	shr	eax, 4
	push	edi
	and	ecx, 15					; 0000000fH
	lea	ebp, DWORD PTR [eax+ecx*2]
	lea	edi, DWORD PTR [ebp+16]
	shl	edi, 8
; Line 726
	push	256					; 00000100H
	lea	eax, DWORD PTR [edi+edx]
	push	0
	push	eax
	mov	DWORD PTR _tn$[esp+48], ebp
	mov	DWORD PTR tv234[esp+48], edi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 730
	xor	ecx, ecx
	lea	eax, DWORD PTR [ebx+19]
; Line 731
	xor	edx, edx
$LL6@PDJPG_Mark@4:
; Line 733
	add	ecx, ecx
; Line 734
	xor	esi, esi
	cmp	BYTE PTR [ebx+edx+3], 0
	jbe	SHORT $LN5@PDJPG_Mark@4
	shl	ebp, 8
	mov	bl, dl
	inc	bl
	mov	DWORD PTR tv249[esp+36], ebp
	mov	BYTE PTR tv295[esp+36], bl
	jmp	SHORT $LN3@PDJPG_Mark@4
$LL18@PDJPG_Mark@4:
	mov	ebp, DWORD PTR tv249[esp+36]
$LN3@PDJPG_Mark@4:
; Line 736
	movzx	ebx, BYTE PTR [eax]
	add	ebx, ebp
	mov	ebp, DWORD PTR _ctx$[esp+32]
	mov	WORD PTR [ebp+ebx*2], cx
; Line 737
	movzx	ebx, BYTE PTR [eax]
	inc	ecx
	add	ebx, edi
	mov	DWORD PTR tv296[esp+36], ecx
	mov	cl, BYTE PTR tv295[esp+36]
	mov	edi, ebp
	mov	BYTE PTR [ebx+edi], cl
	mov	ebx, DWORD PTR _buf$[esp+32]
	movzx	edi, BYTE PTR [ebx+edx+3]
	mov	ecx, DWORD PTR tv296[esp+36]
	inc	esi
; Line 739
	inc	eax
	cmp	esi, edi
	mov	edi, DWORD PTR tv234[esp+36]
	jl	SHORT $LL18@PDJPG_Mark@4
; Line 734
	mov	ebp, DWORD PTR _tn$[esp+36]
$LN5@PDJPG_Mark@4:
; Line 731
	inc	edx
	cmp	edx, 16					; 00000010H
	jl	SHORT $LL6@PDJPG_Mark@4
	pop	edi
	pop	esi
	pop	ebp
; Line 744
	xor	eax, eax
	pop	ebx
; Line 745
	add	esp, 20					; 00000014H
	ret	0
_PDJPG_MarkerDHT ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_MarkerAPP0
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_MarkerAPP0
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_PDJPG_MarkerAPP0 PROC					; COMDAT
; Line 749
	ret	0
_PDJPG_MarkerAPP0 ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_GetComponentPixel
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_GetComponentPixel
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_cn$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_PDJPG_GetComponentPixel PROC				; COMDAT
; Line 767
	push	ebx
; Line 773
	mov	ebx, DWORD PTR _cn$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _ctx$[esp+8]
	fld	DWORD PTR [edi+ebx*4+7764]
	fimul	DWORD PTR _x$[esp+8]
	call	__ftol2_sse
; Line 774
	fld	DWORD PTR [edi+ebx*4+7780]
	fimul	DWORD PTR _y$[esp+8]
	mov	esi, eax
	call	__ftol2_sse
; Line 778
	mov	ecx, eax
	sar	ecx, 3
; Line 792
	imul	ecx, DWORD PTR [edi+ebx*4+7732]
	mov	edx, esi
	sar	edx, 3
	add	ecx, edx
	and	eax, 7
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR [edi+ebx*4+7716]
	and	esi, 7
	lea	edx, DWORD PTR [ecx+eax*8]
	movzx	eax, BYTE PTR [edx+esi]
	pop	edi
	pop	esi
	pop	ebx
; Line 793
	ret	0
_PDJPG_GetComponentPixel ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_Free
EXTRN	_free:PROC
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_Free
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_PDJPG_Free PROC					; COMDAT
; Line 916
	mov	eax, DWORD PTR _buf$[esp-4]
	test	eax, eax
	je	SHORT $LN2@PDJPG_Free
; Line 917
	mov	DWORD PTR _buf$[esp-4], eax
	jmp	_free
$LN2@PDJPG_Free:
; Line 918
	ret	0
_PDJPG_Free ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_WriteBit
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_WriteBit
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_i$ = 12						; size = 4
_PDJHUFF_WriteBit PROC					; COMDAT
; Line 936
	mov	edx, DWORD PTR _pdjhuff_pos
	mov	eax, DWORD PTR _pdjhuff_win
	push	esi
	mov	esi, DWORD PTR _i$[esp]
	mov	ecx, 31					; 0000001fH
	sub	ecx, edx
	shl	esi, cl
; Line 937
	mov	ecx, 1
	add	edx, ecx
	mov	DWORD PTR _pdjhuff_pos, edx
	or	eax, esi
; Line 938
	cmp	edx, 8
	mov	DWORD PTR _pdjhuff_win, eax
	pop	esi
	jl	SHORT $LN2@PDJHUFF_Wr
; Line 941
	mov	edx, DWORD PTR _pdjhuff_ct
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [edx], al
	add	DWORD PTR _pdjhuff_ct, ecx
; Line 942
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN1@PDJHUFF_Wr
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 0
	add	DWORD PTR _pdjhuff_ct, ecx
$LN1@PDJHUFF_Wr:
; Line 943
	shl	DWORD PTR _pdjhuff_win, 8
; Line 944
	sub	DWORD PTR _pdjhuff_pos, 8
$LN2@PDJHUFF_Wr:
; Line 946
	ret	0
_PDJHUFF_WriteBit ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_WriteNBits
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_WriteNBits
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_i$ = 12						; size = 4
_n$ = 16						; size = 4
_PDJHUFF_WriteNBits PROC				; COMDAT
; Line 950
	mov	edx, DWORD PTR _n$[esp-4]
; Line 952
	mov	eax, DWORD PTR _pdjhuff_win
	push	ebx
	push	esi
	mov	esi, DWORD PTR _pdjhuff_pos
	push	edi
	mov	edi, 1
	mov	ecx, edx
	mov	ebx, edi
	shl	ebx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, esi
	sub	ecx, edx
	sub	ebx, edi
	and	ebx, DWORD PTR _i$[esp+8]
; Line 953
	add	esi, edx
	shl	ebx, cl
	mov	DWORD PTR _pdjhuff_pos, esi
	or	eax, ebx
; Line 954
	cmp	esi, 8
	mov	DWORD PTR _pdjhuff_win, eax
	jl	SHORT $LN2@PDJHUFF_Wr@2
$LL3@PDJHUFF_Wr@2:
; Line 957
	mov	ecx, DWORD PTR _pdjhuff_ct
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ecx], al
	add	DWORD PTR _pdjhuff_ct, edi
; Line 958
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN1@PDJHUFF_Wr@2
	mov	edx, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [edx], 0
	add	DWORD PTR _pdjhuff_ct, edi
$LN1@PDJHUFF_Wr@2:
; Line 960
	mov	ecx, DWORD PTR _pdjhuff_pos
	mov	eax, DWORD PTR _pdjhuff_win
	sub	ecx, 8
	shl	eax, 8
	cmp	ecx, 8
	mov	DWORD PTR _pdjhuff_win, eax
	mov	DWORD PTR _pdjhuff_pos, ecx
	jge	SHORT $LL3@PDJHUFF_Wr@2
$LN2@PDJHUFF_Wr@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 962
	ret	0
_PDJHUFF_WriteNBits ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_FlushBits
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_FlushBits
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_PDJHUFF_FlushBits PROC					; COMDAT
; Line 967
	cmp	DWORD PTR _pdjhuff_pos, 0
	jle	SHORT $LN2@PDJHUFF_Fl
	mov	eax, DWORD PTR _pdjhuff_win
	mov	edx, 1
$LL3@PDJHUFF_Fl:
; Line 970
	mov	ecx, DWORD PTR _pdjhuff_ct
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [ecx], al
	add	DWORD PTR _pdjhuff_ct, edx
; Line 971
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN1@PDJHUFF_Fl
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 0
	add	DWORD PTR _pdjhuff_ct, edx
$LN1@PDJHUFF_Fl:
; Line 973
	mov	ecx, DWORD PTR _pdjhuff_pos
	mov	eax, DWORD PTR _pdjhuff_win
	sub	ecx, 8
	shl	eax, 8
	mov	DWORD PTR _pdjhuff_win, eax
	mov	DWORD PTR _pdjhuff_pos, ecx
	test	ecx, ecx
	jg	SHORT $LL3@PDJHUFF_Fl
$LN2@PDJHUFF_Fl:
; Line 975
	ret	0
_PDJHUFF_FlushBits ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_WriteString
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_WriteString
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_PDJHUFF_WriteString PROC				; COMDAT
; Line 980
	mov	eax, DWORD PTR _ctx$[esp-4]
	push	eax
	call	_PDJHUFF_FlushBits
; Line 982
	mov	ecx, DWORD PTR _str$[esp]
; Line 983
	mov	al, BYTE PTR [ecx]
	add	esp, 4
	test	al, al
	je	SHORT $LN7@PDJHUFF_Wr@3
	mov	edx, 1
	push	esi
	npad	3
$LL2@PDJHUFF_Wr@3:
; Line 984
	mov	esi, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [esi], al
	add	DWORD PTR _pdjhuff_ct, edx
	mov	al, BYTE PTR [ecx+edx]
	add	ecx, edx
	test	al, al
	jne	SHORT $LL2@PDJHUFF_Wr@3
; Line 985
	mov	ecx, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [ecx], al
	add	DWORD PTR _pdjhuff_ct, edx
	pop	esi
; Line 986
	ret	0
$LN7@PDJHUFF_Wr@3:
; Line 985
	mov	edx, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [edx], 0
	inc	DWORD PTR _pdjhuff_ct
; Line 986
	ret	0
_PDJHUFF_WriteString ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_BalanceTree_r
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_BalanceTree_r
_TEXT	SEGMENT
_nodes$ = 8						; size = 4
_nlen$ = 12						; size = 4
_h1$ = 16						; size = 4
_root$ = 16						; size = 4
_h$ = 20						; size = 4
_ml$ = 24						; size = 4
_PDJHUFF_BalanceTree_r PROC				; COMDAT
; Line 989
	push	edi
; Line 993
	mov	edi, DWORD PTR _root$[esp]
	test	edi, edi
	jge	SHORT $LN6@PDJHUFF_Ba
	xor	eax, eax
	pop	edi
; Line 1043
	ret	0
$LN6@PDJHUFF_Ba:
; Line 995
	mov	eax, DWORD PTR _ml$[esp]
	mov	edx, DWORD PTR _nlen$[esp]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _h$[esp+8]
	push	esi
	mov	esi, DWORD PTR _nodes$[esp+12]
	movsx	ecx, WORD PTR [esi+edi*4]
	push	eax
	inc	ebp
	push	ebp
	push	ecx
	push	edx
	push	esi
	call	_PDJHUFF_BalanceTree_r
; Line 996
	movsx	ecx, WORD PTR [esi+edi*4+2]
	mov	DWORD PTR _h1$[esp+32], eax
	mov	eax, DWORD PTR _ml$[esp+32]
	push	eax
	lea	ebx, DWORD PTR [esi+edi*4+2]
	push	ebp
	mov	ebp, DWORD PTR _nlen$[esp+40]
	push	ecx
	push	ebp
	push	esi
	call	_PDJHUFF_BalanceTree_r
; Line 997
	mov	ecx, DWORD PTR _h1$[esp+52]
	add	esp, 40					; 00000028H
	cmp	ecx, eax
	jg	SHORT $LN10@PDJHUFF_Ba
	mov	ecx, eax
$LN10@PDJHUFF_Ba:
; Line 1000
	mov	edx, DWORD PTR _h$[esp+12]
	inc	ecx
	add	edx, ecx
	cmp	edx, DWORD PTR _ml$[esp+12]
	mov	WORD PTR [ebp+edi*2], cx
; Line 1001
	jle	$LN2@PDJHUFF_Ba
; Line 1004
	mov	edx, DWORD PTR _h1$[esp+12]
	inc	edx
	cmp	edx, eax
	jge	SHORT $LN4@PDJHUFF_Ba
; Line 1006
	movsx	eax, WORD PTR [ebx]
; Line 1008
	movzx	edx, WORD PTR [esi+eax*4]
	movsx	ecx, WORD PTR [esi+eax*4+2]
	mov	WORD PTR [esi+eax*4+2], dx
; Line 1009
	movzx	edx, WORD PTR [esi+edi*4]
	mov	WORD PTR [esi+eax*4], dx
; Line 1010
	mov	WORD PTR [esi+edi*4], ax
; Line 1011
	mov	WORD PTR [ebx], cx
	jmp	SHORT $LN1@PDJHUFF_Ba
$LN4@PDJHUFF_Ba:
; Line 1012
	inc	eax
	cmp	eax, DWORD PTR _h1$[esp+12]
	jge	$LN2@PDJHUFF_Ba
; Line 1014
	movsx	eax, WORD PTR [esi+edi*4]
; Line 1016
	movzx	edx, WORD PTR [esi+eax*4+2]
	movsx	ecx, WORD PTR [esi+eax*4]
	mov	WORD PTR [esi+eax*4], dx
; Line 1017
	movzx	edx, WORD PTR [ebx]
	mov	WORD PTR [esi+eax*4+2], dx
; Line 1018
	mov	WORD PTR [esi+edi*4], cx
; Line 1019
	mov	WORD PTR [ebx], ax
$LN1@PDJHUFF_Ba:
; Line 1027
	movsx	ecx, WORD PTR [esi+eax*4]
; Line 1028
	movsx	edx, WORD PTR [esi+eax*4+2]
; Line 1029
	test	ecx, ecx
	jge	SHORT $LN11@PDJHUFF_Ba
	mov	DWORD PTR _h1$[esp+12], 0
	jmp	SHORT $LN12@PDJHUFF_Ba
$LN11@PDJHUFF_Ba:
	movsx	ecx, WORD PTR [ebp+ecx*2]
	mov	DWORD PTR _h1$[esp+12], ecx
$LN12@PDJHUFF_Ba:
; Line 1030
	test	edx, edx
	jge	SHORT $LN13@PDJHUFF_Ba
	xor	ecx, ecx
	jmp	SHORT $LN14@PDJHUFF_Ba
$LN13@PDJHUFF_Ba:
	movsx	ecx, WORD PTR [ebp+edx*2]
$LN14@PDJHUFF_Ba:
; Line 1031
	mov	edx, DWORD PTR _h1$[esp+12]
	cmp	edx, ecx
	jle	SHORT $LN15@PDJHUFF_Ba
	mov	ecx, edx
$LN15@PDJHUFF_Ba:
	inc	ecx
; Line 1032
	mov	WORD PTR [ebp+eax*2], cx
; Line 1035
	movsx	eax, WORD PTR [esi+edi*4]
; Line 1036
	movsx	ecx, WORD PTR [ebx]
; Line 1037
	test	eax, eax
	jge	SHORT $LN17@PDJHUFF_Ba
	xor	edx, edx
	jmp	SHORT $LN18@PDJHUFF_Ba
$LN17@PDJHUFF_Ba:
	movsx	edx, WORD PTR [ebp+eax*2]
$LN18@PDJHUFF_Ba:
; Line 1038
	test	ecx, ecx
	jge	SHORT $LN19@PDJHUFF_Ba
	xor	eax, eax
	jmp	SHORT $LN20@PDJHUFF_Ba
$LN19@PDJHUFF_Ba:
	movsx	eax, WORD PTR [ebp+ecx*2]
$LN20@PDJHUFF_Ba:
; Line 1039
	cmp	edx, eax
	jle	SHORT $LN21@PDJHUFF_Ba
	mov	eax, edx
$LN21@PDJHUFF_Ba:
	pop	esi
	inc	eax
; Line 1040
	mov	WORD PTR [ebp+edi*2], ax
	pop	ebp
	pop	ebx
	pop	edi
; Line 1043
	ret	0
$LN2@PDJHUFF_Ba:
	pop	esi
	pop	ebp
	pop	ebx
; Line 1023
	mov	eax, ecx
	pop	edi
; Line 1043
	ret	0
_PDJHUFF_BalanceTree_r ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_CalcLengths_r
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_CalcLengths_r
_TEXT	SEGMENT
_nodes$ = 8						; size = 4
_cl$ = 12						; size = 4
_root$ = 16						; size = 4
_h$ = 20						; size = 4
_PDJHUFF_CalcLengths_r PROC				; COMDAT
; Line 1047
	mov	eax, DWORD PTR _h$[esp-4]
	push	ebp
	mov	ebp, DWORD PTR _cl$[esp]
	push	esi
	mov	esi, DWORD PTR _root$[esp+4]
	test	esi, esi
	jl	SHORT $LN8@PDJHUFF_Ca
	push	ebx
	mov	ebx, DWORD PTR _nodes$[esp+8]
	push	edi
$LL5@PDJHUFF_Ca:
	lea	edi, DWORD PTR [eax+1]
; Line 1054
	movsx	eax, WORD PTR [ebx+esi*4]
	push	edi
	push	eax
	push	ebp
	push	ebx
	call	_PDJHUFF_CalcLengths_r
; Line 1055
	movsx	esi, WORD PTR [ebx+esi*4+2]
	add	esp, 16					; 00000010H
	mov	eax, edi
	test	esi, esi
	jge	SHORT $LL5@PDJHUFF_Ca
	pop	edi
	pop	ebx
$LN8@PDJHUFF_Ca:
; Line 1049
	cmp	esi, -513				; fffffdffH
	je	SHORT $LN3@PDJHUFF_Ca
; Line 1050
	sub	ebp, esi
	mov	BYTE PTR [ebp-1], al
$LN3@PDJHUFF_Ca:
	pop	esi
	pop	ebp
; Line 1056
	ret	0
_PDJHUFF_CalcLengths_r ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_BuildLengths
_BSS	SEGMENT
?nlen@?1??PDJHUFF_BuildLengths@@9@9 DW 0200H DUP (?)	; `PDJHUFF_BuildLengths'::`2'::nlen
?nodes@?1??PDJHUFF_BuildLengths@@9@9 DW 0400H DUP (?)	; `PDJHUFF_BuildLengths'::`2'::nodes
?clen@?1??PDJHUFF_BuildLengths@@9@9 DW 0200H DUP (?)	; `PDJHUFF_BuildLengths'::`2'::clen
?cnts@?1??PDJHUFF_BuildLengths@@9@9 DD 0200H DUP (?)	; `PDJHUFF_BuildLengths'::`2'::cnts
?roots@?1??PDJHUFF_BuildLengths@@9@9 DW 0200H DUP (?)	; `PDJHUFF_BuildLengths'::`2'::roots
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _PDJHUFF_BuildLengths
_TEXT	SEGMENT
_nn$ = -4						; size = 4
_stat$ = 8						; size = 4
tv540 = 12						; size = 4
_nc$ = 12						; size = 4
_cl$ = 16						; size = 4
_ml$ = 20						; size = 4
_PDJHUFF_BuildLengths PROC				; COMDAT
; Line 1059
	push	ecx
; Line 1067
	mov	ecx, DWORD PTR _nc$[esp]
	push	ebx
	push	ebp
	push	esi
	xor	ebx, ebx
	xor	esi, esi
	xor	eax, eax
	cmp	ecx, ebx
	push	edi
	mov	DWORD PTR _nn$[esp+20], ebx
	jle	SHORT $LN23@PDJHUFF_Bu
	mov	edx, DWORD PTR _stat$[esp+16]
	npad	5
$LL25@PDJHUFF_Bu:
; Line 1069
	cmp	DWORD PTR [edx+eax*4], ebx
	je	SHORT $LN24@PDJHUFF_Bu
; Line 1070
	or	edi, -1
	sub	edi, eax
	mov	WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9[esi*2], di
; Line 1071
	mov	edi, DWORD PTR [edx+eax*4]
	mov	DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[esi*4], edi
; Line 1072
	xor	edi, edi
	mov	WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9[esi*2], di
; Line 1073
	inc	esi
$LN24@PDJHUFF_Bu:
	inc	eax
	cmp	eax, ecx
	jl	SHORT $LL25@PDJHUFF_Bu
$LN23@PDJHUFF_Bu:
; Line 1082
	mov	ebp, DWORD PTR _cl$[esp+16]
	xor	edx, edx
	mov	eax, -513				; fffffdffH
	mov	WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9[esi*2], ax
	mov	DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[esi*4], ebx
	mov	WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9[esi*2], dx
	inc	esi
	cmp	ecx, ebx
	jle	SHORT $LN21@PDJHUFF_Bu
	push	ecx
	push	ebx
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH
$LN21@PDJHUFF_Bu:
; Line 1083
	cmp	esi, ebx
	jne	SHORT $LN36@PDJHUFF_Bu
	pop	edi
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 1139
	pop	ecx
	ret	0
$LN36@PDJHUFF_Bu:
; Line 1086
	cmp	esi, 1
	jle	$LN16@PDJHUFF_Bu
	npad	12
$LL17@PDJHUFF_Bu:
; Line 1088
	mov	eax, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9
	cmp	eax, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9+4
	jl	SHORT $LN15@PDJHUFF_Bu
	xor	edx, edx
	lea	ecx, DWORD PTR [edx+1]
	jmp	SHORT $LN14@PDJHUFF_Bu
$LN15@PDJHUFF_Bu:
; Line 1089
	mov	edx, 1
	xor	ecx, ecx
$LN14@PDJHUFF_Bu:
; Line 1090
	mov	eax, 2
	cmp	esi, eax
	jle	SHORT $LN11@PDJHUFF_Bu
	lea	edi, DWORD PTR [edx*4]
	mov	ebp, 8
	mov	DWORD PTR tv540[esp+16], edi
	npad	12
$LL13@PDJHUFF_Bu:
; Line 1092
	mov	ebx, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[ebp]
	lea	edi, DWORD PTR [ecx*4]
	cmp	ebx, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[edi]
	jg	SHORT $LN10@PDJHUFF_Bu
; Line 1094
	mov	edx, ecx
	mov	DWORD PTR tv540[esp+16], edi
	mov	ecx, eax
; Line 1095
	jmp	SHORT $LN12@PDJHUFF_Bu
$LN10@PDJHUFF_Bu:
; Line 1097
	mov	edi, DWORD PTR tv540[esp+16]
	cmp	ebx, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[edi]
	jg	SHORT $LN12@PDJHUFF_Bu
; Line 1099
	mov	edx, eax
	mov	DWORD PTR tv540[esp+16], ebp
$LN12@PDJHUFF_Bu:
	inc	eax
	add	ebp, 4
	cmp	eax, esi
	jl	SHORT $LL13@PDJHUFF_Bu
; Line 1090
	mov	ebx, DWORD PTR _nn$[esp+20]
$LN11@PDJHUFF_Bu:
; Line 1104
	movzx	eax, WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9[edx*2]
	movzx	edi, WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9[ecx*2]
	cmp	ax, di
	cwde
	jg	SHORT $LN29@PDJHUFF_Bu
	movsx	eax, di
$LN29@PDJHUFF_Bu:
; Line 1105
	movzx	edi, WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9[edx*2]
	mov	WORD PTR ?nodes@?1??PDJHUFF_BuildLengths@@9@9[ebx*4], di
; Line 1106
	movzx	edi, WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9[ecx*2]
	mov	WORD PTR ?nodes@?1??PDJHUFF_BuildLengths@@9@9[ebx*4+2], di
; Line 1109
	mov	edi, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[ecx*4]
	add	edi, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[edx*4]
	inc	eax
	mov	WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9[esi*2], bx
	mov	DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[esi*4], edi
; Line 1110
	mov	WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9[esi*2], ax
	mov	WORD PTR ?nlen@?1??PDJHUFF_BuildLengths@@9@9[ebx*2], ax
; Line 1114
	inc	ebx
	inc	esi
; Line 1116
	xor	edi, edi
; Line 1117
	xor	eax, eax
	mov	DWORD PTR _nn$[esp+20], ebx
	test	esi, esi
	jle	SHORT $LN6@PDJHUFF_Bu
$LL8@PDJHUFF_Bu:
; Line 1119
	cmp	eax, edx
	je	SHORT $LN7@PDJHUFF_Bu
	cmp	eax, ecx
	je	SHORT $LN7@PDJHUFF_Bu
; Line 1120
	mov	bp, WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9[eax*2]
	mov	WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9[edi*2], bp
; Line 1121
	mov	ebp, DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[eax*4]
	mov	DWORD PTR ?cnts@?1??PDJHUFF_BuildLengths@@9@9[edi*4], ebp
; Line 1122
	mov	bp, WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9[eax*2]
	mov	WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9[edi*2], bp
; Line 1123
	inc	edi
$LN7@PDJHUFF_Bu:
	inc	eax
	cmp	eax, esi
	jl	SHORT $LL8@PDJHUFF_Bu
$LN6@PDJHUFF_Bu:
; Line 1086
	cmp	edi, 1
; Line 1125
	mov	esi, edi
	jg	$LL17@PDJHUFF_Bu
; Line 1086
	mov	ebp, DWORD PTR _cl$[esp+16]
$LN16@PDJHUFF_Bu:
; Line 1128
	movsx	esi, WORD PTR ?roots@?1??PDJHUFF_BuildLengths@@9@9
; Line 1130
	movsx	eax, WORD PTR ?clen@?1??PDJHUFF_BuildLengths@@9@9
; Line 1132
	mov	ebx, DWORD PTR _ml$[esp+16]
	mov	edi, 4
$LL3@PDJHUFF_Bu:
; Line 1133
	dec	edi
	cmp	eax, ebx
	jle	SHORT $LN49@PDJHUFF_Bu
; Line 1134
	push	ebx
	push	0
	push	esi
	push	OFFSET ?nlen@?1??PDJHUFF_BuildLengths@@9@9
	push	OFFSET ?nodes@?1??PDJHUFF_BuildLengths@@9@9
	call	_PDJHUFF_BalanceTree_r
	add	esp, 20					; 00000014H
	test	edi, edi
	jne	SHORT $LL3@PDJHUFF_Bu
; Line 1135
	cmp	eax, ebx
	jle	SHORT $LN49@PDJHUFF_Bu
	lea	eax, DWORD PTR [edi-2]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1139
	pop	ecx
	ret	0
$LN49@PDJHUFF_Bu:
; Line 1137
	test	esi, esi
	jge	SHORT $LN31@PDJHUFF_Bu
	cmp	esi, -513				; fffffdffH
	je	SHORT $LN32@PDJHUFF_Bu
	sub	ebp, esi
	pop	edi
	pop	esi
	mov	BYTE PTR [ebp-1], 0
	pop	ebp
; Line 1138
	xor	eax, eax
	pop	ebx
; Line 1139
	pop	ecx
	ret	0
; Line 1137
$LN31@PDJHUFF_Bu:
	movsx	ecx, WORD PTR ?nodes@?1??PDJHUFF_BuildLengths@@9@9[esi*4]
	push	1
	push	ecx
	push	ebp
	push	OFFSET ?nodes@?1??PDJHUFF_BuildLengths@@9@9
	call	_PDJHUFF_CalcLengths_r
	movsx	edx, WORD PTR ?nodes@?1??PDJHUFF_BuildLengths@@9@9[esi*4+2]
	push	1
	push	edx
	push	ebp
	push	OFFSET ?nodes@?1??PDJHUFF_BuildLengths@@9@9
	call	_PDJHUFF_CalcLengths_r
	add	esp, 32					; 00000020H
$LN32@PDJHUFF_Bu:
	pop	edi
	pop	esi
	pop	ebp
; Line 1138
	xor	eax, eax
	pop	ebx
; Line 1139
	pop	ecx
	ret	0
_PDJHUFF_BuildLengths ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_EncodeSymbol
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_EncodeSymbol
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_tab$ = 12						; size = 4
_v$ = 16						; size = 4
_PDJHUFF_EncodeSymbol PROC				; COMDAT
; Line 1144
	mov	eax, DWORD PTR _tab$[esp-4]
; Line 1145
	mov	ecx, DWORD PTR _ctx$[esp-4]
	shl	eax, 8
	or	eax, DWORD PTR _v$[esp-4]
	mov	DWORD PTR _ctx$[esp-4], ecx
	movzx	edx, BYTE PTR [eax+ecx+4096]
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _v$[esp-4], edx
	mov	DWORD PTR _tab$[esp-4], eax
	jmp	_PDJHUFF_WriteNBits
_PDJHUFF_EncodeSymbol ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_EncodeVal
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_EncodeVal
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_tab$ = 12						; size = 4
_z$ = 16						; size = 4
_v$ = 20						; size = 4
_PDJHUFF_EncodeVal PROC					; COMDAT
; Line 1149
	push	esi
; Line 1152
	mov	esi, DWORD PTR _v$[esp]
	test	esi, esi
	jne	SHORT $LN6@PDJHUFF_En
	mov	ecx, DWORD PTR _z$[esp]
	mov	eax, DWORD PTR _tab$[esp]
	shl	ecx, 4
	shl	eax, 8
	or	eax, ecx
	mov	ecx, DWORD PTR _ctx$[esp]
	movzx	edx, BYTE PTR [eax+ecx+4096]
	movzx	eax, WORD PTR [ecx+eax*2]
	push	edx
	push	eax
	push	ecx
	call	_PDJHUFF_WriteNBits
	add	esp, 12					; 0000000cH
	pop	esi
; Line 1168
	ret	0
$LN6@PDJHUFF_En:
	push	ebx
	push	edi
; Line 1156
	mov	edi, 1
	lea	eax, DWORD PTR [edi+1]
	test	esi, esi
	jle	SHORT $LN5@PDJHUFF_En
	cmp	esi, eax
	jl	SHORT $LN3@PDJHUFF_En
$LL4@PDJHUFF_En:
	inc	edi
	rol	eax, 1
	cmp	esi, eax
	jge	SHORT $LL4@PDJHUFF_En
$LN3@PDJHUFF_En:
; Line 1157
	mov	ecx, DWORD PTR _z$[esp+8]
	mov	eax, DWORD PTR _tab$[esp+8]
	mov	ebx, DWORD PTR _ctx$[esp+8]
	shl	ecx, 4
	or	ecx, edi
	shl	eax, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [eax+ebx+4096]
	movzx	edx, WORD PTR [ebx+eax*2]
	push	ecx
	push	edx
	push	ebx
	call	_PDJHUFF_WriteNBits
; Line 1158
	push	edi
	push	esi
; Line 1166
	push	ebx
	call	_PDJHUFF_WriteNBits
	add	esp, 24					; 00000018H
	pop	edi
	pop	ebx
	pop	esi
; Line 1168
	ret	0
$LN5@PDJHUFF_En:
; Line 1162
	neg	esi
	cmp	esi, eax
	jl	SHORT $LN1@PDJHUFF_En
	npad	2
$LL2@PDJHUFF_En:
	inc	edi
	rol	eax, 1
	cmp	esi, eax
	jge	SHORT $LL2@PDJHUFF_En
$LN1@PDJHUFF_En:
; Line 1163
	mov	ecx, DWORD PTR _z$[esp+8]
	mov	eax, DWORD PTR _tab$[esp+8]
	mov	ebx, DWORD PTR _ctx$[esp+8]
	shl	ecx, 4
	or	ecx, edi
	shl	eax, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [eax+ebx+4096]
	movzx	edx, WORD PTR [ebx+eax*2]
	push	ecx
	push	edx
	push	ebx
	call	_PDJHUFF_WriteNBits
; Line 1165
	mov	ecx, edi
	mov	eax, 1
	shl	eax, cl
; Line 1166
	push	edi
	sub	eax, esi
	dec	eax
	push	eax
	push	ebx
	call	_PDJHUFF_WriteNBits
	add	esp, 24					; 00000018H
	pop	edi
	pop	ebx
	pop	esi
; Line 1168
	ret	0
_PDJHUFF_EncodeVal ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_StatVal
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_StatVal
_TEXT	SEGMENT
_stat$ = 8						; size = 4
_z$ = 12						; size = 4
_v$ = 16						; size = 4
_PDJHUFF_StatVal PROC					; COMDAT
; Line 1174
	mov	eax, DWORD PTR _v$[esp-4]
	test	eax, eax
	jne	SHORT $LN13@PDJHUFF_St
	mov	eax, DWORD PTR _z$[esp-4]
	mov	ecx, DWORD PTR _stat$[esp-4]
	shl	eax, 6
	add	eax, ecx
; Line 1184
	inc	DWORD PTR [eax]
; Line 1185
	ret	0
$LN13@PDJHUFF_St:
; Line 1178
	mov	edx, 1
	lea	ecx, DWORD PTR [edx+1]
	jle	SHORT $LN5@PDJHUFF_St
	cmp	eax, ecx
	jl	SHORT $LN1@PDJHUFF_St
$LL4@PDJHUFF_St:
	inc	edx
	rol	ecx, 1
	cmp	eax, ecx
	jge	SHORT $LL4@PDJHUFF_St
; Line 1184
	mov	eax, DWORD PTR _z$[esp-4]
	mov	ecx, DWORD PTR _stat$[esp-4]
	shl	eax, 4
	or	eax, edx
	inc	DWORD PTR [ecx+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 1185
	ret	0
$LN5@PDJHUFF_St:
; Line 1183
	neg	eax
	cmp	eax, 2
	jl	SHORT $LN1@PDJHUFF_St
$LL2@PDJHUFF_St:
	inc	edx
	rol	ecx, 1
	cmp	eax, ecx
	jge	SHORT $LL2@PDJHUFF_St
$LN1@PDJHUFF_St:
; Line 1184
	mov	eax, DWORD PTR _z$[esp-4]
	mov	ecx, DWORD PTR _stat$[esp-4]
	shl	eax, 4
	or	eax, edx
	inc	DWORD PTR [ecx+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 1185
	ret	0
_PDJHUFF_StatVal ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_EncodeBlock
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_EncodeBlock
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_dctab$ = 16						; size = 4
_actab$ = 20						; size = 4
_PDJHUFF_EncodeBlock PROC				; COMDAT
; Line 1193
	mov	ecx, DWORD PTR _dctab$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _buf$[esp]
	movsx	eax, WORD PTR [ebx]
	push	ebp
	mov	ebp, DWORD PTR _ctx$[esp+4]
	push	esi
	push	edi
	push	eax
	push	0
	push	ecx
	push	ebp
	call	_PDJHUFF_EncodeVal
	add	esp, 16					; 00000010H
; Line 1195
	mov	edi, 1
	npad	11
$LL10@PDJHUFF_En@2:
; Line 1197
	movzx	edx, BYTE PTR _pdjpg_zigzag2[edi]
	movzx	eax, WORD PTR [ebx+edx*2]
	test	ax, ax
	je	SHORT $LN7@PDJHUFF_En@2
; Line 1199
	mov	ecx, DWORD PTR _actab$[esp+12]
	cwde
	push	eax
	push	0
	push	ecx
	push	ebp
	call	_PDJHUFF_EncodeVal
	add	esp, 16					; 00000010H
; Line 1200
	jmp	SHORT $LN9@PDJHUFF_En@2
$LN7@PDJHUFF_En@2:
; Line 1202
	cmp	edi, 64					; 00000040H
	mov	esi, edi
	jge	SHORT $LN18@PDJHUFF_En@2
	npad	5
$LL6@PDJHUFF_En@2:
; Line 1203
	movzx	edx, BYTE PTR _pdjpg_zigzag2[esi]
	cmp	WORD PTR [ebx+edx*2], 0
	jne	SHORT $LN17@PDJHUFF_En@2
	inc	esi
	cmp	esi, 64					; 00000040H
	jl	SHORT $LL6@PDJHUFF_En@2
$LN18@PDJHUFF_En@2:
; Line 1206
	mov	eax, DWORD PTR _actab$[esp+12]
	shl	eax, 8
	movzx	ecx, BYTE PTR [eax+ebp+4096]
	movzx	edx, WORD PTR [ebp+eax*2]
	push	ecx
	push	edx
	push	ebp
	call	_PDJHUFF_WriteNBits
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1214
	ret	0
$LN17@PDJHUFF_En@2:
; Line 1204
	cmp	esi, 64					; 00000040H
	jge	SHORT $LN18@PDJHUFF_En@2
; Line 1210
	sub	esi, edi
	cmp	esi, 15					; 0000000fH
	jle	SHORT $LN1@PDJHUFF_En@2
	mov	esi, 15					; 0000000fH
$LN1@PDJHUFF_En@2:
; Line 1211
	movzx	eax, BYTE PTR _pdjpg_zigzag2[esi+edi]
	movsx	ecx, WORD PTR [ebx+eax*2]
	mov	edx, DWORD PTR _actab$[esp+12]
	push	ecx
	push	esi
	push	edx
	push	ebp
	call	_PDJHUFF_EncodeVal
	add	esp, 16					; 00000010H
	add	edi, esi
$LN9@PDJHUFF_En@2:
	inc	edi
	cmp	edi, 64					; 00000040H
	jl	$LL10@PDJHUFF_En@2
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1214
	ret	0
_PDJHUFF_EncodeBlock ENDP
_TEXT	ENDS
PUBLIC	_PDJHUFF_StatBlock
; Function compile flags: /Ogtpy
;	COMDAT _PDJHUFF_StatBlock
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_dcstat$ = 12						; size = 4
_acstat$ = 16						; size = 4
_PDJHUFF_StatBlock PROC					; COMDAT
; Line 1221
	mov	ecx, DWORD PTR _dcstat$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _buf$[esp]
	movsx	eax, WORD PTR [ebx]
	push	ebp
	push	esi
	push	edi
	push	eax
	push	0
	push	ecx
	call	_PDJHUFF_StatVal
; Line 1222
	mov	ebp, DWORD PTR _acstat$[esp+24]
	add	esp, 12					; 0000000cH
	mov	edi, 1
	npad	12
$LL10@PDJHUFF_St@2:
; Line 1224
	movzx	edx, BYTE PTR _pdjpg_zigzag2[edi]
	movzx	eax, WORD PTR [ebx+edx*2]
	test	ax, ax
	je	SHORT $LN7@PDJHUFF_St@2
; Line 1226
	cwde
	push	eax
	push	0
	push	ebp
	call	_PDJHUFF_StatVal
	add	esp, 12					; 0000000cH
; Line 1227
	jmp	SHORT $LN9@PDJHUFF_St@2
$LN7@PDJHUFF_St@2:
; Line 1229
	cmp	edi, 64					; 00000040H
	mov	esi, edi
	jge	SHORT $LN21@PDJHUFF_St@2
	npad	10
$LL6@PDJHUFF_St@2:
; Line 1230
	movzx	ecx, BYTE PTR _pdjpg_zigzag2[esi]
	cmp	WORD PTR [ebx+ecx*2], 0
	jne	SHORT $LN15@PDJHUFF_St@2
	inc	esi
	cmp	esi, 64					; 00000040H
	jl	SHORT $LL6@PDJHUFF_St@2
$LN21@PDJHUFF_St@2:
; Line 1233
	inc	DWORD PTR [ebp]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1241
	ret	0
$LN15@PDJHUFF_St@2:
; Line 1231
	cmp	esi, 64					; 00000040H
	jge	SHORT $LN21@PDJHUFF_St@2
; Line 1237
	sub	esi, edi
	cmp	esi, 15					; 0000000fH
	jle	SHORT $LN1@PDJHUFF_St@2
	mov	esi, 15					; 0000000fH
$LN1@PDJHUFF_St@2:
; Line 1238
	movzx	edx, BYTE PTR _pdjpg_zigzag2[esi+edi]
	movsx	eax, WORD PTR [ebx+edx*2]
	push	eax
	push	esi
	push	ebp
	call	_PDJHUFF_StatVal
	add	esp, 12					; 0000000cH
	add	edi, esi
$LN9@PDJHUFF_St@2:
	inc	edi
	cmp	edi, 64					; 00000040H
	jl	SHORT $LL10@PDJHUFF_St@2
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1241
	ret	0
_PDJHUFF_StatBlock ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_GetImgBlk
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_GetImgBlk
_TEXT	SEGMENT
_blk$ = 8						; size = 4
_xo$ = 12						; size = 4
_yo$ = 16						; size = 4
_img$ = 20						; size = 4
_xs$ = 24						; size = 4
_ys$ = 28						; size = 4
_PDJPG_GetImgBlk PROC					; COMDAT
; Line 1257
	mov	edx, DWORD PTR _xs$[esp-4]
	mov	eax, DWORD PTR _yo$[esp-4]
; Line 1258
	mov	ecx, DWORD PTR _blk$[esp-4]
	imul	eax, edx
	add	eax, DWORD PTR _xo$[esp-4]
	add	ecx, 8
	add	eax, DWORD PTR _img$[esp-4]
; Line 1259
	add	ecx, 8
; Line 1260
	add	ecx, 8
; Line 1261
	add	ecx, 8
	fld	QWORD PTR [eax]
	add	eax, edx
	fstp	QWORD PTR [ecx-32]
; Line 1262
	add	ecx, 8
; Line 1263
	add	ecx, 8
	fld	QWORD PTR [eax]
	add	eax, edx
	fstp	QWORD PTR [ecx-40]
	fld	QWORD PTR [eax]
	add	eax, edx
	fstp	QWORD PTR [ecx-32]
	fld	QWORD PTR [eax]
	add	eax, edx
	fstp	QWORD PTR [ecx-24]
	fld	QWORD PTR [eax]
	add	eax, edx
	fstp	QWORD PTR [ecx-16]
	fld	QWORD PTR [eax]
	add	eax, edx
	fstp	QWORD PTR [ecx-8]
; Line 1264
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [ecx]
; Line 1265
	fld	QWORD PTR [eax+edx]
	fstp	QWORD PTR [ecx+8]
; Line 1266
	ret	0
_PDJPG_GetImgBlk ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_FilterImageDCT
_BSS	SEGMENT
?blk@?1??PDJPG_FilterImageDCT@@9@9 DB 040H DUP (?)	; `PDJPG_FilterImageDCT'::`2'::blk
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _PDJPG_FilterImageDCT
_TEXT	SEGMENT
_k$ = -36						; size = 4
tv362 = -32						; size = 4
tv1413 = -28						; size = 4
tv328 = -24						; size = 4
$T129860 = -20						; size = 4
tv1334 = -16						; size = 4
tv1417 = -12						; size = 4
tv1415 = -8						; size = 4
tv1405 = -4						; size = 4
_ibuf$ = 8						; size = 4
_obuf$ = 12						; size = 4
_xs$ = 16						; size = 4
tv312 = 20						; size = 4
_ys$ = 20						; size = 4
_PDJPG_FilterImageDCT PROC				; COMDAT
; Line 1270
	sub	esp, 36					; 00000024H
; Line 1276
	mov	eax, DWORD PTR _ys$[esp+32]
	cdq
	and	edx, 7
	add	eax, edx
	push	edi
	mov	edi, eax
	sar	edi, 3
	mov	DWORD PTR _k$[esp+40], 0
	test	edi, edi
	jle	$LN4@PDJPG_Filt
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _xs$[esp+48]
	mov	eax, esi
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	mov	eax, DWORD PTR _ibuf$[esp+48]
	lea	edx, DWORD PTR [esi+esi*2]
	lea	edx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR tv1413[esp+52], edx
	sar	ecx, 3
	mov	ebx, eax
	lea	edx, DWORD PTR [eax+esi*4]
	lea	ebp, DWORD PTR [eax+esi*2]
	mov	DWORD PTR $T129860[esp+52], ecx
	mov	DWORD PTR tv1334[esp+52], ebx
	mov	DWORD PTR tv1415[esp+52], edx
	mov	DWORD PTR tv1417[esp+52], ebp
	mov	DWORD PTR tv1405[esp+52], edi
$LL16@PDJPG_Filt:
; Line 1277
	test	ecx, ecx
	jle	$LN5@PDJPG_Filt
	mov	edi, DWORD PTR _k$[esp+52]
	mov	eax, DWORD PTR tv1413[esp+52]
	shl	edi, 7
	add	edi, DWORD PTR _obuf$[esp+48]
	mov	DWORD PTR tv328[esp+52], ecx
	mov	ecx, DWORD PTR $T129860[esp+52]
	add	DWORD PTR _k$[esp+52], ecx
	mov	DWORD PTR tv312[esp+48], edx
	mov	DWORD PTR tv362[esp+52], eax
	jmp	SHORT $LN3@PDJPG_Filt
	npad	2
$LL15@PDJPG_Filt:
	mov	edx, DWORD PTR tv312[esp+48]
	mov	eax, DWORD PTR tv362[esp+52]
$LN3@PDJPG_Filt:
; Line 1279
	fld	QWORD PTR [ebx]
; Line 1280
	push	edi
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9
	push	OFFSET ?blk@?1??PDJPG_FilterImageDCT@@9@9
	fld	QWORD PTR [ebx+esi]
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9+8
	fld	QWORD PTR [ebp]
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9+16
	fld	QWORD PTR [esi+ebp]
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9+24
	fld	QWORD PTR [edx]
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9+32
	fld	QWORD PTR [edx+esi]
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9+40
	fld	QWORD PTR [eax]
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9+48
	fld	QWORD PTR [eax+esi]
	fstp	QWORD PTR ?blk@?1??PDJPG_FilterImageDCT@@9@9+56
	call	_PDJPG_TransDCT
	mov	eax, 8
	add	DWORD PTR tv312[esp+56], eax
	add	DWORD PTR tv362[esp+60], eax
	add	esp, 8
; Line 1281
	sub	edi, -128				; ffffff80H
	add	ebx, eax
	add	ebp, eax
	sub	DWORD PTR tv328[esp+52], 1
	jne	SHORT $LL15@PDJPG_Filt
; Line 1277
	mov	ecx, DWORD PTR $T129860[esp+52]
$LN5@PDJPG_Filt:
; Line 1276
	mov	ebx, DWORD PTR tv1334[esp+52]
	mov	ebp, DWORD PTR tv1417[esp+52]
	mov	edx, DWORD PTR tv1415[esp+52]
	lea	eax, DWORD PTR [esi*8]
	add	DWORD PTR tv1413[esp+52], eax
	add	ebx, eax
	add	ebp, eax
	add	edx, eax
	sub	DWORD PTR tv1405[esp+52], 1
	mov	DWORD PTR tv1334[esp+52], ebx
	mov	DWORD PTR tv1417[esp+52], ebp
	mov	DWORD PTR tv1415[esp+52], edx
	jne	$LL16@PDJPG_Filt
	pop	esi
	pop	ebp
	pop	ebx
$LN4@PDJPG_Filt:
	pop	edi
; Line 1283
	add	esp, 36					; 00000024H
	ret	0
_PDJPG_FilterImageDCT ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_EmitDQT
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_EmitDQT
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_n$ = 12						; size = 4
_PDJPG_EmitDQT PROC					; COMDAT
; Line 1289
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
; Line 1296
	mov	ecx, DWORD PTR _n$[esp-4]
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	BYTE PTR [eax], 219			; 000000dbH
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	BYTE PTR [eax], 67			; 00000043H
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	BYTE PTR [eax], cl
	inc	DWORD PTR _pdjhuff_ct
	push	ebx
	push	esi
; Line 1297
	mov	esi, DWORD PTR _ctx$[esp+4]
	xor	eax, eax
	shl	ecx, 6
	npad	12
$LL3@PDJPG_Emit:
; Line 1298
	movzx	edx, BYTE PTR _pdjpg_zigzag2[eax]
	mov	ebx, DWORD PTR _pdjhuff_ct
	add	edx, ecx
	mov	dl, BYTE PTR [edx+esi+6164]
	mov	BYTE PTR [ebx], dl
	inc	DWORD PTR _pdjhuff_ct
	inc	eax
	cmp	eax, 64					; 00000040H
	jl	SHORT $LL3@PDJPG_Emit
	pop	esi
	pop	ebx
; Line 1299
	ret	0
_PDJPG_EmitDQT ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_EmitSOF
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_EmitSOF
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_xs$ = 12						; size = 4
_ys$ = 16						; size = 4
_PDJPG_EmitSOF PROC					; COMDAT
; Line 1305
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	edx, 1
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1306
	mov	BYTE PTR [eax], 192			; 000000c0H
	mov	ecx, DWORD PTR _pdjhuff_ct
; Line 1308
	xor	eax, eax
	push	ebx
	add	ecx, edx
	mov	DWORD PTR _pdjhuff_ct, ecx
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+4]
	cmp	DWORD PTR [esi+7800], eax
	sete	al
	lea	eax, DWORD PTR [eax+eax+1]
	lea	eax, DWORD PTR [eax+eax*2+8]
; Line 1309
	mov	ebx, eax
	sar	ebx, 8
	mov	BYTE PTR [ecx], bl
	mov	ecx, DWORD PTR _pdjhuff_ct
	add	ecx, edx
	mov	DWORD PTR _pdjhuff_ct, ecx
; Line 1310
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _pdjhuff_ct
; Line 1314
	mov	ecx, DWORD PTR _ys$[esp+4]
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	BYTE PTR [eax], 8
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	ebx, ecx
	sar	ebx, 8
	mov	BYTE PTR [eax], bl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1315
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _pdjhuff_ct
; Line 1316
	mov	ecx, DWORD PTR _xs$[esp+4]
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	ebx, ecx
	sar	ebx, 8
	mov	BYTE PTR [eax], bl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1317
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1319
	cmp	DWORD PTR [esi+7800], 0
	pop	esi
	pop	ebx
	je	SHORT $LN2@PDJPG_Emit@2
; Line 1321
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1323
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1324
	mov	BYTE PTR [eax], 17			; 00000011H
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1325
	mov	BYTE PTR [eax], 0
; Line 1338
	add	DWORD PTR _pdjhuff_ct, edx
; Line 1340
	ret	0
$LN2@PDJPG_Emit@2:
; Line 1328
	mov	BYTE PTR [eax], 3
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1330
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1331
	mov	BYTE PTR [eax], 34			; 00000022H
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1332
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1333
	mov	BYTE PTR [eax], 2
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1334
	mov	BYTE PTR [eax], 17			; 00000011H
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1335
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1336
	mov	BYTE PTR [eax], 3
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1337
	mov	BYTE PTR [eax], 17			; 00000011H
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1338
	mov	BYTE PTR [eax], dl
	add	DWORD PTR _pdjhuff_ct, edx
; Line 1340
	ret	0
_PDJPG_EmitSOF ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_EmitSOS
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_EmitSOS
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_PDJPG_EmitSOS PROC					; COMDAT
; Line 1346
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	edx, 1
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1347
	mov	BYTE PTR [eax], 218			; 000000daH
	mov	ecx, DWORD PTR _pdjhuff_ct
	push	ebx
	add	ecx, edx
; Line 1349
	xor	eax, eax
	mov	DWORD PTR _pdjhuff_ct, ecx
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+4]
	cmp	DWORD PTR [esi+7800], eax
	sete	al
	lea	eax, DWORD PTR [eax+eax+1]
	lea	eax, DWORD PTR [eax+eax+6]
; Line 1350
	mov	ebx, eax
	sar	ebx, 8
	mov	BYTE PTR [ecx], bl
	mov	ecx, DWORD PTR _pdjhuff_ct
	add	ecx, edx
	mov	DWORD PTR _pdjhuff_ct, ecx
; Line 1351
	mov	BYTE PTR [ecx], al
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1353
	cmp	DWORD PTR [esi+7800], 0
	pop	esi
	pop	ebx
	jne	SHORT $LN2@PDJPG_Emit@3
; Line 1355
	mov	BYTE PTR [eax], 3
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1357
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1358
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1359
	mov	BYTE PTR [eax], 2
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1360
	mov	BYTE PTR [eax], 17			; 00000011H
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1361
	mov	BYTE PTR [eax], 3
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1362
	mov	BYTE PTR [eax], 17			; 00000011H
; Line 1363
	jmp	SHORT $LN5@PDJPG_Emit@3
$LN2@PDJPG_Emit@3:
; Line 1365
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1367
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1368
	mov	BYTE PTR [eax], 0
$LN5@PDJPG_Emit@3:
	add	DWORD PTR _pdjhuff_ct, edx
; Line 1371
	mov	ecx, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [ecx], 0
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1372
	mov	BYTE PTR [eax], 63			; 0000003fH
	mov	eax, DWORD PTR _pdjhuff_ct
	add	eax, edx
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1373
	mov	BYTE PTR [eax], 0
	add	DWORD PTR _pdjhuff_ct, edx
; Line 1374
	ret	0
_PDJPG_EmitSOS ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_EmitDHT
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_EmitDHT
_TEXT	SEGMENT
_p$ = -4						; size = 4
_ctx$ = 8						; size = 4
_i$ = 12						; size = 4
_tab$ = 12						; size = 4
_PDJPG_EmitDHT PROC					; COMDAT
; Line 1377
	push	ecx
; Line 1387
	push	ebx
; Line 1390
	push	ebp
	push	esi
	push	edi
; Line 1381
	mov	eax, DWORD PTR _pdjhuff_ct
; Line 1386
	mov	ecx, DWORD PTR _i$[esp+16]
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	BYTE PTR [eax], 196			; 000000c4H
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
	mov	edx, ecx
	mov	DWORD PTR _p$[esp+20], eax
	sar	edx, 8
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1387
	mov	BYTE PTR [eax], cl
; Line 1390
	mov	ebx, DWORD PTR _tab$[esp+16]
	mov	eax, ebx
	mov	cl, bl
	cdq
	and	cl, 1
	mov	esi, DWORD PTR _pdjhuff_ct
	sub	eax, edx
	shl	cl, 4
	inc	esi
	sar	eax, 1
	or	cl, al
	mov	DWORD PTR _pdjhuff_ct, esi
	mov	BYTE PTR [esi], cl
	mov	ebp, DWORD PTR _pdjhuff_ct
	inc	ebp
; Line 1393
	mov	edi, DWORD PTR _ctx$[esp+16]
	mov	DWORD PTR _pdjhuff_ct, ebp
	shl	ebx, 8
	mov	ecx, 1
	npad	1
$LL14@PDJPG_Emit@4:
; Line 1395
	xor	edx, edx
; Line 1396
	xor	eax, eax
$LL11@PDJPG_Emit@4:
; Line 1397
	mov	esi, eax
	or	esi, ebx
	movzx	esi, BYTE PTR [esi+edi+4096]
	cmp	esi, ecx
	jne	SHORT $LN10@PDJPG_Emit@4
; Line 1398
	inc	edx
$LN10@PDJPG_Emit@4:
; Line 1396
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $LL11@PDJPG_Emit@4
; Line 1399
	mov	BYTE PTR [ebp], dl
	mov	ebp, DWORD PTR _pdjhuff_ct
	inc	ebp
	inc	ecx
	cmp	ecx, 16					; 00000010H
	mov	DWORD PTR _pdjhuff_ct, ebp
	jle	SHORT $LL14@PDJPG_Emit@4
; Line 1402
	xor	esi, esi
; Line 1403
	mov	DWORD PTR _i$[esp+16], 1
	npad	3
$LL25@PDJPG_Emit@4:
; Line 1405
	add	esi, esi
; Line 1406
	xor	ecx, ecx
$LL4@PDJPG_Emit@4:
; Line 1407
	mov	eax, ecx
	or	eax, ebx
	movzx	edx, BYTE PTR [eax+edi+4096]
	cmp	edx, DWORD PTR _i$[esp+16]
	jne	SHORT $LN3@PDJPG_Emit@4
; Line 1409
	mov	BYTE PTR [ebp], cl
	inc	DWORD PTR _pdjhuff_ct
; Line 1410
	mov	WORD PTR [edi+eax*2], si
	mov	ebp, DWORD PTR _pdjhuff_ct
	inc	esi
$LN3@PDJPG_Emit@4:
	inc	ecx
	cmp	ecx, 256				; 00000100H
	jl	SHORT $LL4@PDJPG_Emit@4
	mov	eax, DWORD PTR _i$[esp+16]
	inc	eax
	cmp	eax, 16					; 00000010H
	mov	DWORD PTR _i$[esp+16], eax
	jle	SHORT $LL25@PDJPG_Emit@4
; Line 1416
	mov	ecx, DWORD PTR _p$[esp+20]
	sub	ebp, ecx
	mov	eax, ebp
	pop	edi
	pop	esi
; Line 1417
	mov	edx, eax
	sar	edx, 8
	pop	ebp
	mov	BYTE PTR [ecx], dl
; Line 1418
	mov	BYTE PTR [ecx+1], al
	pop	ebx
; Line 1419
	pop	ecx
	ret	0
_PDJPG_EmitDHT ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3ee4f8b588e368f1
PUBLIC	__real@4024000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	_PDJPG_MakeQuantTabInput
_BSS	SEGMENT
?deltas@?1??PDJPG_MakeQuantTabInput@@9@9 DQ 040H DUP (?) ; `PDJPG_MakeQuantTabInput'::`2'::deltas
_BSS	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3ee4f8b588e368f1
CONST	SEGMENT
__real@3ee4f8b588e368f1 DQ 03ee4f8b588e368f1r	; 1e-005
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PDJPG_MakeQuantTabInput
_TEXT	SEGMENT
tv2697 = -4						; size = 4
tv2695 = -4						; size = 4
tv2693 = -4						; size = 4
tv2691 = -4						; size = 4
tv2687 = -4						; size = 4
tv2685 = -4						; size = 4
tv2683 = -4						; size = 4
tv2681 = -4						; size = 4
_in$ = 8						; size = 4
tv2642 = 12						; size = 4
tv2641 = 12						; size = 2
tv2634 = 12						; size = 4
tv2633 = 12						; size = 2
tv2626 = 12						; size = 4
tv2625 = 12						; size = 2
_cnt$ = 12						; size = 4
tv2638 = 16						; size = 4
tv2636 = 16						; size = 4
tv2630 = 16						; size = 4
tv2628 = 16						; size = 4
tv2622 = 16						; size = 4
tv2620 = 16						; size = 4
_tab$ = 16						; size = 4
_q$ = 20						; size = 4
_PDJPG_MakeQuantTabInput PROC				; COMDAT
; Line 1422
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1428
	xor	eax, eax
	mov	ecx, 128				; 00000080H
	mov	edi, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9
	rep stosd
; Line 1430
	mov	eax, DWORD PTR _cnt$[esp+16]
	test	eax, eax
	jle	$LN22@PDJPG_Make
	mov	ecx, DWORD PTR _in$[esp+16]
	mov	edx, eax
	npad	11
$LL24@PDJPG_Make:
; Line 1431
	mov	eax, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9+8
$LL21@PDJPG_Make:
; Line 1432
	movsx	esi, WORD PTR [ecx]
	mov	DWORD PTR tv2697[esp+20], esi
	add	eax, 64					; 00000040H
	add	ecx, 16					; 00000010H
	cmp	eax, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9+520
	fild	DWORD PTR tv2697[esp+20]
	fabs
	fadd	QWORD PTR [eax-72]
	fstp	QWORD PTR [eax-72]
	movsx	esi, WORD PTR [ecx-14]
	mov	DWORD PTR tv2695[esp+20], esi
	fild	DWORD PTR tv2695[esp+20]
	fabs
	fadd	QWORD PTR [eax-64]
	fstp	QWORD PTR [eax-64]
	movsx	esi, WORD PTR [ecx-12]
	mov	DWORD PTR tv2693[esp+20], esi
	fild	DWORD PTR tv2693[esp+20]
	fabs
	fadd	QWORD PTR [eax-56]
	fstp	QWORD PTR [eax-56]
	movsx	esi, WORD PTR [ecx-10]
	mov	DWORD PTR tv2691[esp+20], esi
	fild	DWORD PTR tv2691[esp+20]
	fabs
	fadd	QWORD PTR [eax-48]
	fstp	QWORD PTR [eax-48]
	movsx	esi, WORD PTR [ecx-8]
	mov	DWORD PTR tv2687[esp+20], esi
	fild	DWORD PTR tv2687[esp+20]
	fabs
	fadd	QWORD PTR [eax-40]
	fstp	QWORD PTR [eax-40]
	movsx	esi, WORD PTR [ecx-6]
	mov	DWORD PTR tv2685[esp+20], esi
	fild	DWORD PTR tv2685[esp+20]
	fabs
	fadd	QWORD PTR [eax-32]
	fstp	QWORD PTR [eax-32]
	movsx	esi, WORD PTR [ecx-4]
	mov	DWORD PTR tv2683[esp+20], esi
	fild	DWORD PTR tv2683[esp+20]
	fabs
	fadd	QWORD PTR [eax-24]
	fstp	QWORD PTR [eax-24]
	movsx	esi, WORD PTR [ecx-2]
	mov	DWORD PTR tv2681[esp+20], esi
	fild	DWORD PTR tv2681[esp+20]
	fabs
	fadd	QWORD PTR [eax-16]
	fstp	QWORD PTR [eax-16]
	jl	$LL21@PDJPG_Make
; Line 1430
	sub	edx, 1
	jne	$LL24@PDJPG_Make
$LN22@PDJPG_Make:
; Line 1437
	fild	DWORD PTR _cnt$[esp+16]
	mov	eax, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9+8
$LN18@PDJPG_Make:
	fld	QWORD PTR [eax-8]
	add	eax, 64					; 00000040H
	cmp	eax, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9+520
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-72]
	fld	QWORD PTR [eax-64]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-64]
	fld	QWORD PTR [eax-56]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-56]
	fld	QWORD PTR [eax-48]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-48]
	fld	QWORD PTR [eax-40]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-40]
	fld	QWORD PTR [eax-32]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-32]
	fld	QWORD PTR [eax-24]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-24]
	fld	QWORD PTR [eax-16]
	fdiv	ST(0), ST(1)
	fstp	QWORD PTR [eax-16]
	jl	SHORT $LN18@PDJPG_Make
	fstp	ST(0)
	mov	eax, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9+8
	fldz
$LN15@PDJPG_Make:
; Line 1438
	fadd	QWORD PTR [eax-8]
	add	eax, 64					; 00000040H
	cmp	eax, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9+520
	fadd	QWORD PTR [eax-64]
	fadd	QWORD PTR [eax-56]
	fadd	QWORD PTR [eax-48]
	fadd	QWORD PTR [eax-40]
	fadd	QWORD PTR [eax-32]
	fadd	QWORD PTR [eax-24]
	fadd	QWORD PTR [eax-16]
	jl	SHORT $LN15@PDJPG_Make
; Line 1448
	fld	DWORD PTR _q$[esp+16]
	mov	ebp, DWORD PTR _tab$[esp+16]
	fld1
	mov	ebx, ebp
	fsubrp	ST(1), ST(0)
	mov	edi, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9
	fld	QWORD PTR __real@4024000000000000
	fmul	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fld	QWORD PTR __real@3ee4f8b588e368f1
$LN47@PDJPG_Make:
; Line 1442
	xor	esi, esi
$LN9@PDJPG_Make:
; Line 1446
	fld	QWORD PTR [edi]
	fdiv	ST(0), ST(3)
; Line 1447
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@PDJPG_Make
	fstp	ST(0)
	fld	ST(0)
$LN6@PDJPG_Make:
; Line 1449
	fdivr	ST(0), ST(2)
; Line 1450
	call	__ftol2_sse
; Line 1451
	cmp	eax, 1
	jge	SHORT $LN5@PDJPG_Make
	mov	eax, 1
; Line 1452
	jmp	SHORT $LN4@PDJPG_Make
$LN5@PDJPG_Make:
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN4@PDJPG_Make
	mov	eax, 255				; 000000ffH
$LN4@PDJPG_Make:
; Line 1458
	mov	BYTE PTR [ebx+esi], al
	inc	esi
	add	edi, 8
	cmp	esi, 8
	jl	SHORT $LN9@PDJPG_Make
	add	ebx, 8
	cmp	edi, OFFSET ?deltas@?1??PDJPG_MakeQuantTabInput@@9@9+512
	jl	SHORT $LN47@PDJPG_Make
; Line 1463
	mov	al, BYTE PTR [ebp+61]
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
	fld	QWORD PTR __real@3fe8000000000000
	cmp	al, 1
	jbe	SHORT $LN3@PDJPG_Make
	movzx	eax, al
	mov	DWORD PTR tv2642[esp+16], eax
	fild	DWORD PTR tv2642[esp+16]
	fnstcw	WORD PTR tv2641[esp+16]
	movzx	eax, WORD PTR tv2641[esp+16]
	fmul	ST(0), ST(1)
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv2638[esp+16], eax
	fldcw	WORD PTR tv2638[esp+16]
	fistp	DWORD PTR tv2636[esp+16]
	mov	cl, BYTE PTR tv2636[esp+16]
	mov	BYTE PTR [ebp+61], cl
	fldcw	WORD PTR tv2641[esp+16]
$LN3@PDJPG_Make:
; Line 1464
	mov	al, BYTE PTR [ebp+62]
	cmp	al, 1
	jbe	SHORT $LN73@PDJPG_Make
	movzx	edx, al
	mov	DWORD PTR tv2634[esp+16], edx
	fild	DWORD PTR tv2634[esp+16]
	fnstcw	WORD PTR tv2633[esp+16]
	movzx	eax, WORD PTR tv2633[esp+16]
	fmulp	ST(1), ST(0)
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv2630[esp+16], eax
	fldcw	WORD PTR tv2630[esp+16]
	fistp	DWORD PTR tv2628[esp+16]
	mov	al, BYTE PTR tv2628[esp+16]
	mov	BYTE PTR [ebp+62], al
	fldcw	WORD PTR tv2633[esp+16]
	jmp	SHORT $LN2@PDJPG_Make
$LN73@PDJPG_Make:
	fstp	ST(0)
$LN2@PDJPG_Make:
; Line 1465
	mov	al, BYTE PTR [ebp+63]
	cmp	al, 1
	jbe	SHORT $LN1@PDJPG_Make
	movzx	ecx, al
	mov	DWORD PTR tv2626[esp+16], ecx
	fild	DWORD PTR tv2626[esp+16]
	fnstcw	WORD PTR tv2625[esp+16]
	movzx	eax, WORD PTR tv2625[esp+16]
	fmul	QWORD PTR __real@3fe0000000000000
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv2622[esp+16], eax
	fldcw	WORD PTR tv2622[esp+16]
	fistp	DWORD PTR tv2620[esp+16]
	mov	dl, BYTE PTR tv2620[esp+16]
	mov	BYTE PTR [ebp+63], dl
	fldcw	WORD PTR tv2625[esp+16]
$LN1@PDJPG_Make:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1467
	pop	ecx
	ret	0
_PDJPG_MakeQuantTabInput ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_MakeQuantTabInputFast
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_MakeQuantTabInputFast
_TEXT	SEGMENT
_in$ = 8						; size = 4
_cnt$ = 12						; size = 4
_tab$ = 16						; size = 4
_q$ = 20						; size = 4
_PDJPG_MakeQuantTabInputFast PROC			; COMDAT
; Line 1475
	mov	eax, DWORD PTR _cnt$[esp-4]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
; Line 1476
	cmp	eax, 1
	jge	SHORT $LN1@PDJPG_Make@2
	mov	eax, 1
$LN1@PDJPG_Make@2:
; Line 1477
	fld	DWORD PTR _q$[esp-4]
	mov	edx, DWORD PTR _in$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR _tab$[esp]
	fstp	DWORD PTR [esp]
	push	ecx
	push	eax
	push	edx
	call	_PDJPG_MakeQuantTabInput
	add	esp, 16					; 00000010H
; Line 1478
	ret	0
_PDJPG_MakeQuantTabInputFast ENDP
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	__real@3fb4d013a92a3055
PUBLIC	__real@3fdacbfb15b573eb
PUBLIC	__real@4060000000000000
PUBLIC	__real@3fc597f62b6ae7d5
PUBLIC	__real@3fbd2f1a9fbe76c9
PUBLIC	__real@3fd322d0e5604189
PUBLIC	__real@3fe2c8b439581062
PUBLIC	__real@3fd53404ea4a8c15
PUBLIC	_PDJPG_EncodeCtx
_BSS	SEGMENT
?acsuv@?1??PDJPG_EncodeCtx@@9@9 DD 0100H DUP (?)	; `PDJPG_EncodeCtx'::`2'::acsuv
?dcsuv@?1??PDJPG_EncodeCtx@@9@9 DD 0100H DUP (?)	; `PDJPG_EncodeCtx'::`2'::dcsuv
?acs@?1??PDJPG_EncodeCtx@@9@9 DD 0100H DUP (?)		; `PDJPG_EncodeCtx'::`2'::acs
?dcs@?1??PDJPG_EncodeCtx@@9@9 DD 0100H DUP (?)		; `PDJPG_EncodeCtx'::`2'::dcs
?vdb@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::vdb
?udb@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::udb
?vb@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::vb
?ub@?1??PDJPG_EncodeCtx@@9@9 DD 01H DUP (?)		; `PDJPG_EncodeCtx'::`2'::ub
_BSS	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3fb4d013a92a3055
CONST	SEGMENT
__real@3fb4d013a92a3055 DQ 03fb4d013a92a3055r	; 0.0813
CONST	ENDS
;	COMDAT __real@3fdacbfb15b573eb
CONST	SEGMENT
__real@3fdacbfb15b573eb DQ 03fdacbfb15b573ebr	; 0.4187
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@3fc597f62b6ae7d5
CONST	SEGMENT
__real@3fc597f62b6ae7d5 DQ 03fc597f62b6ae7d5r	; 0.1687
CONST	ENDS
;	COMDAT __real@3fbd2f1a9fbe76c9
CONST	SEGMENT
__real@3fbd2f1a9fbe76c9 DQ 03fbd2f1a9fbe76c9r	; 0.114
CONST	ENDS
;	COMDAT __real@3fd322d0e5604189
CONST	SEGMENT
__real@3fd322d0e5604189 DQ 03fd322d0e5604189r	; 0.299
CONST	ENDS
;	COMDAT __real@3fe2c8b439581062
CONST	SEGMENT
__real@3fe2c8b439581062 DQ 03fe2c8b439581062r	; 0.587
CONST	ENDS
;	COMDAT __real@3fd53404ea4a8c15
CONST	SEGMENT
__real@3fd53404ea4a8c15 DQ 03fd53404ea4a8c15r	; 0.3313
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PDJPG_EncodeCtx
_TEXT	SEGMENT
tv1372 = -48						; size = 4
_xs3$ = -48						; size = 4
tv1371 = -44						; size = 4
_ys3$ = -44						; size = 4
tv1374 = -40						; size = 4
_ys2$ = -40						; size = 4
tv4437 = -36						; size = 4
tv3529 = -36						; size = 4
tv2615 = -36						; size = 4
_j$ = -36						; size = 4
tv4431 = -32						; size = 4
tv3523 = -32						; size = 4
tv2636 = -32						; size = 4
tv1808 = -32						; size = 4
tv4361 = -28						; size = 4
tv3427 = -28						; size = 4
tv2648 = -28						; size = 4
tv1790 = -28						; size = 4
tv4364 = -24						; size = 4
tv3239 = -24						; size = 4
tv1764 = -24						; size = 4
tv3533 = -20						; size = 4
tv2493 = -20						; size = 4
tv1174 = -20						; size = 4
tv4445 = -16						; size = 4
tv3556 = -16						; size = 4
tv2646 = -16						; size = 4
tv1760 = -16						; size = 4
tv4480 = -12						; size = 4
tv3565 = -12						; size = 4
tv3333 = -12						; size = 4
tv2591 = -12						; size = 4
_cb$ = -12						; size = 4
tv4218 = -8						; size = 4
tv1370 = -8						; size = 4
_cr$ = -8						; size = 4
tv4440 = -4						; size = 4
tv3622 = -4						; size = 4
tv2496 = -4						; size = 4
tv1814 = -4						; size = 4
tv2038 = 8						; size = 4
tv1373 = 8						; size = 4
_cu$ = 8						; size = 4
_cg$ = 8						; size = 4
_ctx$ = 8						; size = 4
_ibuf$ = 12						; size = 4
_obuf$ = 16						; size = 4
tv4092 = 20						; size = 4
_xs$ = 20						; size = 4
tv4072 = 24						; size = 4
_ys$ = 24						; size = 4
tv4070 = 28						; size = 4
tv3218 = 28						; size = 4
tv1368 = 28						; size = 4
_l$ = 28						; size = 4
_qf$ = 28						; size = 4
_PDJPG_EncodeCtx PROC					; COMDAT
; Line 1482
	sub	esp, 48					; 00000030H
; Line 1494
	mov	ecx, DWORD PTR _xs$[esp+44]
	push	ebx
	push	ebp
	lea	eax, DWORD PTR [ecx+7]
	cdq
	and	edx, 7
	add	eax, edx
	push	esi
; Line 1495
	mov	esi, DWORD PTR _ys$[esp+56]
	push	edi
	mov	edi, eax
	lea	eax, DWORD PTR [esi+7]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR _ys2$[esp+64], eax
; Line 1499
	lea	eax, DWORD PTR [ecx+15]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR _xs3$[esp+64], eax
; Line 1500
	lea	eax, DWORD PTR [esi+15]
; Line 1502
	mov	esi, DWORD PTR _ctx$[esp+60]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, eax
	add	eax, eax
	sar	edi, 3
	add	eax, eax
; Line 1506
	push	64					; 00000040H
	add	edi, edi
	mov	DWORD PTR _ys3$[esp+68], eax
	lea	eax, DWORD PTR [esi+6164]
	xor	ebp, ebp
	push	1
	add	edi, edi
	push	eax
	add	edi, edi
	mov	DWORD PTR [esi+7800], ebp
	mov	DWORD PTR [esi+7804], ebp
	call	_memset
; Line 1507
	push	64					; 00000040H
	lea	eax, DWORD PTR [esi+6228]
	push	1
	push	eax
	call	_memset
; Line 1510
	push	256					; 00000100H
	lea	ebx, DWORD PTR [esi+4096]
	push	ebp
	push	ebx
	call	_memset
; Line 1511
	push	256					; 00000100H
	lea	eax, DWORD PTR [esi+4352]
	push	ebp
	push	eax
	call	_memset
; Line 1512
	push	256					; 00000100H
	lea	ebp, DWORD PTR [esi+4608]
	push	0
	push	ebp
	call	_memset
; Line 1513
	push	256					; 00000100H
	lea	eax, DWORD PTR [esi+4864]
	push	0
	push	eax
	call	_memset
; Line 1515
	mov	eax, 67372036				; 04040404H
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], eax
	add	esp, 72					; 00000048H
	mov	DWORD PTR [ebx+8], eax
	mov	DWORD PTR [ebx+12], eax
; Line 1516
	mov	DWORD PTR [ebp], eax
	mov	DWORD PTR [ebp+4], eax
	mov	DWORD PTR [ebp+8], eax
; Line 1517
	push	255					; 000000ffH
	mov	DWORD PTR [ebp+12], eax
	lea	eax, DWORD PTR [esi+4352]
	push	8
	push	eax
	call	_memset
; Line 1518
	push	255					; 000000ffH
	lea	eax, DWORD PTR [esi+4864]
	push	8
	push	eax
	call	_memset
	add	esp, 24					; 00000018H
; Line 1528
	cmp	DWORD PTR ?yb@?1??PDJPG_EncodeCtx@@9@9, 0
	je	SHORT $LN178@PDJPG_Enco
	mov	eax, DWORD PTR _xs$[esp+60]
	cmp	eax, DWORD PTR ?lxs@?1??PDJPG_EncodeCtx@@9@9
	jne	SHORT $LN177@PDJPG_Enco
	mov	ecx, DWORD PTR _ys$[esp+60]
	cmp	ecx, DWORD PTR ?lys@?1??PDJPG_EncodeCtx@@9@9
	je	$LN170@PDJPG_Enco
$LN177@PDJPG_Enco:
; Line 1532
	mov	edx, DWORD PTR ?yb@?1??PDJPG_EncodeCtx@@9@9
	push	edx
	call	_free
; Line 1533
	mov	eax, DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9
	push	eax
	call	_free
; Line 1534
	mov	ecx, DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9
	push	ecx
	call	_free
; Line 1535
	mov	edx, DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9
	push	edx
	call	_free
; Line 1536
	mov	eax, DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9
	push	eax
	call	_free
; Line 1537
	mov	ecx, DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9
	push	ecx
	call	_free
	add	esp, 24					; 00000018H
$LN178@PDJPG_Enco:
; Line 1540
	mov	ebp, DWORD PTR _ys2$[esp+64]
	mov	ebx, ebp
	imul	ebx, edi
	push	ebx
	call	_malloc
; Line 1541
	push	ebx
	mov	DWORD PTR ?yb@?1??PDJPG_EncodeCtx@@9@9, eax
	call	_malloc
; Line 1542
	push	ebx
	mov	DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9, eax
	call	_malloc
	mov	DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9, eax
; Line 1544
	lea	eax, DWORD PTR [edi+8]
	lea	edx, DWORD PTR [ebp+8]
	imul	edx, eax
	add	edx, edx
	push	edx
	call	_malloc
; Line 1545
	mov	ebx, DWORD PTR _ys3$[esp+80]
	mov	ecx, DWORD PTR _xs3$[esp+80]
	add	ebx, 8
	add	ecx, 8
	imul	ebx, ecx
	add	ebx, ebx
	push	ebx
	mov	DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9, eax
	call	_malloc
; Line 1546
	push	ebx
	mov	DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9, eax
	call	_malloc
; Line 1548
	mov	edx, DWORD PTR _xs$[esp+84]
	mov	DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9, eax
; Line 1549
	mov	eax, DWORD PTR _ys$[esp+84]
	add	esp, 24					; 00000018H
	mov	DWORD PTR ?lxs@?1??PDJPG_EncodeCtx@@9@9, edx
	mov	DWORD PTR ?lys@?1??PDJPG_EncodeCtx@@9@9, eax
	jmp	SHORT $LN66@PDJPG_Enco
$LN170@PDJPG_Enco:
	mov	ebp, DWORD PTR _ys2$[esp+64]
$LN66@PDJPG_Enco:
; Line 1553
	mov	ecx, DWORD PTR ?yb@?1??PDJPG_EncodeCtx@@9@9
	mov	ebx, ebp
	imul	ebx, edi
	push	ebx
	push	128					; 00000080H
	push	ecx
	call	_memset
; Line 1554
	mov	edx, DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9
	push	ebx
	push	128					; 00000080H
	push	edx
	call	_memset
; Line 1555
	mov	eax, DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9
	push	ebx
	push	128					; 00000080H
	push	eax
	call	_memset
; Line 1557
	mov	ecx, DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9
	add	ebp, 8
	imul	ebp, edi
	add	ebp, ebp
	push	ebp
	push	0
	push	ecx
	call	_memset
; Line 1558
	mov	ebx, DWORD PTR _ys3$[esp+112]
	mov	edx, DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9
	add	ebx, 8
	imul	ebx, DWORD PTR _xs3$[esp+112]
	add	ebx, ebx
	push	ebx
	push	0
	push	edx
	call	_memset
; Line 1559
	mov	eax, DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9
	push	ebx
	push	0
	push	eax
	call	_memset
	add	esp, 72					; 00000048H
; Line 1561
	cmp	DWORD PTR _ys$[esp+60], 0
	jle	$LN61@PDJPG_Enco
	mov	ecx, DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9
	fld	QWORD PTR __real@3fe0000000000000
	mov	eax, DWORD PTR _xs$[esp+60]
	fld	QWORD PTR __real@3fd53404ea4a8c15
	mov	DWORD PTR tv1790[esp+64], ecx
	mov	ecx, eax
	neg	ecx
	mov	DWORD PTR tv1814[esp+64], ecx
	mov	ecx, DWORD PTR _ys$[esp+60]
	lea	edx, DWORD PTR [ecx-1]
	imul	edx, eax
	mov	DWORD PTR tv1808[esp+64], edx
	mov	DWORD PTR tv1174[esp+64], ecx
$LN63@PDJPG_Enco:
; Line 1562
	cmp	DWORD PTR _xs$[esp+60], 0
	mov	DWORD PTR _j$[esp+64], 0
	jle	$LN62@PDJPG_Enco
	mov	eax, DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9
	mov	ecx, DWORD PTR ?yb@?1??PDJPG_EncodeCtx@@9@9
	mov	ebp, DWORD PTR tv1790[esp+64]
	sub	ecx, eax
	mov	DWORD PTR tv1760[esp+64], ecx
	mov	ecx, DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9
	sub	ecx, eax
	mov	DWORD PTR tv1764[esp+64], ecx
$LN171@PDJPG_Enco:
; Line 1565
	mov	eax, DWORD PTR _j$[esp+64]
	mov	edx, DWORD PTR tv1808[esp+64]
	mov	ecx, DWORD PTR _ibuf$[esp+60]
	add	edx, eax
	lea	eax, DWORD PTR [ecx+edx*4]
	movzx	edx, BYTE PTR [eax]
; Line 1566
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _cr$[esp+64], edx
; Line 1567
	movzx	edx, BYTE PTR [eax+2]
	mov	DWORD PTR _cg$[esp+60], ecx
	mov	DWORD PTR _cb$[esp+64], edx
; Line 1569
	fild	DWORD PTR _cg$[esp+60]
	fild	DWORD PTR _cr$[esp+64]
	fild	DWORD PTR _cb$[esp+64]
	fld	ST(2)
	fmul	QWORD PTR __real@3fe2c8b439581062
	fld	ST(2)
	fmul	QWORD PTR __real@3fd322d0e5604189
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	QWORD PTR __real@3fbd2f1a9fbe76c9
	faddp	ST(1), ST(0)
	call	__ftol2_sse
; Line 1570
	fld	ST(0)
	fmul	ST(0), ST(5)
	mov	ebx, eax
	fld	ST(2)
	fmul	QWORD PTR __real@3fc597f62b6ae7d5
	fld	ST(4)
	fmul	ST(0), ST(6)
	faddp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fld	QWORD PTR __real@4060000000000000
	fadd	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
; Line 1571
	fxch	ST(2)
	fmul	ST(0), ST(5)
	mov	DWORD PTR _cu$[esp+60], eax
	fxch	ST(3)
	fmul	QWORD PTR __real@3fdacbfb15b573eb
	fsubp	ST(3), ST(0)
	fmul	QWORD PTR __real@3fb4d013a92a3055
	fsubp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	call	__ftol2_sse
; Line 1575
	test	ebx, ebx
	jge	SHORT $LN101@PDJPG_Enco
	xor	ebx, ebx
	jmp	SHORT $LN99@PDJPG_Enco
$LN101@PDJPG_Enco:
	cmp	ebx, 255				; 000000ffH
	jle	SHORT $LN99@PDJPG_Enco
	mov	ebx, 255				; 000000ffH
$LN99@PDJPG_Enco:
; Line 1576
	mov	ecx, DWORD PTR _cu$[esp+60]
	test	ecx, ecx
	jge	SHORT $LN105@PDJPG_Enco
	mov	DWORD PTR _cu$[esp+60], 0
	jmp	SHORT $LN103@PDJPG_Enco
$LN105@PDJPG_Enco:
	cmp	ecx, 255				; 000000ffH
	jle	SHORT $LN103@PDJPG_Enco
	mov	DWORD PTR _cu$[esp+60], 255		; 000000ffH
$LN103@PDJPG_Enco:
; Line 1577
	test	eax, eax
	jge	SHORT $LN109@PDJPG_Enco
	xor	eax, eax
	jmp	SHORT $LN107@PDJPG_Enco
$LN109@PDJPG_Enco:
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN107@PDJPG_Enco
	mov	eax, 255				; 000000ffH
$LN107@PDJPG_Enco:
; Line 1579
	mov	ecx, DWORD PTR tv1760[esp+64]
	mov	dl, BYTE PTR _cu$[esp+60]
	mov	BYTE PTR [ecx+ebp], bl
	mov	ecx, DWORD PTR tv1764[esp+64]
	mov	BYTE PTR [ebp], dl
	mov	BYTE PTR [ecx+ebp], al
	mov	eax, DWORD PTR _j$[esp+64]
	inc	eax
	inc	ebp
	cmp	eax, DWORD PTR _xs$[esp+60]
	mov	DWORD PTR _j$[esp+64], eax
	jl	$LN171@PDJPG_Enco
$LN62@PDJPG_Enco:
; Line 1561
	mov	edx, DWORD PTR tv1814[esp+64]
	add	DWORD PTR tv1808[esp+64], edx
	add	DWORD PTR tv1790[esp+64], edi
	sub	DWORD PTR tv1174[esp+64], 1
	jne	$LN63@PDJPG_Enco
	fstp	ST(1)
	fstp	ST(0)
$LN61@PDJPG_Enco:
; Line 1582
	mov	ebx, DWORD PTR _ys3$[esp+64]
	test	ebx, ebx
	jle	$LN172@PDJPG_Enco
	mov	eax, DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9
	mov	ecx, DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9
	mov	ebp, eax
	inc	ecx
	mov	DWORD PTR tv2636[esp+64], eax
	add	eax, edi
	mov	DWORD PTR tv2615[esp+64], ebp
	mov	DWORD PTR tv2646[esp+64], ecx
	mov	DWORD PTR tv2648[esp+64], eax
	mov	DWORD PTR tv2591[esp+64], ebx
	npad	8
$LL179@PDJPG_Enco:
; Line 1583
	cmp	DWORD PTR _xs3$[esp+64], 0
	jle	$LN56@PDJPG_Enco
	mov	eax, DWORD PTR tv2636[esp+64]
	mov	edx, DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9
	mov	ebx, DWORD PTR tv2648[esp+64]
	mov	DWORD PTR tv2038[esp+60], eax
	mov	eax, DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9
	sub	edx, eax
	sub	eax, DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9
	mov	DWORD PTR tv1764[esp+64], edx
	mov	edx, DWORD PTR _xs3$[esp+64]
	mov	DWORD PTR tv2496[esp+64], eax
	mov	DWORD PTR tv2493[esp+64], edx
	npad	6
$LL54@PDJPG_Enco:
; Line 1589
	movzx	edx, BYTE PTR [ecx+edi]
	movzx	eax, BYTE PTR [edi+ecx-1]
	add	eax, edx
	movzx	edx, BYTE PTR [ecx-1]
	add	eax, edx
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	cdq
	and	edx, 3
	add	eax, edx
	mov	edx, DWORD PTR tv2496[esp+64]
	sar	eax, 2
	mov	BYTE PTR [edx+ebp], al
; Line 1595
	movzx	edx, BYTE PTR [ebx+1]
	mov	eax, DWORD PTR tv1764[esp+64]
	movzx	eax, BYTE PTR [eax+ecx]
	add	eax, edx
	mov	edx, DWORD PTR tv2038[esp+60]
	movzx	edx, BYTE PTR [edx]
	add	DWORD PTR tv2038[esp+60], 2
	add	eax, edx
	movzx	edx, BYTE PTR [ebx]
	add	eax, edx
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	BYTE PTR [ebp], al
	add	ebx, 2
	add	ecx, 2
	inc	ebp
	sub	DWORD PTR tv2493[esp+64], 1
	jne	SHORT $LL54@PDJPG_Enco
; Line 1583
	mov	ebx, DWORD PTR _ys3$[esp+64]
$LN56@PDJPG_Enco:
; Line 1582
	mov	ebp, DWORD PTR tv2615[esp+64]
	mov	ecx, DWORD PTR tv2646[esp+64]
	add	ebp, DWORD PTR _xs3$[esp+64]
	lea	eax, DWORD PTR [edi+edi]
	add	DWORD PTR tv2648[esp+64], eax
	add	DWORD PTR tv2636[esp+64], eax
	add	ecx, eax
	sub	DWORD PTR tv2591[esp+64], 1
	mov	DWORD PTR tv2615[esp+64], ebp
	mov	DWORD PTR tv2646[esp+64], ecx
	jne	$LL179@PDJPG_Enco
$LN172@PDJPG_Enco:
; Line 1601
	mov	eax, DWORD PTR _ys2$[esp+64]
	mov	ecx, DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9
	mov	edx, DWORD PTR ?yb@?1??PDJPG_EncodeCtx@@9@9
	push	eax
	push	edi
	push	ecx
	push	edx
	call	_PDJPG_FilterImageDCT
; Line 1602
	mov	ebp, DWORD PTR _xs3$[esp+80]
	mov	eax, DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9
	mov	ecx, DWORD PTR ?ub@?1??PDJPG_EncodeCtx@@9@9
	push	ebx
	push	ebp
	push	eax
	push	ecx
	call	_PDJPG_FilterImageDCT
; Line 1603
	mov	edx, DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9
	mov	eax, DWORD PTR ?vb@?1??PDJPG_EncodeCtx@@9@9
	push	ebx
	push	ebp
	push	edx
	push	eax
	call	_PDJPG_FilterImageDCT
; Line 1606
	fild	DWORD PTR _qf$[esp+108]
	mov	eax, edi
	cdq
	fdiv	QWORD PTR __real@4059000000000000
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	mov	eax, DWORD PTR _ys2$[esp+112]
	cdq
	and	edx, 7
	add	eax, edx
	mov	edi, eax
	sar	ecx, 3
	sar	edi, 3
	add	esp, 44					; 0000002cH
	lea	eax, DWORD PTR [esi+6164]
	mov	DWORD PTR tv1370[esp+68], ecx
	imul	edi, ecx
	fstp	DWORD PTR tv1368[esp+64]
	fld	DWORD PTR tv1368[esp+64]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9
	push	eax
	push	edi
	push	ecx
	mov	DWORD PTR tv1371[esp+80], edi
	call	_PDJPG_MakeQuantTabInput
; Line 1608
	mov	eax, ebx
	cdq
; Line 1609
	fld	DWORD PTR tv1368[esp+76]
	and	edx, 7
	fstp	DWORD PTR [esp+12]
	add	eax, edx
	mov	ecx, eax
	mov	eax, ebp
	cdq
	and	edx, 7
	add	eax, edx
	mov	edx, DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9
	sar	eax, 3
	sar	ecx, 3
	mov	ebx, eax
	imul	ebx, ecx
	add	esp, 12					; 0000000cH
	lea	ebp, DWORD PTR [esi+6228]
	push	ebp
	push	ebx
	push	edx
	mov	DWORD PTR tv1372[esp+80], ecx
	mov	DWORD PTR tv1373[esp+76], eax
	mov	DWORD PTR tv1374[esp+80], ebx
	call	_PDJPG_MakeQuantTabInput
; Line 1610
	add	esp, 12					; 0000000cH
	fld	DWORD PTR tv1368[esp+64]
	lea	eax, DWORD PTR [esi+6292]
	fstp	DWORD PTR [esp]
	push	eax
	push	ebx
	mov	ecx, DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9
	push	ecx
	call	_PDJPG_MakeQuantTabInput
	add	esp, 16					; 00000010H
	mov	ecx, ebp
	mov	ebx, 16					; 00000010H
	npad	4
$LL51@PDJPG_Enco:
; Line 1611
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR [ecx+64]
	add	eax, edx
	cdq
	sub	eax, edx
	movzx	edx, BYTE PTR [ecx+1]
	sar	eax, 1
	mov	BYTE PTR [ecx], al
	movzx	eax, BYTE PTR [ecx+65]
	add	eax, edx
	cdq
	sub	eax, edx
	movzx	edx, BYTE PTR [ecx+2]
	sar	eax, 1
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [ecx+66]
	add	eax, edx
	cdq
	sub	eax, edx
	movzx	edx, BYTE PTR [ecx+3]
	sar	eax, 1
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [ecx+67]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR [ecx+3], al
	add	ecx, 4
	sub	ebx, 1
	jne	SHORT $LL51@PDJPG_Enco
; Line 1613
	push	ebx
	push	esi
	call	_PDJPG_SetupQuantTabDivFP
; Line 1614
	push	1
	push	esi
	call	_PDJPG_SetupQuantTabDivFP
	add	esp, 16					; 00000010H
; Line 1621
	cmp	DWORD PTR [esi+7800], ebx
	je	SHORT $LN205@PDJPG_Enco
; Line 1623
	xor	ebp, ebp
; Line 1624
	test	edi, edi
	jle	SHORT $LN45@PDJPG_Enco
; Line 1623
	mov	ebx, DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9
$LL47@PDJPG_Enco:
; Line 1626
	push	0
	push	ebx
	push	ebx
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 1627
	sub	WORD PTR [ebx], bp
	movzx	eax, WORD PTR [ebx]
	cwde
	add	esp, 16					; 00000010H
	add	ebp, eax
	sub	ebx, -128				; ffffff80H
	sub	edi, 1
	jne	SHORT $LL47@PDJPG_Enco
$LN45@PDJPG_Enco:
; Line 1631
	cmp	DWORD PTR [esi+7800], 0
	jne	$LN41@PDJPG_Enco
$LN205@PDJPG_Enco:
; Line 1633
	xor	edi, edi
; Line 1634
	cmp	DWORD PTR tv1372[esp+64], edi
	jl	$LN41@PDJPG_Enco
	mov	ecx, DWORD PTR tv1370[esp+64]
	mov	eax, ecx
	shl	eax, 8
	mov	DWORD PTR tv3533[esp+64], eax
	mov	eax, DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9
	shl	ecx, 7
	mov	DWORD PTR tv3427[esp+64], eax
	add	eax, ecx
	mov	ecx, DWORD PTR tv1372[esp+64]
	mov	DWORD PTR tv3523[esp+64], eax
	sub	eax, -128				; ffffff80H
	inc	ecx
	mov	DWORD PTR tv3529[esp+64], eax
	mov	DWORD PTR tv3556[esp+64], ecx
	npad	6
$LL43@PDJPG_Enco:
; Line 1635
	cmp	DWORD PTR tv1373[esp+60], 0
	jle	$LN42@PDJPG_Enco
	mov	ebx, DWORD PTR tv3427[esp+64]
	mov	edx, DWORD PTR tv3523[esp+64]
	mov	eax, DWORD PTR tv3529[esp+64]
	mov	ecx, DWORD PTR tv1373[esp+60]
	mov	DWORD PTR tv3218[esp+60], edx
	lea	ebp, DWORD PTR [ebx+128]
	mov	DWORD PTR tv3239[esp+64], eax
	mov	DWORD PTR tv3333[esp+64], ecx
	npad	3
$LL40@PDJPG_Enco:
; Line 1638
	push	0
	push	ebx
	push	ebx
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 1639
	sub	WORD PTR [ebx], di
	movzx	eax, WORD PTR [ebx]
; Line 1642
	push	0
	push	ebp
	movsx	edx, ax
	push	ebp
	push	esi
	add	edi, edx
	call	_PDJHUFF_QuantBlock
; Line 1643
	sub	WORD PTR [ebp], di
	movzx	eax, WORD PTR [ebp]
	cwde
	add	edi, eax
; Line 1646
	mov	eax, DWORD PTR tv3218[esp+92]
	push	0
	push	eax
	push	eax
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 1647
	mov	eax, DWORD PTR tv3218[esp+108]
	sub	WORD PTR [eax], di
	movzx	eax, WORD PTR [eax]
	movsx	ecx, ax
; Line 1650
	mov	eax, DWORD PTR tv3239[esp+112]
	push	0
	push	eax
	push	eax
	push	esi
	add	edi, ecx
	call	_PDJHUFF_QuantBlock
; Line 1651
	mov	eax, DWORD PTR tv3239[esp+128]
	sub	WORD PTR [eax], di
	movzx	ecx, WORD PTR [eax]
	add	DWORD PTR tv3218[esp+124], 256		; 00000100H
	movsx	edx, cx
	add	eax, 256				; 00000100H
	add	esp, 64					; 00000040H
	add	edi, edx
	add	ebx, 256				; 00000100H
	add	ebp, 256				; 00000100H
	sub	DWORD PTR tv3333[esp+64], 1
	mov	DWORD PTR tv3239[esp+64], eax
	jne	$LL40@PDJPG_Enco
$LN42@PDJPG_Enco:
; Line 1634
	mov	eax, DWORD PTR tv3533[esp+64]
	add	DWORD PTR tv3427[esp+64], eax
	add	DWORD PTR tv3523[esp+64], eax
	add	DWORD PTR tv3529[esp+64], eax
	sub	DWORD PTR tv3556[esp+64], 1
	jne	$LL43@PDJPG_Enco
$LN41@PDJPG_Enco:
; Line 1656
	mov	ebx, DWORD PTR tv1374[esp+64]
	xor	ebp, ebp
	cmp	ebx, ebp
	mov	DWORD PTR _l$[esp+60], ebp
	jle	SHORT $LN173@PDJPG_Enco
	mov	edi, DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9
	mov	eax, DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9
	sub	eax, edi
	mov	DWORD PTR tv3622[esp+64], eax
	mov	DWORD PTR tv3565[esp+64], ebx
$LL37@PDJPG_Enco:
; Line 1658
	mov	eax, DWORD PTR tv3622[esp+64]
	lea	ebx, DWORD PTR [eax+edi]
	push	1
	push	ebx
	push	ebx
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 1659
	push	1
	push	edi
	push	edi
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 1660
	sub	WORD PTR [ebx], bp
	movzx	eax, WORD PTR [ebx]
	movsx	ecx, ax
	add	ebp, ecx
; Line 1661
	mov	ecx, DWORD PTR _l$[esp+92]
	sub	WORD PTR [edi], cx
	movzx	eax, WORD PTR [edi]
	movsx	edx, ax
	add	ecx, edx
	add	esp, 32					; 00000020H
	sub	edi, -128				; ffffff80H
	sub	DWORD PTR tv3565[esp+64], 1
	mov	DWORD PTR _l$[esp+60], ecx
	jne	SHORT $LL37@PDJPG_Enco
; Line 1656
	mov	ebx, DWORD PTR tv1374[esp+64]
$LN173@PDJPG_Enco:
; Line 1671
	mov	ebp, DWORD PTR ?ydb@?1??PDJPG_EncodeCtx@@9@9
	xor	eax, eax
	mov	ecx, 256				; 00000100H
	mov	edi, OFFSET ?dcs@?1??PDJPG_EncodeCtx@@9@9
	rep stosd
	mov	ecx, 256				; 00000100H
	mov	edi, OFFSET ?acs@?1??PDJPG_EncodeCtx@@9@9
	rep stosd
	mov	ecx, 256				; 00000100H
	mov	edi, OFFSET ?dcsuv@?1??PDJPG_EncodeCtx@@9@9
	rep stosd
	mov	ecx, 256				; 00000100H
	mov	edi, OFFSET ?acsuv@?1??PDJPG_EncodeCtx@@9@9
	rep stosd
; Line 1673
	mov	eax, DWORD PTR tv1371[esp+64]
	test	eax, eax
	jle	SHORT $LN20@PDJPG_Enco
	mov	edi, ebp
	mov	ebx, eax
$LL22@PDJPG_Enco:
	push	OFFSET ?acs@?1??PDJPG_EncodeCtx@@9@9
	push	OFFSET ?dcs@?1??PDJPG_EncodeCtx@@9@9
	push	edi
	call	_PDJHUFF_StatBlock
	add	esp, 12					; 0000000cH
	sub	edi, -128				; ffffff80H
	sub	ebx, 1
	jne	SHORT $LL22@PDJPG_Enco
	mov	ebx, DWORD PTR tv1374[esp+64]
$LN20@PDJPG_Enco:
; Line 1674
	test	ebx, ebx
	jle	SHORT $LN14@PDJPG_Enco
	mov	edi, DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9
	npad	6
$LL19@PDJPG_Enco:
	push	OFFSET ?acsuv@?1??PDJPG_EncodeCtx@@9@9
	push	OFFSET ?dcsuv@?1??PDJPG_EncodeCtx@@9@9
	push	edi
	call	_PDJHUFF_StatBlock
	add	esp, 12					; 0000000cH
	sub	edi, -128				; ffffff80H
	sub	ebx, 1
	jne	SHORT $LL19@PDJPG_Enco
	mov	ebx, DWORD PTR tv1374[esp+64]
; Line 1675
	test	ebx, ebx
	jle	SHORT $LN14@PDJPG_Enco
	mov	edi, DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9
	npad	7
$LL16@PDJPG_Enco:
	push	OFFSET ?acsuv@?1??PDJPG_EncodeCtx@@9@9
	push	OFFSET ?dcsuv@?1??PDJPG_EncodeCtx@@9@9
	push	edi
	call	_PDJHUFF_StatBlock
	add	esp, 12					; 0000000cH
	sub	edi, -128				; ffffff80H
	sub	ebx, 1
	jne	SHORT $LL16@PDJPG_Enco
$LN14@PDJPG_Enco:
; Line 1677
	push	16					; 00000010H
	lea	eax, DWORD PTR [esi+4096]
	push	eax
	push	256					; 00000100H
	push	OFFSET ?dcs@?1??PDJPG_EncodeCtx@@9@9
	call	_PDJHUFF_BuildLengths
; Line 1678
	push	16					; 00000010H
	lea	eax, DWORD PTR [esi+4352]
	push	eax
	push	256					; 00000100H
	push	OFFSET ?acs@?1??PDJPG_EncodeCtx@@9@9
	call	_PDJHUFF_BuildLengths
; Line 1679
	push	16					; 00000010H
	lea	eax, DWORD PTR [esi+4608]
	push	eax
	push	256					; 00000100H
	push	OFFSET ?dcsuv@?1??PDJPG_EncodeCtx@@9@9
	call	_PDJHUFF_BuildLengths
; Line 1680
	push	16					; 00000010H
	lea	eax, DWORD PTR [esi+4864]
	push	eax
	push	256					; 00000100H
	push	OFFSET ?acsuv@?1??PDJPG_EncodeCtx@@9@9
	call	_PDJHUFF_BuildLengths
; Line 1682
	mov	eax, DWORD PTR _obuf$[esp+124]
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1683
	xor	edi, edi
	mov	DWORD PTR _pdjhuff_win, edi
; Line 1684
	mov	DWORD PTR _pdjhuff_pos, edi
; Line 1686
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	add	esp, 64					; 00000040H
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1689
	push	edi
	mov	BYTE PTR [eax], 216			; 000000d8H
	inc	DWORD PTR _pdjhuff_ct
	push	esi
	call	_PDJPG_EmitDQT
	add	esp, 8
; Line 1690
	cmp	DWORD PTR [esi+7800], edi
	jne	SHORT $LN13@PDJPG_Enco
	push	1
	push	esi
	call	_PDJPG_EmitDQT
	add	esp, 8
$LN13@PDJPG_Enco:
; Line 1692
	mov	eax, DWORD PTR _ys$[esp+60]
	mov	ecx, DWORD PTR _xs$[esp+60]
	push	eax
	push	ecx
	push	esi
	call	_PDJPG_EmitSOF
; Line 1694
	push	edi
	push	esi
	call	_PDJPG_EmitDHT
; Line 1695
	push	1
	push	esi
	call	_PDJPG_EmitDHT
	add	esp, 28					; 0000001cH
; Line 1696
	cmp	DWORD PTR [esi+7800], edi
	jne	SHORT $LN175@PDJPG_Enco
; Line 1698
	push	2
	push	esi
	call	_PDJPG_EmitDHT
; Line 1699
	push	3
	push	esi
	call	_PDJPG_EmitDHT
	add	esp, 16					; 00000010H
$LN175@PDJPG_Enco:
; Line 1702
	push	esi
	call	_PDJPG_EmitSOS
	add	esp, 4
; Line 1704
	cmp	DWORD PTR [esi+7800], edi
	je	SHORT $LN11@PDJPG_Enco
; Line 1707
	cmp	DWORD PTR tv1371[esp+64], edi
	jle	$LN4@PDJPG_Enco
	mov	ebx, DWORD PTR tv1371[esp+64]
	mov	edi, ebp
	npad	6
$LL10@PDJPG_Enco:
	push	1
	push	0
	push	edi
	push	esi
	call	_PDJHUFF_EncodeBlock
	add	esp, 16					; 00000010H
	sub	edi, -128				; ffffff80H
	sub	ebx, 1
	jne	SHORT $LL10@PDJPG_Enco
; Line 1708
	jmp	$LN4@PDJPG_Enco
$LN11@PDJPG_Enco:
; Line 1710
	mov	edx, DWORD PTR tv1372[esp+64]
	cmp	edx, edi
	jl	$LN4@PDJPG_Enco
	mov	eax, DWORD PTR tv1370[esp+64]
	mov	ecx, eax
	shl	ecx, 8
	shl	eax, 7
	add	eax, ebp
	mov	DWORD PTR tv3533[esp+64], ecx
	mov	ecx, DWORD PTR tv1373[esp+60]
	mov	DWORD PTR tv4431[esp+64], eax
	sub	eax, -128				; ffffff80H
	shl	ecx, 7
	mov	DWORD PTR tv4437[esp+64], eax
	mov	eax, DWORD PTR ?vdb@?1??PDJPG_EncodeCtx@@9@9
	mov	DWORD PTR tv4445[esp+64], ecx
	mov	ecx, DWORD PTR ?udb@?1??PDJPG_EncodeCtx@@9@9
	sub	eax, ecx
	inc	edx
	mov	DWORD PTR tv4361[esp+64], ebp
	mov	DWORD PTR tv4364[esp+64], ecx
	mov	DWORD PTR tv4440[esp+64], eax
	mov	DWORD PTR tv4480[esp+64], edx
	npad	3
$LL6@PDJPG_Enco:
; Line 1711
	cmp	DWORD PTR tv1373[esp+60], 0
	jle	$LN5@PDJPG_Enco
	mov	eax, DWORD PTR tv4364[esp+64]
	mov	edx, DWORD PTR tv4440[esp+64]
	mov	edi, DWORD PTR tv4361[esp+64]
	mov	ecx, DWORD PTR tv1373[esp+60]
	mov	ebp, DWORD PTR tv4431[esp+64]
	add	edx, eax
	mov	DWORD PTR tv4072[esp+60], eax
	mov	eax, DWORD PTR tv4437[esp+64]
	mov	DWORD PTR tv4070[esp+60], edx
	lea	ebx, DWORD PTR [edi+128]
	mov	DWORD PTR tv4092[esp+60], eax
	mov	DWORD PTR tv4218[esp+64], ecx
	npad	5
$LL3@PDJPG_Enco:
; Line 1713
	push	1
	push	0
	push	edi
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 1714
	push	1
	push	0
	push	ebx
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 1715
	push	1
	push	0
	push	ebp
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 1716
	mov	edx, DWORD PTR tv4092[esp+108]
	push	1
	push	0
	push	edx
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 1719
	mov	eax, DWORD PTR tv4072[esp+124]
	add	esp, 64					; 00000040H
	push	3
	push	2
	push	eax
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 1720
	mov	ecx, DWORD PTR tv4070[esp+76]
	push	3
	push	2
	push	ecx
	push	esi
	call	_PDJHUFF_EncodeBlock
	add	DWORD PTR tv4092[esp+92], 256		; 00000100H
	mov	eax, 128				; 00000080H
	add	DWORD PTR tv4072[esp+92], eax
	add	DWORD PTR tv4070[esp+92], eax
	add	esp, 32					; 00000020H
	add	edi, 256				; 00000100H
	add	ebx, 256				; 00000100H
	add	ebp, 256				; 00000100H
	sub	DWORD PTR tv4218[esp+64], 1
	jne	$LL3@PDJPG_Enco
$LN5@PDJPG_Enco:
; Line 1710
	mov	eax, DWORD PTR tv3533[esp+64]
	mov	edx, DWORD PTR tv4445[esp+64]
	add	DWORD PTR tv4364[esp+64], edx
	add	DWORD PTR tv4361[esp+64], eax
	add	DWORD PTR tv4431[esp+64], eax
	add	DWORD PTR tv4437[esp+64], eax
	sub	DWORD PTR tv4480[esp+64], 1
	jne	$LL6@PDJPG_Enco
$LN4@PDJPG_Enco:
; Line 1724
	push	esi
	call	_PDJHUFF_FlushBits
; Line 1726
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	add	esp, 4
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1727
	mov	BYTE PTR [eax], 217			; 000000d9H
	mov	eax, DWORD PTR _pdjhuff_ct
	pop	edi
	pop	esi
	inc	eax
	pop	ebp
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 1735
	sub	eax, DWORD PTR _obuf$[esp+48]
	pop	ebx
; Line 1738
	add	esp, 48					; 00000030H
	ret	0
_PDJPG_EncodeCtx ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_AllocContext
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_AllocContext
_TEXT	SEGMENT
_PDJPG_AllocContext PROC				; COMDAT
; Line 1741
	push	esi
; Line 1744
	push	11936					; 00002ea0H
	call	_malloc
; Line 1745
	push	11936					; 00002ea0H
	mov	esi, eax
	push	0
	push	esi
	call	_memset
	add	esp, 16					; 00000010H
; Line 1746
	mov	eax, esi
	pop	esi
; Line 1747
	ret	0
_PDJPG_AllocContext ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_FreeContext
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_FreeContext
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_PDJPG_FreeContext PROC					; COMDAT
; Line 1750
	push	esi
; Line 1751
	mov	esi, DWORD PTR _ctx$[esp]
	mov	eax, DWORD PTR [esi+7808]
	test	eax, eax
	je	SHORT $LN2@PDJPG_Free@2
; Line 1753
	push	eax
	call	_free
; Line 1754
	mov	eax, DWORD PTR [esi+7812]
	push	eax
	call	_free
; Line 1755
	mov	ecx, DWORD PTR [esi+7816]
	push	ecx
	call	_free
; Line 1756
	mov	edx, DWORD PTR [esi+7820]
	push	edx
	call	_free
; Line 1757
	mov	eax, DWORD PTR [esi+7824]
	push	eax
	call	_free
; Line 1758
	mov	ecx, DWORD PTR [esi+7828]
	push	ecx
	call	_free
	add	esp, 24					; 00000018H
$LN2@PDJPG_Free@2:
; Line 1761
	mov	eax, DWORD PTR [esi+7796]
	test	eax, eax
	je	SHORT $LN1@PDJPG_Free@2
; Line 1762
	push	eax
	call	_free
	add	esp, 4
$LN1@PDJPG_Free@2:
; Line 1764
	push	esi
	call	_free
	add	esp, 4
	pop	esi
; Line 1765
	ret	0
_PDJPG_FreeContext ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_Encode
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_Encode
_TEXT	SEGMENT
_ibuf$ = 8						; size = 4
_obuf$ = 12						; size = 4
_xs$ = 16						; size = 4
_ys$ = 20						; size = 4
_qf$ = 24						; size = 4
_PDJPG_Encode PROC					; COMDAT
; Line 1769
	push	esi
	push	edi
; Line 1773
	push	11936					; 00002ea0H
	call	_malloc
	push	11936					; 00002ea0H
	mov	esi, eax
	push	0
	push	esi
	call	_memset
; Line 1774
	mov	eax, DWORD PTR _qf$[esp+20]
	mov	ecx, DWORD PTR _ys$[esp+20]
	mov	edx, DWORD PTR _xs$[esp+20]
	push	eax
	mov	eax, DWORD PTR _obuf$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _ibuf$[esp+28]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	_PDJPG_EncodeCtx
; Line 1775
	push	esi
	mov	edi, eax
	call	_PDJPG_FreeContext
	add	esp, 44					; 0000002cH
; Line 1776
	mov	eax, edi
	pop	edi
	pop	esi
; Line 1777
	ret	0
_PDJPG_Encode ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_FlushEncodeFast
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_FlushEncodeFast
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_PDJPG_FlushEncodeFast PROC				; COMDAT
; Line 1781
	mov	eax, DWORD PTR _ctx$[esp-4]
	xor	ecx, ecx
	cmp	eax, ecx
	je	SHORT $LN2@PDJPG_Flus
; Line 1782
	mov	DWORD PTR [eax+7804], ecx
; Line 1783
	mov	DWORD PTR [eax+7452], ecx
$LN2@PDJPG_Flus:
; Line 1784
	ret	0
_PDJPG_FlushEncodeFast ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_SetContextAlphaColor
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_SetContextAlphaColor
_TEXT	SEGMENT
tv177 = 8						; size = 4
_ctx$ = 8						; size = 4
_cr$ = 12						; size = 4
_cg$ = 16						; size = 4
_cb$ = 20						; size = 4
_ca$ = 24						; size = 4
_PDJPG_SetContextAlphaColor PROC			; COMDAT
; Line 1788
	push	esi
; Line 1790
	mov	esi, DWORD PTR _ctx$[esp]
	test	esi, esi
	je	$LN3@PDJPG_SetC
; Line 1792
	mov	edx, DWORD PTR _ca$[esp]
	cmp	edx, 1
	jge	SHORT $LN1@PDJPG_SetC
; Line 1794
	mov	DWORD PTR [esi+7444], 0
	pop	esi
; Line 1807
	ret	0
$LN1@PDJPG_SetC:
	push	ebx
; Line 1798
	mov	eax, DWORD PTR _cg$[esp+4]
	mov	ecx, DWORD PTR _cr$[esp+4]
	push	ebp
	mov	ebx, edx
	shl	ebx, 8
	push	edi
	mov	edi, DWORD PTR _cb$[esp+12]
	add	ebx, edi
	shl	ebx, 8
	add	ebx, eax
	shl	ebx, 8
	add	ebx, ecx
	mov	DWORD PTR [esi+7444], ebx
; Line 1800
	mov	ebx, ecx
	imul	ebx, 19595				; 00004c8bH
	mov	ebp, edi
	imul	ebp, 7471				; 00001d2fH
	add	ebx, ebp
	mov	ebp, eax
	imul	ebp, 38470				; 00009646H
; Line 1803
	add	ebx, ebp
	sar	ebx, 16					; 00000010H
	mov	BYTE PTR [esi+7448], bl
	mov	ebx, eax
	imul	eax, 27440				; 00006b30H
	imul	ebx, 21712				; 000054d0H
	mov	edx, ecx
	imul	edx, -11056				; ffffd4d0H
; Line 1804
	sub	edx, ebx
	mov	ebx, edi
	shl	ebx, 15					; 0000000fH
	add	edx, ebx
	mov	ebx, edi
	imul	ebx, -5328				; ffffeb30H
; Line 1805
	sub	ebx, eax
	shl	ecx, 15					; 0000000fH
	sar	edx, 16					; 00000010H
	add	ebx, ecx
	sub	dl, -128				; ffffff80H
	sar	ebx, 16					; 00000010H
	pop	edi
	sub	bl, -128				; ffffff80H
	mov	BYTE PTR [esi+7449], dl
	mov	edx, DWORD PTR _ca$[esp+8]
	pop	ebp
	mov	BYTE PTR [esi+7450], bl
; Line 1806
	mov	BYTE PTR [esi+7451], dl
	pop	ebx
$LN3@PDJPG_SetC:
	pop	esi
; Line 1807
	ret	0
_PDJPG_SetContextAlphaColor ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_ConvertImageYUV
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_ConvertImageYUV
_TEXT	SEGMENT
_ctv$ = -120						; size = 4
_ctu$ = -116						; size = 4
_cty2$ = -112						; size = 4
_cy$ = -108						; size = 4
_cty1$ = -108						; size = 4
_psz$ = -104						; size = 4
_cv$ = -100						; size = 4
_crd$ = -96						; size = 4
_crb$ = -92						; size = 4
_cgd$ = -88						; size = 4
_cgc$ = -84						; size = 4
_cgb$ = -80						; size = 4
tv3083 = -76						; size = 4
_cga$ = -76						; size = 4
_cyd$ = -72						; size = 4
_cbd$ = -72						; size = 4
_cyc$ = -68						; size = 4
_cbc$ = -68						; size = 4
_cyb$ = -64						; size = 4
_cbb$ = -64						; size = 4
_cya$ = -60						; size = 4
_cba$ = -60						; size = 4
tv3650 = -56						; size = 4
_crc$ = -56						; size = 4
tv3652 = -52						; size = 4
tv2428 = -52						; size = 4
_cra$ = -52						; size = 4
tv2445 = -48						; size = 4
tv3594 = -44						; size = 4
tv2103 = -44						; size = 4
_cad$ = -44						; size = 4
tv3596 = -40						; size = 4
tv2318 = -40						; size = 4
_cac$ = -40						; size = 4
tv3322 = -36						; size = 4
tv2251 = -36						; size = 4
_cab$ = -36						; size = 4
tv3238 = -32						; size = 4
tv2179 = -32						; size = 4
_caa$ = -32						; size = 4
tv3850 = -28						; size = 4
tv2389 = -28						; size = 4
tv3916 = -24						; size = 4
tv3666 = -24						; size = 4
tv2107 = -24						; size = 4
tv3799 = -20						; size = 4
tv3750 = -20						; size = 4
tv2392 = -20						; size = 4
tv3669 = -16						; size = 4
_cse$ = -16						; size = 4
tv3942 = -12						; size = 4
tv1131 = -12						; size = 4
tv3756 = -8						; size = 4
tv2451 = -8						; size = 4
_n$ = -8						; size = 4
_psz2$ = -4						; size = 4
_cu$ = -4						; size = 4
_ctx$ = 8						; size = 4
_ibuf$ = 12						; size = 4
_xs$ = 16						; size = 4
_ys$ = 20						; size = 4
_pf$ = 24						; size = 4
_xs2$ = 28						; size = 4
_ys2$ = 32						; size = 4
_xs3$ = 36						; size = 4
_ys3$ = 40						; size = 4
_PDJPG_ConvertImageYUV PROC				; COMDAT
; Line 1839
	mov	eax, DWORD PTR _pf$[esp-4]
	sub	esp, 120				; 00000078H
	push	ebx
	push	ebp
	push	esi
	push	edi
	xor	ecx, ecx
	mov	edi, 3
	lea	esi, DWORD PTR [edi+1]
	cmp	eax, ecx
	jne	$LN68@PDJPG_Conv
	mov	ebp, DWORD PTR _ctx$[esp+132]
	cmp	DWORD PTR [ebp+7444], ecx
	jne	$LN69@PDJPG_Conv
; Line 1841
	mov	esi, DWORD PTR _ys$[esp+132]
	lea	eax, DWORD PTR [esi+1]
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 1842
	cmp	eax, ecx
	jle	$LN36@PDJPG_Conv
	mov	edx, DWORD PTR _xs2$[esp+132]
	lea	edi, DWORD PTR [edx+edx]
	mov	DWORD PTR tv2251[esp+136], edx
	lea	edx, DWORD PTR [esi-1]
	mov	DWORD PTR tv2318[esp+136], edx
	mov	edx, DWORD PTR _xs$[esp+132]
	lea	esi, DWORD PTR [esi*4-4]
	imul	esi, edx
	mov	ebx, edx
	neg	ebx
	add	ebx, ebx
	add	ebx, ebx
	add	ebx, ebx
	add	esi, DWORD PTR _ibuf$[esp+132]
	mov	DWORD PTR tv2103[esp+136], ecx
	mov	DWORD PTR tv2107[esp+136], ecx
	mov	DWORD PTR tv2179[esp+136], ecx
	mov	DWORD PTR tv2445[esp+136], edi
	mov	DWORD PTR tv2451[esp+136], ebx
	mov	DWORD PTR tv2389[esp+136], esi
	mov	DWORD PTR tv2428[esp+136], eax
	jmp	SHORT $LN51@PDJPG_Conv
	npad	1
$LL77@PDJPG_Conv:
; Line 1841
	mov	edx, DWORD PTR _xs$[esp+132]
$LN51@PDJPG_Conv:
; Line 1850
	mov	edi, DWORD PTR tv2251[esp+136]
	lea	eax, DWORD PTR [esi+edx*4]
	mov	edx, DWORD PTR tv2179[esp+136]
	mov	DWORD PTR tv2392[esp+136], eax
	mov	eax, DWORD PTR [ebp+7808]
	add	edx, eax
	add	eax, edi
; Line 1853
	mov	edi, DWORD PTR [ebp+7812]
	add	edi, ecx
	mov	DWORD PTR _ctu$[esp+136], edi
; Line 1854
	mov	edi, DWORD PTR [ebp+7816]
	add	edi, ecx
	mov	DWORD PTR _ctv$[esp+136], edi
; Line 1856
	cmp	esi, DWORD PTR tv2392[esp+136]
	jae	$LN50@PDJPG_Conv
	mov	ecx, DWORD PTR tv2103[esp+136]
	sub	ecx, DWORD PTR tv2318[esp+136]
	mov	edi, DWORD PTR _ys$[esp+132]
	lea	ecx, DWORD PTR [ecx+edi-2]
	imul	ecx, DWORD PTR _xs$[esp+132]
	lea	edi, DWORD PTR [esi+ecx*4+2]
	jmp	SHORT $LN48@PDJPG_Conv
$LL70@PDJPG_Conv:
; Line 1844
	mov	eax, DWORD PTR _cty2$[esp+136]
	mov	edx, DWORD PTR _cty1$[esp+136]
$LN48@PDJPG_Conv:
; Line 1859
	movzx	ebx, BYTE PTR [esi+4]
	mov	DWORD PTR _crb$[esp+136], ebx
	movzx	ebx, BYTE PTR [esi+5]
	mov	DWORD PTR _cgb$[esp+136], ebx
	movzx	ebx, BYTE PTR [esi+6]
	mov	DWORD PTR _cbb$[esp+136], ebx
; Line 1860
	movzx	ebx, BYTE PTR [edi-2]
	mov	DWORD PTR _crc$[esp+136], ebx
	movzx	ebx, BYTE PTR [edi-1]
	movzx	ecx, BYTE PTR [esi+1]
	mov	DWORD PTR _cgc$[esp+136], ebx
	movzx	ebx, BYTE PTR [edi]
	movzx	ebp, BYTE PTR [esi]
	mov	DWORD PTR _cbc$[esp+136], ebx
; Line 1861
	movzx	ebx, BYTE PTR [edi+2]
	mov	DWORD PTR _crd$[esp+136], ebx
	movzx	ebx, BYTE PTR [edi+3]
	mov	DWORD PTR _cga$[esp+136], ecx
	movzx	ecx, BYTE PTR [esi+2]
	mov	DWORD PTR _cgd$[esp+136], ebx
	movzx	ebx, BYTE PTR [edi+4]
	mov	DWORD PTR _cba$[esp+136], ecx
; Line 1863
	imul	ecx, 7471				; 00001d2fH
	mov	DWORD PTR _cbd$[esp+136], ebx
	mov	ebx, ebp
	imul	ebx, 19595				; 00004c8bH
	add	ebx, ecx
	mov	ecx, DWORD PTR _cga$[esp+136]
	imul	ecx, 38470				; 00009646H
; Line 1867
	add	ebx, ecx
	mov	ecx, DWORD PTR _crb$[esp+136]
	sar	ebx, 16					; 00000010H
	imul	ecx, 19595				; 00004c8bH
	mov	BYTE PTR [edx], bl
	mov	ebx, DWORD PTR _cbb$[esp+136]
	imul	ebx, 7471				; 00001d2fH
	add	ecx, ebx
	mov	ebx, DWORD PTR _cgb$[esp+136]
	imul	ebx, 38470				; 00009646H
; Line 1868
	add	ecx, ebx
	mov	ebx, DWORD PTR _cbc$[esp+136]
	sar	ecx, 16					; 00000010H
	imul	ebx, 7471				; 00001d2fH
	mov	BYTE PTR [edx+1], cl
	inc	edx
	inc	edx
	mov	DWORD PTR _cty1$[esp+136], edx
	mov	edx, DWORD PTR _crc$[esp+136]
	mov	ecx, edx
	imul	ecx, 19595				; 00004c8bH
	add	ecx, ebx
	mov	ebx, DWORD PTR _cgc$[esp+136]
	imul	ebx, 38470				; 00009646H
; Line 1869
	add	ecx, ebx
	mov	ebx, DWORD PTR _cbd$[esp+136]
	sar	ecx, 16					; 00000010H
	imul	ebx, 7471				; 00001d2fH
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _crd$[esp+136]
	imul	ecx, 19595				; 00004c8bH
	add	ecx, ebx
	mov	ebx, DWORD PTR _cgd$[esp+136]
	imul	ebx, 38470				; 00009646H
	inc	eax
; Line 1870
	add	ecx, ebx
	sar	ecx, 16					; 00000010H
	mov	BYTE PTR [eax], cl
; Line 1873
	mov	ecx, DWORD PTR _cgd$[esp+136]
	inc	eax
	mov	DWORD PTR _cty2$[esp+136], eax
	mov	eax, DWORD PTR _crd$[esp+136]
	add	eax, edx
	mov	edx, DWORD PTR _cgc$[esp+136]
	add	eax, DWORD PTR _crb$[esp+136]
	add	ecx, edx
	add	ecx, DWORD PTR _cgb$[esp+136]
; Line 1874
	mov	edx, DWORD PTR _cbd$[esp+136]
	add	ecx, DWORD PTR _cga$[esp+136]
	add	eax, ebp
	sar	eax, 2
	sar	ecx, 2
	mov	ebx, DWORD PTR _cbc$[esp+136]
	lea	ebp, DWORD PTR [edx+ebx]
	add	ebp, DWORD PTR _cbb$[esp+136]
; Line 1876
	mov	ebx, eax
	add	ebp, DWORD PTR _cba$[esp+136]
	imul	ebx, -11056				; ffffd4d0H
	mov	edx, ecx
; Line 1877
	imul	ecx, 27440				; 00006b30H
	imul	edx, 21712				; 000054d0H
; Line 1878
	sub	ebx, edx
	sar	ebp, 2
	mov	edx, ebp
	shl	edx, 15					; 0000000fH
	add	ebx, edx
	mov	edx, DWORD PTR _ctu$[esp+136]
	inc	edx
	sar	ebx, 16					; 00000010H
	sub	bl, -128				; ffffff80H
	mov	BYTE PTR [edx-1], bl
	mov	DWORD PTR _ctu$[esp+136], edx
	mov	edx, ebp
	imul	edx, -5328				; ffffeb30H
; Line 1879
	sub	edx, ecx
	shl	eax, 15					; 0000000fH
	add	edx, eax
	mov	eax, DWORD PTR _ctv$[esp+136]
	sar	edx, 16					; 00000010H
	sub	dl, -128				; ffffff80H
	mov	BYTE PTR [eax], dl
	inc	eax
; Line 1881
	add	esi, 8
	add	edi, 8
	mov	DWORD PTR _ctv$[esp+136], eax
	cmp	esi, DWORD PTR tv2392[esp+136]
	jb	$LL70@PDJPG_Conv
	mov	ecx, DWORD PTR tv2107[esp+136]
	mov	esi, DWORD PTR tv2389[esp+136]
	mov	ebx, DWORD PTR tv2451[esp+136]
	mov	ebp, DWORD PTR _ctx$[esp+132]
$LN50@PDJPG_Conv:
	mov	eax, DWORD PTR tv2445[esp+136]
	add	DWORD PTR tv2179[esp+136], eax
	add	DWORD PTR tv2251[esp+136], eax
	add	ecx, DWORD PTR _xs3$[esp+132]
	mov	eax, 2
	sub	DWORD PTR tv2318[esp+136], eax
	sub	DWORD PTR tv2103[esp+136], eax
	add	esi, ebx
	sub	DWORD PTR tv2428[esp+136], 1
	mov	DWORD PTR tv2107[esp+136], ecx
	mov	DWORD PTR tv2389[esp+136], esi
	jne	$LL77@PDJPG_Conv
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2071
	add	esp, 120				; 00000078H
	ret	0
$LN68@PDJPG_Conv:
; Line 1886
	cmp	eax, 1
	je	$LN44@PDJPG_Conv
	cmp	eax, edi
	je	$LN44@PDJPG_Conv
	cmp	eax, esi
	je	$LN69@PDJPG_Conv
; Line 1984
	add	eax, -5					; fffffffbH
	cmp	eax, 5
	ja	SHORT $LN16@PDJPG_Conv
	jmp	DWORD PTR $LN87@PDJPG_Conv[eax*4]
$LN21@PDJPG_Conv:
; Line 1987
	mov	ebp, 6
	jmp	SHORT $LN23@PDJPG_Conv
$LN20@PDJPG_Conv:
; Line 1988
	mov	edi, 2
	mov	ebp, esi
	jmp	SHORT $LN23@PDJPG_Conv
$LN19@PDJPG_Conv:
; Line 1989
	mov	ebp, edi
	jmp	SHORT $LN23@PDJPG_Conv
$LN17@PDJPG_Conv:
; Line 1991
	mov	edi, 1
	lea	ebp, DWORD PTR [edi+1]
	jmp	SHORT $LN23@PDJPG_Conv
$LN16@PDJPG_Conv:
; Line 1992
	mov	ebp, 8
	mov	edi, esi
$LN23@PDJPG_Conv:
; Line 1995
	mov	ebx, DWORD PTR _ys$[esp+132]
	lea	eax, DWORD PTR [ebx+1]
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 1996
	cmp	eax, ecx
	mov	DWORD PTR _n$[esp+136], eax
	jle	$LN36@PDJPG_Conv
	mov	esi, DWORD PTR _xs2$[esp+132]
	mov	edx, DWORD PTR _ys$[esp+132]
	mov	DWORD PTR tv3083[esp+136], ecx
	mov	DWORD PTR tv3238[esp+136], ecx
	lea	eax, DWORD PTR [esi+esi]
	mov	DWORD PTR tv2445[esp+136], eax
	mov	ecx, ebp
	imul	ecx, esi
	mov	eax, edi
	imul	eax, DWORD PTR _xs$[esp+132]
	neg	ecx
	add	ecx, ecx
	mov	DWORD PTR tv1131[esp+136], eax
	neg	eax
	mov	DWORD PTR tv3669[esp+136], ecx
	add	eax, eax
	lea	ecx, DWORD PTR [ebx-2]
	dec	edx
	mov	ebx, ecx
	imul	ecx, edi
	imul	ecx, DWORD PTR _xs$[esp+132]
	imul	ebx, ebp
	mov	DWORD PTR tv3666[esp+136], eax
	imul	ebx, esi
	mov	eax, edx
	imul	edx, edi
	imul	edx, DWORD PTR _xs$[esp+132]
	imul	eax, ebp
	imul	eax, esi
	mov	DWORD PTR tv3322[esp+136], esi
	mov	esi, DWORD PTR _ibuf$[esp+132]
	add	ecx, esi
	add	edx, esi
	mov	DWORD PTR tv3650[esp+136], ecx
	mov	ecx, DWORD PTR _n$[esp+136]
	mov	edi, edx
	mov	edx, DWORD PTR _cu$[esp+136]
	mov	DWORD PTR tv3594[esp+136], ebx
	mov	DWORD PTR tv3596[esp+136], eax
	mov	DWORD PTR tv3652[esp+136], edi
	mov	DWORD PTR tv3750[esp+136], ecx
	jmp	SHORT $LN15@PDJPG_Conv
	npad	14
$LL74@PDJPG_Conv:
; Line 1995
	mov	esi, DWORD PTR _ibuf$[esp+132]
	mov	ebx, DWORD PTR tv3594[esp+136]
	mov	edi, DWORD PTR tv3652[esp+136]
	mov	eax, DWORD PTR tv3596[esp+136]
$LN15@PDJPG_Conv:
; Line 1998
	cmp	DWORD PTR _pf$[esp+132], 10		; 0000000aH
	jne	SHORT $LN12@PDJPG_Conv
; Line 2001
	mov	edi, ebp
	imul	edi, DWORD PTR _xs$[esp+132]
	sar	eax, 1
	add	eax, esi
	sar	edi, 1
; Line 2002
	mov	ecx, ebx
	sar	ecx, 1
	add	edi, eax
; Line 2003
	add	ecx, esi
; Line 2004
	jmp	SHORT $LN11@PDJPG_Conv
$LN12@PDJPG_Conv:
; Line 2007
	mov	ecx, DWORD PTR tv1131[esp+136]
	mov	eax, edi
	add	edi, ecx
; Line 2009
	mov	ecx, DWORD PTR tv3650[esp+136]
$LN11@PDJPG_Conv:
; Line 2012
	mov	esi, DWORD PTR _ctx$[esp+132]
	mov	esi, DWORD PTR [esi+7808]
	mov	ebx, DWORD PTR tv3238[esp+136]
	add	ebx, esi
	mov	DWORD PTR _cty1$[esp+136], ebx
; Line 2013
	mov	ebx, DWORD PTR tv3322[esp+136]
	add	ebx, esi
; Line 2016
	mov	esi, DWORD PTR _ctx$[esp+132]
	mov	DWORD PTR _cty2$[esp+136], ebx
	mov	ebx, DWORD PTR [esi+7812]
	mov	esi, DWORD PTR tv3083[esp+136]
	add	ebx, esi
	mov	DWORD PTR _ctu$[esp+136], ebx
; Line 2017
	mov	ebx, DWORD PTR _ctx$[esp+132]
	mov	ebx, DWORD PTR [ebx+7816]
	add	ebx, esi
	mov	DWORD PTR _ctv$[esp+136], ebx
; Line 2019
	cmp	eax, edi
	jae	$LN14@PDJPG_Conv
	npad	10
$LL10@PDJPG_Conv:
; Line 2024
	mov	esi, DWORD PTR _pf$[esp+132]
	add	esi, -5					; fffffffbH
	cmp	esi, 5
	ja	$LN7@PDJPG_Conv
	jmp	DWORD PTR $LN88@PDJPG_Conv[esi*4]
$LN6@PDJPG_Conv:
; Line 2027
	movzx	edx, BYTE PTR [eax]
; Line 2031
	movzx	esi, BYTE PTR [ecx+1]
	mov	DWORD PTR _cya$[esp+136], edx
	movzx	edx, BYTE PTR [eax+4]
; Line 2032
	movzx	ebx, BYTE PTR [ecx+2]
	mov	DWORD PTR _cyb$[esp+136], edx
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cyc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR _cyd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+5]
	add	edx, esi
	movzx	esi, BYTE PTR [eax+5]
	add	edx, esi
	movzx	esi, BYTE PTR [eax+1]
	add	edx, esi
	movzx	esi, BYTE PTR [ecx+6]
	add	esi, ebx
	movzx	ebx, BYTE PTR [eax+6]
	add	esi, ebx
	movzx	ebx, BYTE PTR [eax+2]
	add	esi, ebx
	sar	edx, 2
	sar	esi, 2
	mov	DWORD PTR _cv$[esp+136], esi
; Line 2033
	jmp	$LN7@PDJPG_Conv
$LN5@PDJPG_Conv:
; Line 2035
	movzx	edx, BYTE PTR [eax]
; Line 2039
	movzx	esi, BYTE PTR [ecx+1]
	mov	DWORD PTR _cya$[esp+136], edx
	movzx	edx, BYTE PTR [eax+3]
; Line 2040
	movzx	ebx, BYTE PTR [ecx+2]
	mov	DWORD PTR _cyb$[esp+136], edx
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cyc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+3]
	mov	DWORD PTR _cyd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+4]
	add	edx, esi
	movzx	esi, BYTE PTR [eax+4]
	add	edx, esi
	movzx	esi, BYTE PTR [eax+1]
	add	edx, esi
	movzx	esi, BYTE PTR [ecx+5]
	add	esi, ebx
	movzx	ebx, BYTE PTR [eax+5]
	add	esi, ebx
	movzx	ebx, BYTE PTR [eax+2]
	add	esi, ebx
	sar	edx, 2
	sar	esi, 2
	mov	DWORD PTR _cv$[esp+136], esi
; Line 2041
	jmp	$LN7@PDJPG_Conv
$LN4@PDJPG_Conv:
; Line 2043
	movzx	edx, BYTE PTR [eax]
; Line 2045
	movzx	esi, BYTE PTR [eax+1]
	movzx	ebx, BYTE PTR [eax+3]
	mov	DWORD PTR _cya$[esp+136], edx
	movzx	edx, BYTE PTR [eax+2]
	mov	DWORD PTR _cyb$[esp+136], edx
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cyc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+2]
	mov	DWORD PTR _cyd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, esi
	movzx	esi, BYTE PTR [ecx+3]
	add	esi, ebx
	sar	edx, 1
	sar	esi, 1
	mov	DWORD PTR _cv$[esp+136], esi
; Line 2046
	jmp	SHORT $LN7@PDJPG_Conv
$LN3@PDJPG_Conv:
; Line 2049
	movzx	esi, BYTE PTR [ecx]
	movzx	edx, BYTE PTR [eax]
	mov	DWORD PTR _cyc$[esp+136], esi
	movzx	esi, BYTE PTR [ecx+1]
	mov	DWORD PTR _cya$[esp+136], edx
	movzx	edx, BYTE PTR [eax+1]
	mov	DWORD PTR _cyd$[esp+136], esi
	movzx	esi, BYTE PTR [ecx+2]
	mov	DWORD PTR _cyb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+2]
	mov	DWORD PTR _cv$[esp+136], esi
; Line 2050
	jmp	SHORT $LN7@PDJPG_Conv
$LN2@PDJPG_Conv:
; Line 2052
	movzx	edx, BYTE PTR [eax]
	mov	DWORD PTR _cya$[esp+136], edx
	movzx	edx, BYTE PTR [eax+2]
	mov	DWORD PTR _cyb$[esp+136], edx
; Line 2053
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cyc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+2]
; Line 2055
	jmp	SHORT $LN80@PDJPG_Conv
$LN1@PDJPG_Conv:
; Line 2057
	movzx	edx, BYTE PTR [eax]
	mov	DWORD PTR _cya$[esp+136], edx
	movzx	edx, BYTE PTR [eax+1]
	mov	DWORD PTR _cyb$[esp+136], edx
; Line 2058
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cyc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+1]
$LN80@PDJPG_Conv:
	mov	DWORD PTR _cyd$[esp+136], edx
; Line 2059
	mov	DWORD PTR _cv$[esp+136], 0
	xor	edx, edx
$LN7@PDJPG_Conv:
; Line 2063
	mov	esi, DWORD PTR _cty1$[esp+136]
	movzx	ebx, BYTE PTR _cya$[esp+136]
	inc	DWORD PTR _cty1$[esp+136]
	mov	BYTE PTR [esi], bl
	movzx	ebx, BYTE PTR _cyb$[esp+136]
	mov	esi, DWORD PTR _cty1$[esp+136]
	inc	DWORD PTR _cty1$[esp+136]
	mov	BYTE PTR [esi], bl
; Line 2064
	movzx	ebx, BYTE PTR _cyc$[esp+136]
	mov	esi, DWORD PTR _cty2$[esp+136]
	inc	DWORD PTR _cty2$[esp+136]
	mov	BYTE PTR [esi], bl
	movzx	ebx, BYTE PTR _cyd$[esp+136]
	mov	esi, DWORD PTR _cty2$[esp+136]
	inc	DWORD PTR _cty2$[esp+136]
	mov	BYTE PTR [esi], bl
; Line 2065
	mov	esi, DWORD PTR _ctu$[esp+136]
	movzx	ebx, BYTE PTR _cv$[esp+136]
	mov	BYTE PTR [esi], dl
	inc	esi
	mov	DWORD PTR _ctu$[esp+136], esi
	mov	esi, DWORD PTR _ctv$[esp+136]
	inc	DWORD PTR _ctv$[esp+136]
; Line 2067
	add	eax, ebp
	add	ecx, ebp
	mov	BYTE PTR [esi], bl
	cmp	eax, edi
	jb	$LL10@PDJPG_Conv
; Line 2019
	mov	esi, DWORD PTR tv3083[esp+136]
$LN14@PDJPG_Conv:
; Line 1996
	mov	eax, DWORD PTR tv2445[esp+136]
	add	DWORD PTR tv3238[esp+136], eax
	add	DWORD PTR tv3322[esp+136], eax
	mov	eax, DWORD PTR tv3669[esp+136]
	add	DWORD PTR tv3596[esp+136], eax
	add	DWORD PTR tv3594[esp+136], eax
	mov	eax, DWORD PTR tv3666[esp+136]
	add	esi, DWORD PTR _xs3$[esp+132]
	add	DWORD PTR tv3652[esp+136], eax
	add	DWORD PTR tv3650[esp+136], eax
	sub	DWORD PTR tv3750[esp+136], 1
	mov	DWORD PTR tv3083[esp+136], esi
	jne	$LL74@PDJPG_Conv
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2071
	add	esp, 120				; 00000078H
	ret	0
$LN44@PDJPG_Conv:
; Line 1888
	cmp	eax, esi
	ja	SHORT $LN39@PDJPG_Conv
$LN69@PDJPG_Conv:
	jmp	DWORD PTR $LN89@PDJPG_Conv[eax*4]
$LN40@PDJPG_Conv:
; Line 1893
	mov	DWORD PTR _psz$[esp+136], edi
	mov	esi, edi
	jmp	SHORT $LN42@PDJPG_Conv
$LN39@PDJPG_Conv:
; Line 1894
	mov	DWORD PTR _psz$[esp+136], esi
$LN42@PDJPG_Conv:
; Line 1898
	mov	edi, DWORD PTR _ys$[esp+132]
	lea	eax, DWORD PTR [esi+esi]
	mov	DWORD PTR _psz2$[esp+136], eax
	lea	eax, DWORD PTR [edi+1]
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 1899
	cmp	eax, ecx
	jle	$LN36@PDJPG_Conv
	mov	ebp, DWORD PTR _cra$[esp+136]
	mov	DWORD PTR tv3799[esp+136], ecx
	mov	DWORD PTR tv3850[esp+136], ecx
	mov	ecx, DWORD PTR _xs2$[esp+132]
	lea	edx, DWORD PTR [ecx+ecx]
	add	edi, -2					; fffffffeH
	mov	DWORD PTR tv2445[esp+136], edx
	mov	DWORD PTR tv3916[esp+136], ecx
	mov	DWORD PTR tv3942[esp+136], edi
	mov	DWORD PTR tv3756[esp+136], eax
	jmp	SHORT $LN81@PDJPG_Conv
	npad	10
$LL76@PDJPG_Conv:
; Line 1896
	mov	esi, DWORD PTR _psz$[esp+136]
$LN81@PDJPG_Conv:
	mov	edx, DWORD PTR _xs$[esp+132]
	mov	ebx, DWORD PTR _ibuf$[esp+132]
; Line 1901
	lea	eax, DWORD PTR [edi+1]
	imul	eax, esi
; Line 1902
	imul	eax, edx
	mov	ecx, esi
	imul	ecx, edx
	add	eax, ebx
	add	ecx, eax
	mov	DWORD PTR _cse$[esp+136], ecx
	mov	ecx, edi
; Line 1907
	mov	edi, DWORD PTR tv3916[esp+136]
	imul	ecx, esi
	mov	esi, DWORD PTR tv3850[esp+136]
	imul	ecx, edx
	add	ecx, ebx
	mov	ebx, DWORD PTR _ctx$[esp+132]
	mov	edx, DWORD PTR [ebx+7808]
	add	esi, edx
	add	edi, edx
; Line 1910
	mov	edx, DWORD PTR [ebx+7812]
	mov	ebx, DWORD PTR tv3799[esp+136]
	add	edx, ebx
	mov	DWORD PTR _ctu$[esp+136], edx
; Line 1911
	mov	edx, DWORD PTR _ctx$[esp+132]
	mov	edx, DWORD PTR [edx+7816]
	add	edx, ebx
	mov	DWORD PTR _ctv$[esp+136], edx
; Line 1913
	cmp	eax, DWORD PTR _cse$[esp+136]
	jae	$LN37@PDJPG_Conv
	mov	ebx, 255				; 000000ffH
	npad	3
$LL35@PDJPG_Conv:
; Line 1918
	mov	edx, DWORD PTR _pf$[esp+132]
	cmp	edx, 4
	ja	$LN78@PDJPG_Conv
	jmp	DWORD PTR $LN90@PDJPG_Conv[edx*4]
$LN31@PDJPG_Conv:
; Line 1921
	movzx	edx, BYTE PTR [eax+1]
	mov	DWORD PTR _cga$[esp+136], edx
	movzx	edx, BYTE PTR [eax+2]
	mov	DWORD PTR _cba$[esp+136], edx
	movzx	edx, BYTE PTR [eax+3]
	mov	DWORD PTR _caa$[esp+136], edx
; Line 1922
	movzx	edx, BYTE PTR [eax+4]
	mov	DWORD PTR _crb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+5]
	mov	DWORD PTR _cgb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+6]
	mov	DWORD PTR _cbb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+7]
	mov	DWORD PTR _cab$[esp+136], edx
; Line 1923
	movzx	edx, BYTE PTR [ecx]
	movzx	ebp, BYTE PTR [eax]
	mov	DWORD PTR _crc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _cgc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+2]
	mov	DWORD PTR _cbc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+3]
	mov	DWORD PTR _cac$[esp+136], edx
; Line 1924
	movzx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR _crd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+5]
	mov	DWORD PTR _cgd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+6]
$LN85@PDJPG_Conv:
	mov	DWORD PTR _cbd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+7]
	mov	DWORD PTR _cad$[esp+136], edx
; Line 1925
	mov	DWORD PTR _psz$[esp+136], 8
	jmp	$LN86@PDJPG_Conv
$LN30@PDJPG_Conv:
; Line 1927
	movzx	edx, BYTE PTR [eax+1]
	mov	DWORD PTR _cga$[esp+136], edx
	movzx	edx, BYTE PTR [eax]
	mov	DWORD PTR _cba$[esp+136], edx
	movzx	edx, BYTE PTR [eax+3]
	mov	DWORD PTR _caa$[esp+136], edx
; Line 1928
	movzx	edx, BYTE PTR [eax+6]
	mov	DWORD PTR _crb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+5]
	mov	DWORD PTR _cgb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+4]
	mov	DWORD PTR _cbb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+7]
	mov	DWORD PTR _cab$[esp+136], edx
; Line 1929
	movzx	edx, BYTE PTR [ecx+2]
	movzx	ebp, BYTE PTR [eax+2]
	mov	DWORD PTR _crc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _cgc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cbc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+3]
	mov	DWORD PTR _cac$[esp+136], edx
; Line 1930
	movzx	edx, BYTE PTR [ecx+6]
	mov	DWORD PTR _crd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+5]
	mov	DWORD PTR _cgd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+4]
; Line 1931
	jmp	$LN85@PDJPG_Conv
$LN29@PDJPG_Conv:
; Line 1933
	movzx	edx, BYTE PTR [eax+1]
	mov	DWORD PTR _cga$[esp+136], edx
	movzx	edx, BYTE PTR [eax+2]
	mov	DWORD PTR _cba$[esp+136], edx
; Line 1934
	movzx	edx, BYTE PTR [eax+3]
	mov	DWORD PTR _crb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+4]
	mov	DWORD PTR _cgb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+5]
	movzx	ebp, BYTE PTR [eax]
	mov	DWORD PTR _cbb$[esp+136], edx
; Line 1935
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _crc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _cgc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+2]
	mov	DWORD PTR _cbc$[esp+136], edx
; Line 1936
	movzx	edx, BYTE PTR [ecx+3]
	mov	DWORD PTR _crd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR _cgd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+5]
; Line 1937
	jmp	SHORT $LN82@PDJPG_Conv
$LN28@PDJPG_Conv:
; Line 1939
	movzx	edx, BYTE PTR [eax+1]
	mov	DWORD PTR _cga$[esp+136], edx
	movzx	edx, BYTE PTR [eax]
	mov	DWORD PTR _cba$[esp+136], edx
; Line 1940
	movzx	edx, BYTE PTR [eax+5]
	mov	DWORD PTR _crb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+4]
	mov	DWORD PTR _cgb$[esp+136], edx
	movzx	edx, BYTE PTR [eax+3]
	movzx	ebp, BYTE PTR [eax+2]
	mov	DWORD PTR _cbb$[esp+136], edx
; Line 1941
	movzx	edx, BYTE PTR [ecx+2]
	mov	DWORD PTR _crc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _cgc$[esp+136], edx
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cbc$[esp+136], edx
; Line 1942
	movzx	edx, BYTE PTR [ecx+5]
	mov	DWORD PTR _crd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR _cgd$[esp+136], edx
	movzx	edx, BYTE PTR [ecx+3]
$LN82@PDJPG_Conv:
; Line 1943
	mov	DWORD PTR _psz$[esp+136], 6
	mov	DWORD PTR _cad$[esp+136], ebx
	mov	DWORD PTR _cbd$[esp+136], edx
	mov	DWORD PTR _cac$[esp+136], ebx
	mov	DWORD PTR _cab$[esp+136], ebx
	mov	DWORD PTR _caa$[esp+136], ebx
$LN86@PDJPG_Conv:
; Line 1939
	mov	DWORD PTR _cra$[esp+136], ebp
$LN78@PDJPG_Conv:
; Line 1946
	mov	edx, DWORD PTR _ctx$[esp+132]
	cmp	DWORD PTR [edx+7444], 0
	je	SHORT $LN72@PDJPG_Conv
	mov	ebx, DWORD PTR _cac$[esp+136]
	mov	edx, DWORD PTR _cad$[esp+136]
	add	edx, ebx
; Line 1949
	add	edx, DWORD PTR _cab$[esp+136]
	mov	ebx, DWORD PTR _ctx$[esp+132]
	add	edx, DWORD PTR _caa$[esp+136]
	movzx	ebx, BYTE PTR [ebx+7451]
	sar	edx, 2
	cmp	edx, ebx
	jge	SHORT $LN72@PDJPG_Conv
; Line 1951
	mov	edx, DWORD PTR _ctx$[esp+132]
	movzx	ebx, BYTE PTR [edx+7448]
	mov	DWORD PTR _cy$[esp+136], ebx
; Line 1952
	movzx	ebx, BYTE PTR [edx+7449]
; Line 1953
	movzx	edx, BYTE PTR [edx+7450]
	mov	DWORD PTR _cv$[esp+136], edx
; Line 1954
	mov	dl, BYTE PTR _cy$[esp+136]
	mov	BYTE PTR [esi], dl
	mov	BYTE PTR [esi+1], dl
; Line 1955
	mov	BYTE PTR [edi], dl
	inc	esi
	mov	BYTE PTR [edi+1], dl
; Line 1956
	mov	edx, DWORD PTR _ctu$[esp+136]
	inc	edi
	mov	BYTE PTR [edx], bl
	mov	bl, BYTE PTR _cv$[esp+136]
	inc	edx
	mov	DWORD PTR _ctu$[esp+136], edx
	mov	edx, DWORD PTR _ctv$[esp+136]
	inc	esi
	inc	edi
	mov	BYTE PTR [edx], bl
	inc	edx
	mov	DWORD PTR _ctv$[esp+136], edx
; Line 1957
	jmp	$LN84@PDJPG_Conv
$LN72@PDJPG_Conv:
; Line 1961
	mov	ebx, DWORD PTR _cba$[esp+136]
	imul	ebx, 7471				; 00001d2fH
	mov	edx, ebp
	imul	edx, 19595				; 00004c8bH
	add	edx, ebx
	mov	ebx, DWORD PTR _cga$[esp+136]
	imul	ebx, 38470				; 00009646H
; Line 1965
	add	edx, ebx
	mov	ebx, DWORD PTR _cbb$[esp+136]
	sar	edx, 16					; 00000010H
	imul	ebx, 7471				; 00001d2fH
	mov	BYTE PTR [esi], dl
	mov	edx, DWORD PTR _crb$[esp+136]
	imul	edx, 19595				; 00004c8bH
	add	edx, ebx
	mov	ebx, DWORD PTR _cgb$[esp+136]
	imul	ebx, 38470				; 00009646H
; Line 1966
	add	edx, ebx
	mov	ebx, DWORD PTR _cbc$[esp+136]
	sar	edx, 16					; 00000010H
	imul	ebx, 7471				; 00001d2fH
	mov	BYTE PTR [esi+1], dl
	inc	esi
	inc	esi
	mov	DWORD PTR _cty1$[esp+136], esi
	mov	esi, DWORD PTR _crc$[esp+136]
	mov	edx, esi
	imul	edx, 19595				; 00004c8bH
	add	edx, ebx
	mov	ebx, DWORD PTR _cgc$[esp+136]
	imul	ebx, 38470				; 00009646H
; Line 1967
	add	edx, ebx
	mov	ebx, DWORD PTR _cbd$[esp+136]
	sar	edx, 16					; 00000010H
	imul	ebx, 7471				; 00001d2fH
	mov	BYTE PTR [edi], dl
	mov	edx, DWORD PTR _crd$[esp+136]
	imul	edx, 19595				; 00004c8bH
	add	edx, ebx
	mov	ebx, DWORD PTR _cgd$[esp+136]
	imul	ebx, 38470				; 00009646H
; Line 1968
	add	edx, ebx
; Line 1972
	mov	ebx, DWORD PTR _cbc$[esp+136]
	sar	edx, 16					; 00000010H
	mov	BYTE PTR [edi+1], dl
	mov	edx, DWORD PTR _crd$[esp+136]
	inc	edi
	add	esi, edx
	mov	edx, DWORD PTR _cgd$[esp+136]
	add	esi, DWORD PTR _crb$[esp+136]
	inc	edi
	mov	DWORD PTR _cty2$[esp+136], edi
	mov	edi, DWORD PTR _cgc$[esp+136]
	add	edi, edx
	add	edi, DWORD PTR _cgb$[esp+136]
	mov	edx, DWORD PTR _cbd$[esp+136]
	add	edi, DWORD PTR _cga$[esp+136]
	add	esi, ebp
	lea	ebp, DWORD PTR [edx+ebx]
	add	ebp, DWORD PTR _cbb$[esp+136]
	sar	edi, 2
	add	ebp, DWORD PTR _cba$[esp+136]
	sar	esi, 2
; Line 1974
	mov	edx, edi
; Line 1975
	imul	edi, 27440				; 00006b30H
	imul	edx, 21712				; 000054d0H
	mov	ebx, esi
	imul	ebx, -11056				; ffffd4d0H
; Line 1976
	sub	ebx, edx
	sar	ebp, 2
	mov	edx, ebp
	shl	edx, 15					; 0000000fH
	add	ebx, edx
	mov	edx, DWORD PTR _ctu$[esp+136]
	sar	ebx, 16					; 00000010H
	sub	bl, -128				; ffffff80H
	mov	BYTE PTR [edx], bl
	inc	edx
	mov	DWORD PTR _ctu$[esp+136], edx
	mov	edx, ebp
	imul	edx, -5328				; ffffeb30H
; Line 1979
	mov	ebp, DWORD PTR _cra$[esp+136]
	sub	edx, edi
	mov	edi, DWORD PTR _cty2$[esp+136]
	shl	esi, 15					; 0000000fH
	add	edx, esi
	mov	esi, DWORD PTR _ctv$[esp+136]
	sar	edx, 16					; 00000010H
	sub	dl, -128				; ffffff80H
	mov	BYTE PTR [esi], dl
	mov	edx, DWORD PTR _psz2$[esp+136]
	inc	esi
	mov	DWORD PTR _ctv$[esp+136], esi
	mov	esi, DWORD PTR _cty1$[esp+136]
	add	eax, edx
	add	ecx, edx
$LN84@PDJPG_Conv:
	mov	ebx, 255				; 000000ffH
	cmp	eax, DWORD PTR _cse$[esp+136]
	jb	$LL35@PDJPG_Conv
; Line 1913
	mov	ebx, DWORD PTR tv3799[esp+136]
$LN37@PDJPG_Conv:
; Line 1899
	mov	eax, DWORD PTR tv2445[esp+136]
	mov	edi, DWORD PTR tv3942[esp+136]
	add	ebx, DWORD PTR _xs3$[esp+132]
	add	DWORD PTR tv3850[esp+136], eax
	add	DWORD PTR tv3916[esp+136], eax
	sub	edi, 2
	sub	DWORD PTR tv3756[esp+136], 1
	mov	DWORD PTR tv3942[esp+136], edi
	mov	DWORD PTR tv3799[esp+136], ebx
	jne	$LL76@PDJPG_Conv
$LN36@PDJPG_Conv:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2071
	add	esp, 120				; 00000078H
	ret	0
	npad	3
$LN87@PDJPG_Conv:
	DD	$LN16@PDJPG_Conv
	DD	$LN21@PDJPG_Conv
	DD	$LN17@PDJPG_Conv
	DD	$LN20@PDJPG_Conv
	DD	$LN20@PDJPG_Conv
	DD	$LN19@PDJPG_Conv
$LN88@PDJPG_Conv:
	DD	$LN6@PDJPG_Conv
	DD	$LN5@PDJPG_Conv
	DD	$LN1@PDJPG_Conv
	DD	$LN2@PDJPG_Conv
	DD	$LN4@PDJPG_Conv
	DD	$LN3@PDJPG_Conv
$LN89@PDJPG_Conv:
	DD	$LN39@PDJPG_Conv
	DD	$LN40@PDJPG_Conv
	DD	$LN39@PDJPG_Conv
	DD	$LN39@PDJPG_Conv
	DD	$LN40@PDJPG_Conv
$LN90@PDJPG_Conv:
	DD	$LN31@PDJPG_Conv
	DD	$LN29@PDJPG_Conv
	DD	$LN78@PDJPG_Conv
	DD	$LN30@PDJPG_Conv
	DD	$LN28@PDJPG_Conv
_PDJPG_ConvertImageYUV ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@CLNFBEME@AlphaColor?$AA@		; `string'
PUBLIC	??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	_obuf$GSCopy$
PUBLIC	_ibuf$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_PDJPG_EncodeFastCtx
EXTRN	_sprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0L@CLNFBEME@AlphaColor?$AA@
CONST	SEGMENT
??_C@_0L@CLNFBEME@AlphaColor?$AA@ DB 'AlphaColor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d %d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PDJPG_EncodeFastCtx
_TEXT	SEGMENT
tv2095 = -304						; size = 4
tv1942 = -304						; size = 4
tv1925 = -304						; size = 4
tv995 = -304						; size = 4
$T130190 = -304						; size = 4
tv69 = -304						; size = 4
_ibuf$GSCopy$ = -304					; size = 4
tv1690 = -300						; size = 4
tv1133 = -300						; size = 4
tv1132 = -300						; size = 4
tv1010 = -300						; size = 4
_xs2$ = -296						; size = 4
tv1727 = -292						; size = 4
tv1134 = -292						; size = 4
_k$ = -292						; size = 4
_ys2$ = -288						; size = 4
tv2165 = -284						; size = 4
tv1135 = -284						; size = 4
_ys3$ = -284						; size = 4
_i$ = -280						; size = 4
tv2163 = -276						; size = 4
tv413 = -276						; size = 4
_xs3$ = -272						; size = 4
tv2177 = -268						; size = 4
$T130189 = -268						; size = 4
_obuf$GSCopy$ = -264					; size = 4
_tb$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_ibuf$ = 12						; size = 4
_obuf$ = 16						; size = 4
_xs$ = 20						; size = 4
_ys$ = 24						; size = 4
_qf$ = 28						; size = 4
_pf$ = 32						; size = 4
_PDJPG_EncodeFastCtx PROC				; COMDAT
; Line 2075
	sub	esp, 304				; 00000130H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+304], eax
; Line 2193
	mov	eax, DWORD PTR _ibuf$[esp+300]
; Line 2359
	mov	ecx, DWORD PTR _obuf$[esp+300]
	mov	DWORD PTR _ibuf$GSCopy$[esp+304], eax
	push	ebx
	mov	ebx, DWORD PTR _xs$[esp+304]
	lea	eax, DWORD PTR [ebx+7]
	cdq
	and	edx, 7
	add	eax, edx
	push	ebp
	mov	ebp, DWORD PTR _ys$[esp+308]
	mov	DWORD PTR _obuf$GSCopy$[esp+312], ecx
	mov	ecx, eax
	lea	eax, DWORD PTR [ebp+7]
	cdq
	and	edx, 7
	add	eax, edx
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+312]
	push	edi
	mov	edi, eax
	lea	eax, DWORD PTR [ebx+15]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	mov	ebx, eax
	lea	eax, DWORD PTR [ebp+15]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	ecx, 3
	sar	edi, 3
	sar	ebx, 4
	mov	ebp, eax
	sar	ebp, 4
	add	ecx, ecx
	add	edi, edi
	add	ebx, ebx
	add	ebp, ebp
	add	ecx, ecx
	add	edi, edi
	add	ebx, ebx
	add	ebp, ebp
	add	ecx, ecx
	add	edi, edi
	add	ebx, ebx
	add	ebp, ebp
	cmp	DWORD PTR [esi+7804], 0
	mov	DWORD PTR _xs2$[esp+320], ecx
	mov	DWORD PTR _ys2$[esp+320], edi
	mov	DWORD PTR _xs3$[esp+320], ebx
	mov	DWORD PTR _ys3$[esp+320], ebp
	mov	DWORD PTR [esi+7800], 0
	jne	SHORT $LN115@PDJPG_Enco@2
	push	64					; 00000040H
	lea	eax, DWORD PTR [esi+6164]
	push	1
	push	eax
	call	_memset
	push	64					; 00000040H
	lea	eax, DWORD PTR [esi+6228]
	push	1
	push	eax
	call	_memset
	mov	ecx, DWORD PTR _xs2$[esp+344]
	add	esp, 24					; 00000018H
$LN115@PDJPG_Enco@2:
	mov	eax, DWORD PTR [esi+7808]
	test	eax, eax
	je	SHORT $LN59@PDJPG_Enco@2
	mov	edx, DWORD PTR _xs$[esp+316]
	cmp	edx, DWORD PTR [esi+7832]
	jne	SHORT $LN126@PDJPG_Enco@2
	mov	edx, DWORD PTR _ys$[esp+316]
	cmp	edx, DWORD PTR [esi+7836]
	je	$LN116@PDJPG_Enco@2
$LN126@PDJPG_Enco@2:
; Line 2106
	test	eax, eax
	je	SHORT $LN59@PDJPG_Enco@2
; Line 2108
	push	eax
	call	_free
; Line 2109
	mov	eax, DWORD PTR [esi+7812]
	push	eax
	call	_free
; Line 2110
	mov	ecx, DWORD PTR [esi+7816]
	push	ecx
	call	_free
; Line 2111
	mov	edx, DWORD PTR [esi+7820]
	push	edx
	call	_free
; Line 2112
	mov	eax, DWORD PTR [esi+7824]
	push	eax
	call	_free
; Line 2113
	mov	ecx, DWORD PTR [esi+7828]
	push	ecx
	call	_free
	add	esp, 24					; 00000018H
$LN59@PDJPG_Enco@2:
; Line 2116
	imul	edi, DWORD PTR _xs2$[esp+320]
	push	edi
	call	_malloc
; Line 2117
	push	edi
	mov	DWORD PTR [esi+7808], eax
	call	_malloc
; Line 2118
	push	edi
	mov	DWORD PTR [esi+7812], eax
	call	_malloc
; Line 2120
	mov	edx, DWORD PTR _ys2$[esp+332]
	mov	DWORD PTR [esi+7816], eax
	mov	eax, DWORD PTR _xs2$[esp+332]
	add	edx, 16					; 00000010H
	add	eax, 8
	imul	edx, eax
	add	edx, edx
	push	edx
	call	_malloc
; Line 2121
	add	ebx, 8
	add	ebp, 8
	imul	ebx, ebp
	add	ebx, ebx
	push	ebx
	mov	DWORD PTR [esi+7820], eax
	call	_malloc
; Line 2122
	push	ebx
	mov	DWORD PTR [esi+7824], eax
	call	_malloc
; Line 2124
	mov	ecx, DWORD PTR _xs$[esp+340]
; Line 2125
	mov	edx, DWORD PTR _ys$[esp+340]
; Line 2127
	push	edi
	mov	DWORD PTR [esi+7828], eax
	mov	eax, DWORD PTR [esi+7808]
	push	128					; 00000080H
	push	eax
	mov	DWORD PTR [esi+7832], ecx
	mov	DWORD PTR [esi+7836], edx
	call	_memset
; Line 2128
	mov	ecx, DWORD PTR [esi+7812]
	push	edi
	push	128					; 00000080H
	push	ecx
	call	_memset
; Line 2129
	mov	edx, DWORD PTR [esi+7816]
	push	edi
	push	128					; 00000080H
	push	edx
	call	_memset
; Line 2131
	mov	eax, DWORD PTR _ys2$[esp+380]
	mov	ecx, DWORD PTR [esi+7820]
	add	eax, 8
	imul	eax, DWORD PTR _xs2$[esp+380]
	add	eax, eax
	push	eax
	push	0
	push	ecx
	call	_memset
; Line 2132
	imul	ebp, DWORD PTR _xs3$[esp+392]
	mov	edx, DWORD PTR [esi+7824]
	add	esp, 72					; 00000048H
	add	ebp, ebp
	push	ebp
	push	0
	push	edx
	call	_memset
; Line 2133
	mov	eax, DWORD PTR [esi+7828]
	push	ebp
	push	0
	push	eax
	call	_memset
; Line 2135
	mov	ebx, DWORD PTR _xs3$[esp+344]
	mov	ebp, DWORD PTR _ys3$[esp+344]
	mov	edi, DWORD PTR _ys2$[esp+344]
	mov	ecx, DWORD PTR _xs2$[esp+344]
	add	esp, 24					; 00000018H
	mov	DWORD PTR [esi+7804], 0
$LN116@PDJPG_Enco@2:
; Line 2140
	mov	edx, DWORD PTR _ys$[esp+316]
	mov	eax, DWORD PTR _xs$[esp+316]
	push	ebp
	push	ebx
	push	edi
	push	ecx
	mov	ecx, DWORD PTR _pf$[esp+332]
	push	ecx
	mov	ecx, DWORD PTR _ibuf$GSCopy$[esp+340]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	_PDJPG_ConvertImageYUV
; Line 2189
	mov	edx, DWORD PTR _xs2$[esp+356]
	mov	eax, DWORD PTR [esi+7820]
	mov	ecx, DWORD PTR [esi+7808]
	push	edi
	push	edx
	push	eax
	push	ecx
	call	_PDJPG_FilterImageDCT
; Line 2190
	mov	edx, DWORD PTR [esi+7824]
	mov	eax, DWORD PTR [esi+7812]
	push	ebp
	push	ebx
	push	edx
	push	eax
	call	_PDJPG_FilterImageDCT
; Line 2191
	mov	ecx, DWORD PTR [esi+7828]
	mov	edx, DWORD PTR [esi+7816]
	add	esp, 68					; 00000044H
	push	ebp
	push	ebx
	push	ecx
	push	edx
	call	_PDJPG_FilterImageDCT
	add	esp, 16					; 00000010H
; Line 2193
	cmp	DWORD PTR [esi+7804], 0
	jg	$LN117@PDJPG_Enco@2
; Line 2195
	mov	eax, edi
	cdq
	and	edx, 7
	add	eax, edx
	mov	edi, eax
	mov	eax, DWORD PTR _xs2$[esp+320]
	cdq
; Line 2196
	mov	ecx, DWORD PTR [esi+7820]
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	sar	edi, 3
	imul	eax, edi
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	cmp	eax, 1
	jge	SHORT $LN71@PDJPG_Enco@2
	mov	eax, 1
$LN71@PDJPG_Enco@2:
	fild	DWORD PTR _qf$[esp+316]
	push	ecx
	lea	edx, DWORD PTR [esi+6164]
	fdiv	QWORD PTR __real@4059000000000000
	fstp	DWORD PTR tv1132[esp+324]
	fld	DWORD PTR tv1132[esp+324]
	fstp	DWORD PTR [esp]
	push	edx
	push	eax
	push	ecx
	call	_PDJPG_MakeQuantTabInput
; Line 2198
	mov	eax, ebp
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	mov	eax, ebx
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	sar	ecx, 3
	imul	ecx, eax
; Line 2199
	mov	eax, ecx
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	mov	edi, eax
	sar	edi, 4
	mov	eax, edi
	add	esp, 16					; 00000010H
	cmp	eax, 1
	jge	SHORT $LN74@PDJPG_Enco@2
	mov	eax, 1
$LN74@PDJPG_Enco@2:
	fld	DWORD PTR tv1132[esp+320]
	lea	ecx, DWORD PTR [esi+6228]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [esi+7824]
	push	eax
	call	_PDJPG_MakeQuantTabInput
; Line 2200
	mov	eax, DWORD PTR [esi+7828]
	add	esp, 16					; 00000010H
	cmp	edi, 1
	jge	SHORT $LN77@PDJPG_Enco@2
	mov	edi, 1
$LN77@PDJPG_Enco@2:
	fld	DWORD PTR tv1132[esp+320]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR [esi+6292]
	push	ecx
	push	edi
	push	eax
	call	_PDJPG_MakeQuantTabInput
	add	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [esi+6228]
	mov	edi, 16					; 00000010H
$LL57@PDJPG_Enco@2:
; Line 2202
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR [ecx+64]
	add	eax, edx
	cdq
	sub	eax, edx
	movzx	edx, BYTE PTR [ecx+1]
	sar	eax, 1
	mov	BYTE PTR [ecx], al
	movzx	eax, BYTE PTR [ecx+65]
	add	eax, edx
	cdq
	sub	eax, edx
	movzx	edx, BYTE PTR [ecx+2]
	sar	eax, 1
	mov	BYTE PTR [ecx+1], al
	movzx	eax, BYTE PTR [ecx+66]
	add	eax, edx
	cdq
	sub	eax, edx
	movzx	edx, BYTE PTR [ecx+3]
	sar	eax, 1
	mov	BYTE PTR [ecx+2], al
	movzx	eax, BYTE PTR [ecx+67]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR [ecx+3], al
	add	ecx, 4
	sub	edi, 1
	jne	SHORT $LL57@PDJPG_Enco@2
; Line 2204
	push	edi
	push	esi
	call	_PDJPG_SetupQuantTabDivFP
; Line 2205
	push	1
	push	esi
	call	_PDJPG_SetupQuantTabDivFP
	mov	edi, DWORD PTR _ys2$[esp+336]
	add	esp, 16					; 00000010H
$LN117@PDJPG_Enco@2:
; Line 2208
	cmp	DWORD PTR [esi+7800], 0
	je	$LN130@PDJPG_Enco@2
; Line 2210
	mov	eax, edi
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	mov	eax, DWORD PTR _xs2$[esp+320]
	cdq
	and	edx, 7
	add	eax, edx
	sar	ecx, 3
	sar	eax, 3
	imul	ecx, eax
	mov	DWORD PTR _k$[esp+320], 0
; Line 2211
	test	ecx, ecx
	jle	SHORT $LN121@PDJPG_Enco@2
	mov	eax, DWORD PTR [esi+7820]
	xor	edi, edi
	mov	DWORD PTR tv1010[esp+320], ecx
$LL53@PDJPG_Enco@2:
; Line 2213
	add	eax, edi
	push	0
	push	eax
	push	eax
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 2214
	mov	eax, DWORD PTR [esi+7820]
	mov	ecx, DWORD PTR _k$[esp+336]
	sub	WORD PTR [eax+edi], cx
	add	eax, edi
; Line 2215
	mov	eax, DWORD PTR [esi+7820]
	movsx	edx, WORD PTR [edi+eax]
	add	ecx, edx
	add	esp, 16					; 00000010H
	sub	edi, -128				; ffffff80H
	sub	DWORD PTR tv1010[esp+320], 1
	mov	DWORD PTR _k$[esp+320], ecx
	jne	SHORT $LL53@PDJPG_Enco@2
; Line 2211
	mov	edi, DWORD PTR _ys2$[esp+320]
$LN121@PDJPG_Enco@2:
; Line 2219
	cmp	DWORD PTR [esi+7800], 0
	jne	$LN122@PDJPG_Enco@2
$LN130@PDJPG_Enco@2:
; Line 2222
	mov	eax, ebp
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	xor	ecx, ecx
	xor	ebx, ebx
	mov	DWORD PTR _i$[esp+320], ecx
	mov	DWORD PTR $T130189[esp+320], eax
	test	eax, eax
	jl	$LN120@PDJPG_Enco@2
	mov	eax, DWORD PTR _xs3$[esp+320]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR $T130190[esp+320], eax
	mov	DWORD PTR tv1727[esp+320], 1
	npad	6
$LL49@PDJPG_Enco@2:
; Line 2223
	test	eax, eax
	jle	$LN48@PDJPG_Enco@2
	mov	eax, DWORD PTR _xs2$[esp+320]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ebp, eax
	imul	ebp, ecx
	mov	ecx, DWORD PTR tv1727[esp+320]
	imul	ecx, eax
	mov	eax, DWORD PTR $T130190[esp+320]
	shl	ebp, 8
	shl	ecx, 7
	mov	DWORD PTR tv1690[esp+320], ecx
	mov	DWORD PTR tv413[esp+320], eax
$LL46@PDJPG_Enco@2:
; Line 2225
	mov	edi, DWORD PTR [esi+7820]
; Line 2226
	push	0
	add	edi, ebp
	push	edi
	push	edi
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 2227
	sub	WORD PTR [edi], bx
	movzx	eax, WORD PTR [edi]
; Line 2229
	mov	edx, DWORD PTR [esi+7820]
	lea	edi, DWORD PTR [edx+ebp+128]
; Line 2230
	push	0
	push	edi
	movsx	ecx, ax
	push	edi
	push	esi
	add	ebx, ecx
	call	_PDJHUFF_QuantBlock
; Line 2231
	sub	WORD PTR [edi], bx
	movzx	eax, WORD PTR [edi]
; Line 2233
	mov	edi, DWORD PTR [esi+7820]
	add	edi, DWORD PTR tv1690[esp+352]
; Line 2234
	push	0
	push	edi
	cwde
	push	edi
	push	esi
	add	ebx, eax
	call	_PDJHUFF_QuantBlock
; Line 2235
	sub	WORD PTR [edi], bx
	movzx	eax, WORD PTR [edi]
; Line 2237
	mov	edx, DWORD PTR [esi+7820]
	movsx	ecx, ax
	mov	eax, DWORD PTR tv1690[esp+368]
	lea	edi, DWORD PTR [eax+edx+128]
; Line 2238
	push	0
	push	edi
	push	edi
	push	esi
	add	ebx, ecx
	call	_PDJHUFF_QuantBlock
; Line 2239
	sub	WORD PTR [edi], bx
	movzx	eax, WORD PTR [edi]
	add	DWORD PTR tv1690[esp+384], 256		; 00000100H
	movsx	ecx, ax
	add	esp, 64					; 00000040H
	add	ebx, ecx
	add	ebp, 256				; 00000100H
	sub	DWORD PTR tv413[esp+320], 1
	jne	$LL46@PDJPG_Enco@2
	mov	ecx, DWORD PTR _i$[esp+320]
	mov	ebp, DWORD PTR _ys3$[esp+320]
	mov	edi, DWORD PTR _ys2$[esp+320]
	mov	eax, DWORD PTR $T130190[esp+320]
$LN48@PDJPG_Enco@2:
	add	DWORD PTR tv1727[esp+320], 2
	inc	ecx
	cmp	ecx, DWORD PTR $T130189[esp+320]
	mov	DWORD PTR _i$[esp+320], ecx
	jle	$LL49@PDJPG_Enco@2
$LN120@PDJPG_Enco@2:
; Line 2222
	mov	ebx, DWORD PTR _xs3$[esp+320]
$LN122@PDJPG_Enco@2:
; Line 2243
	mov	eax, ebp
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	mov	eax, ebx
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	sar	ecx, 3
	mov	DWORD PTR tv1134[esp+320], eax
	imul	eax, ecx
	xor	ebx, ebx
	xor	ebp, ebp
	mov	DWORD PTR tv1133[esp+320], ecx
	mov	DWORD PTR tv1135[esp+320], eax
; Line 2244
	test	eax, eax
	jle	SHORT $LN41@PDJPG_Enco@2
	xor	edi, edi
	mov	DWORD PTR tv995[esp+320], eax
	npad	2
$LL43@PDJPG_Enco@2:
; Line 2246
	mov	edx, DWORD PTR [esi+7824]
	lea	eax, DWORD PTR [edi+edx]
	push	1
	push	eax
	push	eax
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 2247
	mov	eax, DWORD PTR [esi+7828]
	add	eax, edi
	push	1
	push	eax
	push	eax
	push	esi
	call	_PDJHUFF_QuantBlock
; Line 2248
	mov	ecx, DWORD PTR [esi+7824]
	sub	WORD PTR [edi+ecx], bx
	mov	edx, DWORD PTR [esi+7824]
	lea	eax, DWORD PTR [edi+ecx]
	movsx	eax, WORD PTR [edi+edx]
; Line 2249
	mov	ecx, DWORD PTR [esi+7828]
	sub	WORD PTR [ecx+edi], bp
	mov	edx, DWORD PTR [esi+7828]
	add	ebx, eax
	lea	eax, DWORD PTR [ecx+edi]
	movsx	eax, WORD PTR [edx+edi]
	add	esp, 32					; 00000020H
	add	ebp, eax
	sub	edi, -128				; ffffff80H
	sub	DWORD PTR tv995[esp+320], 1
	jne	SHORT $LL43@PDJPG_Enco@2
; Line 2244
	mov	edi, DWORD PTR _ys2$[esp+320]
$LN41@PDJPG_Enco@2:
; Line 2254
	cmp	DWORD PTR [esi+7804], 0
	jg	$LN118@PDJPG_Enco@2
; Line 2256
	mov	eax, 1
	lea	edi, DWORD PTR [esi+7840]
	mov	ecx, 256				; 00000100H
	rep stosd
; Line 2257
	lea	edi, DWORD PTR [esi+8864]
	mov	ecx, 256				; 00000100H
	rep stosd
; Line 2258
	lea	ebx, DWORD PTR [esi+9888]
	mov	ecx, 256				; 00000100H
	mov	edi, ebx
	rep stosd
; Line 2259
	lea	ebp, DWORD PTR [esi+10912]
	mov	ecx, 256				; 00000100H
	mov	edi, ebp
	rep stosd
; Line 2261
	mov	eax, DWORD PTR _ys2$[esp+320]
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	mov	eax, DWORD PTR _xs2$[esp+320]
	cdq
	and	edx, 7
	add	eax, edx
	sar	ecx, 3
	sar	eax, 3
	imul	ecx, eax
; Line 2263
	test	ecx, ecx
	jle	SHORT $LN25@PDJPG_Enco@2
	xor	edi, edi
	mov	DWORD PTR tv69[esp+320], ecx
	npad	5
$LL27@PDJPG_Enco@2:
	mov	ecx, DWORD PTR [esi+7820]
; Line 2264
	lea	eax, DWORD PTR [esi+8864]
	push	eax
	lea	eax, DWORD PTR [esi+7840]
	push	eax
	add	ecx, edi
	push	ecx
	call	_PDJHUFF_StatBlock
	add	esp, 12					; 0000000cH
	sub	edi, -128				; ffffff80H
	sub	DWORD PTR tv69[esp+320], 1
	jne	SHORT $LL27@PDJPG_Enco@2
$LN25@PDJPG_Enco@2:
; Line 2265
	mov	eax, DWORD PTR tv1135[esp+320]
	test	eax, eax
	jle	SHORT $LN19@PDJPG_Enco@2
	xor	edi, edi
	mov	DWORD PTR tv1925[esp+320], eax
$LL24@PDJPG_Enco@2:
	mov	edx, DWORD PTR [esi+7824]
; Line 2266
	push	ebp
	add	edx, edi
	push	ebx
	push	edx
	call	_PDJHUFF_StatBlock
	add	esp, 12					; 0000000cH
	sub	edi, -128				; ffffff80H
	sub	DWORD PTR tv1925[esp+320], 1
	jne	SHORT $LL24@PDJPG_Enco@2
	mov	eax, DWORD PTR tv1135[esp+320]
; Line 2267
	test	eax, eax
	jle	SHORT $LN19@PDJPG_Enco@2
	xor	edi, edi
	mov	DWORD PTR tv1942[esp+320], eax
$LL21@PDJPG_Enco@2:
	mov	eax, DWORD PTR [esi+7828]
; Line 2268
	push	ebp
	add	eax, edi
	push	ebx
	push	eax
	call	_PDJHUFF_StatBlock
	add	esp, 12					; 0000000cH
	sub	edi, -128				; ffffff80H
	sub	DWORD PTR tv1942[esp+320], 1
	jne	SHORT $LL21@PDJPG_Enco@2
$LN19@PDJPG_Enco@2:
; Line 2270
	push	16					; 00000010H
	lea	ecx, DWORD PTR [esi+4096]
	push	ecx
	lea	eax, DWORD PTR [esi+7840]
	push	256					; 00000100H
	push	eax
	call	_PDJHUFF_BuildLengths
; Line 2271
	push	16					; 00000010H
	lea	edx, DWORD PTR [esi+4352]
	push	edx
	lea	eax, DWORD PTR [esi+8864]
	push	256					; 00000100H
	push	eax
	call	_PDJHUFF_BuildLengths
; Line 2272
	push	16					; 00000010H
	lea	eax, DWORD PTR [esi+4608]
	push	eax
	push	256					; 00000100H
	push	ebx
	call	_PDJHUFF_BuildLengths
; Line 2273
	push	16					; 00000010H
	lea	ecx, DWORD PTR [esi+4864]
	push	ecx
	push	256					; 00000100H
	push	ebp
	call	_PDJHUFF_BuildLengths
	mov	edi, DWORD PTR _ys2$[esp+384]
	add	esp, 64					; 00000040H
$LN118@PDJPG_Enco@2:
; Line 2276
	mov	edx, DWORD PTR _obuf$GSCopy$[esp+320]
; Line 2277
	xor	ecx, ecx
	mov	DWORD PTR _pdjhuff_ct, edx
	mov	DWORD PTR _pdjhuff_win, ecx
; Line 2278
	mov	DWORD PTR _pdjhuff_pos, ecx
; Line 2280
	mov	eax, DWORD PTR [esi+7444]
	cmp	eax, ecx
	je	SHORT $LN18@PDJPG_Enco@2
	cmp	eax, DWORD PTR [esi+7452]
	je	SHORT $LN18@PDJPG_Enco@2
; Line 2286
	mov	ecx, eax
	sar	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, eax
	sar	edx, 16					; 00000010H
	mov	ecx, eax
	and	edx, 255				; 000000ffH
	push	edx
	sar	ecx, 8
	and	ecx, 255				; 000000ffH
	push	ecx
	and	eax, 255				; 000000ffH
	push	eax
	lea	edx, DWORD PTR _tb$[esp+336]
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	push	edx
	call	_sprintf
; Line 2288
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 2290
	push	OFFSET ??_C@_0L@CLNFBEME@AlphaColor?$AA@
	mov	BYTE PTR [eax], 235			; 000000ebH
	inc	DWORD PTR _pdjhuff_ct
	push	esi
	call	_PDJHUFF_WriteString
; Line 2291
	lea	ecx, DWORD PTR _tb$[esp+352]
	push	ecx
	push	esi
	call	_PDJHUFF_WriteString
	add	esp, 40					; 00000028H
$LN18@PDJPG_Enco@2:
; Line 2294
	mov	edx, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [edx], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 2295
	mov	BYTE PTR [eax], 216			; 000000d8H
	inc	DWORD PTR _pdjhuff_ct
; Line 2297
	cmp	DWORD PTR [esi+7804], 0
	jg	SHORT $LN16@PDJPG_Enco@2
; Line 2299
	push	0
	push	esi
	call	_PDJPG_EmitDQT
	add	esp, 8
; Line 2300
	cmp	DWORD PTR [esi+7800], 0
	jne	SHORT $LN16@PDJPG_Enco@2
	push	1
	push	esi
	call	_PDJPG_EmitDQT
	add	esp, 8
$LN16@PDJPG_Enco@2:
; Line 2303
	mov	eax, DWORD PTR _ys$[esp+316]
	mov	ecx, DWORD PTR _xs$[esp+316]
	push	eax
	push	ecx
	push	esi
	call	_PDJPG_EmitSOF
	add	esp, 12					; 0000000cH
; Line 2305
	cmp	DWORD PTR [esi+7804], 0
	jg	SHORT $LN123@PDJPG_Enco@2
; Line 2307
	push	0
	push	esi
	call	_PDJPG_EmitDHT
; Line 2308
	push	1
	push	esi
	call	_PDJPG_EmitDHT
	add	esp, 16					; 00000010H
; Line 2309
	cmp	DWORD PTR [esi+7800], 0
	jne	SHORT $LN123@PDJPG_Enco@2
; Line 2311
	push	2
	push	esi
	call	_PDJPG_EmitDHT
; Line 2312
	push	3
	push	esi
	call	_PDJPG_EmitDHT
	add	esp, 16					; 00000010H
$LN123@PDJPG_Enco@2:
; Line 2316
	push	esi
	call	_PDJPG_EmitSOS
	add	esp, 4
; Line 2318
	cmp	DWORD PTR [esi+7800], 0
	je	SHORT $LN13@PDJPG_Enco@2
; Line 2320
	mov	eax, edi
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	mov	eax, DWORD PTR _xs2$[esp+320]
	cdq
	and	edx, 7
	add	eax, edx
	sar	ecx, 3
	sar	eax, 3
	imul	ecx, eax
; Line 2321
	test	ecx, ecx
	jle	$LN6@PDJPG_Enco@2
	xor	edi, edi
	mov	ebx, ecx
	npad	5
$LL12@PDJPG_Enco@2:
	mov	edx, DWORD PTR [esi+7820]
	push	1
	push	0
	add	edx, edi
	push	edx
	push	esi
	call	_PDJHUFF_EncodeBlock
	add	esp, 16					; 00000010H
	sub	edi, -128				; ffffff80H
	sub	ebx, 1
	jne	SHORT $LL12@PDJPG_Enco@2
; Line 2322
	jmp	$LN6@PDJPG_Enco@2
$LN13@PDJPG_Enco@2:
; Line 2324
	xor	ecx, ecx
	cmp	DWORD PTR tv1133[esp+320], ecx
	mov	DWORD PTR _i$[esp+320], ecx
	jl	$LN6@PDJPG_Enco@2
	mov	eax, DWORD PTR tv1134[esp+320]
	xor	ebp, ebp
	mov	ebx, 1
	shl	eax, 7
	mov	DWORD PTR tv2163[esp+320], ebx
	mov	DWORD PTR tv2165[esp+320], ebp
	mov	DWORD PTR tv2177[esp+320], eax
	npad	3
$LL127@PDJPG_Enco@2:
; Line 2325
	cmp	DWORD PTR tv1134[esp+320], 0
	jle	$LN7@PDJPG_Enco@2
	mov	eax, DWORD PTR _xs2$[esp+320]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edi, eax
	imul	ebx, eax
	mov	eax, DWORD PTR tv1134[esp+320]
	imul	edi, ecx
	shl	edi, 8
	shl	ebx, 7
	mov	DWORD PTR tv2095[esp+320], eax
	npad	2
$LL5@PDJPG_Enco@2:
; Line 2328
	mov	ecx, DWORD PTR [esi+7820]
	push	1
	push	0
	add	ecx, edi
	push	ecx
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 2330
	mov	edx, DWORD PTR [esi+7820]
	push	1
	push	0
	lea	eax, DWORD PTR [edx+edi+128]
	push	eax
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 2332
	mov	ecx, DWORD PTR [esi+7820]
	push	1
	push	0
	add	ecx, ebx
	push	ecx
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 2334
	mov	edx, DWORD PTR [esi+7820]
	push	1
	push	0
	lea	eax, DWORD PTR [edx+ebx+128]
	push	eax
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 2337
	mov	ecx, DWORD PTR [esi+7824]
	add	esp, 64					; 00000040H
	push	3
	push	2
	add	ecx, ebp
	push	ecx
	push	esi
	call	_PDJHUFF_EncodeBlock
; Line 2338
	mov	edx, DWORD PTR [esi+7828]
	push	3
	push	2
	add	edx, ebp
	push	edx
	push	esi
	call	_PDJHUFF_EncodeBlock
	add	esp, 32					; 00000020H
	add	edi, 256				; 00000100H
	add	ebx, 256				; 00000100H
	sub	ebp, -128				; ffffff80H
	sub	DWORD PTR tv2095[esp+320], 1
	jne	$LL5@PDJPG_Enco@2
	mov	eax, DWORD PTR tv2177[esp+320]
	mov	ecx, DWORD PTR _i$[esp+320]
$LN7@PDJPG_Enco@2:
	mov	ebp, DWORD PTR tv2165[esp+320]
	mov	ebx, DWORD PTR tv2163[esp+320]
	inc	ecx
	add	ebp, eax
	add	ebx, 2
	cmp	ecx, DWORD PTR tv1133[esp+320]
	mov	DWORD PTR _i$[esp+320], ecx
	mov	DWORD PTR tv2165[esp+320], ebp
	mov	DWORD PTR tv2163[esp+320], ebx
	jle	$LL127@PDJPG_Enco@2
$LN6@PDJPG_Enco@2:
; Line 2342
	push	esi
	call	_PDJHUFF_FlushBits
; Line 2344
	mov	eax, DWORD PTR _pdjhuff_ct
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	eax, DWORD PTR _pdjhuff_ct
	inc	eax
	mov	DWORD PTR _pdjhuff_ct, eax
; Line 2345
	mov	BYTE PTR [eax], 217			; 000000d9H
	inc	DWORD PTR _pdjhuff_ct
; Line 2347
	mov	eax, DWORD PTR [esi+7804]
	add	esp, 4
	test	eax, eax
	jg	SHORT $LN2@PDJPG_Enco@2
; Line 2349
	mov	DWORD PTR [esi+7804], 16		; 00000010H
; Line 2350
	jmp	SHORT $LN1@PDJPG_Enco@2
$LN2@PDJPG_Enco@2:
; Line 2352
	dec	eax
	mov	DWORD PTR [esi+7804], eax
$LN1@PDJPG_Enco@2:
; Line 2360
	mov	ecx, DWORD PTR __$ArrayPad$[esp+320]
	mov	eax, DWORD PTR _pdjhuff_ct
	sub	eax, DWORD PTR _obuf$GSCopy$[esp+320]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	ret	0
_PDJPG_EncodeFastCtx ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_EncodeFast
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_EncodeFast
_TEXT	SEGMENT
_ibuf$ = 8						; size = 4
_obuf$ = 12						; size = 4
_xs$ = 16						; size = 4
_ys$ = 20						; size = 4
_qf$ = 24						; size = 4
_PDJPG_EncodeFast PROC					; COMDAT
; Line 2364
	push	esi
; Line 2368
	mov	esi, DWORD PTR ?ctx@?1??PDJPG_EncodeFast@@9@9
	test	esi, esi
	jne	SHORT $LN1@PDJPG_Enco@3
	push	11936					; 00002ea0H
	call	_malloc
	push	11936					; 00002ea0H
	mov	esi, eax
	push	0
	push	esi
	call	_memset
	add	esp, 16					; 00000010H
	mov	DWORD PTR ?ctx@?1??PDJPG_EncodeFast@@9@9, esi
$LN1@PDJPG_Enco@3:
; Line 2369
	mov	eax, DWORD PTR _qf$[esp]
	mov	ecx, DWORD PTR _ys$[esp]
	mov	edx, DWORD PTR _xs$[esp]
	push	0
	push	eax
	mov	eax, DWORD PTR _obuf$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR _ibuf$[esp+12]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	_PDJPG_EncodeFastCtx
	add	esp, 28					; 0000001cH
	pop	esi
; Line 2372
	ret	0
_PDJPG_EncodeFast ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_Store
EXTRN	__imp__vfwrite:PROC
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_Store
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_ibuf$ = 12						; size = 4
_xs$ = 16						; size = 4
_ys$ = 20						; size = 4
_qf$ = 24						; size = 4
_PDJPG_Store PROC					; COMDAT
; Line 2394
	push	edi
; Line 2398
	mov	edi, DWORD PTR ?buf@?1??PDJPG_Store@@9@9
	test	edi, edi
	jne	SHORT $LN2@PDJPG_Stor
	push	4194304					; 00400000H
	call	_malloc
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR ?buf@?1??PDJPG_Store@@9@9, edi
$LN2@PDJPG_Stor:
	push	esi
; Line 2400
	push	11936					; 00002ea0H
	call	_malloc
	push	11936					; 00002ea0H
	mov	esi, eax
	push	0
	push	esi
	call	_memset
	mov	eax, DWORD PTR _qf$[esp+20]
	mov	ecx, DWORD PTR _ys$[esp+20]
	mov	edx, DWORD PTR _xs$[esp+20]
	push	eax
	mov	eax, DWORD PTR _ibuf$[esp+24]
	push	ecx
	push	edx
	push	edi
	push	eax
	push	esi
	call	_PDJPG_EncodeCtx
	push	esi
	mov	edi, eax
	call	_PDJPG_FreeContext
	add	esp, 44					; 0000002cH
	pop	esi
; Line 2401
	test	edi, edi
	jge	SHORT $LN1@PDJPG_Stor
	mov	eax, edi
	pop	edi
; Line 2407
	ret	0
$LN1@PDJPG_Stor:
; Line 2403
	mov	ecx, DWORD PTR _fd$[esp]
	mov	edx, DWORD PTR ?buf@?1??PDJPG_Store@@9@9
	push	ecx
	push	edi
	push	1
	push	edx
	call	DWORD PTR __imp__vfwrite
	add	esp, 16					; 00000010H
; Line 2406
	xor	eax, eax
	pop	edi
; Line 2407
	ret	0
_PDJPG_Store ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_MarkerAPP11
EXTRN	_sscanf:PROC
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_MarkerAPP11
_TEXT	SEGMENT
_ca$ = -16						; size = 4
_cb$ = -12						; size = 4
_cg$ = -8						; size = 4
_cr$ = -4						; size = 4
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_PDJPG_MarkerAPP11 PROC					; COMDAT
; Line 752
	sub	esp, 16					; 00000010H
	push	esi
; Line 755
	mov	esi, DWORD PTR _buf$[esp+16]
	mov	ecx, OFFSET ??_C@_0L@CLNFBEME@AlphaColor?$AA@
	mov	eax, esi
	npad	1
$LL4@PDJPG_Mark@5:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN5@PDJPG_Mark@5
	test	dl, dl
	je	SHORT $LN6@PDJPG_Mark@5
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN5@PDJPG_Mark@5
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL4@PDJPG_Mark@5
$LN6@PDJPG_Mark@5:
	xor	eax, eax
	jmp	SHORT $LN7@PDJPG_Mark@5
$LN5@PDJPG_Mark@5:
	sbb	eax, eax
	sbb	eax, -1
$LN7@PDJPG_Mark@5:
	test	eax, eax
	jne	SHORT $LN1@PDJPG_Mark@5
; Line 757
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL8@PDJPG_Mark@5:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL8@PDJPG_Mark@5
	sub	eax, edx
; Line 758
	lea	ecx, DWORD PTR _ca$[esp+20]
	push	ecx
	lea	edx, DWORD PTR _cb$[esp+24]
	push	edx
	lea	ecx, DWORD PTR _cg$[esp+28]
	push	ecx
	lea	edx, DWORD PTR _cr$[esp+32]
	push	edx
	lea	eax, DWORD PTR [eax+esi+1]
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	push	eax
	call	_sscanf
; Line 759
	mov	ecx, DWORD PTR _ca$[esp+44]
	mov	edx, DWORD PTR _cb$[esp+44]
	mov	eax, DWORD PTR _cg$[esp+44]
	push	ecx
	mov	ecx, DWORD PTR _cr$[esp+48]
	push	edx
	mov	edx, DWORD PTR _ctx$[esp+48]
	push	eax
	push	ecx
	push	edx
	call	_PDJPG_SetContextAlphaColor
	add	esp, 44					; 0000002cH
; Line 760
	mov	eax, 1
	pop	esi
; Line 764
	add	esp, 16					; 00000010H
	ret	0
$LN1@PDJPG_Mark@5:
; Line 763
	xor	eax, eax
	pop	esi
; Line 764
	add	esp, 16					; 00000010H
	ret	0
_PDJPG_MarkerAPP11 ENDP
_TEXT	ENDS
PUBLIC	__real@3ffc5a1cac083127
PUBLIC	__real@3fe6da3c21187e7c
PUBLIC	__real@3fd60663c74fb54a
PUBLIC	__real@3ff66e978d4fdf3b
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4030000000000000
PUBLIC	_PDJPG_DecodeCtx
EXTRN	__CIsqrt:PROC
;	COMDAT __real@3ffc5a1cac083127
CONST	SEGMENT
__real@3ffc5a1cac083127 DQ 03ffc5a1cac083127r	; 1.772
CONST	ENDS
;	COMDAT __real@3fe6da3c21187e7c
CONST	SEGMENT
__real@3fe6da3c21187e7c DQ 03fe6da3c21187e7cr	; 0.71414
CONST	ENDS
;	COMDAT __real@3fd60663c74fb54a
CONST	SEGMENT
__real@3fd60663c74fb54a DQ 03fd60663c74fb54ar	; 0.34414
CONST	ENDS
;	COMDAT __real@3ff66e978d4fdf3b
CONST	SEGMENT
__real@3ff66e978d4fdf3b DQ 03ff66e978d4fdf3br	; 1.402
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PDJPG_DecodeCtx
_TEXT	SEGMENT
tv1447 = -20						; size = 4
_g$ = -20						; size = 4
_l$ = -20						; size = 4
tv1452 = -16						; size = 4
tv1032 = -16						; size = 4
tv1024 = -16						; size = 4
_a$ = -16						; size = 4
_i$ = -12						; size = 4
tv1508 = -8						; size = 4
tv1504 = -8						; size = 4
_j$ = -8						; size = 4
tv1438 = -4						; size = 4
_y$ = -4						; size = 4
_ctx$ = 8						; size = 4
_b$ = 12						; size = 4
_r$ = 12						; size = 4
_obuf$ = 12						; size = 4
_buf$ = 12						; size = 4
_sz$ = 16						; size = 4
_xs$ = 20						; size = 4
_ys$ = 24						; size = 4
_PDJPG_DecodeCtx PROC					; COMDAT
; Line 797
	sub	esp, 20					; 00000014H
	push	ebx
; Line 802
	mov	ebx, DWORD PTR _buf$[esp+20]
	cmp	BYTE PTR [ebx], 255			; 000000ffH
	push	edi
	jne	$LN38@PDJPG_Deco
	cmp	BYTE PTR [ebx+1], 216			; 000000d8H
	lea	edi, DWORD PTR [ebx+1]
	jne	$LN38@PDJPG_Deco
; Line 807
	xor	ecx, ecx
; Line 811
	cmp	DWORD PTR _sz$[esp+24], ecx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+32]
	mov	DWORD PTR [esi+7700], ecx
	mov	DWORD PTR [esi+7716], ecx
	mov	DWORD PTR [esi+7704], ecx
	mov	DWORD PTR [esi+7720], ecx
	mov	DWORD PTR [esi+7708], ecx
	mov	DWORD PTR [esi+7724], ecx
	mov	DWORD PTR [esi+7712], ecx
	mov	DWORD PTR [esi+7728], ecx
	jle	$LN74@PDJPG_Deco
	or	ebp, -1
	sub	ebp, ebx
$LL34@PDJPG_Deco:
; Line 813
	cmp	BYTE PTR [edi-1], 255			; 000000ffH
	jne	$LN33@PDJPG_Deco
	mov	al, BYTE PTR [edi]
	test	al, al
	je	SHORT $LN33@PDJPG_Deco
	cmp	al, 255					; 000000ffH
	je	SHORT $LN33@PDJPG_Deco
; Line 821
	cmp	al, 219					; 000000dbH
	jne	SHORT $LN29@PDJPG_Deco
	lea	eax, DWORD PTR [edi+ebp]
	lea	ecx, DWORD PTR [eax+ebx+2]
	push	ecx
	push	esi
	call	_PDJPG_MarkerDQT
	add	esp, 8
$LN29@PDJPG_Deco:
; Line 822
	cmp	BYTE PTR [edi], 196			; 000000c4H
	jne	SHORT $LN28@PDJPG_Deco
	lea	edx, DWORD PTR [edi+ebp]
	lea	eax, DWORD PTR [edx+ebx+2]
	push	eax
	push	esi
	call	_PDJPG_MarkerDHT
	add	esp, 8
$LN28@PDJPG_Deco:
; Line 823
	cmp	BYTE PTR [edi], 192			; 000000c0H
	jne	SHORT $LN27@PDJPG_Deco
	lea	ecx, DWORD PTR [edi+ebp]
	lea	edx, DWORD PTR [ecx+ebx+2]
	push	edx
	push	esi
	call	_PDJPG_MarkerSOF0
	add	esp, 8
$LN27@PDJPG_Deco:
; Line 824
	cmp	BYTE PTR [edi], 218			; 000000daH
	jne	SHORT $LN26@PDJPG_Deco
	lea	eax, DWORD PTR [edi+ebp]
	lea	ecx, DWORD PTR [eax+ebx+2]
	push	ecx
	push	esi
	call	_PDJPG_MarkerSOS
	add	esp, 8
$LN26@PDJPG_Deco:
; Line 827
	cmp	BYTE PTR [edi], 235			; 000000ebH
	jne	SHORT $LN24@PDJPG_Deco
	lea	edx, DWORD PTR [edi+ebp]
	lea	eax, DWORD PTR [edx+ebx+2]
	push	eax
	push	esi
	call	_PDJPG_MarkerAPP11
	add	esp, 8
$LN24@PDJPG_Deco:
; Line 829
	xor	ecx, ecx
	cmp	BYTE PTR [edi], 217			; 000000d9H
	je	SHORT $LN74@PDJPG_Deco
$LN33@PDJPG_Deco:
; Line 811
	inc	edi
	lea	edx, DWORD PTR [edi+ebp]
	cmp	edx, DWORD PTR _sz$[esp+32]
	jl	$LL34@PDJPG_Deco
$LN74@PDJPG_Deco:
; Line 833
	mov	ebp, DWORD PTR [esi+7796]
	mov	DWORD PTR _obuf$[esp+32], ebp
; Line 834
	cmp	ebp, ecx
	je	SHORT $LN20@PDJPG_Deco
	mov	eax, DWORD PTR [esi+7456]
	cmp	eax, DWORD PTR [esi+7832]
	jne	SHORT $LN21@PDJPG_Deco
	mov	edx, DWORD PTR [esi+7460]
	cmp	edx, DWORD PTR [esi+7836]
	je	SHORT $LN86@PDJPG_Deco
$LN21@PDJPG_Deco:
; Line 836
	cmp	ebp, ecx
	je	SHORT $LN20@PDJPG_Deco
; Line 837
	push	ebp
	call	_free
	add	esp, 4
$LN20@PDJPG_Deco:
; Line 839
	mov	eax, DWORD PTR [esi+7456]
	mov	ecx, DWORD PTR [esi+7460]
	inc	eax
	inc	ecx
	imul	eax, ecx
	add	eax, eax
	add	eax, eax
	push	eax
	call	_malloc
; Line 840
	mov	edx, DWORD PTR [esi+7456]
	imul	edx, DWORD PTR [esi+7460]
	add	edx, edx
	add	edx, edx
	push	edx
	mov	edi, eax
	push	255					; 000000ffH
	push	edi
	mov	DWORD PTR _obuf$[esp+48], edi
	call	_memset
; Line 843
	mov	eax, DWORD PTR [esi+7456]
; Line 844
	mov	ecx, DWORD PTR [esi+7460]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+7796], edi
	mov	DWORD PTR [esi+7832], eax
	mov	DWORD PTR [esi+7836], ecx
	mov	ebp, edi
$LN86@PDJPG_Deco:
; Line 847
	xor	ebx, ebx
	cmp	DWORD PTR [esi+7656], ebx
	jle	$LN17@PDJPG_Deco
	lea	ecx, DWORD PTR [esi+7764]
	npad	8
$LL19@PDJPG_Deco:
; Line 849
	mov	edi, DWORD PTR [ecx-80]
; Line 850
	movzx	edx, BYTE PTR [esi+edi+7480]
	mov	DWORD PTR tv1508[esp+36], edx
	inc	ebx
	add	ecx, 4
	fild	DWORD PTR tv1508[esp+36]
	fidiv	DWORD PTR [esi+7660]
	fstp	DWORD PTR [ecx-4]
; Line 851
	movzx	eax, BYTE PTR [esi+edi+7496]
	mov	DWORD PTR tv1504[esp+36], eax
	fild	DWORD PTR tv1504[esp+36]
	fidiv	DWORD PTR [esi+7664]
	fstp	DWORD PTR [ecx+12]
; Line 852
	mov	eax, DWORD PTR [esi+edi*4+7528]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [ecx-36], eax
; Line 853
	mov	eax, DWORD PTR [esi+edi*4+7592]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [ecx-20], eax
	cmp	ebx, DWORD PTR [esi+7656]
	jl	SHORT $LL19@PDJPG_Deco
$LN17@PDJPG_Deco:
; Line 857
	cmp	DWORD PTR [esi+7460], 0
	mov	DWORD PTR _i$[esp+36], 0
	jle	$LN14@PDJPG_Deco
	mov	ebx, DWORD PTR _r$[esp+32]
	mov	eax, DWORD PTR _b$[esp+32]
	npad	6
$LL16@PDJPG_Deco:
; Line 858
	cmp	DWORD PTR [esi+7456], 0
	mov	DWORD PTR _j$[esp+36], 0
	jle	$LN15@PDJPG_Deco
	npad	11
$LL13@PDJPG_Deco:
; Line 860
	mov	ecx, DWORD PTR [esi+7656]
	cmp	ecx, 3
	jne	$LN10@PDJPG_Deco
; Line 862
	fild	DWORD PTR _j$[esp+36]
	fstp	DWORD PTR tv1024[esp+36]
	fld	DWORD PTR [esi+7764]
	fld	DWORD PTR tv1024[esp+36]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	fild	DWORD PTR _i$[esp+36]
	mov	edi, eax
	fstp	DWORD PTR tv1032[esp+36]
	fld	DWORD PTR [esi+7780]
	fld	DWORD PTR tv1032[esp+36]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
; Line 863
	fld	DWORD PTR [esi+7768]
	mov	ecx, eax
	fmul	ST(0), ST(2)
	sar	ecx, 3
	imul	ecx, DWORD PTR [esi+7732]
	mov	edx, edi
	sar	edx, 3
	add	ecx, edx
	mov	edx, DWORD PTR [esi+7716]
	and	eax, 7
	lea	eax, DWORD PTR [eax+ecx*8]
	and	edi, 7
	lea	ecx, DWORD PTR [edi+eax*8]
	movzx	ebx, BYTE PTR [ecx+edx]
	mov	DWORD PTR _y$[esp+36], ebx
	call	__ftol2_sse
	mov	edi, eax
	fld	DWORD PTR [esi+7784]
	fmul	ST(0), ST(1)
	call	__ftol2_sse
; Line 864
	fld	DWORD PTR [esi+7772]
	mov	ecx, eax
	fmulp	ST(2), ST(0)
	sar	ecx, 3
	fxch	ST(1)
	imul	ecx, DWORD PTR [esi+7736]
	mov	edx, edi
	sar	edx, 3
	add	ecx, edx
	mov	edx, DWORD PTR [esi+7720]
	and	eax, 7
	lea	eax, DWORD PTR [eax+ecx*8]
	and	edi, 7
	lea	ecx, DWORD PTR [edi+eax*8]
	movzx	ebp, BYTE PTR [ecx+edx]
	call	__ftol2_sse
	mov	edi, eax
	fmul	DWORD PTR [esi+7788]
	call	__ftol2_sse
	mov	ecx, eax
	sar	ecx, 3
	imul	ecx, DWORD PTR [esi+7740]
	mov	edx, edi
	sar	edx, 3
	add	ecx, edx
	mov	edx, DWORD PTR [esi+7724]
	and	eax, 7
	and	edi, 7
; Line 867
	cmp	DWORD PTR [esi+7444], 0
	lea	eax, DWORD PTR [eax+ecx*8]
	lea	ecx, DWORD PTR [edi+eax*8]
	movzx	edi, BYTE PTR [ecx+edx]
	mov	DWORD PTR _a$[esp+36], 255		; 000000ffH
	je	$LN85@PDJPG_Deco
; Line 869
	movzx	eax, BYTE PTR [esi+7448]
; Line 870
	movzx	edx, BYTE PTR [esi+7449]
	sub	ebx, eax
	mov	ecx, ebp
	sub	ecx, edx
	mov	edx, ecx
	imul	edx, ecx
	mov	eax, ebx
	imul	eax, eax
	add	eax, edx
; Line 871
	movzx	edx, BYTE PTR [esi+7450]
	mov	ecx, edi
	sub	ecx, edx
	mov	edx, ecx
	imul	edx, ecx
	add	eax, edx
; Line 872
	cmp	eax, 256				; 00000100H
	mov	DWORD PTR _l$[esp+36], eax
	jge	SHORT $LN85@PDJPG_Deco
; Line 874
	fild	DWORD PTR _l$[esp+36]
	call	__CIsqrt
	fmul	QWORD PTR __real@4030000000000000
	movzx	eax, BYTE PTR [esi+7451]
	mov	DWORD PTR tv1452[esp+36], eax
	fild	DWORD PTR tv1452[esp+36]
	fdivp	ST(1), ST(0)
	fmul	QWORD PTR __real@406fe00000000000
	call	__ftol2_sse
	mov	DWORD PTR _a$[esp+36], eax
; Line 875
	test	eax, eax
	jge	SHORT $LN44@PDJPG_Deco
	mov	DWORD PTR _a$[esp+36], 0
	jmp	SHORT $LN85@PDJPG_Deco
$LN44@PDJPG_Deco:
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN85@PDJPG_Deco
	mov	DWORD PTR _a$[esp+36], 255		; 000000ffH
$LN85@PDJPG_Deco:
; Line 879
	add	edi, -128				; ffffff80H
	mov	DWORD PTR tv1447[esp+36], edi
	fild	DWORD PTR tv1447[esp+36]
	fild	DWORD PTR _y$[esp+36]
	fld	ST(1)
	fmul	QWORD PTR __real@3ff66e978d4fdf3b
	fadd	ST(0), ST(1)
	call	__ftol2_sse
; Line 880
	add	ebp, -128				; ffffff80H
	mov	DWORD PTR tv1438[esp+36], ebp
	fild	DWORD PTR tv1438[esp+36]
	mov	ebx, eax
	fld	QWORD PTR __real@3fd60663c74fb54a
	fmul	ST(0), ST(1)
	fsubr	ST(0), ST(2)
	fxch	ST(3)
	fmul	QWORD PTR __real@3fe6da3c21187e7c
	fsubp	ST(3), ST(0)
	fxch	ST(2)
	call	__ftol2_sse
; Line 881
	fxch	ST(1)
	fmul	QWORD PTR __real@3ffc5a1cac083127
	mov	DWORD PTR _g$[esp+36], eax
	faddp	ST(1), ST(0)
	call	__ftol2_sse
; Line 883
	test	ebx, ebx
	jge	SHORT $LN48@PDJPG_Deco
	xor	ebx, ebx
	jmp	SHORT $LN46@PDJPG_Deco
$LN48@PDJPG_Deco:
	cmp	ebx, 255				; 000000ffH
	jle	SHORT $LN46@PDJPG_Deco
	mov	ebx, 255				; 000000ffH
$LN46@PDJPG_Deco:
; Line 884
	mov	ecx, DWORD PTR _g$[esp+36]
	test	ecx, ecx
	jge	SHORT $LN52@PDJPG_Deco
	mov	DWORD PTR _g$[esp+36], 0
	jmp	SHORT $LN50@PDJPG_Deco
$LN52@PDJPG_Deco:
	cmp	ecx, 255				; 000000ffH
	jle	SHORT $LN50@PDJPG_Deco
	mov	DWORD PTR _g$[esp+36], 255		; 000000ffH
$LN50@PDJPG_Deco:
; Line 885
	test	eax, eax
	jge	$LN56@PDJPG_Deco
	xor	eax, eax
$LN88@PDJPG_Deco:
	mov	ebp, DWORD PTR _obuf$[esp+32]
$LN6@PDJPG_Deco:
; Line 893
	mov	ecx, DWORD PTR [esi+7460]
	sub	ecx, DWORD PTR _i$[esp+36]
	mov	edi, DWORD PTR _j$[esp+36]
; Line 896
	movzx	edx, BYTE PTR _g$[esp+36]
	dec	ecx
	imul	ecx, DWORD PTR [esi+7456]
	add	ecx, edi
	add	ecx, ecx
	add	ecx, ecx
	mov	BYTE PTR [ecx+ebp+1], dl
; Line 898
	movzx	edx, BYTE PTR _a$[esp+36]
	inc	edi
	mov	BYTE PTR [ecx+ebp], bl
	mov	BYTE PTR [ecx+ebp+2], al
	mov	BYTE PTR [ecx+ebp+3], dl
	cmp	edi, DWORD PTR [esi+7456]
	mov	DWORD PTR _j$[esp+36], edi
	jl	$LL13@PDJPG_Deco
$LN15@PDJPG_Deco:
; Line 857
	mov	ecx, DWORD PTR _i$[esp+36]
	inc	ecx
	cmp	ecx, DWORD PTR [esi+7460]
	mov	DWORD PTR _i$[esp+36], ecx
	jl	$LL16@PDJPG_Deco
$LN14@PDJPG_Deco:
; Line 901
	lea	edi, DWORD PTR [esi+7716]
	mov	ebx, 4
$LL5@PDJPG_Deco:
; Line 903
	mov	eax, DWORD PTR [edi-16]
	test	eax, eax
	je	SHORT $LN2@PDJPG_Deco
	push	eax
	call	_free
	add	esp, 4
$LN2@PDJPG_Deco:
; Line 904
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN1@PDJPG_Deco
	push	eax
	call	_free
	add	esp, 4
$LN1@PDJPG_Deco:
; Line 905
	mov	DWORD PTR [edi-16], 0
; Line 906
	mov	DWORD PTR [edi], 0
	add	edi, 4
	sub	ebx, 1
	jne	SHORT $LL5@PDJPG_Deco
; Line 909
	mov	eax, DWORD PTR [esi+7456]
	mov	ecx, DWORD PTR _xs$[esp+32]
	mov	DWORD PTR [ecx], eax
; Line 910
	mov	edx, DWORD PTR [esi+7460]
	mov	eax, DWORD PTR _ys$[esp+32]
	pop	esi
	mov	DWORD PTR [eax], edx
; Line 911
	mov	eax, ebp
	pop	ebp
	pop	edi
	pop	ebx
; Line 912
	add	esp, 20					; 00000014H
	ret	0
$LN56@PDJPG_Deco:
; Line 885
	cmp	eax, 255				; 000000ffH
	jle	$LN88@PDJPG_Deco
	mov	eax, 255				; 000000ffH
	jmp	$LN88@PDJPG_Deco
$LN10@PDJPG_Deco:
; Line 886
	cmp	ecx, 1
	jne	$LN6@PDJPG_Deco
; Line 888
	fld	DWORD PTR [esi+7764]
	fimul	DWORD PTR _j$[esp+36]
	call	__ftol2_sse
	fld	DWORD PTR [esi+7780]
	fimul	DWORD PTR _i$[esp+36]
	mov	edi, eax
	call	__ftol2_sse
	mov	ecx, eax
	sar	ecx, 3
	imul	ecx, DWORD PTR [esi+7732]
	mov	edx, edi
	sar	edx, 3
	add	ecx, edx
	mov	edx, DWORD PTR [esi+7716]
	and	eax, 7
	lea	eax, DWORD PTR [eax+ecx*8]
	and	edi, 7
	lea	ecx, DWORD PTR [edi+eax*8]
	movzx	ebx, BYTE PTR [ecx+edx]
; Line 889
	mov	DWORD PTR _g$[esp+36], ebx
	mov	eax, ebx
	mov	DWORD PTR _a$[esp+36], 255		; 000000ffH
	jmp	$LN6@PDJPG_Deco
$LN38@PDJPG_Deco:
	pop	edi
; Line 803
	xor	eax, eax
	pop	ebx
; Line 912
	add	esp, 20					; 00000014H
	ret	0
_PDJPG_DecodeCtx ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_Decode
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_Decode
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_sz$ = 12						; size = 4
_xs$ = 16						; size = 4
_ys$ = 20						; size = 4
_PDJPG_Decode PROC					; COMDAT
; Line 921
	push	esi
	push	edi
; Line 925
	push	11936					; 00002ea0H
	call	_malloc
	push	11936					; 00002ea0H
	mov	esi, eax
	push	0
	push	esi
	call	_memset
; Line 926
	mov	eax, DWORD PTR _ys$[esp+20]
	mov	ecx, DWORD PTR _xs$[esp+20]
	mov	edx, DWORD PTR _sz$[esp+20]
	push	eax
	mov	eax, DWORD PTR _buf$[esp+24]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	_PDJPG_DecodeCtx
; Line 928
	push	esi
	mov	edi, eax
	mov	DWORD PTR [esi+7796], 0
	call	_PDJPG_FreeContext
	add	esp, 40					; 00000028H
; Line 929
	mov	eax, edi
	pop	edi
	pop	esi
; Line 930
	ret	0
_PDJPG_Decode ENDP
_TEXT	ENDS
PUBLIC	_PDJPG_Load
EXTRN	__imp__vfread:PROC
EXTRN	__imp__vftell:PROC
EXTRN	__imp__vfseek:PROC
; Function compile flags: /Ogtpy
;	COMDAT _PDJPG_Load
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_xs$ = 12						; size = 4
_ys$ = 16						; size = 4
_PDJPG_Load PROC					; COMDAT
; Line 2376
	push	ebx
; Line 2380
	mov	ebx, DWORD PTR __imp__vfseek
	push	esi
	mov	esi, DWORD PTR _fd$[esp+4]
	push	edi
	push	2
	push	0
	push	0
	push	esi
	call	ebx
; Line 2381
	push	esi
	call	DWORD PTR __imp__vftell
; Line 2382
	push	0
	push	0
	push	0
	push	esi
	mov	edi, eax
	call	ebx
; Line 2384
	lea	eax, DWORD PTR [edi+256]
	push	eax
	call	_malloc
; Line 2385
	push	esi
	push	edi
	mov	ebx, eax
	push	1
	push	ebx
	call	DWORD PTR __imp__vfread
; Line 2387
	push	11936					; 00002ea0H
	call	_malloc
	push	11936					; 00002ea0H
	mov	esi, eax
	push	0
	push	esi
	call	_memset
	mov	ecx, DWORD PTR _ys$[esp+80]
	mov	edx, DWORD PTR _xs$[esp+80]
	add	esp, 72					; 00000048H
	push	ecx
	push	edx
	push	edi
	push	ebx
	push	esi
	call	_PDJPG_DecodeCtx
	push	esi
	mov	edi, eax
	mov	DWORD PTR [esi+7796], 0
	call	_PDJPG_FreeContext
; Line 2388
	push	ebx
	call	_free
	add	esp, 28					; 0000001cH
; Line 2390
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 2391
	ret	0
_PDJPG_Load ENDP
_TEXT	ENDS
END
