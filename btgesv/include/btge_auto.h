//AHSRC:base/b_phys.c
BTSV_API void BTGE_BrushPhys_SendBrush(BTGE_Brush *brsh);
BTSV_API void BTGE_BrushPhys_SendBrushes(BTGE_Brush *brsh);
BTSV_API void BTGE_BrushPhys_UpdateBrush(BTGE_Brush *brsh);
BTSV_API void BTGE_BrushPhys_UnlinkBrush(BTGE_Brush *brsh);
BTSV_API void BTGE_BrushPhys_UpdateWorld(BTGE_BrushWorld *world);
BTSV_API void BTGE_BrushPhys_UnlinkWorld(BTGE_BrushWorld *world);
BTSV_API void BTGE_BrushPhys_StepWorld(BTGE_BrushWorld *world, double dt);
BTSV_API BTGE_Light *BTGE_AllocServerLight(BTGE_BrushWorld *wrl);
//AHSRC:base/d_misc.c
BTSV_API double btSEntGetNum(btSEntity ent, char *name);
BTSV_API s64 btSEntGetInt(btSEntity ent, char *name);
BTSV_API vec3 btSEntGetVec3(btSEntity ent, char *name);
BTSV_API vec3 btSEntGetVec4(btSEntity ent, char *name);
BTSV_API void BtSg_func_duplicator(btWorld wrl, btSEntity args);
//AHSRC:base/e_ai.c
BTSV_API void BT_SightEntity(btEntity self, float time);
BTSV_API int BT_ChangeYaw(btEntity self);
BTSV_API int BT_CloseEnough(btEntity self, btEntity targ, float dist);
BTSV_API void BT_NewGoalMove(btEntity self, btEntity targ, float dist);
BTSV_API void BT_MoveToGoal(btEntity self, float dist);
BTSV_API int BT_Range(btEntity self, btEntity targ);
BTSV_API int BT_VisibleP(btEntity self, btEntity targ);
BTSV_API vec3 BT_Forward(btEntity self);
BTSV_API int BT_InfrontP(btEntity self, btEntity targ);
BTSV_API float BT_EnemyYaw(btEntity self);
BTSV_API float BT_TargetYaw(btEntity self, btEntity targ);
BTSV_API vec3d BT_AimOrigin(btEntity self);
BTSV_API vec3 BT_AimDirection(btEntity self,btEntity targ, float speed);
BTSV_API vec3 BT_TargetDirection(btEntity self, btEntity targ);
BTSV_API float BT_TargetDistance(btEntity self, btEntity targ);
BTSV_API void BT_HuntTarget(btEntity self);
BTSV_API void BT_SightSound(btEntity self);
BTSV_API void BT_FoundTarget(btEntity self);
BTSV_API bool BT_CheckNoAttack(btEntity self, btEntity other);
BTSV_API bool BT_CheckWouldAttack(btEntity self, btEntity other);
BTSV_API bool BT_CheckPossibleTarget(btEntity self, btEntity other);
BTSV_API btEntity BT_CheckTarget(btEntity self);
BTSV_API int BT_InvisibleP(btEntity self, btEntity other);
BTSV_API int BT_FindTarget(btEntity self);
BTSV_API bool BT_CheckPossibleRoam(btEntity self, btEntity other);
BTSV_API btEntity BT_CheckRoamTarget(btEntity self);
BTSV_API bool BT_FindRoamTarget(btEntity self);
BTSV_API void BTAI_Forward(btEntity self, float dist);
BTSV_API void BTAI_Back(btEntity self, float dist);
BTSV_API void BTAI_Pain(btEntity self, float dist);
BTSV_API void BTAI_PainForward(btEntity self, float dist);
BTSV_API void BTAI_Walk(btEntity self, float dist);
BTSV_API void BTAI_Stand(btEntity self, float dist);
BTSV_API void BTAI_Turn(btEntity self);
BTSV_API void BTAI_ChooseTurn(btEntity self, vec3 dest);
BTSV_API int BT_FacingIdealP(btEntity self);
BTSV_API void BTAI_RunMelee(btEntity self);
BTSV_API void BTAI_RunMissile(btEntity self);
BTSV_API void BTAI_StopRun(btEntity self);
BTSV_API void BTAI_Run(btEntity self, float dist);
BTSV_API void BTAI_Face(btEntity self);
BTSV_API void BTAI_Charge(btEntity self, float dist);
BTSV_API void BTAI_Melee(btEntity self);
BTSV_API void BTAI_ScriptedSetAnim(btEntity self, char *anim);
BTSV_API void BTAI_ScriptedSetNode(btEntity self, btEntity other);
BTSV_API void BTAI_ScriptedTouchNode(btEntity self, btEntity other);
BTSV_API void BTAI_ScriptedThink(btEntity self);
BTSV_API bool BT_CheckAttack(btEntity self);
BTSV_API void btaiStand(btEntity self, float dist);
BTSV_API void btaiWalk(btEntity self, float dist);
BTSV_API void btaiRun(btEntity self, float dist);
//AHSRC:base/e_client.c
BTSV_API void BT_PreserveClientState(btEntity self);
BTSV_API void BT_RestoreClientState(btEntity self);
BTSV_API void BT_UnflattedClientState(btEntity self, BTGE_SEntity *sent);
BTSV_API void BT_FlattenClientState(btEntity self, BTGE_SEntity *sent);
BTSV_API bool BT_CheckAllowCheats(btEntity self);
BTSV_API void BT_ClientConCmd(btEntity self, char **a);
void BT_ClientInventoryClick(btEntity self, char *str);
void BT_ClientThink(btEntity self);
void BT_ClientKilled(btEntity self, float dmg, int mod);
void BT_ClientPain(btEntity self, float dmg, int mod);
void BT_ClientImpact(btEntity self, vec3 vel);
void BT_ClientRespawn(btEntity self);
void BT_ClientConnected(btEntity self);
//AHSRC:base/e_combat.c
int BT_CanDamage(btEntity self, btEntity targ);
void BT_Killed(btEntity self, btEntity other, float dmg, int mod);
void BT_RespondToDamage(btEntity self, btEntity other, float damage);
BTSV_API void BT_Damage(btEntity self, btEntity other,float damage, int mod);
BTSV_API void BT_Heal(btEntity self, btEntity other, float damage, int mod);
BTSV_API void BT_RadiusDamage(btEntity inflictor, btEntity attacker,float damage, btEntity ignore, float radius, int mod);
BTSV_API void BT_BoxDamage(btEntity inflictor, btEntity attacker,float damage, btEntity ignore, vec3d mins, vec3d maxs, int mod);
//AHSRC:base/e_dialog.c
BTSV_API BTGE_DialogInfo *BT_AllocDialogInfo();
BTSV_API BTGE_DialogNode *BT_AllocDialogNode();
BTSV_API BTGE_DialogNode *btNewDialogNode(char *name, char *msg, char *img);
BTSV_API void btSetDialogNodeOption(BTGE_DialogNode *node, int i, char *msg, char *tgt);
BTSV_API void btAddDialogInfoNode(BTGE_DialogInfo *info, BTGE_DialogNode *node);
BTSV_API void BT_EntityDialogSetupTest(btEntity self);
BTSV_API int BT_PlayerDialogImpulse(btEntity self, int flags);
BTSV_API int BT_DialogLookupInfoNode(BTGE_DialogInfo *info, char *name);
BTSV_API int BT_DialogSetupForNode(btEntity self, BTGE_DialogInfo *info, char *name);
BTSV_API void BT_EntityDialogUse(btEntity self, btEntity other);
//AHSRC:base/e_func.c
BTSV_API BTGE_BrushModel *btGetBModel(btEntity self);
void func_doorlike_init(btEntity self);
void func_door_linkDoors(btEntity self);
void func_door_cfgLinkedDoor(btEntity self);
void func_door_setLinkDoors(btEntity self);
void func_door_init(btEntity self);
void func_secret_init(btEntity self);
void func_button_init(btEntity self);
void func_plat_init(btEntity self);
void func_wall_init(btEntity self);
void func_wall_use(btEntity self, btEntity other);
void func_door_movethink(btEntity self);
void func_door_waitthink(btEntity self);
void func_door_use(btEntity self, btEntity other);
void func_door_blocked(btEntity self, btEntity other);
void func_door_die(btEntity self, btEntity other, float damage);
void func_deinit(btEntity self);
void func_null(btEntity self);
void func_blocked(btEntity self, btEntity other);
void func_touch(btEntity self, btEntity other);
void func_use(btEntity self, btEntity other);
void func_pain(btEntity self, btEntity other, float damage);
void func_die(btEntity self, btEntity other, float damage);
void func_cmdmsg(btEntity self, btEntity other, char *str);
BTSV_API btEntity BtSp_func_wall(btSEntity args);
BTSV_API btEntity BtSp_func_nowall(btSEntity args);
BTSV_API btEntity BtSp_func_illusionary(btSEntity args);
BTSV_API btEntity BtSp_func_bossgate(btSEntity args);
BTSV_API btEntity BtSp_func_episodegate(btSEntity args);
BTSV_API btEntity BtSp_func_onlyregistered(btSEntity args);
BTSV_API btEntity BtSp_func_group(btSEntity args);
BTSV_API btEntity BtSp_func_static(btSEntity args);
BTSV_API btEntity BtSp_func_door(btSEntity args);
BTSV_API btEntity BtSp_func_door_secret(btSEntity args);
BTSV_API btEntity BtSp_func_button(btSEntity args);
BTSV_API btEntity BtSp_func_plat(btSEntity args);
//AHSRC:base/e_func_train.c
void func_train_init(btEntity self);
void func_train_goStart(btEntity self);
void func_train_goNext(btEntity self);
void func_train_goCurrent(btEntity self);
void func_train_movethink(btEntity self);
void func_train_waitthink(btEntity self);
void func_train_use(btEntity self, btEntity other);
void func_train_blocked(btEntity self, btEntity other);
BTSV_API btEntity BtSp_func_train(btSEntity args);
//AHSRC:base/e_func2.c
int BT_GetMaterialByName(char *name);
int BT_GetMaterialHealth(int mat);
void func_breakable_init(btEntity self);
void func_breakable_die(btEntity self, btEntity other, float damage);
BTSV_API btEntity BtSp_func_breakable(btSEntity args);
void func_rotating_init(btEntity self);
void func_rotating_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_func_rotating(btSEntity args);
void func_door_rotating_init(btEntity self);
void func_door_rotating_movethink(btEntity self);
void func_door_rotating_waitthink(btEntity self);
void func_door_rotating_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_func_door_rotating(btSEntity args);
BTSV_API btEntity BtSp_func_secret(btSEntity args);
BTSV_API btEntity BtSp_func_mover(btSEntity args);
BTSV_API btEntity BtSp_func_fx(btSEntity args);
BTSV_API btEntity BtSp_func_instance(btSEntity args);
BTSV_API btEntity BtSp_prefab_worldspawn(btSEntity args);
//AHSRC:base/e_info.c
void info_init(btEntity self);
void info_deinit(btEntity self);
void info_null(btEntity self);
void info_blocked(btEntity self, btEntity other);
void info_touch(btEntity self, btEntity other);
void info_use(btEntity self, btEntity other);
void info_pain(btEntity self, btEntity other, float damage);
void info_die(btEntity self, btEntity other, float damage);
void info_cmdmsg(btEntity self, btEntity other, char *str);
void info_light_init(btEntity self);
void info_light_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_info_player_start(btSEntity args);
BTSV_API btEntity BtSp_info_player_deathmatch(btSEntity args);
BTSV_API btEntity BtSp_info_player_coop(btSEntity args);
BTSV_API btEntity BtSp_info_player_start2d(btSEntity args);
BTSV_API btEntity BtSp_info_player_team1(btSEntity args);
BTSV_API btEntity BtSp_info_player_team2(btSEntity args);
BTSV_API btEntity BtSp_info_player_saved(btSEntity args);
BTSV_API btEntity BtSp_info_player_fixed(btSEntity args);
BTSV_API btEntity BtSp_info_player_fixed2d(btSEntity args);
BTSV_API btEntity BtSp_info_intermission(btSEntity args);
BTSV_API btEntity BtSp_info_teleport_destination(btSEntity args);
BTSV_API btEntity BtSp_info_landmark(btSEntity args);
BTSV_API btEntity BtSp_light(btSEntity args);
BTSV_API btEntity BtSp_light_fluoro(btSEntity args);
BTSV_API btEntity BtSp_light_fluorospark(btSEntity args);
BTSV_API btEntity BtSp_light_torch_small_walltorch(btSEntity args);
BTSV_API btEntity BtSp_light_flame_large_yellow(btSEntity args);
BTSV_API btEntity BtSp_light_flame_small_yellow(btSEntity args);
BTSV_API btEntity BtSp_light_flame_small_white(btSEntity args);
BTSV_API btEntity BtSp_light_envmap(btSEntity args);
BTSV_API btEntity BtSp_light_scenery(btSEntity args);
BTSV_API btEntity BtSp_light_sun(btSEntity args);
BTSV_API btEntity BtSp_light_sunrel(btSEntity args);
BTSV_API btEntity BtSp_worldspawn(btSEntity args);
BTSV_API btEntity BtSp_info_null(btSEntity args);
BTSV_API btEntity BtSp_info_notnull(btSEntity args);
void path_corner_init(btEntity self);
void path_corner_touch(btEntity self, btEntity other);
BTSV_API btEntity BtSp_path_corner(btSEntity args);
BTSV_API btEntity BtSp_path_corner_roam(btSEntity args);
void path_corner_event_touch(btEntity self, btEntity other);
BTSV_API btEntity BtSp_path_corner_event(btSEntity args);
BTSV_API int btFib(int x);
BTSV_API void btSelSort(int *a, int n);
BTSV_API void btSelSortTst(int n);
void target_laser_init(btEntity self);
void target_laser_think(btEntity self);
void target_laser_touch(btEntity self, btEntity other);
BTSV_API btEntity BtSp_target_laser(btSEntity args);
void info_camera_event_init(btEntity self);
void info_camera_event_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_info_camera_lookat(btSEntity args);
BTSV_API btEntity BtSp_info_camera_moveto(btSEntity args);
BTSV_API btEntity BtSp_info_camera_movelook(btSEntity args);
//AHSRC:base/e_items.c
int BT_InitItems();
void item_init(btEntity self);
int item_generic_canPickup(btEntity self, btEntity item);
void item_deinit(btEntity self);
void item_null(btEntity self);
void item_blocked(btEntity self, btEntity other);
void item_respawn(btEntity self);
void item_touch(btEntity self, btEntity other);
void item_use(btEntity self, btEntity other);
void item_pain(btEntity self, btEntity other, float damage);
void item_die(btEntity self, btEntity other, float damage);
void item_cmdmsg(btEntity self, btEntity other, char *str);
btItem btLookupItem(char *classname);
btItem btGetItem(char *classname);
btItem btGetRandomItem();
btItem btLookupMonsterItem(char *classname);
btItem btGetMonsterItem(char *classname);
btItem btGetRandomMonsterItem();
btEntity btSpawnItem(btSEntity args);
btEntity btSpawnRandomItem(vec3d origin);
int BT_InitItem(btItem item);
int BT_InitMonsterItem(btItem item);
BTSV_API void btEntityUseItem(btEntity self, btItem item);
int item_health_canPickup(btEntity self, btEntity item);
int item_ammo_canPickup(btEntity self, btEntity item);
void health_touchThink(btEntity self, btItem item);
void ammo_touchThink(btEntity self, btItem item);
void item_touchThink(btEntity self, btItem item);
int item_weapon_canPickup(btEntity self, btEntity item);
void weapon_touchThink(btEntity self, btItem item);
int item_armor_canPickup(btEntity self, btEntity item);
void armor_touchThink(btEntity self, btItem item);
void item_invul_touchThink(btEntity self, btItem item);
void item_invis_touchThink(btEntity self, btItem item);
void item_quad_touchThink(btEntity self, btItem item);
void item_enviro_touchThink(btEntity self, btItem item);
BTSV_API void BtIt_item_health(btItem item);
BTSV_API void BtIt_item_health1(btItem item);
BTSV_API void BtIt_item_health25(btItem item);
BTSV_API void BtIt_item_health_small(btItem item);
BTSV_API void BtIt_item_health_medium(btItem item);
BTSV_API void BtIt_item_health_large(btItem item);
BTSV_API void BtIt_item_key2(btItem item);
BTSV_API void BtIt_item_key1(btItem item);
BTSV_API void BtIt_item_flag_team1(btItem item);
BTSV_API void BtIt_item_flag_team2(btItem item);
BTSV_API void BtIt_item_shells(btItem item);
BTSV_API void BtIt_item_rockets(btItem item);
BTSV_API void BtIt_item_spikes(btItem item);
BTSV_API void BtIt_item_cells(btItem item);
BTSV_API void BtIt_item_bullets(btItem item);
BTSV_API void BtIt_ammo_bullets(btItem item);
BTSV_API void BtIt_ammo_shells(btItem item);
BTSV_API void BtIt_ammo_grenades(btItem item);
BTSV_API void BtIt_ammo_rockets(btItem item);
BTSV_API void BtIt_ammo_slugs(btItem item);
BTSV_API void BtIt_ammo_cells(btItem item);
BTSV_API void BtIt_ammo_bfg(btItem item);
BTSV_API void BtIt_weapon_supershotgun(btItem item);
BTSV_API void BtIt_weapon_grenadelauncher(btItem item);
BTSV_API void BtIt_weapon_rocketlauncher(btItem item);
BTSV_API void BtIt_weapon_rocketshovel(btItem item);
BTSV_API void BtIt_weapon_nailgun(btItem item);
BTSV_API void BtIt_weapon_supernailgun(btItem item);
BTSV_API void BtIt_weapon_lightning(btItem item);
BTSV_API void BtIt_weapon_uzi(btItem item);
BTSV_API void BtIt_weapon_electro(btItem item);
BTSV_API void BtIt_item_armor1(btItem item);
BTSV_API void BtIt_item_armor2(btItem item);
BTSV_API void BtIt_item_armor_small(btItem item);
BTSV_API void BtIt_item_armor_large(btItem item);
BTSV_API void BtIt_item_artifact_super_damage(btItem item);
BTSV_API void BtIt_item_artifact_invulnerability(btItem item);
BTSV_API void BtIt_item_strength(btItem item);
BTSV_API void BtIt_item_invincible(btItem item);
BTSV_API void BtIt_item_artifact_envirosuit(btItem item);
//AHSRC:base/e_misc.c
BTSV_API btEntity BtSp_ambient_drone(btSEntity args);
BTSV_API btEntity BtSp_ambient_comp_hum(btSEntity args);
BTSV_API btEntity BtSp_ambient_drip(btSEntity args);
BTSV_API btEntity BtSp_ambient_swamp1(btSEntity args);
BTSV_API btEntity BtSp_ambient_swamp2(btSEntity args);
BTSV_API btEntity BtSp_ambient_suck_wind(btSEntity args);
BTSV_API btEntity BtSp_ambient_light_buzz(btSEntity args);
BTSV_API btEntity BtSp_ambient_flouro_buzz(btSEntity args);
BTSV_API btEntity BtSp_ambient_speaker(btSEntity args);
void misc_explobox_init(btEntity self);
void misc_explobox_die(btEntity self, btEntity other, float damage);
BTSV_API btEntity BtSp_misc_explobox(btSEntity args);
BTSV_API btEntity BtSp_misc_explobox2(btSEntity args);
void misc_minecart_init(btEntity self);
void misc_minecart_die(btEntity self, btEntity other, float damage);
BTSV_API btEntity BtSp_misc_minecart(btSEntity args);
void misc_model_think(btEntity self);
void misc_model_init(btEntity self);
void misc_model_die(btEntity self, btEntity other, float damage);
BTSV_API btEntity BtSp_misc_model(btSEntity args);
BTSV_API btEntity BtSp_misc_gamemodel(btSEntity args);
BTSV_API btEntity BtSp_misc_model_breakable(btSEntity args);
BTSV_API btEntity BtSp_misc_model_scenery(btSEntity args);
void misc_squidship_think(btEntity self);
void misc_squidship_init(btEntity self);
BTSV_API btEntity BtSp_misc_squidship(btSEntity args);
BTSV_API btEntity BtSp_misc_nospawn(btSEntity args);
void trap_spikeshooter_init(btEntity self);
void trap_spikeshooter_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_trap_spikeshooter(btSEntity args);
void target_eval_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_target_eval(btSEntity args);
void target_speaker_init(btEntity self);
void target_speaker_think(btEntity self);
void target_speaker_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_target_speaker(btSEntity args);
BTSV_API btEntity BtSp_speaker(btSEntity args);
BTSV_API btEntity BtSp_target_position(btSEntity args);
void misc_waterfall_init(btEntity self);
void misc_waterfall_think(btEntity self);
BTSV_API btEntity BtSp_misc_waterfall(btSEntity args);
void target_npcevent_useTarget(btEntity self,btEntity other, btEntity target);
void target_npcevent_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_target_npcevent(btSEntity args);
BTSV_API btEntity BtSp_random_prefab(btSEntity args);
BTSV_API btEntity BtSp_random_dungeon(btSEntity args);
BTSV_API btEntity BtSp_random_terrain(btSEntity args);
void misc_fractree_init(btEntity self);
void misc_fractree_die(btEntity self, btEntity other, float damage);
BTSV_API btEntity BtSp_misc_fractal_tree(btSEntity args);
BTSV_API btEntity BtSp_misc_spawn_tiles(btSEntity args);
//AHSRC:base/e_monster.c
void BT_MonsterUseThink(btEntity self);
void BT_MonsterUse(btEntity self, btEntity other);
void BT_MonsterDeathUse(btEntity self, btEntity other);
void BT_MonsterDropItems(btEntity self, btEntity other);
void BT_MonsterStartGo(btEntity self);
void BT_WalkmonsterStartGo(btEntity self);
void BT_FlymonsterStartGo(btEntity self);
void BT_SwimmonsterStartGo(btEntity self);
void BT_MonsterNoSpawn(btEntity self);
BTSV_API void btWalkmonsterStart(btEntity self);
BTSV_API void btFlymonsterStart(btEntity self);
BTSV_API void btSwimmonsterStart(btEntity self);
BTSV_API void btWalkPassiveStart(btEntity self);
bool BT_CheckClientNearby(btEntity self, float dist);
BTSV_API void btSetMoveThink(btEntity self, btge_think fcn, float dt);
void BT_MonsterMoveThink(btEntity self);
void BT_MonsterMoveThink2(btEntity self);
BTSV_API void btSetMove(btEntity self, BTGE_MoveInfo *move);
void BT_MonsterMove_GetMoveFrame(btEntity self,BTGE_MoveInfo **rmove, BTGE_MoveFrame **rfrm);
BTSV_API void BT_MonsterMove_DyAI(btEntity self, float dist);
BTSV_API void BT_MonsterMove_DyThink(btEntity self);
BTSV_API void BT_MonsterMove_DyEnd(btEntity self);
void BT_MonsterMove_SetupFrameDyAI(BTGE_MoveFrame *frm, dyt v);
void BT_MonsterMove_SetupFrameDyThink(BTGE_MoveFrame *frm, dyt v);
void BT_MonsterMove_SetupMoveInfoDyEnd(BTGE_MoveInfo *move, dyt v);
BTSV_API BTGE_MoveInfo *btDyBuildMove(char *anim,int startFrame, int endFrame, dyt frames, dyt f_end);
void BT_WeaponMoveThink(btEntity self);
void BT_WeaponMoveThink2(btEntity self);
BTSV_API void btSetWeaponMove(btEntity self, BTGE_MoveInfo *move);
//AHSRC:base/e_trigger.c
void trigger_wall_remover(btEntity self);
void trigger_init(btEntity self);
void trigger_deinit(btEntity self);
void trigger_null(btEntity self);
void trigger_blocked(btEntity self, btEntity other);
void trigger_touch(btEntity self, btEntity other);
void trigger_use(btEntity self, btEntity other);
void trigger_pain(btEntity self, btEntity other, float damage);
void trigger_die(btEntity self, btEntity other, float damage);
void trigger_cmdmsg(btEntity self, btEntity other, char *str);
BTSV_API btEntity BtSp_trigger_once(btSEntity args);
BTSV_API btEntity BtSp_trigger_multiple(btSEntity args);
BTSV_API btEntity BtSp_trigger_secret(btSEntity args);
BTSV_API btEntity BT_NewBoxTrigger(btEntity owner, vec3 mins, vec3 maxs);
BTSV_API btEntity BT_NewBoxTriggerMsg(btEntity owner, vec3 mins, vec3 maxs, char *msg);
BTSV_API btEntity BtSp_trigger_relay(btSEntity args);
BTSV_API btEntity BtSp_trigger_relay_local(btSEntity args);
BTSV_API btEntity BtSp_trigger_relay_global(btSEntity args);
BTSV_API btEntity BtSp_trigger_counter(btSEntity args);
BTSV_API btEntity BtSp_trigger_always(btSEntity args);
BTSV_API btEntity BtSp_trigger_onlyregistered(btSEntity args);
void changelevel_touch(btEntity self, btEntity other);
void changelevel_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_trigger_changelevel(btSEntity args);
BTSV_API btEntity BtSp_target_changelevel(btSEntity args);
void teleport_init(btEntity self);
void teleport_touch(btEntity self, btEntity other);
void BT_TeleportToTarget(btEntity self, btEntity other, int flags);
void teleport_useGo(btEntity self, btEntity other);
void teleport_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_trigger_teleport(btSEntity args);
BTSV_API btEntity BtSp_target_teleport(btSEntity args);
void push_init(btEntity self);
void push_touch(btEntity self, btEntity other);
void push_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_trigger_push(btSEntity args);
void hurt_init(btEntity self);
void heal_init(btEntity self);
void hurt_touch(btEntity self, btEntity other);
void hurt_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_trigger_hurt(btSEntity args);
BTSV_API btEntity BtSp_trigger_heal(btSEntity args);
void impulse_init(btEntity self);
vec3 impulse_touch_dir(btEntity self, btEntity other);
void impulse_touch(btEntity self, btEntity other);
void impulse_use(btEntity self, btEntity other);
BTSV_API btEntity BtSp_trigger_impulse(btSEntity args);
//AHSRC:base/e_weapon.c
void weapon_idle(btEntity self);
void weapon_power(btEntity self);
void weapon_power_think(btEntity self);
int BT_PlayerImpulseUse(btEntity self);
int BT_PlayerImpulseDamage(btEntity self);
int BT_PlayerImpulseAltDamage(btEntity self);
int BT_PlayerImpulseAlt2Damage(btEntity self);
int BT_PlayerHoldItem(btEntity self, btItem item);
int BT_PlayerWeaponChange(btEntity self, int num);
BTSV_API int BT_PlayerImpulse(btEntity self, int flags);
BTSV_API btEntity BT_BulletMuzzleFlash(btEntity self,vec3d org, vec3 dir, int mod);
BTSV_API btEntity BT_FireBullet(btEntity self,vec3d org, vec3 dir, float dmg);
BTSV_API void BT_RocketTouch(btEntity self, btEntity other);
BTSV_API void BT_RocketShovelTouch(btEntity self, btEntity other);
BTSV_API void BT_GrenadeTouch(btEntity self, btEntity other);
BTSV_API void BT_BlasterTouch(btEntity self, btEntity other);
BTSV_API void BT_BlockPlacerTouch(btEntity self, btEntity other);
BTSV_API void BT_AnimDieThink(btEntity self);
BTSV_API void BT_PlasmaTouch(btEntity self, btEntity other);
BTSV_API void BT_BFGTouch(btEntity self, btEntity other);
BTSV_API void BT_RocketThink(btEntity self);
BTSV_API void BT_PlacerThink(btEntity self);
BTSV_API void BT_GrenadeThink(btEntity self);
BTSV_API btEntity BT_FireRocket(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius);
BTSV_API btEntity BT_FireRocketShovel(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius);
BTSV_API btEntity BT_FireGrenade(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius);
BTSV_API btEntity BT_FireBlaster(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius);
BTSV_API btEntity BT_FireBlasterColor(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius, int clr);
BTSV_API btEntity BT_FireBlockPlacerColor(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius, int clr, int voxty);
BTSV_API btEntity BT_FirePlasma(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius, int clr);
BTSV_API btEntity BT_FireBFG(btEntity self,vec3d org, vec3 dir, float dmg, float speed, float radius);
BTSV_API btEntity BT_FireLaser(btEntity self,vec3d org, vec3 dir, float dmg);
//AHSRC:base/g_inventory.c
BTSV_API BTGE_Inventory *BT_EntityLookupInventory(btEntity self, char *classname, char *subname);
BTSV_API BTGE_Inventory *BT_EntityGetInventory(btEntity self, char *classname, char *subname);
BTSV_API int BT_EntityGetInventoryCount(btEntity self, char *classname, char *subname);
BTSV_API bool BT_EntityTryInventoryTakeCount(btEntity self, char *classname, char *subname, int take);
BTSV_API void BT_EntityGiveVoxel(btEntity self,BTGE_VoxelData *vox, int cnt);
BTSV_API bool BT_EntityTryInventoryVoxTyTakeCount(btEntity self, int voxty, int take);
//AHSRC:base/m_dog.c
void monster_dog_idle(btEntity self);
void monster_dog_init(btEntity self);
void monster_demon_init(btEntity self);
void monster_dog_deinit(btEntity self);
void monster_dog_null(btEntity self);
void monster_dog_blocked(btEntity self, btEntity other);
void monster_dog_touch(btEntity self, btEntity other);
void monster_dog_use(btEntity self, btEntity other);
void monster_dog_pain(btEntity self, btEntity other, float damage);
void monster_dog_die(btEntity self, btEntity other, float damage);
void monster_dog_cmdmsg(btEntity self, btEntity other, char *str);
void monster_dog_stand(btEntity self);
void monster_dog_walk1_random(btEntity self);
void monster_dog_walk(btEntity self);
void monster_dog_run(btEntity self);
void monster_dog_missile(btEntity self);
void monster_dog_fire(btEntity self);
void monster_dog_melee(btEntity self);
BTSV_API btEntity BtSp_monster_dog(btSEntity args);
BTSV_API btEntity BtSp_monster_demon1(btSEntity args);
BTSV_API void BtMt_monster_dog(btItem item);
BTSV_API void BtMt_monster_demon1(btItem item);
//AHSRC:base/m_enforcer.c
void monster_enforcer_idle(btEntity self);
void monster_enforcer_init(btEntity self);
void monster_enforcer_deinit(btEntity self);
void monster_enforcer_null(btEntity self);
void monster_enforcer_blocked(btEntity self, btEntity other);
void monster_enforcer_touch(btEntity self, btEntity other);
void monster_enforcer_use(btEntity self, btEntity other);
void monster_enforcer_pain(btEntity self, btEntity other, float damage);
void monster_enforcer_die(btEntity self, btEntity other, float damage);
void monster_enforcer_cmdmsg(btEntity self, btEntity other, char *str);
void monster_enforcer_stand(btEntity self);
void monster_enforcer_walk1_random(btEntity self);
void monster_enforcer_walk(btEntity self);
void monster_enforcer_run(btEntity self);
void monster_enforcer_missile(btEntity self);
void monster_enforcer_fire(btEntity self);
void monster_enforcer_melee(btEntity self);
BTSV_API btEntity BtSp_monster_enforcer(btSEntity args);
BTSV_API void BtMt_monster_enforcer(btItem item);
//AHSRC:base/m_generic.c
void monster_generic_idle(btEntity self);
void monster_generic_init(btEntity self);
void monster_generic_deinit(btEntity self);
void monster_generic_null(btEntity self);
void monster_generic_blocked(btEntity self, btEntity other);
void monster_generic_touch(btEntity self, btEntity other);
void monster_generic_use(btEntity self, btEntity other);
void monster_generic_pain(btEntity self, btEntity other, float damage);
void monster_generic_die(btEntity self, btEntity other, float damage);
void monster_generic_cmdmsg(btEntity self, btEntity other, char *str);
void monster_generic_stand(btEntity self);
void monster_generic_walk1_random(btEntity self);
void monster_generic_walk(btEntity self);
void monster_generic_run(btEntity self);
void monster_generic_missile(btEntity self);
void monster_generic_fire(btEntity self);
void monster_generic_melee(btEntity self);
BTSV_API void BtMt_monster_army(btItem item);
//AHSRC:base/m_knight.c
void monster_knight_idle(btEntity self);
void monster_knight_init(btEntity self);
void monster_knight_deinit(btEntity self);
void monster_knight_null(btEntity self);
void monster_knight_blocked(btEntity self, btEntity other);
void monster_knight_touch(btEntity self, btEntity other);
void monster_knight_use(btEntity self, btEntity other);
void monster_knight_pain(btEntity self, btEntity other, float damage);
void monster_knight_die(btEntity self, btEntity other, float damage);
void monster_knight_cmdmsg(btEntity self, btEntity other, char *str);
void monster_knight_stand(btEntity self);
void monster_knight_walk1_random(btEntity self);
void monster_knight_walk(btEntity self);
void monster_knight_run(btEntity self);
void monster_knight_missile(btEntity self);
void monster_knight_fire(btEntity self);
void monster_knight_melee(btEntity self);
BTSV_API btEntity BtSp_monster_knight(btSEntity args);
BTSV_API void BtMt_monster_knight(btItem item);
//AHSRC:base/m_mechazombie.c
void monster_mechazombie_idle(btEntity self);
void monster_mechazombie_init(btEntity self);
void monster_mechazombie_deinit(btEntity self);
void monster_mechazombie_null(btEntity self);
void monster_mechazombie_blocked(btEntity self, btEntity other);
void monster_mechazombie_touch(btEntity self, btEntity other);
void monster_mechazombie_use(btEntity self, btEntity other);
void monster_mechazombie_pain(btEntity self, btEntity other, float damage);
void monster_mechazombie_die(btEntity self, btEntity other, float damage);
void monster_mechazombie_cmdmsg(btEntity self, btEntity other, char *str);
void monster_mechazombie_stand(btEntity self);
void monster_mechazombie_walk1_random(btEntity self);
void monster_mechazombie_walk(btEntity self);
void monster_mechazombie_run(btEntity self);
void monster_mechazombie_missile(btEntity self);
void monster_mechazombie_fire(btEntity self);
void monster_mechazombie_melee(btEntity self);
BTSV_API btEntity BtSp_monster_zombie_mecha(btSEntity args);
//AHSRC:base/m_ogre.c
void monster_ogre_idle(btEntity self);
void monster_ogre_init(btEntity self);
void monster_ogre_deinit(btEntity self);
void monster_ogre_null(btEntity self);
void monster_ogre_blocked(btEntity self, btEntity other);
void monster_ogre_touch(btEntity self, btEntity other);
void monster_ogre_use(btEntity self, btEntity other);
void monster_ogre_pain(btEntity self, btEntity other, float damage);
void monster_ogre_die(btEntity self, btEntity other, float damage);
void monster_ogre_cmdmsg(btEntity self, btEntity other, char *str);
void monster_ogre_stand(btEntity self);
void monster_ogre_walk1_random(btEntity self);
void monster_ogre_walk(btEntity self);
void monster_ogre_run(btEntity self);
void monster_ogre_missile(btEntity self);
void monster_ogre_fire(btEntity self);
void monster_ogre_melee(btEntity self);
BTSV_API btEntity BtSp_monster_ogre(btSEntity args);
BTSV_API void BtMt_monster_ogre(btItem item);
//AHSRC:base/m_shalrath.c
void monster_shalrath_idle(btEntity self);
void monster_shalrath_init(btEntity self);
void monster_shalrath_deinit(btEntity self);
void monster_shalrath_null(btEntity self);
void monster_shalrath_blocked(btEntity self, btEntity other);
void monster_shalrath_touch(btEntity self, btEntity other);
void monster_shalrath_use(btEntity self, btEntity other);
void monster_shalrath_pain(btEntity self, btEntity other, float damage);
void monster_shalrath_die(btEntity self, btEntity other, float damage);
void monster_shalrath_cmdmsg(btEntity self, btEntity other, char *str);
void monster_shalrath_stand(btEntity self);
void monster_shalrath_walk1_random(btEntity self);
void monster_shalrath_walk(btEntity self);
void monster_shalrath_run(btEntity self);
void monster_shalrath_missile(btEntity self);
void monster_shalrath_fire(btEntity self);
void monster_shalrath_melee(btEntity self);
BTSV_API btEntity BtSp_monster_shalrath(btSEntity args);
BTSV_API void BtMt_monster_shalrath(btItem item);
//AHSRC:base/m_shambler.c
void monster_shambler_idle(btEntity self);
void monster_shambler_init(btEntity self);
void monster_shambler_deinit(btEntity self);
void monster_shambler_null(btEntity self);
void monster_shambler_blocked(btEntity self, btEntity other);
void monster_shambler_touch(btEntity self, btEntity other);
void monster_shambler_use(btEntity self, btEntity other);
void monster_shambler_pain(btEntity self, btEntity other, float damage);
void monster_shambler_die(btEntity self, btEntity other, float damage);
void monster_shambler_cmdmsg(btEntity self, btEntity other, char *str);
void monster_shambler_stand(btEntity self);
void monster_shambler_walk1_random(btEntity self);
void monster_shambler_walk(btEntity self);
void monster_shambler_run(btEntity self);
void monster_shambler_missile(btEntity self);
void monster_shambler_fire(btEntity self);
void monster_shambler_melee(btEntity self);
BTSV_API btEntity BtSp_monster_shambler(btSEntity args);
BTSV_API void BtMt_monster_shambler(btItem item);
BTSV_API void BtMt_monster_enemyhead(btItem item);
//AHSRC:base/m_wizard.c
void monster_wizard_idle(btEntity self);
void monster_wizard_init(btEntity self);
void monster_wizard_deinit(btEntity self);
void monster_wizard_null(btEntity self);
void monster_wizard_blocked(btEntity self, btEntity other);
void monster_wizard_touch(btEntity self, btEntity other);
void monster_wizard_use(btEntity self, btEntity other);
void monster_wizard_pain(btEntity self, btEntity other, float damage);
void monster_wizard_die(btEntity self, btEntity other, float damage);
void monster_wizard_cmdmsg(btEntity self, btEntity other, char *str);
void monster_wizard_stand(btEntity self);
void monster_wizard_walk1_random(btEntity self);
void monster_wizard_walk(btEntity self);
void monster_wizard_run(btEntity self);
void monster_wizard_missile(btEntity self);
void monster_wizard_fire(btEntity self);
void monster_wizard_melee(btEntity self);
BTSV_API btEntity BtSp_monster_wizard(btSEntity args);
BTSV_API void BtMt_monster_wizard(btItem item);
//AHSRC:base/m_zombie.c
void monster_zombie_idle(btEntity self);
void monster_zombie_init(btEntity self);
void monster_zombie_deinit(btEntity self);
void monster_zombie_null(btEntity self);
void monster_zombie_blocked(btEntity self, btEntity other);
void monster_zombie_touch(btEntity self, btEntity other);
void monster_zombie_use(btEntity self, btEntity other);
void monster_zombie_pain(btEntity self, btEntity other, float damage);
void monster_zombie_die(btEntity self, btEntity other, float damage);
void monster_zombie_cmdmsg(btEntity self, btEntity other, char *str);
void monster_zombie_stand(btEntity self);
void monster_zombie_walk1_random(btEntity self);
void monster_zombie_walk(btEntity self);
void monster_zombie_run(btEntity self);
void monster_zombie_missile(btEntity self);
void monster_zombie_fire(btEntity self);
void monster_zombie_melee(btEntity self);
BTSV_API btEntity BtSp_monster_zombie(btSEntity args);
//AHSRC:base/s_bsglue.c
BTSV_API void BTSV_ScriptInit();
//AHSRC:base/s_update.c
BTGE_ClientInfo *BTGE_LookupClientInfo(int clnum);
BTGE_ClientInfo *BTGE_GetClientInfo(int clnum);
BTGE_MessageHandler *BTGE_LookupMessageHandler(dyt name);
BTGE_MessageHandler *BTGE_GetMessageHandler(dyt name);
BTSV_API BTGE_MessageHandler *BTGE_RegisterMessageHandler(char *name,void (*fcn)(btEntity ent, dyt msg));
BTSV_API BTGE_MessageHandler *BTGE_RegisterDyMessageHandler(char *name, dyt fcn);
dyt BTGE_DeltaNamedVec3(char *name, vec3 v);
dyt BTGE_EntityDelta(btEntity ent, btEntity clent);
void BTGE_EntityPostDelta(btEntity ent);
void BTGE_EntityClearDelta(btEntity ent);
dyt BTGE_LightDelta(btLight light, btEntity clent);
void BTGE_LightPostDelta(btLight light);
void BTGE_LightClearDelta(btLight light);
BTSV_API dyt BTGE_ComposeBrushPatchDelta(BTGE_BrushWorld *wrl, BTGE_Brush *brush, btEntity clent);
BTSV_API dyt BTGE_ComposeBrushDelta(BTGE_BrushWorld *wrl, BTGE_Brush *brush, btEntity clent);
BTSV_API dyt BTGE_BrushDelta(BTGE_Brush *brush, btEntity clent);
BTSV_API void BTGE_BrushPreDelta(BTGE_Brush *brush);
BTSV_API void BTGE_BrushPostDelta(BTGE_Brush *brush);
BTSV_API dyt BTGE_SEntityDelta(BTGE_SEntity *scur, btEntity clent);
BTSV_API void BTGE_SEntityPreDelta(BTGE_SEntity *scur);
BTSV_API void BTGE_SEntityPostDelta(BTGE_SEntity *scur);
dyt BTGE_DeltaWorld(btEntity clent);
void BTGE_PostDeltaWorld();
void BTGE_ClearDeltaWorld();
dyt BTGE_ComposeWorldUpdate(int clnum);
void BTGE_FinishWorldUpdate();
void BTGE_FlushWorldUpdate();
BTSV_API dyt btsvComposeUpdate(int clnum);
BTSV_API void btsvFinishUpdate(void);
BTSV_API void btsvFlushUpdate(void);
BTSV_API void btsvFreeUpdate(dyt msg);
BTSV_API void BTGE_AddUpdateQueue(dyt msg);
BTSV_API void BTGE_AddUpdateEntityQueue(btEntity ent, dyt msg);
void BTGE_DecodeMsgVec(float *v, int nv, dyt msg);
void BTGE_DecodeMsgVec2(float *v, dyt msg);
void BTGE_DecodeMsgVec3(float *v, dyt msg);
void BTGE_DecodeMsgVec4(float *v, dyt msg);
void BTGE_ClientImpulseMove(btEntity ent, vec3 ivel, float dt);
void BTGE_DecodeClientBDeltaFaceMsg(dyt msg, BTGE_Brush *brush, int fn);
void BTGE_DecodeClientBDeltaMsg(dyt msg, BTGE_Brush *brush);
void BTGE_DecodeClientSEDeltaMsg(dyt msg, BTGE_SEntity *sent);
void BTGE_DecodeClientDeltaMsg(dyt msg);
void BTGE_DecodeClientWDelta(dyt msg);
void BTGE_DecodeClientImpulseEvent(dyt msg, btEntity ent, float dt);
void BTGE_DecodeClientImpulse(dyt msg, float dt);
void BTGE_DecodeClientStuffCmd(dyt msg, int clnum);
void BTGE_DecodeClientConnect(dyt msg, int clnum);
void BTGE_DecodeClientUIDelta(dyt msg, int clnum);
void BTGE_DecodeClientUpdateMsg(dyt msg, float dt, int clnum);
BTSV_API void BTGE_DecodeClientUpdate(dyt msg, float dt, int clnum);
//AHSRC:base/s_gui.c
BTSV_API btguiContext BT_GetEntityUIContext(btEntity self);
BTSV_API void BT_EntityGUIUse(btEntity self, btEntity other);
//AHSRC:base/s_seqevent.c
//AHSRC:base/s_voxel.c
BTSV_API void BTSV_VoxelPower_UpdateVoxel_NoteBlock(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTSV_API void BTSV_VoxelPower_UpdateVoxel_TNT(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTSV_API void BTSV_VoxelPower_UpdateVoxel_CommandBlock(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTSV_API void BTSV_VoxelPower_UpdateVoxel(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
BTSV_API void BTSV_Voxel_NoteBlock_Play(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z);
BTSV_API void BTSV_Voxel_TNT_Fire(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z);
BTSV_API void BTSV_Voxel_CommandBlock_Fire(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z);
BTSV_API int BTSV_Voxel_SmallDamageEvent(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z, double *org, float radius, float damage, float dmg);
BTSV_API void BTSV_Voxel_TouchEvent_PressurePlate(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z, int fl, btEntity ent);
BTSV_API void BTSV_Voxel_CheckFireBBoxTrigger(btEntity self,vec3 mins, vec3 maxs);
BTSV_API void BTSV_Voxel_UpdateBoxTrigger(BTGE_BrushWorld *world, vec3d amins, vec3d amaxs, int fl, btEntity ent);
BTSV_API void BTSV_Voxel_TouchEvent_Portal(BTGE_BrushWorld *world, BTGE_VoxelData *vox, int x, int y, int z, int fl, btEntity self);
BTSV_API void BTSV_Voxel_CheckFireBBoxPortal(btEntity self,vec3 mins, vec3 maxs);
BTSV_API vec3d BTSV_Voxel_FindEntitySpawnPosition(btEntity self, vec3d sorg);
//AHSRC:base/w_entbsp.c
void btEntityExtents(btEntity ent, vec3 dir,float *rm, float *rn);
void btEntityPlaneExtents(btEntity ent, vec4d norm,float *rm, float *rn);
void btBoxPlaneExtents(vec3d mins, vec3d maxs, vec4d norm,float *rm, float *rn);
void BTGE_EntBSP_FreeNode(btEntityNode ncur);
btEntityNode BTGE_EntBSP_AllocNode(void);
void BTGE_EntBSP_FlushNodes(btWorld wrl);
btEntity BTGE_EntBSP_GetEntityList(btWorld wrl);
vec3d BTGE_EntBSP_CalcEntityListOrigin(btWorld wrl, btEntity lst);
vec4d BTGE_EntBSP_CalcEntityListNodePlane(btWorld wrl,btEntity lst, vec3d org);
void BTGE_EntBSP_BindEntityListNode(btWorld wrl,btEntity lst, btEntityNode node);
btEntityNode BTGE_EntBSP_BuildEntityNode(btWorld wrl, btEntity lst);
void BTGE_EntBSP_BuildEntityBSP(btWorld wrl);
void BTGE_EntBSP_DestroyEntityBSP(btWorld wrl);
BTSV_API bool BTGE_EntBSP_CheckBoxEnt(vec3d mins, vec3d maxs, int flags, btEntity forent, btEntity cur);
BTSV_API btEntity BTGE_EntBSP_CheckBoxEntsMid(vec3d mins, vec3d maxs, int flags, btEntity forent, btEntity lst, btEntityNode node);
BTSV_API btEntity BTGE_EntBSP_CheckBoxEntsR(vec3d mins, vec3d maxs, int flags, btEntity forent, btEntity lst, btEntityNode node);
//AHSRC:base/w_misc.c
dyt btge_entity_GetSlot(dyt obj, dyt key);
dyt btge_entity_SetSlot(dyt obj, dyt key, dyt val);
bool BTGE_CheckRegistered();
void BTGE_Entity_Init();
BTSV_API int BTGE_WorldTeardown(BTGE_BrushWorld *world);
BTSV_API void BTSV_LoadMapFile(BTGE_BrushWorld *wrl, char *map);
BTSV_API void BTSV_LoadMap(BTGE_BrushWorld *wrl, char *map);
int BT_FindFreeEntityIndex();
BTSV_API btEntity btAllocEntity();
BTSV_API btEntity btGetEntity(int idx);
BTSV_API btEntity btNewEntity();
BTSV_API void btFreeEntity(btEntity ent);
BTSV_API void btDeleteEntity(btEntity ent);
BTSV_API bool btEntityP(btEntity ent);
BTSV_API dyt btEntGetProto(btEntity ent, char *name);
BTSV_API dyt btEntSetProto(btEntity ent, char *name, dyt val);
BTSV_API btEntity btLookupClientEntity(int clnum);
BTSV_API float btTime();
BTSV_API float btDelayTime(float amt);
BTSV_API btEntity btGetCurrentClient(void);
BTSV_API btEntity btGetCurrentClientList(void);
BTSV_API void btSound(btEntity self, int chan,char *sound, float vol, int attn);
BTSV_API void btSpeak2(btEntity self, int chan,char *voice, char *ctrl, char *text, float vol, int attn);
BTSV_API void btSpeak(btEntity self, int chan,char *text, float vol, int attn);
BTSV_API void btParticles(char *ty, int cnt, int clr,vec3d org, vec3 vel, vec3 svel);
BTSV_API void btDPrint(char *str, ...);
BTSV_API void btCenterprintAll(char *str, ...);
BTSV_API void btCenterprint(btEntity targ, char *str, ...);
BTSV_API void btCenterprintBox(btEntity targ, char *str, ...);
BTSV_API void btCenterprintBoxName(btEntity targ, char *str, ...);
BTSV_API void btCenterprintBoxImage(btEntity targ, char *str, ...);
BTSV_API void btPrint(btEntity targ, char *str, ...);
BTSV_API void btClientEvalPrint(btEntity targ, char *str, ...);
BTSV_API void btClientEvalPuts(btEntity targ, char *str);
BTSV_API void btCenterprintEval(btEntity targ, char *str, ...);
BTSV_API void btClientEvalScript(btEntity targ, char *name);
BTSV_API void btClientPushFile(btEntity targ, char *name);
BTSV_API void btClientPushFileData(btEntity targ,char *name, byte *buf, int sz);
BTSV_API void btViewFlags(btEntity targ, int flags);
BTSV_API void btViewFlash(btEntity targ,int rgb, float time, float scale);
BTSV_API void btViewMins(btEntity targ, vec3 v);
BTSV_API void btViewMaxs(btEntity targ, vec3 v);
BTSV_API void btViewFOV(btEntity targ, int fov);
BTSV_API void btViewMinMax(btEntity targ, vec3 mins, vec3 maxs);
BTSV_API void btStuffCmd(btEntity targ, char *str, ...);
BTSV_API void btBroadcastCmd(char *str, ...);
BTSV_API void btConsoleCmd(char *str, ...);
BTSV_API void btEntityScriptEval(btEntity self, char *str);
BTSV_API void btEntityScriptPrintEval(btEntity self, char *str, ...);
BTSV_API void btSetBGM(btEntity targ, char *name);
BTSV_API void btSetClientCamera(btEntity client, btEntity targ);
BTSV_API void btSetClientEntityGUI(btEntity client, btEntity targ);
BTSV_API void btSetScale(btEntity ent, float sc);
BTSV_API int btEntityCheckLine(btEntity ent, vec3d v0, vec3d v1);
BTSV_API int btEntityLineContents(btEntity ent, vec3d v0, vec3d v1);
BTSV_API int btEntityCheckBox(btEntity ent, vec3d mins, vec3d maxs);
BTSV_API int btEntityBoxContents(btEntity ent, vec3d mins, vec3d maxs);
BTSV_API int btEntityListBoxContents(btEntity lst, vec3d amins, vec3d amaxs);
BTSV_API float btEntityDistance(btEntity e0, btEntity e1);
BTSV_API float btSmallDistancePointBox(vec3d point, vec3d mins, vec3d maxs);
BTSV_API btEntity btFindRadius(vec3d origin, float radius);
BTSV_API btEntity btFindBox(vec3d mins, vec3d maxs);
BTSV_API bool btGameIsSingle();
BTSV_API bool btGameIsCoop();
BTSV_API bool btGameIsDeathmatch();
BTSV_API bool btGameIsNoMonsters();
BTSV_API btEntity btFindSpawnpoint();
BTSV_API void btEntUse(btEntity self, btEntity other);
BTSV_API bool btEntTouch(btEntity self, btEntity other);
BTSV_API bool btEntBlocked(btEntity self, btEntity other);
BTSV_API bool btEntPain(btEntity self, btEntity other, float damage);
BTSV_API bool btEntDie(btEntity self, btEntity other, float damage);
BTSV_API bool btEntStand(btEntity self);
BTSV_API bool btEntWalk(btEntity self);
BTSV_API bool btEntRun(btEntity self);
BTSV_API bool btEntMissile(btEntity self);
BTSV_API bool btEntMelee(btEntity self);
BTSV_API bool btEntHasMissileP(btEntity self);
BTSV_API bool btEntHasMeleeP(btEntity self);
BTSV_API bool btEntPreThink(btEntity self);
BTSV_API void btSetThink(btEntity self, btge_think fcn, float dt);
BTSV_API void btSetDyThink(btEntity self, dyt fcn, float dt);
BTSV_API btEntity btFindTargets(char *targetname);
BTSV_API btEntity btFindClients();
BTSV_API btEntity btFindClassname(char *classname);
void BT_SetMovedir(btEntity self);
void BT_InitTrigger(btEntity self);
BTSV_API void BT_CalcMove(btEntity self,vec3d dest, float speed, btge_think fcn);
BTSV_API void BT_CalcMoveDy(btEntity self,vec3d dest, float speed, dyt fcn);
void BT_CalcMoveDone(btEntity self);
void BT_CalcMoveResume(btEntity self);
void BT_CalcMoveBlocked(btEntity self);
void BT_DelayThink(btEntity self);
BTSV_API void BT_DelayUseTargets(btEntity self,btEntity other, float delay);
BTSV_API void BT_UseTargets(btEntity self, btEntity other);
BTSV_API void BT_AttackFinished(btEntity self, float delay);
BTSV_API int BT_AttackFinishedP(btEntity self);
BTSV_API int BT_AttackFinishedTimeP(btEntity self, float delay);
BTSV_API void BT_AttackFinishedRapid(btEntity self, float delay);
BTSV_API void BT_PainFinished(btEntity self, float delay);
BTSV_API int BT_PainFinishedP(btEntity self);
BTSV_API int BT_PainFinishedTimeP(btEntity self, float delay);
BTSV_API void BT_AirFinished(btEntity self, float delay);
BTSV_API int BT_AirFinishedP(btEntity self);
BTSV_API void BT_PortalFinished(btEntity self, float delay);
BTSV_API int BT_PortalFinishedP(btEntity self);
BTSV_API void BT_QuadFinished(btEntity self, float delay);
BTSV_API int BT_QuadFinishedP(btEntity self);
BTSV_API int BT_QuadFinishedInP(btEntity self, float dt);
BTSV_API void BT_InvulFinished(btEntity self, float delay);
BTSV_API int BT_InvulFinishedP(btEntity self);
BTSV_API void BT_InvisFinished(btEntity self, float delay);
BTSV_API int BT_InvisFinishedP(btEntity self);
BTSV_API void BT_EnviroFinished(btEntity self, float delay);
BTSV_API int BT_EnviroFinishedP(btEntity self);
BTSV_API int BT_EnviroFinishedInP(btEntity self, float dt);
BTSV_API void btParticleExplosion(vec3d org);
BTSV_API void btParticleBloodExplosion(vec3d org);
BTSV_API void btParticleRobotExplosion(vec3d org);
BTSV_API void btParticleTeleportExplosion(vec3d org);
BTSV_API void btParticleSparks(vec3d org);
BTSV_API int BT_ExplodeRemoveSelf(btEntity self);
BTSV_API int BT_EntityExplode(btEntity self);
BTSV_API void btBecomeExplosion(btEntity self);
BTSV_API int BT_EntityBloodExplode(btEntity self);
BTSV_API int BT_EntitySparksExplode(btEntity self);
BTSV_API int BT_EntitySmallSparksExplode(btEntity self);
BTSV_API int BT_EntityRobotExplode(btEntity self);
BTSV_API void BT_DisintegrationThink(btEntity self);
BTSV_API int BT_EntityDisintegration(btEntity self);
BTSV_API int BT_EntityOnRailP(btEntity self);
BTSV_API btLight btGetEntityLight(btEntity self);
BTSV_API void btFreeEntityLight(btEntity self);
BTSV_API void btLightSetOrigin(btLight light, vec3d org);
BTSV_API void btLightSetDirection(btLight light, vec3 dir);
BTSV_API void btLightSetTarget(btLight light, vec3d org);
BTSV_API void btLightSetColor(btLight light, vec3 clr);
BTSV_API void btLightSetColori(btLight light, int clr);
//AHSRC:base/w_move.c
bool BT_CheckEntityTeleportSpot(btEntity self, vec3d org);
vec3d BT_FindEntityTeleportSpot(btEntity self, vec3d org);
void BT_StepEntity_AddGravity(btEntity self);
void BT_StepEntity_UpdateAngles(btEntity self);
void BT_StepEntity_Walk(btEntity self);
void BT_StepEntity_Step(btEntity self);
void BT_StepEntity_Fly(btEntity self);
void BT_StepEntity_Toss(btEntity self);
void BT_StepEntity_Slide(btEntity self);
int BT_StepEntity_SlideR(btEntity self, float dt);
void BT_PushEntity(btEntity self, btEntity ent, vec3 vel);
void BT_StepEntity_Push(btEntity self);
void BT_StepEntity_Noclip(btEntity self);
int BT_StepEntity_FlyMissileR(btEntity self, float dt);
void BT_StepEntity_FlyMissile(btEntity self);
int BT_StepEntity_BounceR(btEntity self, float dt);
void BT_StepEntity_Bounce(btEntity self);
void BT_StepEntity_BounceMissile(btEntity self);
void BT_StepEntity_PhysicsRBD(btEntity self);
void BT_PreStepEntity(btEntity self);
void BT_StepEntity_PushableMove(btEntity self);
void BT_StepEntity_RailMoveAdjust(btEntity self);
void BT_StepEntity(btEntity self);
void BT_StepWorldVoxSync(float dt);
void BT_StepWorld2(float dt);
BTSV_API bool btsvStepWorld(float dt);
BTSV_API bool BTSV_StepWorld(float dt);
//AHSRC:base/w_phys.c
void BTGE_EntPhys_UnlinkEntity(btEntity ent);
void BTGE_EntPhys_SendEntity(btEntity ent);
void BTGE_EntPhys_UpdateEntity(btEntity ent);
void BTGE_EntPhys_UpdateWorld(BTGE_BrushWorld *world);
void BTGE_EntPhys_UnlinkWorld(BTGE_BrushWorld *world);
//AHSRC:base/w_savegame.c
BTSV_API char *btGlobalVarGet(char *name);
BTSV_API void btGlobalVarSet(char *name, char *val);
BTSV_API char *btQualifyLocalVarName(char *name);
BTSV_API char *btLocalVarGet(char *name);
BTSV_API void btLocalVarSet(char *name, char *val);
BTSV_API btEntity BtSp_info_varstate_saved(btSEntity args);
BTSV_API BTGE_SEntity *BTGE_SaveGame_FlattenEntity(BTGE_SEntity **wrl, btEntity ent);
BTSV_API BTGE_SEntity *BTGE_SaveGame_FlattenWorld(BTGE_BrushWorld *world);
BTSV_API void BTGE_SaveGame_SaveWorld(BTGE_BrushWorld *world, char *name);
BTSV_API BTGE_SEntity *BTGE_SaveGame_FlattenWorldBBox(BTGE_BrushWorld *world, vec3d amins, vec3d amaxs);
byte *BTGE_SaveGame_EncodeChunkContents(BTGE_BrushWorld *world,BTGE_VoxelChunk *chk, byte *obuf, int osz);
byte *BTGE_SaveGame_DecodeChunkContents(BTGE_BrushWorld *world,BTGE_VoxelChunk *chk, byte *ibuf, int isz);
byte *BTGE_SaveGame_EncodeRegionContents(BTGE_BrushWorld *world,BTGE_VoxelRegion *rgn, byte *obuf, int osz);
byte *BTGE_SaveGame_DecodeRegionContents(BTGE_BrushWorld *world,BTGE_VoxelRegion *rgn, byte *ibuf, int isz);
//AHSRC:base/w_solid.c
BTSV_API int btsvBindWorld(BTGE_BrushWorld *wrl);
BTSV_API BTGE_BrushWorld *btCurrentWorld(void);
BTSV_API int btBrushListContents(BTGE_Brush *lst);
BTSV_API int btPointContents(vec3d pt, btEntity forent);
BTSV_API int btGetFlagContents(int flags);
BTSV_API int btRoundDown(float val);
BTSV_API int btBoxContents(vec3d amins, vec3d amaxs, btEntity forent);
BTSV_API int btPointBoxContents(vec3d org, vec3 mins, vec3 maxs, btEntity forent);
BTSV_API int btPointVoxelType(vec3d pt, btEntity forent);
BTSV_API vec3d btBoxStepMoveFall(vec3d org, vec3 mins, vec3 maxs, float dt, btEntity self);
BTSV_API vec3d btBoxStepMoveSlide(vec3d org,vec3 mins, vec3 maxs, vec3 ivel, float dt, vec3d org1, btEntity self);
BTSV_API vec3d btBoxStepMove(vec3d org, vec3 mins, vec3 maxs,vec3 ivel, float dt, btEntity self);
vec3d btBoxStepMoveI(vec3d org, vec3 mins, vec3 maxs,vec3 ivel, float dt, btEntity self);
BTSV_API btEntity BT_TracelineEnts(BTGE_Trace *trace,vec3d spos, vec3d epos, int flags, btEntity forent);
BTSV_API btEntity BT_CheckBoxEnts(vec3d mins, vec3d maxs, int flags, btEntity forent);
BTSV_API void BT_CheckFireBBoxTrigger(btEntity self,vec3 mins, vec3 maxs);
BTSV_API void BT_CheckFireBoxTrigger(btEntity self);
BTSV_API void BT_CheckFirePadBoxTrigger(btEntity self);
BTSV_API int btTraceline(BTGE_Trace *trace,vec3d spos, vec3d epos, int flags, btEntity forent);
BTSV_API int btCheckFlySpot(vec3d org,vec3 mins, vec3 maxs, btEntity forent);
BTSV_API int btCheckSwimSpot(vec3d org,vec3 mins, vec3 maxs, btEntity forent);
BTSV_API int btCheckGroundDistPts(vec3d org, vec3 mins, vec3 maxs,float dist, btEntity forent);
BTSV_API int btCheckGroundDist(vec3d org, vec3 mins, vec3 maxs,float dist, btEntity forent);
BTSV_API int btCheckGroundDist2(vec3d org, vec3 mins, vec3 maxs,float dist, btEntity forent);
BTSV_API int btCheckOnGround(vec3d org, vec3 mins, vec3 maxs,btEntity forent);
BTSV_API vec3d btCalcGroundFloorPoint(vec3d org, vec3 mins, vec3 maxs, btEntity forent);
BTSV_API vec3 btYawVector(float yaw);
BTSV_API float btCurrentYaw(btEntity self);
BTSV_API float btCurrentPitch(btEntity self);
BTSV_API void btSetYaw(btEntity self, float ny);
BTSV_API float btAngleMod(float v);
BTSV_API float btAngleMod2(float v);
BTSV_API vec3 btAngleMod3(vec3 ang);
BTSV_API vec3 btVecToAngles(vec3 dir);
BTSV_API float btVecToYaw(vec3 dir);
void BT_WalkmovePointAdjGround(btEntity self, vec3d org);
BTSV_API void btDropToFloor(btEntity self);
BTSV_API int btWalkmove(btEntity self, float yaw, float dist);
BTSV_API vec3d btCalcCenter(btEntity self);
BTSV_API float btCalcRadius(btEntity self);
BTSV_API float btStepTime();
BTSV_API float btRelStepTime();
BTSV_API float btRandom();
BTSV_API float btSRandom();
BTSV_API float btRangeRandom(float min, float max);
BTSV_API int btRangeRandomInt(int min, int max);
BTSV_API void btSetOrigin(btEntity self, vec3d org);
BTSV_API void btSetAngles(btEntity self, vec3 ang);
BTSV_API void btSetAngles2(btEntity self, vec3 ang);
BTSV_API void btSetRotation(btEntity self, quat rot);
BTSV_API void btSetVelocity(btEntity self, vec3 vel);
BTSV_API void btSetSolid(btEntity self, int solidtype, int movetype);
BTSV_API void btSetBBox(btEntity self, vec3 mins, vec3 maxs);
BTSV_API void btSetRadius(btEntity self, float radius);
BTSV_API void btSetHeightRadius(btEntity self,float height, float radius);
BTSV_API void btSetModel(btEntity self, char *str);
BTSV_API void btSetViewModel(btEntity self, char *str);
//AHSRC:base/w_spawn.c
BTSV_API int btGetSkill();
BTSV_API void btRegisterSpawnAlias(char *srcname, char *dstname);
BTSV_API char *btLookupSpawnAliasI(char *name);
BTSV_API char *btLookupSpawnAlias(char *name);
BTSV_API void btInitEntity(btEntity ent, btSEntity args);
BTSV_API btEntity btNewEntityInit(btSEntity args);
BTSV_API btEntity btNewEntityTriggerInit(btSEntity args,BTGE_Entity_Iface *vt);
BTSV_API btEntity btNewEntityActorInit(btSEntity args,BTGE_Entity_Iface *vt, BTGE_Actor_Iface *avt);
BTSV_API char *btVec2ToStr(vec2 v);
BTSV_API char *btVec3ToStr(vec3 v);
BTSV_API char *btVec4ToStr(vec4 v);
BTSV_API char *btQuatToStr(quat v);
double btge_atof(char *str);
BTSV_API vec2 btStrToVec2(char *str);
BTSV_API vec3 btStrToVec3(char *str);
BTSV_API vec4 btStrToVec4(char *str);
BTSV_API vec4 btStrToQuat(char *str);
BTSV_API char *btGetFieldAsString(btEntity ent, char *var);
BTSV_API void btSetFieldAsString(btEntity ent, char *var, char *val);
BTSV_API btEntity BT_SpawnSEntity(BTGE_SEntity *ent);
BTSV_API btEntity btSpawnSEntity(btSEntity ent);
BTSV_API btEntity btSpawnEntityAttr(dytva rest);
BTSV_API btEntity btSpawnEntityBasic(char *classname, vec3 org, float angle);
BTGE_Light *BT_SpawnSEntityLight(BTGE_SEntity *ent);
void BT_SpawnInit(BTGE_BrushWorld *world);
int BT_Spawn_HandleLoadRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
int BT_Spawn_HandleSaveRegion(BTGE_BrushWorld *world, BTGE_VoxelRegion *rgn);
void BT_SpawnWorld(BTGE_BrushWorld *world);
BTSV_API void btSpawnPrefab(char *name, vec3d origin);
BTSV_API void btsvSpawnWorld(void);
BTSV_API btEntity btSpawnPlayer(void);
BTSV_API btEntity btRespawnPlayer(btEntity ent);
void BT_EntityRespawnEffect(btEntity ent);
char *BTGE_SpawnPickRandomEnemy();
BTSV_API void BT_VoxelSpawnerTick(BTGE_BrushWorld *world, BTGE_VoxelChunk *chk, BTGE_VoxelData *vox, int x, int y, int z);
