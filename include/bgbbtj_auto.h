//AHSRC:base/inflate.c
int PDUNZ_ReadByteBasic();
int PDUNZ_ReadByteEscape();
int PDUNZ_ReadBit();
int PDUNZ_Read2Bits();
int PDUNZ_Read3Bits();
int PDUNZ_Read4Bits();
int PDUNZ_Read5Bits();
int PDUNZ_ReadNBits(int n);
void PDUNZ_SkipNBits(int n);
int PDUNZ_PeekWord();
void PDUNZ_AlignByte();
int PDUNZ_ReadAlignedByte();
int PDUNZ_ReadAlignedWord();
int PDUNZ_TransposeByte(int v);
int PDUNZ_TransposeWord(int v);
int PDUNZ_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int PDUNZ_SetupStatic();
int PDUNZ_DecodeSymbol();
int PDUNZ_DecodeDistance();
int PDUNZ_DecodeCodeLengths(byte *cl, int ncl);
int PDUNZ_DecodeHeader();
int PDUNZ_DecodeHeaderBTLZH();
int PDUNZ_DecodeRun(int sym);
int PDUNZ_DecodeBlockData();
int PDUNZ_DecodeBlock();
BGBBTJ_API int PDUNZ_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
BGBBTJ_API int PDUNZ_DecodeStreamSz(byte *ibuf, byte *obuf, int isz,int osz, int *rosz, int flags);
BGBBTJ_API int PDUNZ_DecodeStreamSzZl(byte *ibuf, byte *obuf, int isz,int osz, int *rosz, int flags);
BGBBTJ_API int PDUNZ_DecodeStreamZl(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:base/deflate.c
void PDZ2_WriteBit(int i);
void PDZ2_Write2Bits(int i);
void PDZ2_Write3Bits(int i);
void PDZ2_Write4Bits(int i);
void PDZ2_Write5Bits(int i);
void PDZ2_WriteNBits(int i, int n);
void PDZ2_FlushBits();
int PDZ2_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDZ2_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int PDZ2_BuildLengths(int *stat, int nc, byte *cl, int ml);
int PDZ2_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void PDZ2_UpdateWindowByte(byte *s);
void PDZ2_UpdateWindowString(byte *s, int l);
int PDZ2_LookupString(byte *cs, byte *ce, int *rl, int *rd);
int PDZ2_LZCompressBuffer(byte *ibuf, byte *obuf, byte *mbuf, int sz);
int PDZ2_LZCompressBufferRLE(byte *ibuf, byte *obuf, byte *mbuf, int sz);
void PDZ2_StatLZRun(byte *cs, int *lstat, int *dstat);
void PDZ2_StatLZBuffer(byte *tbuf, byte *mbuf, int n,int *lstat, int *dstat);
void PDZ2_StatLengths(byte *cl, int nc, int *stat);
void PDZ2_EncodeSymbol(int v);
void PDZ2_EncodeLengths(byte *cl, int nc);
void PDZ2_EncodeLZRun(byte *cs);
void PDZ2_EncodeLZBuffer(byte *tbuf, byte *mbuf, int n);
int PDZ2_EncodeBlockStatic(byte *ibuf, int isz, int last);
int PDZ2_EncodeBlock(byte *ibuf, int isz, int last);
int PDZ2_EncodeStream_I(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream64(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStreamLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
int PDZ2_EncodeStream64Lvl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStreamLvlZl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStream64LvlZl(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
int PDZ2_EncodeStream64LvlZlTest(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
//AHSRC:base/png.c
uint BGBBTJ_PNG_DataAdler32(void *buf, int sz, uint lcrc);
uint BGBBTJ_PNG_CRC32(void *buf, int sz, uint lcrc);
char *BGBBTJ_PNG_Fourcc2String(uint fcc);
int BGBBTJ_PNG_Paeth(int a, int b, int c);
uint BGBBTJ_PNG_ReadInt32BE(VFILE *fd);
uint BGBBTJ_PNG_ReadFourcc(VFILE *fd);
BGBBTJ_API byte *BGBBTJ_PNG_Load(VFILE *ifd, int *w, int *h);
BGBBTJ_API byte *BGBBTJ_PNG_LoadRaw(char *name, int *w, int *h);
BGBBTJ_API void BGBBTJ_PNG_Free(byte *buf);
void BGBBTJ_PNG_WriteInt32LE(VFILE *fd, uint v);
void BGBBTJ_PNG_WriteInt32BE(VFILE *fd, uint v);
void BGBBTJ_PNG_WriteFourcc(VFILE *fd, uint v);
void BGBBTJ_PNG_WriteChunk(VFILE *fd, uint fcc, byte *buf, int len);
BGBBTJ_API void BGBBTJ_PNG_Store(VFILE *fd, byte *buf, int xs, int ys);
BGBBTJ_API int BGBBTJ_PNG_SaveRaw(char *name, byte *buf, int xs, int ys);
BGBBTJ_API int BGBBTJ_PNG_SaveRawFlip(char *name, byte *buf, int xs, int ys);
//AHSRC:base/bufpng.c
uint BGBBTJ_BufPNG_DataAdler32(void *buf, int sz, uint lcrc);
void BGBBTJ_BufPNG_DataAdler32_Step16(byte *buf, int *rs1, int *rs2);
uint BGBBTJ_BufPNG_DataAdler32(void *buf, int sz, uint lcrc);
uint BGBBTJ_BufPNG_CRC32(void *buf, int sz, uint lcrc);
char *BGBBTJ_BufPNG_Fourcc2String(uint fcc);
int BGBBTJ_BufPNG_Paeth(int a, int b, int c);
int BGBBTJ_BufPNG_Paeth(int a, int b, int c);
uint BGBBTJ_BufPNG_ReadInt32BE(byte **rct);
uint BGBBTJ_BufPNG_ReadFourcc(byte **rct);
BGBBTJ_API int BGBBTJ_BufPNG_DecodeOBuf(byte *csbuf, int cssz, byte *obuf, int *w, int *h);
void BGBBTJ_BufPNG_DecodeScan24_0(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_0(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_1(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_1(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_2(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_2(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_3(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_3(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan24_4(byte *s, byte *sca, byte *scb, int xs);
void BGBBTJ_BufPNG_DecodeScan32_4(byte *s, byte *sca, byte *scb, int xs);
bool BGBBTJ_BufPNG_DecodeScan(byte *s, byte *sca, byte *scb, int xs, int ssz, int fm);
BGBBTJ_API byte *BGBBTJ_BufPNG_Decode(byte *csbuf, int cssz, int *w, int *h);
void BGBBTJ_BufPNG_WriteInt32LE(byte **rct, uint v);
void BGBBTJ_BufPNG_WriteInt32BE(byte **rct, uint v);
void BGBBTJ_BufPNG_WriteFourcc(byte **rct, uint v);
void BGBBTJ_BufPNG_WriteChunk(byte **rct, uint fcc, byte *buf, int len);
BGBBTJ_API int BGBBTJ_BufPNG_Encode(byte *ctbuf, int ctsz, byte *buf, int xs, int ys);
BGBBTJ_API int BGBBTJ_BufPNG_EncodeFast(byte *ctbuf, int ctsz, byte *buf, int xs, int ys);
//AHSRC:base/pcx.c
byte *BGBBTJ_PCX_Load(VFILE *fd, int *w, int *h, char *pal);
byte *BGBBTJ_PCX_Load32(VFILE *fd, int *w, int *h);
int BGBBTJ_PCX_Store(VFILE *fd, unsigned char *img,int width, int height, char *pal);
int BGBBTJ_PCX_StoreRaw(char *name, unsigned char *buf,int w, int h, char *pal);
//AHSRC:base/tga.c
byte *BGBBTJ_Img_LoadTGA(VFILE *fd, int *w, int *h);
int BGBBTJ_Img_StoreTGA(VFILE *fd, byte *buf, int w, int h);
BGBBTJ_API byte *BGBBTJ_TGA_LoadRaw(char *name, int *w, int *h);
BGBBTJ_API int BGBBTJ_TGA_SaveRaw(char *name, byte *buf, int w, int h);
//AHSRC:base/wal.c
uint WAL_ReadInt32LE(FILE *fd);
uint WAL_ReadFourcc(FILE *fd);
void WAL_Set32LE(byte *t, int val);
int WAL_Write(FILE *fd, WalInfo_t *inf);
char *WAL_Q1Name(char *name);
int WAL_WriteQ1(FILE *fd, WalInfo_t *inf);
int WAL_WriteFile(char *name, WalInfo_t *inf);
int WAL_WriteFileQ1(char *name, WalInfo_t *inf);
void WAL_Conv32to8(byte *ibuf, byte *obuf, int width, int height,char *pal);
int WAL_HalfSample(byte *src, int w, int h);
WalInfo_t *WAL_CreateWal(byte *img, int width, int height, char *pal);
//AHSRC:base/img_util.c
void *bgbv86_ralloc(int sz);
char *bgbv86_rstrdup(char *str);
char *bgbv86_rsprint(char *str, ...);
char **bgbv86_rsplit(char *s);
int WAL_ReadInfo(char *name, WalInfo_t *wal);
byte *PDTGA_LoadRaw(char *name, int *w, int *h);
int WAL_FileExistsP(char *name);
int WAL_ImageExistsP(char *name);
char *WAL_AnimChain(char *name);
void AWAL_UnFilterBuf(byte *tbuf, byte *buf, byte *lbuf,int xs, int ys, int fl);
BGBBTJ_API void AWAL_FilterBuf(byte *tbuf, byte *buf, byte *lbuf,int xs, int ys, int fl);
BGBBTJ_API int AWAL_Write(FILE *fd, WalInfo_t *inf);
BGBBTJ_API int AWAL_WriteFile(char *name, WalInfo_t *inf);
BGBBTJ_API byte *AWAL_LoadScaleImageMap(char *base, char *suf,int frame, int w, int h);
BGBBTJ_API int AWAL_LoadNormalMap(char *base, int frame,byte *buf, int w, int h);
BGBBTJ_API int AWAL_LoadSpecularMap(char *base, int frame,byte *buf, int w, int h);
BGBBTJ_API int AWAL_LoadLumaMap(char *base, int frame,byte *buf, int w, int h);
BGBBTJ_API int imgstat(byte *simg, byte *dimg, int n);
BGBBTJ_API int bgbbtj_imgflip(byte *simg, byte *dimg, int xs, int ys);
BGBBTJ_API int bgbbtj_imgflip_single(byte *img, int xs, int ys);
BGBBTJ_API int BGBBTJ_BlendMagentaEncodeColor(byte *src, byte *dst);
BGBBTJ_API int BGBBTJ_BlendMagentaDecodeColor(byte *src, byte *dst);
BGBBTJ_API void BGBBTJ_BlendMagentaEncodeImage(byte *simg, byte *dimg, int n);
BGBBTJ_API void BGBBTJ_BlendMagentaDecodeImage(byte *simg, byte *dimg, int n);
BGBBTJ_API int BGBBTJ_SuperMagenta8_PointDist(int cy0, int cu0, int cv0, int cy1, int cu1, int cv1);
BGBBTJ_API int BGBBTJ_SuperMagenta8_YuvDist(int cy, int cu, int cv);
BGBBTJ_API int BGBBTJ_SuperMagenta8_YUV2A(int cy, int cu, int cv);
BGBBTJ_API void BGBBTJ_SuperMagenta8_ConvRGBA2YUV(int cr, int cg, int cb, int ca, int *rcy, int *rcu, int *rcv);
BGBBTJ_API void BGBBTJ_SuperMagenta8_ConvYUV2RGBA(int cy, int cu, int cv, int *rcr, int *rcg, int *rcb, int *rca);
BGBBTJ_API int BGBBTJ_Tex_BlueScreen(byte *src, byte *dst, int w, int h);
BGBBTJ_API int BGBBTJ_Tex_GreenScreen(byte *src, byte *dst, int w, int h);
BGBBTJ_API void BGBBTJ_Tex_Dither15(byte *src, byte *dst, int w, int h);
//AHSRC:base/out_avi.c
void *pdgl_avi_malloc(int sz);
BGBBTJ_API void BGBBTJ_AVI_UpdateSize(VFILE *fd, int o);
BGBBTJ_API BGBBTJ_AVICtx *BGBBTJ_AVI_OpenOutStream(char *name,int w, int h, float fps, int fcc);
BGBBTJ_API BGBBTJ_AVICtx *BGBBTJ_AVI_OpenOutStream2(char *name,int w, int h, float fps, int fcc, int auid);
BGBBTJ_API void BGBBTJ_AVI_CloseOutStream(BGBBTJ_AVICtx *ctx);
int BGBBTJ_AVI_AddIndex(BGBBTJ_AVICtx *ctx, uint tag, uint len, uint fl);
void BGBBTJ_AVI_EmitCodedFrame(BGBBTJ_AVICtx *ctx, byte *buf,int sz, int qf);
void BGBBTJ_AVI_EmitAudioFrame(BGBBTJ_AVICtx *ctx);
BGBBTJ_API void BGBBTJ_AVI_EncodeFrame(BGBBTJ_AVICtx *ctx,byte *ibuf, int w, int h);
BGBBTJ_API void BGBBTJ_AVI_EncodeFrame2(BGBBTJ_AVICtx *ctx,byte *ibuf, int w, int h, int qf, int clrs);
BGBBTJ_API void BGBBTJ_AVI_EncodeComponentFrame(BGBBTJ_AVICtx *ctx,byte *rgba, byte *norm, byte *spec, byte *luma, int w, int h);
BGBBTJ_API void BGBBTJ_AVI_EncodeComponentFrame2(BGBBTJ_AVICtx *ctx,byte *rgba, byte *norm, byte *spec, byte *luma, int w, int h, int qf, int pf);
BGBBTJ_API int BGBBTJ_AVI_WriteContextStereoSamples(BGBBTJ_AVICtx *ctx, short *buf, int cnt);
void BGBBTJ_AVI_Scale800x600to320x240(byte *ibuf, byte *obuf);
int BGBBTJ_AVI_EncoderLoop(void *p);
BGBBTJ_API int BGBBTJ_AVI_GetEncodeTime();
BGBBTJ_API int BGBBTJ_AVI_WriteStereoSamples(short *buf, int cnt);
BGBBTJ_API int BGBBTJ_AVI_Screenshot();
BGBBTJ_API int BGBBTJ_AVI_DoScreenshotFrame(float dt);
BGBBTJ_API int BGBBTJ_AVI_NoCapture();
BGBBTJ_API int BGBBTJ_Tex_Resample(byte *src, int iw, int ih, byte *dst, int ow, int oh);
BGBBTJ_API int BGBBTJ_Tex_SplinePolateRGBA8(byte *src, int w, int h,float x, float y, float *rgba);
BGBBTJ_API int BGBBTJ_Tex_ResampleSpline(byte *src, int iw, int ih, byte *dst, int ow, int oh);
BGBBTJ_API int BGBBTJ_Tex_HalfSample(byte *src, int w, int h);
BGBBTJ_API int BGBBTJ_Tex_HalfSampleDest(byte *src, byte *dst, int w, int h);
BGBBTJ_API int BGBBTJ_DoubleSample_InterpolatePoint(byte *src,int w, int h, int pt);
BGBBTJ_API int BGBBTJ_DoubleSample_InterpolateWeightPoint(byte *src,int w, int h, int hf, int vf);
BGBBTJ_API int BGBBTJ_DoubleSample_SoftenPoint(byte *src,int w, int h);
int BGBBTJ_DoubleSample_DoublePoint(byte *src, byte *dst, int w, int h);
BGBBTJ_API int BGBBTJ_Tex_DoubleSample(byte *src, byte *dst, int w, int h);
//AHSRC:base/img_btv0.c
uint BTV0_DataAdler32(void *buf, int sz, uint lcrc);
uint BTV0_CRC32(void *buf, int sz, uint lcrc);
byte *BTV0_WriteInt32LE(byte *ct, uint v);
byte *BTV0_WriteInt32BE(byte *ct, uint v);
byte *BTV0_WriteFourcc(byte *ct, uint v);
byte *BTV0_WriteChunk(byte *ct, uint fcc, byte *buf, int len);
byte *BTV0_EmitString(byte *ct, char *str);
byte *BTV0_EmitMarker(byte *ct, int id);
byte *BTV0_EmitMarkerTag(byte *ct, char *name, char *value);
int BTV0_Paeth(int a, int b, int c);
int BTV0_Mod(int x, int xs);
int BTV0_FindImageBufferBestOffset(PDBTV0_Context *ctx,byte *olbuf, byte *buf, int xs, int ys, int x, int y, int *rxo, int *ryo);
byte *BTV0_EncodeImageBuffer(PDBTV0_Context *ctx,byte *obuf, byte *buf, int xs, int ys, int layer);
PDBTV0_Context *BTV0_AllocContext();
int BTV0_EncodeCtx(PDBTV0_Context *ctx,byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
int BTV0_EncodeComponentCtx(PDBTV0_Context *ctx, byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf, int pf);
//AHSRC:base/img_btic1.c
char *btic_strdup(char *str);
void *btic_malloc_lln(int sz, char *fn, int ln);
void btic_free(void *ptr);
BGBBTJ_API int BTIC1_EscapeEncodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
BGBBTJ_API int BTIC1_EscapeEncodeSingleBuffer(byte *buf, int sz);
BGBBTJ_API int BTIC1_EscapeEncodeBufferSimple(byte *ibuf, int isz,byte *obuf, int osz);
byte *BTIC1_EmitInt16LE(byte *ct, uint v);
byte *BTIC1_EmitInt16BE(byte *ct, uint v);
byte *BTIC1_EmitInt32LE(byte *ct, uint v);
byte *BTIC1_EmitInt32BE(byte *ct, uint v);
byte *BTIC1_EmitFourcc(byte *ct, uint v);
byte *BTIC1_EmitString(byte *ct, char *str);
byte *BTIC1_EmitMarkerLen(byte *ct, byte tag, int len);
byte *BTIC1_EmitLumpFMT12(byte *ct, uint fcc, byte *buf, int len);
byte *BTIC1_EmitLumpAPP12(byte *ct, uint fcc, byte *buf, int len);
byte *BTIC1_EmitLumpFMT13(byte *ct, char *tag, byte *buf, int len);
byte *BTIC1_EmitLumpAPP13(byte *ct, char *tag, byte *buf, int len);
byte *BTIC1_EmitLumpFMT12Z(byte *ct, uint fcc, byte *buf, int len);
byte *BTIC1_EmitLumpAPP12Z(byte *ct, uint fcc, byte *buf, int len);
byte *BTIC1_EmitLumpMarkFccZ(byte *ct,int mark, uint fcc, byte *buf, int len);
byte *BTIC1_EmitLumpFMT13Z(byte *ct, char *tag, byte *buf, int len);
byte *BTIC1_EmitLumpAPP13Z(byte *ct, char *tag, byte *buf, int len);
byte *BTIC1_EmitLumpMarkStrZ(byte *ct,int mark, char *tag, byte *buf, int len);
byte *BTIC1_EmitLumpFMT11(byte *ct, char *tag, char **args);
byte *BTIC1_EmitLumpAPP11(byte *ct, char *tag, char **args);
btj_word_ube BTIC1_WrapWordUBE(u16 val);
btj_word_sbe BTIC1_WrapWordSBE(s16 val);
btj_dword_ube BTIC1_WrapDWordUBE(u32 val);
btj_dword_sbe BTIC1_WrapDWordSBE(s32 val);
byte *BTIC1_EmitLayerHeader(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_LayerHeader *lhdr);
byte *BTIC1_EmitComponentLayerID(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EmitComponentLayerHeader(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EmitImageHeader(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EmitImageData(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EmitImageLiteralData(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EmitImage(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
void BTIC1_FilterPackImage(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr);
void BTIC1_CheckBufferImageFPData(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr, int sz);
void BTIC1_CheckBufferImageFPLData(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr, int sz);
void BTIC1_CheckBufferImageData(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr, int sz);
void BTIC1_CheckBufferImageRGBA(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr, int sz);
void BTIC1_ColorConvertImage(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EncodeImageBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EncodeCompLayerBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
byte *BTIC1_EncodeTagLayerBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_LayerHeader *lhdr);
byte *BTIC1_EncodePatchCompLayerBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ct, BGBBTJ_BTIC1_ImageHeader *thdr);
int BTIC1_EncodeContext(BGBBTJ_BTIC1_Context *ctx, byte *obuf, int maxsz);
BGBBTJ_BTIC1_LayerHeader *BTIC1_AllocLayer(BGBBTJ_BTIC1_Context *ctx, char *name);
BGBBTJ_BTIC1_ImageHeader *BTIC1_AllocImage(BGBBTJ_BTIC1_Context *ctx, char *name);
BGBBTJ_BTIC1_LayerHeader *BTIC1_LookupContextLayer(BGBBTJ_BTIC1_Context *ctx, char *name);
BGBBTJ_BTIC1_LayerHeader *BTIC1_GetContextLayer(BGBBTJ_BTIC1_Context *ctx, char *name);
BGBBTJ_BTIC1_ImageHeader *BTIC1_LookupLayerImage(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_LayerHeader *layer, char *name);
BGBBTJ_BTIC1_ImageHeader *BTIC1_GetLayerImage(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_LayerHeader *layer, char *name);
void BTIC1_SetupImageBuffer(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *img, byte *rgba, int xs, int ys, int qf, int ity, int pf);
BGBBTJ_API int BTIC1_SetupComponentCtx(BGBBTJ_BTIC1_Context *ctx, char *lname, byte *rgba, byte *norm, byte *spec, byte *luma, int xs, int ys, int qf, int ity, int pf);
BGBBTJ_API int BTIC1_EncodeComponentCtx(BGBBTJ_BTIC1_Context *ctx, byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
BGBBTJ_API BGBBTJ_BTIC1_Context *BTIC1_AllocContext(void);
BGBBTJ_API void BTIC1_FreeContext(BGBBTJ_BTIC1_Context *ctx);
BGBBTJ_API int BTIC1_EncodeComponent(byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
//AHSRC:base/img_btic1_dec.c
u16 BTIC1_UnwrapWordUBE(btj_word_ube val);
s16 BTIC1_UnwrapWordSBE(btj_word_sbe val);
u32 BTIC1_UnwrapDWordUBE(btj_dword_ube val);
s32 BTIC1_UnwrapDWordSBE(btj_dword_sbe val);
BGBBTJ_API int BTIC1_EscapeDecodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
BGBBTJ_API int BTIC1_EscapeDecodeSingleBuffer(byte *buf, int sz);
int BTIC1_CalcUnpackImageSize(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr);
void BTIC1_FilterUnpackImage(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr);
void BTIC1_DecodeImageHeader(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
void BTIC1_DecodeImageData(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
void BTIC1_DecodeImageLiteralData(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
void BTIC1_DecodeImageDataZ(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
void BTIC1_DecodeImageLiteralDataZ(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
byte *BTIC1_SyncMarker(byte *cs, byte *cse);
byte *BTIC1_DecodeMarkerGeneric(byte *cs, byte *cse, int *rlen);
byte *BTIC1_DecodeMarkerFMT12(byte *cs, byte *cse, int *rlen, u32 *rfcc);
byte *BTIC1_DecodeMarkerAPP12(byte *cs, byte *cse, int *rlen, u32 *rfcc);
byte *BTIC1_DecodeMarkerFMT13(byte *cs, byte *cse, int *rlen, char **rtag);
byte *BTIC1_DecodeMarkerAPP13(byte *cs, byte *cse, int *rlen, char **rtag);
byte *BTIC1_DecodeImage(BGBBTJ_BTIC1_Context *ctx, byte *cs, byte *cse);
void BTIC1_DecodeCompLayerHeader(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
void BTIC1_DecodeCompLayerID(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
void BTIC1_DecodeDumpBytes(BGBBTJ_BTIC1_Context *ctx, byte *cs, byte *cse);
byte *BTIC1_DecodeLayer(BGBBTJ_BTIC1_Context *ctx, byte *cs, byte *cse);
void BTIC1_DecodeTagLayerHeader(BGBBTJ_BTIC1_Context *ctx, byte *cs, int len);
byte *BTIC1_DecodeImageContents(BGBBTJ_BTIC1_Context *ctx,byte *cs, byte *cse);
void BTIC1_DecodeImagePlainBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ibuf, int len);
void BTIC1_DecodeImageArithBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ibuf, int len);
void BTIC1_DecodeImageDeflateBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ibuf, int len);
void BTIC1_DecodeImageArithDeflateBuffer(BGBBTJ_BTIC1_Context *ctx, byte *ibuf, int len);
int BTIC1_DecodeContext(BGBBTJ_BTIC1_Context *ctx, byte *ibuf, int sz);
void BTIC1_InverseColorConvertImage(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *thdr, int pf);
bool BTIC1_CheckFormatEquiv(int fmt1, int fmt2);
void BTIC1_GetImageBuffer(BGBBTJ_BTIC1_Context *ctx, BGBBTJ_BTIC1_ImageHeader *img, byte *rgba, int xs, int ys, int pf);
BGBBTJ_API int BTIC1_GetLayerComponentCtx(BGBBTJ_BTIC1_Context *ctx, char *lname, byte *rgba, byte *norm, byte *spec, byte *luma, int *rxs, int *rys, int pf);
BGBBTJ_API int BTIC1_DecodeComponentCtx(BGBBTJ_BTIC1_Context *ctx,byte *buf, int sz, byte *rgba, byte *norm, byte *spec, byte *luma, int *xs, int *ys, int pf);
BGBBTJ_API int BTIC1_DecodeComponent(byte *buf, int sz, byte *rgba, byte *norm, byte *spec, byte *luma, int *rxs, int *rys, int pf);
//AHSRC:base/btlza_bitrange.c
void BGBBTJ_BTLZA_Lock();
void BGBBTJ_BTLZA_Unlock();
void BGBBTJ_BTLZA_Lock();
void BGBBTJ_BTLZA_Unlock();
void BTLZA_BitArith_Init();
BGBBTJ_API BGBBTJ_BTLZA_Context *BTLZA_AllocContext(void);
BGBBTJ_API void BTLZA_FreeContext(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitArith_InputByte(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitArith_OutputByte(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitArith_NormalizeOutput(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitArith_NormalizeInput(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitArith_FlushWBits(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitArith_OutputFixedBit(BGBBTJ_BTLZA_Context *ctx, int i);
int BTLZA_BitArith_InputFixedBit(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitArith_OutputBit(BGBBTJ_BTLZA_Context *ctx,int i, u32 w);
int BTLZA_BitArith_InputBit(BGBBTJ_BTLZA_Context *ctx, u32 w);
void BTLZA_BitArith_OutputModelBit(BGBBTJ_BTLZA_Context *ctx,int i, byte *mctx);
int BTLZA_BitArith_InputModelBit(BGBBTJ_BTLZA_Context *ctx, byte *mctx);
void BTLZA_BitArith_OutputFixedBits(BGBBTJ_BTLZA_Context *ctx,int v, int n);
int BTLZA_BitArith_InputFixedBits(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitArith_InputContextFixedBits(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitArith_InputContextFixedBitsLE(BGBBTJ_BTLZA_Context *ctx, int n);
void BTLZA_BitArith_OutputContextModelBits(BGBBTJ_BTLZA_Context *ctx,int v, int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_InputContextModelBits(BGBBTJ_BTLZA_Context *ctx,int n, btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_OutputExtraBits(BGBBTJ_BTLZA_Context *ctx,int v, int n, btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_OutputContextModelBitsLE(BGBBTJ_BTLZA_Context *ctx,int v, int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_InputContextModelBitsLE(BGBBTJ_BTLZA_Context *ctx,int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_InputExtraBits(BGBBTJ_BTLZA_Context *ctx,int n, btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_SetupEncode(BGBBTJ_BTLZA_Context *ctx, byte *out, int sz);
int BTLZA_BitArith_SetupDecode(BGBBTJ_BTLZA_Context *ctx, byte *in, int sz);
int BTLZA_BitArith_SetupBeginEncode(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitArith_SetupBeginDecode(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitArith_SetupEndDecode(BGBBTJ_BTLZA_Context *ctx);
int btlza_ctxindex(int ctx, int mask);
void BTLZA_BitArith_EncodeSymbol6(BGBBTJ_BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_EncodeSymbol8(BGBBTJ_BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_EncodeSymbol9(BGBBTJ_BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_EncodeSymbol8LE(BGBBTJ_BTLZA_Context *ctx, int v,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol6(BGBBTJ_BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol8(BGBBTJ_BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol9(BGBBTJ_BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
int BTLZA_BitArith_DecodeSymbol8LE(BGBBTJ_BTLZA_Context *ctx,btlza_prob *mdl, int ctxmask);
void BTLZA_BitArith_ResetContextWeights(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitArith_SetupContextBits(BGBBTJ_BTLZA_Context *ctx, int bits);
void BTLZA_BitArith_ResetRawContextWeights(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitArith_SetupRawContextBits(BGBBTJ_BTLZA_Context *ctx, int bits);
BGBBTJ_API int BTLZA_BitArith_EncodeDataCtx(BGBBTJ_BTLZA_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz, int flags);
BGBBTJ_API int BTLZA_BitArith_DecodeDataCtx(BGBBTJ_BTLZA_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BTLZA_BitArith_EncodeData(byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BTLZA_BitArith_DecodeData(byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BTLZA_BitArith_EncodeTestData(byte *ibuf, int isz, byte *obuf, int osz);
//AHSRC:base/btlza_bitdecode.c
int BTLZA_BitDec_TransposeByte(int v);
int BTLZA_BitDec_TransposeWord(int v);
int BTLZA_BitDec_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int BTLZA_BitDec_SetupStatic(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbol(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbol(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbolBasic(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbolBasic(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbolBasic2(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbolBasic2(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeSymbolReadBit(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistanceSymbolReadBit(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeDistance(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeCodeLengths(BGBBTJ_BTLZA_Context *ctx,byte *cl, int ncl);
int BTLZA_BitDec_DecodeHeader(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeHeaderBTLZH(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeStaticHeader2(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitDec_MemCpy(byte *dst, byte *src, int len);
int BTLZA_BitDec_DecodeRun(BGBBTJ_BTLZA_Context *ctx, int sym);
int BTLZA_BitDec_DecodeBlockData(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_AlignBitsEnd(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeHeaderBTArith(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeBlock(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_DecodeStream(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
int BTLZA_BitDec_DecodeStreamSz(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz, int *rosz, int flags);
//AHSRC:base/btlza_bitencode.c
int BTLZA_BitEnc_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void BTLZA_BitEnc_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int BTLZA_BitEnc_BuildLengths(int *stat, int nc, byte *cl, int ml);
int BTLZA_BitEnc_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void BTLZA_BitEnc_StatLZRun(BGBBTJ_BTLZA_Context *ctx,byte *cs, int *lstat, int *dstat);
void BTLZA_BitEnc_StatLZBuffer(BGBBTJ_BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n, int *lstat, int *dstat);
void BTLZA_BitEnc_StatLengths(BGBBTJ_BTLZA_Context *ctx,byte *cl, int nc, int *stat);
void BTLZA_BitEnc_EncodeSymbol(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_EncodeLengths(BGBBTJ_BTLZA_Context *ctx, byte *cl, int nc);
void BTLZA_BitEnc_EncodeLZRun(BGBBTJ_BTLZA_Context *ctx, byte *cs);
void BTLZA_BitEnc_EncodeLZBuffer(BGBBTJ_BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n);
int BTLZA_BitEnc_EncodeBlockStatic(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEnc_EncodeBlock(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEnc_EncodeBlockDynamic(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEnc_EncodeBlockBTLZH(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEnc_EncodeBeginArithmetic(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitEnc_EncodeStream_I(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
BGBBTJ_API int BTLZA_BitEnc_EncodeStream32Lvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
BGBBTJ_API int BTLZA_BitEnc_EncodeStream64Lvl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEnc_EncodeStreamXLvl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEnc_EncodeStream32LvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEnc_EncodeStream64LvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEnc_EncodeStreamXLvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEnc_EncodeStreamXLvlZlc(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEnc_EncodeStreamXLvlZlTest(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
//AHSRC:base/btlza_bitstream.c
void BTLZA_BitEnc_WriteByteBasic(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_WriteByteEscape(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_BitDec_WriteByteArithLE(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_BitDec_WriteByteArithBE(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_WriteByte(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_BitEnc_WriteBit(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write2Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write3Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write4Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write5Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write6Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write7Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write2Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write3Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write4Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write5Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write6Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_Write7Bits(BGBBTJ_BTLZA_Context *ctx, int i);
void BTLZA_BitEnc_WriteNBits(BGBBTJ_BTLZA_Context *ctx, int i, int n);
void BTLZA_BitEnc_FlushBits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteBasic(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteEscape(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteArithLE(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadByteArithBE(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadBitBasic(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read2Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read3Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read4Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read5Bits(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitDec_ReadAdjust(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadNBitsBasic(BGBBTJ_BTLZA_Context *ctx, int n);
void BTLZA_BitDec_SkipNBitsBasic(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadByte(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadBit(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadNBits(BGBBTJ_BTLZA_Context *ctx, int n);
void BTLZA_BitDec_SkipNBits(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitDec_Read2Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read3Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read4Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read5Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read6Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_Read7Bits(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadExtraNBits(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadRawNBits(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadExtraNBitsBasic(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitArith_ReadExtraNBitsModel(BGBBTJ_BTLZA_Context *ctx, int n);
int BTLZA_BitDec_ReadLiteralBit(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadDistanceBit(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadRawBit(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_PeekWord(BGBBTJ_BTLZA_Context *ctx);
void BTLZA_BitDec_AlignByte(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadAlignedByte(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_BitDec_ReadAlignedWord(BGBBTJ_BTLZA_Context *ctx);
//AHSRC:base/btlza_decode.c
int BTLZA_Decode_DecodeDistance(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_Decode_DecodeRun(BGBBTJ_BTLZA_Context *ctx, int sym);
int BTLZA_Decode_DecodeSymbol(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_Decode_DecodeBlockData(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_Decode_DecodeBlock(BGBBTJ_BTLZA_Context *ctx);
BGBBTJ_API int BTLZA_Decode_DecodeStreamSz(byte *ibuf, byte *obuf, int isz,int osz, int *rosz, int flags);
BGBBTJ_API int BTLZA_DecodeStreamSzZl(byte *ibuf, byte *obuf, int isz,int osz, int *rosz, int flags);
BGBBTJ_API int BTLZA_DecodeStreamZl(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:base/btlza_encode.c
void BTLZA_Encode_UpdateWindowByte(BGBBTJ_BTLZA_Context *ctx,byte *s);
void BTLZA_Encode_UpdateWindowString(BGBBTJ_BTLZA_Context *ctx,byte *s, int l);
int BTLZA_Encode_LookupString(BGBBTJ_BTLZA_Context *ctx,byte *cs, byte *ce, int *rl, int *rd);
int BTLZA_Encode_LZCompressBuffer(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, byte *obuf, byte *mbuf, int sz);
int BTLZA_Encode_LZCompressBufferRLE(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, byte *obuf, byte *mbuf, int sz);
void BTLZA_Encode_StatLZRun(BGBBTJ_BTLZA_Context *ctx,byte *cs, int *lstat, int *dstat);
void BTLZA_Encode_StatLZBuffer(BGBBTJ_BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n, int *lstat, int *dstat);
void BTLZA_Encode_EncodeSymbol(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_Encode_EncodeDistSymbol(BGBBTJ_BTLZA_Context *ctx, int v);
void BTLZA_Encode_EncodeLZRun(BGBBTJ_BTLZA_Context *ctx, byte *cs);
void BTLZA_Encode_EncodeLZBuffer(BGBBTJ_BTLZA_Context *ctx,byte *tbuf, byte *mbuf, int n);
int BTLZA_Encode_EncodeBlock(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz);
int BTLZA_Encode_CheckAllocWindow(BGBBTJ_BTLZA_Context *ctx);
int BTLZA_Encode_EncodeStream_I(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
int BTLZA_Encode_EncodeStreamLvl(byte *ibuf, byte *obuf,int isz, int osz, int l);
int BTLZA_Encode_EncodeStreamLvlTest(byte *ibuf, byte *obuf,int isz, int osz, int lvl);
//AHSRC:base/btlza_fastdfl.c
void BTLZA_BitEncF_EncodeLZLength(BGBBTJ_BTLZA_Context *ctx, int l);
void BTLZA_BitEncF_EncodeLZDist(BGBBTJ_BTLZA_Context *ctx, int d);
void BTLZA_BitEncF_EncodeLZSpecial(BGBBTJ_BTLZA_Context *ctx, int d);
void BTLZA_BitEncF_EncodeLZRun(BGBBTJ_BTLZA_Context *ctx, int l, int d);
int BTLZA_BitEncF_LZEncodeBuffer(BGBBTJ_BTLZA_Context *ctx, byte *ibuf, int isz);
int BTLZA_BitEncF_EncodeBlockDynamic(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEncF_EncodeBlockBTLZH(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEncF_EncodeBlock(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, int isz, int last);
int BTLZA_BitEncF_EncodeStream_I(BGBBTJ_BTLZA_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz);
BGBBTJ_API int BTLZA_BitEncF_EncodeStream32Lvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
BGBBTJ_API int BTLZA_BitEncF_EncodeStream32LvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEncF_EncodeStreamXLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
BGBBTJ_API int BTLZA_BitEncF_EncodeStreamXLvlZl(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
BGBBTJ_API int BTLZA_BitEncF_EncodeStreamXLvlZlc(byte *ibuf, byte *obuf, int isz, int osz, int lvl);
//AHSRC:base/btj_bitrange.c
void BGBBTJ_BitArith_Init();
byte *BGBBTJ_EmitVLI(byte *ct, int val);
byte *BGBBTJ_EmitSVLI(byte *ct, int val);
byte *BGBBTJ_DecodeVLI(byte *cs, int *rval);
byte *BGBBTJ_DecodeSVLI(byte *cs, int *rval);
int BGBBTJ_BitArith_InputByte(BGBBTJ_ArithContext *ctx);
void BGBBTJ_BitArith_OutputByte(BGBBTJ_ArithContext *ctx, int i);
void BGBBTJ_BitArith_OutputFixedBit(BGBBTJ_ArithContext *ctx, int i);
int BGBBTJ_BitArith_InputFixedBit(BGBBTJ_ArithContext *ctx);
void BGBBTJ_BitArith_OutputBit(BGBBTJ_ArithContext *ctx,int i, u32 w);
int BGBBTJ_BitArith_InputBit(BGBBTJ_ArithContext *ctx, u32 w);
int BGBBTJ_BitArith_InputModelBit(BGBBTJ_ArithContext *ctx,byte *model, int wctx);
void BGBBTJ_BitArith_OutputContextBit(BGBBTJ_ArithContext *ctx,int i, byte *mctx);
int BGBBTJ_BitArith_InputContextBit(BGBBTJ_ArithContext *ctx, byte *mctx);
void BGBBTJ_BitArith_FlushWBits(BGBBTJ_ArithContext *ctx);
int BGBBTJ_BitArith_SetupEncode(BGBBTJ_ArithContext *ctx, byte *out, int sz);
int BGBBTJ_BitArith_SetupDecode(BGBBTJ_ArithContext *ctx, byte *in, int sz);
int BGBBTJ_BitArith_Predict(BGBBTJ_ArithContext *ctx, byte *model, int wctx);
void BGBBTJ_BitArith_Update(BGBBTJ_ArithContext *ctx, byte *model, int wctx, int v);
void BGBBTJ_BitArith_EncodeSymbol(BGBBTJ_ArithContext *ctx, int v);
void BGBBTJ_BitArith_EncodeSymbolLE(BGBBTJ_ArithContext *ctx, int v);
int BGBBTJ_BitArith_DecodeSymbol(BGBBTJ_ArithContext *ctx);
int BGBBTJ_BitArith_DecodeSymbolLE(BGBBTJ_ArithContext *ctx);
void BGBBTJ_BitArith_SetupContextBits(BGBBTJ_ArithContext *ctx, int bits);
BGBBTJ_API int BGBBTJ_BitArith_EncodeDataCtx(BGBBTJ_ArithContext *ctx, byte *ibuf, int isz, byte *obuf, int osz, int flags);
BGBBTJ_API int BGBBTJ_BitArith_DecodeDataCtx(BGBBTJ_ArithContext *ctx, byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_BitArith_EncodeData(byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_BitArith_DecodeData(byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_BitArith_EncodeTestData(byte *ibuf, int isz, byte *obuf, int osz);
//AHSRC:base/btj_bitrange2.c
void BGBBTJ_BitArith2_Init();
byte *BGBBTJ_EmitVLI(byte *ct, int val);
byte *BGBBTJ_EmitSVLI(byte *ct, int val);
byte *BGBBTJ_DecodeVLI(byte *cs, int *rval);
byte *BGBBTJ_DecodeSVLI(byte *cs, int *rval);
int BGBBTJ_BitArith2_InputByte(BGBBTJ_ArithContext *ctx);
void BGBBTJ_BitArith2_OutputByte(BGBBTJ_ArithContext *ctx, int i);
void BGBBTJ_BitArith2_OutputFixedBit(BGBBTJ_ArithContext *ctx, int i);
int BGBBTJ_BitArith2_InputFixedBit(BGBBTJ_ArithContext *ctx);
void BGBBTJ_BitArith2_OutputBit(BGBBTJ_ArithContext *ctx,int i, u32 w);
int BGBBTJ_BitArith2_InputBit(BGBBTJ_ArithContext *ctx, u32 w);
int BGBBTJ_BitArith2_InputModelBit(BGBBTJ_ArithContext *ctx,u16 *model, int wctx);
void BGBBTJ_BitArith2_OutputContextBit(BGBBTJ_ArithContext *ctx,int i, u16 *mctx);
int BGBBTJ_BitArith2_InputContextBit(BGBBTJ_ArithContext *ctx, u16 *mctx);
int BGBBTJ_BitArith2_CtxIndex(int ctx, int mask);
void BGBBTJ_BitArith2_FlushWBits(BGBBTJ_ArithContext *ctx);
int BGBBTJ_BitArith2_SetupEncode(BGBBTJ_ArithContext *ctx, byte *out, int sz);
int BGBBTJ_BitArith2_SetupDecode(BGBBTJ_ArithContext *ctx, byte *in, int sz);
int BGBBTJ_BitArith2_Predict(BGBBTJ_ArithContext *ctx, u16 *model, int wctx);
void BGBBTJ_BitArith2_Update(BGBBTJ_ArithContext *ctx, u16 *model, int wctx, int v);
void BGBBTJ_BitArith2_EncodeSymbol(BGBBTJ_ArithContext *ctx, int v);
void BGBBTJ_BitArith2_EncodeSymbolLE(BGBBTJ_ArithContext *ctx, int v);
int BGBBTJ_BitArith2_DecodeSymbol(BGBBTJ_ArithContext *ctx);
int BGBBTJ_BitArith2_DecodeSymbolLE(BGBBTJ_ArithContext *ctx);
void BGBBTJ_BitArith2_SetupContextBits(BGBBTJ_ArithContext *ctx, int bits);
BGBBTJ_API int BGBBTJ_BitArith2_EncodeDataCtx(BGBBTJ_ArithContext *ctx, byte *ibuf, int isz, byte *obuf, int osz, int flags);
BGBBTJ_API int BGBBTJ_BitArith2_DecodeDataCtx(BGBBTJ_ArithContext *ctx, byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_BitArith2_EncodeData(byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_BitArith2_DecodeData(byte *ibuf, int isz, byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_BitArith2_EncodeTestData(byte *ibuf, int isz, byte *obuf, int osz);
//AHSRC:base/btj_common.c
BGBBTJ_API BGBBTJ_JPG_Context *BGBBTJ_JPG_AllocContext();
BGBBTJ_API void BGBBTJ_JPG_FreeContext(BGBBTJ_JPG_Context *ctx);
BGBBTJ_API void BGBBTJ_JPG_SetContextAlphaColor(BGBBTJ_JPG_Context *ctx,int cr, int cg, int cb, int ca);
void BGBBTJ_JPG_Init();
void BGBBTJ_JPG_SetupQuantTabDivFP(BGBBTJ_JPG_Context *ctx, int qid);
BGBBTJ_API byte *BGBBTJ_JPG_Load(VFILE *fd, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_Store(VFILE *fd, byte *ibuf, int xs, int ys, int qf);
//AHSRC:base/btj_dct.c
void BGBBTJ_JPG_TransDCT_Horiz(short *iblk, int *oblk, int dcbias);
void BGBBTJ_JPG_TransDCT_Vert(int *iblk, int *oblk);
void BGBBTJ_JPG_TransDCT(short *iblk, short *oblk, int dcbias);
void BGBBTJ_JPG_TransIDCT_Horiz(short *iblk, int *oblk);
void BGBBTJ_JPG_TransIDCT_Horiz(short *iblk, int *oblk);
void BGBBTJ_JPG_TransIDCT_Vert(int *iblk, int *oblk);
void BGBBTJ_JPG_TransIDCT_Vert2(int *iblk, short *oblk, int dcbias);
int BGBBTJ_JPG_DetectFlatIDCT(short *iblk);
void BGBBTJ_JPG_TransIDCT(short *iblk, short *oblk,int dcbias, int rtmode);
void BGBBTJ_JPG_TransIDCT16(short *iblk, short *oblk, int dcbias);
void BGBBTJ_JPG_TransIDCT_Horiz(short *iblk, int *oblk);
void BGBBTJ_JPG_TransIDCT_Vert(int *iblk, int *oblk);
void BGBBTJ_JPG_TransIDCT_Vert2(int *iblk, short *oblk, int dcbias);
void BGBBTJ_JPG_TransIDCT(short *iblk, short *oblk,int dcbias, int rtmode);
void BGBBTJ_JPG_TransRDCT_Horiz(short *iblk, int *oblk, int dcbias);
void BGBBTJ_JPG_TransRDCT_Vert(int *iblk, int *oblk);
void BGBBTJ_JPG_TransRDCT(short *iblk, short *oblk, int dcbias);
void BGBBTJ_JPG_TransIRDCT_Horiz(int *iblk, int *oblk);
void BGBBTJ_JPG_TransIRDCT_Vert(short *iblk, int *oblk);
void BGBBTJ_JPG_TransIRDCT(short *iblk, short *oblk,int dcbias, int rtmode);
void BGBBTJ_JPG_TransRDCT_Ref(int iblk0, int iblk1, int iblk2, int iblk3, int iblk4, int iblk5, int iblk6, int iblk7, int *oblk0, int *oblk1, int *oblk2, int *oblk3, int *oblk4, int *oblk5, int *oblk6, int *oblk7);
void BGBBTJ_JPG_TransIRDCT_Ref(int iblk0, int iblk1, int iblk2, int iblk3, int iblk4, int iblk5, int iblk6, int iblk7, int *oblk0, int *oblk1, int *oblk2, int *oblk3, int *oblk4, int *oblk5, int *oblk6, int *oblk7);
void BGBBTJ_JPG_TransRDCT(short *iblk, short *oblk, int dcbias);
void BGBBTJ_JPG_TransIRDCT(short *iblk, short *oblk,int dcbias, int rtmode);
void BGBBTJ_JPG_TransHAD_Horiz(byte *iblk, int *oblk);
void BGBBTJ_JPG_TransHAD_Vert(int *iblk, int *oblk);
void BGBBTJ_JPG_TransHAD(byte *iblk, short *oblk);
//AHSRC:base/btj_dct2.c
void BGBBTJ_JPG_TransDCT_Stride4(int *iblk, int *oblk,int istride, int ostride);
void BGBBTJ_JPG_TransDCT4Stride(int *iblk, int *oblk,int xstride, int ystride);
void BGBBTJ_JPG_TransIDCT_Stride4(int *iblk, int *oblk,int istride, int ostride);
void BGBBTJ_JPG_TransIDCT4Stride(int *iblk, int *oblk,int xstride, int ystride);
void BGBBTJ_JPG_TransDCT_Sride8(int *iblk, int *oblk,int istride, int ostride);
void BGBBTJ_JPG_TransDCT8Stride(int *iblk, int *oblk,int xstride, int ystride);
void BGBBTJ_JPG_TransIDCT_Sride8(int *iblk, int *oblk,int istride, int ostride);
void BGBBTJ_JPG_TransIDCT_Sride8(int *iblk, int *oblk,int istride, int ostride);
void BGBBTJ_JPG_TransIDCT8Stride(int *iblk, int *oblk,int xstride, int ystride);
void BGBBTJ_JPG_TransDCT_Sride16(int *iblk, int *oblk,int istride, int ostride);
void BGBBTJ_JPG_TransDCT16Stride(int *iblk, int *oblk,int xstride, int ystride);
void BGBBTJ_JPG_TransIDCT_Sride16(int *iblk, int *oblk,int istride, int ostride);
void BGBBTJ_JPG_TransIDCT16Stride(int *iblk, int *oblk,int xstride, int ystride);
//AHSRC:base/btj_decode.c
int BGBBTJ_JPG_MarkerSOS(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerSOF0(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerDQT(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerDHT(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerAPP0(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerAPP9(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerAPP11(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerAPP12(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerAPP14(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_MarkerAPPN(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_JPG_GetComponentPixel(BGBBTJ_JPG_Context *ctx, int cn, int x, int y);
int BGBBTJ_JPG_GetComponentPixel(BGBBTJ_JPG_Context *ctx, int cn, int x, int y);
int BGBBTJ_JPG_GetComponentPixelS1(BGBBTJ_JPG_Context *ctx, int cn, int x, int y);
int BGBBTJ_JPG_GetComponentPixelS2(BGBBTJ_JPG_Context *ctx, int cn, int x, int y);
int BGBBTJ_JPG_GetComponentPixelS122(BGBBTJ_JPG_Context *ctx, int x, int y,int *ry, int *ru, int *rv);
int BGBBTJ_JPG_GetComponentPixelS111(BGBBTJ_JPG_Context *ctx, int x, int y,int *ry, int *ru, int *rv);
int BGBBTJ_JPG_GetComponentPixelS420(BGBBTJ_JPG_Context *ctx, int x, int y,int *ry0, int *ry1, int *ry2, int *ry3, int *ru, int *rv);
int BGBBTJ_JPG_GetComponentPixelAlpha(BGBBTJ_JPG_Context *ctx, int cn, int x, int y);
int BGBBTJ_JPG_DecodeColorTransformYCbCr420(BGBBTJ_JPG_Context *ctx, byte *obuf);
BGBBTJ_API int BGBBTJ_JPG_DummyDecodeCtx(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
int BGBBTJ_JPG_DecodeColorTransform_YCbCr420_DXT1(BGBBTJ_JPG_Context *ctx, byte *obuf, int xs, int ys, int stride);
int BGBBTJ_JPG_DecodeColorTransform_YCbCr420_DXT1A(BGBBTJ_JPG_Context *ctx, byte *obuf, int xs, int ys, int stride);
int BGBBTJ_JPG_DecodeColorTransform_YBC4(BGBBTJ_JPG_Context *ctx, byte *obuf, int xs, int ys, int stride);
int BGBBTJ_JPG_DecodeColorTransform_YCbCr420_BC7(BGBBTJ_JPG_Context *ctx, byte *obuf, int xs, int ys, int stride, int vfl);
void BGBBTJ_JPG_DecodeColorTransform_YFast(BGBBTJ_JPG_Context *ctx, byte *obuf, int xs, int ys);
BGBBTJ_API void BGBBTJ_JPG_DecodeCtxI_ColorTransform(BGBBTJ_JPG_Context *ctx, byte *obuf, int xs, int ys, int clrs);
BGBBTJ_API byte *BGBBTJ_JPG_DecodeCtx(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
BGBBTJ_API byte *BGBBTJ_JPG_DecodeCtxClrs(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int clrs, int *xs, int *ys);
byte *BGBBTJ_JPG_DecodeCtxI(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int clrs, int *xs, int *ys);
BGBBTJ_API void BGBBTJ_JPG_Free(byte *buf);
//AHSRC:base/btj_encode.c
void BGBBTJ_Huff_WriteBit(BGBBTJ_JPG_Context *ctx, int i);
void BGBBTJ_Huff_WriteNBits(BGBBTJ_JPG_Context *ctx, int v, int n);
void BGBBTJ_Huff_FlushBits(BGBBTJ_JPG_Context *ctx);
void BGBBTJ_Huff_WriteString(BGBBTJ_JPG_Context *ctx, char *str);
int BGBBTJ_Huff_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void BGBBTJ_Huff_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int BGBBTJ_Huff_BuildLengths(int *stat, int nc, byte *cl, int ml);
int BGBBTJ_Huff_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void BGBBTJ_Huff_EncodeSymbol(BGBBTJ_JPG_Context *ctx, int tab, int v);
void BGBBTJ_Huff_EncodeVal(BGBBTJ_JPG_Context *ctx, int tab, int z, int v);
void BGBBTJ_Huff_StatVal(int *stat, int z, int v);
int BGBBTJ_Huff_EncodeBlock(BGBBTJ_JPG_Context *ctx,short *buf, int dctab, int actab);
int BGBBTJ_Huff_StatBlock(short *buf, int *dcstat, int *acstat);
int BGBBTJ_JPG_GetImgBlk(char *blk, int xo, int yo, byte *img, int xs, int ys);
int BGBBTJ_JPG_GetImgBlk16(short *blk, int xo, int yo, short *img, int xs, int ys);
int BGBBTJ_JPG_FilterImageDCT(short *ibuf, short *obuf,int xs, int ys, int dcbias);
int BGBBTJ_JPG_FilterImageRDCT(short *ibuf, short *obuf,int xs, int ys, int dcbias);
void BGBBTJ_JPG_EmitDQT(BGBBTJ_JPG_Context *ctx, int n);
void BGBBTJ_JPG_EmitSOF(BGBBTJ_JPG_Context *ctx, int xs, int ys);
void BGBBTJ_JPG_EmitSOS(BGBBTJ_JPG_Context *ctx);
void BGBBTJ_JPG_EmitDHT(BGBBTJ_JPG_Context *ctx, int tab);
void BGBBTJ_JPG_MakeQuantTabFastIJG_Y(short *inv, int cnt, byte *tab, float qf);
void BGBBTJ_JPG_MakeQuantTabFastIJG_UV(short *inv, int cnt, byte *tab, float qf);
void BGBBTJ_JPG_MakeQuantTabInput(short *inv, int cnt, byte *tab, float q);
void BGBBTJ_JPG_MakeQuantTabInputY(short *inv, int cnt, byte *tab, float q);
void BGBBTJ_JPG_MakeQuantTabInputUV(short *inv, int cnt, byte *tab, float q);
void BGBBTJ_JPG_MakeQuantTabInput_AA(short *in, int cnt, byte *tab, float q);
void BGBBTJ_JPG_MakeQuantTabInputFast(short *in, int cnt, byte *tab, float q);
void BGBBTJ_JPG_EmitMarkerBCST(BGBBTJ_JPG_Context *ctx);
void BGBBTJ_JPG_EmitMarkerInlineAlpha(BGBBTJ_JPG_Context *ctx);
BGBBTJ_API int BGBBTJ_JPG_EncodeCtx_Prepare(BGBBTJ_JPG_Context *ctx, int xs, int ys, int qfl, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeCtx_ColorTransform(BGBBTJ_JPG_Context *ctx, byte *ibuf, int xs, int ys, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeCtx_ColorTransform16(BGBBTJ_JPG_Context *ctx, short *ibuf, int xs, int ys, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeCtx_DownSample(BGBBTJ_JPG_Context *ctx);
BGBBTJ_API int BGBBTJ_JPG_EncodeCtx(BGBBTJ_JPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qfl, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeCtxSS(BGBBTJ_JPG_Context *ctx, short *ibuf, byte *obuf, int xs, int ys, int qfl, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeCtx_Inner(BGBBTJ_JPG_Context *ctx, byte *obuf, int xs, int ys, int qfl);
BGBBTJ_API BGBBTJ_JPG_Context *BGBBTJ_JPG_AllocContext();
BGBBTJ_API void BGBBTJ_JPG_FreeContext(BGBBTJ_JPG_Context *ctx);
BGBBTJ_API int BGBBTJ_JPG_Encode(byte *ibuf, byte *obuf, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_JPG_FlushEncodeFast(BGBBTJ_JPG_Context *ctx);
BGBBTJ_API void BGBBTJ_JPG_SetContextAlphaColor(BGBBTJ_JPG_Context *ctx,int cr, int cg, int cb, int ca);
void BGBBTJ_JPG_ConvertImageYUV(BGBBTJ_JPG_Context *ctx,byte *ibuf, int xs, int ys, int pf, int xs2, int ys2, int xs3, int ys3);
BGBBTJ_API int BGBBTJ_JPG_EncodeFastCtx(BGBBTJ_JPG_Context *ctx,byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeFast(byte *ibuf, byte *obuf, int xs, int ys, int qf);
byte *BGBBTJ_JPG_EmitComponentLayer(BGBBTJ_JPG_Context *ctx,byte *ct, char *name);
byte *BGBBTJ_JPG_EmitMarkerJFIF(BGBBTJ_JPG_Context *ctx, byte *ct);
BGBBTJ_API int BGBBTJ_JPG_EscapeEncodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_JPG_EscapeEncodeSingleBuffer(byte *buf, int sz);
BGBBTJ_API int BGBBTJ_JPG_EscapeDecodeBuffer(byte *ibuf, int isz,byte *obuf, int osz);
BGBBTJ_API int BGBBTJ_JPG_EscapeDecodeSingleBuffer(byte *buf, int sz);
BGBBTJ_API int BGBBTJ_JPG_EncodeLDatCtx(BGBBTJ_JPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeBaseCtx(BGBBTJ_JPG_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
BGBBTJ_API int BGBBTJ_JPG_EncodeComponentCtx(BGBBTJ_JPG_Context *ctx, byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
BGBBTJ_API int BGBBTJ_JPG_EncodeComponentCtxI(BGBBTJ_JPG_Context *ctx, byte *rgba, byte *norm, byte *spec, byte *luma, byte *lebe, byte *obuf, int xs, int ys, int qf);
BGBBTJ_API int BGBBTJ_JPG_EncodeComponent(byte *rgba, byte *norm, byte *spec, byte *luma, byte *obuf, int xs, int ys, int qf);
float pdjpg_ssqr(float f);
float pdjpg_ssqrt(float f);
int BGBBTJ_JPG_CalcComponentValueExponent(float val);
void BGBBTJ_JPG_EncodeFloatPixel(float *ipix, byte *opix, byte *oexp);
BGBBTJ_API int BGBBTJ_JPG_EncodeFloatComponentCtx(BGBBTJ_JPG_Context *ctx,float *rgba, float *norm, float *spec, float *luma, byte *obuf, int xs, int ys, int qf);
//AHSRC:base/btj_huff.c
int BGBBTJ_Huff_NextByte(BGBBTJ_JPG_Context *ctx);
int BGBBTJ_Huff_InitStream(BGBBTJ_JPG_Context *ctx, byte *buf);
int BGBBTJ_Huff_ReadBit(BGBBTJ_JPG_Context *ctx);
int BGBBTJ_Huff_ReadNBits(BGBBTJ_JPG_Context *ctx, int n);
void BGBBTJ_Huff_SkipNBits(BGBBTJ_JPG_Context *ctx, int n);
int BGBBTJ_Huff_PeekWord(BGBBTJ_JPG_Context *ctx);
int BGBBTJ_Huff_DecodeSymbol(BGBBTJ_JPG_Context *ctx, int tab);
int BGBBTJ_Huff_DecodeSymbol(BGBBTJ_JPG_Context *ctx, int tab);
int BGBBTJ_Huff_DecodeDiffDC(BGBBTJ_JPG_Context *ctx, int tab);
int BGBBTJ_Huff_DecodeBlock(BGBBTJ_JPG_Context *ctx,short *buf, int dctab, int actab, int ni, int nn);
int BGBBTJ_Huff_QuantCheckRound(BGBBTJ_JPG_Context *ctx, int a, int b, int la);
void BGBBTJ_Huff_QuantBlock(BGBBTJ_JPG_Context *ctx, short *ibuf, short *obuf, int qid);
void BGBBTJ_Huff_DequantBlock(BGBBTJ_JPG_Context *ctx, short *ibuf, short *obuf, int qid, int rtmode);
void BGBBTJ_Huff_DequantBlock_Flat(BGBBTJ_JPG_Context *ctx, short *ibuf, short *obuf, int qid);
//AHSRC:base/btj_declayer.c
BGBBTJ_API byte *BGBBTJ_JPG_DecodeScanForComponentLayer(byte *buf, int sz, char *name);
BGBBTJ_API byte *BGBBTJ_JPG_DecodeScanForTagLayer(byte *buf, int sz, char *name);
BGBBTJ_API byte *BGBBTJ_JPG_DecodeScanNextTagLayer(byte *buf, int sz, char **rname);
BGBBTJ_API byte *BGBBTJ_JPG_Decode(byte *buf, int sz, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeBufferClrs(byte *ibuf, int isz, byte *obuf, int clrs, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeBufferClrsCtx(BGBBTJ_JPG_Context *ctx, byte *ibuf, int isz, byte *obuf, int clrs, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeComponentType(byte *buf, int sz);
BGBBTJ_API byte *BGBBTJ_JPG_DecodeLDatCtx(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
BGBBTJ_API byte *BGBBTJ_JPG_DecodeLDatCtxClrs(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int clrs, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DummyDecodeLDatCtx(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeComponentCtx(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, byte *rgba, byte *norm, byte *spec, byte *luma, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeComponentCtxClrs(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int clrs, byte *rgba, byte *norm, byte *spec, byte *luma, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeFloatComponentCtx(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, float *rgba, float *norm, float *spec, float *luma, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_ExtractComponentCtx(BGBBTJ_JPG_Context *ctx,byte *rgba, byte *norm, byte *spec, byte *luma, byte *lebe);
int BGBBTJ_JPG_DecodeComponentCtxI_DXT5(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int clrs, byte *rgba, byte *norm, byte *spec, byte *luma, byte *lebe, int *xs, int *ys);
int BGBBTJ_JPG_DecodeComponentCtxI_BC7(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int clrs, byte *rgba, byte *norm, byte *spec, byte *luma, byte *lebe, int *xs, int *ys);
int BGBBTJ_JPG_DecodeComponentCtxI(BGBBTJ_JPG_Context *ctx,byte *buf, int sz, int clrs, byte *rgba, byte *norm, byte *spec, byte *luma, byte *lebe, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeComponent(byte *buf, int sz,byte *rgba, byte *norm, byte *spec, byte *luma, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DecodeComponentClrs(byte *buf, int sz, int clrs, byte *rgba, byte *norm, byte *spec, byte *luma, int *xs, int *ys);
BGBBTJ_API int BGBBTJ_JPG_DummyDecodeLayerInfo(byte *buf, int sz,BGBBTJ_JPG_LayerInfo *linf);
//AHSRC:base/btj_encfast.c
void BTJ_JFE_TransDCT_Horiz(short *iblk, int *oblk);
void BTJ_JFE_TransDCT_Vert2(int *iblk, short *oblk);
void BTJ_JFE_TransDCT(short *iblk, short *oblk);
void BTJ_JFEH_QuantBlock(BGBBTJ_JFE_Context *ctx,short *ibuf, short *obuf, int qid);
void BTJ_JFEH_SetupQuantTabDivFP(BGBBTJ_JFE_Context *ctx, int qid);
void BTJ_JFEH_WriteBit(BGBBTJ_JFE_Context *ctx, int i);
void BTJ_JFEH_WriteNBits(BGBBTJ_JFE_Context *ctx, int i, int n);
void BTJ_JFEH_FlushBits(BGBBTJ_JFE_Context *ctx);
void BTJ_JFEH_EncodeSymbol(BGBBTJ_JFE_Context *ctx, int tab, int v);
void BTJ_JFEH_EncodeVal(BGBBTJ_JFE_Context *ctx, int tab, int z, int v);
void BTJ_JFEH_EncodeBlock(BGBBTJ_JFE_Context *ctx,short *buf, int dctab, int actab);
void BTJ_JFE_GetImgBlk2Y_RGB(short *blk, int xo, int yo,byte *img, int xs, int ys, int xs2, int ys2, int ssz);
void BTJ_JFE_GetImgBlk2Y_BGR(short *blk, int xo, int yo,byte *img, int xs, int ys, int xs2, int ys2, int ssz);
void BTJ_JFE_GetImgBlk2UV_RGB(short *ublk, short *vblk, int xo, int yo, byte *img, int xs, int ys, int xs2, int ys2, int ssz);
void BTJ_JFE_GetImgBlk2UV_BGR(short *ublk, short *vblk, int xo, int yo, byte *img, int xs, int ys, int xs2, int ys2, int ssz);
void BTJ_JFE_FilterImageDCT2(byte *ibuf,short *ybuf, short *ubuf, short *vbuf, int xs, int ys, int qf, int pf);
void BTJ_JFE_EmitDQT(BGBBTJ_JFE_Context *ctx, int n);
void BTJ_JFE_EmitSOF(BGBBTJ_JFE_Context *ctx, int xs, int ys);
void BTJ_JFE_EmitSOS(BGBBTJ_JFE_Context *ctx);
void BTJ_JFE_EmitDHT(BGBBTJ_JFE_Context *ctx, int tab);
void BTJ_JFE_EmitDHT2(BGBBTJ_JFE_Context *ctx);
void BTJ_JFE_MakeQuantTabFastIJG_Y(byte *tab, float qf);
void BTJ_JFE_MakeQuantTabFastIJG_UV(byte *tab, float qf);
BGBBTJ_API BGBBTJ_JFE_Context *BTJ_JFE_AllocContext(void);
BGBBTJ_API void BTJ_JFE_FreeContext(BGBBTJ_JFE_Context *ctx);
BGBBTJ_API void BTJ_JFE_FlushEncodeFast(BGBBTJ_JFE_Context *ctx);
BGBBTJ_API int BTJ_JFE_EncodeFast(byte *ibuf, byte *obuf,int xs, int ys, int qf, int pf);
BGBBTJ_API int BTJ_JFE_EncodeFast2(byte *ibuf, byte *obuf,int xs, int ys, int qf, int pf);
BGBBTJ_API int BTJ_JFE_EncodeFastCtx(BGBBTJ_JFE_Context *ctx, byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
//AHSRC:base/rpza_decode.c
void BGBBTJ_RPZA_Init();
BGBBTJ_API int BGBBTJ_RPZA_DecodeBlocksDXTn(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, int xs, int ys, int stride);
BGBBTJ_API int BGBBTJ_RPZA_DecodeBlocksBC4(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, int xs, int ys, int stride);
BGBBTJ_API int BGBBTJ_RPZA_DecodeBlocksDXT1(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, int xs, int ys);
BGBBTJ_API int BGBBTJ_RPZA_DecodeBlocksDXT5(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, int xs, int ys);
int BGBBTJ_RPZA_DecompressFrame(BGBBTJ_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
BGBBTJ_API int BGBBTJ_RPZA_DecodeFrameImage(BGBBTJ_BTIC1C_Context *ctx,void *src, void *dst, int ssz, int dsz, int xs, int ys, int clrs);
BGBBTJ_API BGBBTJ_BTIC1C_Context *BGBBTJ_RPZA_AllocContext();
int rpza_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
BGBBTJ_VidCodecCTX *rpza_begin_decompress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_CodecRPZA_Init();
//AHSRC:base/rpza_encode.c
BGBBTJ_API int BGBBTJ_RPZA_EncodeBlocksDXT1_LookupRun(byte *csc, byte *css, byte *cse, int *rlen, int *rdist, int fl);
BGBBTJ_API int BGBBTJ_RPZA_EncodeBlocksDXT1(byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_RPZA_EncodeBlocksDXT5(byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_RPZA_EncodeBlocksDXTn(byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl, int stride);
BGBBTJ_API int BGBBTJ_RPZA_EncodeBlocksBC4(byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl, int stride);
BGBBTJ_API int BGBBTJ_RPZA_EncodeImageFast(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_RPZA_EncodeImage(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_RPZA_EncodeImage2(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *hdr, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
byte *BGBBTJ_RPZA_EmitCompLayerHeader(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *img, byte *cts, byte *cte);
byte *BGBBTJ_RPZA_EmitTagLayerHeader(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_LayerInfo *img, byte *cts, byte *cte);
BGBBTJ_API byte *BGBBTJ_RPZA_EmitLayerImage(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *img, byte *ctt, byte *cte, int qfl);
BGBBTJ_API byte *BGBBTJ_RPZA_EmitTagLayer(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_LayerInfo *layer, byte *ctt, byte *cte, int qfl);
//AHSRC:base/rpza_quant.c
BGBBTJ_API int BGBBTJ_RPZAQ_DecodeBlock(byte *iblk, byte *orgba);
BGBBTJ_API int BGBBTJ_RPZAQ_CalcColorRMSE(byte *rgb0, byte *rgb1);
BGBBTJ_API double BGBBTJ_RPZAQ_CalcBlockRMSE(byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_RPZAQ_CalcBlockAsFlat(byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_RPZAQ_CalcBlockAsPriorColor(byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_RPZAQ_CalcBlockAsPriorFlatColor(byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_RPZAQ_ThrashBlock(byte *blk);
BGBBTJ_API int BGBBTJ_RPZA_QuantizeBlocksDXTn(byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl, int stride);
BGBBTJ_API int BGBBTJ_RPZA_QuantizeBlocksDXT5(byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl);
//AHSRC:base/btic1c_dec_bc4.c
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksBC4(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys, int stride);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksBC4(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys, int stride);
//AHSRC:base/btic1c_dec_bc6h.c
void BGBBTJ_BT1C_DecodeBlocksBC6H_EncBlockBasic_Mode3_PixelRowA(BGBBTJ_BitStream *bits, int pix);
void BGBBTJ_BT1C_DecodeBlocksBC6H_EncBlockBasic_Mode3_PixelRowB(BGBBTJ_BitStream *bits, int pix);
void BGBBTJ_BT1C_DecodeBlocksBC6H_EncBlockBasic(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksBC6H_EncBlockBasic_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksBC6H_EncBlockBasic_RGB48(byte *ct, u64 clra, u64 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_FillColorDeblockBC6H(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, u16 clr, int idx, int xs1, int ys1, int stride, int mode, int dfl);
void BGBBTJ_BT1C_DecodeBlockColorArrayBC6H(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte **rcs, int num, int xs1, int ys1, int stride, int mode, int dfl);
void BGBBTJ_BT1C_DecodeRawBlockBC6H(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte **rcs, int num, int xs1, int ys1, int stride, int mode, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksBC6H_I(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksBC6H(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys, int dfl);
//AHSRC:base/btic1c_dec_bc7.c
void BGBBTJ_BT1C_DecodeBlocksBC7_EncBlockBasicAX(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksBC7_EncBlockBasic(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksBC7_EncBlockBasicAlpha(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksBC7_EncBlockBasicAX_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksBC7_EncBlockBasic_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksBC7_EncBlockBasicAlpha_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_FillColorDeblockBC7(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, u16 clr, int idx, int xs1, int ys1, int stride, int mode, int dfl);
void BGBBTJ_BT1C_DecodeBlockColorArrayBC7(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte *csa, byte **rcs, int num, int xs1, int ys1, int stride, int mode, int dfl);
void BGBBTJ_BT1C_DecodeRawBlockBC7(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte *csa, byte **rcs, int num, int xs1, int ys1, int stride, int mode, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksBC7_I(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ibuf, int isz, byte *blks, byte *lblks, byte *ablks, int xs, int ys, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksBC7(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys, int dfl);
//AHSRC:base/btic1c_dec_comm.c
int BGBBTJ_BT1C_ResetImageDefaults(BGBBTJ_BTIC1C_ImageInfo *ctx);
int BGBBTJ_BT1C_PredictDiffColorA(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride);
int BGBBTJ_BT1C_PredictDiffColorB(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride);
int BGBBTJ_BT1C_PredictDiffColorModeA(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int mode);
int BGBBTJ_BT1C_PredictDiffColorModeB(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int mode);
int BGBBTJ_BT1C_PredictDiffColorA24(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride);
int BGBBTJ_BT1C_PredictDiffColorB24(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride);
int BGBBTJ_BT1C_PredictDiffColorModeA24(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int mode);
int BGBBTJ_BT1C_PredictDiffColorModeB24(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int mode);
u16 BGBBTJ_BT1C_LinearExtrapolate565(u16 clra, u16 clrb);
int BGBBTJ_BT1C_AddDiff15ToClr24(BGBBTJ_BTIC1C_ImageInfo *ctx,int diff, int clr, int sc);
int BGBBTJ_BT1C_ConvDiff15ToDiff24(BGBBTJ_BTIC1C_ImageInfo *ctx,int diff);
int BGBBTJ_BT1C_AddPred24ToDiff15(BGBBTJ_BTIC1C_ImageInfo *ctx,int clr, int diff);
int BGBBTJ_BT1C_CalcDiff15ColorA24(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int diff);
int BGBBTJ_BT1C_CalcDiff15ColorB24(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int diff);
int BGBBTJ_BT1C_ConvRGB23ToRGB15(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
int BGBBTJ_BT1C_ConvRGB31ToRGB15(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
int BGBBTJ_BT1C_ConvRGB31FUToRGB15(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
int BGBBTJ_BT1C_ConvRGB31FSToRGB15(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u16 BGBBTJ_BT1C_ConvRGB16ToRGB15(BGBBTJ_BTIC1C_ImageInfo *ctx, u16 clr);
u16 BGBBTJ_BT1C_ConvRGB15ToRGB16(BGBBTJ_BTIC1C_ImageInfo *ctx, u16 clr);
int BGBBTJ_BT1C_ConvRGB23ToRGB16(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u32 BGBBTJ_BT1C_ConvRGB15ToRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, u16 clr);
u32 BGBBTJ_BT1C_ConvRGB16ToRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, u16 clr);
u32 BGBBTJ_BT1C_ConvRGB23ToRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u32 BGBBTJ_BT1C_ConvYYY7ToRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, int clr);
u32 BGBBTJ_BT1C_ConvRGB31FUToRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u32 BGBBTJ_BT1C_ConvRGB31FSToRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u64 BGBBTJ_BT1C_ConvRGB31FUToRGB48F(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u64 BGBBTJ_BT1C_ConvRGB31FSToRGB48F(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u64 BGBBTJ_BT1C_ConvRGB24ToRGB48F(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u64 BGBBTJ_BT1C_ConvRGB15ToRGB48F(BGBBTJ_BTIC1C_ImageInfo *ctx, u16 clr);
u64 BGBBTJ_BT1C_ConvRGB16ToRGB48F(BGBBTJ_BTIC1C_ImageInfo *ctx, u16 clr);
u64 BGBBTJ_BT1C_ConvRGB23ToRGB48F(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u32 BGBBTJ_BT1C_ConvRGB24ToRGB23(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
int BGBBTJ_BT1C_ConvRGB24ToRGB16(BGBBTJ_BTIC1C_ImageInfo *ctx, u32 clr);
u32 BGBBTJ_BT1C_ConvRGB48FToRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, u64 clr);
u32 BGBBTJ_BT1C_ConvRGB48FToRGB16(BGBBTJ_BTIC1C_ImageInfo *ctx, u64 clr);
int BGBBTJ_BT1C_AddPred24ToDiff7Y(BGBBTJ_BTIC1C_ImageInfo *ctx,int clr, int diff);
u32 BGBBTJ_BT1C_SwapRGB24_RB(u32 clr);
u16 BGBBTJ_BT1C_DecodeSingleColor555(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, int mode);
u16 BGBBTJ_BT1C_DecodeSingleColor565(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, int mode, int flag);
u64 BGBBTJ_BT1C_PredictDiffColorA48(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride);
u64 BGBBTJ_BT1C_PredictDiffColorB48(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride);
u64 BGBBTJ_BT1C_PredictDiffColorModeA48(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int mode);
u64 BGBBTJ_BT1C_PredictDiffColorModeB48(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int mode);
u64 BGBBTJ_BT1C_AddDiff15ToClr48(BGBBTJ_BTIC1C_ImageInfo *ctx,int diff, u64 clr, int sc);
u64 BGBBTJ_BT1C_ConvDiff15ToDiff48(BGBBTJ_BTIC1C_ImageInfo *ctx,int diff);
u64 BGBBTJ_BT1C_AddPred48ToDiff15(BGBBTJ_BTIC1C_ImageInfo *ctx,u64 clr, int diff);
u64 BGBBTJ_BT1C_CalcDiff15ColorA48(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int diff);
u64 BGBBTJ_BT1C_CalcDiff15ColorB48(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *ct, int xs1, int ys1, int stride, int diff);
int BGBBTJ_BT1C_DecodeBlocksCommandBlockCopy8N(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, byte **rct, byte **rcsl, int cmd, int stride);
int BGBBTJ_BT1C_DecodeBlocksCommandBlockCopy16(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, byte **rct, byte **rcsl, int cmd);
int BGBBTJ_BT1C_DecodeBlocksCommandBlockCopy16A8(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, byte **rct, byte **rcsl, byte **rcsa, int cmd);
int BGBBTJ_BT1C_DecodeBlocksCommandBlockCopy32A8(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, byte **rct, byte **rcsl, byte **rcsa, int cmd);
int BGBBTJ_BT1C_DecodeBlocksCommandBasic(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, int cmd);
int  BGBBTJ_BT1C_DecodeBlocksCommandExt(BGBBTJ_BTIC1C_ImageInfo *ctx, byte **rcs, int cmd);
//AHSRC:base/btic1c_dec_dxtn.c
void BGBBTJ_BT1C_FillColorDeblock(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte *ctc, int idx, int xs1, int ys1, int stride, int mode);
void BGBBTJ_BT1C_DecodeRawBlockDXTn(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte *csa, byte **rcs, int num, int xs1, int ys1, int stride, int mode, int dfl);
void BGBBTJ_BT1C_DecodeBlockColorArrayDXTn(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte **rcs, int num, int xs1, int ys1, int stride, int mode);
void BGBBTJ_BT1C_DecodeBlocksDXTn_EncBlockBasic(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksDXTn_EncBlockBasic_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksDXTn(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys, int stride, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksDXT1(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksDXT5(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys);
//AHSRC:base/btic1c_dec_mb5c.c
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasicAX(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasic(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasicAlpha(byte *ct, u16 clra, u16 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasicAX_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasic_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasicAlpha_RGB24(byte *ct, u32 clra, u32 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasicAX_RGB48(byte *ct, u64 clra, u64 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_DecodeBlocksMB5C_EncBlockBasic_RGB48(byte *ct, u64 clra, u64 clrb, u32 pix, int dfl);
void BGBBTJ_BT1C_FillColorDeblockMB5C(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, u16 clr, int idx, int xs1, int ys1, int stride, int mode, int dfl);
void BGBBTJ_BT1C_DecodeBlockColorArrayMB5C(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte *csa, byte **rcs, int num, int xs1, int ys1, int stride, int mode, int dfl);
void BGBBTJ_BT1C_DecodeRawBlockMB5C(BGBBTJ_BTIC1C_ImageInfo *ctx,  byte *blks, byte *ct, byte *csa, byte **rcs, int num, int xs1, int ys1, int stride, int mode, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksMB5C_I(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ibuf, int isz, byte *blks, byte *lblks, byte *ablks, int xs, int ys, int dfl);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksMB5C(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys, int dfl);
//AHSRC:base/btic1c_decode.c
void BGBBTJ_BT1C_Lock();
void BGBBTJ_BT1C_Unlock();
void BGBBTJ_BT1C_Lock();
void BGBBTJ_BT1C_Unlock();
void BGBBTJ_BT1C_Init();
int BGBBTJ_BT1C_Paeth(int a, int b, int c);
int BGBBTJ_BT1C_Paeth2(int a, int b, int c);
int BGBBTJ_BT1C_ColorCloserAB(int a, int b, int c);
int BGBBTJ_BT1C_ColorCloserABC(int a, int b, int c, int d);
BGBBTJ_API void *BGBBTJ_BT1C_CheckSizeTBuf1(BGBBTJ_BTIC1C_ImageInfo *ctx, int sz);
BGBBTJ_API void *BGBBTJ_BT1C_CheckSizeTBuf2(BGBBTJ_BTIC1C_ImageInfo *ctx, int sz);
BGBBTJ_API int BGBBTJ_BT1C_DecodeBlocksDXT5_NoAX(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ibuf, int isz, byte *blks, int xs, int ys);
int BGBBTJ_BT1C_DecompressFrame(BGBBTJ_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
BGBBTJ_API int BGBBTJ_BT1C_DecodeFrameImage(BGBBTJ_BTIC1C_Context *ctx,void *src, void *dst, int ssz, int dsz, int xs, int ys, int clrs);
int bt1c_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int bt1c_decompress_frame_clrs(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
int bt1c_compress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int dsz, int qfl, int clrs, int *rfl);
BGBBTJ_VidCodecCTX *bt1c_begin_decompress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
BGBBTJ_VidCodecCTX *bt1c_begin_compress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_CodecBT1C_Init();
//AHSRC:base/btic1c_encode.c
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksDXT1_LookupRun(byte *csc, byte *css, byte *cse, int *rlen, int *rdist, int fl);
int BGBBTJ_BT1C_EncodeValueForDiffMode(BGBBTJ_BTIC1C_ImageInfo *ctx, int b, int d, int sc);
int BGBBTJ_BT1C_EncodePredictDiffColor(BGBBTJ_BTIC1C_ImageInfo *ctx, int p, int v, int sc);
int BGBBTJ_BT1C_EncodePredictDiff(BGBBTJ_BTIC1C_ImageInfo *ctx, int p, int v, int sc);
int BGBBTJ_BT1C_EncodePredictDiffColorA(BGBBTJ_BTIC1C_ImageInfo *ctx,byte *blks, byte *cs, int xs1, int ys1, int fl, int stride, int sc);
int BGBBTJ_BT1C_EncodePredictDiffColorB(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blks, byte *cs, int xs1, int ys1, int fl, int stride, int sc);
int BGBBTJ_BT1C_EncodePredictDiffA(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blks, byte *cs, int xs1, int ys1, int fl, int stride, int sc);
int BGBBTJ_BT1C_EncodePredictDiffB(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blks, byte *cs, int xs1, int ys1, int fl, int stride, int sc);
int BGBBTJ_BT1C_EncodeClearDiffForBlock(BGBBTJ_BTIC1C_ImageInfo *ctx);
int BGBBTJ_BT1C_EncodeSetupDiffForBlock(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *cs, int xs1, int ys1, int fl, int stride);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksDXT1(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksDXT5(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksMB5C(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksDXT1Z(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksDXT5Z(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksMB5CZ(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
int BGBBTJ_BT1C_EncodeBlocksDXTn_CheckModeColorsCompatible(BGBBTJ_BTIC1C_ImageInfo *ctx, int dmode, int smode);
byte *BGBBTJ_BT1C_EncodeBlocksDXTn_EmitModeEscapeColorOnly(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ct, int mode);
byte *BGBBTJ_BT1C_EncodeBlocksDXTn_EmitModeEscape(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ct, int mode);
byte *BGBBTJ_BT1C_EncodeBlocksDXTn_EmitAlphaModeEscape(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *ct, int mode);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksDXTn(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl, int stride);
BGBBTJ_API int BGBBTJ_BT1C_EncodeBlocksBC4(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl, int stride);
BGBBTJ_API BGBBTJ_BTIC1C_Context *BGBBTJ_BT1C_AllocContext();
BGBBTJ_API int BGBBTJ_BT1C_EncodeImageFast(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_BT1C_EncodeImage(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_BT1C_EncodeImage2(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *hdr, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
byte *BGBBTJ_BT1C_EmitCompLayerHeader(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *img, byte *cts, byte *cte);
byte *BGBBTJ_BT1C_EmitTagLayerHeader(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_LayerInfo *img, byte *cts, byte *cte);
BGBBTJ_API byte *BGBBTJ_BT1C_EmitLayerImage(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *img, byte *ctt, byte *cte, int qfl);
BGBBTJ_API byte *BGBBTJ_BT1C_EmitTagLayer(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_LayerInfo *layer, byte *ctt, byte *cte, int qfl);
//AHSRC:base/btic1c_encfast.c
BGBBTJ_API int BGBBTJ_BT1CF_EncodeBlocksDXT1(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeBlocksDXT5(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeBlocksMB5C(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeBlocksDXT5Z(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeBlocksMB5CZ(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeBlocksDXTn(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl, int stride);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeImageFast(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeImage(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_BT1CF_EncodeImage2(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *hdr, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
//AHSRC:base/btic1c_metablock2.c
void BGBBTJ_BT1CQ_DecodeBlockDXT1(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *block, byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BT1CQ_DecodeBlockDXT1_Pal24(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *block, byte *rgba, int xstride, int ystride, u32 *pal);
int BGBBTJ_BT1CQ_DecodeBlock(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *iblk, byte *orgba);
bool BGBBTJ_BT1C_CheckBlockColor_IsRGB23(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorA_AsRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorB_AsRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorC_AsRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorD_AsRGB24(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorA_AsRGB23(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorB_AsRGB23(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorC_AsRGB23(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorD_AsRGB23(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
void BGBBTJ_BT1C_GetBlockColorsAB_AsRGB23(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk, int *rclra, int *rclrb);
void BGBBTJ_BT1C_GetBlockColorsExtAB(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk, int *rclra, int *rclrb);
int BGBBTJ_BT1C_GetColorRGB24AsDiff15(BGBBTJ_BTIC1C_ImageInfo *ctx, int clr, int lclr, int sc);
int BGBBTJ_BT1C_GetColorA_RGB23AsDiff15(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetColorB_RGB23AsDiff15(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorA_AsRGB31FS(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorB_AsRGB31FS(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorC_AsRGB31FS(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorD_AsRGB31FS(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_BlockColorAB_FloatUnsignedP(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorA_AsRGB31FU(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorB_AsRGB31FU(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorC_AsRGB31FU(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
int BGBBTJ_BT1C_GetBlockColorD_AsRGB31FU(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blk);
//AHSRC:base/btic1c_quant.c
BGBBTJ_API int BGBBTJ_BT1CQ_CalcColorRMSE(byte *rgb0, byte *rgb1);
BGBBTJ_API double BGBBTJ_BT1CQ_CalcBlockRMSE(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1CQ_CalcBlockTruncate(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1CQ_CalcBlockAsFlat(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
void BGBBTJ_BT1CQ_CalcBlockAs2x2(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
void BGBBTJ_BT1CQ_CalcBlockAs1bpp(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1CQ_CalcBlockAsPriorColor(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_BT1CQ_CalcBlockAsPriorFlatColor(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_BT1CQ_CalcBlockAsDiffScale(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *oblks, byte *ct, int xs1, int ys1, byte *blka, byte *blkb, int fl, int stride, int sc);
BGBBTJ_API void BGBBTJ_BT1CQ_CalcBlockAsIndexColor(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
void BGBBTJ_BT1CQ_CalcBlockAsIndexColor1bpp(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
void BGBBTJ_BT1CQ_CalcBlockAsIndexColor2x2(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
void BGBBTJ_BT1CQ_CalcBlockAsIndexColorFlat(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1CQ_ThrashBlock(byte *blk);
void BGBBTJ_BT1CQ_CopyBlock(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *blka, byte *blkb);
BGBBTJ_API int BGBBTJ_BT1C_QuantizeBlocksDXTn(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl, int stride);
BGBBTJ_API int BGBBTJ_BT1C_QuantizeBlocksDXT5(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl);
BGBBTJ_API int BGBBTJ_BT1C_QuantizeBlocksDXT1(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl);
BGBBTJ_API int BGBBTJ_BT1C_QuantizeBlocksMB5C(BGBBTJ_BTIC1C_ImageInfo *ctx, byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl);
//AHSRC:base/btic1c_tonemap.c
BGBBTJ_API int BGBBTJ_SplitHdrBlockToneMap_FixedQ3_11(s16 *rgba, s16 *tmrgba, s16 *tnrgba, byte *orgba, int xs, int ys, int qfl);
BGBBTJ_API int BGBBTJ_BT1C_EncodeToneMapImage(byte *obuf, int osz, s16 *rgba, int xs, int ys, int qfl, int stride);
BGBBTJ_API int BGBBTJ_BT1C_EncodeToneMap(byte *obuf, int osz, s16 *tmrgba, s16 *tnrgba, int xs, int ys, int qfl, int stride);
//AHSRC:base/btic1d_block.c
void BGBBTJ_BT1D_EncodeFlatBlockBX1A_S16(byte *block,int cr, int cg, int cb, int ca);
void BGBBTJ_BT1D_EncodeFlatHalfBlockBX1A_S16(byte *block,int cr, int cg, int cb, int ca);
void BGBBTJ_BT1D_EncodeFlatBlockBX1A(byte *block,float cr, float cg, float cb, float ca);
void BGBBTJ_BT1D_EncodeFlatHalfBlockBX1A(byte *block,float cr, float cg, float cb, float ca);
void BGBBTJ_BT1D_EncodeFlatHalfBlockBX1A_YUVA(byte *block,float cy, float cu, float cv, float ca);
void BGBBTJ_BT1D_EncodeFlatBlockBX1A_YUVA(byte *block,float cy, float cu, float cv, float ca);
void BGBBTJ_BT1D_EncodeHalfBlockBX1A(byte *block,float *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_EncodeBlockBX1A(byte *block,float *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_EncodeBlockBX1A_S16(byte *block,short *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_EncodeHalfBlockBX1A_S16(byte *block,short *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_DecodeBlockBX1A_FillPlanesFlat(float *pxy, float *pxu, float *pxv, float *pxa, float cy, float cu, float cv, float ca);
void BGBBTJ_BT1D_DecodeBlockBX1A_PlanesToRGBA(float *pxy, float *pxu, float *pxv, float *pxa, float *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_DecodeBlockBX1A_FlatToRGBA(float cy, float cu, float cv, float ca, float *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_DecodeBlockBX1A(byte *block,float *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_DecodeBlockBX1A_RGBA32(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_DecodeBlockBX1A_Q11_4(byte *block,short *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_DecodeBlockBX1A_LS16(byte *block,short *rgba, int xstride, int ystride);
void BGBBTJ_BT1D_DecodeBlockBX1A_S16(byte *block,short *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BT1D_EncodeImageBX1A(byte *block,float *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_EncodeImageBX1A_Mip(byte *block,float *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1A(byte *block,float *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1A_RGBA32(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1A_FlipRGBA32(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1A_RGBA_Q11_4(byte *block,s16 *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1A_BGRA32(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1A_FlipBGRA32(byte *block,byte *rgba, int xs, int ys, int stride);
//AHSRC:base/btic1d_block2.c
void BGBBTJ_BT1D_DecodeBlockBX1AI_FillPlanesFlat(s32 *pxy, s32 *pxu, s32 *pxv, s32 *pxa, s32 cy, s32 cu, s32 cv, s32 ca);
void BGBBTJ_BT1D_DecodeBlockBX1AI_PlanesToRGBA(s32 *pxy, s32 *pxu, s32 *pxv, s32 *pxa, void *rgba, int xstride, int ystride, int clrs);
void BGBBTJ_BT1D_DecodeBlockBX1AI_PlanesToRGBA420(s32 *pxy, s32 *pxu, s32 *pxv, s32 *pxa, void *rgba, int xstride, int ystride, int clrs);
void BGBBTJ_BT1D_DecodeBlockBX1AI_FlatToRGBA(s32 cy, s32 cu, s32 cv, s32 ca, void *rgba, int xstride, int ystride, int clrs);
void BGBBTJ_BT1D_DecodeBlockBX1AI(byte *block,void *rgba, int xstride, int ystride, int clrs);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1AI(byte *block,byte *rgba, int xs, int ys, int stride, int clrs);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1AI_RGBA32(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BT1D_DecodeImageBX1AI_BGRA32(byte *block,byte *rgba, int xs, int ys, int stride);
//AHSRC:base/btic1d_decode.c
void BGBBTJ_BT1D_Init();
BGBBTJ_API int BGBBTJ_BT1D_DecodeBlocks(byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys);
BGBBTJ_API int BGBBTJ_BT1D_DecodeImageBlocks(byte *ibuf, int isz, byte *blks, byte *lblks, int xs, int ys);
BGBBTJ_API int BGBBTJ_BT1D_DecodeFrameImage(BGBBTJ_BTIC1C_Context *ctx,void *src, void *dst, int ssz, int dsz, int xs, int ys, int clrs);
int bt1d_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int bt1d_decompress_frame_clrs(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
int bt1d_compress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int dsz, int qfl, int clrs, int *rfl);
BGBBTJ_VidCodecCTX *bt1d_begin_decompress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
BGBBTJ_VidCodecCTX *bt1d_begin_compress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_CodecBT1D_Init();
//AHSRC:base/btic1d_encode.c
BGBBTJ_API int BGBBTJ_BT1D_EncodeBlocks_LookupRun(byte *csc, byte *css, byte *cse, int *rlen, int *rdist, int fl);
BGBBTJ_API int BGBBTJ_BT1D_EncodeBlocks(byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API int BGBBTJ_BT1D_EncodeBlocksZ(byte *obuf, int osz, byte *blks, byte *lblks, int xs, int ys, int fl);
BGBBTJ_API BGBBTJ_BTIC1C_Context *BGBBTJ_BT1D_AllocContext();
BGBBTJ_API int BGBBTJ_BT1D_EncodeImageFast(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_BT1D_EncodeImage(BGBBTJ_BTIC1C_Context *ctx, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
BGBBTJ_API int BGBBTJ_BT1D_EncodeImage2(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *hdr, byte *rgba, byte *obuf, int osz, int xs, int ys, int qf, int clrs);
byte *BGBBTJ_BT1D_EmitCompLayerHeader(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *img, byte *cts, byte *cte);
byte *BGBBTJ_BT1D_EmitTagLayerHeader(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_LayerInfo *img, byte *cts, byte *cte);
BGBBTJ_API byte *BGBBTJ_BT1D_EmitLayerImage(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_ImageInfo *img, byte *ctt, byte *cte, int qfl);
BGBBTJ_API byte *BGBBTJ_BT1D_EmitTagLayer(BGBBTJ_BTIC1C_Context *ctx, BGBBTJ_BTIC1C_LayerInfo *layer, byte *ctt, byte *cte, int qfl);
//AHSRC:base/btic1d_quant.c
BGBBTJ_API int BGBBTJ_BT1DQ_DecodeBlock(byte *iblk, short *orgba);
BGBBTJ_API int BGBBTJ_BT1DQ_EncodeBlock(byte *oblk, short *rgba);
BGBBTJ_API int BGBBTJ_BT1DQ_EncodeBlockHalf(byte *oblk, short *rgba);
BGBBTJ_API int BGBBTJ_BT1DQ_CalcColorRMSE(short *rgb0, short *rgb1);
BGBBTJ_API double BGBBTJ_BT1DQ_CalcBlockRMSE(byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1DQ_SetDWordBE(byte *blk, int v);
BGBBTJ_API void BGBBTJ_BT1DQ_CalcBlockAsFlat(byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1DQ_CalcBlockAsHalf(byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1DQ_CalcBlockAsFlatHalf(byte *blka, byte *blkb);
BGBBTJ_API void BGBBTJ_BT1DQ_CalcBlockAsPriorColor(byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_BT1DQ_CalcBlockAsPriorColorHalf(byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_BT1DQ_CalcBlockAsPriorFlatColor(byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_BT1DQ_CalcBlockAsPriorFlatColorHalf(byte *blka, byte *blkb, byte *blkc);
BGBBTJ_API void BGBBTJ_BT1DQ_ThrashBlock(byte *blk);
BGBBTJ_API int BGBBTJ_BT1D_QuantizeBlocksN(byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl, int stride);
BGBBTJ_API int BGBBTJ_BT1D_QuantizeBlocks(byte *oblks, byte *blks, byte *lblks, int xs, int ys, int qfl);
//AHSRC:base/btic1x_metablock.c
int BGBBTJ_BT1XMB_IndexAlphaY3(int val, int min, int max);
void BGBBTJ_BT1XMB_EncodeBlockAlpha(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_EncodeBlockColor(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_EncodeBlock(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_DecodeBlockAlpha(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_DecodeBlockColor0(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_DecodeBlockColor1(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_DecodeBlockColor(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_DecodeBlockColorB0(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BT1XMB_DecodeBlockColorB1(byte *block,byte *rgba, int xstride, int ystride);
int BGBBTJ_BT1XMB_GetBlockAlphaTag(byte *block);
void BGBBTJ_BT1XMB_DecodeBlock(byte *block,byte *rgba, int xstride, int ystride);
int BGBBTJ_BT1XMB_CheckBlockSkipP(byte *blk, byte *lblk);
int BGBBTJ_BT1XMB_CheckBlockTranslateP(byte *blk, byte *lblk,int x, int y);
int BGBBTJ_BT1XMB_GetBlockTranslate(byte *block, int *rx, int *ry);
int BGBBTJ_BT1XMB_IsFlatColorP(byte *blk);
int BGBBTJ_BT1XMB_IsSimpleOpaqueP(byte *blk);
int BGBBTJ_BT1XMB_Is1BppP(byte *blk);
int BGBBTJ_BT1XMB_Is2x2P(byte *blk);
int BGBBTJ_BT1XMB_As1Bpp(byte *blk);
int BGBBTJ_BT1XMB_As2x2x2bpp(byte *blk);
u32 BGBBTJ_BT1XMB_As4x4x2bpp(byte *blk);
int BGBBTJ_BT1XMB_FullyTransparentP(byte *blk);
u16 BGBBTJ_BT1XMB_GetColorA_As565(byte *blk);
u16 BGBBTJ_BT1XMB_GetColorB_As565(byte *blk);
u32 BGBBTJ_BT1XMB_GetColorA_As787(byte *blk);
u32 BGBBTJ_BT1XMB_GetColorB_As787(byte *blk);
bool BGBBTJ_BT1XMB_GetColorB_IsRGB565P(byte *blk);
bool BGBBTJ_BT1XMB_GetColorB_IsRGB787P(byte *blk);
int BGBBTJ_BT1XMB_IsColorMatchP(byte *blka, byte *blkb);
//AHSRC:base/btic1x_palette.c
BGBBTJ_BTIC1C_TmpPalColor *BGBBTJ_BT1X_AllocPalColor(void);
BGBBTJ_BTIC1C_TmpPalNode *BGBBTJ_BT1X_AllocPalNode(void);
void BGBBTJ_BT1X_FreePalColor(BGBBTJ_BTIC1C_TmpPalColor *tmp);
void BGBBTJ_BT1X_FreePalNode(BGBBTJ_BTIC1C_TmpPalNode *tmp);
void BGBBTJ_BT1X_RebuildSplitColorPalNode(BGBBTJ_BTIC1C_TmpPalNode *tmp);
void BGBBTJ_BT1X_SplitColorPalNode(BGBBTJ_BTIC1C_TmpPalNode *tmp);
void BGBBTJ_BT1X_InsertColorPalNode(BGBBTJ_BTIC1C_TmpPalNode *tmp, int cr, int cg, int cb);
void BGBBTJ_BT1X_DestroyPalNodeTree(BGBBTJ_BTIC1C_TmpPalNode *tmp);
BGBBTJ_BTIC1C_TmpPalNode *BGBBTJ_BT1X_InsertPalNodeListByCount(BGBBTJ_BTIC1C_TmpPalNode *lst, BGBBTJ_BTIC1C_TmpPalNode *tmp);
int BGBBTJ_BT1X_GeneratePaletteRGB24(byte *src, int npix, int stride, byte *pal, int maxclr, int pstride);
int BGBBTJ_BT1X_GeneratePaletteRGB48(u16 *src, int npix, int stride, u16 *pal, int maxclr, int pstride);
int BGBBTJ_BT1X_GeneratePaletteBGR24(byte *src, int npix, int stride, byte *pal, int maxclr, int pstride);
int BGBBTJ_BT1X_CalcIndex555_RGB24(byte *clr);
int BGBBTJ_BT1X_CalcIndex555_RGB48(u16 *clr);
int BGBBTJ_BT1X_CalcDistance_RGB24(byte *clra, byte *clrb);
int BGBBTJ_BT1X_CalcDistance_RGB48(u16 *clra, u16 *clrb);
void BGBBTJ_BT1X_UnpackColor555_RGB24(u16 clra, byte *clrb);
void BGBBTJ_BT1X_UnpackColor565_RGB24(u16 clra, byte *clrb);
void BGBBTJ_BT1X_UnpackColor24_RGB24(u32 clra, byte *clrb);
int BGBBTJ_BT1X_FillHolesPaletteIndex555_RGB24(byte *pal, int nclr, int stride, u16 *index, u32 *chain);
int BGBBTJ_BT1X_GeneratePaletteIndex555_RGB24(byte *pal, int nclr, int stride, u16 *index, u32 *chain, int maxchain);
int BGBBTJ_BT1X_GeneratePaletteIndex555_RGB48(u16 *pal, int nclr, int stride, u16 *index, u32 *chain, int maxchain);
int BGBBTJ_BT1X_LookupColorIndex555_RGB24(byte *clr, byte *pal, int nclr, int pstr, u16 *index, u32 *chain);
int BGBBTJ_BT1X_LookupColorIndex555_RGB48(u16 *clr, u16 *pal, int nclr, int pstr, u16 *index, u32 *chain);
int BGBBTJ_BT1X_LookupColorIndex555_RGB565P24(u16 clra, u32 *pal, int nclr, u16 *index, u32 *chain);
//AHSRC:base/btic2c_decode.c
void BTIC2C_TransIDCT_Horiz(s32 *iblk, s32 *oblk);
void BTIC2C_TransIDCT_Vert(s32 *iblk, s32 *oblk);
void BTIC2C_TransIDCT(s32 *iblk, s32 *oblk);
void BTIC2C_TransIDCT_Flat(s32 *iblk, s32 *oblk);
void BTIC2C_TransIDCT_FlatS(s32 *iblk, s16 *oblk);
void BTIC2C_TransIWHT_Horiz(s32 *iblk, s32 *oblk);
void BTIC2C_TransIWHT_Vert(s32 *iblk, s32 *oblk);
void BTIC2C_TransIWHT(s32 *iblk, s32 *oblk);
void BTIC2C_TransIWHT_HorizS(s32 *iblk, s16 *oblk);
void BTIC2C_TransIWHTS(s32 *iblk, s16 *oblk);
void BTIC2C_TransIWHT_Horiz_Flat(s32 v, s32 *oblk);
void BTIC2C_TransIWHT_Horiz_FlatS(s16 v, s16 *oblk);
void BTIC2C_TransIWHT_Flat(s32 *iblk, s32 *oblk);
void BTIC2C_TransIWHT_FlatS(s32 *iblk, s16 *oblk);
void BTIC2C_TransIBLKT(s32 *iblk, s32 *oblk, int blkt);
void BTIC2C_TransIBLKT_Flat(s32 *iblk, s32 *oblk, int blkt);
void BTIC2C_TransIBLKT_Add(s32 *iblk, s32 *oblk, int blkt);
void BTIC2C_TransIBLKT_MoveAdd(s32 *iblk, s32 *oblk,s32 *img, int xo, int yo, int xs, int ys, int blkt);
void BTIC2C_TransIBLKT_Move(s32 *oblk,s32 *img, int xo, int yo, int xs, int ys, int blkt);
void BTIC2C_TransIBLKS(s32 *iblk, s16 *oblk, int blkt);
void BTIC2C_TransIBLKS_Flat(s32 *iblk, s16 *oblk, int blkt);
void BTIC2C_TransIBLKS_Add(s32 *iblk, s16 *oblk, int blkt);
void BTIC2C_GetImgPlaneBlk(s32 *blk, int xo, int yo, s32 *img, int xs, int ys);
void BTIC2C_GetImgPlaneBlkS(s32 *blk, int xo, int yo, s16 *img, int xs, int ys);
void BTIC2C_TransIBLKS_MoveAdd(s32 *iblk, s16 *oblk,s16 *img, int xo, int yo, int xs, int ys, int blkt);
void BTIC2C_TransIBLKS_Move(s16 *oblk,s16 *img, int xo, int yo, int xs, int ys, int blkt);
int BTIC2CH_NextByte_Basic(BTIC2C_Context *ctx);
int BTIC2CH_NextByte_Arith(BTIC2C_Context *ctx);
int BTIC2CH_NextByte(BTIC2C_Context *ctx);
int BTIC2CH_InitStream(BTIC2C_Context *ctx, byte *buf);
int BTIC2CH_InitStreamArith(BTIC2C_Context *ctx,byte *buf, int szbuf, int bits);
int BTIC2CH_ReadBit(BTIC2C_Context *ctx);
int BTIC2CH_ReadNBits(BTIC2C_Context *ctx, int n);
u32 BTIC2CH_ReadNBitsL(BTIC2C_Context *ctx, int n);
u64 BTIC2CH_ReadNBitsX(BTIC2C_Context *ctx, int n);
int BTIC2CH_Read2Bits(BTIC2C_Context *ctx);
int BTIC2CH_Read3Bits(BTIC2C_Context *ctx);
int BTIC2CH_Read4Bits(BTIC2C_Context *ctx);
int BTIC2CH_Read5Bits(BTIC2C_Context *ctx);
void BTIC2CH_SkipNBits(BTIC2C_Context *ctx, int n);
int BTIC2CH_ReadRice(BTIC2C_Context *ctx, int n);
int BTIC2CH_ReadSRice(BTIC2C_Context *ctx, int n);
int BTIC2CH_ReadAdRice(BTIC2C_Context *ctx, int *rk);
int BTIC2CH_ReadAdSRice(BTIC2C_Context *ctx, int *rk);
int BTIC2CH_PeekWord(BTIC2C_Context *ctx);
int BTIC2CH_DecodeSymbol(BTIC2C_Context *ctx, int tab);
int BTIC2CH_DecodeDiffDC(BTIC2C_Context *ctx, int tab, int cn, int *rfl);
int BTIC2CH_DecodeBlock(BTIC2C_Context *ctx,s32 *buf, int dctab, int actab, int dc2tab, int ac2tab, int cn, int ni, int nn);
void BTIC2CH_DequantBlock(BTIC2C_Context *ctx, s32 *ibuf, s32 *obuf, int qid);
void BTIC2CH_DequantBlock_Flat(BTIC2C_Context *ctx, s32 *ibuf, s32 *obuf, int qid);
int BTIC2C_MarkerImgData(BTIC2C_Context *ctx, byte *buf, int len,byte *obuf, int clrs);
int BTIC2C_MarkerImgData2(BTIC2C_Context *ctx, byte *buf, int len,byte *obuf, int clrs, int aribits);
int BTIC2C_MarkerSOS(BTIC2C_Context *ctx, byte *buf, int len);
int BTIC2C_MarkerSOF0(BTIC2C_Context *ctx, byte *buf, int len);
int BTIC2C_DecodeQuantTable(BTIC2C_Context *ctx, int tab, int *rk);
int BTIC2C_MarkerDQT(BTIC2C_Context *ctx, byte *buf, int tn, int len);
int BTIC2C_DecodeHufftabSymbol(BTIC2C_Context *ctx, int *rk);
int BTIC2C_DecodeCodeLengths(BTIC2C_Context *ctx,byte *cl, int ncl, int *rk);
int BTIC2C_MarkerDHT(BTIC2C_Context *ctx, byte *buf, int tn, int len);
int BTIC2C_DecodeCtx(BTIC2C_Context *ctx,byte *ibuf, byte *obuf, int isz, int osz, int *rxs, int *rys, int clrs);
//AHSRC:base/btic2c_dec_clrs.c
int BTIC2C_GetComponentPixel(BTIC2C_Context *ctx, int cn, int x, int y);
int BTIC2C_GetComponentPixelS420(BTIC2C_Context *ctx, int x, int y,int *ry0, int *ry1, int *ry2, int *ry3, int *ru, int *rv);
int BTIC2C_GetComponentPixelS420A(BTIC2C_Context *ctx, int x, int y,int *ry0, int *ry1, int *ry2, int *ry3, int *ru, int *rv, int *ra);
void BTIC2C_DecodeColorTransformBlock(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
int BTIC2C_DecodeColorTransform_BCnBlock(BTIC2C_Context *ctx,byte *obuf, int xo, int yo, int clrs);
int BTIC2C_DecodeColorTransform_GenericBlock(BTIC2C_Context *ctx,byte *obuf, int xo, int yo, int clrs);
int BTIC2C_DecodeColorTransform_GenericBlock2(BTIC2C_Context *ctx,byte *obuf, int ixo, int iyo, int oxo, int oyo, int oxs, int oys, int clrs, int flip);
int BTIC2C_DecodeColorTransform_DebugBlock(BTIC2C_Context *ctx,byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCgCo420_Block(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCgCo420A_Block_RGBA(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCgCo420A_Block_BGRA(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCgCo420_Block_UYVY(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformRCT420_Block(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformRCT420A_Block_RGBA(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformRCT420A_Block_BGRA(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformRCT420_Block_UYVY(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCbCr420_Block(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCbCr420_Block_RGBX(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCbCr420_Block_BGRX(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
void BTIC2C_DecodeColorTransformYCbCr420_Block_UYVY(BTIC2C_Context *ctx, byte *obuf, int xo, int yo, int clrs);
//AHSRC:base/btic2c_encode.c
void BTIC2C_TransDCT_Horiz(s32 *iblk, s32 *oblk);
void BTIC2C_TransDCT_Vert(s32 *iblk, s32 *oblk);
void BTIC2C_TransDCT(s32 *iblk, s32 *oblk);
void BTIC2C_TransWHT_Horiz(s32 *iblk, s32 *oblk);
void BTIC2C_TransWHT_Vert(s32 *iblk, s32 *oblk);
void BTIC2C_TransWHT(s32 *iblk, s32 *oblk);
void BTIC2C_TransBLKT(s32 *iblk, s32 *oblk, int blkt);
int BTIC2C_QuantCheckRound(BTIC2C_Context *ctx, int a, int b, int la);
int BTIC2CH_QuantBlock(BTIC2C_Context *ctx, s32 *ibuf, s32 *obuf, int qid);
int BTIC2CH_QuantBlockFast(BTIC2C_Context *ctx, s32 *ibuf, s32 *obuf, int qid);
int BTIC2CH_QuantBlockFastTrunc(BTIC2C_Context *ctx, s32 *ibuf, s32 *obuf, int qid);
void BTIC2C_SetupQuantTabDivFP(BTIC2C_Context *ctx, int qid);
void BTIC2C_EmitByte_Basic(BTIC2C_Context *ctx, int i);
void BTIC2C_EmitByte_Arith(BTIC2C_Context *ctx, int i);
void BTIC2C_EmitByte(BTIC2C_Context *ctx, int i);
void BTIC2CH_WriteBit(BTIC2C_Context *ctx, int i);
void BTIC2CH_WriteNBits(BTIC2C_Context *ctx, int v, int n);
void BTIC2CH_WriteNBitsL(BTIC2C_Context *ctx, u64 i, int n);
void BTIC2CH_Write2Bits(BTIC2C_Context *ctx, int i);
void BTIC2CH_Write3Bits(BTIC2C_Context *ctx, int i);
void BTIC2CH_Write4Bits(BTIC2C_Context *ctx, int i);
void BTIC2CH_WriteRice(BTIC2C_Context *ctx, int v, int k);
int BTIC2CH_CountWriteRice(BTIC2C_Context *ctx, int v, int k);
void BTIC2CH_WriteSRice(BTIC2C_Context *ctx, int v, int k);
int BTIC2CH_CountWriteSRice(BTIC2C_Context *ctx, int v, int k);
void BTIC2CH_WriteExpRice(BTIC2C_Context *ctx, int v, int k);
void BTIC2CH_WriteExpSRice(BTIC2C_Context *ctx, int v, int k);
void BTIC2CH_WriteAdRice(BTIC2C_Context *ctx, int v, int *rk);
void BTIC2CH_WriteAdSRice(BTIC2C_Context *ctx, int v, int *rk);
void BTIC2CH_FlushBits(BTIC2C_Context *ctx);
int BTIC2CH_BalanceTree_r(short *nodes, short *nlen,int root, int h, int ml);
void BTIC2CH_CalcLengths_r(short *nodes, byte *cl, int root, int h);
int BTIC2CH_BuildLengths(int *stat, int nc, byte *cl, int ml);
int BTIC2CH_BuildLengthsAdjust(int *stat, int nc, byte *cl, int ml);
void BTIC2CH_EncodeSymbol(BTIC2C_Context *ctx, int tab, int v);
int BTIC2CH_StatCoeffUEBits(BTIC2C_Context *ctx, u32 val);
int BTIC2CH_StatCoeffEBits(BTIC2C_Context *ctx, u32 val);
void BTIC2CH_EncodeCoeffUValue(BTIC2C_Context *ctx,int tab, int z, u32 val);
void BTIC2CH_StatCoeffUValue(BTIC2C_Context *ctx,int *stat, int z, u32 val);
void BTIC2CH_EncodeLenUValue(BTIC2C_Context *ctx,int tab, int z, u32 val);
void BTIC2CH_StatLenUValue(BTIC2C_Context *ctx,int *stat, int z, u32 val);
void BTIC2CH_EncodeVal(BTIC2C_Context *ctx,int tab, int tab2, int z, int v);
void BTIC2CH_StatVal(BTIC2C_Context *ctx,int *stat, int *stat2, int z, int v);
void BTIC2CH_EncodeDiffDC(BTIC2C_Context *ctx,int tab, int tab2, int v);
void BTIC2CH_StatDiffDC(BTIC2C_Context *ctx,int *stat, int *stat2, int v);
void BTIC2CH_EncodeDiffDCEOB(BTIC2C_Context *ctx,int tab, int tab2, int v);
void BTIC2CH_StatDiffDCEOB(BTIC2C_Context *ctx,int *stat, int *stat2, int v);
int BTIC2CH_EncodeBlockMode(BTIC2C_Context *ctx,byte *bmbuf, int cn, int dctab, int actab);
int BTIC2CH_StatBlockMode(BTIC2C_Context *ctx,byte *bmbuf, int cn, int *dcstat, int *acstat);
int BTIC2CH_EncodeBlock(BTIC2C_Context *ctx,s32 *buf, int dctab, int actab, int dc2tab, int ac2tab);
int BTIC2CH_StatBlock(BTIC2C_Context *ctx, s32 *buf,int *dcstat, int *acstat, int *dc2stat, int *ac2stat);
void BTIC2C_GetImgBlk(s32 *blk, int xo, int yo, s32 *img, int xs, int ys);
void BTIC2C_PutImgBlk(s32 *blk, int xo, int yo, s32 *img, int xs, int ys);
void BTIC2C_GetImgBlkS(s32 *blk, int xo, int yo, s16 *img, int xs, int ys);
void BTIC2C_PutImgBlkS(s32 *blk, int xo, int yo, s16 *img, int xs, int ys);
int BTIC2C_FilterImageDCT(BTIC2C_Context *ctx,s32 *ibuf, s32 *obuf, int xs, int ys);
int BTIC2C_FilterImageWHT(BTIC2C_Context *ctx,s32 *ibuf, s32 *obuf, int xs, int ys);
int BTIC2C_FilterImageBLKT(BTIC2C_Context *ctx,s32 *ibuf, s32 *obuf, int xs, int ys);
int BTIC2C_FilterCompareBlockError(BTIC2C_Context *ctx,s32 *blka, s32 *blkb, int mxe);
int BTIC2C_FilterCompareBlockErrorAprox(BTIC2C_Context *ctx,s32 *blka, s32 *blkb, int mxe);
int BTIC2C_FilterImageDeltaBestMoveOffs(BTIC2C_Context *ctx,s32 *ibuf, s32 *libuf, int qid, int xs, int ys, int x, int y, int lxo, int lyo, int axo, int ayo, int *rxo, int *ryo);
int BTIC2C_FilterImageDeltaBLKT(BTIC2C_Context *ctx,s32 *ibuf, s32 *libuf, s32 *obuf, byte *bmbuf, int qid, int xs, int ys);
int BTIC2C_FilterImageDeltaIBLKT(BTIC2C_Context *ctx,s32 *imgbuf, s32 *limgbuf, s32 *blkbuf, byte *bmbuf, int qid, int xs, int ys);
void BTIC2C_EmitQuantTabValue(BTIC2C_Context *ctx,int val, int *rk);
void BTIC2C_EmitQuantTabSz(BTIC2C_Context *ctx,u16 *tab, int blen, int *rk);
void BTIC2C_EmitDQT(BTIC2C_Context *ctx, int n);
void BTIC2C_EmitSOF(BTIC2C_Context *ctx, int xs, int ys);
void BTIC2C_EmitSOS(BTIC2C_Context *ctx);
void BTIC2C_EncodeHufftabSymbol(BTIC2C_Context *ctx,int v, int *rk);
void BTIC2C_EncodeCodeLengths(BTIC2C_Context *ctx,byte *cl, int nc, int *rk);
int BTIC2C_EncodeHuffTable(BTIC2C_Context *ctx,int tab, byte *cl, int nc);
void BTIC2C_EmitDHT(BTIC2C_Context *ctx, int tab);
void BTIC2C_MakeQuantTabInput(s32 *in, int cnt, u16 *tab, float q);
void BTIC2C_MakeQuantTabInputFast(s32 *in, int cnt, u16 *tab, float q);
void BTIC2C_MakeQuantTabFastIJG_Y(s32 *inv, int cnt, u16 *tab, float qf);
void BTIC2C_MakeQuantTabFastIJG_UV(s32 *inv, int cnt, u16 *tab, float qf);
int BTIC2C_ColorTransform(BTIC2C_Context *ctx, byte *ibuf, int xs, int ys, int qf, int pf);
int BTIC2C_EncodeCtx(BTIC2C_Context *ctx, byte *ibuf, byte *obuf, int osz, int xs, int ys, int qf, int pf);
BTIC2C_Context *BTIC2C_AllocContext();
void BTIC2C_FreeContext(BTIC2C_Context *ctx);
int BTIC2C_Encode(byte *ibuf, byte *obuf, int xs, int ys, int qf, int pf);
void BTIC2C_FlushEncodeFast(BTIC2C_Context *ctx);
//AHSRC:base/btic2c_common.c
int bt2c_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int bt2c_decompress_frame_clrs(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
int bt2c_compress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int dsz, int qfl, int clrs, int *rfl);
BGBBTJ_VidCodecCTX *bt2c_begin_decompress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
BGBBTJ_VidCodecCTX *bt2c_begin_compress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_CodecBT2C_Init();
//AHSRC:base/btic2c_arith.c
void BTIC2C_BitArith_Init();
int BTIC2C_BitArith_InputByte(BTIC2C_Context *ctx);
void BTIC2C_BitArith_OutputByte(BTIC2C_Context *ctx, int i);
void BTIC2C_BitArith_NormalizeOutput(BTIC2C_Context *ctx);
void BTIC2C_BitArith_NormalizeInput(BTIC2C_Context *ctx);
void BTIC2C_BitArith_FlushWBits(BTIC2C_Context *ctx);
void BTIC2C_BitArith_OutputFixedBit(BTIC2C_Context *ctx, int i);
int BTIC2C_BitArith_InputFixedBit(BTIC2C_Context *ctx);
void BTIC2C_BitArith_OutputBit(BTIC2C_Context *ctx,int i, u32 w);
int BTIC2C_BitArith_InputBit(BTIC2C_Context *ctx, u32 w);
void BTIC2C_BitArith_OutputModelBit(BTIC2C_Context *ctx,int i, byte *mctx);
int BTIC2C_BitArith_InputModelBit(BTIC2C_Context *ctx, byte *mctx);
void BTIC2C_BitArith_OutputFixedBits(BTIC2C_Context *ctx,int v, int n);
int BTIC2C_BitArith_InputFixedBits(BTIC2C_Context *ctx, int n);
int BTIC2C_BitArith_InputContextFixedBits(BTIC2C_Context *ctx, int n);
void BTIC2C_BitArith_OutputContextModelBits(BTIC2C_Context *ctx,int v, int n, byte *mdl, int ctxmask);
int BTIC2C_BitArith_InputContextModelBits(BTIC2C_Context *ctx,int n, byte *mdl, int ctxmask);
void BTIC2C_BitArith_OutputExtraBits(BTIC2C_Context *ctx,int v, int n, byte *mdl, int ctxmask);
int BTIC2C_BitArith_InputExtraBits(BTIC2C_Context *ctx,int n, byte *mdl, int ctxmask);
int BTIC2C_BitArith_SetupEncode(BTIC2C_Context *ctx, byte *out, int sz);
int BTIC2C_BitArith_SetupDecode(BTIC2C_Context *ctx, byte *in, int sz);
int BTIC2C_BitArith_SetupBeginEncode(BTIC2C_Context *ctx);
int BTIC2C_BitArith_SetupBeginDecode(BTIC2C_Context *ctx);
int BTIC2C_BitArith_SetupEndDecode(BTIC2C_Context *ctx);
int btic2c_arith_ctxindex(int ctx, int mask);
void BTIC2C_BitArith_EncodeSymbol8(BTIC2C_Context *ctx, int v,byte *mdl, int ctxmask);
int BTIC2C_BitArith_DecodeSymbol8(BTIC2C_Context *ctx,byte *mdl, int ctxmask);
void BTIC2C_BitArith_ResetContextWeights(BTIC2C_Context *ctx);
void BTIC2C_BitArith_SetupContextBits(BTIC2C_Context *ctx, int bits);
BGBBTJ_API int BTIC2C_BitArith_EncodeDataCtx(BTIC2C_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz, int flags);
BGBBTJ_API int BTIC2C_BitArith_DecodeDataCtx(BTIC2C_Context *ctx, byte *ibuf, int isz, byte *obuf, int osz);
//AHSRC:base/bcn_filter.c
BGBBTJ_API int BGBBTJ_SetGlExtensions(char *str);
BGBBTJ_API int BGBBTJ_CheckGlExtension(char *str);
BGBBTJ_API int BGBBTJ_BCn_RoundColorNearest5Bits(int v);
BGBBTJ_API int BGBBTJ_BCn_RoundColorNearest6Bits(int v);
BGBBTJ_API int BGBBTJ_BCn_TranscodeBlockBC1ToBC3(byte *sblk, byte *dblk);
BGBBTJ_API int BGBBTJ_BCn_TranscodeBC1ToBC3(byte *sblk, byte *dblk, int xs, int ys);
BGBBTJ_API int BGBBTJ_BCn_TranscodeBC1ToBC3B(byte *sblk, byte *dblk, int xs, int ys);
BGBBTJ_API int BGBBTJ_BCn_TranscodeBC1ToBC3B_Opaque(byte *sblk, byte *dblk, int xs, int ys);
BGBBTJ_API int BGBBTJ_BCn_CheckEncodeImageAlpha(byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXTn(byte *block,byte *rgba, int xs, int ys, int stride, int fmt);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageAutoDXTn(byte *block,byte *rgba, int xs, int ys, int stride, int *rfmt);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageDXTn(byte *block,byte *rgba, int xs, int ys, int stride, int fmt);
void BGBBTJ_BCn_DecodeBlockDXT1(byte *block,byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BCn_DecodeBlockDXT1_BGR(byte *block,byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BCn_DecodeBlockDXT5(byte *block,byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BCn_DecodeBlockDXT5_BGRA(byte *block,byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BCn_DecodeBlockBC4(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BCn_DecodeBlockBC4B(byte *block,byte *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageDXT1(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageDXT1_BGR(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageDXT5(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageDXT5_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageDXT5_UVAY(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_FlipImageDXT1(byte *iblk,byte *oblk, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_FlipImageDXT5(byte *iblk,byte *oblk, int xs, int ys);
BGBBTJ_API void BGBBTJ_BCn_FlipImageDXT5_Mip(byte *iblk, byte *oblk, int xs, int ys);
//AHSRC:base/bcn_packimg.c
byte *BGBBTJ_PackBCn_EmitValue(byte *ct, int val);
byte *BGBBTJ_PackBCn_EmitRun(byte *ct, int idx, int len);
byte *BGBBTJ_PackBCn_EmitValueSign(byte *ct, int val);
byte *BGBBTJ_PackBCn_EmitValueScan(byte *ct, int val, int scan);
byte *BGBBTJ_PackBCn_EmitRunScan(byte *ct, int idx, int len, int scan);
byte *BGBBTJ_PackBCn_EmitBlockValue(byte *ct, u64 block);
u64 BGBBTJ_PackBCn_GetBlockValue(byte *cs);
int BGBBTJ_PackBCn_LookupBlockSpan(byte *css, byte *cs, byte *cse, int stride, int *blkchn, int *blkhash, int *ridx, int *rlen, int max);
int BGBBTJ_PackBCn_UpdateBlockSpan(byte *css, byte *cs, byte *cse, int stride, int *blkchn, int *blkhash, int len);
byte *BGBBTJ_PackBCn_EncodeBlockArray(byte *obuf, byte *blks,int count, int stride);
BGBBTJ_API int BGBBTJ_PackBCn_EncodeBlocksDXT1(byte *obuf, byte *blks, int count);
BGBBTJ_API int BGBBTJ_PackBCn_EncodeBlocksDXT5(byte *obuf, byte *blks, int count);
byte *BGBBTJ_PackBCn_EncodePatchBlockArray(byte *obuf, byte *blks,byte *iblks, int count, int stride);
BGBBTJ_API int BGBBTJ_PackBCn_EncodePatchBlocksDXT1(byte *obuf, byte *blks, int count);
BGBBTJ_API int BGBBTJ_PackBCn_EncodePatchBlocksDXT5(byte *obuf, byte *blks, int count);
byte *BGBBTJ_PackBCn_DecodeValue(byte *cs, int *rval);
byte *BGBBTJ_PackBCn_DecodeRun(byte *cs, int *ridx, int *rlen);
byte *BGBBTJ_PackBCn_DecodeValueSign(byte *cs, int *rval);
byte *BGBBTJ_PackBCn_DecodeValueScan(byte *cs, int *rval, int scan);
byte *BGBBTJ_PackBCn_DecodeRunScan(byte *cs, int *ridx, int *rlen, int scan);
byte *BGBBTJ_PackBCn_DecodeBlockArray(byte *ibuf, byte *blks,int count, int stride);
BGBBTJ_API int BGBBTJ_PackBCn_DecodeBlocksDXT1(byte *ibuf, byte *blks, int count);
BGBBTJ_API int BGBBTJ_PackBCn_DecodeBlocksDXT5(byte *ibuf, byte *blks, int count);
byte *BGBBTJ_PackBCn_EncodeBlockArray2(byte *obuf, byte **rlbuf, byte *blks, byte *iblks, int count, int stride, int scan);
BGBBTJ_API int BGBBTJ_PackBCn_EncodeBlocks2DXT1(byte *obuf, byte *lbuf, byte *blks, int count, int scan, int *rlsz);
BGBBTJ_API int BGBBTJ_PackBCn_EncodeBlocks2DXT5(byte *obuf, byte *lbuf, byte *blks, int count, int scan, int *rlsz);
BGBBTJ_API int BGBBTJ_PackBCn_EncodePatchBlocks2DXT1(byte *obuf, byte *lbuf, byte *blks, int count, int scan, int *rlsz);
BGBBTJ_API int BGBBTJ_PackBCn_EncodePatchBlocks2DXT5(byte *obuf, byte *lbuf, byte *blks, int count, int scan, int *rlsz);
byte *BGBBTJ_PackBCn_DecodeBlockArray2(byte *ibuf,byte **rlbuf, byte *blks, int count, int stride, int scan);
BGBBTJ_API int BGBBTJ_PackBCn_DecodeBlocks2DXT1(byte *ibuf, byte *lbuf, byte *blks, int count, int scan);
BGBBTJ_API int BGBBTJ_PackBCn_DecodeBlocks2DXT5(byte *ibuf, byte *lbuf, byte *blks, int count, int scan);
byte *BGBBTJ_PackBCn_StatDecodeRun(byte *cs,int *ridx, int *rlen, int *stats, int scan);
byte *BGBBTJ_PackBCn_StatBlockArray2(byte *ibuf, int *stats, int count, int scan);
//AHSRC:base/bcn_filt_lbr.c
void BGBBTJ_FiltLBR_GetIndexBlock(int idx, byte *buf);
int BGBBTJ_FiltLBR_GetIndexBlockY(int idx);
void BGBBTJ_FiltLBR_AddIndexBlock(int idx, byte *buf);
int BGBBTJ_FiltLBR_CalcBlockY(byte *buf);
int BGBBTJ_FiltLBR_CompareBlock(byte *blka, byte *blkb);
int BGBBTJ_FiltLBR_CompareBlock(byte *blka, byte *blkb);
int BGBBTJ_FiltLBR_GetImageBlock(byte *img, int xstride, int ystride, byte *block);
int BGBBTJ_FiltLBR_SetImageBlock(byte *img, int xstride, int ystride, byte *block);
int BGBBTJ_FiltLBR_YChainIdx(int yv, int mmse);
int BGBBTJ_FiltLBR_LookupMatchIndexBlockSkip(byte *blk,int immse, int mmse, int skip);
int BGBBTJ_FiltLBR_LookupMatchIndexBlock(byte *blk, int mmse);
int BGBBTJ_FiltLBR_GetMatchIndexBlock(byte *blk, int mmse);
BGBBTJ_API void BGBBTJ_FiltLBR_CheckSetupImage(int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_SetupImage(int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_FilterImageB(byte *orgba, byte *irgba, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_FilterPatchImageB(byte *orgba, byte *irgba, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_PreFilterImage_Reduce(byte *rgba, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_FilterImage(byte *orgba, byte *irgba, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_FilterPatchImage(byte *orgba, byte *irgba, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_ColorQuantizeImage(byte *orgba, byte *irgba, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_StatImageBlocks(byte *rgba, int xs, int ys, int qf);
BGBBTJ_API void BGBBTJ_FiltLBR_StatImageBlocks(byte *rgba, int xs, int ys, int qf);
//AHSRC:base/bcn_filt_dxt1.c
int BGBBTJ_BCn_DistRGB(byte *rgb0, byte *rgb1);
int BGBBTJ_BCn_IndexRGB_Clr2(byte *rgb, byte *clr0, byte *clr1);
int BGBBTJ_BCn_IndexRGB_Clr3(byte *rgb,byte *clr0, byte *clr1, byte *clr2);
int BGBBTJ_BCn_IndexRGB_Clr4(byte *rgb,byte *clr0, byte *clr1, byte *clr2, byte *clr3);
void BGBBTJ_BCn_EncodeBlockDXT1_Clr4(byte *block,byte *clr0, byte *clr1, byte *clr2, byte *clr3, byte *rgba, int xstride, int ystride);
int BGBBTJ_BCn_ClrTo565(byte *clr, byte *oclr);
void BGBBTJ_BCn_EncodeBlockDXT1(byte *block,byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BCn_EncodeBlockDXT1F(byte *block,byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BCn_EncodeBlockDXT1A(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BCn_EncodeBlockDXT1B(byte *block,byte *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT1(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT1A(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT1F(byte *block,byte *rgba, int xs, int ys, int stride);
void BGBBTJ_BCn_EncodeBlockDXT1F_YUV420(byte *block,short *pxy, short *pxu, short *pxv);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT1F_YUV(byte *block,byte *rgba, int xs, int ys, int stride);
void BGBBTJ_BCn_EncodeBlockDXT1A_YUV420(byte *block,short *pxy, short *pxu, short *pxv, int ab);
void BGBBTJ_BCn_EncodeBlockDXT1F_BGRA(byte *block,byte *rgba, int xstride, int ystride, int nclr);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT1F_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
void BGBBTJ_BCn_EncodeBlockDXT1A_BGRA(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BCn_EncodeBlockDXT1A_BGRA(byte *block,byte *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT1A_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
//AHSRC:base/bcn_filt_dxt5.c
void BGBBTJ_BCn_EncodeBlockDXT5(byte *block,byte *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT5(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT5F(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeIdxImageAlphaDXT5(byte *block,byte *rgba, int xs, int ys, int stride, int idx);
BGBBTJ_API void BGBBTJ_BCn_FillImageAlphaDXT5(byte *block,int val, int xs, int ys);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT5B(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT5B_Mip(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DeblockImageDXT5(byte *iblk,byte *oblk, int xs, int ys);
//AHSRC:base/bcn_filt_dxt5_uvay.c
void BGBBTJ_BCn_EncodeBlockDXT5_UVAY(byte *block,byte *rgba, int xstride, int ystride, int nclr);
void BGBBTJ_BCn_EncodeBlockDXT5_UVAY(byte *block,byte *rgba, int xstride, int ystride, int nclr);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageDXT5_UVAY(byte *block,byte *rgba, int xs, int ys, int stride);
//AHSRC:base/bcn_filt_bc4.c
int BGBBTJ_BCn_IndexBC4Y(int val, int min, int max);
void BGBBTJ_BCn_FillBlockBC4(byte *block, int val);
void BGBBTJ_BCn_EncodeBlockBC4(byte *block,byte *rgba, int xstride, int ystride);
int BGBBTJ_BCn_IndexBC4YL(int val, int min, int max);
void BGBBTJ_BCn_EncodeBlockBC4L(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BCn_EncodeBlockBC4Y8x8(byte *block, short *y);
//AHSRC:base/bcn_filt_mb5c.c
void BGBBTJ_BCn_EncodeBlockMB1C(byte *block,byte *rgba, int xstride, int ystride, byte *rgbastrt, byte *rgbaend);
void BGBBTJ_BCn_EncodeBlockMB1C_BGRA(byte *block,byte *rgba, int xstride, int ystride, byte *rgbastrt, byte *rgbaend);
void BGBBTJ_BCn_EncodeBlockMB1CF_BGRA(byte *block,byte *rgba, int xstride, int ystride, byte *rgbastrt, byte *rgbaend);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1C(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1C_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1CF_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1CFB_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB5C(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB5C_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB5CF_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1CF_FlipBGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1CFB_FlipBGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_FlipImageMB5C(byte *iblk,byte *oblk, int xs, int ys);
BGBBTJ_API void BGBBTJ_BCn_FlipImageMB5C_Mip(byte *iblk, byte *oblk, int xs, int ys);
//AHSRC:base/bcn_filt_mb5c2.c
void BGBBTJ_BCn_EncodeBlockMB1CF_BGRA(byte *block,byte *rgba, int xstride, int ystride, byte *rgbastrt, byte *rgbaend);
void BGBBTJ_BCn_EncodeBlockMB1CF2_BGRA(byte *block,byte *rgba, int xstride, int ystride, byte *rgbastrt, byte *rgbaend);
void BGBBTJ_BCn_DecodeBlockMB1C_4ClrRGB24(byte *block, byte *rgba, int xstride, int ystride, int flag);
void BGBBTJ_BCn_DecodeBlockMB1C(byte *block, byte *rgba, int xstride, int ystride, int flag);
void BGBBTJ_BCn_DecodeBlockMB1C_Pal24(byte *block, byte *rgba, int xstride, int ystride, u32 *pal);
void BGBBTJ_BCn_DecodeBlockMB1C_BGRA(byte *block, byte *rgba, int xstride, int ystride, int flag);
void BGBBTJ_BCn_DecodeBlockMB1C_BGRA(byte *block, byte *rgba, int xstride, int ystride, int flag);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB5C(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB5CB(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB5C_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB5CB_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_FlipBlockMB5C(byte *iblock, byte *oblock);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB5C_FlipBGRA(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB5CB_FlipBGRA(byte *block,byte *rgba, int xs, int ys, int stride);
//AHSRC:base/bcn_filt_mb5c4hf.c
void BGBBTJ_BCn_EncodeBlockMB1C_F16(byte *block,u16 *rgba, int xstride, int ystride, u16 *rgbastrt, u16 *rgbaend, int fl);
int BGBBTJ_BCn_IndexBC4Y_F16(int val, int min, int max);
void BGBBTJ_BCn_FillBlockBC4_F16(byte *block, int val);
int BGBBTJ_BCn_CheckHfLdr(u16 val);
void BGBBTJ_BCn_EncodeBlockBC4_F16(byte *block,u16 *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1C_F16(byte *block,u16 *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB1C_F16_BGRA(byte *block,u16 *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB5C_F16(byte *block,u16 *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCn_EncodeImageMB5C_F16_BGRA(byte *block,u16 *rgba, int xs, int ys, int stride);
void BGBBTJ_BCn_DecodeCopyBlockMB1C_F16(byte *block, byte *rgba, int xstride, int ystride, int flag);
void BGBBTJ_BCn_DecodeBlockMB1C_55A9_F16(byte *block, byte *rgba, int xstride, int ystride, int flag);
void BGBBTJ_BCn_DecodeBlockMB1C_F16(byte *block, byte *rgba, int xstride, int ystride, int flag);
void BGBBTJ_BCn_DecodeBlockBC4_F16(byte *block,byte *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB1C_F16(byte *block,byte *rgba, int xs, int ys, int stride, int flag);
BGBBTJ_API void BGBBTJ_BCn_DecodeImageMB5C_F16(byte *block,byte *rgba, int xs, int ys, int stride, int flag);
//AHSRC:base/bcn_fastmip.c
void BGBBTJ_BCnMip_Init();
void BGBBTJ_BCnMip_MergeBlockHorizDXT5B(byte *dst, byte *srca, byte *srcb);
void BGBBTJ_BCnMip_MergeBlockVertDXT5B(byte *dst, byte *srca, byte *srcb);
void BGBBTJ_BCnMip_MergeBlockDXT5C(byte *dst,byte *srca, byte *srcb, byte *srcc, byte *srcd);
void BGBBTJ_BCnMip_MergeBlockDXT5B(byte *dst,byte *srca, byte *srcb, byte *srcc, byte *srcd);
BGBBTJ_API void BGBBTJ_BCnMip_MergeDXT5B(byte *dst, byte *src, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BCnMip_MergeDXT5(byte *dst, byte *src, int xs, int ys);
//AHSRC:base/bcn_bitstream.c
void BGBBTJ_BitsLE_Clear(BGBBTJ_BitStream *ctx);
void BGBBTJ_BitsLE_SetupWrite(BGBBTJ_BitStream *ctx, byte *ct, int sz);
void BGBBTJ_BitsLE_ClearSetupWrite(BGBBTJ_BitStream *ctx, byte *ct, int sz);
void BGBBTJ_BitsLE_WriteBits(BGBBTJ_BitStream *ctx, int v, int n);
void BGBBTJ_BitsLE_WriteBit(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write2Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write3Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write4Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write5Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write6Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write7Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_Write8Bits(BGBBTJ_BitStream *ctx, int v);
void BGBBTJ_BitsLE_FlushBits(BGBBTJ_BitStream *ctx);
void BGBBTJ_BitsLE_SetupRead(BGBBTJ_BitStream *ctx, byte *cs, int sz);
void BGBBTJ_BitsLE_ClearSetupRead(BGBBTJ_BitStream *ctx, byte *ct, int sz);
int BGBBTJ_BitsLE_ReadBits(BGBBTJ_BitStream *ctx, int n);
int BGBBTJ_BitsLE_ReadBit(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read2Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read7Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read8Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read3Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read4Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read5Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read6Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read14Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Read16Bits(BGBBTJ_BitStream *ctx);
int BGBBTJ_BitsLE_Peek8Bits(BGBBTJ_BitStream *ctx);
//AHSRC:base/bcn_float8.c
BGBBTJ_API int BGBBTJ_Float8_Init();
BGBBTJ_API float BGBBTJ_DecodeFloat8(byte val);
BGBBTJ_API byte BGBBTJ_EncodeFloat8(double val);
BGBBTJ_API u16 BGBBTJ_ConvFloat8ToFloat16(byte val);
BGBBTJ_API byte BGBBTJ_ConvFloat16ToFloat8(u16 val);
BGBBTJ_API byte BGBBTJ_NegFloat8(byte x);
BGBBTJ_API byte BGBBTJ_RcpFloat8(byte x);
BGBBTJ_API byte BGBBTJ_SqrtFloat8(byte x);
BGBBTJ_API byte BGBBTJ_AddFloat8(byte x, byte y);
BGBBTJ_API byte BGBBTJ_SubFloat8(byte x, byte y);
BGBBTJ_API byte BGBBTJ_MulFloat8(byte x, byte y);
BGBBTJ_API byte BGBBTJ_MulFloat8F(byte x, byte y);
BGBBTJ_API byte BGBBTJ_DivFloat8(byte x, byte y);
//AHSRC:base/bcn_float16.c
u32 BGBBTJ_Float16_ConvertMantissa(u32 i);
BGBBTJ_API int BGBBTJ_Float16_Init();
BGBBTJ_API double BGBBTJ_DecodeFloat16(u16 val);
BGBBTJ_API u16 BGBBTJ_EncodeFloat16(double val);
BGBBTJ_API double BGBBTJ_DecodeFloat16F(u16 val);
BGBBTJ_API double BGBBTJ_DecodeFloat12(u16 val);
BGBBTJ_API u16 BGBBTJ_EncodeFloat12(double val);
BGBBTJ_API u16 BGBBTJ_NegFloat16(u16 x);
BGBBTJ_API u16 BGBBTJ_RcpFloat16(u16 x);
BGBBTJ_API u16 BGBBTJ_SqrtFloat16(u16 x);
BGBBTJ_API u16 BGBBTJ_AddFloat16(u16 x, u16 y);
BGBBTJ_API u16 BGBBTJ_AddFloat16F(u16 x, u16 y);
BGBBTJ_API u16 BGBBTJ_AddFloat16F(u16 x, u16 y);
BGBBTJ_API u16 BGBBTJ_SubFloat16(u16 x, u16 y);
BGBBTJ_API u16 BGBBTJ_MulFloat16(u16 x, u16 y);
BGBBTJ_API u16 BGBBTJ_MulFloat16F(u16 x, u16 y);
BGBBTJ_API u32 BGBBTJ_MulFloat16F2P(u32 x, u32 y);
BGBBTJ_API u64 BGBBTJ_MulFloat16F4P(u64 x, u64 y);
BGBBTJ_API u16 BGBBTJ_DivFloat16(u16 x, u16 y);
//AHSRC:base/bc6_filter.c
int BGBBTJ_BC6H_DecodeBlock_ReadMode(BGBBTJ_BitStream *bits);
void BGBBTJ_BC6H_EncodeBlock_WriteMode(BGBBTJ_BitStream *bits, int mode);
void BGBBTJ_BC6H_EncodeBlock_SplitMinMaxClrY(int *pxy, int *min_rgba, int *max_rgba, int *avg_rgba, int *rmcy, int *rncy, int *racy, int *rgba, int xstride, int ystride);
void BGBBTJ_BC6H_EncodeBlock_VecInvertPixels(int *pxv, int n, int min, int max);
void BGBBTJ_BC6H_EncodeBlock_Mode3(byte *block,int *rgba, int xstride, int ystride);
void BGBBTJ_BC6HS_EncodeBlockUByte(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BC6HS_EncodeBlockSByte(byte *block,sbyte *rgba, int xstride, int ystride);
void BGBBTJ_BC6HS_EncodeBlockFloat(byte *block,float *rgba, int xstride, int ystride);
void BGBBTJ_BC6HU_EncodeBlockFloat(byte *block,float *rgba, int xstride, int ystride);
void BGBBTJ_BC6HS_EncodeBlockUByteExp(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BC6HS_EncodeBlockHFloat(byte *block,u16 *rgba, int xstride, int ystride);
void BGBBTJ_BC6HU_EncodeBlockHFloat(byte *block,u16 *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BC6HS_EncodeImageUByte(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BC6HS_EncodeImageSByte(byte *block,sbyte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BC6HS_EncodeImageFloat(byte *block,float *rgba, int xs, int ys, int stride);
//AHSRC:base/bc7_filter.c
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrYA(byte *pxy, byte *pxa, int *min_rgba, int *max_rgba, int *avg_rgba, int *rmcy, int *rncy, int *racy, int *rmca, int *rnca, int *raca, byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrYA(byte *pxy, byte *pxa, int *min_rgba, int *max_rgba, int *avg_rgba, int *rmcy, int *rncy, int *racy, int *rmca, int *rnca, int *raca, byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrY(byte *pxy, int *min_rgba, int *max_rgba, int *avg_rgba, int *rmcy, int *rncy, int *racy, byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrY2(byte *pxy, int *min_rgba, int *max_rgba, int *avg_rgba, int *rmcy, int *rncy, int *racy, byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_VecSwapRGB(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapRGBA(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapR(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapG(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapB(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecSwapA(int *clra, int *clrb);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels(byte *pxv, int n, int min, int max);
void BGBBTJ_BC7_EncodeBlock_Mode4(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_Mode5(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_Mode6(byte *block,byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock(byte *block,byte *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BC7_EncodeImageBC7(byte *block,byte *rgba, int xs, int ys, int stride);
int BGBBTJ_BC7_CalcBlockError(byte *rgba0, int xstride0, int ystride0, byte *rgba1, int xstride1, int ystride1);
void BGBBTJ_BC7_EncodeBlockBest(byte *block,byte *rgba, int xstride, int ystride);
BGBBTJ_API void BGBBTJ_BC7_EncodeImageBestBC7(byte *block,byte *rgba, int xs, int ys, int stride);
void BGBBTJ_BC7_EncodeBlock_YUV420(byte *block,short *pxy, short *pxu, short *pxv, int vfl);
int BGBBTJ_BC7_DecodeBlock_ReadMode(BGBBTJ_BitStream *bits);
int bgbbtj_bc7_interpolate(int e0, int e1, int idx, int prec);
void BGBBTJ_BC7_DecodeBlock_Mode4(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode5(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode6(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode0(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode1(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode2(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode3(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Mode7(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
void BGBBTJ_BC7_DecodeBlock_Default(BGBBTJ_BitStream *bits, byte *rgba, int xstride, int ystride, int flags);
int BGBBTJ_BC7_GetBlockMode(byte *block);
void BGBBTJ_BC7_DecodeBlock(byte *block,byte *rgba, int xstride, int ystride, int flags);
BGBBTJ_API void BGBBTJ_BC7_DecodeImageBC7(byte *block,byte *rgba, int xs, int ys, int stride);
BGBBTJ_API void BGBBTJ_BC7_DecodeImageBC7_BGRA(byte *block,byte *rgba, int xs, int ys, int stride);
void BGBBTJ_BC7_FlipBlock_Mode5(byte *iblk, byte *oblk);
void BGBBTJ_BC7_FlipBlock(byte *iblk, byte *oblk);
BGBBTJ_API void BGBBTJ_BC7_FlipImageBC7(byte *iblk, byte *oblk, int xs, int ys);
BGBBTJ_API void BGBBTJ_BC7_FlipImageBlocksBC7(byte *iblk, byte *oblk, int xs, int ys);
//AHSRC:base/bc7_filt_part2.c
int BGBBTJ_BC7_PartitionInit(void);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrYUV(byte *pxy, byte *pxu, byte *pxv, int *min_rgba_y, int *max_rgba_y, int *min_rgba_u, int *max_rgba_u, int *min_rgba_v, int *max_rgba_v, int *avg_rgba, int *rmcy, int *rncy, int *racy, int *rmcu, int *rncu, int *racu, int *rmcv, int *rncv, int *racv, byte *rgba, int xstride, int ystride);
int BGBBTJ_BC7_PickBlockPartition2(byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrYA_Part2(byte *pxy, byte *pxa, int *min_rgba0, int *max_rgba0, int *avg_rgba0, int *min_rgba1, int *max_rgba1, int *avg_rgba1, int *rmcy0, int *rncy0, int *racy0, int *rmcy1, int *rncy1, int *racy1, int *rmca0, int *rnca0, int *raca0, int *rmca1, int *rnca1, int *raca1, byte *rgba, int xstride, int ystride, int part);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels_Part2A(byte *pxv, int n, int min, int max, int part);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels_Part2B(byte *pxv, int n, int min, int max, int part);
void BGBBTJ_BC7_EncodeBlock_Mode1(byte *block,byte *rgba, int xstride, int ystride, int part);
void BGBBTJ_BC7_EncodeBlock_Mode3(byte *block,byte *rgba, int xstride, int ystride, int part);
void BGBBTJ_BC7_EncodeBlock_Mode7(byte *block,byte *rgba, int xstride, int ystride, int part);
void BGBBTJ_BC7_EncodeBlockBest_Part2(byte *block,byte *rgba, int xstride, int ystride);
//AHSRC:base/bc7_filt_part3.c
int BGBBTJ_BC7_PickBlockPartition3(byte *rgba, int xstride, int ystride);
void BGBBTJ_BC7_EncodeBlock_SplitMinMaxClrY_Part3(byte *pxy, int *min_rgba0, int *max_rgba0, int *avg_rgba0, int *min_rgba1, int *max_rgba1, int *avg_rgba1, int *min_rgba2, int *max_rgba2, int *avg_rgba2, int *rmcy0, int *rncy0, int *racy0, int *rmcy1, int *rncy1, int *racy1, int *rmcy2, int *rncy2, int *racy2, byte *rgba, int xstride, int ystride, int part);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels_Part3A(byte *pxv, int n, int min, int max, int part);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels_Part3B(byte *pxv, int n, int min, int max, int part);
void BGBBTJ_BC7_EncodeBlock_VecInvertPixels_Part3C(byte *pxv, int n, int min, int max, int part);
void BGBBTJ_BC7_EncodeBlock_Mode0(byte *block,byte *rgba, int xstride, int ystride, int part);
void BGBBTJ_BC7_EncodeBlock_Mode2(byte *block,byte *rgba, int xstride, int ystride, int part);
void BGBBTJ_BC7_EncodeBlockBest_Part3(byte *block,byte *rgba, int xstride, int ystride);
//AHSRC:base/avi_base.c
int RIFF_ReadInt32(VFILE *fd);
int RIFF_ReadChunkInfo(VFILE *fd, int ofs, int *id, int *sz, int *lid);
int RIFF_NextChunk(VFILE *fd, int ofs);
int RIFF_FindSubChunk(VFILE *fd, int ofs, int id, int lid);
void *RIFF_ReadInChunk(VFILE *fd, int ofs, int *size);
void *RIFF_FindReadInChunk(VFILE *fd, int ofs, int id, int *size);
int BGBBTJ_AVI_DumpMainAVIHeader(BGBBTJ_MainAVIHeader *avihead);
int BGBBTJ_AVI_DumpAVIStreamHeader(BGBBTJ_AVIStreamHeader *strhead, int num);
int BGBBTJ_AVI_DumpAVIWaveFmt(BGBBTJ_WAVEFORMATEX *wavefmt, int num);
int BGBBTJ_AVI_DumpBMIHead(BGBBTJ_BITMAPINFOHEADER *bmihead, int num);
int BGBBTJ_AVI_ExtractTagNum(int tag);
int BGBBTJ_AVI_Init();
int avi_getsamples(short *samples, int cnt, void *data);
BGBBTJ_API BGBBTJ_AVI_Context *BGBBTJ_AVI_LoadAVI(char *name);
BGBBTJ_API BGBBTJ_Video_Stats *BGBBTJ_AVI_GetStats(BGBBTJ_AVI_Context *ctx);
int BGBBTJ_AVI_DecodeAudio(BGBBTJ_AVI_Context *ctx, int ofs);
int BGBBTJ_AVI_DecodeVideo(BGBBTJ_AVI_Context *ctx,int ofs, int skip, int clrs);
BGBBTJ_API void *BGBBTJ_AVI_DecodeFrame2(BGBBTJ_AVI_Context *ctx, int skip, int clrs);
BGBBTJ_API void *BGBBTJ_AVI_DecodeFrame(BGBBTJ_AVI_Context *ctx);
BGBBTJ_API void *BGBBTJ_AVI_SkipFrame(BGBBTJ_AVI_Context *ctx);
BGBBTJ_API int BGBBTJ_AVI_SkipFrames(BGBBTJ_AVI_Context *ctx, int num);
BGBBTJ_API int BGBBTJ_AVI_BackFrames(BGBBTJ_AVI_Context *ctx, int num);
BGBBTJ_API void *BGBBTJ_AVI_FrameRaw(BGBBTJ_AVI_Context *ctx, float dt);
void *BGBBTJ_AVI_FrameTexnum_cb(void *data);
int BGBBTJ_AVI_FrameTexnum(BGBBTJ_AVI_Context *ctx, float dt);
int BGBBTJ_AVI_FrameTexnumI(BGBBTJ_AVI_Context *ctx, float dt);
int BGBBTJ_AVI_FrameTexnumNorm(BGBBTJ_AVI_Context *ctx, float dt);
int BGBBTJ_AVI_FrameTexnumSpec(BGBBTJ_AVI_Context *ctx, float dt);
int BGBBTJ_AVI_FrameTexnumLuma(BGBBTJ_AVI_Context *ctx, float dt);
BGBBTJ_API int BGBBTJ_AVI_Seek(BGBBTJ_AVI_Context *ctx, float dt);
BGBBTJ_API float BGBBTJ_AVI_GetPosition(BGBBTJ_AVI_Context *ctx);
BGBBTJ_API int BGBBTJ_AVI_Restart(BGBBTJ_AVI_Context *ctx);
BGBBTJ_API int BGBBTJ_AVI_SetChromaKey(BGBBTJ_AVI_Context *ctx,int r, int g, int b, int rad);
BGBBTJ_API int BGBBTJ_AVI_FilterChroma(BGBBTJ_AVI_Context *ctx, byte *buf);
//AHSRC:base/avi_btic.c
int btic_decompress_query(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int btic_compress_query(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_CodecBTIC_Init();
//AHSRC:base/avi_codec.c
BGBBTJ_VidCodec *BGBBTJ_VidCodec_New();
BGBBTJ_VidCodecCTX *BGBBTJ_VidCodecCTX_New();
void BGBBTJ_VidCodecCTX_Destroy(BGBBTJ_VidCodecCTX *ctx);
int BGBBTJ_Codec_DecompressQuery(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_Codec_CompressQuery(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
BGBBTJ_VidCodecCTX *BGBBTJ_Codec_BeginDecompress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
BGBBTJ_VidCodecCTX *BGBBTJ_Codec_BeginCompress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_Codec_DecompressFrame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int BGBBTJ_Codec_DecompressFrameClrs(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
int BGBBTJ_Codec_DecompressFrame2(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
int BGBBTJ_Codec_CompressFrame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int dsz, int qfl, int clrs, int *rfl);
int BGBBTJ_VidCodecCTX_EndCompress(BGBBTJ_VidCodecCTX *ctx);
int BGBBTJ_VidCodecCTX_EndDecompress(BGBBTJ_VidCodecCTX *ctx);
int BGBBTJ_Codec_Init();
//AHSRC:base/avi_mbtc.c
int BGBBTJ_MBTIC_DecompressFrame(BGBBTJ_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int mbtc_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
BGBBTJ_VidCodecCTX *mbtc_begin_decompress(int fcc,BGBBTJ_BMPInfoHeader *in, BGBBTJ_BMPInfoHeader *out);
int BGBBTJ_CodecMBTC_Init();
//AHSRC:base/avi_mjpg.c
int BGBBTJ_MJPEG_DecompressFrameClrs(BGBBTJ_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz, int clrs);
int BGBBTJ_MJPEG_DecompressFrame(BGBBTJ_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int mjpg_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int BGBBTJ_CodecMJPG_Init();
//AHSRC:base/avi_mpng.c
int BGBBTJ_MPNG_DecompressFrame(BGBBTJ_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int mpng_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int BGBBTJ_CodecMPNG_Init();
//AHSRC:base/avi_theora.c
int BGBBTJ_THEO_DecompressFrame(BGBBTJ_AVI_Context *ctx,void *src, void *dst, int ssz, int dsz);
int theo_decompress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int ssz, int dsz);
int theo_compress_frame(BGBBTJ_VidCodecCTX *ctx,void *src, void *dst, int dsz, int qfl, int clrs, int *rfl);
int BGBBTJ_CodecTHEO_Init();
int BGBBTJ_CodecTHEO_Init();
//AHSRC:base/avi_vfw.c
void BGBBTJ_ConvBGR2RGB(byte *sbuf, byte *tbuf, int sz);
void BGBBTJ_ConvBGRA2RGBA(byte *sbuf, byte *tbuf, int sz);
int BGBBTJ_CodecVFW_Init();
int BGBBTJ_CodecVFW_Init();
int BGBBTJ_CodecVFW_Init();
//AHSRC:base/vlic_base.c
BGBBTJ_API BTVLIC_Texture2D *BTVLIC_TextureFromRGBA(byte *rgba, int xs, int ys);
BGBBTJ_API BTVLIC_Texture2D *BTVLIC_TextureFromSharedRGBA(byte *rgba, int xs, int ys);
BGBBTJ_API BTVLIC_Texture2D *BTVLIC_TextureFromAVI(BGBBTJ_AVI_Context *avictx);
BGBBTJ_API void BTVLIC_TextureToRGBA(BTVLIC_Texture2D *tex, byte *rgba);
BGBBTJ_API void BTVLIC_TextureToRGBA_Q11_4(BTVLIC_Texture2D *tex, s16 *rgba);
BGBBTJ_API void BTVLIC_TextureUpdate(BTVLIC_Texture2D *tex, float dt);
BGBBTJ_API void BTVLIC_TextureUpdateSeek(BTVLIC_Texture2D *tex, float dt);
BGBBTJ_API BTVLIC_DrawContext *BTVLIC_NewDrawContext(BTVLIC_Texture2D *tgt);
BGBBTJ_API BTVLIC_PixelValue BTVLIC_LerpPixel(BTVLIC_PixelValue a, BTVLIC_PixelValue b, int t);
BGBBTJ_API BTVLIC_PixelValue BTVLIC_LerpPixel2D(BTVLIC_PixelValue a, BTVLIC_PixelValue b, BTVLIC_PixelValue c, BTVLIC_PixelValue d, int tx, int ty);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_LerpPixelF(BTVLIC_PixelValueF a, BTVLIC_PixelValueF b, float t);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_LerpPixel2DF(BTVLIC_PixelValueF a, BTVLIC_PixelValueF b, BTVLIC_PixelValueF c, BTVLIC_PixelValueF d, float tx, float ty);
BGBBTJ_API int BTVLIC_PixelRedFixed4(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelGreenFixed4(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelBlueFixed4(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelAlphaFixed4(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelRedNormalFixed16(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelGreenNormalFixed16(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelBlueNormalFixed16(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelAlphaNormalFixed16(BTVLIC_PixelValue c);
BGBBTJ_API int BTVLIC_PixelAlphaClampNormalFixed16(BTVLIC_PixelValue c);
BGBBTJ_API BTVLIC_PixelValue BTVLIC_Texture2DRawPixel(BTVLIC_Texture2D *tex, int x, int y);
BGBBTJ_API void BTVLIC_SetTexture2DRawPixel(BTVLIC_Texture2D *tex, int x, int y, BTVLIC_PixelValue clr);
BGBBTJ_API BTVLIC_PixelValue BTVLIC_Texture2DInterpolatedPixel(BTVLIC_Texture2D *tex, int x, int y);
BGBBTJ_API BTVLIC_PixelValue BTVLIC_Texture2DNearestPixel(BTVLIC_Texture2D *tex, int x, int y);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_PixelValueI2F(BTVLIC_PixelValue px);
BGBBTJ_API BTVLIC_PixelValue BTVLIC_PixelValueF2I(BTVLIC_PixelValueF px);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_Texture2DRawPixelF(BTVLIC_Texture2D *tex, int x, int y);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_Texture2DInterpolatedPixelF(BTVLIC_Texture2D *tex, float x, float y);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_Texture2DNearestPixelF(BTVLIC_Texture2D *tex, float x, float y);
BGBBTJ_API void BTVLIC_SetTexture2DRawPixelF(BTVLIC_Texture2D *tex, int x, int y, BTVLIC_PixelValueF clr);
BGBBTJ_API vec2 BTVLIC_Vec2TransMat3(vec2 v, BTVLIC_Mat3x3 mat);
BGBBTJ_API vec2 BTVLIC_Vec2TransIMat3(vec2 v, BTVLIC_Mat3x3 mat);
BGBBTJ_API vec2 BTVLIC_NVec2TransMat3(vec2 v, BTVLIC_Mat3x3 mat);
BGBBTJ_API BTVLIC_Mat3x3 BTVLIC_MatMultMat3(BTVLIC_Mat3x3 mata, BTVLIC_Mat3x3 matb);
BGBBTJ_API BTVLIC_PixelValue BTVLIC_RenderDrawLayerPixel(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr, int x, int y);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_RenderDrawLayerPixelF(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr, float x, float y);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_BlendLayerPixelABF(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr, BTVLIC_PixelValueF src, BTVLIC_PixelValueF dst, BTVLIC_PixelValueF clr, int blend);
BGBBTJ_API BTVLIC_PixelValueF BTVLIC_BlendLayerPixelF(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr, BTVLIC_PixelValueF a, BTVLIC_PixelValueF b);
BGBBTJ_API void BTVLIC_RenderContextLayer(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr);
BGBBTJ_API void BTVLIC_RenderContext(BTVLIC_DrawContext *ctx);
BGBBTJ_API void BTVLIC_UpdateContextLayer(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr, float dt);
BGBBTJ_API void BTVLIC_UpdateContext(BTVLIC_DrawContext *ctx, float dt);
BGBBTJ_API BTVLIC_Texture2D *BTVLIC_LookupTexture(BTVLIC_DrawContext *ctx, char *name);
BGBBTJ_API BTVLIC_DrawLayer *BTVLIC_LookupDrawLayer(BTVLIC_DrawContext *ctx, char *name);
BTVLIC_Mat3x3 BTVLIC_Mat3Identity();
BGBBTJ_API BTVLIC_DrawLayer *BTVLIC_NewDrawLayerContext(BTVLIC_DrawContext *ctx, char *name, BTVLIC_Texture2D *tex, int ox, int oy, int xs, int ys);
BGBBTJ_API int BTVLIC_BlendFuncForName(BTVLIC_DrawContext *ctx, char *name);
BGBBTJ_API void BTVLIC_TransformDrawLayerBase(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr, float x, float y, float ang);
BGBBTJ_API void BTVLIC_TransformDrawLayerTex(BTVLIC_DrawContext *ctx, BTVLIC_DrawLayer *lyr, float x, float y, float ang);
BGBBTJ_API void BTVLIC_HandleCommand(BTVLIC_DrawContext *ctx, char **args);
//AHSRC:base/btjdrv_base.c
int BTJPG_DriverTryLoadConfig(char *name);
void BTJPG_DriverInit(void);
void BTJPG_DriverDeinit(void);
void btjpg_puts(char *str);
void btjpg_printf(char *str, ...);
void *btjpg_gcalloc(size_t sz);
void *btjpg_gctalloc(char *str, size_t sz);
void btjpg_gcfree(void *ptr);
char *btjpg_strdup(char *str);
//AHSRC:base/btjdrv_vlcglue.c
//AHSRC:base/btjvfw_driverproc.c
