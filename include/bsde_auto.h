//source/solid_aabb.cpp
void BSDE_SolidAABB_BoxMove(bsde_real *bmins, bsde_real *bmaxs,bsde_real *start, bsde_real *end, bsde_real *mins, bsde_real *maxs);
int BSDE_SolidAABB_BoxCollideP(bsde_real *ma, bsde_real *na, bsde_real *mb, bsde_real *nb);
int BSDE_SolidAABB_BoxCollideAxis(bsde_real *ma, bsde_real *na, bsde_real *mb, bsde_real *nb);
int BSDE_SolidAABB_PointInBoxP(bsde_real *p, bsde_real *min, bsde_real *max);
void BSDE_SolidAABB_BoxIntersection(bsde_real *ma, bsde_real *na,bsde_real *mb, bsde_real *nb, bsde_real *mc, bsde_real *nc);
int BSDE_SolidAABB_BoxCollideContact(bsde_real *ma, bsde_real *na,bsde_real *mb, bsde_real *nb, bsde_real *org, bsde_real *norm, bsde_real *dist);
void BSDE_SolidAABB_BoxPlaneExtents(bsde_real *mins, bsde_real *maxs,bsde_real *norm, bsde_real *min, bsde_real *max);
int BSDE_SolidAABB_BoxLineCollideP(bsde_real *min, bsde_real *max,bsde_real *sp, bsde_real *ep);
//source/solid_obb.cpp
int BSDE_SolidOBB_CheckObbPlane(bsde_real *mins, bsde_real *maxs,bsde_real *xform, bsde_real *norm, bsde_real *io);
int BSDE_SolidOBB_ObbPlaneIntersect(bsde_real *mins, bsde_real *maxs,bsde_real *xform, bsde_real *norm, bsde_real *io);
int BSDE_SolidOBB_ObbPlaneExtents(bsde_real *mins, bsde_real *maxs,bsde_real *xform, bsde_real *norm, bsde_real *ext);
void BSDE_SolidOBB_PlaneExtents(bsde_real *mins, bsde_real *maxs,bsde_real *xform, bsde_real *norm, bsde_real *min, bsde_real *max);
int BSDE_SolidOBB_ObbPlaneMoveExtents(bsde_real *mins, bsde_real *maxs,bsde_real *sxform, bsde_real *exform, bsde_real *norm, bsde_real *ext);
int BSDE_SolidOBB_CheckObbMovePlane(bsde_real *mins, bsde_real *maxs,bsde_real *sxform, bsde_real *exform, bsde_real *norm, bsde_real *io);
int BSDE_SolidOBB_CheckCollide(bsde_real *amins, bsde_real *amaxs, bsde_real *apos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bpos);
int BSDE_SolidOBB_CheckObbMove(bsde_real *amins, bsde_real *amaxs, bsde_real *aspos, bsde_real *aepos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bspos, bsde_real *bepos, bsde_real *org);
int BSDE_SolidOBB_ObbImpactNormal(bsde_real *amins, bsde_real *amaxs, bsde_real *aspos, bsde_real *aepos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bspos, bsde_real *bepos, bsde_real *vel, bsde_real *norm);
void BSDE_SolidOBB_Box(bsde_real *mins, bsde_real *maxs, bsde_real *pos,bsde_real *bmins, bsde_real *bmaxs);
void BSDE_SolidOBB_BoxMove(bsde_real *mins, bsde_real *maxs, bsde_real *spos, bsde_real *epos, bsde_real *bmins, bsde_real *bmaxs);
int BSDE_SolidOBB_ObbPointCollide(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *org);
void BSDE_SolidOBB_GenPoints(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *pts);
void BSDE_SolidOBB_GenPoints4x(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *pts);
void BSDE_SolidOBB_GenPointsNx(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *pts, int n);
void BSDE_SolidOBB_GenPointsCubeNx(bsde_real *mins, bsde_real *maxs, bsde_real *pts, int n);
int BSDE_SolidOBB_ClipPoints(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *ipts, bsde_real *opts, int npts);
void BSDE_SolidOBB_ObbNearestPoint(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *org, bsde_real *pt);
//source/solid_obb3.cpp
int BSDE_SolidOBB3_CollideNormal(bsde_real *amins, bsde_real *amaxs, bsde_real *apos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bpos, bsde_real *norm, bsde_real *dist);
void BSDE_SolidOBB3_GenPoints(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *pts);
void BSDE_SolidOBB3_GenPointsLocal(bsde_real *mins, bsde_real *maxs, bsde_real *pts);
void BSDE_SolidOBB3_GenNormsLocal(bsde_real *mins, bsde_real *maxs, bsde_real *norms);
void BSDE_SolidOBB3_ObbBestNormalPoint(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *org, bsde_real *norm);
int BSDE_SolidOBB3_CheckPointCollide(bsde_real *mins, bsde_real *maxs, bsde_real *pos, bsde_real *pt);
int BSDE_SolidOBB3_CollideContact(bsde_real *amins, bsde_real *amaxs, bsde_real *apos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bpos, bsde_real *rorg, bsde_real *rnorm, bsde_real *rdist);
int BSDE_SolidOBB3_CollideAABBContact(bsde_real *amins, bsde_real *amaxs, bsde_real *apos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bpos, bsde_real *rorg, bsde_real *rnorm, bsde_real *rdist);
//source/solid_cylinder.cpp
void BSDE_SolidCylinder_MakeBox(bsde_real height, bsde_real radius, int t,bsde_real *pos, bsde_real *mins, bsde_real *maxs);
void BSDE_SolidCylinder_BoxMove(bsde_real height, bsde_real radius, int t, bsde_real *spos, bsde_real *epos, bsde_real *mins, bsde_real *maxs);
int BSDE_SolidCylinder_CollideObbContact(bsde_real alen, bsde_real arad, int t, bsde_real *apos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bpos, bsde_real *org, bsde_real *norm, bsde_real *dist);
bsde_real BSDE_SolidCylinder_AxisRadius(bsde_real len, bsde_real rad, int t, bsde_real *pos, bsde_real *norm);
void BSDE_SolidCylinder_PointLocal(bsde_real *pos, bsde_real *org, bsde_real *pt);
void BSDE_SolidCylinder_NearestPoint(bsde_real len, bsde_real rad, int t, bsde_real *pos, bsde_real *point, bsde_real *pt);
int BSDE_SolidCylinder_PointCollide(bsde_real len, bsde_real rad, int t, bsde_real *pos, bsde_real *point);
void BSDE_SolidCylinder_OffsetCPA(bsde_real *ua, bsde_real *va, bsde_real *ub, bsde_real *vb, bsde_real *da, bsde_real *db);
int BSDE_SolidCylinder_LineCollide(bsde_real len, bsde_real rad, int t, bsde_real *pos, bsde_real *sp, bsde_real *ep);
int BSDE_SolidCylinder_CollideContact(bsde_real alen, bsde_real arad, int at, bsde_real *apos, bsde_real blen, bsde_real brad, int bt, bsde_real *bpos, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidCylinder_CollideObbContact(bsde_real alen, bsde_real arad, int ty, bsde_real *apos, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bpos, bsde_real *org, bsde_real *norm, bsde_real *dist);
//source/solid_brep.cpp
void BSDE_SolidBRep_ProjectTriangleLine(bsde_real *u0, bsde_real *u1, bsde_real *u2, bsde_real *iv, bsde_real *rm, bsde_real *rn);
int BSDE_SolidBRep_CheckLineTriangleTriangle(bsde_real *u0, bsde_real *u1, bsde_real *u2, bsde_real *v0, bsde_real *v1, bsde_real *v2, bsde_real *iv);
int BSDE_SolidBRep_CheckLineTriangleTriangle2(bsde_real *u0, bsde_real *u1, bsde_real *u2, bsde_real *v0, bsde_real *v1, bsde_real *v2, bsde_real *iv, bsde_real *pt);
int BSDE_SolidBRep_CheckTriangleTriangle(bsde_real *u0, bsde_real *u1, bsde_real *u2, bsde_real *v0, bsde_real *v1, bsde_real *v2);
int BSDE_SolidBRep_CheckTriangleTriangle2(bsde_real *u0, bsde_real *u1, bsde_real *u2, bsde_real *v0, bsde_real *v1, bsde_real *v2, bsde_real *iorg, bsde_real *idir);
int BSDE_SolidBRep_GetTriangleNormal(bsde_real *u0, bsde_real *u1, bsde_real *u2, bsde_real *io);
int BSDE_SolidBRep_GetTriangleIntersection(bsde_real *u0, bsde_real *u1, bsde_real *u2, bsde_real *v0, bsde_real *v1, bsde_real *v2, bsde_real *io);
int BSDE_SolidBRep_CheckBrep(bsde_real *av, int *at, int na, bsde_real *bv, int *bt, int nb, bsde_real *rio, bsde_real *riv);
int BSDE_SolidBRep_CheckBrep2(bsde_real *av, int *at, int na, bsde_real *bv, int *bt, int nb, bsde_real *rio, bsde_real *riv, int rn);
int BSDE_SolidBRep_TrimBrep(bsde_real *av, int *at, int na,int *at2, bsde_real *bmins, bsde_real *bmaxs);
void BSDE_SolidBRep_ProjectLine(bsde_real *vecs, int *tris, int nv, int nt, bsde_real *pos, bsde_real *norm, bsde_real *rmin, bsde_real *rmax);
void BSDE_SolidBRep_ProjectVecsLine(bsde_real *vecs, int nv, bsde_real *norm, bsde_real *rmin, bsde_real *rmax);
void BSDE_SolidBRep_ProjectLine2(BSDE_Solid *obj, bsde_real *pos,bsde_real *norm, bsde_real *rmin, bsde_real *rmax);
void BSDE_SolidBRep_ProjectLine3(BSDE_Solid *obj,bsde_real *norm, bsde_real *rmin, bsde_real *rmax);
bsde_real BSDE_SolidBRep_ApproxBrepVolume(bsde_real *vecs, int *tris, int nv, int nt);
void BSDE_SolidBRep_PlaneIntersect(BSDE_Solid *obj, bsde_real *pos,bsde_real *norm, bsde_real *io);
void BSDE_SolidBRep_Predict(BSDE_Solid *obj);
int BSDE_SolidBRep_CheckCollide(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *apos, bsde_real *bpos);
int BSDE_SolidBRep_MultiContact(BSDE_World *world,BSDE_Solid *aobj, BSDE_Solid *bobj, bsde_real *apos, bsde_real *bpos, BSDE_Contact **lst, int num);
//source/solid_sphere.cpp
int BSDE_SolidSphere_CollideContact(bsde_real arad, bsde_real *aorg, bsde_real brad, bsde_real *borg, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidSphere_CollideObbContact(bsde_real arad, bsde_real *aorg, bsde_real *bmins, bsde_real *bmaxs, bsde_real *pos, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidSphere_CollideObbContact(bsde_real arad, bsde_real *aorg, bsde_real *bmins, bsde_real *bmaxs, bsde_real *bpos, bsde_real *org, bsde_real *norm, bsde_real *dist);
//source/solid_plane.cpp
void BSDE_SolidPlane_TransformNormal(bsde_real *dir, bsde_real *xform, bsde_real *norm);
int BSDE_SolidPlane_PointCollide(bsde_real *dir, bsde_real *xform, bsde_real *point);
//source/solid_hull.cpp
void BSDE_SolidHull_ModifyHullFaces(BSDE_Solid *obj, bsde_real *norms, int n);
void BSDE_SolidHull_MakeHullFaces(BSDE_Solid *obj);
void BSDE_SolidHull_ComputeVolume(BSDE_Solid *obj);
void BSDE_SolidHull_ProjectLine(BSDE_Solid *obj,bsde_real *xform, bsde_real *norm, bsde_real *min, bsde_real *max);
void BSDE_SolidHull_ProjectLine(BSDE_Solid *obj,bsde_real *xform, bsde_real *norm, bsde_real *min, bsde_real *max);
void BSDE_SolidHull_Box(BSDE_Solid *obj,bsde_real *xform, bsde_real *mins, bsde_real *maxs);
void BSDE_SolidHull_BoxMove(BSDE_Solid *obj,bsde_real *s_xform, bsde_real *e_xform, bsde_real *mins, bsde_real *maxs);
int BSDE_SolidHull_PointCollide(BSDE_Solid *obj, bsde_real *xform,bsde_real *org);
int BSDE_SolidHull_LineCollide(BSDE_Solid *obj, bsde_real *xform,bsde_real *sp, bsde_real *ep);
void BSDE_SolidHull_NearestPoint(BSDE_Solid *obj, bsde_real *xform,bsde_real *org, bsde_real *pt);
int BSDE_SolidHull_CheckCollide(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform);
int BSDE_SolidHull_CheckObbCollide(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform);
int BSDE_SolidHull_CheckSphereCollide(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int BSDE_SolidHull_CheckCylinderCollide(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int BSDE_SolidHull_CheckTriMeshCollide(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform);
int BSDE_SolidHull_CollidePoints(BSDE_Solid *obj,bsde_real *ipts, bsde_real *opts, int npts);
void BSDE_SolidHull_CollideOrigin(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *org);
int BSDE_SolidHull_ContactHull(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidHull_ContactBox(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidHull_ContactSphere(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidHull_ContactGeneric(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg, bsde_real *org, bsde_real *dir, bsde_real *dist);
void BSDE_SolidHull_HullPlaneIntersect(BSDE_Solid *obj, bsde_real *pos,bsde_real *norm, bsde_real *io);
//source/solid_hull2.cpp
void BSDE_SolidHull2_ProjectPointsLine(bsde_real *vecs, int nvecs,bsde_real *xform, bsde_real *norm, bsde_real *min, bsde_real *max);
int BSDE_SolidHull2_CheckCollide(bsde_real *anorm, bsde_real *bnorm, bsde_real *avecs, bsde_real *bvecs, int anf, int bnf, int anv, int bnv, bsde_real *axform, bsde_real *bxform);
int BSDE_SolidHull2_CalcCollide(BSDE_Solid *aobj, BSDE_Solid *bobj, bsde_real *anorm, bsde_real *bnorm, bsde_real *avecs, bsde_real *bvecs, int anf, int bnf, int anv, int bnv, bsde_real *axform, bsde_real *bxform, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidHull2_CollideOBB(bsde_real *amins, bsde_real *amaxs, bsde_real *bmins, bsde_real *bmaxs, bsde_real *axform, bsde_real *bxform, bsde_real *rorg, bsde_real *rnorm, bsde_real *rdist);
int BSDE_SolidHull2_CalcCollideStatic(BSDE_Solid *aobj, BSDE_Solid *bobj, bsde_real *anorm, bsde_real *bnorm, bsde_real *avecs, bsde_real *bvecs, int anf, int bnf, int anv, int bnv, bsde_real *axform, bsde_real *bxform, bsde_real *org, bsde_real *norm, bsde_real *dist);
int BSDE_SolidHull2_CalcCollideStaticSphere(BSDE_Solid *aobj, BSDE_Solid *bobj, bsde_real *anorm, bsde_real *avecs, int anf, int anv, bsde_real *axform, bsde_real *bxform, bsde_real *org, bsde_real *norm, bsde_real *dist);
//source/solid_bsp.cpp
void BSDE_SolidBSP_FaceExtents(BSDE_BSPFace *face, bsde_real *norm,bsde_real *min, bsde_real *max);
int BSDE_SolidBSP_CheckFastMoveFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckGenericMoveFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
void BSDE_SolidBSP_ObbFaceIntersect(bsde_real *mins, bsde_real *maxs,bsde_real *pos, BSDE_BSPFace *face, bsde_real *io);
int BSDE_SolidBSP_CheckObbMoveFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckSphereFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckCylinderFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckHullFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckTriMeshFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckMoveFace(BSDE_BSPFace *face,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckMoveLeaf(BSDE_BSPNode *node,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckMoveNode(BSDE_BSPNode *node,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP_CheckCollide(BSDE_Solid *aobj, bsde_real *apos, BSDE_Solid *bobj, bsde_real *bpos);
int BSDE_SolidBSP_CollideMultiContact(BSDE_World *world, BSDE_Solid *aobj, bsde_real *apos, BSDE_Solid *bobj, bsde_real *bpos, BSDE_Contact **lst);
int BSDE_SolidBSP_TraceFace2(BSDE_BSPFace *face, bsde_real *sp, bsde_real *ep,bsde_real *io);
BSDE_BSPFace *BSDE_SolidBSP_TraceFaces2(BSDE_BSPFace *face,bsde_real *sp, bsde_real *ep, bsde_real *io);
BSDE_BSPFace *BSDE_SolidBSP_TraceNode2(BSDE_BSPNode *node,bsde_real *sp, bsde_real *ep, bsde_real *io);
int BSDE_SolidBSP_LineCollide(BSDE_Solid *obj, bsde_real *xform,bsde_real *isp, bsde_real *iep);
void BSDE_SolidBSP_DestroyFace(BSDE_BSPFace *face);
void BSDE_SolidBSP_DestroyFaces(BSDE_BSPFace *face);
void BSDE_SolidBSP_DestroyNode(BSDE_BSPNode *node);
BSDE_BSPFace *BSDE_SolidBSP_BuildFace(BSDE_World *world,int **arrp, bsde_real **varrp, bsde_real *mins, bsde_real *maxs);
BSDE_BSPNode *BSDE_SolidBSP_BuildLeaf(BSDE_World *world,int **arrp, bsde_real **varrp, bsde_real *mins, bsde_real *maxs);
BSDE_BSPNode *BSDE_SolidBSP_BuildNode(BSDE_World *world,int **arrp, bsde_real **varrp, bsde_real *mins, bsde_real *maxs);
BSDE_Solid *BSDE_SolidBSP_BuildArray(BSDE_World *world,int **arrp, bsde_real **varrp);
//source/solid_bsp2.cpp
void BSDE_SolidBSP2_FaceExtents(BSDE_BSPFace *face, bsde_real *xform,bsde_real *norm, bsde_real *min, bsde_real *max);
int BSDE_SolidBSP2_CheckFastMoveFace(BSDE_BSPFace *face, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP2_CheckGenericMoveFace(BSDE_BSPFace *face, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
void BSDE_SolidBSP2_ObbFaceIntersect(bsde_real *mins, bsde_real *maxs,bsde_real *pos, BSDE_BSPFace *face, bsde_real *xform, bsde_real *io);
int BSDE_SolidBSP2_CheckObbMoveFace(BSDE_BSPFace *face, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP2_CheckSphereFace(BSDE_BSPFace *face, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP2_CheckHullFace(BSDE_BSPFace *face, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP2_CheckMoveFace(BSDE_BSPFace *face, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP2_CheckMoveLeaf(BSDE_BSPNode *node, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP2_CheckMoveNode(BSDE_BSPNode *node, bsde_real *xform,BSDE_Solid *obj, bsde_real *pos, bsde_real *org, bsde_real *norm, int max);
int BSDE_SolidBSP2_CheckCollide(BSDE_Solid *aobj, bsde_real *apos, BSDE_Solid *bobj, bsde_real *bpos);
int BSDE_SolidBSP2_CollideMultiContact(BSDE_World *world, BSDE_Solid *aobj, bsde_real *apos, BSDE_Solid *bobj, bsde_real *bpos, BSDE_Contact **lst);
int BSDE_SolidBSP2_CheckIsecBoxFace(BSDE_BSPFace *face, bsde_real *xform,bsde_real *mins, bsde_real *maxs, bsde_real *pos);
int BSDE_SolidBSP2_CheckIsecBoxLeaf(BSDE_BSPNode *node, bsde_real *xform,bsde_real *mins, bsde_real *maxs, bsde_real *pos);
int BSDE_SolidBSP2_CheckIsecBoxNode(BSDE_BSPNode *node, bsde_real *xform,bsde_real *mins, bsde_real *maxs, bsde_real *pos);
int BSDE_SolidBSP2_BoxCollide(BSDE_Solid *obj, bsde_real *xform,bsde_real *mins, bsde_real *maxs, bsde_real *pos);
//source/bsde_collide.cpp
int bsde_checkcollide_obb(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_checkcollide_sphere(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_checkcollide_cylinder(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg, int t);
int bsde_checkcollide_plane(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_checkcollide_hull(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_checkcollide(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int BSDE_CheckCollide(BSDE_Solid *aobj, BSDE_Solid *bobj);
int BSDE_CheckInitialCollide(BSDE_Solid *aobj, BSDE_Solid *bobj);
int BSDE_CheckCollide2(BSDE_Solid *aobj, BSDE_Solid *bobj, int m);
bsde_real BSDE_CollideTimeR(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real bt, bsde_real dt, bsde_real mdt);
bsde_real BSDE_CollideTime(BSDE_Solid *aobj, BSDE_Solid *bobj,bsde_real dt, bsde_real mdt);
int bsde_collide_aabb(BSDE_World *world, BSDE_Solid *aobj, BSDE_Solid *bobj,BSDE_Contact **lst, bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_collide_obb(BSDE_World *world, BSDE_Solid *aobj, BSDE_Solid *bobj,BSDE_Contact **lst, bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_collide_sphere(BSDE_World *world,BSDE_Solid *aobj, BSDE_Solid *bobj, BSDE_Contact **lst, bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_collide_cylinder(BSDE_World *world,BSDE_Solid *aobj, BSDE_Solid *bobj, BSDE_Contact **lst, bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg, int t);
int bsde_collide_plane(BSDE_World *world, BSDE_Solid *aobj, BSDE_Solid *bobj, BSDE_Contact **lst, bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_collide_hull(BSDE_World *world,BSDE_Solid *aobj, BSDE_Solid *bobj, BSDE_Contact **lst,  bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int bsde_collide(BSDE_World *world,BSDE_Solid *aobj, BSDE_Solid *bobj, BSDE_Contact **lst, bsde_real *axform, bsde_real *bxform, bsde_real *aorg, bsde_real *borg);
int BSDE_Collide(BSDE_World *world, BSDE_Solid *aobj, BSDE_Solid *bobj,BSDE_Contact **lst);
int BSDE_InitialCollide(BSDE_World *world,BSDE_Solid *aobj, BSDE_Solid *bobj, BSDE_Contact **lst);
//source/bsde_solid.cpp
BSDE_Contact *BSDE_MakeContact(BSDE_World *world, BSDE_Solid *obja, BSDE_Solid *objb, bsde_real *org, bsde_real *norm, bsde_real depth);
BSDE_Contact *BSDE_MakePointsContact(BSDE_World *world, BSDE_Solid *obja, BSDE_Solid *objb, bsde_real *pts, bsde_real *norm, bsde_real depth, int npts);
void BSDE_FreeContacts();
BSDE_Solid *BSDE_NewSolidArray(BSDE_World *world,int type, int **arr, bsde_real **varr, bsde_real **sarr);
void BSDE_ArraySkipUnknown(int **arr, bsde_real **varr);
BSDE_Solid *BSDE_NewSolid(int type);
BSDE_Solid *BSDE_NewAABB(bsde_real mx, bsde_real my, bsde_real mz, bsde_real nx, bsde_real ny, bsde_real nz);
BSDE_Solid *BSDE_NewOBB(bsde_real mx, bsde_real my, bsde_real mz, bsde_real nx, bsde_real ny, bsde_real nz);
BSDE_Solid *BSDE_NewSphere(bsde_real rad);
BSDE_Solid *BSDE_NewCylinder(bsde_real height, bsde_real radius);
BSDE_Solid *BSDE_NewCappedCylinder(bsde_real height, bsde_real radius);
BSDE_Solid *BSDE_NewPlane(bsde_real x, bsde_real y, bsde_real z, bsde_real d);
BSDE_Solid *BSDE_NewHull(bsde_real *norms, int n);
BSDE_Solid *BSDE_NewTriMesh(bsde_real *vecs, int *tris, int nv, int nt);
BSDE_Solid *BSDE_NewVoxelChunk(int xs, int ys, int zs, bsde_real vsz);
void BSDE_Destroy(BSDE_Solid *self);
void BSDE_Box(BSDE_Solid *self, bsde_real *mins, bsde_real *maxs);
void BSDE_BoxMove(BSDE_Solid *self, bsde_real *mins, bsde_real *maxs);
void BSDE_BoxMovePos(BSDE_Solid *self,bsde_real *sxform, bsde_real *exform, bsde_real *sorg, bsde_real *eorg, bsde_real *mins, bsde_real *maxs);
bsde_real BSDE_GetAttrF(BSDE_Solid *self, int var);
void BSDE_SetAttrF(BSDE_Solid *self, int var, bsde_real val);
int BSDE_GetAttrI(BSDE_Solid *self, int var);
void BSDE_SetAttrI(BSDE_Solid *self, int var, int val);
void BSDE_GetAttrFV(BSDE_Solid *self, int var, float *val, int n);
void BSDE_SetAttrFV(BSDE_Solid *self, int var, float *val, int n);
void BSDE_GetAttrDV(BSDE_Solid *self, int var, double *val, int n);
void BSDE_SetAttrDV(BSDE_Solid *self, int var, double *val, int n);
void BSDE_GetAttrIV(BSDE_Solid *self, int var, int *val, int n);
void BSDE_SetAttrIV(BSDE_Solid *self, int var, int *val, int num);
void BSDE_SetAttribPointer(BSDE_Solid *self, int var,int size, int type, int stride, void *val, int num);
int BSDE_PointCollide(BSDE_Solid *self, bsde_real *point);
int BSDE_LineCollide(BSDE_Solid *self, bsde_real *isp, bsde_real *iep);
void BSDE_PlaneExtents(BSDE_Solid *self, bsde_real *normal,bsde_real *min, bsde_real *max);
void BSDE_PlaneExtentsPos(BSDE_Solid *self, bsde_real *pos, bsde_real *normal,bsde_real *min, bsde_real *max);
void BSDE_PlaneMoveExtents(BSDE_Solid *self, bsde_real *normal,bsde_real *min, bsde_real *max);
void BSDE_PlaneFastMoveExtents(BSDE_Solid *self, bsde_real *normal,bsde_real *min, bsde_real *max);
int BSDE_BoxCollide(BSDE_Solid *self, bsde_real *mins, bsde_real *maxs);
int BSDE_HullCollide(BSDE_Solid *self, bsde_real *nv, int nnv);
//source/bsde_joint.cpp
BSDE_Joint *BSDE_NewJoint(int type);
BSDE_Joint *BSDE_NextJointLink(BSDE_Joint *joint, BSDE_Solid *obj);
void BSDE_SetNextJointLink(BSDE_Joint *joint, BSDE_Solid *obj,BSDE_Joint *nxt);
void BSDE_UnlinkJointSolid(BSDE_Joint *joint, BSDE_Solid *obj);
void BSDE_BindJointSolids(BSDE_Joint *joint,BSDE_Solid *obja, BSDE_Solid *objb);
void BSDE_JointConstrainPoints(BSDE_World *world,BSDE_Joint *joint, bsde_real *orga, bsde_real *orgb, bsde_real dt);
void BSDE_JointConstrainPoints2(BSDE_World *world,BSDE_Joint *joint, bsde_real *orga, bsde_real *orgb, bsde_real dt);
void BSDE_JointConstrainPointsDirect(BSDE_World *world,BSDE_Joint *joint, bsde_real *orga, bsde_real *orgb, bsde_real dt);
void BSDE_HandleJointFixed(BSDE_World *world, BSDE_Joint *joint, bsde_real dt);
void BSDE_HandleJointBall(BSDE_World *world, BSDE_Joint *joint, bsde_real dt);
void BSDE_HandleJointHinge(BSDE_World *world, BSDE_Joint *joint, bsde_real dt);
void BSDE_HandleJointUniversal(BSDE_World *world,BSDE_Joint *joint, bsde_real dt);
void BSDE_HandleJointElastic(BSDE_World *world,BSDE_Joint *joint, bsde_real dt);
void BSDE_HandleJoint(BSDE_World *world, BSDE_Joint *joint, bsde_real dt);
bsde_real BSDE_GetJointAttrF(BSDE_Joint *self, int var);
void BSDE_SetJointAttrF(BSDE_Joint *self, int var, bsde_real val);
int BSDE_GetJointAttrI(BSDE_Joint *self, int var);
void BSDE_SetJointAttrI(BSDE_Joint *self, int var, int val);
void BSDE_GetJointAttrFV(BSDE_Joint *self, int var, float *val, int n);
void BSDE_SetJointAttrFV(BSDE_Joint *self, int var, float *val, int n);
void BSDE_GetJointAttrDV(BSDE_Joint *self, int var, double *val, int n);
void BSDE_SetJointAttrDV(BSDE_Joint *self, int var, double *v, int n);
void BSDE_SetJointCubic(BSDE_Joint *self,bsde_real vx, bsde_real vy, bsde_real sx, bsde_real sy, bsde_real fa, bsde_real fb, bsde_real fc, bsde_real fd);
//source/bsde_world.cpp
BSDE_World *BSDE_GetWorld();
void BSDE_SetWorld(int id);
int BSDE_CreateWorld();
int BSDE_EmptyWorld(BSDE_World *world);
BSDE_Solid *BSDE_GetWorldSolid(int obj);
void BSDE_SetWorldSolid(int obj, BSDE_Solid *solid);
void BSDE_StepWorld(BSDE_World *world, bsde_real dt);
void BSDE_WorldForces(BSDE_World *world, bsde_real dt);
int bsde_finite(bsde_real val);
void BSDE_UpdateVel(BSDE_World *world, BSDE_Solid *cur, bsde_real dt);
void BSDE_Update(BSDE_World *world, BSDE_Solid *cur, bsde_real dt);
void BSDE_Predict(BSDE_World *world, BSDE_Solid *cur, bsde_real dt);
void BSDE_Awaken(BSDE_Solid *cur);
void BSDE_PredictPosTime(BSDE_Solid *cur, bsde_real dt,bsde_real *org, bsde_real *rot, bsde_real *xform);
void BSDE_SetWorldGravity(BSDE_World *world, bsde_real x, bsde_real y, bsde_real z);
void BSDE_GetWorldGravity(BSDE_World *world, bsde_real *v);
bsde_real BSDE_GetWorldAttrF(BSDE_World *world, int var);
void BSDE_SetWorldAttrF(BSDE_World *world, int var, bsde_real val);
int BSDE_GetWorldAttrI(BSDE_World *world, int var);
void BSDE_SetWorldAttrI(BSDE_World *world, int var, int val);
void BSDE_GetWorldAttrFV(BSDE_World *world, int var, float *val, int n);
void BSDE_SetWorldAttrFV(BSDE_World *world, int var, float *val, int n);
void BSDE_GetWorldAttrDV(BSDE_World *world, int var, double *val, int n);
void BSDE_SetWorldAttrDV(BSDE_World *world, int var, double *val, int n);
void *BSDE_GetBuffer(BSDE_World *world, int var);
void BSDE_SetBuffer(BSDE_World *world,int var, int type, int num, int stride, void *val);
int BSDE_AddSolidWorld(BSDE_World *world, BSDE_Solid *solid);
int BSDE_AddJointWorld(BSDE_World *world, BSDE_Joint *joint);
BSDE_World *BSDE_NewWorld();
int *BSDE_GetTriggerArray(BSDE_World *world);
int BSDE_GetTriggerArrayPos(BSDE_World *world);
void BSDE_ResetTriggerArray(BSDE_World *world);
void BSDE_SetTriggerArray(BSDE_World *world, int *arr, int num);
void BSDE_WorldAddTriggerContact(BSDE_World *world,BSDE_Solid *obja, BSDE_Solid *objb);
//source/bsde_math.cpp
void BSDE_CrossXForm(bsde_real *r, bsde_real *s);
void BSDE_BuildInertiaTensor(BSDE_Solid *obj);
void BSDE_BuildInertiaTensor(BSDE_Solid *obj);
void BSDE_BuildBoxInertiaTensor(BSDE_Solid *obj);
void BSDE_WorldInertiaTensor(BSDE_Solid *obj);
void BSDE_TransformPointLocal(BSDE_Solid *obj, bsde_real *org, bsde_real *pt);
void BSDE_TransformPointGlobal(BSDE_Solid *obj, bsde_real *org, bsde_real *pt);
void BSDE_TransformVectorLocal(BSDE_Solid *obj, bsde_real *org, bsde_real *pt);
void BSDE_TransformVectorGlobal(BSDE_Solid *obj, bsde_real *org, bsde_real *pt);
//source/bsde_force.cpp
void BSDE_CalcPointVelocity(bsde_real *org, bsde_real *vel, bsde_real *avel,bsde_real *point, bsde_real *pvel);
void BSDE_ApplyForce(BSDE_Solid *self, bsde_real *dir);
void BSDE_ApplyAcceleration(BSDE_Solid *self, bsde_real *dir);
void BSDE_GetVelocity(BSDE_Solid *self, bsde_real *vel);
void BSDE_GetPointAngleVelocity(BSDE_Solid *self, bsde_real *org, bsde_real *vel);
void BSDE_GetPointVelocity(BSDE_Solid *self, bsde_real *org, bsde_real *vel);
void BSDE_GetPointForce(BSDE_Solid *self, bsde_real *org, bsde_real *vel);
void BSDE_ApplyPointAcceleration(BSDE_Solid *self,bsde_real *org, bsde_real *vel);
void BSDE_ApplyPointForce(BSDE_Solid *self,bsde_real *org, bsde_real *dir);
void BSDE_ApplyPointAngleForce(BSDE_Solid *self,bsde_real *org, bsde_real *dir);
void BSDE_ApplyTorque(BSDE_Solid *self, bsde_real *dir);
void BSDE_HandleFluidContact(BSDE_World *world,BSDE_Contact *self, bsde_real dt);
void BSDE_ComputeImpulse(BSDE_Solid *obja,bsde_real *org, bsde_real *normal, bsde_real *force);
void BSDE_ComputeImpulse2(BSDE_Solid *obja, BSDE_Solid *objb,bsde_real *org, bsde_real *normal, bsde_real depth, bsde_real dt, bsde_real *fa, bsde_real *fb);
void BSDE_ComputeImpulse3(BSDE_Solid *obja, BSDE_Solid *objb,bsde_real *org, bsde_real *normal, bsde_real depth, bsde_real dt, bsde_real *fa, bsde_real *fb);
void BSDE_HandleContact(BSDE_World *world, BSDE_Contact *self, bsde_real dt);
//source/bsde_iter.cpp
bsde_real bsde_log2(bsde_real f);
void BSDE_SetupStack(BSDE_World *world);
void BSDE_PushCollisions(BSDE_World *world, int b);
void BSDE_PushInitial(BSDE_World *world);
void BSDE_PredictWorld(BSDE_World *world, bsde_real dt, int b);
void BSDE_UpdateWorld(BSDE_World *world, bsde_real dt, int b);
void BSDE_ConstrainWorld(BSDE_World *world, bsde_real dt);
void BSDE_CollideWorld(BSDE_World *world, bsde_real dt, int b);
void BSDE_BlockCollisionsWorld(BSDE_World *world, bsde_real dt, int b);
void BSDE_RecurseWorld(BSDE_World *world, bsde_real dt, int lb);
int BSDE_WorldSingleStep(BSDE_World *world, bsde_real dt);
void BSDE_WorldMultiStep(BSDE_World *world, bsde_real dt);
//source/bsde_iter2.cpp
void BSDE_TimeIter_PushInitial(BSDE_World *world);
void BSDE_TimeIter_FirstCollision(BSDE_World *world, bsde_real dt,BSDE_Solid **aobj, BSDE_Solid **bobj, bsde_real *rdt);
void BSDE_TimeIter_StepWorld(BSDE_World *world, bsde_real dt);
//source/bsde_iter3.cpp
BSDE_QuadNode *BSDE_Iter3_AllocQuadNode();
BSDE_BinaryNode *BSDE_Iter3_AllocBinaryNode();
int BSDE_Iter3_CalcCentroid(BSDE_Solid *first, bsde_real *org);
int BSDE_Iter3_CalcNormal(BSDE_Solid *first, bsde_real *norm);
int BSDE_Iter3_CollideList(BSDE_World *world,BSDE_Solid *obj, BSDE_Solid *first, int n);
int BSDE_Iter3_CheckCollideList(BSDE_World *world,BSDE_Solid *obj, BSDE_Solid *first, int m);
int BSDE_Iter3_SolidQuad(BSDE_Solid *solid, bsde_real *org);
BSDE_QuadNode *BSDE_Iter3_BuildNode(BSDE_Solid *first);
int BSDE_Iter3_CollideTree(BSDE_World *world, BSDE_QuadNode *node,BSDE_Solid *obj, int n);
BSDE_BinaryNode *BSDE_Iter3_BuildBiNode(BSDE_Solid *first);
int BSDE_Iter3_CollideBiTree(BSDE_World *world, BSDE_BinaryNode *node,BSDE_Solid *obj, int n);
int BSDE_Iter3_CollideBiObj(BSDE_World *world, BSDE_Solid *obj, int n);
int BSDE_Iter3_CheckCollideBiTree(BSDE_World *world,BSDE_BinaryNode *node, BSDE_Solid *obj, int m);
int BSDE_Iter3_CheckCollideBiObj(BSDE_World *world, BSDE_Solid *obj, int m);
int BSDE_WorldSingleStep2(BSDE_World *world, bsde_real dt);
//source/bsde_message.cpp
void BSDE_MsgEmitInt(int val);
void BSDE_MsgEmitScalar(bsde_real val);
void BSDE_MsgEmitVector(bsde_real x, bsde_real y, bsde_real z, bsde_real w);
void BSDE_MsgBegin(int to, int msg);
void BSDE_MsgEnd();
void BSDE_MsgAttrI(int var, int val);
void BSDE_MsgAttrF(int var, bsde_real val);
void BSDE_MsgAttrIV(int var, int *val, int num);
void BSDE_MsgAttrFV(int var, float *val, int num);
void BSDE_MsgAttrDV(int var, double *val, int num);
int BSDE_MsgFlushQueue(int id);
int BSDE_MsgPeek();
int BSDE_MsgNext();
int BSDE_MsgGetAttrTag(int id, int *ii, int *iv, int *is);
int BSDE_MsgGetNextAttr(int id, int *ii, int *iv, int *is);
int BSDE_MsgLookup(int var, int *rid, int *rii, int *riv, int *ris);
int BSDE_MsgGetAttrI(int var);
bsde_real BSDE_MsgGetAttrF(int var);
int BSDE_MsgGetAttrIV(int var, int *val, int n);
int BSDE_MsgGetAttrFV(int var, float *val, int n);
int BSDE_MsgGetAttrDV(int var, double *val, int n);
//source/bsde_thread.cpp
BSDE_ThreadState *BSDE_GetThreadState();
//source/bsde_build.cpp
void BSDE_BuildEmitInt(int val);
void BSDE_BuildEmitScalar(bsde_real val);
void BSDE_BuildEmitVector(bsde_real x, bsde_real y, bsde_real z, bsde_real w);
void BSDE_Begin(BSDE_World *wrl, int type);
int BSDE_End(BSDE_World *wrl);
//source/bsde_random.cpp
void BSDE_SRand(BSDE_World *wrl, bsdeUInt seed);
void BSDE_SRand2(BSDE_World *wrl, bsdeUInt seed1, bsdeUInt seed2);
bsdeUInt BSDE_Rand(BSDE_World *wrl);
bsdeUInt BSDE_Rand2(BSDE_World *wrl);
void BSDE_Seed2(BSDE_World *wrl, bsdeUInt s0, bsdeUInt s1);
void BSDE_Seed21(BSDE_World *wrl);
bsdeUInt BSDE_RandJ(BSDE_World *wrl);
bsde_real BSDE_RandF(BSDE_World *wrl);
bsde_real BSDE_RandG(BSDE_World *wrl);
//source/misc_vecheap.cpp
void BSDE_VecHeap_Init();
void BSDE_VecHeap_NewIBlock();
void BSDE_VecHeap_NewFBlock();
int BSDE_VecHeap_AllocICellBlk(int blk);
int BSDE_VecHeap_AllocFCellBlk(int blk);
int BSDE_VecHeap_AllocICellsBlk(int blk, int sz);
int BSDE_VecHeap_AllocFCellsBlk(int blk, int sz);
int *BSDE_VecHeap_TryAllocInt(int cnt);
bsde_real *BSDE_VecHeap_TryAllocFloat(int cnt);
int *BSDE_VecHeap_AllocInt(int cnt);
bsde_real *BSDE_VecHeap_AllocFloat(int cnt);
void BSDE_VecHeap_FreeICellsBlk(int blk, int idx);
void BSDE_VecHeap_FreeFCellsBlk(int blk, int idx);
void BSDE_VecHeap_Free(void *v);
//source/math_vec3.cpp
void BSDE_Vec3F_ProjectPointOnPlane(bsde_real *d, bsde_real *v, bsde_real *z);
void BSDE_Vec3F_ProjectPointOnPlane2(bsde_real *d, bsde_real *v, bsde_real *z, bsde_real zn);
void BSDE_Vec3_ProjectPointOnPlane(bsde_real *d, bsde_real *v, bsde_real *z);
void BSDE_Vec3_ProjectPointOnPlane2(bsde_real *d, bsde_real *v, bsde_real *z, bsde_real zn);
bsde_real BSDE_Vec3F_DistLine(bsde_real *pt, bsde_real *v0, bsde_real *v1);
bsde_real BSDE_Vec3F_DistLineSeg(bsde_real *pt, bsde_real *v0, bsde_real *v1);
bsde_real BSDE_Vec3_DistLine(bsde_real *pt, bsde_real *v0, bsde_real *v1);
bsde_real BSDE_Vec3_DistLineSeg(bsde_real *pt, bsde_real *v0, bsde_real *v1);
//source/math_matd.cpp
void BSDE_Mat3_MatMult(bsde_real *a, bsde_real *b, bsde_real *c);
void BSDE_Mat3_Transpose(bsde_real *a, bsde_real *b);
void BSDE_Mat3_Copy(bsde_real *a, bsde_real *b);
int BSDE_Mat3_Equal(bsde_real *a, bsde_real *b);
void BSDE_Mat3_Scale(bsde_real *a, bsde_real b, bsde_real *c);
void BSDE_Mat3_TransformVector(bsde_real *dir, bsde_real *xform, bsde_real *v);
void BSDE_Mat3_TransformVectorT(bsde_real *dir, bsde_real *xform, bsde_real *v);
void BSDE_Mat3_Normalize(bsde_real *rot);
void BSDE_Mat4_Identity(bsde_real *b);
void BSDE_Mat4_Copy(bsde_real *a, bsde_real *b);
int BSDE_Mat4_Equal(bsde_real *a, bsde_real *b);
void BSDE_Mat4_MatMult(bsde_real *a, bsde_real *b, bsde_real *c);
void BSDE_Mat4_Transpose(bsde_real *a, bsde_real *b);
void BSDE_Mat4_InverseTransform(bsde_real *a, bsde_real *b);
void BSDE_MatN_MatMult(bsde_real *a, int ah, int aw, bsde_real *b, int bh, int bw, bsde_real *c);
void BSDE_MatN_Inverse(bsde_real *a, bsde_real *b, int n);
//source/math_quatd.cpp
void BSDE_Quat_Identity(bsde_real *a);
void BSDE_Quat_Conjugate(bsde_real *a, bsde_real *b);
bsde_real BSDE_Quat_Magnitude(bsde_real *a);
bsde_real BSDE_Quat_Normalize(bsde_real *a, bsde_real *b);
void BSDE_Quat_Multiply(bsde_real *a, bsde_real *b, bsde_real *c);
void BSDE_Quat_ToMatrix(bsde_real *a, bsde_real *b);
void BSDE_Quat_To3Matrix(bsde_real *a, bsde_real *b);
void BSDE_Quat_From3Matrix(bsde_real *a, bsde_real *b);
void BSDE_Quat_FromAxis(bsde_real *a, bsde_real b, bsde_real *c);
void BSDE_Quat_ToAxis(bsde_real *a, bsde_real *b, bsde_real *c);
void BSDE_Quat_FromAngles(bsde_real *a, bsde_real *b);
void BSDE_Quat_ToAngles(bsde_real *a, bsde_real *b);
void BSDE_Quat_Lerp(bsde_real *a, bsde_real *b, bsde_real t, bsde_real *c);
void BSDE_Quat_SLerp(bsde_real *a, bsde_real *ib, bsde_real t, bsde_real *c);
//source/math_planed.cpp
void BSDE_Plane_LinePlaneIntersect(bsde_real *start, bsde_real *end,bsde_real *norm, bsde_real *point);
int BSDE_Plane_CheckLinePlane(bsde_real *start, bsde_real *end, bsde_real *norm);
int BSDE_Plane_ClipLinePlane(bsde_real *start, bsde_real *end,bsde_real *norm, bsde_real *end2);
void BSDE_Plane_NearestPointLinePlane(bsde_real *start, bsde_real *end,bsde_real *norm, bsde_real *pt);
int BSDE_Plane_CheckPlaneBox(bsde_real *norm, bsde_real *mins, bsde_real *maxs);
void BSDE_Plane_TransformVector(bsde_real *dir, bsde_real *xform, bsde_real *v);
void BSDE_Plane_TransformVectorT(bsde_real *dir, bsde_real *xform, bsde_real *v);
void BSDE_Plane_TransformNormal(bsde_real *dir, bsde_real *xform, bsde_real *norm);
void BSDE_Plane_TransformNormalT(bsde_real *dir, bsde_real *xform, bsde_real *norm);
void BSDE_Plane_TransformNormalN(bsde_real *dir, bsde_real *xform, bsde_real *norm);
void BSDE_Plane_TransformNormalNT(bsde_real *dir, bsde_real *xform, bsde_real *norm);
void BSDE_Plane_TransformPoint(bsde_real *point, bsde_real *xform, bsde_real *org);
void BSDE_Plane_TransformPointT(bsde_real *point, bsde_real *xform, bsde_real *org);
void BSDE_Plane_TransformPointN(bsde_real *point, bsde_real *xform, bsde_real *org);
void BSDE_Plane_TransformPointNT(bsde_real *point, bsde_real *xform, bsde_real *org);
void BSDE_Plane_TransformPointLocal(bsde_real *point, bsde_real *xform, bsde_real *org);
void BSDE_Plane_AdjacentNormals(bsde_real *n, bsde_real *x, bsde_real *y);
void BSDE_Plane_AdjacentNormals2(bsde_real *norm, bsde_real *udir, bsde_real *vdir);
//source/math_hull.cpp
void BSDE_SolidHull_MakePlaneFace(bsde_real *norm, bsde_real *pts);
int BSDE_SolidHull_ClipFace(bsde_real *norm,bsde_real *ipts, bsde_real *opts, int num);
void BSDE_SolidHull_MakeHullGeom(bsde_real *norm, int nnorm,bsde_real *rvec, int *rfv, int *rfc, int *rnvec, int *rnfv, int *rnfc);
void BSDE_SolidHull_AlignPoints(bsde_real *vec, int nvec,bsde_real *org, bsde_real *vx, bsde_real *vy, bsde_real *vz);
void BSDE_SolidHull_FitBoxPoints(bsde_real *vec, int nvec,bsde_real *mins, bsde_real *maxs, bsde_real *pos);
int BSDE_SolidHull_HullFromPoints(bsde_real *vec, int nvec, bsde_real *nv);
int BSDE_SolidHull_HullFromPointsMask(bsde_real *vec, int base, int lim,bsdeUInt *mask, bsde_real *nv);
int BSDE_SolidHull_HullFiltPoints(bsde_real *vec, int nvec, bsde_real *nv);
int BSDE_SolidHull_HullFiltPointsR(bsde_real *vec, int cnt, bsde_real *nv);
int BSDE_SolidHull_HullFromPoints2(bsde_real *vec, int nvec, bsde_real *nv);
