//source/util.c
void *bsg_ralloc(int sz);
char **bsg_split(char *s);
char *bsg_rstrdup(char *s);
char *bsg_strdup(char *s);
char *bsg_strdup(char *str);
BSG_API BSG_IO *bsg_file_getio();
void bsg_file_init();
void *bsg_fopen(char *name, char *mode);
void bsg_fclose(void *fd);
int bsg_fread(void *buf, int i, int j, void *fd);
int bsg_fwrite(void *buf, int i, int j, void *fd);
void bsg_fseek(void *buf, int i, int j);
int bsg_fgetc(void *fd);
int bsg_fputc(int i, void *fd);
int bsg_ftell(void *fd);
int bsg_feof(void *fd);
int bsg_fgets(void *buf, int sz, void *fd);
//source/pack.c
BSG_PackState *BSG_LookupPack(char *name);
BSG_PackState *BSG_OpenPack(char *name);
int BSG_LookupPackFile(BSG_PackState *ctx, char *name,int *roffs, int *rsize);
void *BSG_PackLookupFile(char *name, int *roffs, int *rsize);
byte *BSG_PackReadFile(char *name, int *rsize);
//source/wave.c
BSG_API int BSWV_ScaleSample(short *d, int dl, short *s, int sl);
BSG_API byte *BSWV_LoadWAV(char *name, int *rch, int *rr, int *rbits, int *rlen);
BSG_API void BSWV_StoreWAV(char *name, byte *buf, int ch, int rt, int bits, int len);
BSG_API short *BSWV_LoadWAV_Mono16(char *name, int *rrt, int *rlen);
BSG_API short *BSWV_LoadWAV_44Mono16(char *name, int *rlen);
BSG_API short *BSWV_LoadWAV_16Mono16(char *name, int *rlen);
BSG_API int BSWV_NormalizeSample(short *dst, short *src, int len);
int BSWV_ScaleSampleTrilinear(short *d, int dl, short *s, int sl);
BSG_API int BSWV_ScaleSample(short *d, int dl, short *s, int sl);
int BSWV_SampleCompressor(short *db, int dl, short *sb, int sl,int ivl, int isl, int irl);
//source/bitstream.c
int SGWZ_NextByte();
int SGWZ_SetupReadStream();
int SGWZ_InitStream(byte *buf);
int SGWZ_InitWriteStream(byte *buf);
void SGWZ_AdjustRead();
void SGWZ_AdjustWrite();
int SGWZ_ReadBit();
int SGWZ_ReadNBits(int n);
void SGWZ_SkipNBits(int n);
int SGWZ_PeekWord();
void SGWZ_WriteBit(int i);
void SGWZ_WriteNBits(int i, int n);
void SGWZ_FlushBits();
int SGWZ_ReadByte();
int SGWZ_ReadShort();
int SGWZ_ReadInt();
void SGWZ_WriteByte(int i);
void SGWZ_WriteShort(int i);
void SGWZ_WriteInt(int i);
int SGWZ_ReadUnary();
int SGWZ_ReadRice(int n);
void SGWZ_WriteUnary(int i);
void SGWZ_WriteRice(int v, int n);
int SGWZ_ReadSRice(int n);
void SGWZ_WriteSRice(int v, int n);
//source/wavez.c
int SGWZ_PredSample(int s0, int s1, int s2, int s3, int fn);
int SGWZ_FiltEntropy(short *bp, int len, int fn);
int SGWZ_BestFilt(short *bp, int len, int *ev);
int SGWZ_CalcEncValBits(int v, int st);
int SGWZ_CalcEncBits(short *bp, int len, int fn, int st);
int SGWZ_BestEncBits(short *bp, int len, int fn, int *ev);
int SGWZ_EncodePayload(short *bp, int len, int fn, int st);
int SGWZ_DecodePayload(short *bp, int len, int fn, int st);
BSG_API int SGWZ_Encode(short *bp, int rt, int len, byte *obuf);
BSG_API short *SGWZ_DecodeMono16(byte *buf, int *rrt, int *rlen);
BSG_API short *SGWZ_Decode_44Mono16(byte *buf, int *rlen);
BSG_API short *SGWZ_Decode_16Mono16(byte *buf, int *rlen);
//source/samp.c
int bsg_stricmp(char *s0, char *s1);
short *BSG_LoadSamp_44Mono16(BSG_Voice *ctx, char *name, int *rlen);
BSG_Samp *BSG_FindSamp(BSG_Voice *ctx, char *name);
BSG_Samp *BSG_GetSamp(BSG_Voice *ctx, char *name);
int BSG_DictHash(char *str);
BSG_DictEnt *BSG_DictFirst(BSG_Voice *ctx, char *str);
void BSG_LinkDict(BSG_Voice *ctx, BSG_DictEnt *ent);
BSG_DictEnt *BSG_FindDict(BSG_Voice *ctx, char *str);
BSG_DictEnt *BSG_FindDict2(BSG_Voice *ctx, char *str);
BSG_DictEnt *BSG_FindDictPhon(BSG_Voice *ctx, char *str);
int BSG_LoadDict(BSG_Voice *ctx, char *lst);
//source/lexitem.c
void BSG_GenNumber_r(BSG_State *ctx, int v);
void BSG_GenNumber_th_r(BSG_State *ctx, int v);
void BSG_GenNumber_digit(BSG_State *ctx, int v);
void BSG_GenNumber(BSG_State *ctx, char *s);
void BSG_GenAcron(BSG_State *ctx, char *str);
int BSG_SpellVowel(char *str);
int BSG_SpellConsonant(char *str);
char *BSG_SpellMonograph(char *str);
char *BSG_SpellDigraph(char *str);
char *BSG_SpellTrigraph(char *str);
int BSG_SpellCheckCE(char *str);
int BSG_SpellCheckCV(char *str);
void BSG_GenDecipher(BSG_State *ctx, char *str);
//source/bsgen.c
BSG_API BSG_Voice *BSG_LookupVoice(char *name);
BSG_API BSG_Voice *BSG_NewVoice(char *name, char *base);
BSG_API BSG_Voice *BSG_LoadVoice(char *name, char *base);
BSG_API void BSG_PushWord(BSG_State *ctx, char *s);
BSG_API void BSG_PushWordEnd(BSG_State *ctx, char *s);
BSG_API void BSG_GenPhon(BSG_State *ctx, char *str);
BSG_API void BSG_OutSamples2(BSG_State *ctx, short *buf, int cnt);
BSG_API void BSG_OutStep(BSG_State *ctx, short lv, short iv);
BSG_API void BSG_OutSamples21(BSG_State *ctx, short *buf, int cnt);
BSG_API void BSG_OutSamples(BSG_State *ctx, short *buf, int cnt);
BSG_API void BSG_GenDelay(BSG_State *ctx, int ms);
BSG_API void BSG_OutDict(BSG_State *ctx, BSG_DictEnt *smp);
BSG_API void BSG_Command(BSG_State *ctx, char *str);
BSG_API void BSG_ProcessItem(BSG_State *ctx);
BSG_API void BSG_ProcessItems(BSG_State *ctx);
BSG_API void BSG_GenWord(BSG_State *ctx, char *str);
BSG_API int BSG_ReadSamples(BSG_State *ctx, short *buf, int len);
BSG_API BSG_State *BSG_NewContext(char *voice);
char *BSG_EatWhite(char *s);
int BSG_OpChar(int c);
char *BSG_Token(char *s, char *b);
BSG_API void BSG_SendTextSentence(BSG_State *ctx, char *str, char *lt);
BSG_API void BSG_SendText(BSG_State *ctx, char *str);
