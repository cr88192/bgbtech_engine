//AHSRC:math_m3.c
VECMATH_API void Mat3F_Copy(float *a, float *b);
VECMATH_API void Mat3F_Transpose(float *a, float *b);
VECMATH_API void Mat3F_Identity(float *a);
VECMATH_API void Mat3F_Mat3Mult(float *a, float *b, float *c);
VECMATH_API void Mat3F_Mat3MultT(float *a, float *b, float *c);
VECMATH_API void Mat3F_Mat3TMult(float *a, float *b, float *c);
VECMATH_API void Mat3F_TransformVector(float *a, float *xform, float *c);
VECMATH_API void Mat3F_Inverse(float *a, float *b);
VECMATH_API void Mat3F_AxisTo3Matrix(float *a, float th, float *b);
VECMATH_API void Mat3F_Filter3Matrix(float *a, float *b);
VECMATH_API void Mat3F_Rotate3Matrix(float *a, float *v, float th, float *b);
VECMATH_API int Mat3F_ArcPolate(float *v0, float *v1, float *v2, float t,float *rnv);
VECMATH_API void Mat3F_LinePolate(float *v0, float *v1, float *v2, float t,float *n);
VECMATH_API void Mat3F_Interpolate(float *m0, float *m1, float *m2, float t);
//AHSRC:math_m4.c
VECMATH_API void Mat4F_Identity(float *a);
VECMATH_API void Mat4F_Copy(float *a, float *b);
VECMATH_API int Mat4F_Equal(float *a, float *b);
VECMATH_API void Mat4F_MatMult(float *a, float *b, float *c);
VECMATH_API void Mat4F_Transpose(float *a, float *b);
VECMATH_API void Mat4F_Inverse(float *a, float *b);
VECMATH_API void Mat4F_Inverse(float *a, float *b);
VECMATH_API void Mat4F_InverseTransform(float *a, float *b);
VECMATH_API void Mat4F_InterpolateTransform(float *m0, float *m1, float *m2, float t);
VECMATH_API void Mat4F_TransformVector(float *dir, float *xform, float *v);
VECMATH_API void Mat4F_TransformVectorT(float *dir, float *xform, float *v);
VECMATH_API void Mat4F_TransformNormal(float *dir, float *xform, float *norm);
VECMATH_API void Mat4F_TransformNormalT(float *dir, float *xform, float *norm);
VECMATH_API void Mat4F_TransformNormalN(float *dir, float *xform, float *norm);
VECMATH_API void Mat4F_TransformNormalNT(float *dir, float *xform, float *norm);
VECMATH_API void Mat4F_TransformPoint(float *point, float *xform, float *org);
VECMATH_API void Mat4F_TransformPointT(float *point, float *xform, float *org);
VECMATH_API void Mat4F_TransformPointN(float *point, float *xform, float *org);
VECMATH_API void Mat4F_TransformPointNT(float *point, float *xform, float *org);
VECMATH_API void Mat4F_TransformPointLocal(float *point, float *xform, float *org);
VECMATH_API void Mat4F_TransformPointLocalT(float *point, float *xform, float *org);
VECMATH_API void Mat4F_AxisTo4Matrix(float *a, float th, float *b);
VECMATH_API void Mat4F_Filter4Matrix(float *a, float *b);
VECMATH_API void Mat4F_Rotate4Matrix(float *a, float *v, float th, float *b);
VECMATH_API void Mat4F_Set4MatrixRotXY(float *a, float th);
VECMATH_API void Mat4F_Set4MatrixRotXZ(float *a, float th);
VECMATH_API void Mat4F_Set4MatrixRotYZ(float *a, float th);
VECMATH_API void Mat4F_Set4MatrixRotXW(float *a, float th);
VECMATH_API void Mat4F_Set4MatrixRotYW(float *a, float th);
VECMATH_API void Mat4F_Set4MatrixRotZW(float *a, float th);
VECMATH_API void Mat4F_Rotate4MatrixXY(float *a, float th, float *b);
VECMATH_API void Mat4F_Rotate4MatrixXZ(float *a, float th, float *b);
VECMATH_API void Mat4F_Rotate4MatrixYZ(float *a, float th, float *b);
VECMATH_API void Mat4F_Rotate4MatrixXW(float *a, float th, float *b);
VECMATH_API void Mat4F_Rotate4MatrixYW(float *a, float th, float *b);
VECMATH_API void Mat4F_Rotate4MatrixZW(float *a, float th, float *b);
VECMATH_API void Mat4F_Rotate4MatrixAngles(float *a, float *ang, float *b);
//AHSRC:math_mf.c
VECMATH_API void Mat34F_MatMult(float *a, float *b, float *c);
VECMATH_API void Mat34F_Transpose(float *a, float *b);
VECMATH_API void Mat3to4F_Copy(float *a, float *b);
VECMATH_API void Mat3to4F_Transpose(float *a, float *b);
//AHSRC:math_n.c
VECMATH_API float Vec3F_DistLine(float *pt, float *v0, float *v1);
VECMATH_API float Vec3F_DistLineSeg(float *pt, float *v0, float *v1);
//AHSRC:math_plane.c
VECMATH_API int PlaneF_LinePlaneIntersect(float *start, float *end, float *norm,float *point);
VECMATH_API int PlaneF_CheckLinePlane(float *start, float *end, float *norm);
VECMATH_API int PlaneF_ClipLinePlane(float *start, float *end, float *norm);
VECMATH_API void PlaneF_NearestPointLinePlane(float *start, float *end,float *norm, float *pt);
VECMATH_API int PlaneF_CheckPlaneBox(float *norm, float *mins, float *maxs);
VECMATH_API void PlaneF_BoxAxisExtents(float *mins, float *maxs,float *norm, float *min, float *max);
VECMATH_API void PlaneF_BoxPlaneExtents(float *mins, float *maxs,float *norm, float *min, float *max);
VECMATH_API void PlaneF_TransformVector(float *dir, float *xform, float *v);
VECMATH_API void PlaneF_TransformVectorT(float *dir, float *xform, float *v);
VECMATH_API void PlaneF_TransformNormal(float *dir, float *xform, float *norm);
VECMATH_API void PlaneF_TransformNormalT(float *dir, float *xform, float *norm);
VECMATH_API void PlaneF_TransformNormalN(float *dir, float *xform, float *norm);
VECMATH_API void PlaneF_TransformNormalNT(float *dir, float *xform, float *norm);
VECMATH_API void PlaneF_TransformPoint(float *point, float *xform, float *org);
VECMATH_API void PlaneF_TransformPointT(float *point, float *xform, float *org);
VECMATH_API void PlaneF_TransformPointN(float *point, float *xform, float *org);
VECMATH_API void PlaneF_TransformPointNT(float *point, float *xform, float *org);
VECMATH_API void PlaneF_TransformPointLocal(float *point, float *xform, float *org);
VECMATH_API void PlaneF_AdjacentNormals(float *n, float *x, float *y);
VECMATH_API void PlaneF_AdjacentNormals2(float *norm, float *udir, float *vdir);
//AHSRC:math_quat.c
VECMATH_API void QuatF_Identity(float *a);
VECMATH_API void QuatF_Negate(float *a, float *b);
VECMATH_API void QuatF_Conjugate(float *a, float *b);
VECMATH_API void QuatF_Recip(float *a, float *b);
VECMATH_API float QuatF_Magnitude(float *a);
VECMATH_API float QuatF_Normalize(float *a, float *b);
VECMATH_API void QuatF_Multiply(float *a, float *b, float *c);
VECMATH_API void QuatF_ToMatrix(float *a, float *b);
VECMATH_API void QuatF_To3Matrix(float *a, float *b);
VECMATH_API void QuatF_FromMatrix(float *a, float *b);
VECMATH_API void QuatF_From3Matrix(float *a, float *b);
VECMATH_API void QuatF_FromAxis(float *a, float b, float *c);
VECMATH_API void QuatF_ToAxis(float *a, float *b, float *c);
VECMATH_API void QuatF_FromAngles(float *a, float *b);
VECMATH_API void QuatF_ToAngles(float *a, float *b);
VECMATH_API void QuatF_Lerp(float *a, float *b, float t, float *c);
VECMATH_API void QuatF_SLerp(float *a, float *ib, float t, float *c);
//AHSRC:math_v3f.c
VECMATH_API void Vec3F_Set(float *a, float x, float y, float z);
VECMATH_API void Vec3F_Zero(float *a);
VECMATH_API void Vec3F_Copy(float *a, float *b);
VECMATH_API void Vec3F_Add(float *a, float *b, float *c);
VECMATH_API void Vec3F_Subtract(float *a, float *b, float *c);
VECMATH_API void Vec3F_Scale(float *a, float b, float *c);
VECMATH_API float Vec3F_DotProduct(float *a, float *b);
VECMATH_API float Vec3F_Length(float *a);
VECMATH_API void Vec3F_ScaleAdd(float *a, float b, float *c, float *d);
VECMATH_API void Vec3F_AddScale(float *a, float *b, float c, float *d);
VECMATH_API void Vec3F_ScaleAddScale(float *a, float b, float *c, float d, float *e);
VECMATH_API float Vec3F_Normalize(float *a, float *b);
VECMATH_API float Vec3F_Distance(float *a, float *b);
VECMATH_API void Vec3F_CrossProduct(float *a, float *b, float *c);
VECMATH_API float Vec3F_NearestRayDistance(float *a, float *adir, float *b, float *bdir);
VECMATH_API float Vec3F_NearestRayPoints(float *a, float *adir, float *b, float *bdir,float *pA, float *pB);
VECMATH_API float Vec3F_NearestLinePoints(float *As, float *Ae, float *Bs, float *Be,float *pA, float *pB);
VECMATH_API float Vec3F_NearestLineDistance(float *As, float *Ae, float *Bs, float *Be);
VECMATH_API int Vec3F_BoxTouchP(float *ma, float *na, float *mb, float *nb);
VECMATH_API int Vec3F_BoxCollideP(float *ma, float *na, float *mb, float *nb);
VECMATH_API void Vec3F_LinePlaneIntersect(float *start, float *end, float *norm,float *point);
VECMATH_API int Vec3F_LineBoxCollideP(float *m, float *n, float *s, float *e);
VECMATH_API void Vec3F_QuatToEulerYXZ(float *quat, float *ang);
VECMATH_API void Vec3F_QuatToEulerZXY(float *quat, float *ang);
VECMATH_API void Vec3F_QuatToEulerXYZ(float *quat, float *ang);
VECMATH_API void Vec3F_QuatFromEulerZXY(float *quat, float *ang);
VECMATH_API void Vec3F_Mat3ToEuler(float *mat, float *ang);
VECMATH_API void Vec3F_QuatToEulerZXZ(float *quat, float *ang);
VECMATH_API void Vec3F_AxisToRot3(float *axis, float angle, float *rot);
VECMATH_API void Vec3F_RotatePointAxis(float *src, float *axis, float angle, float *dst);
//AHSRC:math_vnf.c
VECMATH_API void VecNF_Copy(float *a, float *b, int n);
VECMATH_API void VecNF2D_Copy(float *a, double *b, int n);
VECMATH_API void VecNF_ResizeVector(float *a, int an, float *b, int bn);
VECMATH_API float VecNF_DotProduct(float *a, float *b, int n);
VECMATH_API float VecNF_Length(float *a, int n);
VECMATH_API float VecNF_Normalize(float *a, float *b, int n);
VECMATH_API float VecNF_Distance(float *a, float *b, int n);
VECMATH_API void VecNF_Add(float *a, float *b, float *c, int n);
VECMATH_API void VecNF_Subtract(float *a, float *b, float *c, int n);
VECMATH_API void VecNF_Scale(float *a, float b, float *c, int n);
VECMATH_API void VecNF_ScaleAdd(float *a, float b, float *c, float *d, int n);
VECMATH_API void VecNF_AddScale(float *a, float *b, float c, float *d, int n);
VECMATH_API void VecNF_ScaleAddScale(float *a, float b, float *c, float d, float *e, int n);
VECMATH_API void VecNF_Zero(float *a, int n);
VECMATH_API void VecNF_Const(float *a, float b, int n);
VECMATH_API void VecNF_ProjectPointOnPlane(float *d, float *v, float *z, int n);
VECMATH_API void VecNF_ProjectPointOnPlane2(float *d, float *v, float *z, int n);
VECMATH_API void VecNF_ProjectPointBelowPlane(float *d, float *v, float *z, int n);
VECMATH_API void VecNF_ProjectPointAbovePlane(float *d, float *v, float *z, int n);
VECMATH_API void VecNF_LinePlaneIntersect(float *start, float *end, float *norm,float *point, int n);
VECMATH_API int VecNF_CheckPlaneBox(float *norm, float *mins, float *maxs, int n);
//AHSRC:math_hullf.c
VECMATH_API void HullF_MakePlaneFace(float *norm, float *pts);
VECMATH_API int HullF_ClipFace(float *norm,float *ipts, float *opts, int num);
VECMATH_API int HullF_BoxHull(float *norm, int num,float *mins, float *maxs);
//AHSRC:mathlib_d.c
VECMATH_API void MatND_MatMult(double *a, int ah, int aw, double *b, int bh, int bw, double *c);
VECMATH_API void MatND_MatMultVector(double *a, double *b, double *c, int n);
VECMATH_API void MatND_MatMultScaler(double *a, double b, double *c, int n);
VECMATH_API void MatND_ResizeMatrix(double *a, int ah, int aw, double *b, int bh, int bw);
VECMATH_API void MatND_FillIdentity(double *a, int n);
VECMATH_API void MatND_Copy(double *a, double *b, int h, int w);
VECMATH_API void Vec16D_RotateMatrix(double *amat, double *angles, double *bmat);
VECMATH_API void MatND_GetLowerMatrix(double *a, double *b, int n);
VECMATH_API void MatND_GetUpperMatrix(double *a, double *b, int n);
VECMATH_API void Vec16D_TranslateMatrix(double *amat, double *pos, double *bmat);
VECMATH_API void MatND_SwapOrder(double *a, double *b, int n);
VECMATH_API void MatND_Inverse(double *a, double *b, int n);
VECMATH_API void VecND_Copy(double *a, double *b, int n);
VECMATH_API void VecND2F_Copy(double *a, float *b, int n);
VECMATH_API void VecND_ResizeVector(double *a, int an, double *b, int bn);
VECMATH_API double VecND_DotProduct(double *a, double *b, int n);
VECMATH_API double VecND_Length(double *a, int n);
VECMATH_API double VecND_Normalize(double *a, double *b, int n);
VECMATH_API double VecND_Distance(double *a, double *b, int n);
VECMATH_API void VecND_Add(double *a, double *b, double *c, int n);
VECMATH_API void VecND_Subtract(double *a, double *b, double *c, int n);
VECMATH_API void VecND_Scale(double *a, double b, double *c, int n);
VECMATH_API void VecND_ScaleAdd(double *a, double b, double *c, double *d, int n);
VECMATH_API void VecND_AddScale(double *a, double *b, double c, double *d, int n);
VECMATH_API void VecND_ScaleAddScale(double *a, double b, double *c, double d, double *e, int n);
VECMATH_API void VecND_Zero(double *a, int n);
VECMATH_API void VecND_Const(double *a, double b, int n);
VECMATH_API void VecND_ProjectPointOnPlane(double *d, double *v, double *z, int n);
VECMATH_API void Vec3D_CrossProduct (double *v1, double *v2, double *cross);
VECMATH_API void Vec3D_ToSphericalCoords(double *a, double *b);
VECMATH_API void Vec3D_FromSphericalCoords(double *a, double *b);
VECMATH_API void Vec16D_InvertAngles(double *amat, double *bmat);
VECMATH_API void Vec3D_RotatePoint(double *p, double *angles);
VECMATH_API void Vec3D_CalcAngleVectors(double *angles, double *forward, double *right, double *up);
VECMATH_API void Vec3D_PointToParentSpace(double *a, double *sp, double *b);
//AHSRC:mathlib_f.c
VECMATH_API float *VecNF_AllocVec(int sz);
VECMATH_API double *VecND_AllocVec(int sz);
VECMATH_API void MatNF_MatMult(float *a, int ah, int aw, float *b, int bh, int bw, float *c);
VECMATH_API void MatNF_MatMultVector(float *a, float *b, float *c, int n);
VECMATH_API void MatNF_MatMultScaler(float *a, float b, float *c, int n);
VECMATH_API void MatNF_ResizeMatrix(float *a, int ah, int aw, float *b, int bh, int bw);
VECMATH_API void MatNF_FillIdentity(float *a, int n);
VECMATH_API void MatNF_Copy(float *a, float *b, int h, int w);
VECMATH_API void Vec16F_RotateMatrix(float *amat, float *angles, float *bmat);
VECMATH_API void MatNF_GetLowerMatrix(float *a, float *b, int n);
VECMATH_API void MatNF_GetUpperMatrix(float *a, float *b, int n);
VECMATH_API void Vec16F_TranslateMatrix(float *amat, float *pos, float *bmat);
VECMATH_API void Vec16F_ScaleMatrix(float *amat, float *pos, float *bmat);
VECMATH_API void MatNF_SwapOrder(float *a, float *b, int n);
VECMATH_API void MatNF_Inverse(float *a, float *b, int n);
VECMATH_API void Vec3F_ToSphericalCoords(float *a, float *b);
VECMATH_API void Vec3F_FromSphericalCoords(float *a, float *b);
VECMATH_API void Vec16F_InvertAngles(float *amat, float *bmat);
VECMATH_API void Vec3F_RotatePoint(float *p, float *angles);
VECMATH_API void Vec3F_CalcAngleVectors(float *angles, float *forward, float *right, float *up);
VECMATH_API void Vec3F_NormalToParentSpace(float *a, float *sp, float *b);
VECMATH_API void Vec3F_NormalFromParentSpace(float *a, float *sp, float *b);
VECMATH_API void Vec3F_NormalToChildSpace(float *a, float *sp, float *b);
VECMATH_API void Vec3F_NormalFromChildSpace(float *a, float *sp, float *b);
VECMATH_API void Vec3F_PointToParentSpace(float *a, float *sp, float *b);
VECMATH_API void Vec3F_PointFromParentSpace(float *a, float *sp, float *b);
VECMATH_API void Vec3F_PointToChildSpace(float *a, float *sp, float *b);
VECMATH_API void Vec3F_PointFromChildSpace(float *a, float *sp, float *b);
VECMATH_API float Scaler_Random();
VECMATH_API float Scaler_SignRandom();
//AHSRC:math_solid.c
VECMATH_API void SolidAABB_BoxMove(float *bmins, float *bmaxs,float *start, float *end, float *mins, float *maxs);
VECMATH_API int SolidAABB_BoxCollideP(float *ma, float *na, float *mb, float *nb);
VECMATH_API int SolidAABB_BoxCollideAxis(float *ma, float *na, float *mb, float *nb);
VECMATH_API int SolidAABB_PointInBoxP(float *p, float *min, float *max);
VECMATH_API void SolidAABB_BoxIntersection(float *ma, float *na,float *mb, float *nb, float *mc, float *nc);
VECMATH_API int SolidAABB_BoxLineCollideP(float *min, float *max, float *sp, float *ep);
VECMATH_API int SolidOBB_CheckObbPlane(float *mins, float *maxs,float *xform, float *norm, float *io);
VECMATH_API void SolidOBB_GenPoints(float *mins, float *maxs, float *pos, float *pts);
VECMATH_API int SolidOBB_ObbPlaneIntersect(float *mins, float *maxs,float *xform, float *norm, float *io);
VECMATH_API int SolidOBB_ObbPlaneExtents(float *mins, float *maxs,float *xform, float *norm, float *ext);
VECMATH_API void SolidOBB_PlaneExtents(float *mins, float *maxs,float *xform, float *norm, float *min, float *max);
VECMATH_API int SolidOBB_ObbPlaneMoveExtents(float *mins, float *maxs,float *sxform, float *exform, float *norm, float *ext);
VECMATH_API int SolidOBB_CheckObbMovePlane(float *mins, float *maxs,float *sxform, float *exform, float *norm, float *io);
VECMATH_API int SolidOBB_CheckCollide(float *amins, float *amaxs, float *apos, float *bmins, float *bmaxs, float *bpos);
VECMATH_API int SolidOBB_CheckObbMove(float *amins, float *amaxs, float *aspos, float *aepos, float *bmins, float *bmaxs, float *bspos, float *bepos, float *org);
VECMATH_API int SolidOBB_ObbImpactNormal(float *amins, float *amaxs, float *aspos, float *aepos, float *bmins, float *bmaxs, float *bspos, float *bepos, float *vel, float *norm);
VECMATH_API void SolidOBB_Box(float *mins, float *maxs, float *pos,float *bmins, float *bmaxs);
VECMATH_API void SolidOBB_BoxMove(float *mins, float *maxs, float *spos, float *epos, float *bmins, float *bmaxs);
VECMATH_API int SolidOBB_ObbPointCollide(float *mins, float *maxs, float *pos, float *org);
VECMATH_API int SolidOBB_BoxLineCollideP(float *min, float *max, float *pos,float *sp, float *ep);
//AHSRC:math_vecnf.c
void *VecNF_Ralloc(int sz);
//AHSRC:wint/math_wint.c
void WInt_Zero64(u16 *a);
void WInt_Zero128(u16 *a);
void WInt_Zero256(u16 *a);
void WInt_Zero512(u16 *a);
void WInt_Zero1024(u16 *a);
void WInt_Copy64(u16 *a, u16 *b);
void WInt_Copy128(u16 *a, u16 *b);
void WInt_Copy256(u16 *a, u16 *b);
void WInt_Copy512(u16 *a, u16 *b);
void WInt_Copy1024(u16 *a, u16 *b);
void WInt_Copy64S(u16 *a, u16 *b, int sg);
void WInt_Copy128S(u16 *a, u16 *b, int sg);
void WInt_Copy256S(u16 *a, u16 *b, int sg);
void WInt_Copy512S(u16 *a, u16 *b, int sg);
void WInt_Copy1024S(u16 *a, u16 *b, int sg);
void WInt_Add64(u16 *a, u16 *b, u16 *c);
void WInt_Sub64(u16 *a, u16 *b, u16 *c);
void WInt_Add128(u16 *a, u16 *b, u16 *c);
void WInt_Sub128(u16 *a, u16 *b, u16 *c);
void WInt_Add256(u16 *a, u16 *b, u16 *c);
void WInt_Sub256(u16 *a, u16 *b, u16 *c);
void WInt_Add512(u16 *a, u16 *b, u16 *c);
void WInt_Sub512(u16 *a, u16 *b, u16 *c);
void WInt_Add1024(u16 *a, u16 *b, u16 *c);
void WInt_Sub1024(u16 *a, u16 *b, u16 *c);
void WInt_Inc64(u16 *a);
void WInt_Inc128(u16 *a);
void WInt_Inc256(u16 *a);
void WInt_Inc512(u16 *a);
void WInt_Inc1024(u16 *a);
int WInt_CmpEq64(u16 *a, u16 *b);
int WInt_CmpEq128(u16 *a, u16 *b);
int WInt_CmpEq256(u16 *a, u16 *b);
int WInt_CmpEq512(u16 *a, u16 *b);
int WInt_CmpEq1024(u16 *a, u16 *b);
int WInt_CmpBE64(u16 *a, u16 *b);
int WInt_CmpBE128(u16 *a, u16 *b);
int WInt_CmpBE256(u16 *a, u16 *b);
int WInt_CmpBE512(u16 *a, u16 *b);
int WInt_CmpBE1024(u16 *a, u16 *b);
int WInt_CmpB64(u16 *a, u16 *b);
int WInt_CmpB128(u16 *a, u16 *b);
int WInt_CmpB256(u16 *a, u16 *b);
int WInt_CmpB512(u16 *a, u16 *b);
int WInt_CmpB1024(u16 *a, u16 *b);
int WInt_CmpA64(u16 *a, u16 *b);
int WInt_CmpA128(u16 *a, u16 *b);
int WInt_CmpA256(u16 *a, u16 *b);
int WInt_CmpA512(u16 *a, u16 *b);
int WInt_CmpA1024(u16 *a, u16 *b);
void WInt_Neg64(u16 *a);
void WInt_Neg128(u16 *a);
void WInt_Neg256(u16 *a);
void WInt_Neg512(u16 *a);
void WInt_Neg1024(u16 *a);
int WInt_Abs64(u16 *a, u16 *b);
int WInt_Abs128(u16 *a, u16 *b);
int WInt_Abs256(u16 *a, u16 *b);
int WInt_Abs512(u16 *a, u16 *b);
int WInt_Abs1024(u16 *a, u16 *b);
void WInt_MulW(u16 *a, u16 *b, u16 *c, int w);
void WInt_Mul64(u16 *a, u16 *b, u16 *c);
void WInt_Mul128(u16 *a, u16 *b, u16 *c);
void WInt_Mul256(u16 *a, u16 *b, u16 *c);
void WInt_Mul512(u16 *a, u16 *b, u16 *c);
void WInt_Mul1024(u16 *a, u16 *b, u16 *c);
int WInt_Shr64_1(u16 *a);
int WInt_Shr128_1(u16 *a);
int WInt_Shr256_1(u16 *a);
int WInt_Shr512_1(u16 *a);
int WInt_Shr1024_1(u16 *a);
void WInt_Div64(u16 *a, u16 *b, u16 *c, u16 *d);
void WInt_Div128(u16 *a, u16 *b, u16 *c, u16 *d);
