//AHSRC:base/th_api.c
void BGBGC_PushRootFrame();
void BGBGC_PopRootFrame();
void BGBGC_PushFrameRoot(void **ref);
void bgbgc_thread_markctx(thContext *inf);
void bgbgc_thread_mark();
void bgbgc_thread_init();
BGBGC_API int thAllocTls();
BGBGC_API int thAllocTlsName(char *name, int sz);
BGBGC_API void thFreeTls(int idx);
BGBGC_API void *thGetTlsValue(int idx);
BGBGC_API void thSetTlsValue(int idx, void *val);
BGBGC_API void *thGetTlsPtr(int idx);
BGBGC_API void *thThread(int (*fcn)(void *ptr), void *ptr);
void BGBGC_SuspendThreads();
void BGBGC_ResumeThreads();
void BGBGC_HandleThreadStates(void (*fcn)(thContext *inf));
void BGBGC_GetThreadRegisterState(thContext *inf, BGBGC_RegisterState *regs);
BGBGC_API void *thMutex();
BGBGC_API void thLockMutex(void *p);
BGBGC_API int thTryLockMutex(void *p);
BGBGC_API void thUnlockMutex(void *p);
BGBGC_API void thFreeMutex(void *p);
BGBGC_API void *thMutex();
BGBGC_API void thLockMutex(void *p);
BGBGC_API int thTryLockMutex(void *p);
BGBGC_API void thUnlockMutex(void *p);
BGBGC_API void thFreeMutex(void *p);
BGBGC_API void *thFastMutex();
BGBGC_API void thLockFastMutex(void *p);
BGBGC_API int thTryLockFastMutex(void *p);
BGBGC_API void thUnlockFastMutex(void *p);
BGBGC_API void thFreeFastMutex(void *p);
BGBGC_API void thSleep(int ms);
BGBGC_API thContext *thGetContext();
BGBGC_API int thGetTlsTlsW32();
BGBGC_API void thWaitPtr(void *ptr);
BGBGC_API void thSignalPtr(void *ptr);
void BGBGC_SuspendThreads();
void BGBGC_ResumeThreads();
void *BGBGC_ThreadProcLnx(void *parm);
BGBGC_API void *thThread(int (*fcn)(void *ptr), void *ptr);
void *thMutexLL();
BGBGC_API void *thMutex();
BGBGC_API void thLockMutex(void *p);
BGBGC_API int thTryLockMutex(void *p);
BGBGC_API void thUnlockMutex(void *p);
BGBGC_API void thFreeMutex(void *p);
BGBGC_API void *thFastMutex();
BGBGC_API void thLockFastMutex(void *p);
BGBGC_API int thTryLockFastMutex(void *p);
BGBGC_API void thUnlockFastMutex(void *p);
BGBGC_API void thFreeFastMutex(void *p);
BGBGC_API void thSleep(int ms);
BGBGC_API thContext *thGetContext();
BGBGC_API void thWaitPtr(void *ptr);
BGBGC_API void thSignalPtr(void *ptr);
BGBGC_API void *thThread(int (*fcn)(void *ptr), void *ptr);
BGBGC_API void *thMutex();
BGBGC_API void thLockMutex(void *p);
BGBGC_API int thTryLockMutex(void *p);
BGBGC_API void thUnlockMutex(void *p);
BGBGC_API void thSleep(int ms);
BGBGC_API void thWaitPtr(void *ptr);
BGBGC_API void thSignalPtr(void *ptr);
//AHSRC:base/th_queue.c
void *thNewQueue();
int thQueueMsg(void *obj);
int thQueueMsgP(void *obj);
void *thQueueRecv(void *obj);
void *thQueueTryRecv(void *obj);
void *thQueueSend(void *obj, void *val);
void thThrow(char *name);
void thTryCatchFinal(void *data,void (*try_f)(void *data), void (*catch_f)(void *data, char *name), void (*final_f)(void *data));
void thTryCatch(void *data,void (*try_f)(void *data), void (*catch_f)(void *data, char *name));
void thTryFinal(void *data,void (*try_f)(void *data), void (*final_f)(void *data));
//AHSRC:base/th_work.c
BGBGC_API int BGBGC_RegisterSpawnWorker(BGBGC_WorkerInfo *(*spawn)(void *data));
int BGBGC_TimeMS();
int BGBGC_DoWorkMS(int ms);
BGBGC_Job *BGBGC_WorkerGetJob(BGBGC_WorkerInfo *info);
int BGBGC_WorkerLoop(void *p);
void BGBGC_AddJobEnd(BGBGC_Job *job);
void BGBGC_DispatchDelayWork(int dt);
void BGBGC_DispatchBlockedWork(int dt);
void BGBGC_DispatchWork();
void BGBGC_SpawnWorker(int workId);
void BGBGC_DispatchWork2(int workId);
void BGBGC_WorkInit();
BGBGC_API BGBGC_Job *thAddJob(void *(*fcn)(void *data), void *data);
BGBGC_API BGBGC_Job *thAddJobDelay(void *(*fcn)(void *data), void *data, int ms);
BGBGC_API BGBGC_Job *thAddJobBlocked(void *(*fcn)(void *data), int (*blocked)(void *data), void *data);
BGBGC_API BGBGC_Job *thAddJobId(void *(*fcn)(void *data), void *data, int workId);
BGBGC_API void thFreeJob(BGBGC_Job *job);
BGBGC_API void *thJobGetData(BGBGC_Job *job);
BGBGC_API void *thJobGetValue(BGBGC_Job *job);
BGBGC_API int thJobGetDone(BGBGC_Job *job);
BGBGC_API int thDoWorkMS(int ms);
//AHSRC:base/th_profile.c
BGBGC_API BGBGC_ImportFuncs_t *BGBGC_GetImportFuncs();
char *BGBGC_GetAddrName(void *ptr);
char *BGBGC_GetAddrLastName(void *ptr, void **rbp);
char *BGBGC_LookupSectionAddrName(void *ptr);
void BGBGC_ProfileLoop_HandleThread(thContext *inf);
void BGBGC_ProfileDumpStats_SortSwap(int a, int b);
void BGBGC_ProfileDumpStats_Sort(int base, int lim);
void BGBGC_ProfileDumpStats_AggAddName(char *lib, char *sym, int cnt);
void BGBGC_ProfileDumpStats_SortSwapAgg(int a, int b);
void BGBGC_ProfileDumpStats_SortAgg(int base, int lim);
int BGBGC_ProfileDumpStats();
int BGBGC_ProfileLoop(void *p);
BGBGC_API int BGBGC_ProfilerSetActive(int fl);
//AHSRC:base/eh_throw.c
int BGBGC_EH_Init();
BGBGC_ExceptionType *BGBGC_EH_LookupType(char *name);
BGBGC_ExceptionType *BGBGC_EH_GetType(char *name);
int BGBGC_EH_TypeIsP(BGBGC_ExceptionType *src, BGBGC_ExceptionType *dst);
BGBGC_API int gcehRegisterException(char *name, char *parent);
BGBGC_API gcehException gcehTryFl(void (*func)(void *data), void *data, int fl);
BGBGC_API gcehException gcehTry(void (*func)(void *data), void *data);
BGBGC_API gcehException gcehTrySys(void (*func)(void *data), void *data);
BGBGC_API void gcehThrow(gcehException ex);
BGBGC_API gcehException gcehNew(char *name, char *msg, void *data);
BGBGC_API void gcehThrowNewMsgData(char *name, char *msg, void *data);
BGBGC_API void gcehThrowNew(char *name);
BGBGC_API void gcehThrowNewMsg(char *name, char *msg);
BGBGC_API void gcehThrowNewData(char *name, void *data);
BGBGC_API int gcehCheckIsP(gcehException ex, char *name);
BGBGC_API void gcehFree(gcehException ex);
BGBGC_API char *gcehGetName(gcehException ex);
BGBGC_API char *gcehGetMessage(gcehException ex);
BGBGC_API void *gcehGetData(gcehException ex);
//AHSRC:base/mm_lobj.c
int BGBGC_InitLow();
int BGBGC_BaseHeapLObj(size_t heap);
int BGBGC_LookupLObj(void *p);
int BGBGC_InsertLObj(void *p, int sz, int fl);
void *BGBGC_AllocLObj(int size);
void *BGBGC_AllocLObj(int size);
int BGBGC_FreeLObj(void *p);
int BGBGC_FreeLObjIdx(int i);
int BGBGC_ShiftLObj2();
void BGBGC_ShiftLObj_Swap(int i, int j);
void BGBGC_ShiftLObj_Sort(int base, int lim);
int BGBGC_ShiftLObj();
int BGBGC_LookupLObjS(void *p);
int BGBGC_LookupLObjS2(void *p);
s64 BGBGC_SizeLObjs();
//AHSRC:base/mm_cell.c
BGBGC_Chunk *BGBGC_NewBlock(int size, int exec);
BGBGC_Chunk *BGBGC_GetChunk(void *p);
int BGBGC_ChunkGetEnt(BGBGC_Chunk *chk, int ent);
int BGBGC_ChunkSetEnt(BGBGC_Chunk *chk, int ent, int val);
int BGBGC_CountFreeCells(BGBGC_Chunk *chk, int rov, int cnt);
int BGBGC_CountUsedCells(BGBGC_Chunk *chk, int rov, int cnt);
void *BGBGC_AllocChk(BGBGC_Chunk *chk, int size);
int BGBGC_FreeChk(BGBGC_Chunk *chk, int idx);
int BGBGC_Free(void *p);
int BGBGC_MarkAtomic(void *p);
int BGBGC_MarkAtomicP(void *p);
void *BGBGC_GetBase(void *p);
void *BGBGC_TryGetBase(void *p);
void *BGBGC_TryGetPrecise(void *p);
void *BGBGC_MakePrecise(void *p);
int BGBGC_Init();
int BGBGC_BaseHeap(size_t heap);
int BGBGC_BaseHeapLimit(size_t heap);
int BGBGC_CheckHeapBelowBaseLimit(void);
//AHSRC:base/mm_cons.c
int BGBGC_InitCons();
int BGBGC_BaseHeapCons(size_t heap);
void BGBGC_AllocCBlk();
void *BGBGC_AllocConsInner();
BGBGC_API void *BGBGC_AllocCons();
BGBGC_API void BGBGC_FreeCons(void *p);
int BGBGC_CheckCons(void *ptr);
int BGBGC_ConsP_I(void *p);
BGBGC_API int BGBGC_ConsP(void *p);
int BGBGC_MarkCons(void *p, int i);
int BGBGC_MarkConsPrecise(int idx);
int BGBGC_IncCons(void *p);
int BGBGC_DecCons(void *p);
int BGBGC_SafeDecCons(void *p);
void *BGBGC_DefileCons(void *p);
void *BGBGC_UnDefileCons(void *p);
void *BGBGC_PreciseGetConsPtr(void *p);
void *BGBGC_AllocConsPrecise();
int BGBGC_SweepCons();
//AHSRC:base/mm_fastidx.c
BGBGC_API int gcFiAllocIndex(char *type, int size, int flags);
BGBGC_API void *gcFiIndexAlloc(int idx);
BGBGC_API void gcFiIndexFree(int idx, void *obj);
//AHSRC:base/mm_gc.c
int BGBGC_ProbeDelayGC(int mode);
int BGBGC_CheckNoGC();
int BGBGC_CheckLogAlloc();
int BGBGC_TryFreeTiny(void *p, int szi);
int BGBGC_FlushTiny();
int BGBGC_LockGC();
int BGBGC_UnlockGC();
int BGBGC_LockGC2();
int BGBGC_UnlockGC2();
void *BGBGC_AllocTiny(int szi);
void *BGBGC_Alloc(int size);
void *BGBGC_AllocExec(int size);
void BGBGC_PrintBacktrack(BGBGC_Chunk *chk, int idx);
int BGBGC_Mark(void *p);
int BGBGC_MarkObj(void *p);
int BGBGC_MarkPrecise(void *p);
int BGBGC_MarkObjPrecise(void *p);
int BGBGC_CheckObjPtr(void *p);
int BGBGC_SetLockObj(void *p, int l);
int BGBGC_IncRef(void *p);
int BGBGC_DecRef(void *p);
int BGBGC_SafeDecRef(void *p);
void *BGBGC_Defile(void *p);
void *BGBGC_UnDefile(void *p);
void *BGBGC_PreciseGetPtr(void *p);
void *BGBGC_AllocPrecise(int size);
BGBGC_API int BGBGC_ScanRange0(void **p, int cnt);
BGBGC_API int BGBGC_ScanRange2(void **p, int cnt);
BGBGC_API int BGBGC_ScanRange3(void **p, int cnt);
BGBGC_API int BGBGC_ScanRange(void **p, int cnt);
int BGBGC_PreSweep();
int BGBGC_Sweep();
int BGBGC_PostSweep();
int BGBGC_StackBase(void *p);
int BGBGC_ScanStack();
int BGBGC_Collect();
void BGBGC_CollectHandlePause();
int BGBGC_RunCollect();
void BGBGC_CollectAssign(void **pp, void *p);
void BGBGC_WaitIfGC();
void BGBGC_TryMarkSafe(void *p);
void BGBGC_CollectAssignPrecise(void **pp, void *p);
void BGBGC_CollectDelay();
void BGBGC_CollectPause();
void BGBGC_CollectUnpause();
void BGBGC_CollectUnpauseDelay();
int BGBGC_GetMemoryUseStatus(void);
int BGBGC_CollectLoop(void *p);
int BGBGC_StartCollectLoop();
int BGBGC_GetUsedCells();
int BGBGC_GetFreeCells();
BGBGC_API void BGBGC_AddMarkHandler(void (*fcn)());
int BGBGC_SpawnThread();
int BGBGC_DeinitThread();
//AHSRC:base/mm_heapstat.c
double bgbgc_log2(double f);
int BGBGC_Stat_Scan();
int BGBGC_Stat_SortStats(int *stat, int *idx, int *bytes, int n);
char *BGBGC_Stat_GetIDName(int id);
char *BGBGC_Stat_GetModeName(int id);
int BGBGC_Stat_StatHeap(int fl);
//AHSRC:base/mm_space.c
void BGBGC_InitSpace();
int BGBGC_SpaceAllocSafeP(int bits);
void *BGBGC_SpaceAlloc(int bits);
int BGBGC_CheckSpaceP(void *ptr);
int BGBGC_IndexSpace(void *ptr);
BGBGC_API int gcllSpaceAllocSafeP(int bits);
BGBGC_API void *gcllSpaceNew(char *type, int bits);
BGBGC_API void *gcllSpaceLookup(char *type);
BGBGC_API char *gcllSpaceType(void *ptr);
BGBGC_API int gcllSpaceBits(void *ptr);
BGBGC_API void *gcllSpaceBase(void *ptr);
BGBGC_API void *gcllSpaceEnd(void *ptr);
BGBGC_API s64 gcllSpaceOffset(void *ptr);
BGBGC_API void *gcllSpaceWrap(char *type, s64 offs);
BGBGC_API int gcllSpaceP(void *ptr);
BGBGC_API void *gcllSpaceAbsoluteBase(void *ptr);
BGBGC_API s64 gcllSpaceAbsoluteOffset(void *ptr);
BGBGC_API void *gcllSpaceWrapAbsolute(s64 offs);
//AHSRC:base/mm_strtab.c
char *bgbgc_strdup_alloc(char *str);
BGBGC_API int bgbgc_strdup_i(char *str);
BGBGC_API char *bgbgc_strtab_i(int i);
BGBGC_API char *bgbgc_strdup(char *str);
BGBGC_API int bgbgc_strildup_i(char *str);
BGBGC_API void *bgbgc_ralloc(int sz);
BGBGC_API char *bgbgc_rstrdup(char *str);
//AHSRC:base/objtype.c
void BGBGC_ObjType_FlushTypeCache();
BGBGC_ObjType *BGBGC_ObjType_CheckPtrTypeCache(void *p);
void BGBGC_ObjType_SetPtrTypeCache(void *p, BGBGC_ObjType *ty);
BGBGC_ObjType *BGBGC_NewType(char *name, char *form);
BGBGC_ObjType *BGBGC_FindTypeHash(char *type);
void BGBGC_AddTypeHash(BGBGC_ObjType *type);
BGBGC_ObjType *BGBGC_FindType(char *type);
BGBGC_ObjType *BGBGC_FetchType(char *type);
int BGBGC_IndexType(char *name);
BGBGC_ObjType *BGBGC_FetchIndexType(int idx);
BGBGC_SourceInfo *BGBGC_FetchIndexSourceInfo(int idx);
char *BGBGC_InternType(char *name);
void *BGBGC_New(char *type, int size);
void *BGBGC_NewExec(char *type, int size);
void *BGBGC_NewPrecise(char *type, int size);
void *BGBGC_NewRC(char *type, int size, int fl);
int BGBGC_MarkInfoSane(BGBGC_ObjInfo *inf);
int BGBGC_InfoSaneP(BGBGC_ObjInfo *inf);
int BGBGC_HandleMark(void *p);
int BGBGC_HandleDestroy(void *p);
int BGBGC_HandlePreserve(void *p);
char *BGBGC_HandleGetTypeName(void *p);
int BGBGC_SetMark(char *type, int (*fn)(void *p));
int BGBGC_SetDestroy(char *type, int (*fn)(void *p));
int BGBGC_SetPreserve(char *type, int (*fn)(void *p));
int BGBGC_BadInfoP(BGBGC_ObjInfo *inf);
BGBGC_ObjType *BGBGC_GetType(void *p);
BGBGC_ObjType *BGBGC_GetTypeFast(void *p);
char *BGBGC_GetTypeNameHook(void *p);
char *BGBGC_GetTypeName(void *p);
char *BGBGC_GetTypeNameFast(void *p);
int BGBGC_GetTypeIdx(void *p);
int BGBGC_GetTypeIdxFast(void *p);
int BGBGC_GetSize(void *p);
int BGBGC_GetSizeFast(void *p);
void *BGBGC_GetObjBase(void *p);
size_t BGBGC_GetOffset(void *p);
size_t BGBGC_GetRelSize(void *p);
int BGBGC_TypeP(void *p, char *type);
void *BGBGC_Copy(void *p);
int BGBGC_IncPtr(void *p);
int BGBGC_DecPtr(void *p);
int BGBGC_SafeDecPtr(void *p);
BGBGC_API void *BGBGC_GetTypeVTab(char *str);
BGBGC_API void BGBGC_SetTypeVTab(char *str, void *p);
BGBGC_API void *BGBGC_GetObjVTab(void *p);
int BGBGC_HashSourceInfo(BGBGC_SourceInfo *srcinf);
int BGBGC_IndexSourceInfo(BGBGC_SourceInfo *srcinf);
int BGBGC_GetObjSourceInfo(void *p, BGBGC_SourceInfo *srcinf);
int BGBGC_HandleGetObjSourceInfo(void *p, BGBGC_SourceInfo *srcinf);
int BGBGC_SetObjSourceInfo(void *p, BGBGC_SourceInfo *srcinf);
int BGBGC_SetObjLLn(void *p, char *fn, int ln);
int BGBGC_SetObjLLnAccess(void *p, char *fn, int ln, u32 acc);
int BGBGC_InitTY();
//AHSRC:base/bgbgc_api.c
BGBGC_API void gc_init(void *base);
BGBGC_API void gc_init2(int (*fcn)(void *ptr), void *ptr);
BGBGC_API void gc_init_nogc(void);
BGBGC_API void gc_deinit();
BGBGC_API void gcAddTypeHook(char *(*fcn)(void *p));
BGBGC_API void gcAddLogHook(void (*fcn)(char *str));
BGBGC_API void gcAddDbgLogHook(void (*fcn)(int lvl, char *str));
BGBGC_API void gc_puts(char *str);
BGBGC_API void gc_printf(char *str, ...);
BGBGC_API void gc_dbgputs(int lvl, char *str);
BGBGC_API void gc_dbgprintf(int lvl, char *str, ...);
BGBGC_API void gc_logputs(char *str);
BGBGC_API void gc_logprintf(char *str, ...);
BGBGC_API int gcDelayGC(int mode);
BGBGC_API int gcForceGC(int req);
BGBGC_API int gcBaseHeap(size_t heap);
BGBGC_API int gcBaseHeapLimit(size_t heap);
BGBGC_API int gcBaseHeapLObj(size_t heap);
BGBGC_API int gcBaseHeapCons(size_t heap);
BGBGC_API int gcCheckMemoryLow(void);
BGBGC_API void *gcalloc(size_t sz);
BGBGC_API void *gctalloc(char *ty, size_t sz);
BGBGC_API void *gcallocLLn(size_t sz, char *fn, int ln);
BGBGC_API void *gctallocLLn(char *ty, size_t sz, char *fn, int ln);
BGBGC_API void *gctallocLLnAcc(char *ty, size_t sz,char *fn, int ln, u32 access);
BGBGC_API void *gcatomic(size_t sz);
BGBGC_API void *gctatomic(char *ty, size_t sz);
BGBGC_API void *gcatomicLLn(size_t sz, char *fn, int ln);
BGBGC_API void *gctatomicLLn(char *ty, size_t sz, char *fn, int ln);
BGBGC_API void *gctatomicLLnAcc(char *ty, size_t sz,char *fn, int ln, u32 access);
BGBGC_API void *gcweak(size_t sz);
BGBGC_API void *gcexec(size_t sz);
BGBGC_API void *gctexec(char *ty, size_t sz);
BGBGC_API void *gcallocrc(size_t sz);
BGBGC_API void *gcexecrc(size_t sz);
BGBGC_API void *gctallocrc(char *ty, size_t sz);
BGBGC_API void *gctexecrc(char *ty, size_t sz);
BGBGC_API void *gcrealloc(void *p, size_t sz);
BGBGC_API void *gcmemdup(void *p, size_t sz);
BGBGC_API void gcFlushTypeCache();
BGBGC_API char *gcCheckPtrTypeCache(void *p);
BGBGC_API void gcfree(void *p);
BGBGC_API char *gcgettype(void *p);
BGBGC_API int gcgetsize(void *p);
BGBGC_API void *gcgetbase(void *p);
BGBGC_API int gcIndexType(char *name);
BGBGC_API char *gcInternType(char *name);
BGBGC_API char *gcGetType(void *p);
BGBGC_API int gcGetSize(void *p);
BGBGC_API char *gcGetTypeFast(void *p);
BGBGC_API int gcGetSizeFast(void *p);
BGBGC_API int gcGetTypeIdx(void *p);
BGBGC_API int gcGetTypeIdxFast(void *p);
BGBGC_API int gcGetSourceFileLine(void *p, char **rfn, int *rln);
BGBGC_API u32 gcGetAccess(void *p);
BGBGC_API int gctypep(void *p, char *ty);
BGBGC_API int gcatomicp(void *p);
BGBGC_API int gcsetmark(char *ty, int (*fcn)(void *p));
BGBGC_API int gcsetfinal(char *ty, int (*fcn)(void *p));
BGBGC_API int gcsetpreserve(char *ty, int (*fcn)(void *p));
BGBGC_API void *gctallocu(char *ty, int sz);
BGBGC_API void *gcmalloc(size_t sz);
BGBGC_API void gclock(void *p);
BGBGC_API void gcunlock(void *p);
BGBGC_API void gcinc(void *p);
BGBGC_API void gcdec(void *p);
BGBGC_API void gcsafedec(void *p);
BGBGC_API void gcset(void **r, void *p);
BGBGC_API void gcset64(s64 *r, s64 p);
BGBGC_API void gcsetbyte(void *p, int v);
BGBGC_API void gcsetword(void *p, int v);
BGBGC_API void gcsetint(void *p, int v);
BGBGC_API void gcsetlong(void *p, s64 v);
BGBGC_API void gcsetfloat(void *p, float v);
BGBGC_API void gcsetdouble(void *p, double v);
BGBGC_API void gcSetByte(void *p, int v);
BGBGC_API void gcSetWord(void *p, int v);
BGBGC_API void gcSetInt(void *p, int v);
BGBGC_API void gcSetLong(void *p, s64 v);
BGBGC_API void gcSetFloat(void *p, float v);
BGBGC_API void gcSetDouble(void *p, double v);
BGBGC_API void gcMemCpy(void *p, void *v, int sz);
BGBGC_API void *gcBeginMapExec(void *obj);
BGBGC_API void gcEndMapExec(void *p, void *v);
BGBGC_API void gcclear(void **r);
BGBGC_API void gcDumpHeapStats(int fl);
BGBGC_API char *gcstrdup(char *str);
BGBGC_API void *gcralloc(int sz);
BGBGC_API char *gcrstrdup(char *str);
BGBGC_API char *gcrsprint(char *str, ...);
BGBGC_API char *gcrsprints(char *buf, char *str, ...);
BGBGC_API char **gcrsplit(char *s);
BGBGC_API char *gcrsgets(char *buf, int lim, char *str);
BGBGC_API char *gcrgets(char **str);
BGBGC_API char *gcrgettoken(char **str);
BGBGC_API char *gcrlltoa(s64 v);
BGBGC_API char *gcrdtoa(double v);
BGBGC_API char *gcrdtoa1p(double v);
BGBGC_API char *gcrdtoa2p(double v);
BGBGC_API char *gcrdtoa3p(double v);
BGBGC_API char *gcrdtoa4p(double v);
BGBGC_API s64 gcratoi(char *str);
BGBGC_API void _mcount();
//AHSRC:base/gcp_api.c
void gcpMark(gcp obj);
void gcpInc(gcp obj);
void gcpDec(gcp obj);
void gcpSafeDec(gcp obj);
void gcpSet(gcp *ref, gcp obj);
void gcpClear(gcp *ref);
void gcpPushFrame();
void gcpPopFrame();
void gcpRoot(gcp *ref);
void gcpGlobalRoot(gcp *ref);
void *gcpDefile(gcp obj);
gcp gcpUndefile(void *obj);
void *gcpGrabPtr(gcp obj);
void gcpDropPtr(gcp obj);
gcp gcpAlloc(char *type, int sz);
