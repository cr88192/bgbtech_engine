//AHSRC:svm/bsvm_ops.c
//AHSRC:svm/st_pkg2c.c
void BSVMC_PKG2C_PrintH(char *str, ...);
void BSVMC_PKG2C_PrintC(char *str, ...);
void BSVMC_PKG2C_PrintBS(char *str, ...);
char *BSVMC_PKG2C_SigCTypeName(char *sig);
char *BSVMC_PKG2C_SigCTypeSuf(char *sig);
void BSVMC_PKG2C_EmitProtoNameSig(BSVM_SVMCState *ctx,char *name, char *sig);
void BSVMC_PKG2C_EmitFuncNameSig(BSVM_SVMCState *ctx,char *name, char *sig);
int BSVMC_PKG2C_CompilePackage(BSVM_SVMCState *ctx, dyt l);
void BSVMC_PKG2C_CompileForm(BSVM_SVMCState *ctx, dyt l);
void BSVMC_PKG2C_CompileExpr(BSVM_SVMCState *ctx, dyt l);
void BSVMC_PKG2C_CompileStatement(BSVM_SVMCState *ctx, dyt l);
BGBSVM_API void BSVM_PKG2C_SetAPI(char *name);
BGBSVM_API void BSVM_PKG2C_SetLibHdr(char *name);
BGBSVM_API void BSVM_PKG2C_SetOutC(char *name);
BGBSVM_API void BSVM_PKG2C_SetOutH(char *name);
BGBSVM_API void BSVM_PKG2C_SetOutBS(char *name);
BGBSVM_API void BSVM_PKG2C_CloseOutC();
BGBSVM_API void BSVM_PKG2C_CloseOutH();
BGBSVM_API void BSVM_PKG2C_CloseOutBS();
void BSVM_PKG2C_PrecompileC_EmitToken(char *str, int ty);
char *BSVM_PKG2C_PrecompileC_EmitStrToken(char *str, char *tok, int ty);
void BSVM_PKG2C_PrecompileC_BSTop(char **str);
void BSVM_PKG2C_PrecompileC_BSExpr(char **str);
void BSVM_PKG2C_PrecompileC_PushMark();
void BSVM_PKG2C_PrecompileC_PopMark();
void BSVM_PKG2C_PrecompileC_PushVar(char *name, char *type);
char *BSVM_PKG2C_PrecompileC_FetchVarType(char *name);
bool BSVM_PKG2C_PrecompileC_CModifierP(char *tok);
BGBSVM_API void BSVM_PKG2C_PrecompileC(char *str);
BGBSVM_API void BSVM_PKG2C_CompileScriptFragment(char *buf);
BGBSVM_API void BSVM_PKG2C_LoadCompileScript(char *name);
BGBSVM_API void BSVM_PKG2C_Init();
BGBSVM_API void BSVM_PKG2C_Finish();
//AHSRC:svm/bssrc_auto.c
//AHSRC:interp/si_base.c
BGBSVM_API BSVM_SVMState *BSVM_NewState();
BGBSVM_API void BSVM_DestroyState(BSVM_SVMState *ctx);
BGBSVM_API void BSVM_SetOpCnt(int i);
BGBSVM_API int BSVM_GetOpCnt();
void BSVM_Push(BSVM_SVMState *ctx, dytf val);
dytf BSVM_Pop(BSVM_SVMState *ctx);
void BSVM_PushF(BSVM_SVMState *ctx, dytf val);
dytf BSVM_PopF(BSVM_SVMState *ctx);
void BSVM_Push2(BSVM_SVMState *ctx, dytf x, dytf y);
void BSVM_Push3(BSVM_SVMState *ctx, dytf x, dytf y, dytf z);
void BSVM_Push4(BSVM_SVMState *ctx, dytf x, dytf y, dytf z, dytf w);
void BSVM_Pop2(BSVM_SVMState *ctx, dytf *rx, dytf *ry);
void BSVM_Pop3(BSVM_SVMState *ctx, dytf *rx, dytf *ry, dytf *rz);
void BSVM_Pop4(BSVM_SVMState *ctx, dytf *rx, dytf *ry, dytf *rz, dytf *rw);
void BSVM_PopDestroy(BSVM_SVMState *ctx);
int BSVM_PopBool(BSVM_SVMState *ctx);
void BSVM_PushBool(BSVM_SVMState *ctx, bool val);
void BSVM_PushS32(BSVM_SVMState *ctx, s32 val);
void BSVM_PushS64(BSVM_SVMState *ctx, s64 val);
void BSVM_PushF32(BSVM_SVMState *ctx, f32 val);
void BSVM_PushF64(BSVM_SVMState *ctx, f64 val);
void BSVM_Push2S32(BSVM_SVMState *ctx, s32 x, s32 y);
void BSVM_Push2S64(BSVM_SVMState *ctx, s64 x, s64 y);
void BSVM_Push2F32(BSVM_SVMState *ctx, f32 x, f32 y);
void BSVM_Push2F64(BSVM_SVMState *ctx, f64 x, f64 y);
s32 BSVM_PopS32(BSVM_SVMState *ctx);
s64 BSVM_PopS64(BSVM_SVMState *ctx);
f32 BSVM_PopF32(BSVM_SVMState *ctx);
f64 BSVM_PopF64(BSVM_SVMState *ctx);
dytf BSVM_StackPeekTop(BSVM_SVMState *ctx);
void BSVM_PushList(BSVM_SVMState *ctx, dytf l);
void BSVM_PushSimpleList(BSVM_SVMState *ctx, dyt l);
dytf BSVM_PopList(BSVM_SVMState *ctx);
dytf BSVM_PopList2(BSVM_SVMState *ctx);
dyt BSVM_PopSimpleList(BSVM_SVMState *ctx);
dytf BSVM_StackPeekList(BSVM_SVMState *ctx);
void BSVM_PopMark(BSVM_SVMState *ctx);
dytf *BSVM_PopMarkArgs(BSVM_SVMState *ctx, int *rnargs);
void BSVM_ShiftMark(BSVM_SVMState *ctx);
dytf BSVM_LoadIndex(BSVM_SVMState *ctx, dytf obj, dytf key);
void BSVM_StoreIndex(BSVM_SVMState *ctx, dytf obj, dytf key, dytf val);
dytf BSVM_LoadIndexAddr(BSVM_SVMState *ctx, dytf obj, dytf key);
dytf BSVM_LoadIndexRef(BSVM_SVMState *ctx, dytf obj, dytf key);
dytf BSVM_Unary(BSVM_SVMState *ctx, int i, dytf obj);
dytf BSVM_Binary(BSVM_SVMState *ctx, int i, dytf tl, dytf tr);
dytf BSVM_UnaryS(BSVM_SVMState *ctx, char *sym, dytf obj);
dytf BSVM_BinaryS(BSVM_SVMState *ctx, char *sym, dytf tl, dytf tr);
int BSVM_CondUnary(BSVM_SVMState *ctx, int i, dytf obj);
int BSVM_CondBinary(BSVM_SVMState *ctx, int i, dytf tl, dytf tr);
BGBSVM_API dytf BSVM_ListToVector(dytf lst);
void BSVM_PushFrame(BSVM_SVMState *ctx);
void BSVM_PopFrame(BSVM_SVMState *ctx);
void BSVM_BindArgs(BSVM_SVMState *ctx, dytf kl, dytf vl);
void BSVM_BindArgs2(BSVM_SVMState *ctx, dytf kl, dytf vl);
void BSVM_CallObj_SvmBlock(BSVM_SVMState *ctx, dytf obj, dytf f);
void BSVM_CallObj_SvmLambda(BSVM_SVMState *ctx, dytf obj, dytf f);
void BSVM_CallObj_SvmBuiltin(BSVM_SVMState *ctx, dytf obj, dytf f);
void BSVM_CallObj_Default(BSVM_SVMState *ctx, dytf obj, dytf f);
void BSVM_CallObj(BSVM_SVMState *ctx, dytf obj, dytf f);
void BSVM_TailCallObj(BSVM_SVMState *ctx, dytf obj, dytf f);
void BSVM_MethodCall(BSVM_SVMState *ctx, dytf obj, dytf key);
void BSVM_MethodTailCall(BSVM_SVMState *ctx, dytf obj, dytf key);
void BSVM_CallObjAsync(BSVM_SVMState *ctx, dytf obj, dytf f);
int BSVM_CheckDefined(BSVM_SVMState *ctx, dytf sym);
dytf BSVM_Close(BSVM_SVMState *ctx, dytf f);
dytf BSVM_EnvClose(BSVM_SVMState *ctx, dytf f, dytf l);
//AHSRC:interp/si_baseops.c
char *BSVM_MarkSig(BSVM_SVMState *ctx);
bool BSVM_CheckInstanceOf(BSVM_SVMState *ctx, dytf ty, dytf t);
dytf BSVM_TryCast(BSVM_SVMState *ctx, dytf ty, dytf t);
dytf BSVM_Cast(BSVM_SVMState *ctx, dytf ty, dytf t);
dytf BSVM_OpSizeOf(BSVM_SVMState *ctx, dytf ty);
dytf BSVM_OpNew(BSVM_SVMState *ctx, dytf ty);
dytf BSVM_OpNewArray(BSVM_SVMState *ctx, dytf ty, dytf n);
dytf BSVM_OpNewArrayLst(BSVM_SVMState *ctx, dytf ty, dytf l);
dytf BSVM_OpDelete(BSVM_SVMState *ctx, dytf t);
void BSVM_OpTyBind(BSVM_SVMState *ctx,dytf name, dytf type, dytf flags, dytf val);
void BSVM_OpTyDynBind(BSVM_SVMState *ctx,dytf name, dytf type, dytf flags, dytf val);
void BSVM_OpTyLexBind(BSVM_SVMState *ctx,dytf name, dytf type, dytf flags, dytf val);
void BSVM_OpBeginPackage(BSVM_SVMState *ctx, dytf name, dytf flags);
void BSVM_OpEndPackage(BSVM_SVMState *ctx);
void BSVM_OpBeginClassI(BSVM_SVMState *ctx, dytf name, dytf super, s64 fl);
void BSVM_OpEndClass(BSVM_SVMState *ctx);
void BSVM_OpEndIface(BSVM_SVMState *ctx);
void BSVM_OpEndStruct(BSVM_SVMState *ctx);
void BSVM_OpBeginClass(BSVM_SVMState *ctx, dytf name, dytf super, dytf flags);
void BSVM_OpBeginIface(BSVM_SVMState *ctx, dytf name, dytf super, dytf flags);
void BSVM_OpBeginStruct(BSVM_SVMState *ctx, dytf name, dytf super, dytf flags);
void BSVM_OpClassIface(BSVM_SVMState *ctx, dytf name, dytf flags);
void BSVM_OpImport(BSVM_SVMState *ctx, dytf name, dytf flags);
void BSVM_OpBeginSync(BSVM_SVMState *ctx);
void BSVM_OpEndSync(BSVM_SVMState *ctx);
void BSVM_OpBeginSyncObj(BSVM_SVMState *ctx, dytf obj);
void BSVM_OpEndSyncObj(BSVM_SVMState *ctx, dytf obj);
void BSVM_OpThrowObj(BSVM_SVMState *ctx, dytf obj);
void BSVM_OpThrowS(BSVM_SVMState *ctx, dytf obj);
void BSVM_OpThrowName(BSVM_SVMState *ctx, char *name);
void BSVM_OpBeginTry(BSVM_SVMState *ctx);
void BSVM_OpEndTry(BSVM_SVMState *ctx);
void BSVM_OpBeginCatch(BSVM_SVMState *ctx, dytf ty);
void BSVM_OpEndCatch(BSVM_SVMState *ctx);
void BSVM_OpBeginCatchFinal(BSVM_SVMState *ctx);
void BSVM_OpSetupJoin(BSVM_SVMState *ctx, dytf obj);
//AHSRC:interp/si_interp.c
dyt bsvm_special_apply(dyt fcn, dyt *args, int nargs);
dyt bsvm_special_applyobj(dyt fcn, dyt obj, dyt *args, int nargs);
void bsvm_special_encbinary_blk(dysObjectStream ctx, dyt val);
dyt bsvm_special_decbinary_blk(dysObjectStream ctx);
void bsvm_special_encbinary_blkbc(dysObjectStream ctx, dyt val);
dyt bsvm_special_decbinary_blkbc(dysObjectStream ctx);
void bsvm_special_encbinary_varinfo(dysObjectStream ctx, dyt val);
void bsvm_special_encbinary_overlayinfo(dysObjectStream ctx, dyt val);
dyt bsvm_special_decbinary_varinfo(dysObjectStream ctx);
dyt bsvm_special_decbinary_overlayinfo(dysObjectStream ctx);
int bsvm_special_blockedThread(void *data);
void *bsvm_special_runThread(void *data);
void BSVM_RunThread(BSVM_SVMState *ctx);
void BSVM_LockVM();
void BSVM_UnlockVM();
BGBSVM_API int BSVM_Init_Base();
BGBSVM_API int BSVM_ToolsInit();
BGBSVM_API int BSVM_Init();
dytf BSVM_ReadID(BSVM_SVMState *ctx);
int BSVM_ReadIDX(BSVM_SVMState *ctx);
int BSVM_ReadSIDX(BSVM_SVMState *ctx);
s64 BSVM_ReadVLI(BSVM_SVMState *ctx);
s64 BSVM_ReadSVLI(BSVM_SVMState *ctx);
int BSVM_ReadShort(BSVM_SVMState *ctx);
int BSVM_ReadRelAddr(BSVM_SVMState *ctx);
int BSVM_ReadArrayIndex(BSVM_SVMState *ctx);
int BSVM_DumpOpcode(BSVM_SVMState *ctx);
void BSVM_SkipOpcodeArgs(BSVM_SVMState *ctx, int op);
int BSVM_SkipOpcodePrefix(BSVM_SVMState *ctx, int op);
void BSVM_SkipOpcode(BSVM_SVMState *ctx);
void BSVM_StepJmpBool(BSVM_SVMState *ctx, int j);
int BSVM_StepC1(BSVM_SVMState *ctx);
int BSVM_Step(BSVM_SVMState *ctx, int pf);
int BSVM_RunReadOp(BSVM_SVMState *ctx);
int BSVM_RunSeekPastOp(BSVM_SVMState *ctx, int op);
int BSVM_CheckThrownObjType(BSVM_SVMState *ctx, dyt obj, dyt ty);
int BSVM_RunHandleThrown(BSVM_SVMState *ctx);
int BSVM_Run(dyt ct);
int BSVM_RunCnt(BSVM_SVMState *ctx, int cnt);
BGBSVM_API dyt bsvmCallName(char *name, dyt args);
BGBSVM_API dyt bsvmCallName0(char *name);
BGBSVM_API dyt bsvmCallName1(char *name, dyt a);
BGBSVM_API dyt bsvmCallName2(char *name, dyt a, dyt b);
BGBSVM_API dyt bsvmCallName3(char *name, dyt a, dyt b, dyt c);
BGBSVM_API dyt bsvmCallName4(char *name, dyt a, dyt b, dyt c, dyt d);
BGBSVM_API dyt bsvmCachedCallSigVr(dyt *rhdl,char *pkg, char *name, char *sig, va_list lst);
BGBSVM_API void bsvmCachedCallSigVv(dyt *rhdl,char *pkg, char *name, char *sig, va_list lst);
BGBSVM_API s32 bsvmCachedCallSigVi(dyt *rhdl,char *pkg, char *name, char *sig, va_list lst);
BGBSVM_API void bsvmCachedCallSigv(dyt *rhdl,char *pkg, char *name, char *sig, ...);
BGBSVM_API s32 bsvmCachedCallSigi(dyt *rhdl,char *pkg, char *name, char *sig, ...);
BGBSVM_API s64 bsvmCachedCallSigl(dyt *rhdl,char *pkg, char *name, char *sig, ...);
BGBSVM_API f32 bsvmCachedCallSigf(dyt *rhdl,char *pkg, char *name, char *sig, ...);
BGBSVM_API f64 bsvmCachedCallSigd(dyt *rhdl,char *pkg, char *name, char *sig, ...);
BGBSVM_API void *bsvmCachedCallSigp(dyt *rhdl,char *pkg, char *name, char *sig, ...);
BGBSVM_API dyt bsvmCachedCallSigr(dyt *rhdl,char *pkg, char *name, char *sig, ...);
//AHSRC:interp/si_load.c
BGBSVM_API char *BSVM_Clump_ReadInClump(char **strs);
BGBSVM_API char **BSVM_Clump_LookupClump(char **strs, char *name);
BGBSVM_API char *BSVM_Clump_BufferIn(char **strs, char *name);
BGBSVM_API int BSVM_AddScriptPath(char *name);
BGBSVM_API byte *BSVM_ScriptBufferIn(char *name, int *rsz);
BGBSVM_API dyt BSVM_EvalExprsObj(dyt exp, dyt obj);
BGBSVM_API dyt BSVM_EvalExprsObjFlags(dyt exp, dyt obj, int vmgfl);
BGBSVM_API dyt BSVM_EvalStringS(char *str);
BGBSVM_API dyt BSVM_EvalString(char *str);
BGBSVM_API dyt BSVM_EvalStringFlags(char *str, int vmgfl);
BGBSVM_API dyt BSVM_EvalStringObjName(char *str, dyt obj, char *name);
BGBSVM_API dyt BSVM_EvalStringObjNameFlags(char *str, dyt obj,char *name, int vmgfl);
BGBSVM_API dyt BSVM_EvalStringObj(char *str, dyt obj);
BGBSVM_API dyt BSVM_EvalStringObjFlags(char *str, dyt obj, int vmgfl);
BGBSVM_API dyt BSVM_EvalGastSBXE(byte *data, int sz, dyt obj);
BGBSVM_API dyt BSVM_EvalGast(dyxNode *tn, dyt obj);
BGBSVM_API dyt BSVM_CallFuncObjCtx(BSVM_SVMState *ctx, dyt obj, dyt fcn, dyt args);
BGBSVM_API dyt BSVM_CallFuncObj(dyt obj, dyt fcn, dyt args);
BGBSVM_API dyt BSVM_CallFuncTopObj(dyt top, dyt obj, dyt fcn, dyt args);
BGBSVM_API int BSVM_SaveObject(char *name, dyt obj);
BGBSVM_API dyt BSVM_LoadObject(char *name);
BGBSVM_API char *BSVM_GetQNameScriptName(char *name);
BGBSVM_API dyt BSVM_LoadQNameScriptCtx(BSVM_SVMState *ctx, char *name, dyt obj);
BGBSVM_API dyt BSVM_LoadScript(char *name, dyt obj);
BGBSVM_API dyt BSVM_LoadScriptAsync(char *name, dyt obj);
BGBSVM_API void *BSVM_LoadModuleASM(char *name);
BGBSVM_API dyt BSVM_LoadScriptTop(char *name, dyt obj, dyt top);
BGBSVM_API dyt BSVM_CreateLocalToplevel(void);
BGBSVM_API int bsvmAddScriptPath(char *name);
BGBSVM_API dyt bsvmRootImportPackage(char *name);
BGBSVM_API dyt bsvmRootImportPackageList(char *name);
BGBSVM_API dyt bsvmLoadScript(char *name, dyt obj);
BGBSVM_API dyt bsvmLoadScriptAsync(char *name, dyt obj);
BGBSVM_API void *bsvmLoadModuleASM(char *name);
//AHSRC:interp/si_scope.c
BGBSVM_API void BSVM_AddBuiltin(char *name, char *desc,dytf (*fcn)(BSVM_SVMState *ctx, dytf args), int nargs);
BGBSVM_API void BSVM_AddBuiltin2(char *name, char *desc,dytf (*fcn)(BSVM_SVMState *ctx, dytf args), int nargs);
BGBSVM_API void BSVM_AddBinding(char *name, dytf val);
BGBSVM_API void BSVM_AddBinding2(char *name, dytf val);
BGBSVM_API dytf BSVM_GetTop(char *name);
BGBSVM_API void BSVM_SetTop(char *name, dytf val);
dytf BSVM_LookupCTop(BSVM_SVMState *ctx, dytf key);
int BSVM_VarInfoP(dytf obj);
int BSVM_LookupCheckVarInfo(BSVM_SVMState *ctx, dytf info, dytf key);
int BSVM_LookupCheckInfoDelegate(BSVM_SVMState *ctx, dytf info);
dytf BSVM_AssignInfoCoerce(BSVM_SVMState *ctx, dytf info, dytf val);
int BSVM_CheckInfoRest(BSVM_SVMState *ctx, dytf info);
char *BSVM_GetInfoName(BSVM_SVMState *ctx, dytf info);
char *BSVM_GetInfoSig(BSVM_SVMState *ctx, dytf info);
void BSVM_LookupCallObj(BSVM_SVMState *ctx, dytf key, dytf *rhdl);
dytf BSVM_LookupThisObject(BSVM_SVMState *ctx, dytf key);
dytf BSVM_Lookup(BSVM_SVMState *ctx, dytf key);
dytf BSVM_LookupGetInfo(BSVM_SVMState *ctx, dytf key, dytf *rinfo);
dytf BSVM_Lookup_I(BSVM_SVMState *ctx, dytf key, dytf *rinfo);
void BSVM_Assign(BSVM_SVMState *ctx, dytf key, dytf val);
dytf BSVM_LookupAddr(BSVM_SVMState *ctx, dytf key);
dytf BSVM_LookupRef(BSVM_SVMState *ctx, dytf key);
dytf BSVM_LookupIdx(BSVM_SVMState *ctx, int idx);
void BSVM_AssignIdx(BSVM_SVMState *ctx, int idx, dytf val);
void BSVM_AssignIdxF(BSVM_SVMState *ctx, int idx, dytf val);
s32 BSVM_LookupIdxS32(BSVM_SVMState *ctx, int idx);
s64 BSVM_LookupIdxS64(BSVM_SVMState *ctx, int idx);
f32 BSVM_LookupIdxF32(BSVM_SVMState *ctx, int idx);
f64 BSVM_LookupIdxF64(BSVM_SVMState *ctx, int idx);
void BSVM_AssignIdxS32(BSVM_SVMState *ctx, int idx, s32 val);
void BSVM_AssignIdxS64(BSVM_SVMState *ctx, int idx, s64 val);
void BSVM_AssignIdxF32(BSVM_SVMState *ctx, int idx, f32 val);
void BSVM_AssignIdxF64(BSVM_SVMState *ctx, int idx, f64 val);
void BSVM_Bind(BSVM_SVMState *ctx, dytf key, dytf val);
void BSVM_BindType(BSVM_SVMState *ctx, dytf key,dytf type, dytf flags, dytf val);
void BSVM_LexBind(BSVM_SVMState *ctx, dytf key, dytf val);
void BSVM_DynBind(BSVM_SVMState *ctx, dytf key, dytf val);
BGBSVM_API void BSVM_BindPath(BSVM_SVMState *ctx,dytf top, char *name, dytf val);
BGBSVM_API void BSVM_BindPathType(BSVM_SVMState *ctx,dytf top, char *name, dytf type, dytf flags, dytf val);
BGBSVM_API dytf BSVM_GetPath(BSVM_SVMState *ctx, dytf top, char *name);
dytf BSVM_GetPathInfo(BSVM_SVMState *ctx,dytf top, char *name, dytf *rinfo);
void BSVM_ClearEnv(BSVM_SVMState *ctx);
void BSVM_ClearDEnv(BSVM_SVMState *ctx);
dytf BSVM_QualifyName(BSVM_SVMState *ctx, dytf name);
//AHSRC:interp/si_statics.c
void BSVM_Statics_CallObj_Default(BSVM_SVMState *ctx,BSVM_ThreadCallInfo *cinf, dytf obj);
void BSVM_Statics_CallObj_Dynamic(BSVM_SVMState *ctx,BSVM_ThreadCallInfo *cinf, dytf obj);
void BSVM_Statics_CallObj_SvmBlock(BSVM_SVMState *ctx,BSVM_ThreadCallInfo *cinf, dytf obj);
void BSVM_Statics_CallObj_SvmLambda(BSVM_SVMState *ctx,BSVM_ThreadCallInfo *cinf, dytf obj);
void BSVM_Statics_CallObj_RawFunc(BSVM_SVMState *ctx,BSVM_ThreadCallInfo *cinf, dytf obj);
void BSVM_Statics_TailCallObj_Default(BSVM_SVMState *ctx,BSVM_ThreadCallInfo *cinf, dytf obj);
BSVM_ThreadCallInfo *BSVM_Thread_CreateCallInfo(BSVM_SVMState *ctx,BSVM_ThreadOp *thop, dytf mth, dytf key, dytf vinf);
void BSVM_Thread_LookupCallObj(BSVM_SVMState *ctx,BSVM_ThreadOp *thop, dytf key);
//AHSRC:interp/si_thread.c
BSVM_SVMBlock *BSVM_GetCurrentBlock(BSVM_SVMState *ctx);
BSVM_ThreadOp *BSVM_Thread_LookupTarget(BSVM_SVMState *ctx, byte *ip);
BSVM_ThreadOp *BSVM_Thread_GetTarget(BSVM_SVMState *ctx, byte *ip);
BSVM_ThreadOp *BSVM_Thread_GetOpJumpTarget(BSVM_SVMState *ctx,BSVM_ThreadOp *cur, int disp);
bool BSVM_Thread_CacheOpJump(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
int BSVM_Thread_DecodeOpcodeValue(BSVM_SVMState *ctx);
void BSVM_Thread_DecodePrefix(BSVM_SVMState *ctx);
BSVM_ThreadOp *BSVM_Thread_DecodeStep(BSVM_SVMState *ctx);
void BSVM_Thread_DecodeHandleSFIS(BSVM_SVMState *ctx,BSVM_ThreadOp *thop, int op);
BSVM_ThreadOp *BSVM_Thread_DecodeBlock(BSVM_SVMState *ctx,BSVM_SVMBlock *blk);
void BSVM_Thread_PrintThopDebug(BSVM_SVMState *ctx, BSVM_ThreadOp *thop);
int BSVM_Thread_Step(BSVM_SVMState *ctx);
//AHSRC:interp/si_threadop.c
int BSVM_dyIntvF(dytf v);
dytf BSVM_dyIntF(int v);
double BSVM_dyFloatvF(dytf v);
dytf BSVM_dyFloatF(int v);
BSVM_ThreadOp *BSVM_ThOp_NOP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BLOCK(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DBGMARK(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CGENAST(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LABEL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SLEEP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SLEEP_SV(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ASSERT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JOIN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MULTIJOIN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_POP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOAD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STORE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BIND(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DYNBIND(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LEXBIND(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADA_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADB_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEXA(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEXA_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEXB_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_I(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_I(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEXA_I(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEXB_I(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_0(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_1(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_3(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_0(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_1(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_3(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_SELF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_TOP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_SELF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_NULL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_TRUE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_FALSE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_SV(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_SV_F(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_SV_FB(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_SV_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_0(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_1(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_3(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_4(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_5(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_6(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_7(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_CF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_F(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_F(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_FVS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_FVS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LPOSTINC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LPOSTDEC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LPREINC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LPREDEC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LINC_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDEC_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CLEARENV(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINDPATTERN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADMINDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREMINDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TRYLOAD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TRYCAST_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CAST_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CAST(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SIZEOF_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SIZEOF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_INSTANCEOF_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MARK(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TYMARK(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CALL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TAILCALL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CALL_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TAILCALL_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_METHODCALL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_METHODTAILCALL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_METHODCALL_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_METHODTAILCALL_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CALL_ASYNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CALL_IFDEF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CALL_IFNDEF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_SYNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_SYNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_SYNC_OBJ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOCK_OBJ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_SYNC_OBJ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNLOCK_OBJ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_TRY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_TRY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_CATCH(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_CATCH_FINAL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_CATCH(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_THROW_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_THROW_OBJ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CATCH(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEW_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEWARRAY_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DELETE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CLONE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TOSTRING(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNQUOTE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEG(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LNOT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DEFER(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SETDEFER(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NOT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_INC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DEC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_INC2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DEC2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_INC_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DEC_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_POSTINC_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_POSTDEC_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PREINC_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PREDEC_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TYBIND(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TYDYNBIND(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TYLEXBIND(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_PACKAGE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_CLASS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_IFACE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BEGIN_STRUCT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_PACKAGE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_CLASS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_IFACE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_END_STRUCT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CLASS_IFACE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_IMPORT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_RET(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CALL_CF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_TAILCALL_CF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CAR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CDR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CAAR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CDAR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CADR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CDDR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CLOSE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ENVCLOSE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DUP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DUP_F(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_INDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_RINDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SETINDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SETRINDEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ROLL_I(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_COPY_I(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYOP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYOP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYOP_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYOP_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MOD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_AND(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_OR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_XOR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHRR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_E(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_L(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_G(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NEQ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_U(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_TRUE_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_FALSE_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_TRUE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_FALSE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_COND_U_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_COND_B_2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_COND_U(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_COND_B(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_SWEQ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_SWEQF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_SWDFL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_SWB(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NEQ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_U(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDJMP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMPIA(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LIST(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DICT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ATTR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_VECTOR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_COMPLEX_I(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MATRIX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_COMPLEX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_QUAT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ARRAY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ARRAY_S(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YXZ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YZX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZXY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZYX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_WXYZ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_WXZY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_WYXZ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_WYZX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_WZXY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_WZYX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_XWYZ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_XWZY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_XYWZ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_XYZW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_XZWY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_XZYW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YWXZ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YWZX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YXWZ(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YXZW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YZWX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_YZXW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZWXY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZWYX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZXWY(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZXYW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZYWX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXCH_ZYXW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_Default(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_INC_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DEC_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_INC2_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DEC2_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_IDIV_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MOD_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_AND_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_OR_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_XOR_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_L_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_G_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_E_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_FN_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_FN_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_FN_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXP_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL_FN_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR_FN_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_EXP_FN_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_FN2FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_FL2FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_L_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_G_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_E_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEG_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E_LFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_LFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L_LFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G_LFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_LFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_LFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E_ZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_ZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L_ZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G_ZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_ZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_ZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E_LZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_LZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L_LZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G_LZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_LZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_LZFN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E_FNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_FNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L_FNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G_FNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_FNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_FNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_E_LFNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_LFNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_L_LFNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_G_LFNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_LFNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_LFNC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
//AHSRC:interp/si_threadop2.c
BSVM_ThreadOp *BSVM_ThOp_CALL_THIS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CALL_SUPER(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MOD_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_AND_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_OR_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_XOR_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHRR_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LT_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GT_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
//AHSRC:interp/si_thop_bvt.c
int BSVM_ThOp_DecodePushConstant(BSVM_SVMState *ctx,BSVM_ThreadOp *thop, int val);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XF_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XD_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_PUSH_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XI_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XL_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XF_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XD_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LINC_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LINC_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LINC_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LINC_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDEC_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDEC_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDEC_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDEC_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LINC_XI_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LINC_XL_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDEC_XI_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LDEC_XL_VS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DUP_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DUP_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DUP_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DUP_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MOD_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MOD_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_AND_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_AND_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_OR_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_OR_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_XOR_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_XOR_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHRR_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHRR_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MUL_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DIV_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MOD_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_MOD_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_AND_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_AND_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_OR_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_OR_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_XOR_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_XOR_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHL_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHR_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHRR_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SHRR_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEG_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEG_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NOT_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NOT_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEG_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NEG_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NOT_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_NOT_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LNOT_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LT_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LT_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LT_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LT_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GT_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GT_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GT_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GT_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_EQ_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_NE_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LT_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LT_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GT_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GT_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_LE_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CMP_GE_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_FN2XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_FN2XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_FL2XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_FL2XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XI2XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XI2XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XI2XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XI2FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XL2XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XL2XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XL2XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XL2FN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XF2XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XF2XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XF2XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XF2FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XD2XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XD2XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XD2XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_CONV_XD2FL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XI_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_EQ_XL_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XI_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_NE_XL_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XI_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LT_XL_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XI_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GT_XL_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XI_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_LE_XL_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XI_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_JMP_GE_XL_LC(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
//AHSRC:interp/si_thop_array.c
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUBI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSBI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUSI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSSI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUDI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSDI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUDL_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSDL_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XLL_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XFF_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XDD_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XI(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XL(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
void BSVM_ThOp_DecodeLoadIndex(BSVM_SVMState *ctx, BSVM_ThreadOp *thop);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XUBI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XSBI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XUSI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XSSI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XSDI_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XLL_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XFF_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_STOREINDEX_XDD_IX(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
void BSVM_ThOp_DecodeStoreIndex(BSVM_SVMState *ctx, BSVM_ThreadOp *thop);
void BSVM_ThOp_DecodeDefer(BSVM_SVMState *ctx, BSVM_ThreadOp *thop);
void BSVM_ThOp_DecodeSetDefer(BSVM_SVMState *ctx, BSVM_ThreadOp *thop);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUBI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSBI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUSI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSSI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUDI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSDI_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XUDL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XSDL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XLL_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XFF_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LOADINDEX_XDD_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
void BSVM_ThOp_DecodeLoadIndexI(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, int idx);
void BSVM_ThOp_DecodeStoreIndexI(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, int idx);
//AHSRC:interp/si_thop_intrin.c
void BSVM_ThOp_DecodeUnaryOpS(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, dytf name);
void BSVM_ThOp_DecodeBinaryOpS(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, dytf name);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SQR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SQRT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SSQR(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SSQRT(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SIN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_COS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_TAN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ASIN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ACOS(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ATAN(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SQR_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SQR_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SQRT_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SQRT_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SSQR_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SSQR_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SSQRT_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SSQRT_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SIN_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_SIN_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_COS_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_COS_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_TAN_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_TAN_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ASIN_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ASIN_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ACOS_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ACOS_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ATAN_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_UNARYINT_ATAN_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
void BSVM_ThOp_DecodeUnaryIntrinS(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, dytf name);
void BSVM_ThOp_DecodeUnaryOpI(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, int op);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_ATAN2(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_POW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_SPOW(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_ATAN2_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_ATAN2_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_POW_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_POW_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_SPOW_XF(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_BINARYINT_SPOW_XD(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
void BSVM_ThOp_DecodeBinaryIntrinS(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, dytf name);
void BSVM_ThOp_DecodeBinaryOpI(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, int op);
void BSVM_ThOp_DecodeTrinaryIntrinS(BSVM_SVMState *ctx, BSVM_ThreadOp *thop, dytf name);
//AHSRC:interp/si_thop_ptr.c
BSVM_ThreadOp *BSVM_ThOp_ADD_XP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_ADD_XP_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_SUB_XP_C(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_DUP_XP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LLOAD_XP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
BSVM_ThreadOp *BSVM_ThOp_LSTORE_XP(BSVM_SVMState *ctx, BSVM_ThreadOp *cur);
//AHSRC:interp/si_fastbvt.c
void BSVM_BVT_Init();
void BSVM_BVT_Teardown(BSVM_SVMState *ctx);
s32 *BSVM_AllocInt(BSVM_SVMState *ctx);
s64 *BSVM_AllocLong(BSVM_SVMState *ctx);
f32 *BSVM_AllocFloat(BSVM_SVMState *ctx);
f64 *BSVM_AllocDouble(BSVM_SVMState *ctx);
void BSVM_FreeInt(BSVM_SVMState *ctx, s32 *p);
void BSVM_FreeLong(BSVM_SVMState *ctx, s64 *p);
void BSVM_FreeFloat(BSVM_SVMState *ctx, f32 *p);
void BSVM_FreeDouble(BSVM_SVMState *ctx, f64 *p);
s32 *BSVM_WrapAllocInt(BSVM_SVMState *ctx, s32 v);
s64 *BSVM_WrapAllocLong(BSVM_SVMState *ctx, s64 v);
f32 *BSVM_WrapAllocFloat(BSVM_SVMState *ctx, f32 v);
f64 *BSVM_WrapAllocDouble(BSVM_SVMState *ctx, f64 v);
int BSVM_BoxedIntP(BSVM_SVMState *ctx, dytf p);
int BSVM_BoxedLongP(BSVM_SVMState *ctx, dytf p);
int BSVM_BoxedFloatP(BSVM_SVMState *ctx, dytf p);
int BSVM_BoxedDoubleP(BSVM_SVMState *ctx, dytf p);
//AHSRC:interp/si_thread_trace.c
BSVM_ThreadTrace *BSVM_ThTr_RunDefault(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_EndDefault(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr, BSVM_ThreadOp *op);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault1(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault2(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault3(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault4(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault5(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault6(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault7(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault8(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault9(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault10(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault11(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault12(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault13(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault14(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault15(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunDefault16(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic1(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic2(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic3(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic4(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic5(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic6(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic7(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic8(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic9(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic10(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic11(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic12(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic13(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic14(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic15(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
BSVM_ThreadTrace *BSVM_ThTr_RunBasic16(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
void BSVM_ThreadTrace_UpdateCheckJit(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
void BSVM_ThreadTrace_FinishTrace(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr, BSVM_ThreadOp *thop);
BSVM_ThreadTrace *BSVM_ThreadTrace_BuildTraces(BSVM_SVMState *ctx,BSVM_SVMBlock *blk);
//AHSRC:interp/si_thread_x86.c
int BSVM_ThreadX86_Init();
int BSVM_Thread_LoadEmitPrefixASM();
int BSVM_ThreadX86_LoadEmitPrefixASM();
BSVM_ThreadOp *BSVM_ThreadX86_DecodeStep(BSVM_SVMState *ctx);
bool BSVM_ThreadTraceX86_TryJitOpcode(BSVM_ThreadJitContext *ctx, BSVM_ThreadOp *op);
bool BSVM_ThreadTraceX86_TryJitTailOpcode(BSVM_ThreadJitContext *ctx, BSVM_ThreadOp *op);
bool BSVM_ThreadTraceX86_CompileTrace_TryEndDefault(BSVM_ThreadJitContext *ctx);
void BSVM_ThreadTraceX86_CompileTrace_Default(BSVM_ThreadJitContext *ctx);
void BSVM_ThreadTraceX86_CompileTrace_Basic(BSVM_ThreadJitContext *ctx);
BSVM_ThreadJitContext *BSVM_ThreadTraceX86_AllocContext(BSVM_SVMState *ctx, BSVM_ThreadTrace *tr);
void BSVM_ThreadTraceX86_FreeContext(BSVM_ThreadJitContext *ctx);
void BSVM_ThreadTraceX86_CompileTrace(BSVM_SVMState *ctx,BSVM_ThreadTrace *tr);
//AHSRC:interp/sjx86_thop.c
void BSVM_ThJitX86_LoadStack(BSVM_ThreadJitContext *ctx);
void BSVM_ThJitX86_StackPopEDAX(BSVM_ThreadJitContext *ctx);
void BSVM_ThJitX86_StackPushEDAX(BSVM_ThreadJitContext *ctx);
void BSVM_ThJitX86_StackGetTopIndexEDAX(BSVM_ThreadJitContext *ctx, int idx);
void BSVM_ThJitX86_StackSetTopIndexEDAX(BSVM_ThreadJitContext *ctx, int idx);
void BSVM_ThJitX86_StackGetTopEDAX(BSVM_ThreadJitContext *ctx);
void BSVM_ThJitX86_StackSetTopEDAX(BSVM_ThreadJitContext *ctx);
void BSVM_ThJitX86_LoadVarStack(BSVM_ThreadJitContext *ctx);
void BSVM_ThJitX86_VarStackGetIndexEDAX(BSVM_ThreadJitContext *ctx, int idx);
void BSVM_ThJitX86_VarStackSetIndexEDAX(BSVM_ThreadJitContext *ctx, int idx);
bool BSVM_ThJitX86_PUSH_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_PUSH_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_ADD_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SUB_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_MUL_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_ArithOpr_XI(BSVM_ThreadJitContext *ctx, char *opr);
bool BSVM_ThJitX86_AND_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_OR_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_XOR_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SHL_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SHR_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SHRR_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_ArithOpr_XI_C(BSVM_ThreadJitContext *ctx, char *opr);
bool BSVM_ThJitX86_ADD_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SUB_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_MUL_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_AND_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_OR_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_XOR_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SHL_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SHR_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_SHRR_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LLOAD_VS(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LLOAD_XI_VS(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LSTORE_VS(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LSTORE_XI_VS(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LINC_XI_VS(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LDEC_XI_VS(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_FN(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LN(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_DBGMARK(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_LOADINDEX_XUBI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_LOADINDEX_XSBI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_LOADINDEX_XUSI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_LOADINDEX_XSSI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_LOADINDEX_XUDI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_LOADINDEX_XSDI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_LOADINDEX_MovI_IX(BSVM_ThreadJitContext *ctx,char *mov, int step, int flags);
bool BSVM_ThJitX86_LoadIndex(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_STOREINDEX_XUBI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_STOREINDEX_XSBI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_STOREINDEX_XUSI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_STOREINDEX_XSSI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_STOREINDEX_XUDI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_STOREINDEX_XSDI_IX(BSVM_ThreadJitContext *ctx, int flags);
bool BSVM_ThJitX86_STOREINDEX_StepI_IX(BSVM_ThreadJitContext *ctx, int step, int flags);
bool BSVM_ThJitX86_StoreIndex(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_Jcc_XI(BSVM_ThreadJitContext *ctx, char *opr);
bool BSVM_ThJitX86_JMP_EQ_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_NE_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_LT_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_GT_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_LE_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_GE_XI(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_Jcc_XI_C(BSVM_ThreadJitContext *ctx, char *opr);
bool BSVM_ThJitX86_JMP_EQ_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_NE_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_LT_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_GT_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_LE_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP_GE_XI_C(BSVM_ThreadJitContext *ctx);
bool BSVM_ThJitX86_JMP(BSVM_ThreadJitContext *ctx);
//AHSRC:compile/sc_compile.c
int BSVMC_FormIs(dyt a, char *s);
int BSVMC_FormIsBinary(dyt a, char *s);
int BSVMC_FormIsUnary(dyt a, char *s);
int BSVMC_DebugP(BSVM_SVMCState *ctx);
BGBSVM_API void BSVMC_Warning(BSVM_SVMCState *ctx, char *str, ...);
BGBSVM_API void BSVMC_Error(BSVM_SVMCState *ctx, char *str, ...);
BGBSVM_API int BSVMC_CompileSwitch(BSVM_SVMCState *ctx, dyt l);
dyt BSVMC_ProcessFlagsExpr(BSVM_SVMCState *ctx, dyt l, char *tb);
int BSVMC_CompileEmitVar(BSVM_SVMCState *ctx, dyt l);
int BSVMC_CompileClass(BSVM_SVMCState *ctx, dyt l);
int BSVMC_CompilePackage(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileGoto(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileBegin(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileBeginExpr(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileIfdef(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileStatement(BSVM_SVMCState *ctx, dyt l);
byte *BSVMC_NextOpcode(byte *ip);
byte *BSVMC_DumpOpcode(byte *ip, dyt lit);
byte *BSVMC_DumpOpcodeFl(byte *ip, dyt lit, int fl);
byte *BSVMC_DumpOpcodeList(byte *ips, byte *ipe, dyt lit);
dyt BSVMC_CompileBlock(BSVM_SVMCState *lctx,dyt name, dyt args, dyt body);
dyt BSVMC_CompileBlockEnv(BSVM_SVMCState *lctx,dyt lenv, dyt name, dyt args, dyt body);
//AHSRC:compile/sc_reduce.c
int BSVMC_BoolExpr(BSVM_SVMCState *ctx, dyt l);
int BSVMC_IsExpr(dyt l);
dyt BSVMC_ReduceForm(BSVM_SVMCState *ctx, dyt l);
char *BSVMC_LookupPPKey(BSVM_SVMCState *ctx, char *name);
dyt BSVMC_ReduceExpr(BSVM_SVMCState *ctx, dyt l);
dyt BSVMC_InferTypeBase(dyt l);
char *BSVMC_FlattenQNameBaseSig(dyt l);
int BSVMC_InferTypeBaseSize(dyt l);
char *BSVMC_InferTypeBaseSig(dyt l);
char *BSVMC_InferVarBaseSig(dyt n);
char *BSVMC_InferVarsListBaseSig(dyt l);
char *BSVMC_InferArgsBaseSig(dyt l);
dyt BSVMC_InferArgsBaseSig2(dyt l);
char *BSVMC_InferExprListBaseSig(BSVM_SVMCState *ctx, dyt l);
char *BSVMC_InferCallArgsBaseSig(BSVM_SVMCState *ctx, dyt l, dyt rt);
char *BSVMC_InferMethodCallArgsBaseSig(BSVM_SVMCState *ctx, dyt l, dyt rt);
dyt BSVMC_BuildVarInfo(dyt n);
int BSVMC_InferIsIntP(dyt t);
int BSVMC_InferIsLongP(dyt t);
int BSVMC_InferIsFloatP(dyt t);
int BSVMC_InferIsDoubleP(dyt t);
int BSVMC_InferIsNumP(dyt t);
dyt BSVMC_InferIsInt(dyt t);
dyt BSVMC_InferIsLong(dyt t);
dyt BSVMC_InferIsNum(dyt t);
dyt BSVMC_InferForm(BSVM_SVMCState *ctx, dyt l);
dyt BSVMC_InferExpr(BSVM_SVMCState *ctx, dyt l);
dyt BSVMC_InferExprClean(BSVM_SVMCState *ctx, dyt l, int *cp);
int BSVMC_GuessCloseForm(BSVM_SVMCState *ctx, dyt l);
int BSVMC_GuessCloseExpr(BSVM_SVMCState *ctx, dyt l);
int BSVMC_GuessCloseBlock(BSVM_SVMCState *ctx, dyt l);
//AHSRC:compile/sc_reverse.c
dyt BSVMC_ReverseStepStmt(BSVM_SVMCState *ctx, dyt l);
dyt BSVMC_ReverseStepBlock(BSVM_SVMCState *ctx, dyt l);
//AHSRC:compile/sc_index.c
BGBSVM_API int BSVMC_IndexLit(BSVM_SVMCState *ctx, dyt l);
BGBSVM_API int BSVMC_IndexLit2(BSVM_SVMCState *ctx, dyt l);
BGBSVM_API void BSVMC_EmitOp(BSVM_SVMCState *ctx, int i);
BGBSVM_API void BSVMC_EncIDX(BSVM_SVMCState *ctx, int i);
BGBSVM_API void BSVMC_EncVLI(BSVM_SVMCState *ctx, s64 i);
BGBSVM_API void BSVMC_EncSVLI(BSVM_SVMCState *ctx, s64 i);
BGBSVM_API void BSVMC_EncFloat(BSVM_SVMCState *ctx, double val);
BGBSVM_API void BSVMC_EncByte(BSVM_SVMCState *ctx, int i);
BGBSVM_API void BSVMC_EncWord(BSVM_SVMCState *ctx, int i);
BGBSVM_API void BSVMC_EncIndexLit(BSVM_SVMCState *ctx, dyt l);
BGBSVM_API void BSVMC_EncIndexLit2(BSVM_SVMCState *ctx, dyt l);
BGBSVM_API void BSVMC_EmitJmpAddr(BSVM_SVMCState *ctx, char *name);
BGBSVM_API void BSVMC_EmitGoto(BSVM_SVMCState *ctx, char *name, byte *ip);
BGBSVM_API void BSVMC_EmitLabel(BSVM_SVMCState *ctx, char *name, byte *ip);
BGBSVM_API void BSVMC_EmitJmp(BSVM_SVMCState *ctx, char *name);
BGBSVM_API char *BSVMC_GenSym();
int BSVMC_RegIdx(dyt t);
BGBSVM_API void BSVMC_CompileBreak(BSVM_SVMCState *ctx);
BGBSVM_API void BSVMC_CompileContinue(BSVM_SVMCState *ctx);
BGBSVM_API void BSVMC_CompileBreakFalse(BSVM_SVMCState *ctx);
BGBSVM_API void BSVMC_CompileBreakTrue(BSVM_SVMCState *ctx);
BGBSVM_API void BSVMC_CompileContinueFalse(BSVM_SVMCState *ctx);
BGBSVM_API void BSVMC_CompileContinueTrue(BSVM_SVMCState *ctx);
BGBSVM_API void BSVMC_CompileJmp(BSVM_SVMCState *ctx, char *s);
BGBSVM_API void BSVMC_CompileJmpFalse(BSVM_SVMCState *ctx, char *s);
BGBSVM_API void BSVMC_CompileJmpTrue(BSVM_SVMCState *ctx, char *s);
BGBSVM_API void BSVMC_CompileJmpCond(BSVM_SVMCState *ctx, int i, char *s);
BGBSVM_API void BSVMC_CompileJmpSwitchEqual(BSVM_SVMCState *ctx, dyt v, char *s);
BGBSVM_API void BSVMC_CompileJmpSwitchDefault(BSVM_SVMCState *ctx, char *s);
BGBSVM_API void BSVMC_CompileJmpSwitchCond(BSVM_SVMCState *ctx,int i, dyt v, char *s);
BGBSVM_API void BSVMC_CompileJCO(BSVM_SVMCState *ctx, int op, dyt ln, dyt rn);
BGBSVM_API void BSVMC_CompileJCT(BSVM_SVMCState *ctx, dyt l);
BGBSVM_API void BSVMC_CompileJCF(BSVM_SVMCState *ctx, dyt l);
//AHSRC:compile/sc_expr.c
int BSVMC_CompileSpecial(BSVM_SVMCState *ctx, dyt l);
int BSVMC_CompileSpecialMethod(BSVM_SVMCState *ctx, dyt l);
int BSVMC_CheckLexical(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileExprCast(BSVM_SVMCState *ctx, dyt l, dyt ty);
void BSVMC_CompileExprCastFl(BSVM_SVMCState *ctx,dyt l, dyt ty, int flags);
void BSVMC_CompileAssign(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileNew(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileInstanceof(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileForm(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileExprT(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileExpr(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileExprTail(BSVM_SVMCState *ctx, dyt l);
//AHSRC:compile/sc_expr_arith.c
int BSVMC_TypeFixnumP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeFlonumP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeFixrealP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeSmallIntP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeLongP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeSmallLongP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeFloatP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeDoubleP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeSmallFloatP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeSmallDoubleP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeSmallFixIntP(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_TypeSmallFixRealP(BSVM_SVMCState *ctx, dyt ty);
dyt BSVMC_TypeArrayBaseType(BSVM_SVMCState *ctx, dyt ty);
int BSVMC_CompileBinary(BSVM_SVMCState *ctx, dyt l);
int BSVMC_CompileBinaryExpr(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileUnaryTypePrefix(BSVM_SVMCState *ctx, dyt ty);
void BSVMC_CompileInferUnaryTypePrefix(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileInferBinaryTypePrefix(BSVM_SVMCState *ctx,dyt ln, dyt rn);
int BSVMC_CompileUnaryExpr(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileGetIndexTypePrefix(BSVM_SVMCState *ctx, dyt l);
void BSVMC_CompileGetIndex(BSVM_SVMCState *ctx, dyt l);
int BSVMC_CompileSetIndexType(BSVM_SVMCState *ctx, dyt l, int fl);
void BSVMC_CompileSetIndexStmt(BSVM_SVMCState *ctx, dyt l);
//AHSRC:parse2/parse_token.c
BGBSVM_API int BSVMP_GetLinenum();
BGBSVM_API char *BSVMP_GetFilename();
int BSVMP_CalcLinenum(char *se);
BGBSVM_API int BSVMP_SetLinenum(char *fname, char *base, int num);
int BSVMP_PushLinenum();
int BSVMP_PopLinenum();
int BSVM_MSG_Note(char *se, char *s, ...);
int BSVM_MSG_Warning(char *se, char *s, ...);
int BSVM_MSG_Error(char *se, char *s, ...);
char *BSVMP_EatWhiteOnly(char *s);
char *BSVMP_EatWhite(char *s);
int BSVMP_IsWhite(char *s);
int BSVMP_IsWhiteOnly(char *s);
int BSVMP_IsNextIndented(char *se);
int BSVMP_IsLineBreak(char *se);
int BSVMP_OpChar(int c);
int BSVMP_PeekChar(char **str);
int BSVMP_ParseChar(char **str);
int BSVMP_EmitChar(char **str, int j);
int BSVMP_NameInitChar(int c);
int BSVMP_NameChar(int c);
char *BSVMP_Token(char *s, char *b, int *ty);
char *BSVMP_TokenQName(char *s, char *b, int *rty);
char *BSVMP_EatToken(char *s, char *b, int ty);
//AHSRC:parse2/parse.c
dytf BSVMP_FunArgs(char **str);
dytf BSVMP_FunArgs2(char **str);
dytf BSVMP_IListArgs(char **str);
dytf BSVMP_RListArgs(char **str);
dytf BSVMP_VarsList(char **str);
dytf BSVMP_TryVarsList2(char **str, dytf type);
dytf BSVMP_TryVarsList(char **str);
dytf BSVMP_DefType(char **str);
dytf BSVMP_FunVarsList(char **str);
dytf BSVMP_FunVarsListB(char **str);
dytf BSVMP_FunVarsListC(char **str);
dytf BSVMP_Class(char **str);
char *BSVMP_NameForBinaryOperator(char *s);
char *BSVMP_NameForUnaryOperator(char *s);
//AHSRC:parse2/parse_expr2.c
BGBSVM_API int BSVMP_AddExpression(char *name,dytf (*func)(BSVM_ParseContext *ctx, char **s));
dytf BSVMP_ParseExpressionName(char *name, char **s);
int BSVMP_FormIsP(dytf a, char *s);
dytf BSVMP_Number(char *str);
s64 bsvmp_atoll(char *str);
dytf BSVMP_RegEx(char *str);
dytf BSVMP_ExpressionBlockString(char **str, int ty);
dytf BSVMP_ExpressionLit(char **str);
dytf BSVMP_ExpressionPE(char **str);
dytf BSVMP_ExpressionCast(char **str);
dytf BSVMP_ExpressionIncDec(char **str);
dytf BSVMP_ExpressionE(char **str);
dytf BSVMP_ExpressionMD(char **str);
dytf BSVMP_ExpressionAS(char **str);
dytf BSVMP_ExpressionSHLR(char **str);
dytf BSVMP_ExpressionRCmp(char **str);
dytf BSVMP_ExpressionLop(char **str);
dytf BSVMP_ExpressionLop2(char **str);
dytf BSVMP_ExpressionLop3(char **str);
dytf BSVMP_ExpressionTCond(char **str);
dytf BSVMP_ExpressionFunc(char **str);
dytf BSVMP_ExpressionAttr(char **str);
dytf BSVMP_ExpressionEquals(char **str);
dytf BSVMP_ExpressionComma(char **str);
BGBSVM_API dytf BSVMP_Expression(char **str);
dytf BSVMP_Expression2(char **str);
dytf BSVMP_Expression3(char **str);
BGBSVM_API dytf BSVMP_ExpressionType(char **str);
//AHSRC:parse2/parse_tyexpr.c
int BSVMP_CheckTokenList(char *str, char **lst);
int BSVMP_CheckValidTypeName(char *str);
int BSVMP_CheckValidDeclName(char *str);
int BSVMP_CheckValidIdentifierName(char *str);
int BSVMP_CheckModifierName(char *str);
dytf BSVMP_TypeForSuffix(char *str);
dytf BSVMP_TypeArgs(char **str);
dytf BSVMP_TypeExpressionLit(char **str);
dytf BSVMP_TypeExpressionPE(char **str);
dytf BSVMP_TypeExpressionUnary(char **str);
dytf BSVMP_TypeExpression(char **str);
dytf BSVMP_ColonTypeExpression(char **str);
dytf BSVMP_CastTypeExpression(char **str);
BGBSVM_API dytf BSVMP_TryParseDeclaration(char **str);
//AHSRC:parse2/parse_stmt.c
BGBSVM_API int BSVMP_AddStatement(char *name,dytf (*func)(BSVM_ParseContext *ctx, char **s));
dytf BSVMP_ParseStatementName(char *name, char **s);
int BSVMP_AddBlockStatement(char *name,dytf (*func)(BSVM_ParseContext *ctx, char **s));
dytf BSVMP_ParseBlockStatementName(char *name, char **s);
char *BSVMP_EatSemicolon(char *s);
dytf BSVMP_Statement(char **str);
dytf BSVMP_BlockInlineC(char **str);
dytf BSVMP_BlockStatementInner(char **str);
BGBSVM_API dytf BSVMP_BlockStatement(char **str);
BGBSVM_API dytf BSVMP_BlockDebugMark(char **str);
BGBSVM_API dytf BSVMP_Block(char **str);
BGBSVM_API dytf BSVMP_BlockStatement2(char **str);
BGBSVM_API dytf BSVMP_BlockStatement2V(char **str);
//AHSRC:builtin/builtin_base.c
dytf bsvm_print(BSVM_SVMState *ctx, dytf args);
dytf bsvm_println(BSVM_SVMState *ctx, dytf args);
dytf bsvm_load(BSVM_SVMState *ctx, dytf args);
dytf bsvm_eval(BSVM_SVMState *ctx, dytf args);
int BSVM_Builtins_Init();
//AHSRC:builtin/builtin_math.c
dytf bsvm_abs(BSVM_SVMState *ctx, dytf args);
dytf bsvm_fabs(BSVM_SVMState *ctx, dytf args);
dytf bsvm_sqr(BSVM_SVMState *ctx, dytf args);
dytf bsvm_sqrt(BSVM_SVMState *ctx, dytf args);
dytf bsvm_ssqr(BSVM_SVMState *ctx, dytf args);
dytf bsvm_ssqrt(BSVM_SVMState *ctx, dytf args);
dytf bsvm_spow(BSVM_SVMState *ctx, dytf args);
dytf bsvm_floor(BSVM_SVMState *ctx, dytf args);
dytf bsvm_ceil(BSVM_SVMState *ctx, dytf args);
dytf bsvm_round(BSVM_SVMState *ctx, dytf args);
dytf bsvm_truncate(BSVM_SVMState *ctx, dytf args);
dytf bsvm_pow(BSVM_SVMState *ctx, dytf args);
dytf bsvm_degrees(BSVM_SVMState *ctx, dytf args);
dytf bsvm_radians(BSVM_SVMState *ctx, dytf args);
dytf bsvm_cos(BSVM_SVMState *ctx, dytf args);
dytf bsvm_sin(BSVM_SVMState *ctx, dytf args);
dytf bsvm_tan(BSVM_SVMState *ctx, dytf args);
dytf bsvm_cosd(BSVM_SVMState *ctx, dytf args);
dytf bsvm_sind(BSVM_SVMState *ctx, dytf args);
dytf bsvm_tand(BSVM_SVMState *ctx, dytf args);
dytf bsvm_acos(BSVM_SVMState *ctx, dytf args);
dytf bsvm_asin(BSVM_SVMState *ctx, dytf args);
dytf bsvm_atan(BSVM_SVMState *ctx, dytf args);
dytf bsvm_atan2(BSVM_SVMState *ctx, dytf args);
dytf bsvm_ln(BSVM_SVMState *ctx, dytf args);
dytf bsvm_log(BSVM_SVMState *ctx, dytf args);
dytf bsvm_log2(BSVM_SVMState *ctx, dytf args);
dytf bsvm_log10(BSVM_SVMState *ctx, dytf args);
dytf bsvm_real(BSVM_SVMState *ctx, dytf args);
dytf bsvm_imag(BSVM_SVMState *ctx, dytf args);
int BSVM_BuiltinMath_Init();
BGBSVM_API double BSAPI_Math_E;
BGBSVM_API double BSAPI_Math_LN10;
BGBSVM_API double BSAPI_Math_LN2;
BGBSVM_API double BSAPI_Math_LOG2E;
BGBSVM_API double BSAPI_Math_LOG10E;
BGBSVM_API double BSAPI_Math_PI;
BGBSVM_API double BSAPI_Math_SQRT1_2;
BGBSVM_API double BSAPI_Math_SQRT2;
BGBSVM_API double BSAPI_Math_abs(double x);
BGBSVM_API double BSAPI_Math_acos(double x);
BGBSVM_API double BSAPI_Math_asin(double x);
BGBSVM_API double BSAPI_Math_atan(double x);
BGBSVM_API double BSAPI_Math_atan2(double y, double x);
BGBSVM_API double BSAPI_Math_ceil(double x);
BGBSVM_API double BSAPI_Math_cos(double x);
BGBSVM_API double BSAPI_Math_exp(double x);
BGBSVM_API double BSAPI_Math_floor(double x);
BGBSVM_API double BSAPI_Math_log(double x);
BGBSVM_API double BSAPI_Math_log2(double x);
BGBSVM_API double BSAPI_Math_pow(double x, double y);
BGBSVM_API double BSAPI_Math_round(double x);
BGBSVM_API double BSAPI_Math_sin(double x);
BGBSVM_API double BSAPI_Math_sqr(double x);
BGBSVM_API double BSAPI_Math_sqrt(double x);
BGBSVM_API double BSAPI_Math_cbrt(double x);
BGBSVM_API double BSAPI_Math_tan(double x);
BGBSVM_API double BSAPI_Math_ssqr(double x);
BGBSVM_API double BSAPI_Math_ssqrt(double x);
BGBSVM_API double BSAPI_Math_spow(double x, double y);
BGBSVM_API double BSAPI_Math_min(double x, double y);
BGBSVM_API double BSAPI_Math_max(double x, double y);
BGBSVM_API double BSAPI_Math_random();
//AHSRC:jit2/j_arch.c
BGBSVM_API int BSVM_J2Arch_IsJIT(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_IsX86(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_IsX64(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_IsARM(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_IsJitX86(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_IsJitX64(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_IsJitARM(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_SizePointer(bsjContext ctx);
BGBSVM_API int BSVM_J2Arch_SizeStackAlign(bsjContext ctx);
BGBSVM_API void BSVM_J2Arch_DoJump(bsjContext ctx, char *lbl);
BGBSVM_API void BSVM_J2Arch_EmitLabel(bsjContext ctx, char *lbl);
BGBSVM_API void BSVM_J2Arch_SyncState(bsjContext ctx);
//AHSRC:jit2/j_arith.c
bsjVar BSVM_J2Arith_BinaryOpVarTy(bsjContext ctx,bsjVar larg, bsjVar rarg, int op, bsjType ty);
bsjVar BSVM_J2Arith_AddVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjVar BSVM_J2Arith_SubVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjVar BSVM_J2Arith_MulVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjVar BSVM_J2Arith_DivVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjVar BSVM_J2Arith_ModVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjVar BSVM_J2Arith_AndVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjVar BSVM_J2Arith_OrVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjVar BSVM_J2Arith_XorVarTy(bsjContext ctx,bsjVar dst, bsjVar src, bsjType ty);
bsjType BSVM_J2Arith_BinaryType(bsjContext ctx,bsjType lty, bsjType rty, int op);
bsjType BSVM_J2Arith_BinaryVarType(bsjContext ctx,bsjVar larg, bsjVar rarg, int op);
bsjVar BSVM_J2Arith_BinaryOpVar(bsjContext ctx,bsjVar dst, bsjVar src, int op);
bsjVar BSVM_J2Arith_AddVar(bsjContext ctx, bsjVar dst, bsjVar src);
bsjVar BSVM_J2Arith_SubVar(bsjContext ctx, bsjVar dst, bsjVar src);
bsjVar BSVM_J2Arith_MulVar(bsjContext ctx, bsjVar dst, bsjVar src);
bsjVar BSVM_J2Arith_DivVar(bsjContext ctx, bsjVar dst, bsjVar src);
bsjVar BSVM_J2Arith_ModVar(bsjContext ctx, bsjVar dst, bsjVar src);
bsjVar BSVM_J2Arith_AndVar(bsjContext ctx, bsjVar dst, bsjVar src);
bsjVar BSVM_J2Arith_OrVar(bsjContext ctx, bsjVar dst, bsjVar src);
bsjVar BSVM_J2Arith_XorVar(bsjContext ctx, bsjVar dst, bsjVar src);
//AHSRC:jit2/j_cast.c
void BSVM_J2Cast_ConvRegInt(bsjContext ctx, bsjReg dreg, bsjReg sreg);
BGBSVM_API void BSVM_J2Cast_ConvReg(bsjContext ctx, bsjReg dreg, bsjReg sreg);
BGBSVM_API bsjReg BSVM_J2Cast_CastReg(bsjContext ctx, bsjReg reg, bsjType ty);
BGBSVM_API bsjReg BSVM_J2Cast_CastDyt(bsjContext ctx, bsjReg reg);
//AHSRC:jit2/j_dyt.c
int BSVM_J2Dyt_CalcMetaRegsMask(bsjContext ctx);
void BSVM_J2Dyt_LoadRegInt(bsjContext ctx, bsjReg reg, int val);
void BSVM_J2Dyt_LoadRegLong(bsjContext ctx, bsjReg reg, s64 val);
void BSVM_J2Dyt_LoadRegFlonum(bsjContext ctx, bsjReg reg, float val);
void BSVM_J2Dyt_LoadRegFloat(bsjContext ctx, bsjReg reg, float val);
void BSVM_J2Dyt_LoadRegDouble(bsjContext ctx, bsjReg reg, float val);
void BSVM_J2Dyt_LoadRegSymbol(bsjContext ctx, bsjReg reg, char *val);
void BSVM_J2Dyt_LoadRegKeyword(bsjContext ctx, bsjReg reg, char *val);
void BSVM_J2Dyt_LoadRegString(bsjContext ctx, bsjReg reg, char *val);
void BSVM_J2Dyt_LoadRegFixedValue(bsjContext ctx, bsjReg reg, dyt val);
void BSVM_J2Dyt_LoadReg(bsjContext ctx, bsjReg reg, dyt val);
void BSVM_J2Dyt_UnaryOpReg(bsjContext ctx, int op,bsjReg dst, bsjReg arg);
void BSVM_J2Dyt_BinaryOpReg(bsjContext ctx, int op,bsjReg dst, bsjReg larg, bsjReg rarg);
void BSVM_J2Dyt_ConvRegDyt(bsjContext ctx, bsjReg dst, bsjReg src);
void BSVM_J2Dyt_ConvRegFromDyt(bsjContext ctx, bsjReg dst, bsjReg src);
void BSVM_J2Dyt_ConvRegFn2Fl(bsjContext ctx, bsjReg dst, bsjReg src);
void BSVM_J2Dyt_ConvRegFl2Fn(bsjContext ctx, bsjReg dst, bsjReg src);
void BSVM_J2Dyt_GetSelf(bsjContext ctx, bsjReg dst);
void BSVM_J2Dyt_GetTop(bsjContext ctx, bsjReg dst);
void BSVM_J2Dyt_GetCF(bsjContext ctx, bsjReg dst);
void BSVM_J2Dyt_LexLoadIdx(bsjContext ctx, bsjReg dst, int idx);
void BSVM_J2Dyt_LexStoreIdx(bsjContext ctx, int idx, bsjReg dst);
void BSVM_J2Dyt_LoadName(bsjContext ctx, bsjReg dst, char *str);
void BSVM_J2Dyt_StoreName(bsjContext ctx, char *str, bsjReg dst);
void BSVM_J2Dyt_BindName(bsjContext ctx, char *str, bsjReg dst);
void BSVM_J2Dyt_DynBindName(bsjContext ctx, char *str, bsjReg dst);
void BSVM_J2Dyt_TyBindName(bsjContext ctx,char *name, char *sig, char *flags, bsjReg dst);
void BSVM_J2Dyt_TyDynBindName(bsjContext ctx,char *name, char *sig, char *flags, bsjReg dst);
void BSVM_J2Dyt_LoadIndex(bsjContext ctx,bsjReg dst, bsjReg arr, bsjReg idx);
void BSVM_J2Dyt_StoreIndex(bsjContext ctx,bsjReg arr, bsjReg idx, bsjReg val);
void BSVM_J2Dyt_LoadSlot(bsjContext ctx,bsjReg dst, bsjReg arr, char *idx);
void BSVM_J2Dyt_StoreSlot(bsjContext ctx,bsjReg arr, char *idx, bsjReg val);
void BSVM_J2Dyt_BindSlot(bsjContext ctx,bsjReg arr, char *idx, bsjReg val);
void BSVM_J2Dyt_LoadIndexInt(bsjContext ctx,bsjReg dst, bsjReg arr, int idx);
void BSVM_J2Dyt_StoreIndexInt(bsjContext ctx,bsjReg arr, int idx, bsjReg val);
void BSVM_J2Dyt_CallName(bsjContext ctx,bsjReg dst, char *str, bsjReg args, int cnt);
void BSVM_J2Dyt_TailCallName(bsjContext ctx,bsjReg dst, char *str, bsjReg args, int cnt);
void BSVM_J2Dyt_CallFunc(bsjContext ctx,bsjReg dst, bsjReg fcn, bsjReg args, int cnt);
void BSVM_J2Dyt_TailCallFunc(bsjContext ctx,bsjReg dst, bsjReg fcn, bsjReg args, int cnt);
void BSVM_J2Dyt_MethodCallName(bsjContext ctx,bsjReg dst, bsjReg obj, char *str, bsjReg args, int cnt);
void BSVM_J2Dyt_MethodTailCallName(bsjContext ctx,bsjReg dst, bsjReg obj, char *str, bsjReg args, int cnt);
void BSVM_J2Dyt_DoJumpRegNotFalse(bsjContext ctx, bsjReg reg, char *lbl);
void BSVM_J2Dyt_DoJumpRegFalse(bsjContext ctx, bsjReg reg, char *lbl);
//AHSRC:jit2/j_jit2.c
BGBSVM_API bsjTopContext BSVM_Jit2_AllocTopContext();
BGBSVM_API bsjContext BSVM_Jit2_AllocContext(bsjTopContext top);
BGBSVM_API void BSVM_Jit2_TeardownContext(bsjContext ctx);
BGBSVM_API void BSVM_Jit2_FreeContext(bsjContext ctx);
BGBSVM_API bool BSVM_Jit2_ContextOutputStable(bsjContext ctx);
BGBSVM_API char *BSVM_Jit2_GetOutputAsm(bsjContext ctx);
BGBSVM_API char *BSVM_Jit2_GetOutputLog(bsjContext ctx);
BGBSVM_API char *BSVM_Jit2_GenSym(bsjContext ctx);
BGBSVM_API void BSVM_Jit2_BeginFrame(bsjContext ctx);
BGBSVM_API void BSVM_Jit2_EndFrame(bsjContext ctx);
BGBSVM_API void BSVM_Jit2_FrameReset(bsjContext ctx);
BGBSVM_API void BSVM_Jit2_ErrorLLn(bsjContext ctx,char *file, int line, char *str, ...);
BGBSVM_API void BSVM_Jit2_WarnLLn(bsjContext ctx,char *file, int line, char *str, ...);
BGBSVM_API void BSVM_Jit2_StubErrorLLn(bsjContext ctx,char *file, int line);
BGBSVM_API void BSVM_Jit2_CaseErrorLLn(bsjContext ctx,char *file, int line);
BGBSVM_API void BSVM_Jit2_TypeCheckErrorLLn(bsjContext ctx,char *file, int line);
BGBSVM_API void BSVM_Jit2_SanityCheckErrorLLn(bsjContext ctx,char *file, int line, char *msg);
BGBSVM_API void BSVM_Jit2_AsmReset(bsjContext ctx);
BGBSVM_API void BSVM_Jit2_AsmFlatten(bsjContext ctx);
BGBSVM_API void BSVM_Jit2_AsmPuts(bsjContext ctx, char *str);
BGBSVM_API void BSVM_Jit2_RefBufferReset(char **rcts, char **rcte, char **rct);
BGBSVM_API void BSVM_Jit2_RefBufferPuts(char **rcts, char **rcte, char **rct, char *str);
BGBSVM_API void BSVM_Jit2_TextPuts(bsjContext ctx, char *str);
BGBSVM_API void BSVM_Jit2_DataPuts(bsjContext ctx, char *str);
BGBSVM_API void BSVM_Jit2_BssPuts(bsjContext ctx, char *str);
BGBSVM_API void BSVM_Jit2_LogPuts(bsjContext ctx, char *str);
BGBSVM_API void bsj2_print_lln(bsjContext ctx,char *file, int line, char *str, ...);
BGBSVM_API void bsj2_printlog_lln(bsjContext ctx,char *file, int line, char *str, ...);
BGBSVM_API void bsj2_printdata_lln(bsjContext ctx,char *file, int line, char *str, ...);
BGBSVM_API void bsj2_printbss_lln(bsjContext ctx,char *file, int line, char *str, ...);
BGBSVM_API void bsj2_printasm_lln(bsjContext ctx,char *file, int line, char *str, ...);
//AHSRC:jit2/j_mem.c
BGBSVM_API bsjMem BSVM_J2Mem_AllocMemRef(bsjContext ctx);
BGBSVM_API void BSVM_J2Mem_FreeMemRef(bsjMem mem);
BGBSVM_API char *BSVM_J2Mem_GetMemStr(bsjMem mem);
BGBSVM_API void BSVM_J2Mem_MovRegMem(bsjContext ctx,bsjReg dst, bsjMem src, bsjType ty);
BGBSVM_API void BSVM_J2Mem_MovMemReg(bsjContext ctx,bsjMem dst, bsjReg src, bsjType ty);
BGBSVM_API void BSVM_J2Mem_MovMemMem(bsjContext ctx,bsjMem dst, bsjMem src, bsjType ty);
BGBSVM_API void BSVM_J2Mem_MovRegMemDyt(bsjContext ctx,bsjReg dst, bsjMem src);
BGBSVM_API void BSVM_J2Mem_MovMemRegDyt(bsjContext ctx,bsjMem dst, bsjReg src);
BGBSVM_API void BSVM_J2Mem_MovMemMemDyt(bsjContext ctx,bsjMem dst, bsjMem src);
BGBSVM_API void BSVM_J2Mem_LoadRegRegDisp(bsjContext ctx,bsjReg dst, bsjReg src, int disp, bsjType ty);
BGBSVM_API void BSVM_J2Mem_LoadRegRegDispDyt(bsjContext ctx,bsjReg dst, bsjReg src, int disp);
//AHSRC:jit2/j_reg.c
BGBSVM_API bool BSVM_J2Reg_TypeGRegP(bsjType ty);
BGBSVM_API bool BSVM_J2Reg_TypeXRegP(bsjType ty);
BGBSVM_API bsjReg BSVM_J2Reg_AllocReg(bsjContext ctx, bsjType ty);
BGBSVM_API bsjReg BSVM_J2Reg_ForceAllocReg(bsjContext ctx, bsjType ty);
BGBSVM_API bsjReg BSVM_J2Reg_MapVarReg(bsjContext ctx, bsjVar var);
BGBSVM_API char *BSVM_J2Reg_GetRegName(bsjReg reg);
BGBSVM_API char *BSVM_J2Reg_GetVarRegName(bsjVar var);
BGBSVM_API char *BSVM_J2Reg_GetMapRegName(bsjContext ctx, bsjVar var);
BGBSVM_API void BSVM_J2Reg_FreeReg(bsjReg reg);
BGBSVM_API void BSVM_J2Reg_LockReg(bsjReg reg);
BGBSVM_API void BSVM_J2Reg_UnlockReg(bsjReg reg);
BGBSVM_API void BSVM_J2Reg_SyncRegs(bsjContext ctx);
BGBSVM_API void BSVM_J2Reg_SoftSyncRegs(bsjContext ctx);
BGBSVM_API bsjReg BSVM_J2Reg_GetNamedReg(bsjContext ctx, char *reg);
BGBSVM_API void BSVM_J2Reg_FreeContextRegs(bsjContext ctx);
BGBSVM_API void BSVM_J2Reg_MovReg(bsjContext ctx,bsjReg dst, bsjReg src, bsjType ty);
BGBSVM_API bsjReg BSVM_J2Reg_GetVMContext(bsjContext ctx);
BGBSVM_API bsjReg BSVM_J2Reg_ForceAllocRegDyt(bsjContext ctx);
BGBSVM_API bsjReg BSVM_J2Reg_ForceAllocRegVoidPtr(bsjContext ctx);
//AHSRC:jit2/j_stack.c
BGBSVM_API int BSVM_J2Stack_PushAdjustForType(bsjContext ctx, bsjType ty);
BGBSVM_API int BSVM_J2Stack_PopAdjustForLast(bsjContext ctx);
BGBSVM_API bsjVar BSVM_J2Stack_PushType(bsjContext ctx, bsjType ty);
BGBSVM_API bsjVar BSVM_J2Stack_PopVar(bsjContext ctx);
BGBSVM_API bsjVar BSVM_J2Stack_PeekVar(bsjContext ctx);
BGBSVM_API void BSVM_J2Stack_PopDestroy(bsjContext ctx);
BGBSVM_API bsjVar BSVM_J2Stack_PushReg(bsjContext ctx, bsjReg reg);
BGBSVM_API bsjReg BSVM_J2Stack_PopReg(bsjContext ctx);
BGBSVM_API void BSVM_J2Stack_FreeStack(bsjContext ctx);
BGBSVM_API void BSVM_J2Stack_PushMark(bsjContext ctx);
BGBSVM_API void BSVM_J2Stack_PopToMark(bsjContext ctx);
BGBSVM_API void BSVM_J2Stack_PushDyt(bsjContext ctx, dyt v);
//AHSRC:jit2/j_stackop.c
BGBSVM_API bsjReg BSVM_J2StackOp_PopBuildList(bsjContext ctx);
BGBSVM_API void BSVM_J2Stack_BinaryOp(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2Stack_UnaryOp(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_LoadName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_StoreName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_LoadAddrName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_LoadRefName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_LexLoadIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LexStoreIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LexIncrementIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LexDecrementIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LexPreIncrementIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LexPreDecrementIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LexPostIncrementIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LexPostDecrementIdx(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_IncrementName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_DecrementName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_PreIncrementName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_PreDecrementName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_PostIncrementName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_PostDecrementName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_Sizeof(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_SizeofName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_BeginTry(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_EndTry(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BeginCatch(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_BeginCatchFinal(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_EndCatch(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BeginSync(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_EndSync(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_LockObj(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_UnlockObj(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_ThrowObj(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_ThrowName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_NewName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_NewArrayName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_Unquote(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_SetDefer(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_ToString(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_Import(bsjContext ctx, char *name, char *fl);
BGBSVM_API void BSVM_J2StackOp_Iface(bsjContext ctx, char *name, char *fl);
BGBSVM_API void BSVM_J2StackOp_EndClass(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_EndStruct(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_EndIface(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_EndPackage(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BeginClass(bsjContext ctx,char *name, char *super, char *flags);
BGBSVM_API void BSVM_J2StackOp_BeginStruct(bsjContext ctx,char *name, char *super, char *flags);
BGBSVM_API void BSVM_J2StackOp_BeginIface(bsjContext ctx,char *name, char *super, char *flags);
BGBSVM_API void BSVM_J2StackOp_BeginPackage(bsjContext ctx,char *name, char *flags);
BGBSVM_API void BSVM_J2StackOp_BindName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_DynBindName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_LexBindName(bsjContext ctx, char *name);
BGBSVM_API void BSVM_J2StackOp_TyBind(bsjContext ctx,char *name, char *sig, char *flags);
BGBSVM_API void BSVM_J2StackOp_TyLexBind(bsjContext ctx,char *name, char *sig, char *flags);
BGBSVM_API void BSVM_J2StackOp_TyDynBind(bsjContext ctx,char *name, char *sig, char *flags);
BGBSVM_API void BSVM_J2StackOp_PushSelf(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_PushCurrentFunc(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_LoadIndex(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_StoreIndex(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_LoadIndexAddr(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_LoadIndexName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_StoreIndexName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_LoadIndexAddrName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_LoadIndexRefName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_LoadIndexInt(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_StoreIndexInt(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LoadIndexAddrInt(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_LoadIndexRefInt(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_Close(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_Cast(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_CastName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_Dup(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_Exch(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_ExchSelf(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_ExchTop(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_Pop(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_IndexStack(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_RIndexStack(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_SetIndexStack(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_SetRIndexStack(bsjContext ctx, int idx);
BGBSVM_API void BSVM_J2StackOp_DoJump(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_DoJumpTrue(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_DoJumpFalse(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_DoJumpCondUnary(bsjContext ctx,int op, char *str);
BGBSVM_API void BSVM_J2StackOp_DoJumpCondBinary(bsjContext ctx,int op, char *str);
BGBSVM_API void BSVM_J2StackOp_DoJumpCondBinaryFn(bsjContext ctx,int op, char *str);
BGBSVM_API void BSVM_J2StackOp_DoJumpCondBinaryFl(bsjContext ctx,int op, char *str);
BGBSVM_API void BSVM_J2StackOp_DoJumpCondBinaryLexFn(bsjContext ctx,int op, char *str, int li, int ri);
BGBSVM_API void BSVM_J2StackOp_DoJumpCondBinaryFnC(bsjContext ctx,int op, char *str, int c);
BGBSVM_API void BSVM_J2StackOp_DoJumpCondBinaryLexFnC(bsjContext ctx,int op, char *str, int li, int c);
BGBSVM_API void BSVM_J2StackOp_CompoundExch(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_JumpIndirectAddr(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_LoadIndirectAddr(bsjContext ctx, char *name);
BGBSVM_API void BSVM_J2StackOp_BuildList(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildDict(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildAttr(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildVector(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildComplexImag(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildComplex(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildMatrix(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildQuat(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildArray(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BuildArrayName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_IncrementFn(bsjContext ctx, int v);
BGBSVM_API void BSVM_J2StackOp_DecrementFn(bsjContext ctx, int v);
BGBSVM_API void BSVM_J2StackOp_ConvFn2Fl(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_ConvFl2Fn(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_BinaryOp(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_UnaryOp(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_BinaryOpFn(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_UnaryOpFn(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_BinaryOpFnC(bsjContext ctx, int op, int c);
BGBSVM_API void BSVM_J2StackOp_BinaryOpFl(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_UnaryOpFl(bsjContext ctx, int op);
BGBSVM_API void BSVM_J2StackOp_BinaryOpName(bsjContext ctx, char *op);
BGBSVM_API void BSVM_J2StackOp_UnaryOpName(bsjContext ctx, char *op);
BGBSVM_API void BSVM_J2StackOp_Call(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_TailCall(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_CallName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_TailCallName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_MethodCall(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_MethodTailCall(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_MethodCallName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_MethodTailCallName(bsjContext ctx, char *str);
BGBSVM_API void BSVM_J2StackOp_Return(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_CallCF(bsjContext ctx);
BGBSVM_API void BSVM_J2StackOp_TailCallCF(bsjContext ctx);
//AHSRC:jit2/j_tvar.c
int BSVM_J2Var_TVarMapFrameSlots(bsjContext ctx, int szp, int alp);
void BSVM_J2Var_TVarMapFrame(bsjContext ctx, bsjVar var);
bsjVar BSVM_J2Var_AllocTVar(bsjContext ctx, bsjType ty);
void BSVM_J2Var_FreeTVar(bsjContext ctx, bsjVar var);
//AHSRC:jit2/j_type.c
BGBSVM_API BSVM_Jit2_TypeInfo *BSVM_Jit2_LookupTypeTop(BSVM_Jit2_TopContext *top, char *sig);
BGBSVM_API BSVM_Jit2_TypeInfo *BSVM_Jit2_GetTypeTop(BSVM_Jit2_TopContext *top, char *sig);
BGBSVM_API bsjType BSVM_J2Type_LookupType(bsjContext ctx, char *sig);
BGBSVM_API bsjType BSVM_J2Type_GetType(bsjContext ctx, char *sig);
BGBSVM_API bsjType BSVM_J2Type_GetTypeDyt(bsjContext ctx);
BGBSVM_API char *BSVM_J2Type_GetTypeSig(bsjType ty);
BGBSVM_API bool BSVM_J2Type_PointerP(bsjType ty);
BGBSVM_API bool BSVM_J2Type_VariantP(bsjType ty);
BGBSVM_API bool BSVM_J2Type_UnsignedP(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Int32P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Int16P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Int8P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallInt32P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallInt16P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallInt8P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Int64P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Int128P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallInt64P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallInt128P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Float16P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Float32P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Float64P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_Float128P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallFloat32P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallFloat64P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallFloat128P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallReal32P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallReal64P(bsjType ty);
BGBSVM_API bool BSVM_J2Type_SmallReal128P(bsjType ty);
BGBSVM_API int BSVM_J2Type_GetTypeSize(bsjType ty);
BGBSVM_API int BSVM_J2Type_GetTypeAlign(bsjType ty);
BGBSVM_API int BSVM_J2Type_PointerSizeTop(BSVM_Jit2_TopContext *ctx);
BGBSVM_API int BSVM_J2Type_PointerSize(bsjContext ctx);
BGBSVM_API int BSVM_J2Type_GetTypeSizePtr(bsjType ty);
BGBSVM_API int BSVM_J2Type_GetTypeAlignPtr(bsjType ty);
BGBSVM_API bool BSVM_J2Type_TypeEqualP(bsjType lty, bsjType rty);
//AHSRC:jit2/j_vars.c
BGBSVM_API bsjVar BSVM_J2Vars_AllocVar(bsjContext ctx);
BGBSVM_API bsjMem BSVM_J2Vars_GetVarMem(bsjVar var);
BGBSVM_API void BSVM_J2Vars_FreeVar(bsjVar var);
BGBSVM_API bsjVar BSVM_J2Vars_CreateLocal(bsjContext ctx,char *name, bsjType type);
BGBSVM_API bsjVar BSVM_J2Vars_CreateArgument(bsjContext ctx,char *name, bsjType type);
BGBSVM_API void BSVM_J2Vars_FreeVars(bsjContext ctx);
BGBSVM_API bsjVar BSVM_J2Vars_LexBind(bsjContext ctx,char *name, bsjType type);
BGBSVM_API bsjVar BSVM_J2Vars_LexBindArg(bsjContext ctx,char *name, bsjType type);
BGBSVM_API bsjVar BSVM_J2Vars_LexBindLocalSig(bsjContext ctx,char *name, char *sig, char *fl);
BGBSVM_API bsjVar BSVM_J2Vars_LexBindArgSig(bsjContext ctx,char *name, char *sig, char *fl);
BGBSVM_API bsjVar BSVM_J2Vars_IndexLexical(bsjContext ctx, int idx);
BGBSVM_API bsjVar BSVM_J2Vars_LookupLexical(bsjContext ctx, char *name);
BGBSVM_API void BSVM_J2Vars_WriteVarReg(bsjContext ctx,bsjVar var, bsjReg reg, bsjType ty);
BGBSVM_API void BSVM_J2Vars_ReadRegVar(bsjContext ctx,bsjReg reg, bsjVar var, bsjType ty);
BGBSVM_API void BSVM_J2Vars_MapVarReg(bsjContext ctx,bsjVar var, bsjReg reg);
BGBSVM_API void BSVM_J2Vars_MovVarReg(bsjContext ctx,bsjVar var, bsjReg reg, bsjType ty);
BGBSVM_API void BSVM_J2Vars_MovRegVar(bsjContext ctx,bsjReg reg, bsjVar var, bsjType ty);
BGBSVM_API bsjReg BSVM_J2Vars_LoadVarReg(bsjContext ctx, bsjVar var);
BGBSVM_API bsjReg BSVM_J2Vars_LoadLexVarRegName(bsjContext ctx, char *str);
BGBSVM_API bsjReg BSVM_J2Vars_LoadLexVarRegIdx(bsjContext ctx, int idx);
//AHSRC:jit2/x86/jix86_arith.c
void J2ArithX86_MovReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
void J2ArithX86_AddReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
void J2ArithX86_SubReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
void J2ArithX86_MulReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
void J2ArithX86_DivReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
void J2ArithX86_AndReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
void J2ArithX86_OrReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
void J2ArithX86_XorReg(bsjContext ctx, bsjReg dst, bsjReg src, bsjType ty);
//AHSRC:jit2/x86/jix86_frame.c
BGBSVM_API void BSVM_J2FrameX86_BeginFrame(bsjContext ctx);
BGBSVM_API void BSVM_J2FrameX86_EndFrame(bsjContext ctx);
BGBSVM_API void BSVM_J2FrameX86_DoReturn(bsjContext ctx);
void BSVM_J2FrameX86_DoJump(bsjContext ctx, char *lbl);
void BSVM_J2FrameX86_EmitLabel(bsjContext ctx, char *lbl);
void BSVM_J2FrameX86_ReturnReg(bsjContext ctx, bsjReg reg);
void BSVM_J2FrameX86_ReturnVar(bsjContext ctx, bsjVar var);
bsjReg BSVM_J2FrameX86_GetVMContext(bsjContext ctx);
int BSVM_J2FrameX86_PopArgsDyt(bsjContext ctx);
//AHSRC:jit2/x86/jix86_mem.c
char *J2MemX86_GetMemStr(bsjMem mem);
void J2MemX86_MovRegMem(bsjContext ctx, bsjReg dst, bsjMem src, bsjType ty);
void J2MemX86_MovMemReg(bsjContext ctx, bsjMem dst, bsjReg src, bsjType ty);
void J2MemX86_MovMemMem(bsjContext ctx, bsjMem dst, bsjMem src, bsjType ty);
bsjMem J2MemX86_GetVarMem(bsjVar var);
bsjMem J2MemX86_GetMemTargDisp(bsjContext ctx, int disp);
bsjMem J2MemX86_GetMemRegDisp(bsjContext ctx, bsjReg reg, int disp);
void J2MemX86_LeaRegMem(bsjContext ctx,bsjReg dst, bsjMem src);
void J2MemX86_LeaRegTargDisp(bsjContext ctx, bsjReg dst, int disp);
bsjReg J2MemX86_GetRegTargDisp(bsjContext ctx, int disp);
bsjReg J2MemX86_GetRegTargDispDyt(bsjContext ctx, int disp);
//AHSRC:jit2/x86/jix86_reg.c
char *J2RegX86_GetRegName(bsjReg reg);
char *J2RegX86_GetBaseGRegIndexName(bsjContext ctx, int idx);
char *J2RegX86_GetBaseXRegIndexName(bsjContext ctx, int idx);
char *J2RegX86_GetBaseGRegBaseName(bsjReg reg);
bool J2RegX86_DWordP(bsjReg reg);
bool J2RegX86_WordP(bsjReg reg);
bool J2RegX86_QWordP(bsjReg reg);
bool J2RegX86_XMMP(bsjReg reg);
bool J2RegX86_XMMSSP(bsjReg reg);
bool J2RegX86_XMMSDP(bsjReg reg);
bool J2RegX86_XMMPSP(bsjReg reg);
bool J2RegX86_XMMPDP(bsjReg reg);
bsjReg BSVM_J2RegX86_GetXRegByIndex(bsjContext ctx, int idx, int rt);
bsjReg BSVM_J2RegX86_GetGRegByIndex(bsjContext ctx, int idx, int rt);
bsjReg BSVM_J2RegX86_GetBaseGRegByIndex(bsjContext ctx, int idx);
bsjReg BSVM_J2RegX86_GetGRegByIndexType(bsjContext ctx, int idx, bsjType ty);
bsjReg BSVM_J2RegX86_GetXRegByIndexType(bsjContext ctx, int idx, bsjType ty);
bsjReg BSVM_J2RegX86_GetRegByIndexType(bsjContext ctx, int idx, bsjType ty);
bsjReg BSVM_J2RegX86_AllocXReg(bsjContext ctx, bsjType ty);
bsjReg BSVM_J2RegX86_AllocGReg(bsjContext ctx, bsjType ty);
bsjReg BSVM_J2RegX86_AllocReg(bsjContext ctx, bsjType ty);
bsjReg BSVM_J2RegX86_MapVarReg(bsjContext ctx, bsjVar var);
void BSVM_J2RegX86_FreeReg(bsjReg reg);
bsjReg BSVM_J2RegX86_GetNamedReg(bsjContext ctx, char *name);
BGBSVM_API int BSVM_J2RegX86_GRegValidMask(bsjContext ctx, int rt);
BGBSVM_API int BSVM_J2RegX86_GRegSaveMask(bsjContext ctx);
BGBSVM_API int BSVM_J2RegX86_XRegSaveMask(bsjContext ctx);
//AHSRC:jit2/j_core4.c
void BSVM_J2Core_Init();
char *BSVM_J2Core_GenSym();
dyt BSVM_J2Core_ReadID(bsjContext ctx);
int BSVM_J2Core_ReadIDX(bsjContext ctx);
int BSVM_J2Core_ReadSIDX(bsjContext ctx);
s64 BSVM_J2Core_ReadVLI(bsjContext ctx);
s64 BSVM_J2Core_ReadSVLI(bsjContext ctx);
int BSVM_J2Core_ReadShort(bsjContext ctx);
int BSVM_J2Core_DumpOpcode(bsjContext ctx);
void BSVM_J2Core_SkipOpcodeArgs(bsjContext ctx, int op);
void BSVM_J2Core_SkipOpcode(bsjContext ctx);
void BSVM_J2Core_PreStep(bsjContext ctx);
char *BSVM_J2Core_GetLabel(bsjContext ctx, byte *ip);
int BSVM_J2Core_Step(bsjContext ctx);
void BSVM_J2Core_CompileBlock(bsjContext ctx, BSVM_SVMBlock *fcn);
BSVM_SVMBlock *BSVM_J2Core_GetBlockListR(BSVM_SVMBlock *fcn, BSVM_SVMBlock *lst);
BSVM_SVMBlock *BSVM_J2Core_GetBlockList(BSVM_SVMBlock *fcn);
void BSVM_J2Core_TestJitBlock(BSVM_SVMBlock *fcn);
//AHSRC:bsasm/bs2a_token.c
BGBSVM_API char *BS2ASM_Parse_EatWhiteOnly(char *s);
BGBSVM_API char *BS2ASM_Parse_EatWhite(char *s);
BGBSVM_API int BS2ASM_Parse_IsWhiteOnly(char *s);
BGBSVM_API int BS2ASM_Parse_IsLineBreak(char *se);
BGBSVM_API int BS2ASM_Parse_OpChar(int c);
BGBSVM_API int BS2ASM_Parse_MatchTokenListLen(char *str, char **lst);
BGBSVM_API char *BS2ASM_Parse_Token(char *s, char *b, int *ty);
BGBSVM_API int BS2ASM_Parse_PeekChar(char **str);
BGBSVM_API int BS2ASM_Parse_ParseChar(char **str);
BGBSVM_API int BS2ASM_Parse_EmitChar(char **str, int j);
BGBSVM_API int BS2ASM_Parse_NameInitChar(int c);
BGBSVM_API int BS2ASM_Parse_NameChar(int c);
BGBSVM_API char *BS2ASM_Parse_CIfy(char *s);
BGBSVM_API int bs2asm_strisreal(char *str);
BGBSVM_API s64 bs2asm_atoi(char *str);
BGBSVM_API char *bs2asm_itoa(s64 val);
BGBSVM_API int bs2asm_stricmp(char *s1, char *s2);
BGBSVM_API char *BS2ASM_Parse_TokenC(char *s, char *b, int *ty);
BGBSVM_API char *BS2ASM_Parse_MultiToken(char *str, char **ab, int *at, int n);
BGBSVM_API char *BS2ASM_Parse_EatMultiToken(char *str, int n);
BGBSVM_API char *BS2ASM_Parse_EatToken(char *str);
BGBSVM_API char *BS2ASM_Parse_TokenQN(char *str, char *b, int *rty);
BGBSVM_API char *BS2ASM_Parse_MultiTokenQN(char *str, char **ab, int *at, int n);
BGBSVM_API char *BS2ASM_Parse_EatMultiTokenQN(char *str, int n);
BGBSVM_API char *BS2ASM_Parse_EatTokenQN(char *str);
//AHSRC:bsasm/bs2a_opcode.c
BGBSVM_API int BS2ASM_LookupOpcode(char *name);
BGBSVM_API int BS2ASM_LookupOpcode2(char *name);
BGBSVM_API int BS2ASM_LookupOpcodeArgs(char *name, int *at, int na);
BGBSVM_API char *BS2ASM_ParseOpArgs(BS2ASM_Context *ctx, BS2ASM_Block *blk,char *str, char *opname);
BGBSVM_API char *BS2ASM_ParseCommand(BS2ASM_Context *ctx,BS2ASM_Block *blk, char *str);
//AHSRC:bsasm/bs2a_entparse.c
void BS2ASM_EntParse_DeclValue(BS2ASM_Context *ctx, char **str,BS2ASM_TagEntity *ent, char *key);
void BS2ASM_EntParse_DeclBlock(BS2ASM_Context *ctx, char **str,BS2ASM_TagEntity *ent);
BS2ASM_TagEntity *BS2ASM_EntParse_Buffer(BS2ASM_Context *ctx, char *str);
//AHSRC:bsasm/bs2a_tagent.c
void *bs2asm_tmalloc(char *type, int sz);
void *bs2asm_ctalloc(BS2ASM_Context *ctx, char *type, int sz);
void *bs2asm_cmalloc(BS2ASM_Context *ctx, int sz);
void *bs2asm_crealloc(BS2ASM_Context *ctx, void *ptr, int sz);
void *bs2asm_realloc(void *ptr, int sz);
void *bs2asm_strdup(char *str);
void *bs2asm_rstrdup(char *str);
BS2ASM_TagEntity *BS2ASM_NewTagEntity(BS2ASM_Context *ctx, char *tag);
int BS2ASM_IndexEntityField(BS2ASM_TagEntity *ent, char *key);
BS2ASM_TagEntityAttr *BS2ASM_LookupEntityAttr(BS2ASM_TagEntity *ent, char *key);
BS2ASM_TagEntityAttr *BS2ASM_GetEntityAttr(BS2ASM_TagEntity *ent, char *key);
void BS2ASM_SetEntityValue(BS2ASM_TagEntity *ent, char *key, char *value);
char *BS2ASM_GetEntityValue(BS2ASM_TagEntity *ent, char *key);
void BS2ASM_SetEntityValueEnt(BS2ASM_TagEntity *ent, char *key,BS2ASM_TagEntity *entval);
BS2ASM_TagEntity *BS2ASM_GetEntityValueEnt(BS2ASM_TagEntity *ent, char *key);
void BS2ASM_AddEntityChild(BS2ASM_TagEntity *parent, BS2ASM_TagEntity *child);
BS2ASM_TagEntity *BS2ASM_FindEntityTag(BS2ASM_TagEntity *lst, char *tag);
BS2ASM_TagEntity *BS2ASM_FindEntityChildTag(BS2ASM_TagEntity *ent, char *tag);
BS2ASM_List *BS2ASM_NewList(BS2ASM_Context *ctx, char *type);
int BS2ASM_ListEmptyP(BS2ASM_List *list);
int BS2ASM_AddListEntry(BS2ASM_List *list, BS2ASM_TagEntity *ent);
BS2ASM_List *BS2ASM_CopyList(BS2ASM_Context *ctx, BS2ASM_TagEntity *ent);
void BS2ASM_DumpEntityTree(BS2ASM_TagEntity *ent);
//AHSRC:bsasm/bs2a_api.c
void BS2ASM_Error(BS2ASM_Context *ctx, char *str, ...);
BS2ASM_Context *BS2ASM_AllocContext();
BGBSVM_API int BS2ASM_AssembleBuffer(char *str, byte *buf, int lim);
//AHSRC:bsasm/bs2a_vli.c
BGBSVM_API byte *BS2ASM_EncodeOpcode(byte *ip, int n);
BGBSVM_API byte *BS2ASM_EncVLI(byte *ip, long long i);
BGBSVM_API byte *BS2ASM_EncSVLI(byte *ip, long long i);
BGBSVM_API s64 BS2ASM_DecVLI(byte **rip);
BGBSVM_API s64 BS2ASM_DecSVLI(byte **rip);
BGBSVM_API byte *BS2ASM_EncS16(byte *ip, s16 i);
BGBSVM_API byte *BS2ASM_EncS32(byte *ip, s32 i);
BGBSVM_API byte *BS2ASM_EncS64(byte *ip, s64 i);
BGBSVM_API byte *BS2ASM_EncU16(byte *ip, u16 i);
BGBSVM_API byte *BS2ASM_EncU32(byte *ip, u32 i);
BGBSVM_API byte *BS2ASM_EncU64(byte *ip, u64 i);
BGBSVM_API byte *BS2ASM_EncF32(byte *ip, f32 i);
BGBSVM_API byte *BS2ASM_EncF64(byte *ip, f64 i);
BGBSVM_API u32 BS2ASM_DecU32(byte **rip);
BGBSVM_API s32 BS2ASM_DecS32(byte **rip);
BGBSVM_API u64 BS2ASM_DecU64(byte **rip);
BGBSVM_API s64 BS2ASM_DecS64(byte **rip);
BGBSVM_API s128 BS2ASM_DecS128(byte **rip);
BGBSVM_API f32 BS2ASM_DecFloat32(byte **rip);
BGBSVM_API f64 BS2ASM_DecFloat64(byte **rip);
BGBSVM_API f128 BS2ASM_DecFloat128(byte **rip);
//AHSRC:bsasm/bs2a_block.c
BGBSVM_API BS2ASM_Block *BS2ASM_AllocBlock(BS2ASM_Context *ctx);
BGBSVM_API void BS2ASM_FinishBlock(BS2ASM_Context *ctx, BS2ASM_Block *blk);
BGBSVM_API int BS2ASM_LookupBlockLabel(BS2ASM_Block *blk, char *name);
BGBSVM_API void BS2ASM_CheckExpandBlockLabel(BS2ASM_Block *blk);
BGBSVM_API int BS2ASM_AddBlockLabel(BS2ASM_Block *blk, char *name);
BGBSVM_API int BS2ASM_AddBlockReloc(BS2ASM_Block *blk, char *name);
BGBSVM_API int BS2ASM_CheckEmitBlock(BS2ASM_Block *blk);
BGBSVM_API int BS2ASM_EmitBlockOpcode(BS2ASM_Block *blk, int op);
BGBSVM_API int BS2ASM_EmitBlockOpcodeName(BS2ASM_Block *blk, char *op);
BGBSVM_API int BS2ASM_EmitBlockVLI(BS2ASM_Block *blk, s64 val);
BGBSVM_API int BS2ASM_EmitBlockSVLI(BS2ASM_Block *blk, s64 val);
BGBSVM_API int BS2ASM_EmitBlockSym(BS2ASM_Block *blk, char *str);
BGBSVM_API int BS2ASM_EmitBlockString(BS2ASM_Block *blk, char *str);
BGBSVM_API int BS2ASM_EmitBlockInt(BS2ASM_Block *blk, s64 val);
BGBSVM_API int BS2ASM_EmitBlockLong(BS2ASM_Block *blk, s64 val);
BGBSVM_API int BS2ASM_EmitBlockFloat(BS2ASM_Block *blk, double val);
BGBSVM_API int BS2ASM_EmitBlockDouble(BS2ASM_Block *blk, double val);
BGBSVM_API int BS2ASM_EmitBlockJmpAddr(BS2ASM_Block *blk, char *str);
//AHSRC:bsasm/bs2a_literal.c
void BS2ASM_LitCheckExpand(BS2ASM_Context *ctx);
int BS2ASM_HashString(char *str);
int BS2ASM_HashString2(char *str0, char *str1);
int BS2ASM_HashString3(char *str0, char *str1, char *str2);
int BS2ASM_LitIndexSym(BS2ASM_Context *ctx, char *sym);
int BS2ASM_LitIndexString(BS2ASM_Context *ctx, char *sym);
int BS2ASM_LitIndexUTF8(BS2ASM_Context *ctx, char *sym);
int BS2ASM_LitIndexInt(BS2ASM_Context *ctx, s32 val);
int BS2ASM_LitIndexLong(BS2ASM_Context *ctx, s64 val);
int BS2ASM_LitIndexFloat(BS2ASM_Context *ctx, f32 val);
int BS2ASM_LitIndexDouble(BS2ASM_Context *ctx, f64 val);
int BS2ASM_LitIndexInt32(BS2ASM_Context *ctx, s32 val);
int BS2ASM_LitIndexInt64(BS2ASM_Context *ctx, s64 val);
int BS2ASM_LitIndexFloat32(BS2ASM_Context *ctx, f32 val);
int BS2ASM_LitIndexFloat64(BS2ASM_Context *ctx, f64 val);
int BS2ASM_LitIndexTagEnt(BS2ASM_Context *ctx, BS2ASM_TagEntity *ent);
int BS2ASM_LitIndexCheckNameType(BS2ASM_Context *ctx,int idx, char *name, char *type);
int BS2ASM_LitIndexNameType(BS2ASM_Context *ctx, char *name, char *type);
int BS2ASM_LitIndexClassRef2(BS2ASM_Context *ctx,BS2ASM_TagEntity *scope, char *sym);
int BS2ASM_LitIndexClassRef(BS2ASM_Context *ctx, char *sym);
int BS2ASM_LitIndexBlob(BS2ASM_Context *ctx, byte *data, int sz);
int BS2ASM_LitIndexBlock(BS2ASM_Context *ctx, BS2ASM_Block *blk);
//AHSRC:bsasm/bs2a_lump.c
BS2ASM_ImageLump *BS2ASM_AllocLump(BS2ASM_Context *ctx);
void BS2ASM_ResetLump(BS2ASM_ImageLump *lmp);
BGBSVM_API int BS2ASM_CheckEmitLump(BS2ASM_ImageLump *lmp, int sz);
BGBSVM_API int BS2ASM_EmitLumpOpcode(BS2ASM_ImageLump *lmp, int op);
BGBSVM_API int BS2ASM_EmitLumpVLI(BS2ASM_ImageLump *lmp, s64 val);
BGBSVM_API int BS2ASM_EmitLumpSVLI(BS2ASM_ImageLump *lmp, s64 val);
BGBSVM_API int BS2ASM_EmitLumpSym(BS2ASM_ImageLump *lmp, char *str);
BGBSVM_API int BS2ASM_EmitLumpString(BS2ASM_ImageLump *lmp, char *str);
BGBSVM_API int BS2ASM_EmitLumpUTF8(BS2ASM_ImageLump *lmp, char *str);
BGBSVM_API int BS2ASM_EmitLumpNameType(BS2ASM_ImageLump *lmp,char *name, char *type);
BGBSVM_API int BS2ASM_EmitLumpEntity(BS2ASM_ImageLump *lmp,BS2ASM_TagEntity *ent);
BGBSVM_API int BS2ASM_EmitLumpInt(BS2ASM_ImageLump *lmp, s64 val);
BGBSVM_API int BS2ASM_EmitLumpLong(BS2ASM_ImageLump *lmp, s64 val);
BGBSVM_API int BS2ASM_EmitLumpFloat(BS2ASM_ImageLump *lmp, double val);
BGBSVM_API int BS2ASM_EmitLumpDouble(BS2ASM_ImageLump *lmp, double val);
void BS2ASM_EmitLumpByte(BS2ASM_ImageLump *lmp, int val);
void BS2ASM_EmitLumpBytes(BS2ASM_ImageLump *lmp, byte *buf, int sz);
BGBSVM_API void BS2ASM_EmitLumpInt16(BS2ASM_ImageLump *lmp, int val);
BGBSVM_API void BS2ASM_EmitLumpInt32(BS2ASM_ImageLump *lmp, s32 val);
BGBSVM_API void BS2ASM_EmitLumpInt64(BS2ASM_ImageLump *lmp, s64 val);
BGBSVM_API void BS2ASM_EmitLumpFloat32(BS2ASM_ImageLump *lmp, f32 val);
BGBSVM_API void BS2ASM_EmitLumpFloat64(BS2ASM_ImageLump *lmp, f64 val);
