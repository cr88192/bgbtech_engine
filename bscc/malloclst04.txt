./bgb_sapp.c:		free(basm_pp_headv[i]);
./bgb_sapp.c:			if(cur->args)free(cur->args);
./bgb_sapp.c:			free(cur->value);
./bgb_sapp.c:			free(cur);
./bgb_sapp.c:		if(cur->args)free(cur->args);
./bgb_sapp.c:		free(cur->value);
./bgb_sapp.c:		free(cur);
./bgb_sapp.c:		if(cur->args)free(cur->args);
./bgb_sapp.c:		free(cur->value);
./bgb_sapp.c:		free(cur);
./bgb_sapp.c:		free(cur->value);
./bgb_sapp.c:		free(cur->value);
./bgb_sapp.c:	free(cur->value);
./bgb_sapp.c:		free(cur->value);
./bgb_sapp.c:	free(buf);
./bgbcli/base/bcli_image.c:void bgbcli_free(void *p)
./bgbcli/base/bcli_image.c:	free(p);
./bgbvx86/vxlib/vxcore/syscalls.c:VXCORE_API void vx_free(void *p)
./bgbvx86/vxlib/vxcore/syscalls.c:	vx_free(dir);
./bgbvx86/vxlib/vxcore/pdpc201/stdio.c:                free(myfile);
./bgbvx86/vxlib/vxcore/pdpc201/stdio.c:        free(stream->intBuffer);
./bgbvx86/vxlib/vxcore/pdpc201/stdio.c:        free(stream);
./bgbvx86/vxlib/vxcore/pdpc201/stdio.c:            free(stream);
./bgbvx86/vxlib/vxcore/pdpc201/stdio.c:        free(stream->intBuffer);
./bgbvx86/vxlib/vxcore/pdpc201/stdio.c:        free(stream);
./bgbvx86/vxlib/vxcore/pdpc201/stdio.c:        free(stream);
./bgbvx86/vxlib/vxcore/pdpc201/stdlib.c:        free(ptr);
./bgbvx86/vxlib/vxcore/pdpc201/stdlib.c:        free(ptr);
./bgbvx86/vxlib/vxcore/pdpc201/stdlib.c:__PDPCLIB_API__ void free(void *ptr)
./bgbvx86/vxlib/vxcore/pdpc201/vx86supa.c:    { vx_free(ptr); }
./bgbvx86/base/b86_image.c:void bgbv86_free(void *p)
./bgbvx86/base/b86_image.c:	free(p);
./bgbvx86/base/b86_image.c:	bgbv86_free(ctx);
./bgbvx86/base/b86_image.c:	bgbv86_free(img);
./bgbvx86/base/b86_image.c:			bgbv86_free(ctx->map[i]->addr);
./bgbvx86/base/b86_image.c:			bgbv86_free(ctx->map[i]->cell);
./bgbvx86/base/b86_image.c:		bgbv86_free(ctx->map[i]);
./bgbvx86/base/b86_image.c:			bgbv86_free(ctx->map[i]->addr);
./bgbvx86/base/b86_image.c:			bgbv86_free(ctx->map[i]->cell);
./bgbvx86/base/b86_util.c:		free(buf);
./bgbvx86/base/b86_inthdlr.c:4098=free(void *ptr);
./bgbvx86/base/b86_inthdlr.c:		free(s);
./bgbvx86/base/b86_inthdlr.c:int bgbv86_ihdlr_free(BGBV86_Context *ctx)
./bgbvx86/base/b86_inthdlr.c:	bgbv86_free(buf);
./bgbvx86/base/b86_inthdlr.c:	bgbv86_free(buf);
./bgbvx86/base/bl86_coff.c://	free(buf);
./bgbvx86/base/bl86_coff.c:	free(strs);
./bgbvx86/base/bl86_coff.c:		free(buf);
./bgbvx86/base/bl86_coff.c:	free(buf);
./bgbvx86/base/bl86_coff.c:		free(buf);
./bgbvx86/base/bl86_coff.c:	free(buf);
./bgbvx86/base/bl86_coff.c:		free(buf);
./bgbvx86/base/bl86_ctx.c:	free(ctx->label_name);
./bgbvx86/base/bl86_ctx.c:	free(ctx->label_pos);
./bgbvx86/base/bl86_ctx.c:	free(ctx->goto_name);
./bgbvx86/base/bl86_ctx.c:	free(ctx->goto_pos);
./bgbvx86/base/bl86_ctx.c:	free(ctx->goto_type);
./bgbvx86/base/bl86_ctx.c:	free(ctx->proxy_name);
./bgbvx86/base/bl86_ctx.c:	free(ctx);
./bgbvx86/base/b86_gcas.c:	free(obj);
./bgbvx86/base/vx_shell.c:	bgbv86_free(buf);
./bgbvx86/base/b86_pio.c:			bgbv86_free(bgbv86_ioshm[fd]->ptr);
./bgbvx86/base/b86_pio.c:		bgbv86_free(bgbv86_ioshm[fd]);
./bgbvx86/base/b86_socket.c:	bgbv86_free(msg->msg_data);
./bgbvx86/base/b86_socket.c:		bgbv86_free(buf->pbuf[i]);
./bgbvx86/base/b86_socket.c:	bgbv86_free(buf->pbuf);
./bgbvx86/base/b86_socket.c:	bgbv86_free(buf);
./bgbasm2/basmtst3.c://		gcfree(s);
./bgbasm2/link/bldr_coff.c://	free(buf);
./bgbasm2/link/bldr_coff.c:	free(strs);
./bgbasm2/link/bldr_coff.c:		free(buf);
./bgbasm2/link/bldr_coff.c:	free(buf);
./bgbasm2/link/bldr_coff.c:		free(buf);
./bgbasm2/link/bldr_coff.c:	free(buf);
./bgbasm2/link/bldr_coff.c:		free(buf);
./bgbasm2/link/link_context.c:	free(ctx->label_name);
./bgbasm2/link/link_context.c:	free(ctx->label_pos);
./bgbasm2/link/link_context.c:	free(ctx->goto_name);
./bgbasm2/link/link_context.c:	free(ctx->goto_pos);
./bgbasm2/link/link_context.c:	free(ctx->goto_type);
./bgbasm2/link/link_context.c://	free(ctx->const_name);
./bgbasm2/link/link_context.c://	free(ctx->const_value);
./bgbasm2/link/link_context.c:	free(ctx->proxy_name);
./bgbasm2/link/link_context.c:	free(ctx);
./bgbasm2/link/link_core.c:	free(obj);
./bgbasm2/asm/basm_coff.c://	free(buf);
./bgbasm2/asm/basm_coff.c:	free(strs);
./bgbasm2/asm/basm_coff.c:		free(buf);
./bgbasm2/asm/basm_coff.c:	free(buf);
./bgbasm2/asm/basm_coff.c:		free(buf);
./bgbasm2/asm/basm_coff.c:	free(buf);
./bgbasm2/asm/basm_coff.c:		free(buf);
./bgbasm2/asm/basm_core.c:	free(ctx->label_name);
./bgbasm2/asm/basm_core.c:	free(ctx->label_pos);
./bgbasm2/asm/basm_core.c:	free(ctx->goto_name);
./bgbasm2/asm/basm_core.c:	free(ctx->goto_pos);
./bgbasm2/asm/basm_core.c:	free(ctx->goto_type);
./bgbasm2/asm/basm_core.c:	free(ctx->const_name);
./bgbasm2/asm/basm_core.c:	free(ctx->const_value);
./bgbasm2/asm/basm_core.c:	free(ctx->proxy_name);
./bgbasm2/asm/basm_core.c:	free(ctx->llbl_name);
./bgbasm2/asm/basm_core.c:	free(ctx->llbl_pos);
./bgbasm2/asm/basm_core.c:	free(ctx);
./bgbasm2/asm/basm_elf.c:	free(strs);
./bgbasm2/front/basm_api.c:		free(ctx->alloc_block[i]);
./bgbasm2/front/basm_api.c://	free(tbuf);
./bgbasm2/front/basm_api.c:	free(obj);
./bgbasm2/front/basm_api.c:	free(obj);
./bgbasm2/front/basm_api.c:	free(obj);
./bgbasm2/front/basm_api.c:	free(buf);
./bgbasm2/front/basm_api.c:	free(buf);
./bgbasm2/front/basm_api.c:	free(buf);
./bgbasm2/front/basm_api.c:	free(buf);
./bgbasm2/front/basm_api.c:	free(obj);
./bgbasm2/front/basm_api.c:	free(obj);
./bgbasm2/front/basm_api.c:	free(obj);
./bgbasm2/front/basm_api.c:	free(ip);
./bgbasm2/front/basm_api.c:	free(buf);
./bgbasm2/front/basm_api.c:	free(buf);
./bgbasm2/front/basm_preproc.c:		free(basm_pp_headv[i]);
./bgbasm2/front/basm_preproc.c:			if(cur->args)free(cur->args);
./bgbasm2/front/basm_preproc.c:			free(cur->value);
./bgbasm2/front/basm_preproc.c:			free(cur);
./bgbasm2/front/basm_preproc.c:		if(cur->args)free(cur->args);
./bgbasm2/front/basm_preproc.c:		free(cur->value);
./bgbasm2/front/basm_preproc.c:		free(cur);
./bgbasm2/front/basm_preproc.c:		if(cur->args)free(cur->args);
./bgbasm2/front/basm_preproc.c:		free(cur->value);
./bgbasm2/front/basm_preproc.c:		free(cur);
./bgbasm2/front/basm_preproc.c:		free(cur->value);
./bgbasm2/front/basm_preproc.c:		free(cur->value);
./bgbasm2/front/basm_preproc.c:	free(cur->value);
./bgbasm2/front/basm_preproc.c:		free(cur->value);
./bgbasm2/front/basm_preproc.c:	free(buf);
./bgbasm2/front/basm_xmeta.c:	if(!a[0]) { free(a); return(NULL); }
./bgbasm2/front/basm_xmeta.c:		for(i=0; a[i]; i++)free(a[i]);
./bgbasm2/front/basm_xmeta.c:		free(a);
./bgbasm2/front/basm_xmeta.c:	for(i=0; a[i]; i++)free(a[i]);
./bgbasm2/front/basm_xmeta.c:	free(a);
./bgbasm2/front/basm_xmeta.c:	if(!a[0]) { free(a); return; }
./bgbasm2/front/basm_xmeta.c:	for(i=0; a[i]; i++)free(a[i]);
./bgbasm2/front/basm_xmeta.c:	free(a);
./bgbasm2/front/basm_xmeta.c:			for(j=0; a[j]; j++)free(a[j]);
./bgbasm2/front/basm_xmeta.c:			free(a);
./bgbasm2/front/basm_xmeta.c:		free(cur->tmp);
./bgbasm2/asmx/basmx_core.c:	free(obj);
./bgbasm2/asmx/basmx_core.c:	free(obj);
./zpak2/deflate.c:	free(tbuf);
./zpak2/deflate.c:	free(mbuf);
./zpak2/deflate.c:		if(pdz2_tbuf)free(pdz2_tbuf);
./zpak2/deflate.c:		if(pdz2_mbuf)free(pdz2_mbuf);
./zpak2/deflate.c://	free(tbuf);
./zpak2/deflate.c://	free(mbuf);
./zpak2/zpacksh.c:		free(s);
./zpak2/zpack_cache.c:		free(buf);
./zpak2/zpack_cache.c:			free(cur->buffer);
./zpak2/zpack_cache.c:			if(cur->buffer)free(cur->buffer);
./zpak2/zpack_cache.c:			free(cur->path);
./zpak2/zpack_cache.c:			if(cur->buffer)free(cur->buffer);
./zpak2/zpack_cache.c:			free(cur->path);
./zpak2/zpack_cache.c:			free(buf);
./zpak2/zpack_cache.c:	if(cur->method)free(buf);
./zpak2/zpack_dir.c:	free(dir);
./zpak2/zpack_image.c:		free(ctx);
./zpak2/zpack_image.c:			free(ctx->root);
./zpak2/zpack_image.c:			free(ctx);
./zpak2/zpack_io.c:	free(fd);
./zpak2/zpack_spans.c:		free(ctx->span);
./tools/crun/_crun_tmp_.c:	for(i=0; a[i]; i++)free(a[i]);
./tools/crun/_crun_tmp_.c:	free(a);
./tools/crun/_crun_tmp_.c:	free(buf);
./tools/crun/_crun_tmp_.c:	if(tmp->value) { free(tmp->value); tmp->value=NULL; }
./tools/crun/crun_core.c:	for(i=0; a[i]; i++)free(a[i]);
./tools/crun/crun_core.c:	free(a);
./tools/crun/crun_core.c:	free(buf);
./tools/crun/crun_core.c:	if(tmp->value) { free(tmp->value); tmp->value=NULL; }
./tools/crun/crun_cortxt.c:"\tfor(i=0; a[i]; i++)free(a[i]);\n\tfree(a);\n\treturn(0);\n}\n\n"
./tools/crun/crun_cortxt.c:"\ti=crun_bufferhash(buf, sz);\n\tfree(buf);\n\treturn(i);\n}\n\n"
./tools/crun/crun_cortxt.c:"\tif(tmp->value) { free(tmp->value); tmp->value=NULL; }\n"
./bgbjvm/bgbj2c.c:	free(buf);
./bgbjvm/bgbj2c.c:	free(buf);
./bgbjvm/base/bjvm_interp.c:	gcfree(frm->locals);
./bgbjvm/base/bjvm_interp.c:	gcfree(frm->stack);
./bgbjvm/base/bjvm_interp.c:	gcfree(frm);
./bgbjvm/base/bjvm_interp.c:	if(n>=256) { free(tgt_a); }
./bgbjvm/base/bjvm_interp.c:	if(n>=256) { free(tgt_a); free(tgt_i); }
./bgbjvm/base/bjvm_jni_fcn.c:	gcfree((void *)chars);
./bgbjvm/base/bjvm_jni_fcn.c:	gcfree((char *)chars);
./bgbjvm/base/bjvm_jni_fcn.c:	{ gcfree((void *)obj); }
./bgbjvm/base/bjvm_load.c:			gcfree(s1);
./bgbjvm/base/bjvm_load.c:			gcfree(s1);
./bgbjvm/base/bjvm_load.c:	free(buf);
./bgbjvm/base/bjvm_jit_c.c:	if(frm->stack_ty)gcfree(frm->stack_ty);
./bgbjvm/base/bjvm_jit_c.c://	gcfree(frm->locals);
./bgbjvm/base/bjvm_jit_c.c://	gcfree(frm->stack);
./bgbjvm/base/bjvm_jit_c.c:	gcfree(frm);
./bgbjvm/base/bjvm_jit_c.c:			free(s);
./bgbjvm/base/bjvm_interp_0.c:	gcfree(frm->locals);
./bgbjvm/base/bjvm_interp_0.c:	gcfree(frm->stack);
./bgbjvm/base/bjvm_interp_0.c:	gcfree(frm);
./bgbjvm/gastcc/bjc_stmt.c:	free(cl);
./bgbgc1/base/bgbgc_api.c:BGBGC_API void gcfree(void *p)
./bgbgc1/base/deflate.c:	free(tbuf);
./bgbgc1/base/deflate.c:	free(mbuf);
./bgbgc1/base/deflate.c:		if(pdz2_tbuf)free(pdz2_tbuf);
./bgbgc1/base/deflate.c:		if(pdz2_mbuf)free(pdz2_mbuf);
./bgbgc1/base/deflate.c://	free(tbuf);
./bgbgc1/base/deflate.c://	free(mbuf);
./bgbgc1/base/mm_lobj.c:		free(bgbgc_lobj[i]);
./bgbgc1/base/mm_lobj.c:	free(bgbgc_lobj[i]);
./bgbgc1/base/th_api.c://	gcfree(p);
./bgbgc1/base/th_api.c:	gcfree(p);
./bgbgc1/base/th_api.c:	gcfree(p);
./bgbgc1/base/th_mail.c:	gcfree(ctx);
./bgbgc1/base/eh_throw.c:	free(ep->ExceptionRecord);
./bgbgc1/base/eh_throw.c:	free(ep->ContextRecord);
./bgbgc1/base/eh_throw.c:	free(ep);
./bgbgc1/base/eh_throw.c://	gcfree(ex);
./bgbgc1/base/gcl_api.c:		free(ctx->block[i]);
./bgbgc1/base/gcl_api.c:		free(p);
./bgbgc1/base/gcl_api.c:	free(ctx);
./bgbgc1/base/gcl_api.c:			free(ctx->block[i]);
./bgbdy/bgal/bgal_main.c:			gcfree(obj->prog[i]);
./bgbdy/bgal/lpc4.c:		free(bp);
./bgbdy/base/deflate.c:	free(tbuf);
./bgbdy/base/deflate.c:	free(mbuf);
./bgbdy/base/deflate.c:		if(pdz2_tbuf)free(pdz2_tbuf);
./bgbdy/base/deflate.c:		if(pdz2_mbuf)free(pdz2_mbuf);
./bgbdy/base/deflate.c://	free(tbuf);
./bgbdy/base/deflate.c://	free(mbuf);
./bgbdy/base/dyc_class.c:	if(obj->data)gcfree(obj->data);
./bgbdy/base/dyc_class.c:	gcfree(obj);
./bgbdy/base/dyc_hash.c:	gcfree(adata);
./bgbdy/base/dyc_hash.c:	gcfree(aclass);
./bgbdy/base/dyc_hash.c:	gcfree(acnt);
./bgbdy/base/dyc_proto.c:	if(obj->slot)gcfree(obj->slot);
./bgbdy/base/dyc_proto.c:	if(obj->sval)gcfree(obj->sval);
./bgbdy/base/dyc_proto.c:	if(obj->minf)gcfree(obj->minf);
./bgbdy/base/dyc_proto.c:	if(obj->mval)gcfree(obj->mval);
./bgbdy/base/dyc_proto.c:	gcfree(obj);
./bgbdy/base/dyc_tcit.c:		gcfree(tab->tab[idx]);
./bgbdy/base/dyc_tcit.c:		gcfree(tab->tab[idx]);
./bgbdy/base/dyll_catch.c:	gcfree(frame);
./bgbdy/base/dyll_catch.c:	gcfree(frame->jmp);
./bgbdy/base/dyll_catch.c:	gcfree(frame);
./bgbdy/base/dys_print.c:	gcfree(strm->sarr); strm->sarr=NULL;
./bgbdy/base/dys_print.c:	gcfree(strm->marr); strm->marr=NULL;
./bgbdy/base/dys_print.c:	gcfree(strm);
./bgbdy/base/dyx_print.c:		if(tb!=buf)free(tb);
./bgbdy/base/dyx_print.c:		if(tb!=buf)free(tb);
./bgbdy/base/dyx_print.c:	if(tb!=buf)free(tb);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:		gcfree(abuf);
./bgbdy/base/dy_method.c:	gcfree(abuf);
./bgbdy/base/dy_wref.c:		free(buf);
./bgbdy/base/dy_wref.c:	free(buf);
./bgbdy/base/dy_wref.c:		{ gcfree(WRef_CastPtr(wp)); return(0); }
./bgbdy/base/dy_wref.c:BGBDY_API int dwfree(dyt ptr)
./bgbdy/base/netval.c:		gcfree(a);
./bgbdy/base/vfile2.c:		gcfree(fd);
./bgbdy/base/vfile2.c:		gcfree(fd);
./bgbdy/base/vfile2.c:	gcfree(dir->str_buf);
./bgbdy/base/vfile2.c:	gcfree(dir->str_idx);
./bgbdy/base/vfile2.c:	gcfree(dir);
./bgbdy/base/vfile2_dir.c:		free(tmp->name[i]);
./bgbdy/base/vfile2_dir.c:	free(tmp->name);
./bgbdy/base/vfile2_dir.c:	free(tmp);
./bgbdy/base/vfile2_dir.c:		free(tmp->name[i]);
./bgbdy/base/vfile2_dir.c:	free(tmp->name);
./bgbdy/base/vfile2_dir.c:	free(tmp);
./bgbdy/base/vfile2_zip.c:		free(cbuf);
./bgbdy/base/vfile2_zip.c:		free(ibuf);
./bgbdy/base/vfile2_zip.c:			free(obuf);
./bgbdy/base/vfile2_zip.c:		free(best->buffer);
./bgbdy/base/vfile2_zip.c:	gcfree(ctx);
./bgbdy/base/dyll_metapath.c:		free(dyll_metapath_hash_name[i]);
./bgbdy/base/dyll_metapath.c:		free(dyll_metapath_hash_name[i]);
./bgbdy/base/dyc_jni_fcn.c://	gcfree((void *)chars);
./bgbdy/base/dyc_jni_fcn.c://	gcfree((char *)chars);
./bgbdy/base/dyc_jni_fcn.c:	{ gcfree((void *)obj); }
./bgbdy/base/dyc_jvmti_fcn.c:	gcfree(mem);
./bgbdy/base/sqlite3.c:** To avoid memory leaks, the application should invoke [sqlite3_free()]
./bgbdy/base/sqlite3.c:** malloc() and free() functions from the standard C library.
./bgbdy/base/sqlite3.c:** It is not safe to pass a result table directly to [sqlite3_free()].
./bgbdy/base/sqlite3.c:** function must not try to call [sqlite3_free()] directly.  Only
./bgbdy/base/sqlite3.c:** released by [sqlite3_free()].  ^Both routines return a
./bgbdy/base/sqlite3.c:**  sqlite3_free(zSQL);
./bgbdy/base/sqlite3.c:**  sqlite3_free(zSQL);
./bgbdy/base/sqlite3.c:** the result, [sqlite3_free()] is called on the input string.)^
./bgbdy/base/sqlite3.c:** Windows VFS uses native malloc() and free() for some operations.
./bgbdy/base/sqlite3.c:** ^Calling sqlite3_free() with a pointer previously returned
./bgbdy/base/sqlite3.c:** that it might be reused.  ^The sqlite3_free() routine is
./bgbdy/base/sqlite3.c:** to sqlite3_free() is harmless.  After being freed, memory
./bgbdy/base/sqlite3.c:** might result if sqlite3_free() is called with a non-NULL pointer that
./bgbdy/base/sqlite3.c:** sqlite3_free(P) where P is the first parameter to sqlite3_realloc().
./bgbdy/base/sqlite3.c:** the system malloc() and free() directly when converting
./bgbdy/base/sqlite3.c:** The pointer arguments to [sqlite3_free()] and [sqlite3_realloc()]
./bgbdy/base/sqlite3.c:** [sqlite3_free()] or [sqlite3_realloc()].
./bgbdy/base/sqlite3.c:SQLITE_API void sqlite3_free(void*);
./bgbdy/base/sqlite3.c:** of the [sqlite3_malloc()], [sqlite3_free()], and [sqlite3_realloc()]
./bgbdy/base/sqlite3.c:** [sqlite3_free()].
./bgbdy/base/sqlite3.c:** should free this memory by calling [sqlite3_free()].
./bgbdy/base/sqlite3.c:** ^[sqlite3_free()] is used to free idxPtr if and only if
./bgbdy/base/sqlite3.c:  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */
./bgbdy/base/sqlite3.c:** take care that any prior string is freed by a call to [sqlite3_free()]
./bgbdy/base/sqlite3.c:** freed by sqlite3_free() and the zErrMsg field will be zeroed.
./bgbdy/base/sqlite3.c:** ^The sqlite3_mutex_free() routine deallocates a previously
./bgbdy/base/sqlite3.c:SQLITE_API void sqlite3_mutex_free(sqlite3_mutex*);
./bgbdy/base/sqlite3.c:**   <li>  [sqlite3_mutex_free()] </li>
./bgbdy/base/sqlite3.c:#define sqlite3_mutex_free(X)
./bgbdy/base/sqlite3.c:    sqlite3_free(pTstAlloc);                                         \
./bgbdy/base/sqlite3.c:      sqlite3_free(pFile);
./bgbdy/base/sqlite3.c:  sqlite3_free(pFile);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:** Like free() but works for allocations obtained from sqlite3MemMalloc()
./bgbdy/base/sqlite3.c:  free(p);
./bgbdy/base/sqlite3.c:  free(z);
./bgbdy/base/sqlite3.c:    sqlite3_free(pPrior);
./bgbdy/base/sqlite3.c:SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:          sqlite3_free( p );
./bgbdy/base/sqlite3.c:  sqlite3_free( p );
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:SQLITE_API void sqlite3_free(void *p){
./bgbdy/base/sqlite3.c:    sqlite3_free(p);
./bgbdy/base/sqlite3.c:    sqlite3_free(pOld);
./bgbdy/base/sqlite3.c:      sqlite3_free(zExtra);
./bgbdy/base/sqlite3.c:  sqlite3_free(pH->ht);
./bgbdy/base/sqlite3.c:    sqlite3_free(elem);
./bgbdy/base/sqlite3.c:  sqlite3_free(pH->ht);
./bgbdy/base/sqlite3.c:  sqlite3_free( elem );
./bgbdy/base/sqlite3.c:** This driver uses malloc()/free() directly rather than going through
./bgbdy/base/sqlite3.c:** the SQLite-wrappers sqlite3_malloc()/sqlite3_free().  Those wrappers
./bgbdy/base/sqlite3.c:** avoid the use of malloc()/free().  Those routines work ok on OS/2
./bgbdy/base/sqlite3.c:      free( pFile->pathToDel );
./bgbdy/base/sqlite3.c:    free( zTempPathUTF );
./bgbdy/base/sqlite3.c:  free( zRelativeCp );
./bgbdy/base/sqlite3.c:  free( zFullUTF );
./bgbdy/base/sqlite3.c:  free( zNameCp );
./bgbdy/base/sqlite3.c:      free( pFile->pathToDel );
./bgbdy/base/sqlite3.c:  free( zFilenameCp );
./bgbdy/base/sqlite3.c:  free( zFilenameCp );
./bgbdy/base/sqlite3.c:  free(zFilenameCp);
./bgbdy/base/sqlite3.c:       sqlite3_free(pNew);
./bgbdy/base/sqlite3.c:    sqlite3_free(pId);
./bgbdy/base/sqlite3.c:      sqlite3_free(pLock);
./bgbdy/base/sqlite3.c:      sqlite3_free(pOpen);
./bgbdy/base/sqlite3.c:      sqlite3_free(p);
./bgbdy/base/sqlite3.c:    sqlite3_free(pFile->pUnused);
./bgbdy/base/sqlite3.c:    sqlite3_free(pFile->lockingContext);
./bgbdy/base/sqlite3.c:    sqlite3_free(pFile->lockingContext);
./bgbdy/base/sqlite3.c:    sqlite3_free(p->pUnused);
./bgbdy/base/sqlite3.c:    sqlite3_free(pNew);
./bgbdy/base/sqlite3.c:      sqlite3_free(lockProxy);
./bgbdy/base/sqlite3.c:    sqlite3_free(oldPath);
./bgbdy/base/sqlite3.c:      sqlite3_free(pCtx->conchFile);
./bgbdy/base/sqlite3.c:    sqlite3_free(pCtx->conchFilePath); 
./bgbdy/base/sqlite3.c:    sqlite3_free(pCtx);
./bgbdy/base/sqlite3.c:      sqlite3_free(lockProxy);
./bgbdy/base/sqlite3.c:      sqlite3_free(conchFile);
./bgbdy/base/sqlite3.c:    sqlite3_free(pCtx->lockProxyPath);
./bgbdy/base/sqlite3.c:    sqlite3_free(pCtx->conchFilePath);
./bgbdy/base/sqlite3.c:    sqlite3_free(pCtx->dbPath);
./bgbdy/base/sqlite3.c:    sqlite3_free(pCtx);
./bgbdy/base/sqlite3.c:** This driver uses malloc()/free() directly rather than going through
./bgbdy/base/sqlite3.c:** the SQLite-wrappers sqlite3_malloc()/sqlite3_free().  Those wrappers
./bgbdy/base/sqlite3.c:** avoid the use of malloc()/free().  Those routines work ok on windows
./bgbdy/base/sqlite3.c:    free(zWideFilename);
./bgbdy/base/sqlite3.c:    free(zFilename);
./bgbdy/base/sqlite3.c:    free(zMbcsFilename);
./bgbdy/base/sqlite3.c:    free(zFilename);
./bgbdy/base/sqlite3.c:  free(zTmpWide);
./bgbdy/base/sqlite3.c:  free(zTmpWide);
./bgbdy/base/sqlite3.c:    free(zName);
./bgbdy/base/sqlite3.c:  free(zName);
./bgbdy/base/sqlite3.c:    free(pFile->zDeleteOnClose);
./bgbdy/base/sqlite3.c:      free(zMulti);
./bgbdy/base/sqlite3.c:      free(zUtf8);
./bgbdy/base/sqlite3.c:    free(zOut);
./bgbdy/base/sqlite3.c:    free(zConverted);
./bgbdy/base/sqlite3.c:    free(zConverted);
./bgbdy/base/sqlite3.c:    free(zConverted);
./bgbdy/base/sqlite3.c:  free(zConverted);
./bgbdy/base/sqlite3.c:  free(zConverted);
./bgbdy/base/sqlite3.c:      free(zConverted);
./bgbdy/base/sqlite3.c:    free(zConverted);
./bgbdy/base/sqlite3.c:    free(zTemp);
./bgbdy/base/sqlite3.c:      free(zConverted);
./bgbdy/base/sqlite3.c:    free(zConverted);
./bgbdy/base/sqlite3.c:    free(zTemp);
./bgbdy/base/sqlite3.c:    free(zOut);
./bgbdy/base/sqlite3.c:      free(zConverted);
./bgbdy/base/sqlite3.c:  free(zConverted);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:  sqlite3_free(pTmpSpace);
./bgbdy/base/sqlite3.c:  sqlite3_free(pV);
./bgbdy/base/sqlite3.c:    sqlite3_free(p);
./bgbdy/base/sqlite3.c:    sqlite3_free(p->apHash);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCache->apHash);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCache);
./bgbdy/base/sqlite3.c:** by the current thread may be sqlite3_free()ed.
./bgbdy/base/sqlite3.c:  sqlite3_free(pPager->aSavepoint);
./bgbdy/base/sqlite3.c:    sqlite3_free(zMasterJournal);
./bgbdy/base/sqlite3.c:  sqlite3_free(pMaster);
./bgbdy/base/sqlite3.c:  sqlite3_free(pPager);
./bgbdy/base/sqlite3.c:      sqlite3_free(zPathname);
./bgbdy/base/sqlite3.c:    sqlite3_free(zPathname);
./bgbdy/base/sqlite3.c:    sqlite3_free(zPathname);
./bgbdy/base/sqlite3.c:    sqlite3_free(pPager);
./bgbdy/base/sqlite3.c:        sqlite3_free(pLock);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCur->aOverflow);
./bgbdy/base/sqlite3.c:        sqlite3_free(pKey);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCur->pKey);
./bgbdy/base/sqlite3.c:    sqlite3_free(pCur->pKey);
./bgbdy/base/sqlite3.c:        sqlite3_free(p);
./bgbdy/base/sqlite3.c:              sqlite3_free(zFullPathname);
./bgbdy/base/sqlite3.c:              sqlite3_free(p);
./bgbdy/base/sqlite3.c:      sqlite3_free(zFullPathname);
./bgbdy/base/sqlite3.c:    sqlite3_free(pBt);
./bgbdy/base/sqlite3.c:    sqlite3_free(p);
./bgbdy/base/sqlite3.c:      sqlite3_mutex_free(pBt->mutex);
./bgbdy/base/sqlite3.c:    sqlite3_free(pBt->pSchema);
./bgbdy/base/sqlite3.c:    sqlite3_free(pBt);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:    /* sqlite3_free(pCur); */
./bgbdy/base/sqlite3.c:            sqlite3_free(pCellKey);
./bgbdy/base/sqlite3.c:          sqlite3_free(pCellKey);
./bgbdy/base/sqlite3.c:  sqlite3_free(sCheck.anRef);
./bgbdy/base/sqlite3.c:** blob of allocated memory. This function should not call sqlite3_free()
./bgbdy/base/sqlite3.c:      sqlite3_free(p);
./bgbdy/base/sqlite3.c:    sqlite3_free(p);
./bgbdy/base/sqlite3.c:  sqlite3_free(zErr);
./bgbdy/base/sqlite3.c:  sqlite3_free(p->zBuf);
./bgbdy/base/sqlite3.c:    sqlite3_free(pTmp);
./bgbdy/base/sqlite3.c:    sqlite3_free(pIndex->zColAff);
./bgbdy/base/sqlite3.c:    sqlite3_free(zBuf);
./bgbdy/base/sqlite3.c:        sqlite3_free(zText);
./bgbdy/base/sqlite3.c:      sqlite3_free(azChar);
./bgbdy/base/sqlite3.c:    sqlite3_free(zErrMsg);
./bgbdy/base/sqlite3.c:    sqlite3_free(zErrmsg);
./bgbdy/base/sqlite3.c:    sqlite3_free(wsdAutoext.aExt);
./bgbdy/base/sqlite3.c:    sqlite3_free(zErrmsg);
./bgbdy/base/sqlite3.c:      sqlite3_free(sqlite3_temp_directory);
./bgbdy/base/sqlite3.c:    sqlite3_free(p->zErrMsg);
./bgbdy/base/sqlite3.c:        sqlite3_free(*pzErrMsg);
./bgbdy/base/sqlite3.c:      sqlite3_free(res.zErrMsg);
./bgbdy/base/sqlite3.c:  sqlite3_free(res.zErrMsg);
./bgbdy/base/sqlite3.c:    for(i=1; i<n; i++){ if( azResult[i] ) sqlite3_free(azResult[i]); }
./bgbdy/base/sqlite3.c:    sqlite3_free(azResult);
./bgbdy/base/sqlite3.c:** by passing the pointer returned by this function to sqlite3_free().
./bgbdy/base/sqlite3.c:    sqlite3_free(pIdxInfo->idxStr);
./bgbdy/base/sqlite3.c:      sqlite3_free(p->idxStr);
./bgbdy/base/sqlite3.c:          sqlite3_free(pInfo->idxStr);
./bgbdy/base/sqlite3.c:  free(pParser->yystack);
./bgbdy/base/sqlite3.c:    sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex);
./bgbdy/base/sqlite3.c:    sqlite3_free(db->lookaside.pStart);
./bgbdy/base/sqlite3.c:  sqlite3_mutex_free(db->mutex);
./bgbdy/base/sqlite3.c:    sqlite3_free(db->lookaside.pStart);
./bgbdy/base/sqlite3.c:  sqlite3_free(db);
./bgbdy/base/sqlite3.c:      sqlite3_free(db);
./bgbdy/base/sqlite3.c:          sqlite3_free(aDyn);
./bgbdy/base/sqlite3.c:  sqlite3_free(aDyn);
./bgbdy/base/sqlite3.c:  sqlite3_free(p->zSelectLeaves);
./bgbdy/base/sqlite3.c:  sqlite3_free(p->aLeavesStmt);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:    sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:  sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:  sqlite3_free(zCols);
./bgbdy/base/sqlite3.c:  sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:  sqlite3_free(zContentCols);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr->aDoclist);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr->aMatchinfo);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr);
./bgbdy/base/sqlite3.c:          sqlite3_free(zBuffer);
./bgbdy/base/sqlite3.c:  sqlite3_free(zBuffer);
./bgbdy/base/sqlite3.c:      sqlite3_free(aTmp);
./bgbdy/base/sqlite3.c:  sqlite3_free(pTS->aOutput);
./bgbdy/base/sqlite3.c:    sqlite3_free(tsc.aOutput);
./bgbdy/base/sqlite3.c:  sqlite3_free(apSegment);
./bgbdy/base/sqlite3.c:      sqlite3_free(pOut);
./bgbdy/base/sqlite3.c:    sqlite3_free(pOut);
./bgbdy/base/sqlite3.c:              sqlite3_free(aBuffer);
./bgbdy/base/sqlite3.c:            sqlite3_free(aLeft);
./bgbdy/base/sqlite3.c:            sqlite3_free(aLeft);
./bgbdy/base/sqlite3.c:      sqlite3_free(aRight);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr->aDoclist);
./bgbdy/base/sqlite3.c:    sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:    sqlite3_free(zErr);
./bgbdy/base/sqlite3.c:    sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:  sqlite3_free(pHash);
./bgbdy/base/sqlite3.c:    sqlite3_free(pHash);
./bgbdy/base/sqlite3.c:** Fts3Expr structure (if any) by passing it to sqlite3_free().
./bgbdy/base/sqlite3.c:    sqlite3_free(pOrig);
./bgbdy/base/sqlite3.c:    sqlite3_free(zTemp);
./bgbdy/base/sqlite3.c:  sqlite3_free(zTemp);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:    sqlite3_free(p->aDoclist);
./bgbdy/base/sqlite3.c:    sqlite3_free(p);
./bgbdy/base/sqlite3.c:  sqlite3_free(azCol);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:  sqlite3_free(pTokenizer);
./bgbdy/base/sqlite3.c:  sqlite3_free(c->zToken);
./bgbdy/base/sqlite3.c:  sqlite3_free(c);
./bgbdy/base/sqlite3.c:      sqlite3_free(zErr);
./bgbdy/base/sqlite3.c:        sqlite3_free(zCopy);
./bgbdy/base/sqlite3.c:        sqlite3_free((void *)aArg);
./bgbdy/base/sqlite3.c:    sqlite3_free((void *)aArg);
./bgbdy/base/sqlite3.c:  sqlite3_free(zCopy);
./bgbdy/base/sqlite3.c:    sqlite3_free(zErr);
./bgbdy/base/sqlite3.c:  sqlite3_free(zTest);
./bgbdy/base/sqlite3.c:  sqlite3_free(zTest2);
./bgbdy/base/sqlite3.c:        sqlite3_free(t);
./bgbdy/base/sqlite3.c:  sqlite3_free(pTokenizer);
./bgbdy/base/sqlite3.c:  sqlite3_free(c->pToken);
./bgbdy/base/sqlite3.c:  sqlite3_free(c);
./bgbdy/base/sqlite3.c:      sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:      sqlite3_free(*pp);
./bgbdy/base/sqlite3.c:        sqlite3_free(pList);
./bgbdy/base/sqlite3.c:    sqlite3_free(fts3HashData(pElem));
./bgbdy/base/sqlite3.c:      sqlite3_free(pReader->zTerm);
./bgbdy/base/sqlite3.c:    sqlite3_free(pReader);
./bgbdy/base/sqlite3.c:    sqlite3_free(aElem);
./bgbdy/base/sqlite3.c:        sqlite3_free(p->aData);
./bgbdy/base/sqlite3.c:      sqlite3_free(p->zMalloc);
./bgbdy/base/sqlite3.c:      sqlite3_free(p);
./bgbdy/base/sqlite3.c:    sqlite3_free(pWriter->aData);
./bgbdy/base/sqlite3.c:    sqlite3_free(pWriter->zMalloc);
./bgbdy/base/sqlite3.c:    sqlite3_free(pWriter);
./bgbdy/base/sqlite3.c:  sqlite3_free(aBuffer);
./bgbdy/base/sqlite3.c:    sqlite3_free(apSegment);
./bgbdy/base/sqlite3.c:      sqlite3_free(p->z);
./bgbdy/base/sqlite3.c:    sqlite3_free(p->aMatch);
./bgbdy/base/sqlite3.c:    sqlite3_free(p->zOffset);
./bgbdy/base/sqlite3.c:    sqlite3_free(p->zSnippet);
./bgbdy/base/sqlite3.c:    sqlite3_free(p);
./bgbdy/base/sqlite3.c:  sqlite3_free(pSnippet->zSnippet);
./bgbdy/base/sqlite3.c:  sqlite3_free(apList);
./bgbdy/base/sqlite3.c:    sqlite3_free(res.z);
./bgbdy/base/sqlite3.c:    sqlite3_free(pNode);
./bgbdy/base/sqlite3.c:      sqlite3_free(pNode);
./bgbdy/base/sqlite3.c:    sqlite3_free(pRtree);
./bgbdy/base/sqlite3.c:    sqlite3_free(zCreate);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr->aConstraint);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr->aConstraint);
./bgbdy/base/sqlite3.c:    sqlite3_free(aCell);
./bgbdy/base/sqlite3.c:  sqlite3_free(aaSorted);
./bgbdy/base/sqlite3.c:  sqlite3_free(aiUsed);
./bgbdy/base/sqlite3.c:  sqlite3_free(aCell);
./bgbdy/base/sqlite3.c:  sqlite3_free(aCell);
./bgbdy/base/sqlite3.c:      sqlite3_free(pLeaf);
./bgbdy/base/sqlite3.c:    sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:    sqlite3_free(zCreate);
./bgbdy/base/sqlite3.c:    sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:  sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:      sqlite3_free(zTmp);
./bgbdy/base/sqlite3.c:      sqlite3_free(zTmp);
./bgbdy/base/sqlite3.c:    sqlite3_free(zSql);
./bgbdy/base/sqlite3.c:      sqlite3_free(zText);
./bgbdy/base/sqlite3.c:** Version of sqlite3_free() that is always a function, never a macro.
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:  sqlite3_free(p);
./bgbdy/base/sqlite3.c:      sqlite3_free(pCsr);
./bgbdy/base/sqlite3.c:    sqlite3_free(pCsr);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr->zBuffer);
./bgbdy/base/sqlite3.c:  sqlite3_free(pCsr);
./bgbdy/base/dyll_sql.c:	gcfree(db);
./bgbdy/base/dyll_sql.c:		sqlite3_free(str);
./bgbdy/base/dyll_sql.c:		sqlite3_free(str);
./bgbdy/base/dyll_sql.c:		sqlite3_free(str);
./bgbdy/base/dyll_sql.c:		sqlite3_free(str);
./bgbdy/base/dyll_sql.c:	gcfree(tab);
./bgbdy/base/dyll_sql.c:		sqlite3_free(str);
./bgbdy/base/dyll_sql.c:		sqlite3_free(str);
./bgbdy/base/dyll_mrbc.c:	gcfree(tmp->global);
./bgbdy/base/dyll_mrbc.c:	gcfree(tmp->stack);
./bgbdy/base/dyll_mrbc.c:	gcfree(tmp->markstack);
./bgbdy/base/dyll_mrbc.c:	gcfree(tmp->ipstack);
./bgbdy/base/dyll_mrbc.c:	gcfree(tmp);
./bgbdy/base/dyll_mrbc.c:		free(buf);
./bgbdy/base/dyll_mrbc.c:		free(buf);
./bgbdy/base/dyll_mrbc.c:	free(buf);
./bgbdy/base/dyll_mrbc2.c:	gcfree(tmp->global);
./bgbdy/base/dyll_mrbc2.c:	gcfree(tmp->stack);
./bgbdy/base/dyll_mrbc2.c:	gcfree(tmp->markstack);
./bgbdy/base/dyll_mrbc2.c:	gcfree(tmp->ipstack);
./bgbdy/base/dyll_mrbc2.c:	gcfree(tmp);
./bgbdy/base/dyll_mrbc2.c:		free(buf);
./bgbdy/base/dyll_mrbc2.c:		free(buf);
./bgbdy/base/dyll_mrbc2.c:	free(buf);
./bgbdy/base/dyx_sbxe.c:void sbxe_free(void *ptr)
./bgbdy/base/dyx_sbxe.c:	free(ptr);
./bgbdy/base/dyx_sbxe.c:	if(ctx->lzm_win)sbxe_free(ctx->lzm_win);
./bgbdy/base/dyx_sbxe.c:	if(ctx->lzm_chain)sbxe_free(ctx->lzm_chain);
./bgbdy/base/dyx_sbxe.c:	if(ctx->lzm_hash)sbxe_free(ctx->lzm_hash);
./bgbdy/base/dyx_sbxe.c:	sbxe_free(ctx);
./bgbdy/base/dysh_console.c:	if(buf)gcfree(buf);
./bgbdy/base/dysh_shell.c:	gcfree(buf);
./bgbsxil22/sxiltst0.c:		free(buf);
./bgbsxil22/sxiltst0.c:		free(buf1);
./bgbsxil22/base/r_block2.c:	sxil_free(blk->name);
./bgbsxil22/base/r_block2.c:		sxil_free(blk->arg[i]);
./bgbsxil22/base/r_block2.c:		sxil_free(blk->var[i]);
./bgbsxil22/base/r_block2.c:		sxil_free(blk->lbl[i]);
./bgbsxil22/base/r_block2.c:	sxil_free(blk->arg);
./bgbsxil22/base/r_block2.c:	sxil_free(blk->var);
./bgbsxil22/base/r_block2.c:	sxil_free(blk->lbl);
./bgbsxil22/base/r_block2.c:	sxil_free(blk->body);
./bgbsxil22/base/r_jit.c:	sxil_free(ctx->lsstack);
./bgbsxil22/base/r_jit.c:	sxil_free(ctx->markstack);
./bgbsxil22/base/r_jit.c://	sxil_free(ctx->markstack_blk);
./bgbsxil22/base/r_jit.c://	sxil_free(ctx->markstack_arg);
./bgbsxil22/base/r_jit.c:	sxil_free(ctx->tstack);
./bgbsxil22/base/r_jit.c:	sxil_free(ctx->vstack);
./bgbsxil22/base/r_jit.c:	sxil_free(ctx->ustack);
./bgbsxil22/base/r_jit.c:	sxil_free(ctx);
./bgbsxil22/base/r_top.c:	free(heap->heap);
./bgbsxil22/base/r_top.c:	free(heap->heapinfo);
./bgbsxil22/base/r_top.c:	free(heap);
./bgbsxil22/base/r_top.c:BGBSXIL_API void sxil_free(void *ptr)
./bgbsxil22/base/r_top.c:		free(ptr);
./bgbsxil22/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbsxil22/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbsxil22/sx2/ccx_print.c:	if(tb!=buf)free(tb);
./bgbsxil22/sx2/cc_malloc.c://		free(bgbcc_alloc_block[i]);
./bgbsxil22/sx2/cc_malloc.c://			free(bgbcc_alloc_block[i]);
./bgbsxil22/sx2/cc_malloc.c:void bgbcc_free(void *p)
./bgbsxil22/sx2/cc_malloc.c://	free(p);
./bgbsxil22/sx2/ccx_sbxe.c:void sbxe_free(void *ptr)
./bgbsxil22/sx2/ccx_sbxe.c:	free(ptr);
./bgbsxil22/sx2/ccx_sbxe.c:	if(ctx->lzm_win)sbxe_free(ctx->lzm_win);
./bgbsxil22/sx2/ccx_sbxe.c:	if(ctx->lzm_chain)sbxe_free(ctx->lzm_chain);
./bgbsxil22/sx2/ccx_sbxe.c:	if(ctx->lzm_hash)sbxe_free(ctx->lzm_hash);
./bgbsxil22/sx2/ccx_sbxe.c:	sbxe_free(ctx);
./bgbsxil22/sx2/cc_compile.c:	bgbcc_free(cl);
./bgbsvm1/bs1cc.c:	free(buf);
./bgbsvm1/bs1cc.c://		free(s);
./bgbsvm1/bs1/builtin/builtin_base.c:	free(buf);
./bgbsvm1/bs1/builtin/builtin_base.c://dyt bsvm_heapfree(BSVM_SVMState *ctx, dyt args)
./bgbsvm1/bs1/builtin/builtin_base.c://dyt bsvm_symsfree(BSVM_SVMState *ctx, dyt args)
./bgbsvm1/bs1/svm/s_compile.c:	for(i=0; i<ctx->n_goto; i++)gcfree(gname[i]);
./bgbsvm1/bs1/svm/s_compile.c:	for(i=0; i<ctx->n_lbl; i++)gcfree(lname[i]);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(gname);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(gdest);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(lname);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(ldest);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(cname);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(bname);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(lit);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(ip);
./bgbsvm1/bs1/svm/s_compile.c:	gcfree(ctx);
./bgbsvm1/bs1/svm/s_interp.c:	gcfree(ctx->stack);
./bgbsvm1/bs1/svm/s_interp.c:	gcfree(ctx->markstack);
./bgbsvm1/bs1/svm/s_interp.c:	gcfree(ctx->flowstack);
./bgbsvm1/bs1/svm/s_interp.c:	gcfree(ctx);
./bgbsvm1/bs1/svm/s_interp.c:	gcfree(cctx);
./bgbmeta/cc_api.c:		basm_free(buf);
./bgbmeta/cc_api.c:				gcfree(obj);
./bgbmeta/cc_api.c://		free(buf);
./bgbmeta/cc_api.c://		free(buf);
./bgbmeta/cc_api.c://		free(buf);
./bgbmeta/cc_api.c://	free(buf);
./bgbmeta/cc_api.c://		free(buf);
./bgbmeta/cc_api.c://	free(buf1);
./bgbmeta/cc_cache.c://	free(buf);
./bgbmeta/cc_cache.c://	free(buf);
./bgbmeta/cc_pch.c:	free(tbuf);
./bgbmeta/cc_pch.c:	if((i<0) || (i!=dsz)) { free(buf); free(tbuf); return(NULL); }
./bgbmeta/cc_pch.c:	if(i!=crc) { free(buf); free(tbuf); return(NULL); }
./bgbmeta/cc_pch.c:	free(buf);
./bgbmeta/cc_pch.c:	free(buf);
./bgbmeta/cc_pch.c:		free(buf);
./bgbmeta/cc_pch.c:	free(tbuf);
./bgbmeta/bgbmeta.c:		free(buf1);
./bgbmeta/bgbmeta.c://	free(buf1);
./bgbmeta/mm/ccx_print.c:		if(tb!=buf)free(tb);
./bgbmeta/mm/ccx_print.c:	if(tb!=buf)free(tb);
./bgbmeta/mm/ccx_print.c:		if(tb!=buf)free(tb);
./bgbmeta/mm/ccx_print.c:		if(tb!=buf)free(tb);
./bgbmeta/mm/ccx_print.c:	if(tb!=buf)free(tb);
./bgbmeta/mm/cc_malloc.c://		free(bgbcc_alloc_block[i]);
./bgbmeta/mm/cc_malloc.c://			free(bgbcc_alloc_block[i]);
./bgbmeta/mm/cc_malloc.c:void bgbcc_free(void *p)
./bgbmeta/mm/cc_malloc.c://	free(p);
./bgbmeta/mm/dyll_metapath.c:		free(dyll_metapath_hash_name[i]);
./bgbmeta/mm/dyll_metapath.c:		free(dyll_metapath_hash_name[i]);
./bgbmeta/mm/ccx_sbxe.c:void sbxe_free(void *ptr)
./bgbmeta/mm/ccx_sbxe.c:	free(ptr);
./bgbmeta/mm/ccx_sbxe.c:	if(ctx->lzm_win)sbxe_free(ctx->lzm_win);
./bgbmeta/mm/ccx_sbxe.c:	if(ctx->lzm_chain)sbxe_free(ctx->lzm_chain);
./bgbmeta/mm/ccx_sbxe.c:	if(ctx->lzm_hash)sbxe_free(ctx->lzm_hash);
./bgbmeta/mm/ccx_sbxe.c:	sbxe_free(ctx);
./bgbmeta/cparse/cparse_misc.c:		free(tbuf);
./bgbmeta/cparse/cparse_misc.c:	free(tbuf);
./bgbmeta/cparse/cparse_misc.c:	free(tbuf);
./bgbmeta/cparse/preproc.c:			if(cur->args)bgbcc_free(cur->args);
./bgbmeta/cparse/preproc.c:			bgbcc_free(cur->value);
./bgbmeta/cparse/preproc.c:			bgbcc_free(cur);
./bgbmeta/cparse/preproc.c:		if(cur->args)bgbcc_free(cur->args);
./bgbmeta/cparse/preproc.c:		bgbcc_free(cur->value);
./bgbmeta/cparse/preproc.c:		bgbcc_free(cur);
./bgbmeta/cparse/preproc.c://	free(buf);
./bgbmeta/cc/cc_compile.c:	bgbcc_free(cl);
./bgbmeta/cc/cc_gast.c:	if(sz<=0) { free(buf); return(NULL); }
./bgbmeta/jparse/jp_misc.c:	free(tbuf);
./bgbsxil23/sxiltst0.c:		free(buf);
./bgbsxil23/sxiltst0.c:		free(buf1);
./bgbsxil23/bgb_sapp.c:		free(basm_pp_headv[i]);
./bgbsxil23/bgb_sapp.c:			if(cur->args)free(cur->args);
./bgbsxil23/bgb_sapp.c:			free(cur->value);
./bgbsxil23/bgb_sapp.c:			free(cur);
./bgbsxil23/bgb_sapp.c:		if(cur->args)free(cur->args);
./bgbsxil23/bgb_sapp.c:		free(cur->value);
./bgbsxil23/bgb_sapp.c:		free(cur);
./bgbsxil23/bgb_sapp.c:		if(cur->args)free(cur->args);
./bgbsxil23/bgb_sapp.c:		free(cur->value);
./bgbsxil23/bgb_sapp.c:		free(cur);
./bgbsxil23/bgb_sapp.c:		free(cur->value);
./bgbsxil23/bgb_sapp.c:		free(cur->value);
./bgbsxil23/bgb_sapp.c:	free(cur->value);
./bgbsxil23/bgb_sapp.c:		free(cur->value);
./bgbsxil23/bgb_sapp.c:	free(buf);
./bgbsxil23/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbsxil23/sx2/ccx_print.c:	if(tb!=buf)free(tb);
./bgbsxil23/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbsxil23/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbsxil23/sx2/ccx_print.c:	if(tb!=buf)free(tb);
./bgbsxil23/sx2/_cc_malloc.c://		free(bgbcc_alloc_block[i]);
./bgbsxil23/sx2/_cc_malloc.c://			free(bgbcc_alloc_block[i]);
./bgbsxil23/sx2/_cc_malloc.c:void bgbcc_free(void *p)
./bgbsxil23/sx2/_cc_malloc.c://	free(p);
./bgbsxil23/sx2/ccx_sbxe.c:void sbxe_free(void *ptr)
./bgbsxil23/sx2/ccx_sbxe.c:	free(ptr);
./bgbsxil23/sx2/ccx_sbxe.c:	if(ctx->lzm_win)sbxe_free(ctx->lzm_win);
./bgbsxil23/sx2/ccx_sbxe.c:	if(ctx->lzm_chain)sbxe_free(ctx->lzm_chain);
./bgbsxil23/sx2/ccx_sbxe.c:	if(ctx->lzm_hash)sbxe_free(ctx->lzm_hash);
./bgbsxil23/sx2/ccx_sbxe.c:	sbxe_free(ctx);
./bgbsxil23/sx2/_cc_compile.c:	bgbcc_free(cl);
./bgbsxil23/sx2/rp2_stmt.c:	free(cl);
./bgbsxil23/base/r_block2.c:	sxil_free(blk->name);
./bgbsxil23/base/r_block2.c:		sxil_free(blk->arg[i]);
./bgbsxil23/base/r_block2.c:		sxil_free(blk->var[i]);
./bgbsxil23/base/r_block2.c:		sxil_free(blk->lbl[i]);
./bgbsxil23/base/r_block2.c:	sxil_free(blk->arg);
./bgbsxil23/base/r_block2.c:	sxil_free(blk->var);
./bgbsxil23/base/r_block2.c:	sxil_free(blk->lbl);
./bgbsxil23/base/r_block2.c:		sxil_free(blk->body);
./bgbsxil23/base/r_api.c:	free(ptr);
./bgbsxil23/base/r_jit.c:	sxil_free(ctx->lsstack);
./bgbsxil23/base/r_jit.c:	sxil_free(ctx->markstack);
./bgbsxil23/base/r_jit.c://	sxil_free(ctx->markstack_blk);
./bgbsxil23/base/r_jit.c://	sxil_free(ctx->markstack_arg);
./bgbsxil23/base/r_jit.c:	sxil_free(ctx->tstack);
./bgbsxil23/base/r_jit.c:	sxil_free(ctx->vstack);
./bgbsxil23/base/r_jit.c:	sxil_free(ctx->ustack);
./bgbsxil23/base/r_jit.c:	sxil_free(ctx);
./bgbsxil23/base/r_top.c:	free(heap->heap);
./bgbsxil23/base/r_top.c:	free(heap->heapinfo);
./bgbsxil23/base/r_top.c:	free(heap);
./bgbsxil23/base/r_top.c:BGBSXIL_API void sxil_free(void *ptr)
./bgbsxil23/base/r_top.c:		free(ptr);
./bgbbcx/base/ccx_print.c:		if(tb!=buf)free(tb);
./bgbbcx/base/ccx_print.c:	if(tb!=buf)free(tb);
./bgbbcx/base/ccx_print.c:		if(tb!=buf)free(tb);
./bgbbcx/base/ccx_print.c:		if(tb!=buf)free(tb);
./bgbbcx/base/ccx_print.c:	if(tb!=buf)free(tb);
./bgbbcx/base/ccx_malloc.c:		free(ctx->alloc_block[i]);
./bgbbcx/base/ccx_malloc.c:		free(p);
./bgbbcx/base/ccx_malloc.c:		free(ctx->str_varr[i]);
./bgbbcx/base/ccx_malloc.c:	free(ctx->str_varr);
./bgbbcx/base/ccx_malloc.c:	free(ctx->str_carr);
./bgbbcx/base/ccx_malloc.c:	free(ctx);
./bgbbcx/base/ccx_malloc.c://			free(doc->alloc_block[i]);
./bgbbcx/base/ccx_malloc.c://	bcx_free(ptr);
./bgbbcx/base/ccx_malloc.c:BCX_API void bcx_free(void *p)
./bgbbcx/base/ccx_malloc.c://	free(p);
./bgbbcx/base/ccx_malloc.c:	bcx_free(ptr);
./bgbbcx/base/dyll_metapath.c:		free(dyll_metapath_hash_name[i]);
./bgbbcx/base/dyll_metapath.c:		free(dyll_metapath_hash_name[i]);
./bgbcgen2/_old0/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbcgen2/_old0/sx2/ccx_print.c:	if(tb!=buf)free(tb);
./bgbcgen2/_old0/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbcgen2/_old0/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbcgen2/_old0/sx2/ccx_print.c:	if(tb!=buf)free(tb);
./bgbcgen2/_old0/sx2/ccx_sbxe.c:void sbxe_free(void *ptr)
./bgbcgen2/_old0/sx2/ccx_sbxe.c:	free(ptr);
./bgbcgen2/_old0/sx2/ccx_sbxe.c:	if(ctx->lzm_win)sbxe_free(ctx->lzm_win);
./bgbcgen2/_old0/sx2/ccx_sbxe.c:	if(ctx->lzm_chain)sbxe_free(ctx->lzm_chain);
./bgbcgen2/_old0/sx2/ccx_sbxe.c:	if(ctx->lzm_hash)sbxe_free(ctx->lzm_hash);
./bgbcgen2/_old0/sx2/ccx_sbxe.c:	sbxe_free(ctx);
./bgbcgen2/_old0/sx2/rp2_stmt.c:	free(cl);
./bgbcgen2/_old0/base/bcg2_malloc.c:		free(ctx->alloc_block[i]);
./bgbcgen2/_old0/base/bcg2_malloc.c:		free(p);
./bgbcgen2/_old0/base/bcg2_malloc.c://		free(ctx->str_varr[i]);
./bgbcgen2/_old0/base/bcg2_malloc.c://	free(ctx->str_varr);
./bgbcgen2/_old0/base/bcg2_malloc.c://	free(ctx->str_carr);
./bgbcgen2/_old0/base/bcg2_malloc.c:	free(ctx);
./bgbcgen2/_old0/base/bcg2_malloc.c://			free(ctx->alloc_block[i]);
./bgbcgen2/_old0/base/bcg2_malloc.c:void bcg2_free(void *p)
./bgbcgen2/_old0/base/bcg2_malloc.c://	free(p);
./bgbcgen2/gast/rp2_stmt.c:	free(cl);
./bgbcgen2/direct/rp2_stmt.c:	free(cl);
./old/bgbccc1/cc_api.c:		basm_free(buf);
./old/bgbccc1/cc_api.c:				gcfree(obj);
./old/bgbccc1/cc_api.c://		free(buf);
./old/bgbccc1/cc_api.c://		free(buf);
./old/bgbccc1/cc_api.c://		free(buf);
./old/bgbccc1/cc_api.c://	free(buf);
./old/bgbccc1/cc_api.c://		free(buf);
./old/bgbccc1/cc_api.c://	free(buf1);
./old/bgbccc1/cc_cache.c://	free(buf);
./old/bgbccc1/cc_cache.c://	free(buf);
./old/bgbccc1/cc_pch.c:	free(tbuf);
./old/bgbccc1/cc_pch.c:	if((i<0) || (i!=dsz)) { free(buf); free(tbuf); return(NULL); }
./old/bgbccc1/cc_pch.c:	if(i!=crc) { free(buf); free(tbuf); return(NULL); }
./old/bgbccc1/cc_pch.c:	free(buf);
./old/bgbccc1/cc_pch.c:	free(buf);
./old/bgbccc1/cc_pch.c:		free(buf);
./old/bgbccc1/cc_pch.c:	free(tbuf);
./old/bgbccc1/mm/ccx_print.c:		if(tb!=buf)free(tb);
./old/bgbccc1/mm/ccx_print.c:		if(tb!=buf)free(tb);
./old/bgbccc1/mm/ccx_print.c:	if(tb!=buf)free(tb);
./old/bgbccc1/mm/cc_malloc.c://		free(bgbcc_alloc_block[i]);
./old/bgbccc1/mm/cc_malloc.c:			free(bgbcc_alloc_block[i]);
./old/bgbccc1/mm/cc_malloc.c:void bgbcc_free(void *p)
./old/bgbccc1/mm/cc_malloc.c://	free(p);
./old/bgbccc1/cparse/cparse_misc.c:		free(tbuf);
./old/bgbccc1/cparse/cparse_misc.c:	free(tbuf);
./old/bgbccc1/cparse/cparse_misc.c:	free(tbuf);
./old/bgbccc1/cparse/preproc.c:			if(cur->args)bgbcc_free(cur->args);
./old/bgbccc1/cparse/preproc.c:			bgbcc_free(cur->value);
./old/bgbccc1/cparse/preproc.c:			bgbcc_free(cur);
./old/bgbccc1/cparse/preproc.c:		if(cur->args)bgbcc_free(cur->args);
./old/bgbccc1/cparse/preproc.c:		bgbcc_free(cur->value);
./old/bgbccc1/cparse/preproc.c:		bgbcc_free(cur);
./old/bgbccc1/cparse/preproc.c://	free(buf);
./old/bgbccc1/cc/cc_compile.c:	bgbcc_free(cl);
./old/bgbjxvm/bs1cc.c:	free(buf);
./old/bgbjxvm/bs1cc.c://		free(s);
./old/bgbjxvm/base/s_compile.c:	for(i=0; i<ctx->n_goto; i++)gcfree(gname[i]);
./old/bgbjxvm/base/s_compile.c:	for(i=0; i<ctx->n_lbl; i++)gcfree(lname[i]);
./old/bgbjxvm/base/s_compile.c:	gcfree(gname);
./old/bgbjxvm/base/s_compile.c:	gcfree(gdest);
./old/bgbjxvm/base/s_compile.c:	gcfree(lname);
./old/bgbjxvm/base/s_compile.c:	gcfree(ldest);
./old/bgbjxvm/base/s_compile.c:	gcfree(cname);
./old/bgbjxvm/base/s_compile.c:	gcfree(bname);
./old/bgbjxvm/base/s_compile.c:	gcfree(lit);
./old/bgbjxvm/base/s_compile.c:	gcfree(ip);
./old/bgbjxvm/base/s_compile.c:	gcfree(ctx);
./old/bgbjxvm/base/s_interp.c:	gcfree(ctx->stack);
./old/bgbjxvm/base/s_interp.c:	gcfree(ctx->markstack);
./old/bgbjxvm/base/s_interp.c:	gcfree(ctx->flowstack);
./old/bgbjxvm/base/s_interp.c:	gcfree(ctx);
./old/bgbjxvm/base/s_interp.c:	gcfree(cctx);
./bgbbs2vm/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbbs2vm/sx2/ccx_print.c:	if(tb!=buf)free(tb);
./bgbbs2vm/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbbs2vm/sx2/ccx_print.c:		if(tb!=buf)free(tb);
./bgbbs2vm/sx2/ccx_print.c:	if(tb!=buf)free(tb);
./bgbbs2vm/sx2/_cc_malloc.c://		free(bgbcc_alloc_block[i]);
./bgbbs2vm/sx2/_cc_malloc.c://			free(bgbcc_alloc_block[i]);
./bgbbs2vm/sx2/_cc_malloc.c:void bgbcc_free(void *p)
./bgbbs2vm/sx2/_cc_malloc.c://	free(p);
./bgbbs2vm/sx2/ccx_sbxe.c:void sbxe_free(void *ptr)
./bgbbs2vm/sx2/ccx_sbxe.c:	free(ptr);
./bgbbs2vm/sx2/ccx_sbxe.c:	if(ctx->lzm_win)sbxe_free(ctx->lzm_win);
./bgbbs2vm/sx2/ccx_sbxe.c:	if(ctx->lzm_chain)sbxe_free(ctx->lzm_chain);
./bgbbs2vm/sx2/ccx_sbxe.c:	if(ctx->lzm_hash)sbxe_free(ctx->lzm_hash);
./bgbbs2vm/sx2/ccx_sbxe.c:	sbxe_free(ctx);
./bgbbs2vm/sx2/_cc_compile.c:	bgbcc_free(cl);
./bgbbs2vm/sx2/rp2_stmt.c:	free(cl);
./bgbbs2vm/base/bs2_block2.c:	bs2vm_free(blk->name);
./bgbbs2vm/base/bs2_block2.c:		bs2vm_free(blk->arg[i]);
./bgbbs2vm/base/bs2_block2.c:		bs2vm_free(blk->var[i]);
./bgbbs2vm/base/bs2_block2.c:		bs2vm_free(blk->lbl[i]);
./bgbbs2vm/base/bs2_block2.c:	bs2vm_free(blk->arg);
./bgbbs2vm/base/bs2_block2.c:	bs2vm_free(blk->var);
./bgbbs2vm/base/bs2_block2.c:	bs2vm_free(blk->lbl);
./bgbbs2vm/base/bs2_block2.c:		bs2vm_free(blk->body);
./bgbbs2vm/base/bs2_malloc.c://		free(bs2vm_alloc_block[i]);
./bgbbs2vm/base/bs2_malloc.c://			free(bs2vm_alloc_block[i]);
./bgbbs2vm/base/bs2_malloc.c:void bs2vm_free(void *p)
./bgbbs2vm/base/bs2_malloc.c://	free(p);
./bgbbs2vm/base/bs2_malloc.c:	free(p);
./bgbbs2vm/base/bs2_context.c:	bs2vm_free(ctx->markstack);
./bgbbs2vm/base/bs2_context.c://	bs2vm_free(ctx->tstack);
./bgbbs2vm/base/bs2_context.c:	bs2vm_free(ctx->ustack);
./bgbbs2vm/base/bs2_context.c:	bs2vm_free(ctx);
./bgbbs2vm/base/bs2_image.c:	free(tb1);
./bgbbs2vm/interp/bs2i_mem.c:		gcfree(ptr);
./bs2vm1/bs2vmtst0.c:		gcfree(buf1);
./bs2vm1/bs2asm/bs2_image.c:	free(tb1);
./bs2vm1/bs2asm/bs2a_malloc.c:void bs2asm_free(void *p)
./bs2vm1/bs2asm/bs2a_malloc.c://	free(p);
./bs2vm1/bs2asm/bs2a_malloc.c:	free(p);
./bs2vm1/bs2interp/bs2i_interp.c:	gcfree(ptr);
./bs2vm1/bs2interp/bs2i_imgload.c:	free(tb1);
