include/bgal_core.h:bgalMember *(*alloc_member)(bgalContext *ctx);
include/bgal_core.h:void (*free_member)(bgalContext *ctx, bgalMember *skip);
include/bgal_core.h:bgalMember *(*pick_member)(bgalContext *ctx, bgalMember *skip);
include/bgal_core.h:bgalMember *(*breed)(bgalContext *ctx, bgalMember *obja, bgalMember *objb);
include/bgal_core.h:float (*test)(bgalContext *ctx, bgalMember *obj, void *data);
include/bgal_core.h:void (*step_test)(bgalContext *ctx, void *data);
include/bgal_core.h:void (*step_select)(bgalContext *ctx);
include/bgal_core.h:void (*step_breed)(bgalContext *ctx);
include/bgal_core.h:void (*step_status)(bgalContext *ctx);
include/bgal_core.h:void (*step)(bgalContext *ctx);
include/bgal_core.h:void (*setup)(bgalContext *ctx, void *data);
include/bgal_core.h:void (*evolve)(bgalContext *ctx, void *data);
include/bgal_neuron.h:void (*spawn)(bgalNeuron *self);
include/bgal_neuron.h:void (*notify_dlist)(bgalNeuron *self, bgalNeuronLink *link);
include/bgal_neuron.h:void (*notify_alist)(bgalNeuron *self, bgalNeuronLink *link);
include/bgal_neuron.h:	bgalNeuronLink *link, float value);
include/bgal_neuron.h:void (*fire)(bgalNeuron *self);
include/bgbasm.h:typedef void *(*basm_meta_ft)(char *sym, char *name, char **args);
include/bgbasm.h:typedef void (*basm_mtrg_ft)(char *sym, char *name, char **args, void *ptr);
include/bgbasm_auto.h:BASM_Context *BASM_NewContext();
include/bgbasm_auto.h:void BASM_OutPadText(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_OutPadZero(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_OutPadVLI(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_Align(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_Align(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_AlignVLI(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_OutByte(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_OutWord(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_OutDWord(BASM_Context *ctx, int i);
include/bgbasm_auto.h:void BASM_OutQWord(BASM_Context *ctx, long long i);
include/bgbasm_auto.h:void BASM_OutUVLIP(BASM_Context *ctx, unsigned long long i, int pad);
include/bgbasm_auto.h:void BASM_OutUVLI(BASM_Context *ctx, unsigned long long i);
include/bgbasm_auto.h:void BASM_OutSVLI(BASM_Context *ctx, long long i);
include/bgbasm_auto.h:void BASM_OutSVLIP(BASM_Context *ctx, long long i, int pad);
include/bgbasm_auto.h:void BASM_OutStr8(BASM_Context *ctx, char *str);
include/bgbasm_auto.h:void BASM_OutStr16(BASM_Context *ctx, char *str);
include/bgbasm_auto.h:void BASM_ModRM16(BASM_Context *ctx, int reg,int rm, int sc, int idx, int disp, char *lbl);
include/bgbasm_auto.h:void BASM_Sib(BASM_Context *ctx, int rm, int sc, int idx);
include/bgbasm_auto.h:void BASM_LabelDisp(BASM_Context *ctx, char *lbl, int disp);
include/bgbasm_auto.h:void BASM_LabelDispRel(BASM_Context *ctx, char *lbl, int disp);
include/bgbasm_auto.h:void BASM_ModRM64(BASM_Context *ctx, int reg,int rm, int sc, int idx, int disp, char *lbl);
include/bgbasm_auto.h:void BASM_ModRM(BASM_Context *ctx, int reg,int rm, int sc, int idx, int disp, char *lbl);
include/bgbasm_auto.h:int BASM_RegREXW(int reg);
include/bgbasm_auto.h:int BASM_Reg16P(int reg);
include/bgbasm_auto.h:int BASM_Reg32P(int reg);
include/bgbasm_auto.h:void BASM_AddrOverride(BASM_Context *ctx, int breg);
include/bgbasm_auto.h:void BASM_SegOverride(BASM_Context *ctx);
include/bgbasm_auto.h:char *BASM_OutSufBytes(BASM_Context *ctx, char *s);
include/bgbasm_auto.h:char *BASM_OutBodyBytes(BASM_Context *ctx, char *s, int rex);
include/bgbasm_auto.h:char *BASM_OutImm(BASM_Context *ctx, char *s, long long imm, char *lbl);
include/bgbasm_auto.h:char *BASM_OutMOffs(BASM_Context *ctx, char *s, int disp, char *lbl);
include/bgbasm_auto.h:char *BASM_OutModRM(BASM_Context *ctx, char *s, int reg,int breg, int sc, int ireg, int disp, char *lbl);
include/bgbasm_auto.h:void BASM_OutOpStr(BASM_Context *ctx, char *s);
include/bgbasm_auto.h:void BASM_OutOpStrReg(BASM_Context *ctx, char *s, int reg);
include/bgbasm_auto.h:void BASM_OutOpStrImm(BASM_Context *ctx, char *s, long long imm, char *lbl);
include/bgbasm_auto.h:void BASM_OutOpStrMem(BASM_Context *ctx, char *s,char *lbl, int breg, int ireg, int sc, int disp);
include/bgbasm_auto.h:void BASM_OutOpStrRegReg(BASM_Context *ctx, char *s, int r0, int r1);
include/bgbasm_auto.h:void BASM_OutOpStrRegImm(BASM_Context *ctx, char *s, int reg,long long imm, char *lbl);
include/bgbasm_auto.h:void BASM_OutOpStrRegMem(BASM_Context *ctx, char *s, int reg,char *lbl, int breg, int ireg, int sc, int disp);
include/bgbasm_auto.h:void BASM_OutOpStrMemImm(BASM_Context *ctx, char *s, int w,char *lbl, int breg, int ireg, int sc, int disp, long long imm, char *lbl2);
include/bgbasm_auto.h:void BASM_OutOpStrRegRegImm(BASM_Context *ctx, char *s, int r0, int r1,long long imm, char *lbl);
include/bgbasm_auto.h:void BASM_OutOpStrRegMemImm(BASM_Context *ctx, char *s, int reg,char *lbl, int breg, int ireg, int sc, int disp, long long imm, char *lbl2);
include/bgbasm_auto.h:int BASM_OpSingleP(int i);
include/bgbasm_auto.h:int BASM_GetRegWidth(int reg);
include/bgbasm_auto.h:int BASM_OpArgRegP(int i, int j, int reg);
include/bgbasm_auto.h:int BASM_OpArgMemP(int i, int j, int w, int fl);
include/bgbasm_auto.h:int BASM_OpArgImmP(int i, int j, int w, long long imm);
include/bgbasm_auto.h:int BASM_OpArchP(BASM_Context *ctx, int i);
include/bgbasm_auto.h:int BASM_OpRegP(int i, int reg);
include/bgbasm_auto.h:int BASM_OpImmP(int i, int w, long long imm);
include/bgbasm_auto.h:int BASM_OpMemP(int i, int w);
include/bgbasm_auto.h:int BASM_OpRegRegP(int i, int r0, int r1);
include/bgbasm_auto.h:int BASM_OpRegImmP(int i, int reg, long long imm);
include/bgbasm_auto.h:int BASM_OpRegMemP(int i, int reg, int fl);
include/bgbasm_auto.h:int BASM_OpMemRegP(int i, int reg, int fl);
include/bgbasm_auto.h:int BASM_OpMemImmP(int i, int w, long long imm);
include/bgbasm_auto.h:int BASM_OpRegRegImmP(int i, int r0, int r1, long long imm);
include/bgbasm_auto.h:int BASM_OpRegMemImmP(int i, int reg, int fl, long long imm);
include/bgbasm_auto.h:int BASM_OpMemRegImmP(int i, int reg, int fl, long long imm);
include/bgbasm_auto.h:void BASM_OutOpSingle(BASM_Context *ctx, int op);
include/bgbasm_auto.h:void BASM_OutOpReg(BASM_Context *ctx, int op, int reg);
include/bgbasm_auto.h:void BASM_OutOpImm(BASM_Context *ctx, int op, int w, long long imm, char *lbl);
include/bgbasm_auto.h:void BASM_OutOpMem(BASM_Context *ctx, int op, int w,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto.h:void BASM_OutOpRegReg(BASM_Context *ctx, int op, int r0, int r1);
include/bgbasm_auto.h:void BASM_OutOpRegImm(BASM_Context *ctx, int op, int reg, long long imm, char *lbl);
include/bgbasm_auto.h:void BASM_OutOpRegMem(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto.h:void BASM_OutOpMemReg(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto.h:void BASM_OutOpMemImm(BASM_Context *ctx, int op, int w,char *lbl, int breg, int ireg, int sc, long long disp, long long imm, char *lbl2);
include/bgbasm_auto.h:void BASM_OutOpRegRegImm(BASM_Context *ctx, int op, int r0, int r1,long long imm, char *lbl2);
include/bgbasm_auto.h:void BASM_OutOpRegMemImm(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp, long long imm, char *lbl2);
include/bgbasm_auto.h:void BASM_OutOpMemRegImm(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp, long long imm, char *lbl2);
include/bgbasm_auto.h:void BASM_OutOpGeneric1(BASM_Context *ctx, int op, int w,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto.h:void BASM_OutOpGeneric2(BASM_Context *ctx, int op, int w,char *lbl0, int breg0, int ireg0, int sc0, long long disp0, char *lbl1, int breg1, int ireg1, int sc1, long long disp1);
include/bgbasm_auto.h:void BASM_OutOpGeneric3(BASM_Context *ctx, int op, int w,char *lbl0, int breg0, int ireg0, int sc0, long long disp0, char *lbl1, int breg1, int ireg1, int sc1, long long disp1, char *lbl2, int breg2, int ireg2, int sc2, long long disp2);
include/bgbasm_auto.h:void BASM_EmitLabelPos(BASM_Context *ctx, char *name, int pos);
include/bgbasm_auto.h:void BASM_EmitGotoPos(BASM_Context *ctx, char *name, int ty, int pos);
include/bgbasm_auto.h:void BASM_EmitLabel(BASM_Context *ctx, char *name);
include/bgbasm_auto.h:void BASM_EmitGoto(BASM_Context *ctx, char *name, int ty);
include/bgbasm_auto.h:void BASM_EmitConst(BASM_Context *ctx, char *name, long long val);
include/bgbasm_auto.h:int BASM_PredictPos(BASM_Context *ctx, char *name);
include/bgbasm_auto.h:int BASM_PredictDisp(BASM_Context *ctx, char *name);
include/bgbasm_auto.h:int basm_strisreal(char *str);
include/bgbasm_auto.h:u32 basm_atof_u32(char *str);
include/bgbasm_auto.h:u64 basm_atof_u64(char *str);
include/bgbasm_auto.h:u32 basm_atof_u32_sg(char *str, int sg);
include/bgbasm_auto.h:u64 basm_atof_u64_sg(char *str, int sg);
include/bgbasm_auto.h:s64 basm_atoi(char *str);
include/bgbasm_auto.h:int basm_stricmp(char *s1, char *s2);
include/bgbasm_auto.h:char *BASM_Parse_EatWhiteOnly(char *s);
include/bgbasm_auto.h:char *BASM_Parse_EatWhite(char *s);
include/bgbasm_auto.h:int BASM_Parse_IsWhiteOnly(char *s);
include/bgbasm_auto.h:int BASM_Parse_IsLineBreak(char *se);
include/bgbasm_auto.h:int BASM_Parse_OpChar(int c);
include/bgbasm_auto.h:int BASM_Parse_PeekChar(char **str);
include/bgbasm_auto.h:int BASM_Parse_ParseChar(char **str);
include/bgbasm_auto.h:int BASM_Parse_EmitChar(char **str, int j);
include/bgbasm_auto.h:int BASM_Parse_MatchTokenListLen(char *str, char **lst);
include/bgbasm_auto.h:char *BASM_Parse_Token(char *s, char *b, int *ty);
include/bgbasm_auto.h:char *BASM_Parse_TokenGAS(char *s, char *b, int *ty);
include/bgbasm_auto.h:int BASM_ParseReg(BASM_Context *ctx, char *b);
include/bgbasm_auto.h:char *BASM_ParseArgGAS(BASM_Context *ctx, char *str,int *breg, int *ireg, int *sc, long long *disp, char **lbl);
include/bgbasm_auto.h:char *BASM_ParseArg(BASM_Context *ctx, char *str,int *breg, int *ireg, int *sc, long long *disp, char **lbl);
include/bgbasm_auto.h:int BASM_OpOnlySingleP(int op);
include/bgbasm_auto.h:char *BASM_ParseSpecial(BASM_Context *ctx, char *str, char *op);
include/bgbasm_auto.h:char *BASM_ParseOpcode(BASM_Context *ctx, char *str);
include/bgbasm_auto.h:char *BASM_ParseOpcodeList(BASM_Context *ctx, char *str);
include/bgbasm_auto.h:int BDISASM_CheckOpStr(byte **rip, char **str, int *rfl, int op);
include/bgbasm_auto.h:byte *BDISASM_PrintModRM_RM16(byte *ip, int op, int fl, int w, int ar);
include/bgbasm_auto.h:byte *BDISASM_PrintModRM_RM(byte *ip, int op, int fl, int w, int ar);
include/bgbasm_auto.h:byte *BDISASM_PrintModRM_RegRM(byte *ip, int op, int fl, int w);
include/bgbasm_auto.h:byte *BDISASM_PrintModRM_RMReg(byte *ip, int op, int fl, int w);
include/bgbasm_auto.h:byte *BDISASM_SkipModRM(byte *ip, int fl);
include/bgbasm_auto.h:int BDISASM_SizeOpStr(byte *oip, char *str, int fl);
include/bgbasm_auto.h:char *BDISASM_GetFixReg(int i, int j);
include/bgbasm_auto.h:void BDISASM_PrintFixRegPF(int i);
include/bgbasm_auto.h:void BDISASM_PrintFixRegSF(int i);
include/bgbasm_auto.h:byte *BDISASM_PrintOpcode(byte *ip, int *rfl);
include/bgbasm_auto.h:int BDISASM_PrintOpcodes(byte *ip, int fl, int sz);
include/bgbasm_auto.h:int BDISASM_HexDump(byte *ip, int sz);
include/bgbasm_auto.h:char *BASM_CPUID_String();
include/bgbasm_auto.h:u32 BASM_CPUID_Version();
include/bgbasm_auto.h:u32 BASM_CPUID_Unit();
include/bgbasm_auto.h:u32 BASM_CPUID_Ext();
include/bgbasm_auto.h:u32 BASM_CPUID_Feature();
include/bgbasm_auto.h:void *BASM_GetEBP();
include/bgbasm_auto.h:int BASM_GetReturnState(void **regs);
include/bgbasm_auto.h:int BASM_StackTrace(void **ip, void **bp, int lim);
include/bgbasm_auto.h:void basm_putc(int c);
include/bgbasm_auto.h:void basm_puts(char *str);
include/bgbasm_auto.h:void basm_vprint(char *str, va_list lst);
include/bgbasm_auto.h:void basm_print(char *str, ...);
include/bgbasm_auto.h:void BASM_RegisterPtr(char *lbl, void *ptr);
include/bgbasm_auto.h:void *BASM_GetPtr(char *lbl);
include/bgbasm_auto.h:void *BASM_GetFPtrDummy(char *lbl);
include/bgbasm_auto.h:void *BASM_GetIP();
include/bgbasm_auto.h:void *BASM_GetDP();
include/bgbasm_auto.h:void BASM_ResetCtx(BASM_Context *ctx);
include/bgbasm_auto.h:void BASM_CopyLblCtx(BASM_Context *ctx);
include/bgbasm_auto.h:void BASM_AssembleCtxBuf(BASM_Context *ctx, char *buf);
include/bgbasm_auto.h:void BASM_BeginAssembly(char *name);
include/bgbasm_auto.h:void BASM_BeginAssembly(char *name);
include/bgbasm_auto.h:void *BASM_EndAssembly();
include/bgbasm_auto.h:void *BASM_EndAssemblyQuiet();
include/bgbasm_auto.h:void *BASM_EndAssemblyCache(char *name);
include/bgbasm_auto.h:void BASM_EndAssemblyFile(char *name);
include/bgbasm_auto.h:byte *BASM_EndAssemblyObjBuf(int *rsz);
include/bgbasm_auto.h:byte *BASM_EndAssemblyCacheObjBuf(int *rsz);
include/bgbasm_auto.h:BGBASM_Thunk *BASM_EndAssemblyThunk(BGBASM_Scope *scope);
include/bgbasm_auto.h:byte *BASM_EndAssemblyThunkInline(BGBASM_Scope *scope);
include/bgbasm_auto.h:void BASM_FreeAssembly(void *ip);
include/bgbasm_auto.h:char *BASM_GenSym();
include/bgbasm_auto.h:char *BASM_GenSym2();
include/bgbasm_auto.h:int BASM_LoadObjectBuffer(char *name, byte *buf, int sz);
include/bgbasm_auto.h:int BASM_LoadFile(char *name);
include/bgbasm_auto.h:int BASM_AssembleFile(char *iname, char *oname);
include/bgbasm_auto.h:void BASM_Init();
include/bgbasm_auto.h:int basm_genseed();
include/bgbasm_auto.h:void BASM_InitRand();
include/bgbasm_auto.h:u32 basm_rand();
include/bgbasm_auto.h:char *basm_rand_key12();
include/bgbasm_auto.h:char *basm_rand_key18();
include/bgbasm_auto.h:int BASM_LenSig(char *sig, char **esig);
include/bgbasm_auto.h:int BASM_LenSig(char *sig, char **esig);
include/bgbasm_auto.h:void BASM_CallSig(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto.h:void BASM_CallSigStd(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto.h:int BASM_SplitArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_auto.h:int BASM_SplitArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_auto.h:void BASM_CallSig(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto.h:void BASM_CallSigStd(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto.h:void BASM_ProcessSigArgs(char *sig, va_list lst, void *buf);
include/bgbasm_auto.h:int BASM_MergeArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_auto.h:int BASM_MergeArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_auto.h:void BASM_CreateStub_Inner32(void *args, void **data);
include/bgbasm_auto.h:void BASM_CreateStub_Inner64(void *args, void **data, void *greg, void *xreg);
include/bgbasm_auto.h:void BASM_CreateStub(void *buf, void *fcn, void *data, char *sig);
include/bgbasm_auto.h:void BASM_InitSig();
include/bgbasm_auto.h:void *BASM_MakeBufferCallStub(void *fcn, char *sig);
include/bgbasm_auto.h:void *BASM_MakeBufferCallStub(void *fcn, char *sig);
include/bgbasm_auto.h:int BASM_PP_AddIncludePathFront(char *str);
include/bgbasm_auto.h:int BASM_PP_AddIncludePathBack(char *str);
include/bgbasm_auto.h:char *BASM_PP_EmitString(char *t, char *s);
include/bgbasm_auto.h:char *BASM_PP_EmitCharString(char *t, char *s);
include/bgbasm_auto.h:void BASM_PP_DeleteDefine(char *name);
include/bgbasm_auto.h:void BASM_PP_CleanupDefines();
include/bgbasm_auto.h:void BASM_PP_AddDefine(char *name, char *str);
include/bgbasm_auto.h:void BASM_PP_AddDefineArgs(char *name, char **args, char *str);
include/bgbasm_auto.h:void BASM_PP_AddStaticDefine(char *name, char *str);
include/bgbasm_auto.h:void BASM_PP_AddStaticDefineArgs(char *name, char **args, char *str);
include/bgbasm_auto.h:char *BASM_PP_LoadInclude(char *name, int *rsz);
include/bgbasm_auto.h:void BASM_PP_Include(char *str);
include/bgbasm_auto.h:void BASM_PP_Directive2(char *str);
include/bgbasm_auto.h:void BASM_PP_Directive(char *str);
include/bgbasm_auto.h:char *BASM_PP_ParseArg(char *s, char *b);
include/bgbasm_auto.h:char *BASM_PP_PrintName(char *t, char *s);
include/bgbasm_auto.h:char *BASM_PP_PrintToken(char *t, char *s, int ty);
include/bgbasm_auto.h:int BASM_PP_Expand(char **src, char **dst, char *op);
include/bgbasm_auto.h:int BASM_PP_Line(char *str);
include/bgbasm_auto.h:char *BASM_PP_ParseLine(char *s, char *b);
include/bgbasm_auto.h:void BASM_PP_Buffer(char *ibuf);
include/bgbasm_auto.h:int BASM_PP_Filter(char *ibuf, char *obuf);
include/bgbasm_auto.h:s64 basm_tell_tmp(void *fd);
include/bgbasm_auto.h:int basm_seek_tmp(void *fd, s64 pos, int rel);
include/bgbasm_auto.h:void basm_initvfs();
include/bgbasm_auto.h:void *basm_fopen(char *name, char *mode);
include/bgbasm_auto.h:void basm_fclose(void *fd);
include/bgbasm_auto.h:int basm_fread(void *buf, int m, int n, void *fd);
include/bgbasm_auto.h:int basm_fwrite(void *buf, int m, int n, void *fd);
include/bgbasm_auto.h:int basm_feof(void *fd);
include/bgbasm_auto.h:s64 basm_ftell(void *fd);
include/bgbasm_auto.h:int basm_fseek(void *fd, s64 pos, int rel);
include/bgbasm_auto.h:int basm_fgetc(void *fd);
include/bgbasm_auto.h:void basm_fputc(int c, void *fd);
include/bgbasm_auto.h:void *basm_loadfile(char *name, int *rsz);
include/bgbasm_auto.h:int basm_storefile(char *name, void *buf, int sz);
include/bgbasm_auto.h:int basm_storetextfile(char *name, char *buf);
include/bgbasm_auto.h:BGBASM_GCFuncs_t *BASM_GetGCFuncs();
include/bgbasm_auto.h:void BASM_SetScanRange(int (*fcn)(void **p, int cnt));
include/bgbasm_auto.h:void BASM_ScanRange(void **p, int cnt);
include/bgbasm_auto.h:void *BASM_gcAlloc(int sz);
include/bgbasm_auto.h:void *BASM_gcExec(int sz);
include/bgbasm_auto.h:void *BASM_gcAtomic(int sz);
include/bgbasm_auto.h:void *BASM_gcTAlloc(char *ty, int sz);
include/bgbasm_auto.h:void *BASM_gcTExec(char *ty, int sz);
include/bgbasm_auto.h:void *BASM_gcTAtomic(char *ty, int sz);
include/bgbasm_auto.h:void BASM_gcFree(void *obj);
include/bgbasm_auto.h:void *BASM_gcReAlloc(void *obj, int sz);
include/bgbasm_auto.h:int BASM_gcAllocTls(char *name, int sz);
include/bgbasm_auto.h:int BASM_gcGetTlsTls();
include/bgbasm_auto.h:int BASM_ObjAllocTextP(byte *obj);
include/bgbasm_auto.h:void BASM_MarkData();
include/bgbasm_auto.h:byte *BASM_AllocChunkBuffer(int sz);
include/bgbasm_auto.h:void BASM_AllocTextChunk(int sz);
include/bgbasm_auto.h:void BASM_AllocDataChunk(int sz);
include/bgbasm_auto.h:byte *BASM_AllocTextSz(int sz);
include/bgbasm_auto.h:byte *BASM_AllocDataSz(int sz);
include/bgbasm_auto.h:void BASM_InitLink();
include/bgbasm_auto.h:char *basm_strdup(char *str);
include/bgbasm_auto.h:int basm_strdup_i(char *str);
include/bgbasm_auto.h:char *basm_strtab_i(int str);
include/bgbasm_auto.h:void *basm_ralloc(int sz);
include/bgbasm_auto.h:char *basm_rstrdup(char *str);
include/bgbasm_auto.h:void BASM_LinkReference(byte *ref, byte *ptr, int ty);
include/bgbasm_auto.h:void BASM_UnlinkReference(byte *ref, byte *ptr, int ty);
include/bgbasm_auto.h:void BASM_LinkRefChain(int idx, byte *ptr);
include/bgbasm_auto.h:void BASM_UnlinkRefChain(int idx, byte *ptr);
include/bgbasm_auto.h:void BASM_AddSymRef(char *name, byte *ref, int ty);
include/bgbasm_auto.h:char *BASM_UnmangleName(char *str);
include/bgbasm_auto.h:void BASM_AddSym(char *name, void *ptr);
include/bgbasm_auto.h:void BASM_AddSym(char *name, void *ptr);
include/bgbasm_auto.h:void *BASM_FetchSymHash(char *name);
include/bgbasm_auto.h:void *BASM_FetchSym(char *name);
include/bgbasm_auto.h:void *BASM_FetchSymPrefix(char *name);
include/bgbasm_auto.h:int BASM_FetchSymIndexPrefix(char *name);
include/bgbasm_auto.h:int BASM_FetchSymIndex2(char *name);
include/bgbasm_auto.h:int BASM_FetchSymIndex(char *name);
include/bgbasm_auto.h:int BASM_GetSymIndex(char *name);
include/bgbasm_auto.h:void *BASM_LookupLabel(char *name);
include/bgbasm_auto.h:void BASM_AssignSym(char *name, void *ptr);
include/bgbasm_auto.h:void BASM_AddProxy(char *name);
include/bgbasm_auto.h:byte *BASM_LinkModule(BASM_Context *ctx);
include/bgbasm_auto.h:int BASM_LookupModule(char *name);
include/bgbasm_auto.h:void BASM_DumpModule(char *name);
include/bgbasm_auto.h:char *BASM_GetNamePtr(void *ptr);
include/bgbasm_auto.h:char *BASM_GetLastNamePtr(void *ptr, void **rbp);
include/bgbasm_auto.h:int BASM_EnumUndefSyms(char **lst, int max);
include/bgbasm_auto.h:void BASM_AddSymArray(char **name, void **ptr, int cnt);
include/bgbasm_auto.h:int BASM_LoadLibrary(char *name);
include/bgbasm_auto.h:BGBASM_Scope *BASM_NewScope(BGBASM_Scope *super);
include/bgbasm_auto.h:void BASM_FreeScope(BGBASM_Scope *scope);
include/bgbasm_auto.h:int BASM_IndexScopeSym(BGBASM_Scope *scope, char *name);
include/bgbasm_auto.h:void BASM_BindScopeSym(BGBASM_Scope *scope, char *name, void *ptr);
include/bgbasm_auto.h:void BASM_BindScopeSymSig(BGBASM_Scope *scope,char *name, char *sig, void *ptr);
include/bgbasm_auto.h:void BASM_AssignScopeSym(BGBASM_Scope *scope, char *name, void *ptr);
include/bgbasm_auto.h:void *BASM_FetchScopeSym(BGBASM_Scope *scope, char *name);
include/bgbasm_auto.h:void *BASM_FetchScopeSym2(BGBASM_Scope *scope, char *name);
include/bgbasm_auto.h:char *BASM_FetchScopeSig(BGBASM_Scope *scope, char *name);
include/bgbasm_auto.h:BGBASM_Thunk *BASM_LinkModuleThunk(BASM_Context *ctx, BGBASM_Scope *scope);
include/bgbasm_auto.h:byte *BASM_LinkThunkInline(BASM_Context *ctx, BGBASM_Scope *scope);
include/bgbasm_auto.h:int BASM_UnmangleXCall(char *str, char *buf);
include/bgbasm_auto.h:char **BASM_UnmangleSplit(char *str);
include/bgbasm_auto.h:int BASM_MangleXCall(char *str, char *buf);
include/bgbasm_auto.h:int BASM_XCallSplitSig(char *sig, char **esig, int *rni, int *rnx, int *rns);
include/bgbasm_auto.h:int BASM_XCallGenRepackSig(char *sig);
include/bgbasm_auto.h:void *BASM_GetLabelXCall(char *name);
include/bgbasm_auto.h:int thGetTlsTlsW32();
include/bgbasm_auto.h:void *BASM_GetLabelXTls(char *name);
include/bgbasm_auto.h:BASM_XMeta *BASM_LookupXMetaInfo(char *name);
include/bgbasm_auto.h:BASM_XMeta *BASM_GetXMetaInfo(char *name);
include/bgbasm_auto.h:void *BASM_GetLabelXMeta(char *name);
include/bgbasm_auto.h:void BASM_NotifyLabelXMeta(char *name, void *ptr);
include/bgbasm_auto.h:int BASM_RegisterLinkMeta(char *name, basm_meta_ft fcn);
include/bgbasm_auto.h:int BASM_RegisterLinkMetaTrigger(char *name, basm_mtrg_ft fcn);
include/bgbasm_auto.h:char *BASM_ComposeLinkMetaName(char *name, char **args);
include/bgbasm_auto.h:char *BASM_ComposeLinkNotifyName(char *name, char **args);
include/bgbasm_auto.h:void BASM_InitUnwind();
include/bgbasm_auto.h:void *BASM_SetJmp(BGBASM_JmpBuf *buf);
include/bgbasm_auto.h:void BASM_LongJmp(BGBASM_JmpBuf *buf, void *val);
include/bgbasm_auto.h:void *BASM_StartUnwind(BGBASM_JmpBuf *buf);
include/bgbasm_auto.h:void BASM_EndUnwind(BGBASM_JmpBuf *buf);
include/bgbasm_auto.h:void *BASM_BeginUnwind(BGBASM_JmpBuf *buf);
include/bgbasm_auto.h:void BASM_DoUnwind(void *val);
include/bgbasm_auto.h:int BASM_InitDllsOS();
include/bgbasm_auto.h:int BASM_LoadDynamicOS(char *name);
include/bgbasm_auto.h:void *BASM_LookupLabelOS(char *name);
include/bgbasm_auto.h:int BASM_ProcessEXE(char *name);
include/bgbasm_auto.h:int BASM_COFF_ResolveRelocs(BASM_Context *ctx, BASM_COFF_Info *inf, int sec,int offs, int cnt);
include/bgbasm_auto.h:BASM_Context *BASM_COFF_LoadObjectBuf(char *name, byte *buf, int sz);
include/bgbasm_auto.h:BASM_Context *BASM_COFF_LoadObject(char *name);
include/bgbasm_auto.h:int BASM_COFF_LoadLibrary(char *name);
include/bgbasm_auto.h:void basm_coff_set16(byte *ptr, int i);
include/bgbasm_auto.h:void basm_coff_set32(byte *ptr, int i);
include/bgbasm_auto.h:int basm_coff_get16(byte *ptr);
include/bgbasm_auto.h:int basm_coff_get32(byte *ptr);
include/bgbasm_auto.h:int basm_coff_idxstr(char *strs, char *str);
include/bgbasm_auto.h:int basm_coff_idxstr2(char *strs, char *str);
include/bgbasm_auto.h:int BASM_COFF_StoreObjectBuf(BASM_Context *ctx, byte *buf, int msz);
include/bgbasm_auto.h:int BASM_COFF_StoreObject(char *name, BASM_Context *ctx);
include/bgbasm_auto.h:byte *BASM_COFF_EncodeObject(BASM_Context *ctx, int *rsz);
include/bgbasm_auto.h:BASM_Context *BASM_ELF_LoadObjectBuf(char *name, byte *buf, int sz);
include/bgbccc.h:BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s);
include/bgbcc_auto.h:int BGBCP_GetLinenum();
include/bgbcc_auto.h:char *BGBCP_GetFilename();
include/bgbcc_auto.h:int BGBCP_CalcLinenum(char *se);
include/bgbcc_auto.h:int BGBCP_SetLinenum(char *fname, char *base, int num);
include/bgbcc_auto.h:int BGBCP_PushLinenum();
include/bgbcc_auto.h:int BGBCP_PopLinenum();
include/bgbcc_auto.h:int BGBCP_SkimLinenum(char *s, char **rfn, int *rln);
include/bgbcc_auto.h:char *BGBCP_GetLastFileName();
include/bgbcc_auto.h:int BGBCP_GetLastLineNumber();
include/bgbcc_auto.h:char *BGBCP_EatWhiteOnly(char *s);
include/bgbcc_auto.h:char *BGBCP_EatWhiteOnly2(char *s);
include/bgbcc_auto.h:char *BGBCP_EatWhite(char *s);
include/bgbcc_auto.h:int BGBCP_IsWhiteOnly(char *s);
include/bgbcc_auto.h:int BGBCP_IsLineBreak(char *se);
include/bgbcc_auto.h:int BGBCP_OpChar(int c);
include/bgbcc_auto.h:int BGBCP_PeekChar(char **str);
include/bgbcc_auto.h:int BGBCP_ParseChar(char **str);
include/bgbcc_auto.h:int BGBCP_EmitChar(char **str, int j);
include/bgbcc_auto.h:int BGBCP_NameInitChar(int c);
include/bgbcc_auto.h:int BGBCP_NameChar(int c);
include/bgbcc_auto.h:char *BGBCP_TokenI(char *s, char *b, int *ty, int lang, int sz);
include/bgbcc_auto.h:char *BGBCP_Token(char *s, char *b, int *ty);
include/bgbcc_auto.h:void BGBCP_FlushToken(char *s);
include/bgbcc_auto.h:char *BGBCP_Token(char *s, char *b, int *ty);
include/bgbcc_auto.h:void BGBCP_FlushToken(char *s);
include/bgbcc_auto.h:char *BGBCP_TokenGen(char *s, char *b, int *ty);
include/bgbcc_auto.h:char *BGBCP_TokenLang(char *s, char *b, int *ty, int lang);
include/bgbcc_auto.h:char *BGBCP_TokenCtx(BGBCP_ParseState *ctx, char *s, char *b, int *ty);
include/bgbcc_auto.h:char *BGBCP_ReadToken(BGBCP_ParseState *ctx, char **str, int *ty);
include/bgbcc_auto.h:BCCX_Node *BGBCP_FunArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_GenArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
include/bgbcc_auto.h:int BGBCP_LangForName(char *name);
include/bgbcc_auto.h:char *BGBCP_NameForLang(int lang);
include/bgbcc_auto.h:int BGBCP_ArchForName(char *name);
include/bgbcc_auto.h:char *BGBCP_NameForArch(int arch);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
include/bgbcc_auto.h:BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:int BGBCP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_LookupStruct(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_LookupType(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:int BGBCP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BGBCP_GetStruct(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_GetUnion(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_GetEnum(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBCP_GetStructJ(BGBCP_ParseState *ctx, char *name, int ty);
include/bgbcc_auto.h:int BGBCP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:int BGBCP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DefClassC(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DeclAttributeC(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DefTypeC(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DefClassJ(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DefTypeJ(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DefType(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
include/bgbcc_auto.h:BCCX_Node *BGBCP_FunVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DefName(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_DefName2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_VarDefinition(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_Definition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:int BGBCP_AddExpression(char *name, BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_auto.h:BCCX_Node *BGBCP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_auto.h:BCCX_Node *BGBCP_Number(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
include/bgbcc_auto.h:BCCX_Node *BGBCP_UnaryExpr(char *op, BCCX_Node *v);
include/bgbcc_auto.h:BCCX_Node *BGBCP_IfExpr(BCCX_Node *cond, BCCX_Node *ln, BCCX_Node *rn);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_Expression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_Expression2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:void BGBCP_Warn(char *se, char *str, ...);
include/bgbcc_auto.h:void BGBCP_Error(char *se, char *str, ...);
include/bgbcc_auto.h:int BGBCP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_auto.h:BCCX_Node *BGBCP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_auto.h:int BGBCP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_auto.h:BCCX_Node *BGBCP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_auto.h:char *BGBCP_EatSemicolon(char *s);
include/bgbcc_auto.h:BCCX_Node *BGBCP_Statement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ParseComment(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_ParseDocComment(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_BlockStatement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_Block(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBCP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:int BGBPP_AddIncludePathFront(char *str);
include/bgbcc_auto.h:int BGBPP_AddIncludePathBack(char *str);
include/bgbcc_auto.h:char *BGBPP_EmitString(char *t, char *s);
include/bgbcc_auto.h:char *BGBPP_EmitCharString(char *t, char *s);
include/bgbcc_auto.h:void BGBPP_Trigraphs(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:void BGBPP_UniEscape(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:int BGBPP_Error(BGBCP_ParseState *ctx, char *str, ...);
include/bgbcc_auto.h:BGBPP_Def *BGBPP_LookupDefine(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:void BGBPP_DeleteDefine(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:void BGBPP_CleanupDefines(BGBCP_ParseState *ctx);
include/bgbcc_auto.h:void BGBPP_AddDefine(BGBCP_ParseState *ctx, char *name, char *str);
include/bgbcc_auto.h:void BGBPP_AddDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
include/bgbcc_auto.h:void BGBPP_AddStaticDefine(BGBCP_ParseState *ctx,char *name, char *str);
include/bgbcc_auto.h:void BGBPP_AddStaticDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
include/bgbcc_auto.h:void BGBPP_SendDefines(BGBCP_ParseState *ctx);
include/bgbcc_auto.h:char *BGBPP_LoadInclude(BGBCP_ParseState *ctx, char *name, int *rsz);
include/bgbcc_auto.h:void BGBPP_Include(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:void BGBPP_Directive2(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:void BGBPP_Directive(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:char *BGBPP_ParseArg(BGBCP_ParseState *ctx, char *s, char *b);
include/bgbcc_auto.h:char *BGBPP_PrintName(char *t, char *s);
include/bgbcc_auto.h:char *BGBPP_PrintToken(char *t, char *s, int ty);
include/bgbcc_auto.h:int BGBPP_Expand(BGBCP_ParseState *ctx, char **src, char **dst, char *op);
include/bgbcc_auto.h:int BGBPP_Line(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:int BGBPP_LineDigraph(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:int BGBPP_LinePostFilter(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:char *BGBPP_ParseLine(BGBCP_ParseState *ctx, char *s, char *b);
include/bgbcc_auto.h:void BGBPP_BufferLine(BGBCP_ParseState *ctx, char *b);
include/bgbcc_auto.h:void BGBPP_Buffer(BGBCP_ParseState *ctx, char *ibuf);
include/bgbcc_auto.h:int BGBPP_Filter(BGBCP_ParseState *ctx, char *ibuf, char *obuf);
include/bgbcc_auto.h:int BGBJP_GetLinenum();
include/bgbcc_auto.h:char *BGBJP_GetFilename();
include/bgbcc_auto.h:int BGBJP_CalcLinenum(char *se);
include/bgbcc_auto.h:int BGBJP_SetLinenum(char *fname, char *base, int num);
include/bgbcc_auto.h:int BGBJP_PushLinenum();
include/bgbcc_auto.h:int BGBJP_PopLinenum();
include/bgbcc_auto.h:int BGBJP_SkimLinenum(char *s, char **rfn, int *rln);
include/bgbcc_auto.h:char *BGBJP_GetLastFileName();
include/bgbcc_auto.h:int BGBJP_GetLastLineNumber();
include/bgbcc_auto.h:char *BGBJP_EatWhiteOnly(char *s);
include/bgbcc_auto.h:char *BGBJP_EatWhiteOnly2(char *s);
include/bgbcc_auto.h:char *BGBJP_EatWhite(char *s);
include/bgbcc_auto.h:int BGBJP_IsWhiteOnly(char *s);
include/bgbcc_auto.h:int BGBJP_IsLineBreak(char *se);
include/bgbcc_auto.h:int BGBJP_OpChar(int c);
include/bgbcc_auto.h:int BGBJP_PeekChar(char **str);
include/bgbcc_auto.h:int BGBJP_ParseChar(char **str);
include/bgbcc_auto.h:int BGBJP_EmitChar(char **str, int j);
include/bgbcc_auto.h:int BGBJP_NameChar(int c);
include/bgbcc_auto.h:char *BGBJP_Token(char *s, char *b, int *ty);
include/bgbcc_auto.h:void BGBJP_FlushToken(char *s);
include/bgbcc_auto.h:char *BGBJP_TokenGen(char *s, char *b, int *ty);
include/bgbcc_auto.h:BCCX_Node *BGBJP_FunArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_FunArgs2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ModuleBuffer(char *name, char *modname, char *buf);
include/bgbcc_auto.h:int BGBJP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBJP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBJP_LookupType(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:int BGBJP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BGBJP_NewStructJ(BGBCP_ParseState *ctx, char *name, int ty);
include/bgbcc_auto.h:int BGBJP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:BCCX_Node *BGBJP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:int BGBJP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
include/bgbcc_auto.h:BCCX_Node *BGBJP_DefClass(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_DeclAttribute(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_DefType(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_FlagsBlock(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
include/bgbcc_auto.h:BCCX_Node *BGBJP_FunVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_DefName(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_DefName2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_VarDefinition(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn, int mfl);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_Definition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_TypeArgExpression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_TypeArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_TypeExpressionLit(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_TypeExpressionPE(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_TypeExpressionUnary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_TypeExpressionBinary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_TypeExpression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_CastTypeExpression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:int BGBJP_AddExpression(char *name, BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_auto.h:BCCX_Node *BGBJP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_auto.h:BCCX_Node *BGBJP_Number(BGBCP_ParseState *ctx, char *str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionFunction(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_Expression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_Expression2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:void BGBJP_Warn(char *se, char *str, ...);
include/bgbcc_auto.h:void BGBJP_Error(char *se, char *str, ...);
include/bgbcc_auto.h:int BGBJP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_auto.h:BCCX_Node *BGBJP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_auto.h:int BGBJP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_auto.h:BCCX_Node *BGBJP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_auto.h:char *BGBJP_EatSemicolon(char *s);
include/bgbcc_auto.h:BCCX_Node *BGBJP_Statement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_BlockStatement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_Block(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:BCCX_Node *BGBJP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_auto.h:void BGBCC_Warn(char *str, ...);
include/bgbcc_auto.h:void BGBCC_Error(char *str, ...);
include/bgbcc_auto.h:char *BGBCC_GenSym();
include/bgbcc_auto.h:char *BGBCC_GenSym2();
include/bgbcc_auto.h:void bgbcc_puts(BGBCC_State *ctx, char *str);
include/bgbcc_auto.h:void bgbcc_print(BGBCC_State *ctx, char *str, ...);
include/bgbcc_auto.h:int BGBCC_CompileSwitch(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:char *BGBCC_VarTypeString_FlattenExpr(BGBCC_State *ctx,char *dst, BCCX_Node *l, int fl);
include/bgbcc_auto.h:char *BGBCC_VarTypeString_FlattenName(BGBCC_State *ctx,char *t, char *s, int i);
include/bgbcc_auto.h:int BGBCC_VarTypeString_ModifierChar(BGBCC_State *ctx, int i);
include/bgbcc_auto.h:char *BGBCC_VarTypeString_FlattenModifiers(BGBCC_State *ctx,char *t, int fl);
include/bgbcc_auto.h:char *BGBCC_VarTypeString_FlattenModifiers2(BGBCC_State *ctx,char *t, int fl);
include/bgbcc_auto.h:char *BGBCC_VarTypeString(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_auto.h:char *BGBCC_VarTypeFlagsString(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_auto.h:void BGBCC_EmitVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_EmitVar2(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_EmitVar3(BGBCC_State *ctx, char *name, char *ty);
include/bgbcc_auto.h:void BGBCC_EmitVarProperty(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileVarProperty(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_CompileVarDummyP(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileVarStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileVarStatement2(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_CompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
include/bgbcc_auto.h:char *BGBCC_GenProtoSig(BGBCC_State *ctx,BCCX_Node *type, BCCX_Node *args);
include/bgbcc_auto.h:void BGBCC_EmitSigProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_auto.h:BCCX_Node *BGBCC_CompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_auto.h:void BGBCC_CompileStruct(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileUnion(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileClass(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileEnum(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_CompileSProto(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GetNodeAttribute(BGBCC_State *ctx,BCCX_Node *l, char *name);
include/bgbcc_auto.h:char *BGBCC_GetNodeAttributeString(BGBCC_State *ctx,BCCX_Node *l, char *name);
include/bgbcc_auto.h:void BGBCC_CompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileStructs(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_EmitVarValue(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_EmitVarValueR(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_EmitVarValueR2(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_auto.h:char *BGBCC_QualifyNameNS(BGBCC_State *ctx, char *name);
include/bgbcc_auto.h:void BGBCC_EmitTopArray(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_EmitTopVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_CompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:char *BGBCC_CompileModule(char *name, BCCX_Node *l);
include/bgbcc_auto.h:char *BGBCC_CIfy(char *s);
include/bgbcc_auto.h:void BGBCC_CompileAssign(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileExprList(BGBCC_State *ctx, BCCX_Node *lst);
include/bgbcc_auto.h:void BGBCC_CompileExprListReverse(BGBCC_State *ctx, BCCX_Node *lst);
include/bgbcc_auto.h:void BGBCC_CompileArgsList(BGBCC_State *ctx, BCCX_Node *lst);
include/bgbcc_auto.h:void BGBCC_CompileFuncall(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileExprT(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_CompileExprTail(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_EmitLabel(BGBCC_State *ctx, char *name);
include/bgbcc_auto.h:void BGBCC_CompileBreak(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_CompileContinue(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_CompileBreakFalse(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_CompileBreakTrue(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_CompileContinueFalse(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_CompileContinueTrue(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_CompileJmp(BGBCC_State *ctx, char *s);
include/bgbcc_auto.h:void BGBCC_CompileJmpFalse(BGBCC_State *ctx, char *s);
include/bgbcc_auto.h:void BGBCC_CompileJmpTrue(BGBCC_State *ctx, char *s);
include/bgbcc_auto.h:void BGBCC_CompileJmpCond(BGBCC_State *ctx, char *op, char *s);
include/bgbcc_auto.h:void BGBCC_CompileJCO(BGBCC_State *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn, char *s);
include/bgbcc_auto.h:void BGBCC_CompileJCT(BGBCC_State *ctx, BCCX_Node *l, char *s);
include/bgbcc_auto.h:void BGBCC_CompileJCF(BGBCC_State *ctx, BCCX_Node *l, char *s);
include/bgbcc_auto.h:int BGBCC_TryGetSizeofType(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_auto.h:int BGBCC_IsUnaryP(BCCX_Node *l, char *op);
include/bgbcc_auto.h:int BGBCC_IsBinaryP(BCCX_Node *l, char *op);
include/bgbcc_auto.h:int BGBCC_BoolExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_IsExpr(BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_BoolExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_WrapIntSuf(s64 i, char *suf);
include/bgbcc_auto.h:BCCX_Node *BGBCC_WrapRealSuf(double f, char *suf);
include/bgbcc_auto.h:BCCX_Node *BGBCC_WrapInt(s64 i);
include/bgbcc_auto.h:BCCX_Node *BGBCC_WrapReal(double f);
include/bgbcc_auto.h:int BGBCC_IsIntP(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_IsRealP(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_Boolify(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:char *BGBCC_BinaryTySuf(BGBCC_State *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn);
include/bgbcc_auto.h:BCCX_Node *BGBCC_ReduceForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_SetLine(BGBCC_State *ctx, BCCX_Node *l,char *fn, int ln);
include/bgbcc_auto.h:BCCX_Node *BGBCC_ReduceStatementForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_ReduceExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_ReduceStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_InferTypeBase(BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_InferIsIntP(BCCX_Node *t);
include/bgbcc_auto.h:int BGBCC_InferIsLongP(BCCX_Node *t);
include/bgbcc_auto.h:int BGBCC_InferIsFloatP(BCCX_Node *t);
include/bgbcc_auto.h:int BGBCC_InferIsDoubleP(BCCX_Node *t);
include/bgbcc_auto.h:int BGBCC_InferIsNumP(BCCX_Node *t);
include/bgbcc_auto.h:BCCX_Node *BGBCC_InferIsInt(BCCX_Node *t);
include/bgbcc_auto.h:BCCX_Node *BGBCC_InferIsLong(BCCX_Node *t);
include/bgbcc_auto.h:BCCX_Node *BGBCC_InferIsNum(BCCX_Node *t);
include/bgbcc_auto.h:BCCX_Node *BGBCC_InferForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_InferExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_InferExprClean(BGBCC_State *ctx, BCCX_Node *l, int *cp);
include/bgbcc_auto.h:int BGBCC_GuessCloseForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_GuessCloseExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:int BGBCC_GuessCloseBlock(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_MetaCompileStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_MetaEmitVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_MetaEmitVar2(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_MetaCompileVarStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_MetaCompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
include/bgbcc_auto.h:char *BGBCC_GenProtoSig(BGBCC_State *ctx,BCCX_Node *type, BCCX_Node *args);
include/bgbcc_auto.h:void BGBCC_MetaEmitSigProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_auto.h:BCCX_Node *BGBCC_MetaCompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_auto.h:void BGBCC_MetaCompileStruct(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_MetaCompileUnion(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_MetaCompileEnum(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_MetaCompileSProto(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_MetaCompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_MetaCompileStructs(BGBCC_State *ctx);
include/bgbcc_auto.h:void BGBCC_MetaEmitVarValue(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_MetaEmitVarValueR(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_MetaEmitTopArray(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_MetaEmitTopVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_auto.h:void BGBCC_MetaCompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:char *BGBCC_MetaCompileModule(char *name, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileStatementList(BGBCC_State *ctx, char *tag,BCCX_Node *lst);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileStatementBody(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileType(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileVar(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileStruct(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileUnion(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileSProto(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:void BGBCC_GAstCompileStructs(BGBCC_State *ctx);
include/bgbcc_auto.h:BCCX_Node *BGBCC_GAstCompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_auto.h:byte *BGBCC_GAstCompileModule(char *name, BCCX_Node *l, int *rsz);
include/bgbcc_auto.h:BCCX_Attr *BCCX_LookupAttr(BCCX_Node *n, char *var);
include/bgbcc_auto.h:BCCX_Attr *BCCX_LookupAttrNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_auto.h:BCCX_Attr *BCCX_NewAttr();
include/bgbcc_auto.h:BCCX_Attr *BCCX_FetchAttr(BCCX_Node *n, char *var);
include/bgbcc_auto.h:BCCX_Attr *BCCX_FetchAttrNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_auto.h:char *BCCX_Get(BCCX_Node *n, char *var);
include/bgbcc_auto.h:char *BCCX_Get_SI(BCCX_Node *n, char *var);
include/bgbcc_auto.h:int BCCX_GetInt(BCCX_Node *n, char *var);
include/bgbcc_auto.h:double BCCX_GetFloat(BCCX_Node *n, char *var);
include/bgbcc_auto.h:char *BCCX_GetNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_auto.h:int BCCX_GetIntNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_auto.h:double BCCX_GetFloatNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_auto.h:void BCCX_Set(BCCX_Node *n, char *var, char *val);
include/bgbcc_auto.h:void BCCX_SetInt(BCCX_Node *n, char *var, int val);
include/bgbcc_auto.h:void BCCX_SetFloat(BCCX_Node *n, char *var, double val);
include/bgbcc_auto.h:void BCCX_SetNS(BCCX_Node *n, char *ns, char *var, char *val);
include/bgbcc_auto.h:void BCCX_SetIntNS(BCCX_Node *n, char *ns, char *var, int val);
include/bgbcc_auto.h:void BCCX_SetFloatNS(BCCX_Node *n, char *ns, char *var, double val);
include/bgbcc_auto.h:char *BCCX_NSURI(BCCX_Node *n, char *ns);
include/bgbcc_auto.h:char *BCCX_URINS(BCCX_Node *n, char *uri);
include/bgbcc_auto.h:char *BCCX_GetURI(BCCX_Node *n, char *uri, char *var);
include/bgbcc_auto.h:int BCCX_GetIntURI(BCCX_Node *n, char *uri, char *var);
include/bgbcc_auto.h:double BCCX_GetFloatURI(BCCX_Node *n, char *uri, char *var);
include/bgbcc_auto.h:void BCCX_SetURI(BCCX_Node *n, char *uri, char *var, char *val);
include/bgbcc_auto.h:void BCCX_SetIntURI(BCCX_Node *n, char *uri, char *var, int val);
include/bgbcc_auto.h:void BCCX_SetFloatURI(BCCX_Node *n, char *uri, char *var, double val);
include/bgbcc_auto.h:BCCX_Node *BCCX_New(char *tag);
include/bgbcc_auto.h:BCCX_Node *BCCX_NewNS(char *ns, char *tag);
include/bgbcc_auto.h:BCCX_Node *BCCX_NewText(char *text);
include/bgbcc_auto.h:void BCCX_Add(BCCX_Node *parent, BCCX_Node *child);
include/bgbcc_auto.h:BCCX_Node *BCCX_AddEnd(BCCX_Node *lst, BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BCCX_AddEnd2(BCCX_Node *fst, BCCX_Node **rlst, BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BCCX_New1(char *tag, BCCX_Node *a);
include/bgbcc_auto.h:BCCX_Node *BCCX_New2(char *tag, BCCX_Node *a, BCCX_Node *b);
include/bgbcc_auto.h:BCCX_Node *BCCX_New3(char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c);
include/bgbcc_auto.h:BCCX_Node *BCCX_New4(char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
include/bgbcc_auto.h:BCCX_Node *BCCX_New1NS(char *ns, char *tag, BCCX_Node *a);
include/bgbcc_auto.h:BCCX_Node *BCCX_New2NS(char *ns, char *tag, BCCX_Node *a, BCCX_Node *b);
include/bgbcc_auto.h:BCCX_Node *BCCX_New3NS(char *ns, char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c);
include/bgbcc_auto.h:BCCX_Node *BCCX_New4NS(char *ns, char *tag,BCCX_Node *a, BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
include/bgbcc_auto.h:int BCCX_NodeP(BCCX_Node *n);
include/bgbcc_auto.h:int BCCX_TextP(BCCX_Node *n);
include/bgbcc_auto.h:int BCCX_LeafP(BCCX_Node *n);
include/bgbcc_auto.h:int BCCX_ChildP(BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BCCX_Next(BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BCCX_Prev(BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BCCX_Parent(BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BCCX_Child(BCCX_Node *n);
include/bgbcc_auto.h:char *BCCX_NS(BCCX_Node *n);
include/bgbcc_auto.h:char *BCCX_URI(BCCX_Node *n);
include/bgbcc_auto.h:char *BCCX_Tag(BCCX_Node *n);
include/bgbcc_auto.h:char *BCCX_Text(BCCX_Node *n);
include/bgbcc_auto.h:void BCCX_SetTag(BCCX_Node *n, char *s);
include/bgbcc_auto.h:int BCCX_TagIsP(BCCX_Node *n, char *str);
include/bgbcc_auto.h:int BCCX_AttrIsP(BCCX_Node *n, char *var, char *val);
include/bgbcc_auto.h:int BCCX_TagAttrIsP(BCCX_Node *n, char *tag, char *var, char *val);
include/bgbcc_auto.h:BCCX_Node *BCCX_FindNextTag(BCCX_Node *last, char *tag);
include/bgbcc_auto.h:BCCX_Node *BCCX_FindNextAttr(BCCX_Node *last, char *var, char *val);
include/bgbcc_auto.h:BCCX_Node *BCCX_FindNextTagAttr(BCCX_Node *last,char *tag, char *var, char *val);
include/bgbcc_auto.h:BCCX_Node *BCCX_FindTag(BCCX_Node *parent, char *tag);
include/bgbcc_auto.h:BCCX_Node *BCCX_FindAttr(BCCX_Node *parent, char *var, char *val);
include/bgbcc_auto.h:BCCX_Node *BCCX_FindTagAttr(BCCX_Node *parent, char *tag, char *var, char *val);
include/bgbcc_auto.h:BCCX_Node *BCCX_Fetch(BCCX_Node *parent, char *tag);
include/bgbcc_auto.h:BCCX_Node *BCCX_Clone(BCCX_Node *n);
include/bgbcc_auto.h:BCCX_Node *BCCX_CloneList(BCCX_Node *n);
include/bgbcc_auto.h:void BCCX_Unlink(BCCX_Node *n);
include/bgbcc_auto.h:char *BCCX_PrintText(char *s, char *t);
include/bgbcc_auto.h:void BCCX_PrintBufSpecial(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbcc_auto.h:void BCCX_PrintBuf(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbcc_auto.h:void BCCX_DumpFD(FILE *fd, BCCX_Node *node);
include/bgbcc_auto.h:void BCCX_PrintFD(FILE *fd, BCCX_Node *node);
include/bgbcc_auto.h:char *BCCX_DumpStr(char *buf, BCCX_Node *node);
include/bgbcc_auto.h:char *BCCX_PrintStr(char *buf, BCCX_Node *node);
include/bgbcc_auto.h:void BCCX_Print(BCCX_Node *node);
include/bgbcc_auto.h:BCCX_ReadStream BCCX_NewReadStreamBuf(char *buf);
include/bgbcc_auto.h:BCCX_ReadPos BCCX_GetPos(BCCX_ReadStream strm);
include/bgbcc_auto.h:void BCCX_SetPos(BCCX_ReadStream strm, BCCX_ReadPos pos);
include/bgbcc_auto.h:int BCCX_PeekChar(BCCX_ReadStream strm);
include/bgbcc_auto.h:int BCCX_ReadChar(BCCX_ReadStream strm);
include/bgbcc_auto.h:int BCCX_PeekCharIdx(BCCX_ReadStream strm, int idx);
include/bgbcc_auto.h:int BCCX_ParseEatWhite(BCCX_ReadStream strm);
include/bgbcc_auto.h:int BCCX_ParseSpecialP(BCCX_ReadStream strm);
include/bgbcc_auto.h:int BCCX_ParseContSpecialP(BCCX_ReadStream strm);
include/bgbcc_auto.h:char *BCCX_ParseToken(BCCX_ReadStream strm, int *ty);
include/bgbcc_auto.h:char *BCCX_PeekToken(BCCX_ReadStream strm, int *ty);
include/bgbcc_auto.h:char *BCCX_ParseText(BCCX_ReadStream strm);
include/bgbcc_auto.h:BCCX_Attr *BCCX_ParseOpts(BCCX_ReadStream strm);
include/bgbcc_auto.h:BCCX_Node *BCCX_ParseTag(BCCX_ReadStream strm, int *rgrp);
include/bgbcc_auto.h:BCCX_Node *BCCX_ParseExprR(BCCX_ReadStream strm, int *rgrp);
include/bgbcc_auto.h:BCCX_Node *BCCX_ParseExpr(BCCX_ReadStream strm);
include/bgbcc_auto.h:BCCX_Node *BCCX_ParseExprStr(char *str);
include/bgbcc_auto.h:void *sbxe_malloc(int sz);
include/bgbcc_auto.h:void *sbxe_tmalloc(char *ty, int sz);
include/bgbcc_auto.h:void sbxe_free(void *ptr);
include/bgbcc_auto.h:int SBXE_WriteNodeList(byte *buf, BCCX_Node *expr);
include/bgbcc_auto.h:BCCX_Node *SBXE_ReadNodeList(byte *buf);
include/bgbcc_auto.h:void BGBCC_DieError();
include/bgbcc_auto.h:void BGBCC_DieFatal();
include/bgbcc_auto.h:void BGBCC_CleanupAll();
include/bgbcc_auto.h:void *bgbcc_tmalloc(char *ty, int sz);
include/bgbcc_auto.h:void *bgbcc_malloc(int sz);
include/bgbcc_auto.h:void *bgbcc_tmalloc2(char *ty, int sz);
include/bgbcc_auto.h:void *bgbcc_malloc2(int sz);
include/bgbcc_auto.h:void bgbcc_free(void *p);
include/bgbcc_auto.h:char *bgbcc_strdup(char *str);
include/bgbcc_auto.h:int bgbcc_strdup_i(char *str);
include/bgbcc_auto.h:char *bgbcc_strtab_i(int i);
include/bgbcc_auto.h:char *bgbcc_strdup(char *str);
include/bgbcc_auto.h:void *bgbcc_ralloc(int sz);
include/bgbcc_auto.h:char *bgbcc_rstrdup(char *s);
include/bgbcc_auto.h:char **bgbcc_split(char *s);
include/bgbcc_auto.h:char *bgbcc_rstradd(char *s0, char *s1);
include/bgbcc_auto.h:char *bgbcc_rstradd2(char *s0, char *s1, char *s2);
include/bgbcc_auto.h:char *bgbcc_rstradd3(char *s0, char *s1, char *s2, char *s3);
include/bgbcc_auto.h:void *bgbcc_neword(char **tab);
include/bgbcc_auto.h:int bgbcc_strord(char *str, void *tab);
include/bgbcc_auto.h:int BGBCC_GetOrdinal(char *str);
include/bgbcc_auto.h:int BGBCC_CheckOrdinalFlag(int i, int ty);
include/bgbcc_auto.h:int BGBCC_GetOrdinalLang(char *str, int lang);
include/bgbcc_auto.h:int BGBCC_GetOrdinalLangType(char *str, int lang, int ty);
include/bgbcc_auto.h:double BGBCC_ParseNumber(char *str);
include/bgbcc_auto.h:void BCCX_DumpVF(void *fd, BCCX_Node *node);
include/bgbcc_auto.h:void BCCX_PrintVF(void *fd, BCCX_Node *node);
include/bgbcc_auto.h:int BGBCC_BindSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_auto.h:int BGBCC_BindTypeSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_auto.h:int BGBCC_BindVarSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_auto.h:int BGBCC_BindVarInfo(BGBCC_State *ctx, char *name, char *key, char *val);
include/bgbcc_auto.h:int BGBCC_BindTypeInfo(BGBCC_State *ctx, char *name, char *key, char *val);
include/bgbcc_auto.h:int BGBCC_BindDyTypeSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_auto.h:char *BGBCP_LookupSig(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:char *BGBCP_LookupTypeSig(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:int BGBCC_BindStructSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_auto.h:int BGBCC_BindStructInfo(BGBCC_State *ctx, char *name, char *key, char *val);
include/bgbcc_auto.h:int BGBCC_BindStructInfoIdx(BGBCC_State *ctx,char *name, char *key, int idx, char *val);
include/bgbcc_auto.h:int BGBCC_BindFieldSig(BGBCC_State *ctx, char *cls, char *name, char *sig);
include/bgbcc_auto.h:int BGBCC_BindFieldInfo(BGBCC_State *ctx,char *cls, char *name, char *key, char *val);
include/bgbcc_auto.h:int BGBCC_BindStructInfoI(BGBCC_State *ctx,char *name, char *key, int val);
include/bgbcc_auto.h:int BGBCC_BindFieldInfoI(BGBCC_State *ctx,char *cls, char *name, char *key, int val);
include/bgbcc_auto.h:char *BGBCP_LookupPPKey(BGBCP_ParseState *ctx, char *name);
include/bgbcc_auto.h:int BGBCC_BindPPKey(BGBCP_ParseState *ctx, char *name, char *sig);
include/bgbcc_auto.h:int BGBCC_StoreTextFile(char *name, char *buf);
include/bgbcc_auto.h:int BGBCC_GetArch();
include/bgbcc_auto.h:char *bgbcc_loadfile(char *name, int *rsz);
include/bgbcc_auto.h:char *BGBCC_ReadFile(char *name, int *rsz);
include/bgbcc_auto.h:int BGBCC_LoadCSourceBuffer(char *name, char *buf);
include/bgbcc_auto.h:int BGBCC_LoadCSource(char *name, char *out);
include/bgbcc_auto.h:int BGBCC_LoadCHeader(char *name);
include/bgbcc_auto.h:int BGBCC_LoadLibrary(char *name);
include/bgbcc_auto.h:int BGBCC_LoadLibrary2(char *name);
include/bgbcc_auto.h:int BGBCC_LoadLibraryGeneric(char *name);
include/bgbcc_auto.h:int BGBCC_LoadModule(char *name);
include/bgbcc_auto.h:int BGBCC_LoadModuleMulti(char *name, char **arg);
include/bgbcc_auto.h:int BGBCC_CompileFile(char *name, char *out);
include/bgbcc_auto.h:int BGBCC_LoadCompileScript(char *name);
include/bgbcc_auto.h:int BGBCC_InitEnv(int argc, char **argv, char **env);
include/bgbcc_auto.h:int BGBCC_Init();
include/bgbcc_auto.h:int BGBCC_InitEnv(int argc, char **argv, char **env);
include/bgbcc_auto.h:int BGBCC_Init();
include/bgbcc_auto.h:BGBCC_API void ccBindKey(char *key, char *val);
include/bgbcc_auto.h:BGBCC_API char *ccLookupKey(char *key);
include/bgbcc_auto.h:BGBCC_API void ccAddInclude(char *path);
include/bgbcc_auto.h:BGBCC_API void ccAddLibrary(char *path);
include/bgbcc_auto.h:BGBCC_API void ccAddSource(char *path);
include/bgbcc_auto.h:void ccAddDefineString(char *str);
include/bgbcc_auto.h:BGBCC_API int ccLoadModule(char *file);
include/bgbcc_auto.h:BGBCC_API int ccLoadModuleMulti(char *name, char **args);
include/bgbcc_auto.h:BGBCC_API int ccCompileModule(char *file, char *out);
include/bgbcc_auto.h:BGBCC_API int ccLoadLibrary(char *name);
include/bgbcc_auto.h:BGBCC_API int ccPrecompileModule(char *file);
include/bgbcc_auto.h:BGBCC_API int ccLoadCompilerScript(char *file);
include/bgbcc_auto.h:BGBCC_API int ccSubmitCSource(char *name, char *buf);
include/bgbcc_auto.h:BGBCC_API void *ccGetAddr(char *sym);
include/bgbcc_auto.h:BGBCC_API void ccSetAddr(char *sym, void *ptr);
include/bgbcc_auto.h:BGBCC_API void *ccGetPtr(char *sym);
include/bgbcc_auto.h:BGBCC_API void ccSetPtr(char *sym, void *v);
include/bgbcc_auto.h:BGBCC_API int ccGetInt(char *sym);
include/bgbcc_auto.h:BGBCC_API void ccSetInt(char *sym, int v);
include/bgbcc_auto.h:BGBCC_API s64 ccGetLongLong(char *sym);
include/bgbcc_auto.h:BGBCC_API void ccSetLongLong(char *sym, s64 v);
include/bgbcc_auto.h:BGBCC_API float ccGetFloat(char *sym);
include/bgbcc_auto.h:BGBCC_API void ccSetFloat(char *sym, float v);
include/bgbcc_auto.h:BGBCC_API double ccGetDouble(char *sym);
include/bgbcc_auto.h:BGBCC_API void ccSetDouble(char *sym, double v);
include/bgbcc_auto.h:void BGBCC_LoadCache();
include/bgbcc_auto.h:void BGBCC_StoreCache();
include/bgbcc_auto.h:int BGBCC_CacheAllocNode();
include/bgbcc_auto.h:int BGBCC_CacheLookupFile(char *name);
include/bgbcc_auto.h:int BGBCC_CacheGetFile(char *name);
include/bgbcc_auto.h:int BGBCC_CacheCheckDepNodes(int node);
include/bgbcc_auto.h:int BGBCC_CacheUpdateDepNodes(int node);
include/bgbcc_auto.h:int BGBCC_CacheCheckFile(char *name);
include/bgbcc_auto.h:int BGBCC_UpdateCheckFile(char *name);
include/bgbcc_xml.h:void (*prints_f)(void *buf, char *str);
include/bgbcc_xml.h:void *(*get_pos_f)(BCCX_ReadStream strm);
include/bgbcc_xml.h:void (*set_pos_f)(BCCX_ReadStream strm, void *pos);
include/bgbcc_xml.h:int (*peek_char_f)(BCCX_ReadStream strm);
include/bgbcc_xml.h:int (*read_char_f)(BCCX_ReadStream strm);
include/bgbcc_xml.h:int (*peek_idx_f)(BCCX_ReadStream strm, int idx);
include/bgbdy.h:// #define gcSet(pp, p)	BGBGC_CollectAssign((void **)(&(pp)), p);
include/bgbdy_auto.h:BGBDY_API u64 bgbrng_rdtsc();
include/bgbdy_auto.h:BGBDY_API u64 bgbrng_rdtsc();
include/bgbdy_auto.h:BGBDY_API u64 bgbrng_rdtsc();
include/bgbdy_auto.h:BGBDY_API u64 bgbrng_rdtsc();
include/bgbdy_auto.h:BGBDY_API u64 bgbrng_rdtsc();
include/bgbdy_auto.h:BGBDY_API u32 bgbrng_genvalue();
include/bgbdy_auto.h:BGBDY_API u64 bgbrng_genvalue64();
include/bgbdy_auto.h:BGBDY_API u32 bgbrng_genvalue_fast();
include/bgbdy_auto.h:BGBDY_API int bgbrng_rand(iv128_t *a);
include/bgbdy_auto.h:BGBDY_API double bgbrng_randf();
include/bgbdy_auto.h:BGBDY_API double bgbrng_randg();
include/bgbdy_auto.h:BGBDY_API float bgbrng_ssqrt(float f);
include/bgbdy_auto.h:BGBDY_API float bgbrng_ssqr(float f);
include/bgbdy_auto.h:BGBDY_API float bgbrng_nfrand();
include/bgbdy_auto.h:BGBDY_API float bgbrng_sfrand();
include/bgbdy_auto.h:BGBDY_API float bgbrng_sqrrand();
include/bgbdy_auto.h:BGBDY_API float bgbrng_ssqrrand();
include/bgbdy_auto.h:BGBDY_API float bgbrng_logrand();
include/bgbdy_auto.h:BGBDY_API void bgbrng_ciph0_swap(byte *map, int i, int j);
include/bgbdy_auto.h:BGBDY_API void bgbrng_ciph0_swap2(byte *map, byte *imap, int i, int j);
include/bgbdy_auto.h:BGBDY_API int bgbrng_ciph0_kindex(iv128_t *key);
include/bgbdy_auto.h:BGBDY_API void bgbrng_ciph0_enc(byte *ibuf, byte *obuf, int sz,iv128_t *key);
include/bgbdy_auto.h:BGBDY_API void bgbrng_ciph0_dec(byte *ibuf, byte *obuf, int sz,iv128_t *key);
include/bgbdy_auto.h:BGBDY_API iv128_t bgbrng_ciph0_genkey(char *str);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_mk4(u32 a, u32 b, u32 c, u32 d);
include/bgbdy_auto.h:BGBDY_API iv128_t atoxl_iv(char *str);
include/bgbdy_auto.h:BGBDY_API char *xltoa_iv(iv128_t val);
include/bgbdy_auto.h:BGBDY_API void iv128_zero(iv128_t *val);
include/bgbdy_auto.h:BGBDY_API void iv256_zero(iv256_t *val);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_neg(iv128_t val);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_shl(iv128_t a, int b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_shr(iv128_t a, int b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_sar(iv128_t a, int b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_rol(iv128_t a, int b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_ror(iv128_t a, int b);
include/bgbdy_auto.h:BGBDY_API int iv128_cmp_eq(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API int iv128_cmp_g(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API int iv128_cmp_ge(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API int iv128_cmp_l(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API int iv128_cmp_le(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_add(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_sub(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_mul(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_mulh(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv256_t iv128_mulw(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_udiv(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_div(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_umod(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv128_t iv128_mod(iv128_t a, iv128_t b);
include/bgbdy_auto.h:BGBDY_API iv256_t iv256_neg(iv256_t val);
include/bgbdy_auto.h:BGBDY_API iv256_t iv256_shl(iv256_t a, int b);
include/bgbdy_auto.h:BGBDY_API iv256_t iv256_shr(iv256_t a, int b);
include/bgbdy_auto.h:BGBDY_API int iv256_cmp_eq(iv256_t a, iv256_t b);
include/bgbdy_auto.h:BGBDY_API int iv256_cmp_g(iv256_t a, iv256_t b);
include/bgbdy_auto.h:BGBDY_API int iv256_cmp_ge(iv256_t a, iv256_t b);
include/bgbdy_auto.h:BGBDY_API int iv256_cmp_l(iv256_t a, iv256_t b);
include/bgbdy_auto.h:BGBDY_API int iv256_cmp_le(iv256_t a, iv256_t b);
include/bgbdy_auto.h:BGBDY_API iv256_t iv256_add(iv256_t a, iv256_t b);
include/bgbdy_auto.h:BGBDY_API iv256_t iv256_sub(iv256_t a, iv256_t b);
include/bgbdy_auto.h:BGBDY_API int vfread(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfwrite(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfgetc(VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfputc(int c, VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfflush(VFILE *fd);
include/bgbdy_auto.h:BGBDY_API vfoffs_t vfseek(VFILE *fd, vfoffs_t pos, int rel);
include/bgbdy_auto.h:BGBDY_API vfoffs_t vftell(VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfeof(VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfclose(VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfioctl(VFILE *fd, int req, void *arg);
include/bgbdy_auto.h:BGBDY_API int vfioctl2(VFILE *fd, int req, void *arg0, void *arg1);
include/bgbdy_auto.h:BGBDY_API int vfioctl3(VFILE *fd, int req, void *arg0, void *arg1, void *arg2);
include/bgbdy_auto.h:BGBDY_API char *vfgets(char *s, int n, VFILE *fd);
include/bgbdy_auto.h:BGBDY_API int vfputs(char *str, VFILE *fd);
include/bgbdy_auto.h:BGBDY_API void vf_register(VFILE_Interface *iface);
include/bgbdy_auto.h:BGBDY_API void vf_register_fs(VFILE_Mount_Interface *iface);
include/bgbdy_auto.h:BGBDY_API VFILE *vf_new();
include/bgbdy_auto.h:BGBDY_API void vf_destroy(VFILE *fd);
include/bgbdy_auto.h:BGBDY_API VFILE_Mount *vf_new_mount();
include/bgbdy_auto.h:BGBDY_API VFILE *vffopen(char *name, char *mode);
include/bgbdy_auto.h:BGBDY_API void vf_mount(char *src, char *dst, char *fs, char **ops);
include/bgbdy_auto.h:BGBDY_API void vf_umount(char *name);
include/bgbdy_auto.h:BGBDY_API VFDIR *vfopendir(char *name);
include/bgbdy_auto.h:BGBDY_API void vfclosedir(VFDIR *dir);
include/bgbdy_auto.h:BGBDY_API char *vfreaddir(VFDIR *dir);
include/bgbdy_auto.h:BGBDY_API void vfrewinddir(VFDIR *dir);
include/bgbdy_auto.h:BGBDY_API int vfstatflags(char *name);
include/bgbdy_auto.h:BGBDY_API char *vfgenabs(char *base, char *name);
include/bgbdy_auto.h:BGBDY_API char *vfgetext(char *name);
include/bgbdy_auto.h:BGBDY_API int vfcmpext(char *str, char *ext);
include/bgbdy_auto.h:BGBDY_API byte *vf_bufferin(VFILE *fd);
include/bgbdy_auto.h:BGBDY_API byte *vf_bufferin_sz(VFILE *fd, int *rsz);
include/bgbdy_auto.h:BGBDY_API void vfprint(VFILE *fd, char *str, ...);
include/bgbdy_auto.h:BGBDY_API int vfDeflateBuffer(byte *obuf, byte *ibuf, int osz, int isz);
include/bgbdy_auto.h:BGBDY_API int vfDeflateBuffer64(byte *obuf, byte *ibuf, int osz, int isz);
include/bgbdy_auto.h:BGBDY_API int vfDeflateBufferLvl(byte *obuf, byte *ibuf, int osz, int isz, int lvl);
include/bgbdy_auto.h:BGBDY_API int vfInflateBuffer(byte *obuf, byte *ibuf, int osz, int isz);
include/bgbdy_auto.h:BGBDY_API void *vfGetEnv();
include/bgbdy_auto.h:BGBDY_API VFILE *vfdir_wrapfd(FILE *fd);
include/bgbdy_auto.h:BGBDY_API void *BGBDY_WrapIntFast(int i);
include/bgbdy_auto.h:BGBDY_API int BGBDY_UnwrapIntFast(void *a);
include/bgbdy_auto.h:BGBDY_API void *BGBDY_WrapMiniFloat(double f);
include/bgbdy_auto.h:BGBDY_API double BGBDY_UnwrapMiniFloat(void *p);
include/bgbdy_auto.h:BGBDY_API void *BGBDY_WrapMiniFloat(double f);
include/bgbdy_auto.h:BGBDY_API double BGBDY_UnwrapMiniFloat(void *p);
include/bgbdy_auto.h:BGBDY_API dyt dyRawFunc(char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API dyt dyRawClose(char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API dyt dyRawMethod(char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API dyt dyRawMethodData(char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API dyt dyRawStaticMethod(char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API dyt dyRawStaticMethodData(char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API char *dyllGenSym();
include/bgbdy_auto.h:BGBDY_API dyt dyRawFunc(char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API dyt dyRawClose(char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API dyt dyRawMethod(char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API dyt dyRawMethodData(char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API int dyRawFuncP(dyt obj);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyCallSig(BGBGC_RawFunc *inf, void *buf);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyRawFuncD(BGBGC_RawFunc *inf, dyt obj, dyt *args, int nargs);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyRawFuncV(BGBGC_RawFunc *inf, dyt obj, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyRawFuncU(BGBGC_RawFunc *inf, dyt obj, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyObjRawFuncV(BGBGC_RawFunc *inf,dycObject obj, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyObjRawFuncU(BGBGC_RawFunc *inf,dycObject obj, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API int dyllSigQuickSize(char *sig);
include/bgbdy_auto.h:BGBDY_API int dyllSigAlignSize(char *sig);
include/bgbdy_auto.h:BGBDY_API char *dyllSigSizeAlign(char *sig, int *rsz, int *ral);
include/bgbdy_auto.h:BGBDY_API char *dyllSigNext(char *sig);
include/bgbdy_auto.h:BGBDY_API int dyllSigSizeListEsig(char *sig, char **esig, int *algn);
include/bgbdy_auto.h:BGBDY_API int dyllSigSizeList(char *sig);
include/bgbdy_auto.h:BGBDY_API dyt dyllExtractVariantBufferSig(char *esig, byte *buf);
include/bgbdy_auto.h:BGBDY_API dyt dyllGetVarSig(void *p, char *sig);
include/bgbdy_auto.h:BGBDY_API void dyllSetVarSig(void *var, char *sig, dyt val);
include/bgbdy_auto.h:BGBDY_API s64 dyllSigGetPtrS64(char *sig, void *ptr);
include/bgbdy_auto.h:BGBDY_API double dyllSigGetPtrDouble(char *sig, void *ptr);
include/bgbdy_auto.h:BGBDY_API void dyllSigSetPtrS64(char *sig, void *ptr, s64 val);
include/bgbdy_auto.h:BGBDY_API void dyllSigSetPtrDouble(char *sig, void *ptr, double val);
include/bgbdy_auto.h:BGBDY_API s64 dyllExtractLongBufferSig(char *esig, byte *buf);
include/bgbdy_auto.h:BGBDY_API double dyllExtractRealBufferSig(char *esig, byte *buf);
include/bgbdy_auto.h:BGBDY_API char *dyllSigFromPtr(dyt ref);
include/bgbdy_auto.h:BGBDY_API int dyllSigCheckName(char *sig, char *str);
include/bgbdy_auto.h:BGBDY_API int dyllSigCheckSigEqP(char *siga, char *sigb);
include/bgbdy_auto.h:BGBDY_API char *dyllSigRet(char *sig);
include/bgbdy_auto.h:BGBDY_API int dyllCheckCallArg(char *fsig, char *sig);
include/bgbdy_auto.h:BGBDY_API int dyllCheckCallSig(char *fsig, char *sig);
include/bgbdy_auto.h:BGBDY_API int dyllUnpackArgsSigArray(char *sig, va_list lst, dyt *arr);
include/bgbdy_auto.h:BGBDY_API int dyllUnpackUArgsSigArray(char *sig, void **args, dyt *arr);
include/bgbdy_auto.h:BGBDY_API int dyllUnpackArgsSigUArgs(char *sig, va_list lst, void **arr);
include/bgbdy_auto.h:BGBDY_API int dyllGetSigUArgsSize(char *sig);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigArray(char *sig, char **esig, byte *buf, dyt *arr, int nargs);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigArray(char *sig, char **esig, byte *buf, dyt *arr, int nargs);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigArgs(char *dsig, char **esig, byte *buf,char *ssig, va_list lst);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigArgs(char *dsig, char **esig, byte *buf,char *ssig, va_list lst);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigV(char *sig, byte *buf, va_list lst);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigV(char *sig, byte *buf, va_list lst);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigU(char *sig, byte *buf, void **args);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigU(char *sig, byte *buf, void **args);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigUArgs(char *dsig, char **esig, byte *buf,char *ssig, void **args);
include/bgbdy_auto.h:BGBDY_API int dyllRepackBufSigUArgs(char *dsig, char **esig, byte *buf,char *ssig, void **args);
include/bgbdy_auto.h:BGBDY_API char *dyllFlagSigNextFlag(char *sig);
include/bgbdy_auto.h:BGBDY_API s64 dyllFlagSigPeekFlag(char *sig);
include/bgbdy_auto.h:BGBDY_API s64 dyllFlagSigReadFlag(char **rsig);
include/bgbdy_auto.h:BGBDY_API s64 dyllDecodeFlagSig(char *sig);
include/bgbdy_auto.h:BGBDY_API char *dyllEncodeFlagSig(s64 fl);
include/bgbdy_auto.h:BGBDY_API int BGBGC_InitDyLL();
include/bgbdy_auto.h:BGBDY_API char *dyllString(char *sym);
include/bgbdy_auto.h:BGBDY_API void *dyllGetAddr(char *sym);
include/bgbdy_auto.h:BGBDY_API void *dyllGetProcAddress(dyt lib, char *sym);
include/bgbdy_auto.h:BGBDY_API char *dyllGetAddrName(void *ptr);
include/bgbdy_auto.h:BGBDY_API void dyllSetAddr(char *sym, void *ptr);
include/bgbdy_auto.h:BGBDY_API void *dyllGetPtr(char *sym);
include/bgbdy_auto.h:BGBDY_API void dyllSetPtr(char *sym, void *v);
include/bgbdy_auto.h:BGBDY_API int dyllGetInt(char *sym);
include/bgbdy_auto.h:BGBDY_API void dyllSetInt(char *sym, int v);
include/bgbdy_auto.h:BGBDY_API s64 dyllGetLong(char *sym);
include/bgbdy_auto.h:BGBDY_API void dyllSetLong(char *sym, s64 v);
include/bgbdy_auto.h:BGBDY_API float dyllGetFloat(char *sym);
include/bgbdy_auto.h:BGBDY_API void dyllSetFloat(char *sym, float v);
include/bgbdy_auto.h:BGBDY_API double dyllGetDouble(char *sym);
include/bgbdy_auto.h:BGBDY_API void dyllSetDouble(char *sym, double v);
include/bgbdy_auto.h:BGBDY_API dyt dyllGetDynamic(char *sym);
include/bgbdy_auto.h:BGBDY_API void dyllSetDynamic(char *sym, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dyllNewEnv(dyt super);
include/bgbdy_auto.h:BGBDY_API void dyllEnvBindAddr(dyt env, char *name, void *addr);
include/bgbdy_auto.h:BGBDY_API void dyllEnvBindAddrSig(dyt env, char *name, char *sig, void *addr);
include/bgbdy_auto.h:BGBDY_API void dyllEnvSetAddr(dyt env, char *name, void *addr);
include/bgbdy_auto.h:BGBDY_API void *dyllEnvGetAddr(dyt env, char *name);
include/bgbdy_auto.h:BGBDY_API char *dyllEnvGetSig(dyt env, char *name);
include/bgbdy_auto.h:BGBDY_API void *dyllEnvAllocVar(dyt env, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API dyt dyllThunkEnv(dyt fcn);
include/bgbdy_auto.h:BGBDY_API void dyllThunkBindAddr(dyt fcn, char *name, void *addr);
include/bgbdy_auto.h:BGBDY_API void dyllThunkBindAddrSig(dyt fcn, char *name, char *sig, void *addr);
include/bgbdy_auto.h:BGBDY_API void dyllThunkSetAddr(dyt fcn, char *name, void *addr);
include/bgbdy_auto.h:BGBDY_API void *dyllThunkGetAddr(dyt fcn, char *name);
include/bgbdy_auto.h:BGBDY_API char *dyllThunkGetSig(dyt fcn, char *name);
include/bgbdy_auto.h:BGBDY_API dyt dyllAsmThunk(char *buf);
include/bgbdy_auto.h:BGBDY_API dyt dyllAsmThunkEnv(char *buf, dyt env);
include/bgbdy_auto.h:BGBDY_API dyt dyllAsmThunkSuperEnv(char *buf, dyt senv);
include/bgbdy_auto.h:BGBDY_API dyt dyllAsmThunkInline(char *buf);
include/bgbdy_auto.h:BGBDY_API dyt dyllAsmThunkInlineEnv(char *buf, dyt env);
include/bgbdy_auto.h:BGBDY_API dyt dyllAsmThunkInlineSuperEnv(char *buf, dyt senv);
include/bgbdy_auto.h:BGBDY_API void dyllAsmBegin();
include/bgbdy_auto.h:BGBDY_API void *dyllAsmEnd();
include/bgbdy_auto.h:BGBDY_API void dyllAsmBeginThunkInline();
include/bgbdy_auto.h:BGBDY_API void *dyllAsmEndThunkInline();
include/bgbdy_auto.h:BGBDY_API void dyllAsmPuts(char *str);
include/bgbdy_auto.h:BGBDY_API void dyllAsmPrintv(char *str, va_list lst);
include/bgbdy_auto.h:BGBDY_API void dyllAsmPrint(char *str, ...);
include/bgbdy_auto.h:BGBDY_API int dyllAsmRegisterLinkMeta(char *name,void *(*fcn)(char *sym, char *name, char **args));
include/bgbdy_auto.h:BGBDY_API int dyllAsmRegisterLinkNotify(char *name,void (*fcn)(char *sym, char *name, char **args, void *ptr));
include/bgbdy_auto.h:BGBDY_API char *dyllComposeLinkMetaName(char *name, char **args);
include/bgbdy_auto.h:BGBDY_API char *dyllComposeLinkNotifyName(char *name, char **args);
include/bgbdy_auto.h:BGBDY_API char *dyllComposeLinkMetaName0(char *name);
include/bgbdy_auto.h:BGBDY_API char *dyllComposeLinkMetaName1(char *name, char *ar0);
include/bgbdy_auto.h:BGBDY_API char *dyllComposeLinkMetaName2(char *name, char *ar0, char *ar1);
include/bgbdy_auto.h:BGBDY_API char *dyllComposeLinkMetaName3(char *name, char *ar0, char *ar1, char *ar2);
include/bgbdy_auto.h:BGBDY_API char *dyllComposeLinkMetaName4(char *name,char *ar0, char *ar1, char *ar2, char *ar3);
include/bgbdy_auto.h:BGBDY_API char *dyllGetAddrSig(void *fcn);
include/bgbdy_auto.h:BGBDY_API char *dyllGetNameSig(char *name);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrV(void *fcn, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrU(void *fcn, void **args);
include/bgbdy_auto.h:BGBDY_API int dyllApplyPtrVi(void *fcn, va_list lst);
include/bgbdy_auto.h:BGBDY_API s64 dyllApplyPtrVl(void *fcn, va_list lst);
include/bgbdy_auto.h:BGBDY_API float dyllApplyPtrVf(void *fcn, va_list lst);
include/bgbdy_auto.h:BGBDY_API double dyllApplyPtrVd(void *fcn, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrVp(void *fcn, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrObjV(void *fcn, void *obj, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrObjU(void *fcn, void *obj, void **args);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrSigV(void *fcn, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrSigU(void *fcn, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API int dyllApplyPtrSigVi(void *fcn, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API s64 dyllApplyPtrSigVl(void *fcn, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API float dyllApplyPtrSigVf(void *fcn, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API double dyllApplyPtrSigVd(void *fcn, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrSigVp(void *fcn, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrSigObjV(void *fcn, char *sig,void *obj, va_list lst);
include/bgbdy_auto.h:BGBDY_API void *dyllApplyPtrSigObjU(void *fcn, char *sig,void *obj, void **args);
include/bgbdy_auto.h:BGBDY_API void *dyllWrapClosure(void *fcn, void *data, char *sig);
include/bgbdy_auto.h:BGBDY_API dyt dyllGetFuncAddrObj(char *name);
include/bgbdy_auto.h:BGBDY_API int dyllLoadLibrary(char *name);
include/bgbdy_auto.h:BGBDY_API void dyllMetaInit();
include/bgbdy_auto.h:BGBDY_API void dyllMetaCommit();
include/bgbdy_auto.h:BGBDY_API int dyllMetaLoadDB(char *name);
include/bgbdy_auto.h:BGBDY_API int dyllMetaSaveDB(char *name);
include/bgbdy_auto.h:BGBDY_API void dyllMetaBindKey(char *key, char *val);
include/bgbdy_auto.h:BGBDY_API char *dyllMetaLookupKey(char *key);
include/bgbdy_auto.h:BGBDY_API dyllException dyllBeginUnwind();
include/bgbdy_auto.h:BGBDY_API void dyllEndUnwind(dyllException ctx);
include/bgbdy_auto.h:BGBDY_API void dyllUnwindNext(dyllException ctx);
include/bgbdy_auto.h:BGBDY_API dyt dyllUnwindObj(dyllException ctx);
include/bgbdy_auto.h:BGBDY_API void dyllDoUnwind(dyt obj);
include/bgbdy_auto.h:BGBDY_API void dyllThrowObj(dyt obj);
include/bgbdy_auto.h:BGBDY_API void dyllThrowName(char *str);
include/bgbdy_auto.h:BGBDY_API void dyllThrowClass(char *str);
include/bgbdy_auto.h:BGBDY_API void dyllThrow(char *str);
include/bgbdy_auto.h:BGBDY_API int dyllCatchP(dyllException ctx, char *str);
include/bgbdy_auto.h:BGBDY_API void dyllTryCatchFl(void (*fcnTry)(void *data), int (*fcnCatch)(dyllException ex, void *data), void *data, int fl);
include/bgbdy_auto.h:BGBDY_API void dyllTryCatch(void (*fcnTry)(void *data), int (*fcnCatch)(dyllException ex, void *data), void *data);
include/bgbdy_auto.h:BGBDY_API void dyllTry(void (*fcnTry)(void *data), void *data);
include/bgbdy_auto.h:BGBDY_API dyt dyllTypeboxSig(char *str);
include/bgbdy_auto.h:BGBDY_API int dyllTypeboxSigP(dyt obj);
include/bgbdy_auto.h:BGBDY_API char *dyllTypeboxSigV(dyt obj);
include/bgbdy_auto.h:BGBDY_API dyt dyllTypeboxSigFromRef(dyt ref);
include/bgbdy_auto.h:BGBDY_API int dyllTypeboxSigIsStrP(dyt obj, char *str);
include/bgbdy_auto.h:BGBDY_API int dyllTypeboxSigEqP(dyt obja, dyt objb);
include/bgbdy_auto.h:BGBDY_API dyt dyllTypeboxVal(char *str, void *ptr);
include/bgbdy_auto.h:BGBDY_API int dyllTypeboxValP(dyt obj);
include/bgbdy_auto.h:BGBDY_API char *dyllTypeboxValSig(dyt obj);
include/bgbdy_auto.h:BGBDY_API void *dyllTypeboxValData(dyt obj);
include/bgbdy_auto.h:BGBDY_API int dyllTypeboxValSize(dyt obj);
include/bgbdy_auto.h:BGBDY_API dyt dyllTypeboxPtr(char *str, void *ptr);
include/bgbdy_auto.h:BGBDY_API int dyllTypeboxPtrP(dyt obj);
include/bgbdy_auto.h:BGBDY_API char *dyllTypeboxPtrSig(dyt obj);
include/bgbdy_auto.h:BGBDY_API void *dyllTypeboxPtrData(dyt obj);
include/bgbdy_auto.h:BGBDY_API char *dyllTypeGetMetaPacksig(char *name);
include/bgbdy_auto.h:BGBDY_API dyt dyllNewCTop(char *name, char *prefix);
include/bgbdy_auto.h:BGBDY_API dyt dyllCTopGet(dyt ctop, char *name);
include/bgbdy_auto.h:BGBDY_API int DYLL_MRBC2_EvalVoid(char *str);
include/bgbdy_auto.h:BGBDY_API void *DYLL_MRBC2_EvalPVoid(char *str);
include/bgbdy_auto.h:BGBDY_API int DYLL_MRBC2_EvalInt(char *str);
include/bgbdy_auto.h:BGBDY_API double DYLL_MRBC2_EvalFloat(char *str);
include/bgbdy_auto.h:BGBDY_API void *dycJniGetJvmtiEnv();
include/bgbdy_auto.h:BGBDY_API void *dyllGetIface();
include/bgbdy_auto.h:BGBDY_API void *dyllGetObject(char *name);
include/bgbdy_auto.h:BGBDY_API void dyllSetObject(char *name, void *value);
include/bgbdy_auto.h:BGBDY_API int dyllSqlErrno();
include/bgbdy_auto.h:BGBDY_API char *dyllSqlErrStr();
include/bgbdy_auto.h:BGBDY_API BGBDYC_RDB *dyllSqlOpenDB(char *name);
include/bgbdy_auto.h:BGBDY_API BGBDYC_RDB *dyllSqlOpenTempDB(char *name);
include/bgbdy_auto.h:BGBDY_API void dyllSqlCloseDB(BGBDYC_RDB *db);
include/bgbdy_auto.h:BGBDY_API int dyllSqlExec(BGBDYC_RDB *db, char *cmd);
include/bgbdy_auto.h:BGBDY_API int dyllSqlExecQuery(BGBDYC_RDB *db, char *cmd,int (*fcn)(void *data, int argc, char **argv, char **colName), void *data);
include/bgbdy_auto.h:BGBDY_API int dyllSqlExecQueryTab(BGBDYC_RDB *db, char *cmd,char ***rtab, int *rncol, int *rnrow, void *data);
include/bgbdy_auto.h:BGBDY_API int dyllSqlExecFreeTab(BGBDYC_RDB *db, char **tab);
include/bgbdy_auto.h:BGBDY_API BGBDYC_RDBTable *dyllSqlExecQueryTable(BGBDYC_RDB *db, char *cmd);
include/bgbdy_auto.h:BGBDY_API int dyllSqlExecFreeTable(BGBDYC_RDBTable *tab);
include/bgbdy_auto.h:BGBDY_API int dyllSqlExecPrint(BGBDYC_RDB *db, char *cmd);
include/bgbdy_auto.h:BGBDY_API int dyllSqlPrintTab(char **cols, char **rows, int ncol, int nrow);
include/bgbdy_auto.h:BGBDY_API int dyllSqlPrintTable(BGBDYC_RDBTable *tab);
include/bgbdy_auto.h:BGBDY_API int dyllSqlExecPrintTable(BGBDYC_RDB *db, char *cmd);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatSgn(quat q);
include/bgbdy_auto.h:BGBDY_API float dtyQuatArg(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatLn(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatExp(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatSin(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatCos(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatTan(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatCot(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatSinh(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatCosh(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatTanh(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatCoth(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatASin(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatACos(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatATan(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatACot(quat q);
include/bgbdy_auto.h:BGBDY_API quat dtyExpRealQuat(float b, quat x);
include/bgbdy_auto.h:BGBDY_API quat dtyExpQuatReal(quat p, float q);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatExpQuatQuat(quat p, quat q);
include/bgbdy_auto.h:BGBDY_API vec3 dtyQuatSlerp(vec3 v0, vec3 v1, float t);
include/bgbdy_auto.h:BGBDY_API vec3 dtyVec3ArcPolate(vec3 v0, vec3 v1, float t);
include/bgbdy_auto.h:BGBDY_API quat dtyQuatArcPolate(quat q0, quat q1, float t);
include/bgbdy_auto.h:BGBDY_API mat2 dtyMat2vf(float *v);
include/bgbdy_auto.h:BGBDY_API mat3 dtyMat3vf(float *v);
include/bgbdy_auto.h:BGBDY_API mat4 dtyMat4vf(float *v);
include/bgbdy_auto.h:BGBDY_API mat2 dtyMat2f(float a, float b, float c, float d);
include/bgbdy_auto.h:BGBDY_API mat3 dtyMat3f(float a, float b, float c, float d, float e, float f, float g, float h, float i);
include/bgbdy_auto.h:BGBDY_API mat4 dtyMat4f(float a, float b, float c, float d, float e, float f, float g, float h, float i, float j, float k, float l, float m, float n, float o, float p);
include/bgbdy_auto.h:BGBDY_API mat2 dtyMat2Add(mat2 a, mat2 b);
include/bgbdy_auto.h:BGBDY_API mat2 dtyMat2Sub(mat2 a, mat2 b);
include/bgbdy_auto.h:BGBDY_API mat2 dtyMat2Mul(mat2 a, mat2 b);
include/bgbdy_auto.h:BGBDY_API mat3 dtyMat3Add(mat3 a, mat3 b);
include/bgbdy_auto.h:BGBDY_API mat3 dtyMat3Sub(mat3 a, mat3 b);
include/bgbdy_auto.h:BGBDY_API mat3 dtyMat3Mul(mat3 a, mat3 b);
include/bgbdy_auto.h:BGBDY_API mat4 dtyMat4Add(mat4 a, mat4 b);
include/bgbdy_auto.h:BGBDY_API mat4 dtyMat4Sub(mat4 a, mat4 b);
include/bgbdy_auto.h:BGBDY_API mat4 dtyMat4Mul(mat4 a, mat4 b);
include/bgbdy_auto.h:BGBDY_API dyt dwWrapWRef(iv128_t ptr);
include/bgbdy_auto.h:BGBDY_API iv128_t dwUnwrapWRef(dyt p);
include/bgbdy_auto.h:BGBDY_API u64 dwGetWRefSeg(dyt p);
include/bgbdy_auto.h:BGBDY_API int dwrefp(dyt p);
include/bgbdy_auto.h:BGBDY_API char *dwgettype(dyt p);
include/bgbdy_auto.h:BGBDY_API int dwtypep(dyt p, char *ty);
include/bgbdy_auto.h:BGBDY_API dyt dwtalloc(u64 seg, char *ty, u64 sz);
include/bgbdy_auto.h:BGBDY_API int dwfree(dyt ptr);
include/bgbdy_auto.h:BGBDY_API int dwmemcpy(dyt dst, dyt src, int sz);
include/bgbdy_auto.h:BGBDY_API int dwreadmem(void *buf, int sz, dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API int dwwritemem(void *buf, int sz, dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API int dwgetc(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API int dwgetb(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API int dwgetw(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API int dwgeth(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API u32 dwgetdw(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API s32 dwgeti(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API u64 dwgetq(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API s64 dwgetl(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API float dwgetf(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API double dwgetd(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API iv128_t dwgetdq(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API int dwputc(dyt ptr, int disp, char v);
include/bgbdy_auto.h:BGBDY_API int dwputb(dyt ptr, int disp, byte v);
include/bgbdy_auto.h:BGBDY_API int dwputw(dyt ptr, int disp, u16 v);
include/bgbdy_auto.h:BGBDY_API int dwputh(dyt ptr, int disp, s16 v);
include/bgbdy_auto.h:BGBDY_API int dwputdw(dyt ptr, int disp, u32 v);
include/bgbdy_auto.h:BGBDY_API int dwputi(dyt ptr, int disp, s32 v);
include/bgbdy_auto.h:BGBDY_API int dwputq(dyt ptr, int disp, u64 v);
include/bgbdy_auto.h:BGBDY_API int dwputl(dyt ptr, int disp, s64 v);
include/bgbdy_auto.h:BGBDY_API int dwputf(dyt ptr, int disp, float v);
include/bgbdy_auto.h:BGBDY_API int dwputd(dyt ptr, int disp, double v);
include/bgbdy_auto.h:BGBDY_API int dwputdq(dyt ptr, int disp, iv128_t v);
include/bgbdy_auto.h:BGBDY_API dyt dwgetp(dyt ptr, int disp);
include/bgbdy_auto.h:BGBDY_API int dwputp(dyt ptr, int disp, dyt p);
include/bgbdy_auto.h:BGBDY_API char *dysShl(char *s, int v);
include/bgbdy_auto.h:BGBDY_API char *dysShr(char *s, int v);
include/bgbdy_auto.h:BGBDY_API char *dysShl10(char *s, int v);
include/bgbdy_auto.h:BGBDY_API char *dysShr10(char *s, int v);
include/bgbdy_auto.h:BGBDY_API char *dysShr10F(char *s, int v);
include/bgbdy_auto.h:BGBDY_API int dysCmp(char *s0, char *s1);
include/bgbdy_auto.h:BGBDY_API char *dysAdd(char *s0, char *s1);
include/bgbdy_auto.h:BGBDY_API char *dysSub(char *s0, char *s1);
include/bgbdy_auto.h:BGBDY_API char *dysMul(char *s0, char *s1);
include/bgbdy_auto.h:BGBDY_API char *dysDiv(char *s0, char *s1);
include/bgbdy_auto.h:BGBDY_API dyt chnNew();
include/bgbdy_auto.h:BGBDY_API void chnGetBuf(dyt chan, void *buf, int sz);
include/bgbdy_auto.h:BGBDY_API void chnPutBuf(dyt chan, void *buf, int sz);
include/bgbdy_auto.h:BGBDY_API void chnSendBuf(dyt chan, void *buf, int sz);
include/bgbdy_auto.h:BGBDY_API int chnPollGetP(dyt chan);
include/bgbdy_auto.h:BGBDY_API int chnPollPutP(dyt chan);
include/bgbdy_auto.h:BGBDY_API int chnGetP(dyt chan);
include/bgbdy_auto.h:BGBDY_API int chnPutP(dyt chan);
include/bgbdy_auto.h:BGBDY_API int chnGetInt(dyt chan);
include/bgbdy_auto.h:BGBDY_API s64 chnGetLong(dyt chan);
include/bgbdy_auto.h:BGBDY_API float chnGetFloat(dyt chan);
include/bgbdy_auto.h:BGBDY_API double chnGetDouble(dyt chan);
include/bgbdy_auto.h:BGBDY_API void *chnGetPtr(dyt chan);
include/bgbdy_auto.h:BGBDY_API char *chnGetString(dyt chan);
include/bgbdy_auto.h:BGBDY_API dyt chanGetDyt(dyt chan);
include/bgbdy_auto.h:BGBDY_API void chnPutInt(dyt chan, int val);
include/bgbdy_auto.h:BGBDY_API void chnPutLong(dyt chan, s64 val);
include/bgbdy_auto.h:BGBDY_API void chnPutFloat(dyt chan, float val);
include/bgbdy_auto.h:BGBDY_API void chnPutDouble(dyt chan, double val);
include/bgbdy_auto.h:BGBDY_API void chnPutPtr(dyt chan, void *val);
include/bgbdy_auto.h:BGBDY_API void chnPutString(dyt chan, char *val);
include/bgbdy_auto.h:BGBDY_API void chnPutDyt(dyt chan, dyt val);
include/bgbdy_auto.h:BGBDY_API void chnSendInt(dyt chan, int val);
include/bgbdy_auto.h:BGBDY_API void chnSendLong(dyt chan, s64 val);
include/bgbdy_auto.h:BGBDY_API void chnSendFloat(dyt chan, float val);
include/bgbdy_auto.h:BGBDY_API void chnSendDouble(dyt chan, double val);
include/bgbdy_auto.h:BGBDY_API void chnSendPtr(dyt chan, void *val);
include/bgbdy_auto.h:BGBDY_API void chnSendString(dyt chan, char *val);
include/bgbdy_auto.h:BGBDY_API void chnSendDyt(dyt chan, dyt val);
include/bgbdy_auto.h:BGBDY_API dytf dytfWrap(dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dytfUnwrap(dytf a);
include/bgbdy_auto.h:BGBDY_API int dytfRealP(dytf a);
include/bgbdy_auto.h:BGBDY_API dytf dytfReal(double a);
include/bgbdy_auto.h:BGBDY_API double dytfRealv(dytf a);
include/bgbdy_auto.h:BGBDY_API int dytfIntP(dytf a);
include/bgbdy_auto.h:BGBDY_API dytf dytfInt(s64 v);
include/bgbdy_auto.h:BGBDY_API s64 dytfIntv(dytf a);
include/bgbdy_auto.h:BGBDY_API double dytfRealvF(dytf a);
include/bgbdy_auto.h:BGBDY_API void *dytfPtrvF(dytf a);
include/bgbdy_auto.h:BGBDY_API char *dytfgettype(dytf a);
include/bgbdy_auto.h:BGBDY_API int dytftypep(dytf a, char *ty);
include/bgbdy_auto.h:BGBDY_API dytf dytfAdd(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfSub(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfMul(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfDiv(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfMod(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfAnd(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfOr(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfXor(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfShl(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfShr(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfExp(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfNeg(dytf a);
include/bgbdy_auto.h:BGBDY_API dytf dytfNot(dytf a);
include/bgbdy_auto.h:BGBDY_API dytf dytfLNot(dytf a);
include/bgbdy_auto.h:BGBDY_API int dytfEqP(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API int dytfNEqP(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API int dytfLtP(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API int dytfGtP(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API int dytfLeP(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API int dytfGeP(dytf a, dytf b);
include/bgbdy_auto.h:BGBDY_API dytf dytfSqr(dytf a);
include/bgbdy_auto.h:BGBDY_API dytf dytfSqrt(dytf a);
include/bgbdy_auto.h:BGBDY_API int dytfTrueP(dytf a);
include/bgbdy_auto.h:BGBDY_API int dytfFalseP(dytf a);
include/bgbdy_auto.h:BGBDY_API dytf dytfBool(int a);
include/bgbdy_auto.h:BGBDY_API dyt dyApplyMethod(dyt obj, dyt mth, dyt *args, int nargs);
include/bgbdy_auto.h:BGBDY_API dyt dyApplyMethodLst(dyt obj, dyt mth, dyt args);
include/bgbdy_auto.h:BGBDY_API void *dyApplyMethodU(dyt obj, dyt mth,char *sig, void **args, int szargs);
include/bgbdy_auto.h:BGBDY_API void *dyApplyMethodV(dyt obj, dyt mth,char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycApplyMethodU(dycObject obj, dyt mth,char *sig, void **args, int szargs);
include/bgbdy_auto.h:BGBDY_API void *dycApplyMethodV(dycObject obj, dyt mth,char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycApplyStaticU(dycClass inf, dyt mth,char *sig, void **args, int szargs);
include/bgbdy_auto.h:BGBDY_API void *dycApplyStaticV(dycClass inf, dyt mth,char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycApplyStructMethodU(void *obj, dyt mth,char *sig, void **args, int szargs);
include/bgbdy_auto.h:BGBDY_API void *dycApplyStructMethodV(void *obj, dyt mth,char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dyllConvObjCFunc(dyt obj, char *sig);
include/bgbdy_auto.h:BGBDY_API char *dyToString(dyt obj);
include/bgbdy_auto.h:BGBDY_API void dyTypeGetSlot(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdy_auto.h:BGBDY_API void dyTypeSetSlot(char *ty, dyt (*fcn)(dyt, dyt, dyt));
include/bgbdy_auto.h:BGBDY_API void dyTypeNextSlot(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdy_auto.h:BGBDY_API void dyTypeTrySetSlot(char *ty, dyt (*fcn)(dyt, dyt, dyt));
include/bgbdy_auto.h:BGBDY_API void dyTypeGetDelegate(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdy_auto.h:BGBDY_API void dyTypeSetDelegate(char *ty, dyt (*fcn)(dyt, dyt, dyt));
include/bgbdy_auto.h:BGBDY_API void dyTypeNextDelegate(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdy_auto.h:BGBDY_API void dyTypeCallMethod(char *ty, dyt (*fcn)(dyt, dyt, dyt *, int));
include/bgbdy_auto.h:BGBDY_API void dyTypeApply(char *ty, dyt (*fcn)(dyt, dyt *, int));
include/bgbdy_auto.h:BGBDY_API void dyTypeApplyObj(char *ty, dyt (*fcn)(dyt, dyt, dyt *, int));
include/bgbdy_auto.h:BGBDY_API void dyTypeToString(char *ty, char *(*fcn)(dyt));
include/bgbdy_auto.h:BGBDY_API dyt dyObject();
include/bgbdy_auto.h:BGBDY_API dyt dyObjectParent(dyt parent);
include/bgbdy_auto.h:BGBDY_API int dyObjectp(dyt obj);
include/bgbdy_auto.h:BGBDY_API int dyObjectP(dyt obj);
include/bgbdy_auto.h:BGBDY_API dyt dyBind(dyt obj, char *var, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dyTrySet(dyt obj, char *var, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dyGet(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API int dyGeti(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API s64 dyGetl(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API double dyGetf(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API double dyGetd(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API void dyGet2fv(dyt obj, char *sym, float *v);
include/bgbdy_auto.h:BGBDY_API void dyGet3fv(dyt obj, char *sym, float *v);
include/bgbdy_auto.h:BGBDY_API void dyGet4fv(dyt obj, char *sym, float *v);
include/bgbdy_auto.h:BGBDY_API void dyGet2dv(dyt obj, char *sym, double *v);
include/bgbdy_auto.h:BGBDY_API void dyGet3dv(dyt obj, char *sym, double *v);
include/bgbdy_auto.h:BGBDY_API void dyGet4dv(dyt obj, char *sym, double *v);
include/bgbdy_auto.h:BGBDY_API char *dyGets(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API dyt dySet(dyt obj, char *sym, dyt val);
include/bgbdy_auto.h:BGBDY_API void dySeti(dyt obj, char *sym, int val);
include/bgbdy_auto.h:BGBDY_API void dySetl(dyt obj, char *sym, s64 val);
include/bgbdy_auto.h:BGBDY_API void dySetf(dyt obj, char *sym, double val);
include/bgbdy_auto.h:BGBDY_API void dySetd(dyt obj, char *sym, double val);
include/bgbdy_auto.h:BGBDY_API void dySet2f(dyt obj, char *sym, double x, double y);
include/bgbdy_auto.h:BGBDY_API void dySet3f(dyt obj, char *sym, double x, double y, double z);
include/bgbdy_auto.h:BGBDY_API void dySet4f(dyt obj, char *sym, double x, double y, double z, double w);
include/bgbdy_auto.h:BGBDY_API void dySet2fv(dyt obj, char *sym, float *v);
include/bgbdy_auto.h:BGBDY_API void dySet3fv(dyt obj, char *sym, float *v);
include/bgbdy_auto.h:BGBDY_API void dySet4fv(dyt obj, char *sym, float *v);
include/bgbdy_auto.h:BGBDY_API void dySet2dv(dyt obj, char *sym, double *v);
include/bgbdy_auto.h:BGBDY_API void dySet3dv(dyt obj, char *sym, double *v);
include/bgbdy_auto.h:BGBDY_API void dySet4dv(dyt obj, char *sym, double *v);
include/bgbdy_auto.h:BGBDY_API void dySets(dyt obj, char *sym, char *val);
include/bgbdy_auto.h:BGBDY_API dyt dyGetIdx(dyt obj, int idx);
include/bgbdy_auto.h:BGBDY_API dyt dySetIdx(dyt obj, int idx, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dyGetKey(dyt obj, dyt key);
include/bgbdy_auto.h:BGBDY_API dyt dySetKey(dyt obj, dyt key, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dyGetDelegate(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API void dySetDelegate(dyt obj, char *sym, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dyGetParent(dyt obj);
include/bgbdy_auto.h:BGBDY_API void dySetParent(dyt obj, dyt val);
include/bgbdy_auto.h:BGBDY_API void dyBindMethod(dyt obj, char *sym, dyt mth);
include/bgbdy_auto.h:BGBDY_API void dyDefMethod(dyt obj, char *sym,dyt (*fcn)(dyt self, dyt *args, int nargs));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod0(dyt obj, char *sym, dyt (*fcn)(dyt self));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod1(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod2(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod3(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod4(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod5(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod6(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod7(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod8(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_auto.h:BGBDY_API void dyDefMethodN(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod1N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod2N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod3N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod4N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod5N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod6N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod7N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API void dyDefMethod8N(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt rest));
include/bgbdy_auto.h:BGBDY_API dyt dyCall(dyt obj, char *sym, dyt *args, int nargs);
include/bgbdy_auto.h:BGBDY_API dyt dyCall0(dyt obj, char *sym);
include/bgbdy_auto.h:BGBDY_API dyt dyCall1(dyt obj, char *sym, dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dyCall2(dyt obj, char *sym, dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyCall3(dyt obj, char *sym, dyt a, dyt b, dyt c);
include/bgbdy_auto.h:BGBDY_API dyt dyCall4(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d);
include/bgbdy_auto.h:BGBDY_API dyt dyCall5(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_auto.h:BGBDY_API dyt dyCall6(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_auto.h:BGBDY_API dyt dyCall7(dyt obj, char *sym,dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
include/bgbdy_auto.h:BGBDY_API dyt dyCall8(dyt obj, char *sym,dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
include/bgbdy_auto.h:BGBDY_API dyt dyCallN(dyt obj, char *sym, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall1N(dyt obj, char *sym, dyt a, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall2N(dyt obj, char *sym, dyt a, dyt b, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall3N(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall4N(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall5N(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d, dyt e, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall6N(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f,dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall7N(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f,dyt g, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCall8N(dyt obj, char *sym, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f,dyt g, dyt h, dyt args);
include/bgbdy_auto.h:BGBDY_API dyt dyCallSig(dyt obj, char *sym, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API dyt dyLookupMethodSig(dyt obj, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API int BGBDYC_SlotHashUsed();
include/bgbdy_auto.h:BGBDY_API int BGBDYC_MinfHashUsed();
include/bgbdy_auto.h:BGBDY_API int BGBDYC_SlotHashSize();
include/bgbdy_auto.h:BGBDY_API int BGBDYC_MinfHashSize();
include/bgbdy_auto.h:BGBDY_API int BGBDYC_DumpSlotHash();
include/bgbdy_auto.h:BGBDY_API int BGBDYC_DumpMinfHash();
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArray(char *sig, int cnt);
include/bgbdy_auto.h:BGBDY_API int dycArrayP(dyt p);
include/bgbdy_auto.h:BGBDY_API int dycArrayDataP(dyt p);
include/bgbdy_auto.h:BGBDY_API int dycArray2P(dyt p);
include/bgbdy_auto.h:BGBDY_API dycArray dycArrayFromData(dyt p);
include/bgbdy_auto.h:BGBDY_API int dycArraySigP(dyt p, char *sig);
include/bgbdy_auto.h:BGBDY_API void *dycArrayV(dycArray arr);
include/bgbdy_auto.h:BGBDY_API int dycArraySz(dycArray arr);
include/bgbdy_auto.h:BGBDY_API char *dycArraySig(dycArray arr);
include/bgbdy_auto.h:BGBDY_API int dycArrayStep(dycArray arr);
include/bgbdy_auto.h:BGBDY_API void *dycArrayIdxPtr(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArrayVar(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayVar(dycArray arr, int idx, dyt val);
include/bgbdy_auto.h:BGBDY_API int dycGetArraysb(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayub(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayss(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayus(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayi(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArrayl(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API float dycGetArrayf(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API double dycGetArrayd(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArrayr(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetArrayp(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API void dycSetArraysb(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayub(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayss(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayus(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayi(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayl(dycArray arr, int idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayf(dycArray arr, int idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayd(dycArray arr, int idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayr(dycArray arr, int idx, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayp(dycArray arr, int idx, void *val);
include/bgbdy_auto.h:BGBDY_API void *dycArrayIdxPtrBC(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArraySsb(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArraySub(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArraySss(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArraySus(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArraySi(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArraySl(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API float dycGetArraySf(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API double dycGetArraySd(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArraySr(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetArraySp(dycArray arr, int idx);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySsb(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySub(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySss(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySus(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySi(dycArray arr, int idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySl(dycArray arr, int idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySf(dycArray arr, int idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySd(dycArray arr, int idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySr(dycArray arr, int idx, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArraySp(dycArray arr, int idx, void *val);
include/bgbdy_auto.h:BGBDY_API dycArray DYC_NewArrayM_R(char *sig, int ord, int *sz);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM(char *sig, int ord, int *sz);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM2(char *sig, int sz0, int sz1);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM3(char *sig, int sz0, int sz1, int sz2);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM4(char *sig, int sz0, int sz1, int sz2, int sz3);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM5(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM6(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM7(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM8(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM9(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM10(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8, int sz9);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM11(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10);
include/bgbdy_auto.h:BGBDY_API dycArray dycNewArrayM12(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10, int sz11);
include/bgbdy_auto.h:BGBDY_API dycArrayN dycNewArrayN(char *sig, int ord, int *sz);
include/bgbdy_auto.h:BGBDY_API int dycArrayNP(dyt p);
include/bgbdy_auto.h:BGBDY_API int dycArrayNSigP(dyt p, char *sig);
include/bgbdy_auto.h:BGBDY_API int dycArrayNSigOrdP(dyt p, char *sig, int ord);
include/bgbdy_auto.h:BGBDY_API void *dycArrayNV(dycArrayN arr);
include/bgbdy_auto.h:BGBDY_API int *dycArrayNSz(dycArrayN arr);
include/bgbdy_auto.h:BGBDY_API int dycArrayNCnt(dycArrayN arr);
include/bgbdy_auto.h:BGBDY_API int dycArrayNOrd(dycArrayN arr);
include/bgbdy_auto.h:BGBDY_API char *dycArrayNSig(dycArrayN arr);
include/bgbdy_auto.h:BGBDY_API int dycArrayNStep(dycArrayN arr);
include/bgbdy_auto.h:BGBDY_API void *dycArrayNIdxPtr(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API void *dycArrayNIdxPtrBC(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNsb(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNub(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNss(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNus(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNi(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArrayNl(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API float dycGetArrayNf(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API double dycGetArrayNd(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArrayNr(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetArrayNp(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNsb(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNub(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNss(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNus(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNi(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNl(dycArrayN arr, int *idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNf(dycArrayN arr, int *idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNd(dycArrayN arr, int *idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNr(dycArrayN arr, int *idx, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNp(dycArrayN arr, int *idx, void *val);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNSsb(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNSub(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNSss(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNSus(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API int dycGetArrayNSi(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArrayNSl(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API float dycGetArrayNSf(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API double dycGetArrayNSd(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArrayNSr(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetArrayNSp(dycArrayN arr, int *idx);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSsb(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSub(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSss(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSus(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSi(dycArrayN arr, int *idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSl(dycArrayN arr, int *idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSf(dycArrayN arr, int *idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSd(dycArrayN arr, int *idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSr(dycArrayN arr, int *idx, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArrayNSp(dycArrayN arr, int *idx, void *val);
include/bgbdy_auto.h:BGBDY_API void *dycArray2IdxPtr(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API void *dycArray2IdxPtrBC(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2sb(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2ub(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2ss(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2us(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2i(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArray2l(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API float dycGetArray2f(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API double dycGetArray2d(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArray2r(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API void *dycGetArray2p(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2sb(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2ub(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2ss(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2us(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2i(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2l(dycArrayN arr, int y, int x, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2f(dycArrayN arr, int y, int x, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2d(dycArrayN arr, int y, int x, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2r(dycArrayN arr, int y, int x, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2p(dycArrayN arr, int y, int x, void *val);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2Ssb(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2Sub(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2Sss(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2Sus(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray2Si(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArray2Sl(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API float dycGetArray2Sf(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API double dycGetArray2Sd(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArray2Sr(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API void *dycGetArray2Sp(dycArrayN arr, int y, int x);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Ssb(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sub(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sss(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sus(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Si(dycArrayN arr, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sl(dycArrayN arr, int y, int x, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sf(dycArrayN arr, int y, int x, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sd(dycArrayN arr, int y, int x, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sr(dycArrayN arr, int y, int x, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray2Sp(dycArrayN arr, int y, int x, void *val);
include/bgbdy_auto.h:BGBDY_API void *dycArray3IdxPtr(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API void *dycArray3IdxPtrBC(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3sb(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3ub(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3ss(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3us(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3i(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArray3l(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API float dycGetArray3f(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API double dycGetArray3d(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArray3r(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API void *dycGetArray3p(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3sb(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3ub(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3ss(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3us(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3i(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3l(dycArrayN arr, int z, int y, int x, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3f(dycArrayN arr, int z, int y, int x, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3d(dycArrayN arr, int z, int y, int x, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3r(dycArrayN arr, int z, int y, int x, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3p(dycArrayN arr, int z, int y, int x, void *val);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3Ssb(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3Sub(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3Sss(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3Sus(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API int dycGetArray3Si(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API s64 dycGetArray3Sl(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API float dycGetArray3Sf(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API double dycGetArray3Sd(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API dyt dycGetArray3Sr(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API void *dycGetArray3Sp(dycArrayN arr, int z, int y, int x);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Ssb(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sub(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sss(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sus(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Si(dycArrayN arr, int z, int y, int x, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sl(dycArrayN arr, int z, int y, int x, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sf(dycArrayN arr, int z, int y, int x, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sd(dycArrayN arr, int z, int y, int x, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sr(dycArrayN arr, int z, int y, int x, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetArray3Sp(dycArrayN arr, int z, int y, int x, void *val);
include/bgbdy_auto.h:BGBDY_API int dycObjectP(dyt obj);
include/bgbdy_auto.h:BGBDY_API int dycClassP(dyt obj);
include/bgbdy_auto.h:BGBDY_API int dycSlotP(dyt obj);
include/bgbdy_auto.h:BGBDY_API int dycMethodP(dyt obj);
include/bgbdy_auto.h:BGBDY_API int dycObjectInstanceOfP(dyt obj, char *name);
include/bgbdy_auto.h:BGBDY_API void dycRegisterClassResolver(dycClass (*fn)(char *name));
include/bgbdy_auto.h:BGBDY_API void dycBeginClass(char *name, char *super);
include/bgbdy_auto.h:BGBDY_API dycClass dycEndClass();
include/bgbdy_auto.h:BGBDY_API void dycBeginClassAnon(dycClass super);
include/bgbdy_auto.h:BGBDY_API dycClass dycEndClassAnon();
include/bgbdy_auto.h:BGBDY_API void dycClassSuper(char *name);
include/bgbdy_auto.h:BGBDY_API void dycSlotBasic(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycSlotStatic(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycSlotInit(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycSlotStatici(char *name, char *sig, int val);
include/bgbdy_auto.h:BGBDY_API void dycSlotStaticl(char *name, char *sig, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSlotStaticf(char *name, char *sig, double val);
include/bgbdy_auto.h:BGBDY_API void dycSlotStaticd(char *name, char *sig, double val);
include/bgbdy_auto.h:BGBDY_API void dycSlotStaticU(char *name, char *sig, void *val);
include/bgbdy_auto.h:BGBDY_API void dycSlotIniti(char *name, char *sig, int val);
include/bgbdy_auto.h:BGBDY_API void dycSlotInitl(char *name, char *sig, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSlotInitf(char *name, char *sig, double val);
include/bgbdy_auto.h:BGBDY_API void dycSlotInitd(char *name, char *sig, double val);
include/bgbdy_auto.h:BGBDY_API void dycSlotInitU(char *name, char *sig, void *val);
include/bgbdy_auto.h:BGBDY_API void dycSlotDelegate(char *name, char *cname);
include/bgbdy_auto.h:BGBDY_API void dycSlotStaticDelegate(char *name, char *cname);
include/bgbdy_auto.h:BGBDY_API void dycMethodBasic(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycMethodStatic(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycMethodFunc(char *name, char *sig, dyt fcn);
include/bgbdy_auto.h:BGBDY_API void dycMethodStaticFunc(char *name, char *sig, dyt fcn);
include/bgbdy_auto.h:BGBDY_API void dycMethodCFunc(char *name, char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API void dycMethodCFuncData(char *name, char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API void dycMethodCSelf(char *name, char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API void dycMethodCSelfData(char *name, char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API void dycMethodStaticCFunc(char *name, char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API void dycMethodStaticCFuncData(char *name, char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API void dycMethodStaticCSelf(char *name, char *sig, void *fcn);
include/bgbdy_auto.h:BGBDY_API void dycMethodStaticCSelfData(char *name, char *sig, void *fcn, void *data);
include/bgbdy_auto.h:BGBDY_API void dycSlotMethod(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycStaticSlotMethod(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycAddMethodFlags(char *name, char *sig, s64 flags);
include/bgbdy_auto.h:BGBDY_API void dycAddSlotFlags(char *name, s64 flags);
include/bgbdy_auto.h:BGBDY_API void dycClassInterface(char *name);
include/bgbdy_auto.h:BGBDY_API void dycBeginIface(char *name, char *super);
include/bgbdy_auto.h:BGBDY_API dycClass dycEndIface();
include/bgbdy_auto.h:BGBDY_API void dycIfaceSuper(char *name);
include/bgbdy_auto.h:BGBDY_API void dycIfaceMethod(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycIfaceSlot(char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void dycBeginStruct(char *name);
include/bgbdy_auto.h:BGBDY_API dycClass dycEndStruct();
include/bgbdy_auto.h:BGBDY_API dycClass dycGetClass(char *name);
include/bgbdy_auto.h:BGBDY_API dycObject dycAlloc(dycClass inf);
include/bgbdy_auto.h:BGBDY_API void dycFreeObject(dycObject obj);
include/bgbdy_auto.h:BGBDY_API void dycSetObjectObject(dycObject dst, dycObject src);
include/bgbdy_auto.h:BGBDY_API int dycSubclassP(dycClass info, dycClass super);
include/bgbdy_auto.h:BGBDY_API int dycInstanceP(dycObject obj, dycClass inf);
include/bgbdy_auto.h:BGBDY_API dycClass dycGetObjClass(dycObject obj);
include/bgbdy_auto.h:BGBDY_API dycClass dycGetClassSuper(dycClass inf);
include/bgbdy_auto.h:BGBDY_API char *dycGetClassName(dycClass inf);
include/bgbdy_auto.h:BGBDY_API char *dycGetObjClassName(dycObject obj);
include/bgbdy_auto.h:BGBDY_API s64 dycGetClassFlags(dycClass inf);
include/bgbdy_auto.h:BGBDY_API dycClassV dycGetClassVersion(dycClass inf);
include/bgbdy_auto.h:BGBDY_API int dycGetStructSize(dycClassV vinf);
include/bgbdy_auto.h:BGBDY_API dycClass dycGetVersionClass(dycClassV vinf);
include/bgbdy_auto.h:BGBDY_API char *dycGetSlotName(dycSlot idx);
include/bgbdy_auto.h:BGBDY_API char *dycGetSlotSig(dycSlot idx);
include/bgbdy_auto.h:BGBDY_API dycClass dycGetSlotClass(dycSlot idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetSlotFlags(dycSlot idx);
include/bgbdy_auto.h:BGBDY_API char *dycGetMethodName(dycMethod idx);
include/bgbdy_auto.h:BGBDY_API char *dycGetMethodSig(dycMethod idx);
include/bgbdy_auto.h:BGBDY_API dycClass dycGetMethodClass(dycMethod idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetMethodFlags(dycMethod idx);
include/bgbdy_auto.h:BGBDY_API dycSlot dycIdxSlot(dycClass info, char *name);
include/bgbdy_auto.h:BGBDY_API dycSlot dycIdxObjSlot(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API dycMethod dycIdxMethod(dycClass inf, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API dycMethod dycIdxObjMethod(dycObject obj, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API void *dycGetSlotPtr(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetInitPtr(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetStaticPtr(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetStructPtr(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycPtrSlot(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API void *dycPtrStaticSlot(dycClass info, char *name);
include/bgbdy_auto.h:BGBDY_API void *dycPtrInitSlot(dycClass info, char *name);
include/bgbdy_auto.h:BGBDY_API void *dycPtrStructSlot(dycClassV vinf, void *obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycInstanceOfP(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycSubclassOfP(char *name, char *super);
include/bgbdy_auto.h:BGBDY_API dyt dycLookupMethodSig(dycObject obj, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API dyt dycGetMethodFunc(dycClass inf, dycMethod idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetObjMethodFunc(dycObject obj, dycMethod idx);
include/bgbdy_auto.h:BGBDY_API void dycSetMethodFunc(dycClass inf, dycMethod idx, dyt fcn);
include/bgbdy_auto.h:BGBDY_API void dycSetObjMethodFunc(dycObject obj, dycMethod idx, dyt fcn);
include/bgbdy_auto.h:BGBDY_API dycSlot dycAddObjSlot(dycObject obj, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API dycMethod dycAddObjMethod(dycObject obj, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API dycObject dycCloneObject(dycObject obj);
include/bgbdy_auto.h:BGBDY_API dycObject dycGetObjDelegate(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API void dycSetObjDelegate(dycObject obj, char *name, dycObject obj1);
include/bgbdy_auto.h:BGBDY_API dycSlot *dycEnumSlotArray(dycClass inf);
include/bgbdy_auto.h:BGBDY_API dycMethod *dycEnumMethodArray(dycClass inf);
include/bgbdy_auto.h:BGBDY_API dycSlot *dycEnumClassSlotArray(char *name);
include/bgbdy_auto.h:BGBDY_API dycMethod *dycEnumClassMethodArray(char *name);
include/bgbdy_auto.h:BGBDY_API dycObject dycAllocClass(char *name);
include/bgbdy_auto.h:BGBDY_API void *dycPtrClassSlot(char *cname, char *sname);
include/bgbdy_auto.h:BGBDY_API dycSlot dycIdxClassSlot(char *cname, char *sname);
include/bgbdy_auto.h:BGBDY_API dycMethod dycIdxClassMethod(char *cname, char *name, char *sig);
include/bgbdy_auto.h:BGBDY_API dyt dycGetSlot(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API dyt dycGetSlotr(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API void *dycGetSlotp(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycGetSlotsb(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycGetSlotub(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycGetSlotss(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycGetSlotus(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycGetSloti(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API s64 dycGetSlotl(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API float dycGetSlotf(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API double dycGetSlotd(dycObject obj, char *name);
include/bgbdy_auto.h:BGBDY_API int dycSetSlot(dycObject obj, char *name, dyt val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotr(dycObject obj, char *name, dyt val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotp(dycObject obj, char *name, void *val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotsb(dycObject obj, char *name, int val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotub(dycObject obj, char *name, int val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotss(dycObject obj, char *name, int val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotus(dycObject obj, char *name, int val);
include/bgbdy_auto.h:BGBDY_API int dycSetSloti(dycObject obj, char *name, int val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotl(dycObject obj, char *name, s64 val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotf(dycObject obj, char *name, float val);
include/bgbdy_auto.h:BGBDY_API int dycSetSlotd(dycObject obj, char *name, double val);
include/bgbdy_auto.h:BGBDY_API dyt dycGet(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycSet(dycObject obj, dycSlot slot, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dycGetr(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void dycSetr(dycObject obj, dycSlot idx, dyt val);
include/bgbdy_auto.h:BGBDY_API int dycGetsb(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetub(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetss(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetus(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGeti(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetl(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API float dycGetf(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API double dycGetd(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetp(dycObject obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void dycSetsb(dycObject obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetub(dycObject obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetss(dycObject obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetus(dycObject obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSeti(dycObject obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetl(dycObject obj, dycSlot idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetf(dycObject obj, dycSlot idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetd(dycObject obj, dycSlot idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetp(dycObject obj, dycSlot idx, void *val);
include/bgbdy_auto.h:BGBDY_API int dycGetStaticsb(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStaticub(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStaticss(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStaticus(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStatici(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetStaticl(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API float dycGetStaticf(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API double dycGetStaticd(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetStaticr(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetStaticp(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticsb(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticub(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticss(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticus(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStatici(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticl(dycClass inf, dycSlot idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticf(dycClass inf, dycSlot idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticd(dycClass inf, dycSlot idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticr(dycClass inf, dycSlot idx, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetStaticp(dycClass inf, dycSlot idx, void *val);
include/bgbdy_auto.h:BGBDY_API int dycGetInitsb(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetInitub(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetInitss(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetInitus(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetIniti(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetInitl(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API float dycGetInitf(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API double dycGetInitd(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetInitr(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetInitp(dycClass inf, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void dycSetInitsb(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitub(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitss(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitus(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetIniti(dycClass inf, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitl(dycClass inf, dycSlot idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitf(dycClass inf, dycSlot idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitd(dycClass inf, dycSlot idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitr(dycClass inf, dycSlot idx, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetInitp(dycClass inf, dycSlot idx, void *val);
include/bgbdy_auto.h:BGBDY_API int dycGetStructsb(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStructub(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStructss(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStructus(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycGetStructi(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API s64 dycGetStructl(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API float dycGetStructf(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API double dycGetStructd(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API dyt dycGetStructr(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycGetStructp(dycClassV vinf, void *obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void dycSetStructsb(dycClassV vinf, void *obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructub(dycClassV vinf, void *obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructss(dycClassV vinf, void *obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructus(dycClassV vinf, void *obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructi(dycClassV vinf, void *obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructl(dycClassV vinf, void *obj, dycSlot idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructf(dycClassV vinf, void *obj, dycSlot idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructd(dycClassV vinf, void *obj, dycSlot idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructr(dycClassV vinf, void *obj, dycSlot idx, dyt val);
include/bgbdy_auto.h:BGBDY_API void dycSetStructp(dycClassV vinf, void *obj, dycSlot idx, void *val);
include/bgbdy_auto.h:BGBDY_API dycObject dycNewClass(char *name);
include/bgbdy_auto.h:BGBDY_API dycObject dycNewInitClass(char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API dycObject dycNewInitClassV(char *name, char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API dycObject dycNewInitClassU(char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API dycObject dycNew(dycClass inf);
include/bgbdy_auto.h:BGBDY_API dycObject dycNewInit(dycClass inf, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API dycObject dycNewInitV(dycClass inf, char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API dycObject dycNewInitU(dycClass inf, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallSigU(dycObject obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallSigV(dycObject obj, char *name, char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallSig(dycObject obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycCallSigVr(dycObject obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API int dycCallSigVi(dycObject obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API s64 dycCallSigVl(dycObject obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API float dycCallSigVf(dycObject obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API double dycCallSigVd(dycObject obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API dyt dycCallSigUr(dycObject obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API int dycCallSigUi(dycObject obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallSigUl(dycObject obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API float dycCallSigUf(dycObject obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API double dycCallSigUd(dycObject obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API int dycCallSigi(dycObject obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API s64 dycCallSigl(dycObject obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API float dycCallSigf(dycObject obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API double dycCallSigd(dycObject obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallU(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallV(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCall(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API int dycCallUi(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallUl(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API float dycCallUf(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API double dycCallUd(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallUr(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallUp(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void dycCallUv(dycObject obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API int dycCallVi(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallVl(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API float dycCallVf(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API double dycCallVd(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallVr(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallVp(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void dycCallVv(dycObject obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API int dycCalli(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API s64 dycCalll(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API float dycCallf(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API double dycCalld(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycCallr(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallp(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void dycCallv(dycObject obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallStaticU(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStaticV(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStatic(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API int dycCallStaticUi(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallStaticUl(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API float dycCallStaticUf(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API double dycCallStaticUd(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallStaticUr(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStaticUp(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void dycCallStaticUv(dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API int dycCallStaticVi(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallStaticVl(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API float dycCallStaticVf(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API double dycCallStaticVd(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallStaticVr(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStaticVp(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void dycCallStaticVv(dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API int dycCallStatici(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API s64 dycCallStaticl(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API float dycCallStaticf(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API double dycCallStaticd(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycCallStaticr(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallStaticp(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void dycCallStaticv(dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallAsU(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallAsV(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallAs(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API int dycCallAsUi(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallAsUl(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API float dycCallAsUf(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API double dycCallAsUd(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallAsUr(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallAsUp(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void dycCallAsUv(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API int dycCallAsVi(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallAsVl(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API float dycCallAsVf(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API double dycCallAsVd(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallAsVr(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallAsVp(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void dycCallAsVv(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API int dycCallAsi(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API s64 dycCallAsl(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API float dycCallAsf(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API double dycCallAsd(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycCallAsr(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallAsp(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void dycCallAsv(dycObject obj, dycClass inf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallStructU(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStructV(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStruct(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API int dycCallStructUi(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallStructUl(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API float dycCallStructUf(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API double dycCallStructUd(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallStructUr(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStructUp(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void dycCallStructUv(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API int dycCallStructVi(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API s64 dycCallStructVl(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API float dycCallStructVf(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API double dycCallStructVd(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API dyt dycCallStructVr(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycCallStructVp(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void dycCallStructVv(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API int dycCallStructi(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API s64 dycCallStructl(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API float dycCallStructf(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API double dycCallStructd(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycCallStructr(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycCallStructp(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void dycCallStructv(void *obj, dycClassV vinf, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API int dycDObjectP(dyt obj);
include/bgbdy_auto.h:BGBDY_API void *dycDCallSigU(dyt obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycDCallSigV(dyt obj, char *name, char *sig, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycDCallSig(dyt obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycDCallSigVr(dyt obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API int dycDCallSigVi(dyt obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API s64 dycDCallSigVl(dyt obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API float dycDCallSigVf(dyt obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API double dycDCallSigVd(dyt obj, char *name, char *sig, va_list lst);
include/bgbdy_auto.h:BGBDY_API dyt dycDCallSigUr(dyt obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API int dycDCallSigUi(dyt obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API s64 dycDCallSigUl(dyt obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API float dycDCallSigUf(dyt obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API double dycDCallSigUd(dyt obj, char *name, char *sig, void **args);
include/bgbdy_auto.h:BGBDY_API int dycDCallSigi(dyt obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API s64 dycDCallSigl(dyt obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API float dycDCallSigf(dyt obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API double dycDCallSigd(dyt obj, char *name, char *sig, ...);
include/bgbdy_auto.h:BGBDY_API void *dycDCallU(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycDCallV(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycDCall(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API int dycDCallUi(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API s64 dycDCallUl(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API float dycDCallUf(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API double dycDCallUd(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API dyt dycDCallUr(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void *dycDCallUp(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API void dycDCallUv(dyt obj, dycMethod mth, void **args);
include/bgbdy_auto.h:BGBDY_API int dycDCallVi(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API s64 dycDCallVl(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API float dycDCallVf(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API double dycDCallVd(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API dyt dycDCallVr(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void *dycDCallVp(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API void dycDCallVv(dyt obj, dycMethod mth, va_list args);
include/bgbdy_auto.h:BGBDY_API int dycDCalli(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API s64 dycDCalll(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API float dycDCallf(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API double dycDCalld(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycDCallr(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void *dycDCallp(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API void dycDCallv(dyt obj, dycMethod mth, ...);
include/bgbdy_auto.h:BGBDY_API dyt dycDGet(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycDSet(dyt obj, dycSlot slot, dyt val);
include/bgbdy_auto.h:BGBDY_API dyt dycDGetr(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void dycDSetr(dyt obj, dycSlot idx, dyt val);
include/bgbdy_auto.h:BGBDY_API int dycDGetsb(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycDGetub(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycDGetss(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycDGetus(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API int dycDGeti(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API s64 dycDGetl(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API float dycDGetf(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API double dycDGetd(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void *dycDGetp(dyt obj, dycSlot idx);
include/bgbdy_auto.h:BGBDY_API void dycDSetsb(dyt obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycDSetub(dyt obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycDSetss(dyt obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycDSetus(dyt obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycDSeti(dyt obj, dycSlot idx, int val);
include/bgbdy_auto.h:BGBDY_API void dycDSetl(dyt obj, dycSlot idx, s64 val);
include/bgbdy_auto.h:BGBDY_API void dycDSetf(dyt obj, dycSlot idx, float val);
include/bgbdy_auto.h:BGBDY_API void dycDSetd(dyt obj, dycSlot idx, double val);
include/bgbdy_auto.h:BGBDY_API void dycDSetp(dyt obj, dycSlot idx, void *val);
include/bgbdy_auto.h:BGBDY_API void *dycJniGetEnv();
include/bgbdy_auto.h:BGBDY_API void *dycJniGetJavaVM();
include/bgbdy_auto.h:BGBDY_API dyt dyadd(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dysub(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dymul(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dydiv(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dymod(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyand(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyor(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyxor(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyshl(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyshr(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyexp(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dyneg(dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dynot(dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dylnot(dyt a);
include/bgbdy_auto.h:BGBDY_API int dyeqp(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API int dyneqp(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API int dyltp(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API int dygtp(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API int dylep(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API int dygep(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API int dytruep(dyt a);
include/bgbdy_auto.h:BGBDY_API int dyfalsep(dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dysqr(dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dysqrt(dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dycons(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API int dyconsp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dylistp(dyt lst);
include/bgbdy_auto.h:BGBDY_API int dylistlen(dyt lst);
include/bgbdy_auto.h:BGBDY_API void dyFreeCons(dyt p);
include/bgbdy_auto.h:BGBDY_API void dyFreeList(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyFormIsP(dyt lst, char *str);
include/bgbdy_auto.h:BGBDY_API dyt dylist1(dyt a);
include/bgbdy_auto.h:BGBDY_API dyt dylist2(dyt a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dylist3(dyt a, dyt b, dyt c);
include/bgbdy_auto.h:BGBDY_API dyt dylist4(dyt a, dyt b, dyt c, dyt d);
include/bgbdy_auto.h:BGBDY_API dyt dylist5(dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_auto.h:BGBDY_API dyt dylist6(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_auto.h:BGBDY_API dyt dylist7(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
include/bgbdy_auto.h:BGBDY_API dyt dylist8(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
include/bgbdy_auto.h:BGBDY_API dyt dylist9(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h, dyt i);
include/bgbdy_auto.h:BGBDY_API dyt dylist1s(char *a);
include/bgbdy_auto.h:BGBDY_API dyt dylist2s(char *a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dylist3s(char *a, dyt b, dyt c);
include/bgbdy_auto.h:BGBDY_API dyt dylist4s(char *a, dyt b, dyt c, dyt d);
include/bgbdy_auto.h:BGBDY_API dyt dylist5s(char *a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_auto.h:BGBDY_API dyt dylist6s(char *a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_auto.h:BGBDY_API dyt dylist7s(char *a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
include/bgbdy_auto.h:BGBDY_API dyt dylist8s(char *a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
include/bgbdy_auto.h:BGBDY_API dyt dycons2(dyt a, dyt b, dyt c);
include/bgbdy_auto.h:BGBDY_API dyt dycons3(dyt a, dyt b, dyt c, dyt d);
include/bgbdy_auto.h:BGBDY_API dyt dycons4(dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_auto.h:BGBDY_API dyt dycons5(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_auto.h:BGBDY_API dyt dycons6(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
include/bgbdy_auto.h:BGBDY_API dyt dycons7(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
include/bgbdy_auto.h:BGBDY_API dyt dycons8(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h, dyt i);
include/bgbdy_auto.h:BGBDY_API dyt dycons9(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h, dyt i, dyt j);
include/bgbdy_auto.h:BGBDY_API dyt dyconss(char *a, dyt b);
include/bgbdy_auto.h:BGBDY_API dyt dycons2s(char *a, dyt b, dyt c);
include/bgbdy_auto.h:BGBDY_API dyt dycons3s(char *a, dyt b, dyt c, dyt d);
include/bgbdy_auto.h:BGBDY_API dyt dycons4s(char *a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_auto.h:BGBDY_API dyt dycons5s(char *a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_auto.h:BGBDY_API dyt dycons6s(char *a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
include/bgbdy_auto.h:BGBDY_API dyt dycons7s(char *a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
include/bgbdy_auto.h:BGBDY_API dyt dycar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaadr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdadr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaaar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaaar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadaar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddaar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaadar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdadar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddar(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaadr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaadr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadadr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddadr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadddddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddddddddr(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaadars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdadars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaaaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaaaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadaaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddaaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaadaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdadaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddaars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaadars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaadars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadadars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddadars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaddars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaddars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadddars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddddars(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaaadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaaadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadaadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddaadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaadadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdadadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddadrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaaaddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdaaddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadaddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddaddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaadddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdadddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycaddddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycdddddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycadddddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dycddddddddrs(dyt p);
include/bgbdy_auto.h:BGBDY_API void dysetcar(dyt p, dyt v);
include/bgbdy_auto.h:BGBDY_API void dysetcdr(dyt p, dyt v);
include/bgbdy_auto.h:BGBDY_API dyt dyreverse(dyt lst);
include/bgbdy_auto.h:BGBDY_API dyt dynreverse(dyt lst);
include/bgbdy_auto.h:BGBDY_API dyt dynappend(dyt la, dyt lb);
include/bgbdy_auto.h:BGBDY_API dyt dyListToArray(dyt lst);
include/bgbdy_auto.h:BGBDY_API dyt dylistcopy(dyt lst);
include/bgbdy_auto.h:BGBDY_API dyt dyappend(dyt la, dyt lb);
include/bgbdy_auto.h:BGBDY_API dyt dyarray(int cnt);
include/bgbdy_auto.h:BGBDY_API int dyarrayp(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dyarrayidx(dyt p, int idx);
include/bgbdy_auto.h:BGBDY_API void dyarraysetidx(dyt p, int idx, dyt q);
include/bgbdy_auto.h:BGBDY_API dyt *dyarrayv(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyarraysz(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dyWrapArray(dyt *args, int cnt);
include/bgbdy_auto.h:BGBDY_API dyxAttr *dyxLookupAttr(dyxNode *n, char *var);
include/bgbdy_auto.h:BGBDY_API dyxAttr *dyxLookupAttrNS(dyxNode *n, char *ns, char *var);
include/bgbdy_auto.h:BGBDY_API dyxAttr *dyxFetchAttr(dyxNode *n, char *var);
include/bgbdy_auto.h:BGBDY_API dyxAttr *dyxFetchAttrNS(dyxNode *n, char *ns, char *var);
include/bgbdy_auto.h:BGBDY_API dyxAttr *dyxNewAttr();
include/bgbdy_auto.h:BGBDY_API char *dyxGet(dyxNode *n, char *var);
include/bgbdy_auto.h:BGBDY_API int dyxGetInt(dyxNode *n, char *var);
include/bgbdy_auto.h:BGBDY_API double dyxGetFloat(dyxNode *n, char *var);
include/bgbdy_auto.h:BGBDY_API char *dyxGetNS(dyxNode *n, char *ns, char *var);
include/bgbdy_auto.h:BGBDY_API int dyxGetIntNS(dyxNode *n, char *ns, char *var);
include/bgbdy_auto.h:BGBDY_API double dyxGetFloatNS(dyxNode *n, char *ns, char *var);
include/bgbdy_auto.h:BGBDY_API void dyxSet(dyxNode *n, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API void dyxSetInt(dyxNode *n, char *var, int val);
include/bgbdy_auto.h:BGBDY_API void dyxSetFloat(dyxNode *n, char *var, double val);
include/bgbdy_auto.h:BGBDY_API void dyxSetNS(dyxNode *n, char *ns, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API void dyxSetIntNS(dyxNode *n, char *ns, char *var, int val);
include/bgbdy_auto.h:BGBDY_API void dyxSetFloatNS(dyxNode *n, char *ns, char *var, double val);
include/bgbdy_auto.h:BGBDY_API char *dyxNSURI(dyxNode *n, char *ns);
include/bgbdy_auto.h:BGBDY_API char *dyxURINS(dyxNode *n, char *uri);
include/bgbdy_auto.h:BGBDY_API char *dyxGetURI(dyxNode *n, char *uri, char *var);
include/bgbdy_auto.h:BGBDY_API int dyxGetIntURI(dyxNode *n, char *uri, char *var);
include/bgbdy_auto.h:BGBDY_API double dyxGetFloatURI(dyxNode *n, char *uri, char *var);
include/bgbdy_auto.h:BGBDY_API void dyxSetURI(dyxNode *n, char *uri, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API void dyxSetIntURI(dyxNode *n, char *uri, char *var, int val);
include/bgbdy_auto.h:BGBDY_API void dyxSetFloatURI(dyxNode *n, char *uri, char *var, double val);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew(char *tag);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNewNS(char *ns, char *tag);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNewText(char *text);
include/bgbdy_auto.h:BGBDY_API void dyxAdd(dyxNode *parent, dyxNode *child);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxAddEnd(dyxNode *lst, dyxNode *n);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew1(char *tag, dyxNode *a);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew2(char *tag, dyxNode *a, dyxNode *b);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew3(char *tag, dyxNode *a, dyxNode *b, dyxNode *c);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew4(char *tag, dyxNode *a, dyxNode *b, dyxNode *c, dyxNode *d);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew1NS(char *ns, char *tag, dyxNode *a);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew2NS(char *ns, char *tag, dyxNode *a, dyxNode *b);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew3NS(char *ns, char *tag, dyxNode *a, dyxNode *b, dyxNode *c);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNew4NS(char *ns, char *tag,dyxNode *a, dyxNode *b, dyxNode *c, dyxNode *d);
include/bgbdy_auto.h:BGBDY_API int dyxNodeP(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API int dyxTextP(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API int dyxLeafP(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API int dyxChildP(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxNext(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxPrev(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxParent(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxChild(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API char *dyxNS(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API char *dyxURI(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API char *dyxTag(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API char *dyxText(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API void dyxSetTag(dyxNode *n, char *s);
include/bgbdy_auto.h:BGBDY_API int dyxTagIsP(dyxNode *n, char *str);
include/bgbdy_auto.h:BGBDY_API int dyxAttrIsP(dyxNode *n, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API int dyxTagAttrIsP(dyxNode *n, char *tag, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxFindNextTag(dyxNode *last, char *tag);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxFindNextAttr(dyxNode *last, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxFindNextTagAttr(dyxNode *last,char *tag, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxFindTag(dyxNode *parent, char *tag);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxFindAttr(dyxNode *parent, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxFindTagAttr(dyxNode *parent, char *tag, char *var, char *val);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxFetch(dyxNode *parent, char *tag);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxClone(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxCloneList(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API void dyxUnlink(dyxNode *n);
include/bgbdy_auto.h:BGBDY_API void dyPrintDycObject(dycObject obj, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbdy_auto.h:BGBDY_API void dyPrintBuf(dyt n, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbdy_auto.h:BGBDY_API void dyDumpFD(FILE *fd, dyt n);
include/bgbdy_auto.h:BGBDY_API void dyPrintFD(FILE *fd, dyt n);
include/bgbdy_auto.h:BGBDY_API void dyDumpGCP(dyt n);
include/bgbdy_auto.h:BGBDY_API void dyPrintGCP(dyt n);
include/bgbdy_auto.h:BGBDY_API char *dyDumpStr(char *buf, dyt n);
include/bgbdy_auto.h:BGBDY_API char *dyPrintStr(char *buf, dyt n);
include/bgbdy_auto.h:BGBDY_API void dyPrint(dyt n);
include/bgbdy_auto.h:BGBDY_API dysReadStream dysNewReadStreamBuf(char *buf);
include/bgbdy_auto.h:BGBDY_API dysReadPos dysGetPos(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API void dysSetPos(dysReadStream strm, dysReadPos pos);
include/bgbdy_auto.h:BGBDY_API int dysPeekChar(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysReadChar(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysPeekCharIdx(dysReadStream strm, int idx);
include/bgbdy_auto.h:BGBDY_API int dysPeekNibble(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysReadNibble(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysReadHex(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysReadHex8(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysReadHex16(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysReadHex32(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysParseEatWhite(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dysParseSpecialP(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API char *dysParseToken(dysReadStream strm, int *ty);
include/bgbdy_auto.h:BGBDY_API dyt dysParseList(dysReadStream strm, int ind);
include/bgbdy_auto.h:BGBDY_API dyt dysParseItem(dysReadStream strm, int ind);
include/bgbdy_auto.h:BGBDY_API dyt dysParseFromString(char *s);
include/bgbdy_auto.h:BGBDY_API dyt dysParseMultiFromString(char *s);
include/bgbdy_auto.h:BGBDY_API void dysPrintf(dysPrintStream strm, char *str, ...);
include/bgbdy_auto.h:BGBDY_API void dysPrintItem(dysPrintStream strm, dyt obj);
include/bgbdy_auto.h:BGBDY_API void dysPrintFlatten(dysPrintStream strm, dyt obj);
include/bgbdy_auto.h:BGBDY_API dysPrintStream dysNewStreamFD(FILE *fd);
include/bgbdy_auto.h:BGBDY_API dysPrintStream dysNewStreamBuf(char **buf);
include/bgbdy_auto.h:BGBDY_API void dysDestroyStream(dysPrintStream strm);
include/bgbdy_auto.h:BGBDY_API dysPrintStream dysCloneStream(dysPrintStream strm);
include/bgbdy_auto.h:BGBDY_API void dysDumpFD(FILE *fd, dyt n);
include/bgbdy_auto.h:BGBDY_API void dysPrintFD(FILE *fd, dyt n);
include/bgbdy_auto.h:BGBDY_API char *dysDumpStr(char *buf, dyt n);
include/bgbdy_auto.h:BGBDY_API char *dysPrintStr(char *buf, dyt n);
include/bgbdy_auto.h:BGBDY_API void dysPrint(dyt n);
include/bgbdy_auto.h:BGBDY_API void dysPrintln(dyt n);
include/bgbdy_auto.h:BGBDY_API int dyxParseEatWhite(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dyxParseSpecialP(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API int dyxParseContSpecialP(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API char *dyxParseToken(dysReadStream strm, int *ty);
include/bgbdy_auto.h:BGBDY_API char *dyxPeekToken(dysReadStream strm, int *ty);
include/bgbdy_auto.h:BGBDY_API char *dyxParseText(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API dyxAttr *dyxParseOpts(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxParseTag(dysReadStream strm, int *rgrp);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxParseExprR(dysReadStream strm, int *rgrp);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxParseExpr(dysReadStream strm);
include/bgbdy_auto.h:BGBDY_API dyxNode *dyxParseExprStr(char *str);
include/bgbdy_auto.h:BGBDY_API void dyxPrintBuf(dyxNode *node, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbdy_auto.h:BGBDY_API void dyxPrintStrm(dysPrintStream strm, dyxNode *node);
include/bgbdy_auto.h:BGBDY_API void dyxDumpFD(FILE *fd, dyxNode *node);
include/bgbdy_auto.h:BGBDY_API void dyxPrintFD(FILE *fd, dyxNode *node);
include/bgbdy_auto.h:BGBDY_API void dyxDumpVF(VFILE *fd, dyxNode *node);
include/bgbdy_auto.h:BGBDY_API void dyxPrintVF(VFILE *fd, dyxNode *node);
include/bgbdy_auto.h:BGBDY_API char *dyxDumpStr(char *buf, dyxNode *node);
include/bgbdy_auto.h:BGBDY_API char *dyxPrintStr(char *buf, dyxNode *node);
include/bgbdy_auto.h:BGBDY_API void dyxPrint(dyxNode *node);
include/bgbdy_auto.h:BGBDY_API int DYX_SBXE_WriteNodeList(byte *buf, dyxNode *expr);
include/bgbdy_auto.h:BGBDY_API dyxNode *DYX_SBXE_ReadNodeList(byte *buf, int sz);
include/bgbdy_auto.h:BGBDY_API int DYSH_Register(char *name, char *desc,int (*func)(dyshShell shell, char **args));
include/bgbdy_auto.h:BGBDY_API int dyshRegisterCommand(char *name, char *desc,int (*func)(dyshShell shell, char **args));
include/bgbdy_auto.h:BGBDY_API dyshShell dyshNewShellDefault(void);
include/bgbdy_auto.h:BGBDY_API void dyshPuts(dyshShell shell, char *str);
include/bgbdy_auto.h:BGBDY_API void dyshPrintv(dyshShell shell, char *str, va_list lst);
include/bgbdy_auto.h:BGBDY_API void dyshPrintf(dyshShell shell, char *str, ...);
include/bgbdy_auto.h:BGBDY_API void dyshAddHistory(dyshShell shell, char *str);
include/bgbdy_auto.h:BGBDY_API char *dyshGetHistory(dyshShell shell, int idx);
include/bgbdy_auto.h:BGBDY_API int dyshExecuteCmd(dyshShell shell, char *str);
include/bgbdy_auto.h:BGBDY_API int dyshExecuteScript(dyshShell shell, char *str);
include/bgbdy_auto.h:BGBDY_API char *dyshComplete(dyshShell shell, char *str);
include/bgbdy_auto.h:BGBDY_API int dyshExecuteScriptFile(dyshShell shell, char *name);
include/bgbdy_auto.h:BGBDY_API void dy_init(void *base);
include/bgbdy_auto.h:BGBDY_API void dy_init2(int (*fcn)());
include/bgbdy_auto.h:BGBDY_API void dyAddLogHook(void (*fcn)(char *str));
include/bgbdy_auto.h:BGBDY_API void dyAddTypeHook(char *(*fcn)(void *p));
include/bgbdy_auto.h:BGBDY_API char *dygettype(dyt p);
include/bgbdy_auto.h:BGBDY_API int dytypep(dyt p, char *ty);
include/bgbdy_auto.h:BGBDY_API dyt dybool(int v);
include/bgbdy_auto.h:BGBDY_API dyt dyint(int v);
include/bgbdy_auto.h:BGBDY_API dyt dylong(s64 v);
include/bgbdy_auto.h:BGBDY_API dyt dylonglong(s64 v);
include/bgbdy_auto.h:BGBDY_API dyt dyfixint(int v);
include/bgbdy_auto.h:BGBDY_API dyt dyfixlong(s64 v);
include/bgbdy_auto.h:BGBDY_API dyt dyflonum(float v);
include/bgbdy_auto.h:BGBDY_API dyt dyfloat(float v);
include/bgbdy_auto.h:BGBDY_API dyt dydouble(double v);
include/bgbdy_auto.h:BGBDY_API dyt dyfcomplex(fcomplex v);
include/bgbdy_auto.h:BGBDY_API dyt dydcomplex(dcomplex v);
include/bgbdy_auto.h:BGBDY_API dyt dycomplex2(double r, double i);
include/bgbdy_auto.h:BGBDY_API dyt dystring(char *s);
include/bgbdy_auto.h:BGBDY_API char *dystrdup(char *s);
include/bgbdy_auto.h:BGBDY_API char *dystrsym(char *s);
include/bgbdy_auto.h:BGBDY_API char *dystrkey(char *s);
include/bgbdy_auto.h:BGBDY_API dyt dysymbol(char *s);
include/bgbdy_auto.h:BGBDY_API dyt dykeyword(char *s);
include/bgbdy_auto.h:BGBDY_API dyt dysym(char *s);
include/bgbdy_auto.h:BGBDY_API dyt dyksym(char *s);
include/bgbdy_auto.h:BGBDY_API dyt dywstring(u16 *s);
include/bgbdy_auto.h:BGBDY_API dyt dywstring2(char *str);
include/bgbdy_auto.h:BGBDY_API dyt dyustring(char *s);
include/bgbdy_auto.h:BGBDY_API dyt dyusym(char *s);
include/bgbdy_auto.h:BGBDY_API int dyboolp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyfixintp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyintp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dylongp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dylonglongp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyflonump(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyfloatp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dydoublep(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyrealp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyfcomplexp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dydcomplexp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dycomplexp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dystringp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dysymbolp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dykeywordp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dywstringp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyustringp(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyusymp(dyt p);
include/bgbdy_auto.h:BGBDY_API char *dystringv(dyt p);
include/bgbdy_auto.h:BGBDY_API char *dysymbolv(dyt p);
include/bgbdy_auto.h:BGBDY_API char *dysymv(dyt p);
include/bgbdy_auto.h:BGBDY_API u16 *dywstringv(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyintv(dyt p);
include/bgbdy_auto.h:BGBDY_API s64 dylongv(dyt p);
include/bgbdy_auto.h:BGBDY_API s64 dylonglongv(dyt p);
include/bgbdy_auto.h:BGBDY_API float dyfloatv(dyt p);
include/bgbdy_auto.h:BGBDY_API double dydoublev(dyt p);
include/bgbdy_auto.h:BGBDY_API double dyrealv(dyt p);
include/bgbdy_auto.h:BGBDY_API dcomplex dycomplexv(dyt p);
include/bgbdy_auto.h:BGBDY_API fcomplex dyfcomplexv(dyt p);
include/bgbdy_auto.h:BGBDY_API dcomplex dydcomplexv(dyt p);
include/bgbdy_auto.h:BGBDY_API double dycreal(dyt p);
include/bgbdy_auto.h:BGBDY_API double dycimag(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dyvec2(float x, float y);
include/bgbdy_auto.h:BGBDY_API dyt dyvec3(float x, float y, float z);
include/bgbdy_auto.h:BGBDY_API dyt dyvec4(float x, float y, float z, float w);
include/bgbdy_auto.h:BGBDY_API dyt dyvec2fv(float *v);
include/bgbdy_auto.h:BGBDY_API dyt dyvec3fv(float *v);
include/bgbdy_auto.h:BGBDY_API dyt dyvec4fv(float *v);
include/bgbdy_auto.h:BGBDY_API dyt dyvec2dv(double *v);
include/bgbdy_auto.h:BGBDY_API dyt dyvec3dv(double *v);
include/bgbdy_auto.h:BGBDY_API dyt dyvec4dv(double *v);
include/bgbdy_auto.h:BGBDY_API int dyvec2p(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyvec3p(dyt p);
include/bgbdy_auto.h:BGBDY_API int dyvec4p(dyt p);
include/bgbdy_auto.h:BGBDY_API void dyvecv2fv(dyt p, float *v);
include/bgbdy_auto.h:BGBDY_API void dyvecv3fv(dyt p, float *v);
include/bgbdy_auto.h:BGBDY_API void dyvecv4fv(dyt p, float *v);
include/bgbdy_auto.h:BGBDY_API void dyvecv2dv(dyt p, double *v);
include/bgbdy_auto.h:BGBDY_API void dyvecv3dv(dyt p, double *v);
include/bgbdy_auto.h:BGBDY_API void dyvecv4dv(dyt p, double *v);
include/bgbdy_auto.h:BGBDY_API vec2 dyvec2v(dyt p);
include/bgbdy_auto.h:BGBDY_API vec3 dyvec3v(dyt p);
include/bgbdy_auto.h:BGBDY_API vec4 dyvec4v(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dyhash(int cnt);
include/bgbdy_auto.h:BGBDY_API int dyhashp(dyt p);
include/bgbdy_auto.h:BGBDY_API dyt dyhashget(dyt p, char *str);
include/bgbdy_auto.h:BGBDY_API dyt dyhashset(dyt obj, char *var, dyt val);
include/bgbdy_auto.h:BGBDY_API bgalMember *bgalBreed(bgalMember *obja, bgalMember *objb);
include/bgbdy_auto.h:BGBDY_API double bgalTest(bgalMember *obj, void *data);
include/bgbdy_auto.h:BGBDY_API void bgalStepTest(bgalContext *ctx, void *data);
include/bgbdy_auto.h:BGBDY_API void bgalStepSelect(bgalContext *ctx);
include/bgbdy_auto.h:BGBDY_API void bgalStepBreed(bgalContext *ctx);
include/bgbdy_auto.h:BGBDY_API void bgalStepStatus(bgalContext *ctx);
include/bgbdy_auto.h:BGBDY_API void bgalStep(bgalContext *ctx);
include/bgbdy_auto.h:BGBDY_API void bgalSetup(bgalContext *ctx, void *data);
include/bgbdy_auto.h:BGBDY_API void bgalEvolve(bgalContext *ctx, void *data);
include/bgbdy_auto.h:BGBDY_API bgalMember *bgalAllocMember(bgalContext *ctx);
include/bgbdy_auto.h:BGBDY_API void bgalFreeMember(bgalMember *obj);
include/bgbdy_auto.h:BGBDY_API void bgalSterilize(bgalContext *ctx);
include/bgbdy_auto.h:BGBDY_API bgalMember *bgalPickMember(bgalContext *ctx, bgalMember *skip);
include/bgbdy_auto.h:BGBDY_API void bgalAddData(bgalContext *ctx, void *data);
include/bgbdy_auto.h:BGBDY_API bgalMember *bgal_alloc_default(bgalContext *ctx);
include/bgbdy_auto.h:BGBDY_API bgalContext *bgalNewGenCtx(int n_gen, int sz_pop, int n_keep);
include/bgbdy_auto.h:BGBDY_API bgalContext *bgalNewGenMinCtx(int sz_vec, int n_gen, int sz_pop, int n_keep);
include/bgbdy_auto.h:BGBDY_API bgalContext *bgalNewGenMaxCtx(int sz_vec, int n_gen, int sz_pop, int n_keep);
include/bgbdy_auto.h:BGBDY_API bgalContext *bgalNewGenBitsMinCtx(int sz_bits,int n_gen, int sz_pop, int n_keep);
include/bgbdy_auto.h:BGBDY_API bgalContext *bgalNewGenBitsMaxCtx(int sz_bits,int n_gen, int sz_pop, int n_keep);
include/bgbdy_auto.h:BGBDY_API bgalContext *bgalNewGenProgMinCtx(int sz_vec, int sz_bits, int sz_prog,int n_gen, int sz_pop, int n_keep);
include/bgbdy_auto.h:BGBDY_API bgalContext *bgalNewGenProgMaxCtx(int sz_vec, int sz_bits, int sz_prog,int n_gen, int sz_pop, int n_keep);
include/bgbdy_auto.h:BGBDY_API int BGAL_Gray(int i);
include/bgbdy_auto.h:BGBDY_API int BGAL_UnGray(int i);
include/bgbdy_auto.h:BGBDY_API int bgalEval(bgalMember *obj, float *iv, int ni, float *ov, int *rno);
include/bgbdy_auto.h:BGBDY_API bgalNeuronType *bgalLookupNeuronType(char *name);
include/bgbdy_auto.h:BGBDY_API bgalNeuronType *bgalGetNeuronType(char *name);
include/bgbdy_auto.h:BGBDY_API bgalNeuron *bgalAllocNeuron(char *type);
include/bgbdy_auto.h:BGBDY_API bgalNeuronLink *bgalLookupNeuronLink(bgalNeuron *from, bgalNeuron *to);
include/bgbdy_auto.h:BGBDY_API bgalNeuronLink *bgalLinkNeurons(bgalNeuron *src, bgalNeuron *dst);
include/bgbdy_auto.h:BGBDY_API void bgalNeuronFire(bgalNeuron *node);
include/bgbdy_chan.h:	_try_=DYLL_BeginTry(); \
include/bgbdy_chan.h:#define dyllEndTry()	} DYLL_EndTry(_try_);
include/bgbdy_chan.h:void (*puts)(dyshConsole self, char *str);
include/bgbdy_chan.h:void (*Puts)(dyshShell self, char *str);
include/bgbdy_chan.h:void (*AddHistory)(dyshShell self, char *str);
include/bgbdy_chan.h:char *(*GetHistory)(dyshShell self, int idx);
include/bgbdy_chan.h:int (*ExecuteCmd)(dyshShell self, char *str);
include/bgbdy_chan.h:int (*ExecuteScript)(dyshShell self, char *str);
include/bgbdy_chan.h:char *(*Complete)(dyshShell self, char *str);
include/bgbdy_chan.h:int (*func)(dyshShell shell, char **args);
include/bgbdy_oo.h:void *(*get_slot)	(void *p, char *s);
include/bgbdy_oo.h:void *(*set_slot)	(void *p, char *s, void *v);
include/bgbdy_oo.h:char *(*nxt_slot)	(void *p, char *s);
include/bgbdy_oo.h:void *(*call_method)	(void *p, char *s, void **a, int n);
include/bgbdy_oo.h:void *(*apply)		(void *p, void **a, int n);
include/bgbdy_oo.h:void *(*try_set_slot)	(void *p, char *s, void *v);
include/bgbdy_oo.h:void *(*get_del)	(void *p, char *s);
include/bgbdy_oo.h:void *(*set_del)	(void *p, char *s, void *v);
include/bgbdy_oo.h:char *(*nxt_del)	(void *p, char *s);
include/bgbdy_oo.h:void *(*applyobj)	(void *p, void *o, void **a, int n);
include/bgbdy_oo.h:char *(*tostring)	(void *p);
include/bgbdy_oo.h:dyt (*fa)(dyt *args, int nargs);
include/bgbdy_oo.h:dyt (*fad)(dyt data, dyt *args, int nargs);
include/bgbdy_oo.h:dyt (*f0)();
include/bgbdy_oo.h:dyt (*f1)(dyt);
include/bgbdy_oo.h:dyt (*f2)(dyt,dyt);
include/bgbdy_oo.h:dyt (*f3)(dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f4)(dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f5)(dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f6)(dyt,dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f7)(dyt,dyt,dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f8)(dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*fa)(dyt self, dyt *args, int nargs);
include/bgbdy_oo.h:dyt (*fad)(dyt self, dyt data, dyt *args, int nargs);
include/bgbdy_oo.h:dyt (*f0)(dyt);
include/bgbdy_oo.h:dyt (*f1)(dyt,dyt);
include/bgbdy_oo.h:dyt (*f2)(dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f3)(dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f4)(dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f5)(dyt,dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f6)(dyt,dyt,dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f7)(dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:dyt (*f8)(dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt);
include/bgbdy_oo.h:	void **args, int szargs);
include/bgbdy_oo.h:typedef void *(*BGBDYC_ApplyV_t)(void *obj, dyt mth, char *sig, va_list args);
include/bgbdy_oo.h:typedef void *(*BGBDYC_ApplyU_t)(void *obj, dyt mth, char *sig, void **args, int szargs);
include/bgbdy_vfile2.h:int (*vfread)(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_vfile2.h:int (*vfwrite)(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_vfile2.h:int (*vfgetc)(VFILE *fd);
include/bgbdy_vfile2.h:int (*vfputc)(int c, VFILE *fd);
include/bgbdy_vfile2.h:int (*vfflush)(VFILE *fd);
include/bgbdy_vfile2.h:vfoffs_t (*vfseek)(VFILE *fd, vfoffs_t pos, int rel);
include/bgbdy_vfile2.h:vfoffs_t (*vftell)(VFILE *fd);
include/bgbdy_vfile2.h:int (*vfeof)(VFILE *fd);
include/bgbdy_vfile2.h:int (*vfclose)(VFILE *fd);
include/bgbdy_vfile2.h:int (*vfioctl)(VFILE *fd, int req, void *arg);
include/bgbdy_vfile2.h:VFILE *(*vfopen)(VFILE_Mount *mnt, char *name, char *mode);
include/bgbdy_vfile2.h:	char *src, char *dst, char **ops);
include/bgbdy_vfile2.h:int (*vfumount)(VFILE_Mount *mnt);
include/bgbdy_vfile2.h:void *(*vf_opendir)(VFILE_Mount *mnt, char *name);
include/bgbdy_vfile2.h:void (*vf_closedir)(VFILE_Mount *mnt, void *dir);
include/bgbdy_vfile2.h:char *(*vf_readdir)(VFILE_Mount *mnt, void *dir);
include/bgbdy_vfile2.h:int (*vf_statflags)(VFILE_Mount *mnt, char *name);
include/bgbdy_wref.h:u64 (*alloc_mem)(dyWRefCtx *ctx, u64 sz);
include/bgbdy_wref.h:int (*free_mem)(dyWRefCtx *ctx, u64 offs);
include/bgbdy_wref.h:u64 (*realloc_mem)(dyWRefCtx *ctx, u64 offs, u64 sz);
include/bgbdy_wref.h:int (*copy_mem)(dyWRefCtx *ctx, u64 dst, u64 src, u64 sz);
include/bgbdy_wref.h:char *(*gettype_mem)(dyWRefCtx *ctx, u64 offs);
include/bgbdy_wref.h:int (*read_mem)(void *buf, int sz, dyWRefCtx *ctx, u64 offs);
include/bgbdy_wref.h:int (*write_mem)(void *buf, int sz, dyWRefCtx *ctx, u64 offs);
include/bgbdy_xml.h:void (*prints_f)(void *buf, char *str);
include/bgbdy_xml.h:void *(*get_pos_f)(dysReadStream strm);
include/bgbdy_xml.h:void (*set_pos_f)(dysReadStream strm, void *pos);
include/bgbdy_xml.h:int (*peek_char_f)(dysReadStream strm);
include/bgbdy_xml.h:int (*read_char_f)(dysReadStream strm);
include/bgbdy_xml.h:int (*peek_idx_f)(dysReadStream strm, int idx);
include/bgbgc.h:#define gcSet(pp, p)	gcset((void **)(&(pp)), p);
include/bgbgc.h:#define gcSetsb(p, v)	gcsetbyte(&(p), v);
include/bgbgc.h:#define gcSetub(p, v)	gcsetbyte(&(p), v);
include/bgbgc.h:#define gcSetsw(p, v)	gcsetword(&(p), v);
include/bgbgc.h:#define gcSetuw(p, v)	gcsetword(&(p), v);
include/bgbgc.h:#define gcSetb(p, v)	gcsetbyte(&(p), v);
include/bgbgc.h:#define gcSetw(p, v)	gcsetword(&(p), v);
include/bgbgc.h:#define gcSeti(p, v)	gcsetint(&(p), v);
include/bgbgc.h:#define gcSetl(p, v)	gcsetlong(&(p), v);
include/bgbgc.h:#define gcSetf(p, v)	gcsetfloat(&(p), v);
include/bgbgc.h:#define gcSetd(p, v)	gcsetdouble(&(p), v);
include/bgbgc_auto.h:void BGBGC_PushRootFrame();
include/bgbgc_auto.h:void BGBGC_PopRootFrame();
include/bgbgc_auto.h:void BGBGC_PushFrameRoot(void **ref);
include/bgbgc_auto.h:void bgbgc_thread_markctx(thContext *inf);
include/bgbgc_auto.h:void bgbgc_thread_mark();
include/bgbgc_auto.h:void bgbgc_thread_init();
include/bgbgc_auto.h:BGBGC_API int thAllocTls();
include/bgbgc_auto.h:BGBGC_API int thAllocTlsName(char *name, int sz);
include/bgbgc_auto.h:BGBGC_API void thFreeTls(int idx);
include/bgbgc_auto.h:BGBGC_API void *thGetTlsValue(int idx);
include/bgbgc_auto.h:BGBGC_API void thSetTlsValue(int idx, void *val);
include/bgbgc_auto.h:BGBGC_API void *thGetTlsPtr(int idx);
include/bgbgc_auto.h:BGBGC_API void *thThread(int (*fcn)(void *ptr), void *ptr);
include/bgbgc_auto.h:void BGBGC_SuspendThreads();
include/bgbgc_auto.h:void BGBGC_ResumeThreads();
include/bgbgc_auto.h:BGBGC_API void *thMutex();
include/bgbgc_auto.h:BGBGC_API void thLockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API int thTryLockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thUnlockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thFreeMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void *thFastMutex();
include/bgbgc_auto.h:BGBGC_API void thLockFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API int thTryLockFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thUnlockFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thFreeFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thSleep(int ms);
include/bgbgc_auto.h:BGBGC_API thContext *thGetContext();
include/bgbgc_auto.h:BGBGC_API int thGetTlsTlsW32();
include/bgbgc_auto.h:BGBGC_API void thWaitPtr(void *ptr);
include/bgbgc_auto.h:BGBGC_API void thSignalPtr(void *ptr);
include/bgbgc_auto.h:void BGBGC_SuspendThreads();
include/bgbgc_auto.h:void BGBGC_ResumeThreads();
include/bgbgc_auto.h:void *BGBGC_ThreadProcLnx(void *parm);
include/bgbgc_auto.h:BGBGC_API void *thThread(int (*fcn)(void *ptr), void *ptr);
include/bgbgc_auto.h:void *thMutexLL();
include/bgbgc_auto.h:BGBGC_API void *thMutex();
include/bgbgc_auto.h:BGBGC_API void thLockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API int thTryLockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thUnlockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thFreeMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void *thFastMutex();
include/bgbgc_auto.h:BGBGC_API void thLockFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API int thTryLockFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thUnlockFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thFreeFastMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thSleep(int ms);
include/bgbgc_auto.h:BGBGC_API thContext *thGetContext();
include/bgbgc_auto.h:BGBGC_API void thWaitPtr(void *ptr);
include/bgbgc_auto.h:BGBGC_API void thSignalPtr(void *ptr);
include/bgbgc_auto.h:BGBGC_API void *thThread(int (*fcn)(void *ptr), void *ptr);
include/bgbgc_auto.h:BGBGC_API void *thMutex();
include/bgbgc_auto.h:BGBGC_API void thLockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API int thTryLockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thUnlockMutex(void *p);
include/bgbgc_auto.h:BGBGC_API void thSleep(int ms);
include/bgbgc_auto.h:BGBGC_API void thWaitPtr(void *ptr);
include/bgbgc_auto.h:BGBGC_API void thSignalPtr(void *ptr);
include/bgbgc_auto.h:void *thNewQueue();
include/bgbgc_auto.h:int thQueueMsg(void *obj);
include/bgbgc_auto.h:int thQueueMsgP(void *obj);
include/bgbgc_auto.h:void *thQueueRecv(void *obj);
include/bgbgc_auto.h:void *thQueueTryRecv(void *obj);
include/bgbgc_auto.h:void *thQueueSend(void *obj, void *val);
include/bgbgc_auto.h:void thThrow(char *name);
include/bgbgc_auto.h:void thTryCatchFinal(void *data,void (*try_f)(void *data), void (*catch_f)(void *data, char *name), void (*final_f)(void *data));
include/bgbgc_auto.h:void thTryCatch(void *data,void (*try_f)(void *data), void (*catch_f)(void *data, char *name));
include/bgbgc_auto.h:void thTryFinal(void *data,void (*try_f)(void *data), void (*final_f)(void *data));
include/bgbgc_auto.h:int BGBGC_EH_Init();
include/bgbgc_auto.h:BGBGC_ExceptionType *BGBGC_EH_LookupType(char *name);
include/bgbgc_auto.h:BGBGC_ExceptionType *BGBGC_EH_GetType(char *name);
include/bgbgc_auto.h:int BGBGC_EH_TypeIsP(BGBGC_ExceptionType *src, BGBGC_ExceptionType *dst);
include/bgbgc_auto.h:BGBGC_API int gcehRegisterException(char *name, char *parent);
include/bgbgc_auto.h:BGBGC_API gcehException gcehTryFl(void (*func)(void *data), void *data, int fl);
include/bgbgc_auto.h:BGBGC_API gcehException gcehTry(void (*func)(void *data), void *data);
include/bgbgc_auto.h:BGBGC_API gcehException gcehTrySys(void (*func)(void *data), void *data);
include/bgbgc_auto.h:BGBGC_API void gcehThrow(gcehException ex);
include/bgbgc_auto.h:BGBGC_API gcehException gcehNew(char *name, char *msg, void *data);
include/bgbgc_auto.h:BGBGC_API void gcehThrowNewMsgData(char *name, char *msg, void *data);
include/bgbgc_auto.h:BGBGC_API void gcehThrowNew(char *name);
include/bgbgc_auto.h:BGBGC_API void gcehThrowNewMsg(char *name, char *msg);
include/bgbgc_auto.h:BGBGC_API void gcehThrowNewData(char *name, void *data);
include/bgbgc_auto.h:BGBGC_API int gcehCheckIsP(gcehException ex, char *name);
include/bgbgc_auto.h:BGBGC_API void gcehFree(gcehException ex);
include/bgbgc_auto.h:BGBGC_API char *gcehGetName(gcehException ex);
include/bgbgc_auto.h:BGBGC_API char *gcehGetMessage(gcehException ex);
include/bgbgc_auto.h:BGBGC_API void *gcehGetData(gcehException ex);
include/bgbgc_auto.h:int BGBGC_InitLow();
include/bgbgc_auto.h:void *BGBGC_AllocLObj(int size);
include/bgbgc_auto.h:int BGBGC_LookupLObj(void *p);
include/bgbgc_auto.h:int BGBGC_FreeLObj(void *p);
include/bgbgc_auto.h:int BGBGC_FreeLObjIdx(int i);
include/bgbgc_auto.h:int BGBGC_ShiftLObj2();
include/bgbgc_auto.h:void BGBGC_ShiftLObj_Swap(int i, int j);
include/bgbgc_auto.h:void BGBGC_ShiftLObj_Sort(int base, int lim);
include/bgbgc_auto.h:int BGBGC_ShiftLObj();
include/bgbgc_auto.h:int BGBGC_LookupLObjS(void *p);
include/bgbgc_auto.h:BGBGC_Chunk *BGBGC_NewBlock(int size, int exec);
include/bgbgc_auto.h:BGBGC_Chunk *BGBGC_GetChunk(void *p);
include/bgbgc_auto.h:int BGBGC_ChunkGetEnt(BGBGC_Chunk *chk, int ent);
include/bgbgc_auto.h:int BGBGC_ChunkSetEnt(BGBGC_Chunk *chk, int ent, int val);
include/bgbgc_auto.h:int BGBGC_CountFreeCells(BGBGC_Chunk *chk, int rov, int cnt);
include/bgbgc_auto.h:int BGBGC_CountUsedCells(BGBGC_Chunk *chk, int rov, int cnt);
include/bgbgc_auto.h:void *BGBGC_AllocChk(BGBGC_Chunk *chk, int size);
include/bgbgc_auto.h:int BGBGC_FreeChk(BGBGC_Chunk *chk, int idx);
include/bgbgc_auto.h:int BGBGC_Free(void *p);
include/bgbgc_auto.h:int BGBGC_MarkAtomic(void *p);
include/bgbgc_auto.h:int BGBGC_MarkAtomicP(void *p);
include/bgbgc_auto.h:void *BGBGC_GetBase(void *p);
include/bgbgc_auto.h:void *BGBGC_TryGetBase(void *p);
include/bgbgc_auto.h:void *BGBGC_TryGetPrecise(void *p);
include/bgbgc_auto.h:void *BGBGC_MakePrecise(void *p);
include/bgbgc_auto.h:int BGBGC_Init();
include/bgbgc_auto.h:int BGBGC_BaseHeap(int heap);
include/bgbgc_auto.h:int BGBGC_InitCons();
include/bgbgc_auto.h:void BGBGC_AllocCBlk();
include/bgbgc_auto.h:void *BGBGC_AllocConsInner();
include/bgbgc_auto.h:BGBGC_API void *BGBGC_AllocCons();
include/bgbgc_auto.h:BGBGC_API void BGBGC_FreeCons(void *p);
include/bgbgc_auto.h:int BGBGC_CheckCons(void *p);
include/bgbgc_auto.h:BGBGC_API int BGBGC_ConsP(void *p);
include/bgbgc_auto.h:int BGBGC_MarkCons(void *p, int i);
include/bgbgc_auto.h:int BGBGC_MarkConsPrecise(int idx);
include/bgbgc_auto.h:int BGBGC_IncCons(void *p);
include/bgbgc_auto.h:int BGBGC_DecCons(void *p);
include/bgbgc_auto.h:int BGBGC_SafeDecCons(void *p);
include/bgbgc_auto.h:void *BGBGC_DefileCons(void *p);
include/bgbgc_auto.h:void *BGBGC_UnDefileCons(void *p);
include/bgbgc_auto.h:void *BGBGC_PreciseGetConsPtr(void *p);
include/bgbgc_auto.h:void *BGBGC_AllocConsPrecise();
include/bgbgc_auto.h:int BGBGC_SweepCons();
include/bgbgc_auto.h:int BGBGC_ProbeDalayGC(int mode);
include/bgbgc_auto.h:int BGBGC_CheckNoGC();
include/bgbgc_auto.h:int BGBGC_TryFreeTiny(void *p, int szi);
include/bgbgc_auto.h:int BGBGC_FlushTiny();
include/bgbgc_auto.h:void *BGBGC_Alloc(int size);
include/bgbgc_auto.h:void *BGBGC_AllocExec(int size);
include/bgbgc_auto.h:int BGBGC_Mark(void *p);
include/bgbgc_auto.h:int BGBGC_MarkObj(void *p);
include/bgbgc_auto.h:int BGBGC_MarkPrecise(void *p);
include/bgbgc_auto.h:int BGBGC_MarkObjPrecise(void *p);
include/bgbgc_auto.h:int BGBGC_CheckObjPtr(void *p);
include/bgbgc_auto.h:int BGBGC_SetLockObj(void *p, int l);
include/bgbgc_auto.h:int BGBGC_IncRef(void *p);
include/bgbgc_auto.h:int BGBGC_DecRef(void *p);
include/bgbgc_auto.h:int BGBGC_SafeDecRef(void *p);
include/bgbgc_auto.h:void *BGBGC_Defile(void *p);
include/bgbgc_auto.h:void *BGBGC_UnDefile(void *p);
include/bgbgc_auto.h:void *BGBGC_PreciseGetPtr(void *p);
include/bgbgc_auto.h:void *BGBGC_AllocPrecise(int size);
include/bgbgc_auto.h:BGBGC_API int BGBGC_ScanRange(void **p, int cnt);
include/bgbgc_auto.h:BGBGC_API int BGBGC_ScanRange2(void **p, int cnt);
include/bgbgc_auto.h:int BGBGC_PreSweep();
include/bgbgc_auto.h:int BGBGC_Sweep();
include/bgbgc_auto.h:int BGBGC_PostSweep();
include/bgbgc_auto.h:int BGBGC_StackBase(void *p);
include/bgbgc_auto.h:int BGBGC_ScanStack();
include/bgbgc_auto.h:int BGBGC_Collect();
include/bgbgc_auto.h:void BGBGC_CollectHandlePause();
include/bgbgc_auto.h:int BGBGC_RunCollect();
include/bgbgc_auto.h:void BGBGC_CollectAssign(void **pp, void *p);
include/bgbgc_auto.h:void BGBGC_TryMarkSafe(void *p);
include/bgbgc_auto.h:void BGBGC_CollectAssignPrecise(void **pp, void *p);
include/bgbgc_auto.h:void BGBGC_CollectDelay();
include/bgbgc_auto.h:void BGBGC_CollectPause();
include/bgbgc_auto.h:void BGBGC_CollectUnpause();
include/bgbgc_auto.h:void BGBGC_CollectUnpauseDelay();
include/bgbgc_auto.h:int BGBGC_CollectLoop(void *p);
include/bgbgc_auto.h:int BGBGC_StartCollectLoop();
include/bgbgc_auto.h:int BGBGC_GetUsedCells();
include/bgbgc_auto.h:int BGBGC_GetFreeCells();
include/bgbgc_auto.h:BGBGC_API void BGBGC_AddMarkHandler(void (*fcn)());
include/bgbgc_auto.h:int BGBGC_SpawnThread();
include/bgbgc_auto.h:int BGBGC_DeinitThread();
include/bgbgc_auto.h:void BGBGC_InitSpace();
include/bgbgc_auto.h:int BGBGC_SpaceAllocSafeP(int bits);
include/bgbgc_auto.h:void *BGBGC_SpaceAlloc(int bits);
include/bgbgc_auto.h:int BGBGC_IndexSpace(void *ptr);
include/bgbgc_auto.h:BGBGC_API int gcllSpaceAllocSafeP(int bits);
include/bgbgc_auto.h:BGBGC_API void *gcllSpaceNew(char *type, int bits);
include/bgbgc_auto.h:BGBGC_API void *gcllSpaceLookup(char *type);
include/bgbgc_auto.h:BGBGC_API char *gcllSpaceType(void *ptr);
include/bgbgc_auto.h:BGBGC_API int gcllSpaceBits(void *ptr);
include/bgbgc_auto.h:BGBGC_API void *gcllSpaceBase(void *ptr);
include/bgbgc_auto.h:BGBGC_API void *gcllSpaceEnd(void *ptr);
include/bgbgc_auto.h:BGBGC_API s64 gcllSpaceOffset(void *ptr);
include/bgbgc_auto.h:BGBGC_API void *gcllSpaceWrap(char *type, s64 offs);
include/bgbgc_auto.h:BGBGC_API int gcllSpaceP(void *ptr);
include/bgbgc_auto.h:BGBGC_API void *gcllSpaceAbsoluteBase(void *ptr);
include/bgbgc_auto.h:BGBGC_API s64 gcllSpaceAbsoluteOffset(void *ptr);
include/bgbgc_auto.h:BGBGC_API void *gcllSpaceWrapAbsolute(s64 offs);
include/bgbgc_auto.h:BGBGC_ObjType *BGBGC_NewType(char *name, char *form);
include/bgbgc_auto.h:BGBGC_ObjType *BGBGC_FindTypeHash(char *type);
include/bgbgc_auto.h:void BGBGC_AddTypeHash(BGBGC_ObjType *type);
include/bgbgc_auto.h:BGBGC_ObjType *BGBGC_FindType(char *type);
include/bgbgc_auto.h:BGBGC_ObjType *BGBGC_FetchType(char *type);
include/bgbgc_auto.h:int BGBGC_IndexType(char *name);
include/bgbgc_auto.h:void *BGBGC_New(char *type, int size);
include/bgbgc_auto.h:void *BGBGC_NewExec(char *type, int size);
include/bgbgc_auto.h:void *BGBGC_NewPrecise(char *type, int size);
include/bgbgc_auto.h:void *BGBGC_NewRC(char *type, int size, int fl);
include/bgbgc_auto.h:int BGBGC_MarkInfoSane(BGBGC_ObjInfo *inf);
include/bgbgc_auto.h:int BGBGC_InfoSaneP(BGBGC_ObjInfo *inf);
include/bgbgc_auto.h:int BGBGC_HandleMark(void *p);
include/bgbgc_auto.h:int BGBGC_HandleDestroy(void *p);
include/bgbgc_auto.h:int BGBGC_HandlePreserve(void *p);
include/bgbgc_auto.h:int BGBGC_SetMark(char *type, int (*fn)(void *p));
include/bgbgc_auto.h:int BGBGC_SetDestroy(char *type, int (*fn)(void *p));
include/bgbgc_auto.h:int BGBGC_SetPreserve(char *type, int (*fn)(void *p));
include/bgbgc_auto.h:BGBGC_ObjType *BGBGC_GetType(void *p);
include/bgbgc_auto.h:BGBGC_ObjType *BGBGC_GetTypeFast(void *p);
include/bgbgc_auto.h:char *BGBGC_GetTypeNameHook(void *p);
include/bgbgc_auto.h:char *BGBGC_GetTypeName(void *p);
include/bgbgc_auto.h:char *BGBGC_GetTypeNameFast(void *p);
include/bgbgc_auto.h:int BGBGC_GetTypeIdx(void *p);
include/bgbgc_auto.h:int BGBGC_GetTypeIdxFast(void *p);
include/bgbgc_auto.h:int BGBGC_GetSize(void *p);
include/bgbgc_auto.h:int BGBGC_GetSizeFast(void *p);
include/bgbgc_auto.h:void *BGBGC_GetObjBase(void *p);
include/bgbgc_auto.h:size_t BGBGC_GetOffset(void *p);
include/bgbgc_auto.h:size_t BGBGC_GetRelSize(void *p);
include/bgbgc_auto.h:int BGBGC_TypeP(void *p, char *type);
include/bgbgc_auto.h:void *BGBGC_Copy(void *p);
include/bgbgc_auto.h:int BGBGC_IncPtr(void *p);
include/bgbgc_auto.h:int BGBGC_DecPtr(void *p);
include/bgbgc_auto.h:int BGBGC_SafeDecPtr(void *p);
include/bgbgc_auto.h:BGBGC_API void *BGBGC_GetTypeVTab(char *str);
include/bgbgc_auto.h:BGBGC_API void BGBGC_SetTypeVTab(char *str, void *p);
include/bgbgc_auto.h:BGBGC_API void *BGBGC_GetObjVTab(void *p);
include/bgbgc_auto.h:int BGBGC_InitTY();
include/bgbgc_auto.h:BGBGC_API void gc_init(void *base);
include/bgbgc_auto.h:BGBGC_API void gc_init2(int (*fcn)(void *ptr), void *ptr);
include/bgbgc_auto.h:BGBGC_API void gc_deinit();
include/bgbgc_auto.h:BGBGC_API void gcAddTypeHook(char *(*fcn)(void *p));
include/bgbgc_auto.h:BGBGC_API void gcAddLogHook(void (*fcn)(char *str));
include/bgbgc_auto.h:BGBGC_API void gc_printf(char *str, ...);
include/bgbgc_auto.h:BGBGC_API int gcDelayGC(int mode);
include/bgbgc_auto.h:BGBGC_API void *gcalloc(int sz);
include/bgbgc_auto.h:BGBGC_API void *gctalloc(char *ty, int sz);
include/bgbgc_auto.h:BGBGC_API void *gcatomic(int sz);
include/bgbgc_auto.h:BGBGC_API void *gctatomic(char *ty, int sz);
include/bgbgc_auto.h:BGBGC_API void *gcweak(int sz);
include/bgbgc_auto.h:BGBGC_API void *gcexec(int sz);
include/bgbgc_auto.h:BGBGC_API void *gctexec(char *ty, int sz);
include/bgbgc_auto.h:BGBGC_API void *gcallocrc(int sz);
include/bgbgc_auto.h:BGBGC_API void *gcexecrc(int sz);
include/bgbgc_auto.h:BGBGC_API void *gctallocrc(char *ty, int sz);
include/bgbgc_auto.h:BGBGC_API void *gctexecrc(char *ty, int sz);
include/bgbgc_auto.h:BGBGC_API void *gcrealloc(void *p, int sz);
include/bgbgc_auto.h:BGBGC_API void gcfree(void *p);
include/bgbgc_auto.h:BGBGC_API char *gcgettype(void *p);
include/bgbgc_auto.h:BGBGC_API int gcgetsize(void *p);
include/bgbgc_auto.h:BGBGC_API void *gcgetbase(void *p);
include/bgbgc_auto.h:BGBGC_API int gcIndexType(char *name);
include/bgbgc_auto.h:BGBGC_API char *gcGetType(void *p);
include/bgbgc_auto.h:BGBGC_API int gcGetSize(void *p);
include/bgbgc_auto.h:BGBGC_API char *gcGetTypeFast(void *p);
include/bgbgc_auto.h:BGBGC_API int gcGetSizeFast(void *p);
include/bgbgc_auto.h:BGBGC_API int gcGetTypeIdx(void *p);
include/bgbgc_auto.h:BGBGC_API int gcGetTypeIdxFast(void *p);
include/bgbgc_auto.h:BGBGC_API int gctypep(void *p, char *ty);
include/bgbgc_auto.h:BGBGC_API int gcatomicp(void *p);
include/bgbgc_auto.h:BGBGC_API int gcsetmark(char *ty, int (*fcn)(void *p));
include/bgbgc_auto.h:BGBGC_API int gcsetfinal(char *ty, int (*fcn)(void *p));
include/bgbgc_auto.h:BGBGC_API int gcsetpreserve(char *ty, int (*fcn)(void *p));
include/bgbgc_auto.h:BGBGC_API void *gctallocu(char *ty, int sz);
include/bgbgc_auto.h:BGBGC_API void *gcmalloc(size_t sz);
include/bgbgc_auto.h:BGBGC_API void gclock(void *p);
include/bgbgc_auto.h:BGBGC_API void gcunlock(void *p);
include/bgbgc_auto.h:BGBGC_API void gcinc(void *p);
include/bgbgc_auto.h:BGBGC_API void gcdec(void *p);
include/bgbgc_auto.h:BGBGC_API void gcsafedec(void *p);
include/bgbgc_auto.h:BGBGC_API void gcset(void **r, void *p);
include/bgbgc_auto.h:BGBGC_API void gcsetbyte(void *p, int v);
include/bgbgc_auto.h:BGBGC_API void gcsetword(void *p, int v);
include/bgbgc_auto.h:BGBGC_API void gcsetint(void *p, int v);
include/bgbgc_auto.h:BGBGC_API void gcsetlong(void *p, s64 v);
include/bgbgc_auto.h:BGBGC_API void gcsetfloat(void *p, float v);
include/bgbgc_auto.h:BGBGC_API void gcsetdouble(void *p, double v);
include/bgbgc_auto.h:BGBGC_API void gcclear(void **r);
include/bgbgc_auto.h:BGBGC_API char *gcstrdup(char *str);
include/bgbgc_auto.h:BGBGC_API void *gcralloc(int sz);
include/bgbgc_auto.h:BGBGC_API char *gcrstrdup(char *str);
include/bgbgc_auto.h:BGBGC_API char *gcrsprint(char *str, ...);
include/bgbgc_auto.h:BGBGC_API char **gcrsplit(char *s);
include/bgbgc_auto.h:BGBGC_API char *gcrgets(char **str);
include/bgbgc_auto.h:void gcpMark(gcp obj);
include/bgbgc_auto.h:void gcpInc(gcp obj);
include/bgbgc_auto.h:void gcpDec(gcp obj);
include/bgbgc_auto.h:void gcpSafeDec(gcp obj);
include/bgbgc_auto.h:void gcpSet(gcp *ref, gcp obj);
include/bgbgc_auto.h:void gcpClear(gcp *ref);
include/bgbgc_auto.h:void gcpPushFrame();
include/bgbgc_auto.h:void gcpPopFrame();
include/bgbgc_auto.h:void gcpRoot(gcp *ref);
include/bgbgc_auto.h:void gcpGlobalRoot(gcp *ref);
include/bgbgc_auto.h:void *gcpDefile(gcp obj);
include/bgbgc_auto.h:gcp gcpUndefile(void *obj);
include/bgbgc_auto.h:void *gcpGrabPtr(gcp obj);
include/bgbgc_auto.h:void gcpDropPtr(gcp obj);
include/bgbgc_auto.h:gcp gcpAlloc(char *type, int sz);
include/bgbgc_mm.h:extern void (*bgbgc_markhdlr[1024])();
include/bgbgc_objtype.h:int (*mark)(void *p);		//custom mark handler
include/bgbgc_objtype.h:int (*destroy)(void *p);	//handle destroyed objects
include/bgbgc_objtype.h:int (*preserve)(void *p);	//object was preserved
include/bgbgc_objtype.h:// void *(*get_slot)	(void *p, char *s);
include/bgbgc_objtype.h:// void *(*set_slot)	(void *p, char *s, void *v);
include/bgbgc_objtype.h:// char *(*nxt_slot)	(void *p, char *s);
include/bgbgc_objtype.h:// void *(*call_method)	(void *p, char *s, void **a, int n);
include/bgbgc_objtype.h:// void *(*apply)		(void *p, void **a, int n);
include/bgbgc_objtype.h:// void *(*try_set_slot)	(void *p, char *s, void *v);
include/bgbgc_objtype.h:// void *(*get_del)	(void *p, char *s);
include/bgbgc_objtype.h:// void *(*set_del)	(void *p, char *s, void *v);
include/bgbgc_objtype.h:// char *(*nxt_del)	(void *p, char *s);
include/bgbgc_thread.h:int (*fcn)(void *ptr);
include/bgbgc_wref.h:u64 (*alloc_mem)(dyWRefCtx *ctx, u64 sz);
include/bgbgc_wref.h:int (*free_mem)(dyWRefCtx *ctx, u64 offs);
include/bgbgc_wref.h:u64 (*realloc_mem)(dyWRefCtx *ctx, u64 offs, u64 sz);
include/bgbgc_wref.h:int (*copy_mem)(dyWRefCtx *ctx, u64 dst, u64 src, u64 sz);
include/bgbgc_wref.h:char *(*gettype_mem)(dyWRefCtx *ctx, u64 offs);
include/bgbgc_wref.h:int (*read_mem)(void *buf, int sz, dyWRefCtx *ctx, u64 offs);
include/bgbgc_wref.h:int (*write_mem)(void *buf, int sz, dyWRefCtx *ctx, u64 offs);
include/bgbsxc.h://#define sxDone2(a,b)		sxDone(a); sxDone(b);
include/bgbsxc.h://#define sxDone3(a,b,c)		sxDone(a); sxDone2(b,c);
include/bgbsxc.h://#define sxDone4(a,b,c,d)	sxDone(a); sxDone3(b,c,d);
include/bgbsxc.h://#define sxDone5(a,b,c,d,e)	sxDone(a); sxDone4(b,c,d,e);
include/bgbsxc.h://#define sxDone6(a,b,c,d,e,f)	sxDone(a); sxDone5(b,c,d,e,f);
include/bgbsxc.h://#define sxDone7(a,b,c,d,e,f,g)	sxDone(a); sxDone6(b,c,d,e,f,g);
include/bgbsxc.h:#define sxArg2(a,b)		sxArg(a); sxArg(b);
include/bgbsxc.h:#define sxArg3(a,b,c)		sxArg(a); sxArg2(b,c);
include/bgbsxc.h:#define sxArg4(a,b,c,d)		sxArg(a); sxArg3(b,c,d);
include/bgbsxc.h:#define sxArg5(a,b,c,d,e)	sxArg(a); sxArg4(b,c,d,e);
include/bgbsxc.h:#define sxArg6(a,b,c,d,e,f)	sxArg(a); sxArg5(b,c,d,e,f);
include/bgbsxc.h:#define sxArg7(a,b,c,d,e,f,g)	sxArg(a); sxArg6(b,c,d,e,f,g);
include/bgbsxc.h:#define sxRoot2(a,b)		sxRoot(a); sxRoot(b);
include/bgbsxc.h:#define sxRoot3(a,b,c)		sxRoot(a); sxRoot2(b,c);
include/bgbsxc.h:#define sxRoot4(a,b,c,d)	sxRoot(a); sxRoot3(b,c,d);
include/bgbsxc.h:#define sxRoot5(a,b,c,d,e)	sxRoot(a); sxRoot4(b,c,d,e);
include/bgbsxc.h:#define sxRoot6(a,b,c,d,e,f)	sxRoot(a); sxRoot5(b,c,d,e,f);
include/bgbsxc.h:#define sxRoot7(a,b,c,d,e,f,g)	sxRoot(a); sxRoot6(b,c,d,e,f,g);
include/bgbsxc.h:#define sxVar(a)		sxct a; sxRoot(a);
include/bgbsxc.h:#define sxVar2(a,b)		sxVar(a); sxVar(b);
include/bgbsxc.h:#define sxVar3(a,b,c)		sxVar(a); sxVar2(b,c);
include/bgbsxc.h:#define sxVar4(a,b,c,d)		sxVar(a); sxVar3(b,c,d);
include/bgbsxc.h:#define sxVar5(a,b,c,d,e)	sxVar(a); sxVar4(b,c,d,e);
include/bgbsxc.h:#define sxVar6(a,b,c,d,e,f)	sxVar(a); sxVar5(b,c,d,e,f);
include/bgbsxc.h:#define sxVar7(a,b,c,d,e,f,g)	sxVar(a); sxVar6(b,c,d,e,f,g);
include/bgbsxc.h:#define sxCSym(a)		static sxct sxSymc(a); \
include/bgbsxc.h:					sxGRoot(sxSymc(a)); \
include/bgbsxc.h:					sxSet(sxSymc(a), sxSym(#a)); }
include/bgbsxc.h:#define sxCSym2(a,b)		sxCSym(a); sxCSym(b);
include/bgbsxc.h:#define sxCSym3(a,b,c)		sxCSym(a); sxCSym2(b,c);
include/bgbsxc.h:#define sxCSym4(a,b,c,d)	sxCSym(a); sxCSym3(b,c,d);
include/bgbsxc.h:#define sxCSym5(a,b,c,d,e)	sxCSym(a); sxCSym4(b,c,d,e);
include/bgbsxc.h:#define sxCSym6(a,b,c,d,e,f)	sxCSym(a); sxCSym5(b,c,d,e,f);
include/bgbsxc.h:#define sxCSym7(a,b,c,d,e,f,g)	sxCSym(a); sxCSym6(b,c,d,e,f,g);
include/bgbsxc.h:sxct (*fcn)();
include/bs1_auto.h:void *BS1_MM_RAlloc(int sz);
include/bs1_auto.h:char *BS1_RStrDup(char *s);
include/bs1_auto.h:void BS1_StrCpy(char *t, char *s);
include/bs1_auto.h:char **BS1_Split(char *s);
include/bs1_auto.h:int BS1_MM_AddBlock();
include/bs1_auto.h:int BS1_MM_FindFreeCell(int *ri, int *rj);
include/bs1_auto.h:int BS1_MM_FindFreeCells(int num, int *ri, int *rj);
include/bs1_auto.h:int BS1_MM_FindFreeCells(int num, int *ri, int *rj);
include/bs1_auto.h:elem BS1_MM_MultiCons(int num);
include/bs1_auto.h:elem BS1_MM_AllocCons();
include/bs1_auto.h:elem BS1_MM_AllocObj(int ty, int sz);
include/bs1_auto.h:elem BS1_MM_AllocObjA64(int ty, int sz);
include/bs1_auto.h:elem BS1_MM_AllocObjAPtr(int ty, int sz);
include/bs1_auto.h:elem BS1_MM_AllocObjName(char *ty, int sz);
include/bs1_auto.h:elem BS1_MM_AllocObjNameAPtr(char *ty, int sz);
include/bs1_auto.h:int BS1_MM_FindElemCell(elem t, int *ri, int *rj);
include/bs1_auto.h:void BS1_MM_FindElemCell2(elem t, int *ri, int *rj);
include/bs1_auto.h:elem BS1_MM_ElemFromCell(int i, int j);
include/bs1_auto.h:int BS1_MM_FindElemLObj(elem t);
include/bs1_auto.h:int BS1_MM_FreeCells(int i, int j);
include/bs1_auto.h:int BS1_MM_FreeObj(elem t);
include/bs1_auto.h:int BS1_MM_GetObjType(elem t);
include/bs1_auto.h:int BS1_MM_GetObjSize(elem t);
include/bs1_auto.h:int BS1_MM_GetObjMark(elem t);
include/bs1_auto.h:elem BS1_MM_GetPtrElem(void *ptr);
include/bs1_auto.h:void *BS1_TY_GetElemPtr(elem t);
include/bs1_auto.h:void *BS1_TY_GetElemPtrA64(elem t);
include/bs1_auto.h:elem *BS1_TY_GetCellPtr(elem t);
include/bs1_auto.h:int BS1_MM_HeapUsed();
include/bs1_auto.h:int BS1_MM_HeapFree();
include/bs1_auto.h:int BS1_MM_HeapSize();
include/bs1_auto.h:void BS1_GC_PrintStats();
include/bs1_auto.h:void BS1_GC_AddRoot(elem *p);
include/bs1_auto.h:void BS1_GC_AddRootArray(elem *p, int n);
include/bs1_auto.h:void BS1_GC_PushRoot(elem *p);
include/bs1_auto.h:void BS1_GC_PushRootArg(elem *p);
include/bs1_auto.h:void BS1_GC_PushRootPos();
include/bs1_auto.h:void BS1_GC_PopRootPos();
include/bs1_auto.h:void BS1_GC_Assign(elem *p, elem t);
include/bs1_auto.h:void BS1_GC_Clear(elem *p);
include/bs1_auto.h:void BS1_GC_Assign(elem *p, elem t);
include/bs1_auto.h:void BS1_GC_Clear(elem *p);
include/bs1_auto.h:elem BS1_GC_AllocCons();
include/bs1_auto.h:int BS1_GC_BlackenCells(int i, int j);
include/bs1_auto.h:int BS1_GC_LockCells(int i, int j);
include/bs1_auto.h:int BS1_GC_FreeCellObj(int i, int j);
include/bs1_auto.h:int BS1_GC_FreeObj(elem t);
include/bs1_auto.h:void BS1_GC_IncRef(elem t);
include/bs1_auto.h:void BS1_GC_DecRef(elem t);
include/bs1_auto.h:void BS1_GC_SafeDecRef(elem t);
include/bs1_auto.h:void BS1_GC_CheckRef(elem t);
include/bs1_auto.h:void BS1_GC_SetManyRef(elem t);
include/bs1_auto.h:void BS1_GC_SetProtectRef(elem t);
include/bs1_auto.h:int BS1_GC_GetRefCount(elem t);
include/bs1_auto.h:int BS1_GC_GetRefCount(elem t);
include/bs1_auto.h:int BS1_GC_ClearMarks();
include/bs1_auto.h:int BS1_GC_Sweep();
include/bs1_auto.h:void BS1_GC_MarkRef(elem t);
include/bs1_auto.h:void BS1_GC_MarkObj(elem t);
include/bs1_auto.h:void BS1_GC_Mark();
include/bs1_auto.h:int BS1_GC_MarkProtect();
include/bs1_auto.h:void BS1_GC_Collect();
include/bs1_auto.h:int BS1_TY_SymsUsed();
include/bs1_auto.h:int BS1_TY_SymsMax();
include/bs1_auto.h:void BS1_TY_BeginSetFunc(int ty);
include/bs1_auto.h:void BS1_TY_SetMarkFunc(int ty, void (*fcn)(elem obj));
include/bs1_auto.h:void BS1_TY_SetDestroyFunc(int ty, void (*fcn)(elem obj));
include/bs1_auto.h:void BS1_TY_SetPrintFunc(int ty, void (*fcn)(char **str, elem obj));
include/bs1_auto.h:void BS1_TY_SetParseFunc(int ty, elem (*fcn)(char **str));
include/bs1_auto.h:void BS1_TY_SetLoadIndexFunc(int ty, elem (*fcn)(elem obj, elem slot));
include/bs1_auto.h:void BS1_TY_SetStoreIndexFunc(int ty,elem (*fcn)(elem obj, elem slot, elem val));
include/bs1_auto.h:void BS1_TY_SetCallFunc(int ty, elem (*fcn)(elem obj, elem fcn, elem args));
include/bs1_auto.h:void BS1_TY_SetMethodCallFunc(int ty,elem (*fcn)(elem obj, elem slot, elem args));
include/bs1_auto.h:void BS1_TY_CallMarkFunc(elem obj);
include/bs1_auto.h:void BS1_TY_CallDestroyFunc(elem obj);
include/bs1_auto.h:int BS1_TY_CallPrintFunc(char **str, elem obj);
include/bs1_auto.h:elem BS1_TY_LoadIndex(elem obj, elem slot);
include/bs1_auto.h:elem BS1_TY_StoreIndex(elem obj, elem slot, elem val);
include/bs1_auto.h:elem BS1_TY_Call(elem obj, elem fcn, elem args);
include/bs1_auto.h:elem BS1_TY_MethodCall(elem obj, elem slot, elem args);
include/bs1_auto.h:int BS1_TY_HasMethodCall(elem obj);
include/bs1_auto.h:int BS1_TY_HashIndex(char **hash, char *str);
include/bs1_auto.h:int BS1_TY_HashIndex(char **hash, char *str);
include/bs1_auto.h:int BS1_TY_HashType(char *str);
include/bs1_auto.h:char *BS1_TY_HashTypeString(char *str);
include/bs1_auto.h:int BS1_TY_GetType(elem t);
include/bs1_auto.h:char *BS1_TY_GetTypeName(elem t);
include/bs1_auto.h:void *BS1_TY_GetObjData(elem t);
include/bs1_auto.h:void *BS1_TY_GetObjDataA64(elem t);
include/bs1_auto.h:void *BS1_TY_GetObjDataAPtr(elem t);
include/bs1_auto.h:elem BS1_TY_HashSymbol(char *str);
include/bs1_auto.h:elem BS1_TY_HashKeyword(char *str);
include/bs1_auto.h:elem BS1_TY_HashString(char *str);
include/bs1_auto.h:char *BS1_TY_GetSymbol(elem t);
include/bs1_auto.h:int BS1_TY_GetSymbolIndex(elem t);
include/bs1_auto.h:char *BS1_TY_GetString(elem t);
include/bs1_auto.h:int BS1_TY_GetInt(elem t);
include/bs1_auto.h:s64 BS1_TY_GetLong(elem t);
include/bs1_auto.h:float BS1_TY_GetFloat(elem t);
include/bs1_auto.h:double BS1_TY_GetDouble(elem t);
include/bs1_auto.h:void BS1_TY_GetRational(elem t, int *ri, int *rj);
include/bs1_auto.h:elem BS1_TY_Int(s64 i);
include/bs1_auto.h:elem BS1_TY_Long(s64 i);
include/bs1_auto.h:elem BS1_TY_Char(int i);
include/bs1_auto.h:elem BS1_TY_Float(double f);
include/bs1_auto.h:elem BS1_TY_Rational(int i, int j);
include/bs1_auto.h:int BS1_TY_GetBool(elem t);
include/bs1_auto.h:elem BS1_TY_Cons(elem a, elem b);
include/bs1_auto.h:elem BS1_TY_GetCar(elem t);
include/bs1_auto.h:elem BS1_TY_GetCdr(elem t);
include/bs1_auto.h:elem BS1_TY_SetCar(elem t, elem a);
include/bs1_auto.h:elem BS1_TY_SetCdr(elem t, elem a);
include/bs1_auto.h:void BS1_TY_SetCar2(elem t, elem a);
include/bs1_auto.h:void BS1_TY_SetCdr2(elem t, elem a);
include/bs1_auto.h:elem BS1_TY_GetCaar(elem t);
include/bs1_auto.h:elem BS1_TY_GetCdar(elem t);
include/bs1_auto.h:elem BS1_TY_GetCadr(elem t);
include/bs1_auto.h:elem BS1_TY_GetCddr(elem t);
include/bs1_auto.h:elem BS1_TY_Reverse(elem l);
include/bs1_auto.h:elem BS1_TY_NReverse(elem l);
include/bs1_auto.h:elem BS1_TY_CopyList(elem a);
include/bs1_auto.h:elem BS1_TY_Append(elem a, elem b);
include/bs1_auto.h:elem BS1_TY_NAppend(elem a, elem b);
include/bs1_auto.h:int BS1_TY_IsListP(elem l);
include/bs1_auto.h:int BS1_TY_GetListLen(elem l);
include/bs1_auto.h:elem BS1_TY_ListToArray(elem l);
include/bs1_auto.h:elem BS1_TY_NewArray(int n);
include/bs1_auto.h:elem BS1_TY_NewArrayFromArray(elem *arr, int n);
include/bs1_auto.h:elem BS1_TY_NewArray2(elem a, elem b);
include/bs1_auto.h:elem BS1_TY_NewArray3(elem a, elem b, elem c);
include/bs1_auto.h:elem BS1_TY_NewArray4(elem a, elem b, elem c, elem d);
include/bs1_auto.h:elem BS1_TY_NewArray5(elem a, elem b, elem c, elem d, elem e);
include/bs1_auto.h:elem BS1_TY_NewArray6(elem a, elem b, elem c, elem d, elem e, elem f);
include/bs1_auto.h:int BS1_TY_GetArrayLen(elem t);
include/bs1_auto.h:elem BS1_TY_GetArrayElem(elem t, int idx);
include/bs1_auto.h:elem BS1_TY_GetArrayElem2(elem t, int idx);
include/bs1_auto.h:int BS1_TY_SetArrayElem(elem t, int idx, elem a);
include/bs1_auto.h:char *BS1_TY_PrintFloat(float f);
include/bs1_auto.h:char *BS1_TY_PrintLong(elem l);
include/bs1_auto.h:int BS1_TY_Print(elem t);
include/bs1_auto.h:int BS1_TY_PrintLN(elem t);
include/bs1_auto.h:int BS1_TY_PrintTC(elem t);
include/bs1_auto.h:int BS1_TY_PrintTLN(elem t);
include/bs1_auto.h:int BS1_TY_Init();
include/bs1_auto.h:int BS1_Opr_Init();
include/bs1_auto.h:void BS1_OPR_AddUnaryFcn(int op, char *ty, elem (*fcn)(elem a));
include/bs1_auto.h:void BS1_OPR_AddBinaryFcn(int op, char *ta, char *tb,elem (*fcn)(elem a, elem b));
include/bs1_auto.h:elem BS1_Opr_ApplyUnaryFcn(elem a, elem f);
include/bs1_auto.h:elem BS1_Opr_ApplyBinaryFcn(elem a, elem b, elem f);
include/bs1_auto.h:elem BS1_Opr_UnaryGeneric(int op, elem a);
include/bs1_auto.h:elem BS1_Opr_BinaryGeneric(int op, elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Add(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_DAdd(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Sub(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_DSub(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Mul(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_DMul(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Div(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_DDiv(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_IDiv(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Mod(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Shl(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Shr(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_And(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Or(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Xor(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Exp(elem a, elem b);
include/bs1_auto.h:int BS1_Opr_IsEqual(elem a, elem b);
include/bs1_auto.h:int BS1_Opr_IsLess(elem a, elem b);
include/bs1_auto.h:int BS1_Opr_IsGreater(elem a, elem b);
include/bs1_auto.h:int BS1_Opr_IsLessEqual(elem a, elem b);
include/bs1_auto.h:int BS1_Opr_IsGreaterEqual(elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Binary(int op, elem a, elem b);
include/bs1_auto.h:elem BS1_Opr_Unary(int op, elem a);
include/bs1_auto.h:int BS1_Opr_CondBinary(int op, elem a, elem b);
include/bs1_auto.h:int BS1_Opr_CondUnary(int op, elem a);
include/bs1_auto.h:elem BS1_Opr_LoadIndex(elem obj, elem key);
include/bs1_auto.h:void BS1_Opr_StoreIndex(elem obj, elem key, elem val);
include/bs1_auto.h:char *BS1_ParseS_EatWhite(char *s);
include/bs1_auto.h:int BS1_ParseS_SpecialP(char *s);
include/bs1_auto.h:char *BS1_ParseS_Token(char *s, char *b, int *t);
include/bs1_auto.h:elem BS1_ParseS_List(char **s, int ind);
include/bs1_auto.h:double BS1_ParseS_Float(char *s);
include/bs1_auto.h:elem BS1_ParseS_Item(char **s, int ind);
include/bs1_auto.h:elem BS1_ParseS_FromString(char *s);
include/bs1_auto.h:elem BS1_ParseS_MultiFromString(char *s);
include/bs1_auto.h:char *BS1_S_PrintListSim(char *s, char *se, elem l);
include/bs1_auto.h:char *BS1_S_PrintList(char *s, elem l);
include/bs1_auto.h:char *BS1_S_PrintListInd(char *s, elem l, int ind);
include/bs1_auto.h:char *BS1_S_Print(char *str, elem t, int ind);
include/bs1_auto.h:char *BS1_S_PrintS(elem t);
include/bs1_auto.h:void BS1_S_PrintFmt(elem t);
include/bs1_auto.h:int BS1_TYVec_GetVecLen(elem a);
include/bs1_auto.h:float BS1_TYVec_GetVecVal(elem a, int idx);
include/bs1_auto.h:float BS1_TYVec_GetVecVal2(elem a, int idx);
include/bs1_auto.h:void BS1_TYVec_SetVecVal(elem a, int idx, float f);
include/bs1_auto.h:elem BS1_TYVec_List2FVec(elem l);
include/bs1_auto.h:elem BS1_TYVec_MakeFVec(float *fa, int n);
include/bs1_auto.h:elem BS1_TYVec_MakeFVec2(float a, float b);
include/bs1_auto.h:elem BS1_TYVec_MakeFVec3(float a, float b, float c);
include/bs1_auto.h:elem BS1_TYVec_MakeFVec4(float a, float b, float c, float d);
include/bs1_auto.h:elem BS1_TYVec_AddVec(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_SubVec(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_DotVec(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_ScaleVecNum(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_CrossVec(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_CrossVec2(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_VecLength(elem a);
include/bs1_auto.h:elem BS1_TYVec_Normalize(elem a);
include/bs1_auto.h:elem BS1_TYVec_Conjugate(elem a);
include/bs1_auto.h:elem BS1_TYVec_Complex(float a, float b);
include/bs1_auto.h:float BS1_TYVec_GetReal(elem t);
include/bs1_auto.h:float BS1_TYVec_GetImag(elem t);
include/bs1_auto.h:elem BS1_TYVec_AddComplex(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_SubComplex(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_MulComplex(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_DivComplex(elem a, elem b);
include/bs1_auto.h:elem BS1_TYVec_ExpComplex(elem a, elem b);
include/bs1_auto.h:elem BS1_TYMat_List2FMat(elem l);
include/bs1_auto.h:elem BS1_TY_MakeMatrix(int xs, int ys);
include/bs1_auto.h:int BS1_TYMat_GetXS(elem t);
include/bs1_auto.h:int BS1_TYMat_GetYS(elem t);
include/bs1_auto.h:float *BS1_TYMat_GetBody(elem t);
include/bs1_auto.h:float *BS1_TYMat_GetBody2(elem t, int *rxs, int *rys);
include/bs1_auto.h:float BS1_TYMat_GetIndex(elem t, int x, int y);
include/bs1_auto.h:void BS1_TYMat_SetIndex(elem t, int x, int y, float v);
include/bs1_auto.h:elem BS1_TYMat_AddMatrix(elem a, elem b);
include/bs1_auto.h:elem BS1_TYMat_SubMatrix(elem a, elem b);
include/bs1_auto.h:elem BS1_TYMat_ScaleMatrix(elem a, elem b);
include/bs1_auto.h:elem BS1_TYMat_MultMatrix(elem a, elem b);
include/bs1_auto.h:elem BS1_TYMat_MultMatrixVector(elem a, elem b);
include/bs1_auto.h:void BS1_TYMat_Inverse(float *a, float *b, int n);
include/bs1_auto.h:elem BS1_TYMat_InvertMatrix(elem a);
include/bs1_auto.h:elem BS1_TYMat_DivMatrix(elem a, elem b);
include/bs1_auto.h:int BS1_TYRat_GCF(int i, int j);
include/bs1_auto.h:int BS1_TYRat_LCF(int i, int j);
include/bs1_auto.h:void BS1_TYRat_Reduce(int *ri, int *rj);
include/bs1_auto.h:elem BS1_TYRat_Add(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_Sub(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_Mul(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_Div(elem a, elem b);
include/bs1_auto.h:void BS1_TYRat_UnwrapLong(elem t, unsigned int *lv);
include/bs1_auto.h:elem BS1_TYRat_WrapLong(unsigned int *lv);
include/bs1_auto.h:elem BS1_TYRat_WrapSmallLong(unsigned int *lv);
include/bs1_auto.h:elem BS1_TYRat_AddLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_SubLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_MulLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_DivLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_ModLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_ShlLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_ShrLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_AndLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_OrLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_XorLong(elem a, elem b);
include/bs1_auto.h:elem BS1_TYRat_NegLong(elem a);
include/bs1_auto.h:int BS1_TYRat_EqualLong(elem a, elem b);
include/bs1_auto.h:int BS1_TYRat_LessLong(elem a, elem b);
include/bs1_auto.h:int BS1_TYRat_GreaterLong(elem a, elem b);
include/bs1_auto.h:char *BS1_TYRat_XLong2String(elem a);
include/bs1_auto.h:elem BS1_TYRat_String2XLong(char *str);
include/bs1_auto.h:void BS1_TYHDL_Init();
include/bs1_auto.h:void BS1_TYHDL_SetGetSlot(int ns, elem (*fn)(void *p, char *s));
include/bs1_auto.h:void BS1_TYHDL_SetSetSlot(int ns, elem (*fn)(void *p, char *s, elem v));
include/bs1_auto.h:void BS1_TYHDL_SetApply(int ns, elem (*fn)(void *p, elem a));
include/bs1_auto.h:void BS1_TYHDL_SetMApply(int ns, elem (*fn)(void *p, char *s, elem a));
include/bs1_auto.h:int BS1_TYHDL_IndexFromElem(elem t);
include/bs1_auto.h:elem BS1_TYHDL_ElemFromIndex(int i);
include/bs1_auto.h:elem BS1_TYHDL_ElemFromPtr(void *p);
include/bs1_auto.h:void *BS1_TYHDL_PtrFromElem(elem o);
include/bs1_auto.h:elem BS1_TYHDL_GetSlot(elem o, elem n);
include/bs1_auto.h:elem BS1_TYHDL_SetSlot(elem o, elem n, elem v);
include/bs1_auto.h:elem BS1_TYHDL_Call(elem o, elem a);
include/bs1_auto.h:elem BS1_TYHDL_CallMethod(elem o, elem n, elem a);
include/bs1_auto.h:void BS1_LXI_Add32O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Add64(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Add64O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Add128(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Add128O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Add256(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Add256O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Sub64O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Sub128(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Sub128O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Sub256(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Sub256O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Add256F(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Sub256F(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Copy256F(u32 *a, u32 *c);
include/bs1_auto.h:void BS1_LXI_Neg256F(u32 *a, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul32O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul32AO(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul64AO(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul128AO(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul256AO(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul64O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul128O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul256(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mul256O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Div32O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Div64O(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Shr256(u32 *a, int b, u32 *c);
include/bs1_auto.h:int BS1_LXI_Shl256(u32 *a, int b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Shl256O(u32 *a, int b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Shr512_1(u32 *a, u32 *c);
include/bs1_auto.h:int BS1_LXI_CmpG_512(u32 *a, u32 *b);
include/bs1_auto.h:void BS1_LXI_Div256(u32 *a, u32 *b, u32 *c, u32 *r);
include/bs1_auto.h:void BS1_LXI_Div256S(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:void BS1_LXI_Mod256S(u32 *a, u32 *b, u32 *c);
include/bs1_auto.h:int BS1_LXI_Mod256I(u32 *a, int b, u32 *c);
include/bs1_auto.h:int BS1_SVM_Init();
include/bs1_auto.h:void BS1_SVM_AddBuiltin(char *name, char *desc,elem (*fcn)(BS1_SVMState *ctx, elem args), int nargs);
include/bs1_auto.h:void BS1_SVM_AddBuiltin2(char *name, char *desc,elem (*fcn)(BS1_SVMState *ctx, elem args), int nargs);
include/bs1_auto.h:void BS1_SVM_AddBinding(char *name, elem val);
include/bs1_auto.h:void BS1_SVM_AddBinding2(char *name, elem val);
include/bs1_auto.h:elem BS1_SVM_GetTop(char *name);
include/bs1_auto.h:void BS1_SVM_SetTop(char *name, elem val);
include/bs1_auto.h:elem BS1_SVM_NewState();
include/bs1_auto.h:void BS1_SVM_Push(BS1_SVMState *ctx, elem val);
include/bs1_auto.h:elem BS1_SVM_Pop(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_PushF(BS1_SVMState *ctx, elem val);
include/bs1_auto.h:elem BS1_SVM_PopF(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_PopDestroy(BS1_SVMState *ctx);
include/bs1_auto.h:int BS1_SVM_PopBool(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_PushList(BS1_SVMState *ctx, elem l);
include/bs1_auto.h:elem BS1_SVM_PopList(BS1_SVMState *ctx);
include/bs1_auto.h:elem BS1_SVM_PopList2(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_PopMark(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_ShiftMark(BS1_SVMState *ctx);
include/bs1_auto.h:elem BS1_SVM_Lookup(BS1_SVMState *ctx, elem key);
include/bs1_auto.h:void BS1_SVM_Assign(BS1_SVMState *ctx, elem key, elem val);
include/bs1_auto.h:elem BS1_SVM_LookupIdx(BS1_SVMState *ctx, int idx);
include/bs1_auto.h:void BS1_SVM_AssignIdx(BS1_SVMState *ctx, int idx, elem val);
include/bs1_auto.h:void BS1_SVM_AssignIdxF(BS1_SVMState *ctx, int idx, elem val);
include/bs1_auto.h:void BS1_SVM_Bind(BS1_SVMState *ctx, elem key, elem val);
include/bs1_auto.h:void BS1_SVM_LexBind(BS1_SVMState *ctx, elem key, elem val);
include/bs1_auto.h:void BS1_SVM_DynBind(BS1_SVMState *ctx, elem key, elem val);
include/bs1_auto.h:elem BS1_SVM_LoadIndex(BS1_SVMState *ctx, elem obj, elem key);
include/bs1_auto.h:void BS1_SVM_StoreIndex(BS1_SVMState *ctx, elem obj, elem key, elem val);
include/bs1_auto.h:elem BS1_SVM_Unary(BS1_SVMState *ctx, int i, elem obj);
include/bs1_auto.h:elem BS1_SVM_Binary(BS1_SVMState *ctx, int i, elem tl, elem tr);
include/bs1_auto.h:void BS1_SVM_PushFrame(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_PopFrame(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_PushFrame(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_PopFrame(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_BindArgs(BS1_SVMState *ctx, elem kl, elem vl);
include/bs1_auto.h:void BS1_SVM_CallObj(BS1_SVMState *ctx, elem obj, elem f);
include/bs1_auto.h:void BS1_SVM_TailCallObj(BS1_SVMState *ctx, elem obj, elem f);
include/bs1_auto.h:void BS1_SVM_MethodCall(BS1_SVMState *ctx, elem obj, elem key);
include/bs1_auto.h:void BS1_SVM_MethodTailCall(BS1_SVMState *ctx, elem obj, elem key);
include/bs1_auto.h:elem BS1_SVM_Close(BS1_SVMState *ctx, elem f);
include/bs1_auto.h:elem BS1_SVM_Cast(BS1_SVMState *ctx, elem ty, elem t);
include/bs1_auto.h:elem BS1_SVM_ReadID(BS1_SVMState *ctx);
include/bs1_auto.h:int BS1_SVM_ReadIDX(BS1_SVMState *ctx);
include/bs1_auto.h:int BS1_SVM_DumpOpcode(BS1_SVMState *ctx);
include/bs1_auto.h:void BS1_SVM_StepJmpBool(BS1_SVMState *ctx, int j);
include/bs1_auto.h:int BS1_SVM_StepC1(BS1_SVMState *ctx);
include/bs1_auto.h:int BS1_SVM_Step(BS1_SVMState *ctx);
include/bs1_auto.h:int BS1_SVM_Run(elem ct);
include/bs1_auto.h:elem BS1_SVM_EvalExprsObj(elem exp, elem obj);
include/bs1_auto.h:elem BS1_SVM_EvalStringS(char *str);
include/bs1_auto.h:elem BS1_SVM_EvalString(char *str);
include/bs1_auto.h:elem BS1_SVM_EvalStringObj(char *str, elem obj);
include/bs1_auto.h:elem BS1_SVM_CallFuncObj(elem obj, elem fcn, elem args);
include/bs1_auto.h:elem BS1_SObj_FlushHash();
include/bs1_auto.h:elem BS1_SObj_FlushHashSlot(elem slot);
include/bs1_auto.h:elem BS1_SObj_GetHash(elem obj, elem slot);
include/bs1_auto.h:elem BS1_SObj_SetHash(elem sobj, elem dobj, elem slot, elem val);
include/bs1_auto.h:elem BS1_SObj_FlushHash();
include/bs1_auto.h:elem BS1_SObj_FlushHashSlot(elem slot);
include/bs1_auto.h:elem BS1_SObj_GetHash(elem obj, elem slot);
include/bs1_auto.h:elem BS1_SObj_SetHash(elem sobj, elem dobj, elem slot, elem val);
include/bs1_auto.h:elem BS1_SObj_New();
include/bs1_auto.h:elem BS1_SObj_GetSlotR(elem obj, elem slot);
include/bs1_auto.h:elem BS1_SObj_GetSlot(elem obj, elem slot);
include/bs1_auto.h:int BS1_SObj_SetSlotR(elem obj, elem slot, elem val);
include/bs1_auto.h:elem BS1_SObj_SetSlot(elem obj, elem slot, elem val);
include/bs1_auto.h:elem BS1_SObj_BindSlot(elem obj, elem slot, elem val);
include/bs1_auto.h:int BS1_SObj_Init();
include/bs1_auto.h:int BS1_SComp_CompileSwitch(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_CompileStatement(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:byte *BS1_SComp_NextOpcode(byte *ip);
include/bs1_auto.h:byte *BS1_SComp_DumpOpcode(byte *ip, elem lit);
include/bs1_auto.h:elem BS1_SComp_CompileBlock(BS1_SVMCState *lctx,elem name, elem args, elem body);
include/bs1_auto.h:int BS1_SComp_BoolExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_SComp_IsExpr(elem l);
include/bs1_auto.h:elem BS1_SComp_ReduceForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_SComp_ReduceExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_SComp_InferTypeBase(elem l);
include/bs1_auto.h:int BS1_SComp_InferIsIntP(elem t);
include/bs1_auto.h:int BS1_SComp_InferIsLongP(elem t);
include/bs1_auto.h:int BS1_SComp_InferIsFloatP(elem t);
include/bs1_auto.h:int BS1_SComp_InferIsDoubleP(elem t);
include/bs1_auto.h:int BS1_SComp_InferIsNumP(elem t);
include/bs1_auto.h:elem BS1_SComp_InferIsInt(elem t);
include/bs1_auto.h:elem BS1_SComp_InferIsLong(elem t);
include/bs1_auto.h:elem BS1_SComp_InferIsNum(elem t);
include/bs1_auto.h:elem BS1_SComp_InferForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_SComp_InferExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_SComp_InferExprClean(BS1_SVMCState *ctx, elem l, int *cp);
include/bs1_auto.h:int BS1_SComp_GuessCloseForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_SComp_GuessCloseExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_SComp_GuessCloseBlock(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_SComp_ReverseStepStmt(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_SComp_ReverseStepBlock(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_SComp_IndexLit(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_SComp_IndexLit2(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_EncIDX(BS1_SVMCState *ctx, int i);
include/bs1_auto.h:void BS1_SComp_EmitGoto(BS1_SVMCState *ctx, char *name, byte *ip);
include/bs1_auto.h:void BS1_SComp_EmitLabel(BS1_SVMCState *ctx, char *name, byte *ip);
include/bs1_auto.h:char *BS1_SComp_GenSym();
include/bs1_auto.h:int BS1_SComp_RegIdx(elem t);
include/bs1_auto.h:void BS1_SComp_CompileBreak(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_SComp_CompileContinue(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_SComp_CompileBreakFalse(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_SComp_CompileBreakTrue(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_SComp_CompileContinueFalse(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_SComp_CompileContinueTrue(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_SComp_CompileJmp(BS1_SVMCState *ctx, char *s);
include/bs1_auto.h:void BS1_SComp_CompileJmpFalse(BS1_SVMCState *ctx, char *s);
include/bs1_auto.h:void BS1_SComp_CompileJmpTrue(BS1_SVMCState *ctx, char *s);
include/bs1_auto.h:void BS1_SComp_CompileJmpCond(BS1_SVMCState *ctx, int i, char *s);
include/bs1_auto.h:void BS1_SComp_CompileJCO(BS1_SVMCState *ctx, int op, elem ln, elem rn);
include/bs1_auto.h:void BS1_SComp_CompileJCT(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_CompileJCF(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_SComp_CompileBinary(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_SComp_CompileSpecial(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_EmitOp(BS1_SVMCState *ctx, elem i);
include/bs1_auto.h:int BS1_SComp_CheckLexical(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_CompileAssign(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_CompileForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_CompileExprT(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_CompileExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_SComp_CompileExprTail(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:BS1_DSOPCtx *BS1_DSOP_MakeContext(byte *buf);
include/bs1_auto.h:void BS1_DSOP_ClearContext(BS1_DSOPCtx *ctx);
include/bs1_auto.h:void BS1_DSOP_FreeContext(BS1_DSOPCtx *ctx);
include/bs1_auto.h:byte *BS1_DSOP_EncodeVLI(byte *ip, int i);
include/bs1_auto.h:byte *BS1_DSOP_EncodeSVLI(byte *ip, int i);
include/bs1_auto.h:int BS1_DSOP_DecodeVLI(BS1_DSOPCtx *ctx);
include/bs1_auto.h:int BS1_DSOP_DecodeSVLI(BS1_DSOPCtx *ctx);
include/bs1_auto.h:void BS1_DSOP_EncodeString(BS1_DSOPCtx *ctx, char *str);
include/bs1_auto.h:int BS1_DSOP_IndexLit(BS1_DSOPCtx *ctx, elem l);
include/bs1_auto.h:int BS1_DSOP_FlattenBlock(BS1_DSOPCtx *ctx, elem f);
include/bs1_auto.h:int BS1_DSOP_FlattenExpr(BS1_DSOPCtx *ctx, elem l);
include/bs1_auto.h:int BS1_DSOP_Flatten(BS1_DSOPCtx *ctx, elem l);
include/bs1_auto.h:elem BS1_DSOP_Pop(BS1_DSOPCtx *ctx);
include/bs1_auto.h:void BS1_DSOP_Push(BS1_DSOPCtx *ctx, elem l);
include/bs1_auto.h:void BS1_DSOP_MoveFront(BS1_DSOPCtx *ctx, int i);
include/bs1_auto.h:int BS1_DSOP_UnFlattenOp(BS1_DSOPCtx *ctx);
include/bs1_auto.h:byte *BS1_DSOP_FlattenBuffer(byte *buf, elem l);
include/bs1_auto.h:int BS1_Parse_GetLinenum();
include/bs1_auto.h:char *BS1_Parse_GetFilename();
include/bs1_auto.h:int BS1_Parse_CalcLinenum(char *se);
include/bs1_auto.h:int BS1_Parse_SetLinenum(char *fname, char *base, int num);
include/bs1_auto.h:int BS1_Parse_PushLinenum();
include/bs1_auto.h:int BS1_Parse_PopLinenum();
include/bs1_auto.h:int BS1_MSG_Note(char *se, char *s, ...);
include/bs1_auto.h:int BS1_MSG_Warning(char *se, char *s, ...);
include/bs1_auto.h:int BS1_MSG_Error(char *se, char *s, ...);
include/bs1_auto.h:char *BS1_Parse_EatWhiteOnly(char *s);
include/bs1_auto.h:char *BS1_Parse_EatWhite(char *s);
include/bs1_auto.h:int BS1_Parse_IsWhiteOnly(char *s);
include/bs1_auto.h:int BS1_Parse_IsNextIndented(char *se);
include/bs1_auto.h:int BS1_Parse_IsLineBreak(char *se);
include/bs1_auto.h:int BS1_Parse_OpChar(int c);
include/bs1_auto.h:char *BS1_Parse_Token(char *s, char *b, int *ty);
include/bs1_auto.h:elem BS1_Parse_FunArgs(char **str);
include/bs1_auto.h:elem BS1_Parse_FunArgs2(char **str);
include/bs1_auto.h:elem BS1_Parse_IListArgs(char **str);
include/bs1_auto.h:elem BS1_Parse_RListArgs(char **str);
include/bs1_auto.h:elem BS1_Parse_VarsList(char **str);
include/bs1_auto.h:elem BS1_Parse_DefType(char **str);
include/bs1_auto.h:elem BS1_Parse_FunVarsList(char **str);
include/bs1_auto.h:elem BS1_Parse_MetafunExpr(char **str);
include/bs1_auto.h:elem BS1_Parse_MetafunBlock(char **str);
include/bs1_auto.h:elem BS1_Parse_Expression(char **str);
include/bs1_auto.h:int BS1_Parse_AddExpression(char *name, elem (*func)(char **s));
include/bs1_auto.h:elem BS1_Parse_ParseExpressionName(char *name, char **s);
include/bs1_auto.h:elem BS1_Parse_Number(char *str);
include/bs1_auto.h:elem BS1_Parse_ExpressionLit(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionPE(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionCast(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionIncDec(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionE(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionMD(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionAS(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionSHLR(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionRCmp(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionLop(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionLop2(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionTCond(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionFunc(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionAttr(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionEquals(char **str);
include/bs1_auto.h:elem BS1_Parse_ExpressionComma(char **str);
include/bs1_auto.h:elem BS1_Parse_Expression(char **str);
include/bs1_auto.h:elem BS1_Parse_Expression2(char **str);
include/bs1_auto.h:elem BS1_Parse_Expression3(char **str);
include/bs1_auto.h:int BS1_Parse_AddStatement(char *name, elem (*func)(char **s));
include/bs1_auto.h:elem BS1_Parse_ParseStatementName(char *name, char **s);
include/bs1_auto.h:int BS1_Parse_AddBlockStatement(char *name,elem (*func)(char **s));
include/bs1_auto.h:elem BS1_Parse_ParseBlockStatementName(char *name, char **s);
include/bs1_auto.h:char *BS1_Parse_EatSemicolon(char *s);
include/bs1_auto.h:elem BS1_Parse_Statement(char **str);
include/bs1_auto.h:elem BS1_Parse_BlockStatementInner(char **str);
include/bs1_auto.h:elem BS1_Parse_BlockStatement(char **str);
include/bs1_auto.h:elem BS1_Parse_Block(char **str);
include/bs1_auto.h:elem BS1_Parse_BlockStatement2(char **str);
include/bs1_auto.h:elem bs1_func_print(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_println(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_load(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_eval(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_car(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cdr(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_caar(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cdar(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cadr(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cddr(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_caaar(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cdaar(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cadar(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cddar(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_caadr(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cdadr(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_caddr(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cdddr(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_heapused(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_heapfree(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_heapsize(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_symsused(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_symsfree(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_symsmax(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:int BS1_Builtins_Init();
include/bs1_auto.h:elem bs1_func_sqrt(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_floor(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_ceil(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_round(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_truncate(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_pow(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_degrees(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_radians(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cos(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_sin(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_tan(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_cosd(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_sind(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_tand(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_acos(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_asin(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_atan(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_ln(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_log(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_log2(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_log10(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_real(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:elem bs1_func_imag(BS1_SVMState *ctx, elem args);
include/bs1_auto.h:int BS1_BuiltinMath_Init();
include/bs1_auto.h:int BS1_CComp_LoadCSource(char *name, char *out);
include/bs1_auto.h:int BS1_CComp_LoadLibrary(char *name);
include/bs1_auto.h:int BS1_CComp_LoadLibrary2(char *name);
include/bs1_auto.h:int BS1_CComp_LoadLibraryGeneric(char *name);
include/bs1_auto.h:int BS1_CComp_LoadModule(char *name);
include/bs1_auto.h:int BS1_CComp_CompileFile(char *name, char *out);
include/bs1_auto.h:int BS1_CComp_LoadCompileScript(char *name);
include/bs1_auto.h:int BS1_CComp_Init();
include/bs1_auto.h:void ccAddInclude(char *path);
include/bs1_auto.h:void ccAddLibrary(char *path);
include/bs1_auto.h:void ccAddSource(char *path);
include/bs1_auto.h:int ccLoadModule(char *file);
include/bs1_auto.h:int ccCompileModule(char *file, char *out);
include/bs1_auto.h:int ccLoadLibrary(char *name);
include/bs1_auto.h:int ccPrecompileModule(char *file);
include/bs1_auto.h:int ccLoadCompilerScript(char *file);
include/bs1_auto.h:void *ccGetAddr(char *sym);
include/bs1_auto.h:void ccSetAddr(char *sym, void *ptr);
include/bs1_auto.h:void *ccGetPtr(char *sym);
include/bs1_auto.h:void ccSetPtr(char *sym, void *v);
include/bs1_auto.h:int ccGetInt(char *sym);
include/bs1_auto.h:void ccSetInt(char *sym, int v);
include/bs1_auto.h:s64 ccGetLongLong(char *sym);
include/bs1_auto.h:void ccSetLongLong(char *sym, s64 v);
include/bs1_auto.h:float ccGetFloat(char *sym);
include/bs1_auto.h:void ccSetFloat(char *sym, float v);
include/bs1_auto.h:double ccGetDouble(char *sym);
include/bs1_auto.h:void ccSetDouble(char *sym, double v);
include/bs1_auto.h:void *BS1_CComp_ForceGet();
include/bs1_auto.h:void BS1_CComp_ForceSet(void *p);
include/bs1_auto.h:void BS1_CComp_Force();
include/bs1_auto.h:int BS1_MiniLZ_Decode(byte *ibuf, byte *obuf);
include/bs1_auto.h:void BS1_MiniLZ_Lookup(byte *cs, byte *cse, int chi,byte **hash, byte **chain, int *rbj, int *rbk);
include/bs1_auto.h:int BS1_MiniLZ_Encode(byte *ibuf, byte *obuf, int sz);
include/bs1_auto.h:int BS1_MiniLZ_DecodeSafe(byte *ibuf, int isz, byte *obuf, int osz);
include/bs1_auto.h:u32 BS1_MiniLZ_DataAdler32(void *buf, int sz, u32 lcrc);
include/bs1_auto.h:int BS1_BSCH_SaveChunk(void *fd, char *name, byte *buf, int sz);
include/bs1_auto.h:int BS1_BSCH_FindChunk(void *fd, char *name,int *offs, int *csz, int *dsz, int *crc);
include/bs1_auto.h:byte *BS1_BSCH_LoadChunk(void *fd, char *name, int *rsz);
include/bs1_auto.h:elem BS1_BSCH_LoadModuleAST(char *name);
include/bs1_auto.h:int BS1_CComp_PrecompileModule(char *name);
include/bs1_auto.h:int BS1_CParse_GetLinenum();
include/bs1_auto.h:char *BS1_CParse_GetFilename();
include/bs1_auto.h:int BS1_CParse_CalcLinenum(char *se);
include/bs1_auto.h:int BS1_CParse_SetLinenum(char *fname, char *base, int num);
include/bs1_auto.h:int BS1_CParse_PushLinenum();
include/bs1_auto.h:int BS1_CParse_PopLinenum();
include/bs1_auto.h:int BS1_CParse_SkimLinenum(char *s, char **rfn, int *rln);
include/bs1_auto.h:char *BS1_CParse_GetLastFileName();
include/bs1_auto.h:int BS1_CParse_GetLastLineNumber();
include/bs1_auto.h:char *BS1_CParse_EatWhiteOnly(char *s);
include/bs1_auto.h:char *BS1_CParse_EatWhite(char *s);
include/bs1_auto.h:int BS1_CParse_IsWhiteOnly(char *s);
include/bs1_auto.h:int BS1_CParse_IsLineBreak(char *se);
include/bs1_auto.h:int BS1_CParse_OpChar(int c);
include/bs1_auto.h:char *BS1_CParse_Token(char *s, char *b, int *ty);
include/bs1_auto.h:elem BS1_CParse_LookupStruct(char *name);
include/bs1_auto.h:elem BS1_CParse_LookupSProto(elem body);
include/bs1_auto.h:elem BS1_CParse_LookupType(char *name);
include/bs1_auto.h:int BS1_CParse_HandleTypedef(elem n);
include/bs1_auto.h:elem BS1_CParse_DefType(char **str);
include/bs1_auto.h:elem BS1_CParse_DefName(char **str);
include/bs1_auto.h:elem BS1_CParse_DefName2(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpandDefinition(elem tn, elem dn);
include/bs1_auto.h:elem BS1_CParse_Definition(char **str);
include/bs1_auto.h:elem BS1_CParse_FunArgs(char **str);
include/bs1_auto.h:elem BS1_CParse_VarsList(char **str, elem tn);
include/bs1_auto.h:elem BS1_CParse_FunVarsList(char **str);
include/bs1_auto.h:elem BS1_CParse_EnumVarsList(char **str);
include/bs1_auto.h:elem BS1_CParse_ModuleBuffer(char *name, char *modname, char *buf);
include/bs1_auto.h:elem BS1_CParse_Expression(char **str);
include/bs1_auto.h:int BS1_CParse_AddExpression(char *name, elem (*func)(char **s));
include/bs1_auto.h:elem BS1_CParse_ParseExpressionName(char *name, char **s);
include/bs1_auto.h:elem BS1_CParse_Number(char *str);
include/bs1_auto.h:elem BS1_CParse_ExpressionLit(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionPostfix(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionUnary(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionCast(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionExp(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionMD(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionAS(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionSHLR(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionRCmp(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionECmp(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionBitAnd(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionBitXor(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionBitOr(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionLop(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionLop2(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionTCond(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionEquals(char **str);
include/bs1_auto.h:elem BS1_CParse_ExpressionComma(char **str);
include/bs1_auto.h:elem BS1_CParse_Expression(char **str);
include/bs1_auto.h:elem BS1_CParse_Expression2(char **str);
include/bs1_auto.h:elem BS1_CParse_Expression3(char **str);
include/bs1_auto.h:void BS1_CParse_Warn(char *se, char *str, ...);
include/bs1_auto.h:void BS1_CParse_Error(char *se, char *str, ...);
include/bs1_auto.h:int BS1_CParse_AddStatement(char *name, elem (*func)(char **s));
include/bs1_auto.h:elem BS1_CParse_ParseStatementName(char *name, char **s);
include/bs1_auto.h:int BS1_CParse_AddBlockStatement(char *name,elem (*func)(char **s));
include/bs1_auto.h:elem BS1_CParse_ParseBlockStatementName(char *name, char **s);
include/bs1_auto.h:char *BS1_CParse_EatSemicolon(char *s);
include/bs1_auto.h:elem BS1_CParse_Statement(char **str);
include/bs1_auto.h:elem BS1_CParse_BlockStatementInner(char **str);
include/bs1_auto.h:elem BS1_CParse_BlockStatement(char **str);
include/bs1_auto.h:elem BS1_CParse_Block(char **str);
include/bs1_auto.h:elem BS1_CParse_BlockStatement2(char **str);
include/bs1_auto.h:int BS1_PP_AddIncludePathFront(char *str);
include/bs1_auto.h:int BS1_PP_AddIncludePathBack(char *str);
include/bs1_auto.h:int BS1_PP_ParseChar(char **str);
include/bs1_auto.h:char *BS1_PP_EmitString(char *t, char *s);
include/bs1_auto.h:char *BS1_PP_EmitCharString(char *t, char *s);
include/bs1_auto.h:void BS1_PP_Trigraphs(char *str);
include/bs1_auto.h:elem BS1_PP_LookupDefine(char *name);
include/bs1_auto.h:elem BS1_PP_DeleteDefine(char *name);
include/bs1_auto.h:elem BS1_PP_AddDefine(char *name, elem l);
include/bs1_auto.h:void BS1_PP_Include(char *str);
include/bs1_auto.h:void BS1_PP_Directive2(char *str);
include/bs1_auto.h:void BS1_PP_Directive(char *str);
include/bs1_auto.h:char *BS1_PP_ParseArg(char *s, char *b);
include/bs1_auto.h:char *BS1_PP_PrintName(char *t, char *s);
include/bs1_auto.h:char *BS1_PP_PrintToken(char *t, char *s, int ty);
include/bs1_auto.h:int BS1_PP_Expand(char **src, char **dst, char *op);
include/bs1_auto.h:int BS1_PP_Line(char *str);
include/bs1_auto.h:int BS1_PP_LineDigraph(char *str);
include/bs1_auto.h:int BS1_PP_LinePostFilter(char *str);
include/bs1_auto.h:char *BS1_PP_ParseLine(char *s, char *b);
include/bs1_auto.h:void BS1_PP_Buffer(char *ibuf);
include/bs1_auto.h:int BS1_PP_Filter(char *ibuf, char *obuf);
include/bs1_auto.h:void BS1_CComp_Warn(char *str, ...);
include/bs1_auto.h:void BS1_CComp_Error(char *str, ...);
include/bs1_auto.h:int BS1_CComp_IsAttr(elem l);
include/bs1_auto.h:elem BS1_CComp_GetFormAttr(elem l, char *name);
include/bs1_auto.h:elem BS1_CComp_StripForm(elem l);
include/bs1_auto.h:int BS1_CComp_CompileSwitch(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileStatement(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:char *BS1_CComp_VarTypeString(BS1_SVMCState *ctx, elem ty);
include/bs1_auto.h:void BS1_CComp_EmitVar(BS1_SVMCState *ctx, elem n, elem ty, elem v);
include/bs1_auto.h:void BS1_CComp_EmitVar2(BS1_SVMCState *ctx, elem n, elem ty, elem v);
include/bs1_auto.h:void BS1_CComp_CompileVarStatement(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_CComp_CompileBlock(BS1_SVMCState *ctx,elem name, elem args, elem body);
include/bs1_auto.h:void BS1_CComp_CompileStruct(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileUnion(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileEnum(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_CComp_CompileSProto(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileStructs(BS1_SVMCState *ctx);
include/bs1_auto.h:elem BS1_CComp_CompileProto(BS1_SVMCState *ctx,elem name, elem args);
include/bs1_auto.h:void BS1_CComp_EmitVarValue(BS1_SVMCState *ctx, elem v);
include/bs1_auto.h:void BS1_CComp_EmitVarValueR(BS1_SVMCState *ctx, elem v);
include/bs1_auto.h:void BS1_CComp_EmitTopArray(BS1_SVMCState *ctx, elem n, elem ty, elem v);
include/bs1_auto.h:void BS1_CComp_EmitTopVar(BS1_SVMCState *ctx, elem n, elem ty, elem v);
include/bs1_auto.h:void BS1_CComp_CompileTopStatement(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_CComp_CompileModule(char *name, elem l, char *outfn);
include/bs1_auto.h:char *BS1_CComp_CIfy(char *s);
include/bs1_auto.h:char *BS1_CComp_LongStr(elem l);
include/bs1_auto.h:void BS1_CComp_CompileAssign(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileFuncall(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileExprT(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_CompileExprTail(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:void BS1_CComp_EmitLabel(BS1_SVMCState *ctx, char *name);
include/bs1_auto.h:char *BS1_CComp_GenSym();
include/bs1_auto.h:char *BS1_CComp_GenSym2();
include/bs1_auto.h:void BS1_CComp_CompileBreak(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_CComp_CompileContinue(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_CComp_CompileBreakFalse(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_CComp_CompileBreakTrue(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_CComp_CompileContinueFalse(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_CComp_CompileContinueTrue(BS1_SVMCState *ctx);
include/bs1_auto.h:void BS1_CComp_CompileJmp(BS1_SVMCState *ctx, char *s);
include/bs1_auto.h:void BS1_CComp_CompileJmpFalse(BS1_SVMCState *ctx, char *s);
include/bs1_auto.h:void BS1_CComp_CompileJmpTrue(BS1_SVMCState *ctx, char *s);
include/bs1_auto.h:void BS1_CComp_CompileJmpCond(BS1_SVMCState *ctx, int i, char *s);
include/bs1_auto.h:void BS1_CComp_CompileJmpCond(BS1_SVMCState *ctx, int i, char *s);
include/bs1_auto.h:void BS1_CComp_CompileJCO(BS1_SVMCState *ctx, int op, elem ln, elem rn, char *s);
include/bs1_auto.h:void BS1_CComp_CompileJCT(BS1_SVMCState *ctx, elem l, char *s);
include/bs1_auto.h:void BS1_CComp_CompileJCF(BS1_SVMCState *ctx, elem l, char *s);
include/bs1_auto.h:int BS1_CComp_BoolExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_CComp_IsExpr(elem l);
include/bs1_auto.h:elem BS1_CComp_ReduceForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_CComp_ReduceExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_CComp_InferTypeBase(elem l);
include/bs1_auto.h:int BS1_CComp_InferIsIntP(elem t);
include/bs1_auto.h:int BS1_CComp_InferIsLongP(elem t);
include/bs1_auto.h:int BS1_CComp_InferIsFloatP(elem t);
include/bs1_auto.h:int BS1_CComp_InferIsDoubleP(elem t);
include/bs1_auto.h:int BS1_CComp_InferIsNumP(elem t);
include/bs1_auto.h:elem BS1_CComp_InferIsInt(elem t);
include/bs1_auto.h:elem BS1_CComp_InferIsLong(elem t);
include/bs1_auto.h:elem BS1_CComp_InferIsNum(elem t);
include/bs1_auto.h:elem BS1_CComp_InferForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_CComp_InferExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:elem BS1_CComp_InferExprClean(BS1_SVMCState *ctx, elem l, int *cp);
include/bs1_auto.h:int BS1_CComp_GuessCloseForm(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_CComp_GuessCloseExpr(BS1_SVMCState *ctx, elem l);
include/bs1_auto.h:int BS1_CComp_GuessCloseBlock(BS1_SVMCState *ctx, elem l);
include/bs1_base.h:elem (*func)(char **s);
include/bs1_base.h:u16 *(*func)(u16 *ip, BS1_CompileContext *ctx, elem expr);
include/bs1_core.h:#define ROOT2(p,q)		ROOT(p); ROOT(q)
include/bs1_core.h:#define ROOT3(p,q,r)		ROOT2(p,q); ROOT(r)
include/bs1_core.h:#define ROOT4(p,q,r,s)		ROOT3(p,q,r); ROOT(s)
include/bs1_core.h:#define ROOT5(p,q,r,s,t)	ROOT4(p,q,r,s); ROOT(t)
include/bs1_core.h:#define ROOT6(p,q,r,s,t,u)	ROOT5(p,q,r,s,t); ROOT(u)
include/bs1_core.h:#define ROOT7(p,q,r,s,t,u,v)	ROOT6(p,q,r,s,t,u); ROOT(v)
include/bs1_core.h:#define ROOT8(p,q,r,s,t,u,v,w)	ROOT7(p,q,r,s,t,u,v); ROOT(w)
include/bs1_core.h:#define ARG2(p,q)		ARG(p); ARG(q)
include/bs1_core.h:#define ARG3(p,q,r)		ARG2(p,q); ARG(r)
include/bs1_core.h:#define ARG4(p,q,r,s)		ARG3(p,q,r); ARG(s)
include/bs1_core.h:#define ARG5(p,q,r,s,t)		ARG4(p,q,r,s); ARG(t)
include/bs1_core.h:#define ARG6(p,q,r,s,t,u)	ARG5(p,q,r,s,t); ARG(u)
include/bs1_core.h:#define ARG7(p,q,r,s,t,u,v)	ARG6(p,q,r,s,t,u); ARG(v)
include/bs1_core.h:#define ARG8(p,q,r,s,t,u,v,w)	ARG7(p,q,r,s,t,u,v); ARG(w)
include/bs1_core.h:#define VAR1(p)			elem p;		BEGIN(); ROOT(p)
include/bs1_core.h:#define VAR2(p,q)		elem p,q;	BEGIN(); ROOT2(p,q)
include/bs1_core.h:#define VAR3(p,q,r)		elem p,q,r;	BEGIN(); ROOT3(p,q,r)
include/bs1_core.h:#define VAR4(p,q,r,s)		elem p,q,r,s;	BEGIN(); ROOT4(p,q,r,s)
include/bs1_core.h:#define VAR5(p,q,r,s,t)		elem p,q,r,s,t;	BEGIN(); ROOT5(p,q,r,s,t)
include/bs1_core.h:#define RET(n)		END(); return(n);
include/bs1_core.h:#define RETV()		END(); return;
include/bs1_svm.h:int (*thunk)(BS1_SVMState *ctx);
include/bs1_svm.h:int (*thunk)(BS1_SVMState *ctx);
include/bs1_svm.h:int (*thunk)(BS1_SVMState *ctx);
include/bs1_svm.h:elem (*fcn)(BS1_SVMState *ctx, elem args);
include/bs1_svm.h:elem (*fcn)();
include/bs1_svm_bak.h:int (**flowstack_thunk)(BMCC_SVMState *ctx);
include/bs1_svm_bak.h:int (*thunk)(BMCC_SVMState *ctx);
include/bs1_svm_bak.h:int (*thunk)(BMCC_SVMState *ctx);
include/bs1_svm_bak.h:elem (*fcn)(BMCC_SVMState *ctx, elem args);
include/bs1_svm_bak.h:elem (*fcn)();
include/sxc_auto.h:void *SXC_RAlloc(int sz);
include/sxc_auto.h:char *SXC_RStrDup(char *s);
include/sxc_auto.h:void SXC_StrCpy(char *t, char *s);
include/sxc_auto.h:char **SXC_Split(char *s);
include/sxc_auto.h:int SXC_AddBlock();
include/sxc_auto.h:int SXC_FindFreeCell(int *ri, int *rj);
include/sxc_auto.h:int SXC_FindFreeCells(int num, int *ri, int *rj);
include/sxc_auto.h:sxct SXC_MultiCons(int num);
include/sxc_auto.h:sxct SXC_AllocCons();
include/sxc_auto.h:sxct SXC_AllocObj(int ty, int sz);
include/sxc_auto.h:sxct SXC_AllocObjA64(int ty, int sz);
include/sxc_auto.h:sxct SXC_AllocObjAPtr(int ty, int sz);
include/sxc_auto.h:sxct SXC_AllocObjName(char *ty, int sz);
include/sxc_auto.h:sxct SXC_AllocObjNameAPtr(char *ty, int sz);
include/sxc_auto.h:int SXC_FindElemCell(sxct t, int *ri, int *rj);
include/sxc_auto.h:void SXC_FindElemCell2(sxct t, int *ri, int *rj);
include/sxc_auto.h:sxct SXC_ElemFromCell(int i, int j);
include/sxc_auto.h:int SXC_FindElemLObj(sxct t);
include/sxc_auto.h:int SXC_FreeCells(int i, int j);
include/sxc_auto.h:int SXC_FreeObj(sxct t);
include/sxc_auto.h:int SXC_GetObjType(sxct t);
include/sxc_auto.h:int SXC_GetObjSize(sxct t);
include/sxc_auto.h:int SXC_GetObjMark(sxct t);
include/sxc_auto.h:sxct SXC_GetPtrElem(void *ptr);
include/sxc_auto.h:void *SXC_GetElemPtr(sxct t);
include/sxc_auto.h:void *SXC_GetElemPtrA64(sxct t);
include/sxc_auto.h:sxct *SXC_GetCellPtr(sxct t);
include/sxc_auto.h:int SXC_HeapUsed();
include/sxc_auto.h:int SXC_HeapFree();
include/sxc_auto.h:int SXC_HeapSize();
include/sxc_auto.h:void SXC_PrintStats();
include/sxc_auto.h:void SXC_AddRoot(sxct *p);
include/sxc_auto.h:void SXC_AddRootArray(sxct *p, int n);
include/sxc_auto.h:void SXC_PushRoot(sxct *p);
include/sxc_auto.h:void SXC_PushRootArg(sxct *p);
include/sxc_auto.h:void SXC_PushRootPos();
include/sxc_auto.h:void SXC_PopRootPos();
include/sxc_auto.h:void SXC_Assign(sxct *p, sxct t);
include/sxc_auto.h:void SXC_Clear(sxct *p);
include/sxc_auto.h:void SXC_Assign(sxct *p, sxct t);
include/sxc_auto.h:void SXC_Clear(sxct *p);
include/sxc_auto.h:sxct SXC_AllocCons();
include/sxc_auto.h:int SXC_BlackenCells(int i, int j);
include/sxc_auto.h:int SXC_LockCells(int i, int j);
include/sxc_auto.h:int SXC_FreeCellObj(int i, int j);
include/sxc_auto.h:int SXC_FreeObj(sxct t);
include/sxc_auto.h:void SXC_IncRef(sxct t);
include/sxc_auto.h:void SXC_DecRef(sxct t);
include/sxc_auto.h:void SXC_SafeDecRef(sxct t);
include/sxc_auto.h:void SXC_CheckRef(sxct t);
include/sxc_auto.h:void SXC_SetManyRef(sxct t);
include/sxc_auto.h:void SXC_SetProtectRef(sxct t);
include/sxc_auto.h:int SXC_GetRefCount(sxct t);
include/sxc_auto.h:int SXC_GetRefCount(sxct t);
include/sxc_auto.h:int SXC_ClearMarks();
include/sxc_auto.h:int SXC_Sweep();
include/sxc_auto.h:void SXC_MarkRef(sxct t);
include/sxc_auto.h:void SXC_MarkObj(sxct t);
include/sxc_auto.h:void SXC_Mark();
include/sxc_auto.h:int SXC_MarkProtect();
include/sxc_auto.h:void SXC_Collect();
include/sxc_auto.h:int SXC_SymsUsed();
include/sxc_auto.h:int SXC_SymsMax();
include/sxc_auto.h:void SXC_BeginSetFunc(int ty);
include/sxc_auto.h:void SXC_SetMarkFunc(int ty, void (*fcn)(sxct obj));
include/sxc_auto.h:void SXC_SetDestroyFunc(int ty, void (*fcn)(sxct obj));
include/sxc_auto.h:void SXC_SetPrintFunc(int ty, void (*fcn)(char **str, sxct obj));
include/sxc_auto.h:void SXC_SetParseFunc(int ty, sxct (*fcn)(char **str));
include/sxc_auto.h:void SXC_SetLoadIndexFunc(int ty, sxct (*fcn)(sxct obj, sxct slot));
include/sxc_auto.h:void SXC_SetStoreIndexFunc(int ty,sxct (*fcn)(sxct obj, sxct slot, sxct val));
include/sxc_auto.h:void SXC_SetCallFunc(int ty, sxct (*fcn)(sxct obj, sxct fcn, sxct args));
include/sxc_auto.h:void SXC_SetMethodCallFunc(int ty,sxct (*fcn)(sxct obj, sxct slot, sxct args));
include/sxc_auto.h:void SXC_CallMarkFunc(sxct obj);
include/sxc_auto.h:void SXC_CallDestroyFunc(sxct obj);
include/sxc_auto.h:int SXC_CallPrintFunc(char **str, sxct obj);
include/sxc_auto.h:sxct SXC_LoadIndex(sxct obj, sxct slot);
include/sxc_auto.h:sxct SXC_StoreIndex(sxct obj, sxct slot, sxct val);
include/sxc_auto.h:sxct SXC_Call(sxct obj, sxct fcn, sxct args);
include/sxc_auto.h:sxct SXC_MethodCall(sxct obj, sxct slot, sxct args);
include/sxc_auto.h:int SXC_HasMethodCall(sxct obj);
include/sxc_auto.h:int SXC_HashIndex(char **hash, char *str);
include/sxc_auto.h:int SXC_HashType(char *str);
include/sxc_auto.h:char *SXC_HashTypeString(char *str);
include/sxc_auto.h:int SXC_GetType(sxct t);
include/sxc_auto.h:char *SXC_GetTypeName(sxct t);
include/sxc_auto.h:void *SXC_GetObjData(sxct t);
include/sxc_auto.h:void *SXC_GetObjDataA64(sxct t);
include/sxc_auto.h:void *SXC_GetObjDataAPtr(sxct t);
include/sxc_auto.h:sxct SXC_HashSymbol(char *str);
include/sxc_auto.h:sxct SXC_HashKeyword(char *str);
include/sxc_auto.h:sxct SXC_HashString(char *str);
include/sxc_auto.h:char *SXC_GetSymbol(sxct t);
include/sxc_auto.h:int SXC_GetSymbolIndex(sxct t);
include/sxc_auto.h:char *SXC_GetString(sxct t);
include/sxc_auto.h:int SXC_GetInt(sxct t);
include/sxc_auto.h:s64 SXC_GetLong(sxct t);
include/sxc_auto.h:float SXC_GetFloat(sxct t);
include/sxc_auto.h:double SXC_GetDouble(sxct t);
include/sxc_auto.h:void SXC_GetRational(sxct t, int *ri, int *rj);
include/sxc_auto.h:sxct SXC_Int(s64 i);
include/sxc_auto.h:sxct SXC_Long(s64 i);
include/sxc_auto.h:sxct SXC_Double(double f);
include/sxc_auto.h:sxct SXC_Char(int i);
include/sxc_auto.h:sxct SXC_Float(double f);
include/sxc_auto.h:sxct SXC_Rational(int i, int j);
include/sxc_auto.h:int SXC_GetBool(sxct t);
include/sxc_auto.h:sxct SXC_Cons(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_GetCar(sxct t);
include/sxc_auto.h:sxct SXC_GetCdr(sxct t);
include/sxc_auto.h:sxct SXC_SetCar(sxct t, sxct a);
include/sxc_auto.h:sxct SXC_SetCdr(sxct t, sxct a);
include/sxc_auto.h:void SXC_SetCar2(sxct t, sxct a);
include/sxc_auto.h:void SXC_SetCdr2(sxct t, sxct a);
include/sxc_auto.h:sxct SXC_GetCaar(sxct t);
include/sxc_auto.h:sxct SXC_GetCdar(sxct t);
include/sxc_auto.h:sxct SXC_GetCadr(sxct t);
include/sxc_auto.h:sxct SXC_GetCddr(sxct t);
include/sxc_auto.h:sxct SXC_Reverse(sxct l);
include/sxc_auto.h:sxct SXC_NReverse(sxct l);
include/sxc_auto.h:sxct SXC_CopyList(sxct a);
include/sxc_auto.h:sxct SXC_Append(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_NAppend(sxct a, sxct b);
include/sxc_auto.h:int SXC_IsListP(sxct l);
include/sxc_auto.h:int SXC_GetListLen(sxct l);
include/sxc_auto.h:sxct SXC_ListToArray(sxct l);
include/sxc_auto.h:sxct SXC_NewArray(int n);
include/sxc_auto.h:sxct SXC_NewArrayFromArray(sxct *arr, int n);
include/sxc_auto.h:sxct SXC_NewArray2(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_NewArray3(sxct a, sxct b, sxct c);
include/sxc_auto.h:sxct SXC_NewArray4(sxct a, sxct b, sxct c, sxct d);
include/sxc_auto.h:sxct SXC_NewArray5(sxct a, sxct b, sxct c, sxct d, sxct e);
include/sxc_auto.h:sxct SXC_NewArray6(sxct a, sxct b, sxct c, sxct d, sxct e, sxct f);
include/sxc_auto.h:int SXC_GetArrayLen(sxct t);
include/sxc_auto.h:sxct SXC_GetArrayElem(sxct t, int idx);
include/sxc_auto.h:sxct SXC_GetArrayElem2(sxct t, int idx);
include/sxc_auto.h:int SXC_SetArrayElem(sxct t, int idx, sxct a);
include/sxc_auto.h:char *SXC_PrintFloat(float f);
include/sxc_auto.h:char *SXC_PrintLong(sxct l);
include/sxc_auto.h:int SXC_Print(sxct t);
include/sxc_auto.h:int SXC_PrintLN(sxct t);
include/sxc_auto.h:int SXC_PrintTC(sxct t);
include/sxc_auto.h:int SXC_PrintTLN(sxct t);
include/sxc_auto.h:int SXC_Init();
include/sxc_auto.h:int SXC_Init();
include/sxc_auto.h:void SXCO_AddUnaryFcn(int op, char *ty, sxct (*fcn)(sxct a));
include/sxc_auto.h:void SXCO_AddBinaryFcn(int op, char *ta, char *tb,sxct (*fcn)(sxct a, sxct b));
include/sxc_auto.h:sxct SXC_ApplyUnaryFcn(sxct a, sxct f);
include/sxc_auto.h:sxct SXC_ApplyBinaryFcn(sxct a, sxct b, sxct f);
include/sxc_auto.h:sxct SXC_UnaryGeneric(int op, sxct a);
include/sxc_auto.h:sxct SXC_BinaryGeneric(int op, sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Add(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DAdd(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Sub(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DSub(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Mul(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DMul(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Div(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DDiv(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_IDiv(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Mod(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Shl(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Shr(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_And(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Or(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Xor(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Exp(sxct a, sxct b);
include/sxc_auto.h:int SXC_IsEqual(sxct a, sxct b);
include/sxc_auto.h:int SXC_IsLess(sxct a, sxct b);
include/sxc_auto.h:int SXC_IsGreater(sxct a, sxct b);
include/sxc_auto.h:int SXC_IsLessEqual(sxct a, sxct b);
include/sxc_auto.h:int SXC_IsGreaterEqual(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Binary(int op, sxct a, sxct b);
include/sxc_auto.h:sxct SXC_Unary(int op, sxct a);
include/sxc_auto.h:int SXC_CondBinary(int op, sxct a, sxct b);
include/sxc_auto.h:int SXC_CondUnary(int op, sxct a);
include/sxc_auto.h:char *SXCP_EatWhite(char *s);
include/sxc_auto.h:int SXCP_SpecialP(char *s);
include/sxc_auto.h:char *SXCP_Token(char *s, char *b, int *t);
include/sxc_auto.h:sxct SXCP_List(char **s, int ind);
include/sxc_auto.h:double SXCP_Float(char *s);
include/sxc_auto.h:sxct SXCP_Item(char **s, int ind);
include/sxc_auto.h:sxct SXCP_FromString(char *s);
include/sxc_auto.h:sxct SXCP_MultiFromString(char *s);
include/sxc_auto.h:char *SXCP_PrintListSim(char *s, char *se, sxct l);
include/sxc_auto.h:char *SXCP_PrintList(char *s, sxct l);
include/sxc_auto.h:char *SXCP_PrintListInd(char *s, sxct l, int ind);
include/sxc_auto.h:char *SXCP_Print(char *str, sxct t, int ind);
include/sxc_auto.h:char *SXCP_PrintS(sxct t);
include/sxc_auto.h:void SXCP_PrintFmt(sxct t);
include/sxc_auto.h:int SXC_GetVecLen(sxct a);
include/sxc_auto.h:float SXC_GetVecVal(sxct a, int idx);
include/sxc_auto.h:float SXC_GetVecVal2(sxct a, int idx);
include/sxc_auto.h:void SXC_SetVecVal(sxct a, int idx, float f);
include/sxc_auto.h:sxct SXC_List2FVec(sxct l);
include/sxc_auto.h:sxct SXC_MakeFVec(float *fa, int n);
include/sxc_auto.h:sxct SXC_MakeFVec2(float a, float b);
include/sxc_auto.h:sxct SXC_MakeFVec3(float a, float b, float c);
include/sxc_auto.h:sxct SXC_MakeFVec4(float a, float b, float c, float d);
include/sxc_auto.h:sxct SXC_AddVec(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_SubVec(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DotVec(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_ScaleVecNum(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_CrossVec(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_CrossVec2(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_VecLength(sxct a);
include/sxc_auto.h:sxct SXC_Normalize(sxct a);
include/sxc_auto.h:sxct SXC_Conjugate(sxct a);
include/sxc_auto.h:sxct SXC_Complex(float a, float b);
include/sxc_auto.h:float SXC_GetReal(sxct t);
include/sxc_auto.h:float SXC_GetImag(sxct t);
include/sxc_auto.h:sxct SXC_AddComplex(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_SubComplex(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_MulComplex(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DivComplex(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_ExpComplex(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_List2FMat(sxct l);
include/sxc_auto.h:sxct SXC_MakeMatrix(int xs, int ys);
include/sxc_auto.h:int SXC_GetXS(sxct t);
include/sxc_auto.h:int SXC_GetYS(sxct t);
include/sxc_auto.h:float *SXC_GetBody(sxct t);
include/sxc_auto.h:float *SXC_GetBody2(sxct t, int *rxs, int *rys);
include/sxc_auto.h:float SXC_GetMatIndex(sxct t, int x, int y);
include/sxc_auto.h:void SXC_SetMatIndex(sxct t, int x, int y, float v);
include/sxc_auto.h:sxct SXC_AddMatrix(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_SubMatrix(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_ScaleMatrix(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_MultMatrix(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_MultMatrixVector(sxct a, sxct b);
include/sxc_auto.h:void SXC_Inverse(float *a, float *b, int n);
include/sxc_auto.h:sxct SXC_InvertMatrix(sxct a);
include/sxc_auto.h:sxct SXC_DivMatrix(sxct a, sxct b);
include/sxc_auto.h:int SXC_GCF(int i, int j);
include/sxc_auto.h:int SXC_LCF(int i, int j);
include/sxc_auto.h:void SXC_ReduceRat(int *ri, int *rj);
include/sxc_auto.h:sxct SXC_AddRat(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_SubRat(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_MulRat(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DivRat(sxct a, sxct b);
include/sxc_auto.h:void SXC_UnwrapLong(sxct t, unsigned int *lv);
include/sxc_auto.h:sxct SXC_WrapLong(unsigned int *lv);
include/sxc_auto.h:sxct SXC_WrapSmallLong(unsigned int *lv);
include/sxc_auto.h:sxct SXC_AddLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_SubLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_MulLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_DivLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_ModLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_ShlLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_ShrLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_AndLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_OrLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_XorLong(sxct a, sxct b);
include/sxc_auto.h:sxct SXC_NegLong(sxct a);
include/sxc_auto.h:int SXC_EqualLong(sxct a, sxct b);
include/sxc_auto.h:int SXC_LessLong(sxct a, sxct b);
include/sxc_auto.h:int SXC_GreaterLong(sxct a, sxct b);
include/sxc_auto.h:char *SXC_XLong2String(sxct a);
include/sxc_auto.h:sxct SXC_String2XLong(char *str);
include/sxc_auto.h:void SXC_Add256F(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Sub256F(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Copy256F(u32 *a, u32 *c);
include/sxc_auto.h:void SXC_Neg256F(u32 *a, u32 *c);
include/sxc_auto.h:void SXC_Mul32O(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul32AO(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul64AO(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul128AO(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul256AO(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul64O(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul128O(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul256(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mul256O(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Div32O(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Div64O(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Shr256(u32 *a, int b, u32 *c);
include/sxc_auto.h:int SXC_Shl256(u32 *a, int b, u32 *c);
include/sxc_auto.h:void SXC_Shl256O(u32 *a, int b, u32 *c);
include/sxc_auto.h:void SXC_Shr512_1(u32 *a, u32 *c);
include/sxc_auto.h:int SXC_CmpG_512(u32 *a, u32 *b);
include/sxc_auto.h:void SXC_Div256(u32 *a, u32 *b, u32 *c, u32 *r);
include/sxc_auto.h:void SXC_Div256S(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:void SXC_Mod256S(u32 *a, u32 *b, u32 *c);
include/sxc_auto.h:int SXC_Mod256I(u32 *a, int b, u32 *c);
include/sxc_auto.h:void sxSetI(sxct *r, sxct a);
include/sxc_auto.h:void sxClearI(sxct *r);
include/sxc_auto.h:void sxGRootI(sxct *r);
include/sxc_auto.h:void sxRootI(sxct *r);
include/sxc_auto.h:void sxArgI(sxct *r);
include/sxc_auto.h:void sxInitI(sxct *r, sxct a);
include/sxc_auto.h:void sxDoneI(sxct *r);
include/sxc_auto.h:void sxInc(sxct r);
include/sxc_auto.h:void sxDec(sxct r);
include/sxc_auto.h:void sxSDec(sxct r);
include/sxc_auto.h:void sxBegin();
include/sxc_auto.h:void sxEnd();
include/sxc_auto.h:sxct sxRetI(sxct *r);
include/sxc_auto.h:sxct sxRetcI(sxct v);
include/sxc_auto.h:sxct sxRetvI();
include/sxc_auto.h:int sxGetType(sxct a);
include/sxc_auto.h:sxct sxCons(sxct a, sxct b);
include/sxc_auto.h:sxct sxSym(char *a);
include/sxc_auto.h:sxct sxKSym(char *a);
include/sxc_auto.h:sxct sxString(char *a);
include/sxc_auto.h:sxct sxInt(s64 a);
include/sxc_auto.h:sxct sxLong(s64 a);
include/sxc_auto.h:sxct sxFloat(float a);
include/sxc_auto.h:sxct sxDouble(double a);
include/sxc_auto.h:sxct sxChar(int a);
include/sxc_auto.h:sxct sxRat(int i, int j);
include/sxc_auto.h:sxct sxBool(int a);
include/sxc_auto.h:int sxHandleP(sxct a);
include/sxc_auto.h:int sxRatP(sxct a);
include/sxc_auto.h:int sxHeapP(sxct a);
include/sxc_auto.h:int sxSymP(sxct a);
include/sxc_auto.h:int sxKSymP(sxct a);
include/sxc_auto.h:int sxStringP(sxct a);
include/sxc_auto.h:int sxIntP(sxct a);
include/sxc_auto.h:int sxFloatP(sxct a);
include/sxc_auto.h:int sxCharP(sxct a);
include/sxc_auto.h:int sxLongP(sxct a);
include/sxc_auto.h:int sxXLongP(sxct a);
include/sxc_auto.h:int sxDoubleP(sxct a);
include/sxc_auto.h:int sxComplexP(sxct a);
include/sxc_auto.h:int sxLIntP(sxct a);
include/sxc_auto.h:int sxLXIntP(sxct a);
include/sxc_auto.h:int sxNumberP(sxct a);
include/sxc_auto.h:int sxArrayP(sxct a);
include/sxc_auto.h:int sxFVecP(sxct a);
include/sxc_auto.h:int sxFMarP(sxct a);
include/sxc_auto.h:int sxObjP(sxct a);
include/sxc_auto.h:int sxConsP(sxct a);
include/sxc_auto.h:char *sxSymV(sxct a);
include/sxc_auto.h:char *sxStringV(sxct a);
include/sxc_auto.h:s64 sxIntV(sxct a);
include/sxc_auto.h:s64 sxLongV(sxct a);
include/sxc_auto.h:float sxFloatV(sxct a);
include/sxc_auto.h:double sxDoubleV(sxct a);
include/sxc_auto.h:int sxBoolV(sxct a);
include/sxc_auto.h:sxct sxComplex(double a, double b);
include/sxc_auto.h:sxct sxComplexi(double f);
include/sxc_auto.h:double sxReal(sxct a);
include/sxc_auto.h:double sxImag(sxct a);
include/sxc_auto.h:sxct sxCons2(sxct a, sxct b, sxct c);
include/sxc_auto.h:sxct sxCons3(sxct a, sxct b, sxct c, sxct d);
include/sxc_auto.h:sxct sxCons4(sxct a, sxct b, sxct c, sxct d, sxct e);
include/sxc_auto.h:sxct sxCons5(sxct a, sxct b, sxct c, sxct d, sxct e, sxct f);
include/sxc_auto.h:sxct sxCons6(sxct a, sxct b, sxct c, sxct d, sxct e, sxct f, sxct g);
include/sxc_auto.h:sxct sxCons7(sxct a, sxct b, sxct c, sxct d, sxct e, sxct f, sxct g, sxct h);
include/sxc_auto.h:sxct sxList1(sxct a);
include/sxc_auto.h:sxct sxList2(sxct a, sxct b);
include/sxc_auto.h:sxct sxList3(sxct a, sxct b, sxct c);
include/sxc_auto.h:sxct sxList4(sxct a, sxct b, sxct c, sxct d);
include/sxc_auto.h:sxct sxList5(sxct a, sxct b, sxct c, sxct d, sxct e);
include/sxc_auto.h:sxct sxList6(sxct a, sxct b, sxct c, sxct d, sxct e, sxct f);
include/sxc_auto.h:sxct sxList7(sxct a, sxct b, sxct c, sxct d, sxct e, sxct f, sxct g);
include/sxc_auto.h:sxct sxArr2(sxct a, sxct b);
include/sxc_auto.h:sxct sxArr3(sxct a, sxct b, sxct c);
include/sxc_auto.h:sxct sxArr4(sxct a, sxct b, sxct c, sxct d);
include/sxc_auto.h:sxct sxArr5(sxct a, sxct b, sxct c, sxct d, sxct e);
include/sxc_auto.h:sxct sxArr6(sxct a, sxct b, sxct c, sxct d, sxct e, sxct f);
include/sxc_auto.h:sxct sxVec2(double a, double b);
include/sxc_auto.h:sxct sxVec3(double a, double b, double c);
include/sxc_auto.h:sxct sxVec4(double a, double b, double c, double d);
include/sxc_auto.h:sxct sxAdd(sxct a, sxct b);
include/sxc_auto.h:sxct sxSub(sxct a, sxct b);
include/sxc_auto.h:sxct sxMul(sxct a, sxct b);
include/sxc_auto.h:sxct sxDiv(sxct a, sxct b);
include/sxc_auto.h:sxct sxMod(sxct a, sxct b);
include/sxc_auto.h:sxct sxAnd(sxct a, sxct b);
include/sxc_auto.h:sxct sxOr(sxct a, sxct b);
include/sxc_auto.h:sxct sxXor(sxct a, sxct b);
include/sxc_auto.h:sxct sxShl(sxct a, sxct b);
include/sxc_auto.h:sxct sxShr(sxct a, sxct b);
include/sxc_auto.h:sxct sxEq(sxct a, sxct b);
include/sxc_auto.h:sxct sxEqv(sxct a, sxct b);
include/sxc_auto.h:sxct sxNeq(sxct a, sxct b);
include/sxc_auto.h:sxct sxNeqv(sxct a, sxct b);
include/sxc_auto.h:sxct sxL(sxct a, sxct b);
include/sxc_auto.h:sxct sxG(sxct a, sxct b);
include/sxc_auto.h:sxct sxLE(sxct a, sxct b);
include/sxc_auto.h:sxct sxGE(sxct a, sxct b);
include/sxc_auto.h:int sxEqP(sxct a, sxct b);
include/sxc_auto.h:int sxNeqP(sxct a, sxct b);
include/sxc_auto.h:int sxEqvP(sxct a, sxct b);
include/sxc_auto.h:int sxNeqvP(sxct a, sxct b);
include/sxc_auto.h:int sxLP(sxct a, sxct b);
include/sxc_auto.h:int sxGP(sxct a, sxct b);
include/sxc_auto.h:int sxLEP(sxct a, sxct b);
include/sxc_auto.h:int sxGEP(sxct a, sxct b);
include/sxc_auto.h:sxct sxGi(sxct a, sxct b);
include/sxc_auto.h:sxct sxSi(sxct a, sxct b, sxct c);
include/sxc_auto.h:sxct sxGiI(sxct a, int b);
include/sxc_auto.h:sxct sxSiI(sxct a, int b, sxct c);
include/sxc_auto.h:sxct sxGiS(sxct a, char *b);
include/sxc_auto.h:sxct sxSiS(sxct a, char *b, sxct c);
include/sxc_auto.h:sxct sxSetCar(sxct a, sxct b);
include/sxc_auto.h:sxct sxSetCdr(sxct a, sxct b);
include/sxc_auto.h:sxct sxCar(sxct a);
include/sxc_auto.h:sxct sxCdr(sxct a);
include/sxc_auto.h:sxct sxCaar(sxct a);
include/sxc_auto.h:sxct sxCdar(sxct a);
include/sxc_auto.h:sxct sxCadr(sxct a);
include/sxc_auto.h:sxct sxCddr(sxct a);
include/sxc_auto.h:sxct sxCaaar(sxct a);
include/sxc_auto.h:sxct sxCdaar(sxct a);
include/sxc_auto.h:sxct sxCadar(sxct a);
include/sxc_auto.h:sxct sxCddar(sxct a);
include/sxc_auto.h:sxct sxCaadr(sxct a);
include/sxc_auto.h:sxct sxCdadr(sxct a);
include/sxc_auto.h:sxct sxCaddr(sxct a);
include/sxc_auto.h:sxct sxCdddr(sxct a);
include/sxc_auto.h:sxct sxCaaaar(sxct a);
include/sxc_auto.h:sxct sxCdaaar(sxct a);
include/sxc_auto.h:sxct sxCadaar(sxct a);
include/sxc_auto.h:sxct sxCddaar(sxct a);
include/sxc_auto.h:sxct sxCaadar(sxct a);
include/sxc_auto.h:sxct sxCdadar(sxct a);
include/sxc_auto.h:sxct sxCaddar(sxct a);
include/sxc_auto.h:sxct sxCdddar(sxct a);
include/sxc_auto.h:sxct sxCaaadr(sxct a);
include/sxc_auto.h:sxct sxCdaadr(sxct a);
include/sxc_auto.h:sxct sxCadadr(sxct a);
include/sxc_auto.h:sxct sxCddadr(sxct a);
include/sxc_auto.h:sxct sxCaaddr(sxct a);
include/sxc_auto.h:sxct sxCdaddr(sxct a);
include/sxc_auto.h:sxct sxCadddr(sxct a);
include/sxc_auto.h:sxct sxCddddr(sxct a);
include/sxc_auto.h:sxct sxCAR(sxct a);
include/sxc_auto.h:sxct sxCDR(sxct a);
include/sxc_auto.h:sxct sxCAAR(sxct a);
include/sxc_auto.h:sxct sxCDAR(sxct a);
include/sxc_auto.h:sxct sxCADR(sxct a);
include/sxc_auto.h:sxct sxCDDR(sxct a);
include/sxc_auto.h:sxct sxCAAAR(sxct a);
include/sxc_auto.h:sxct sxCDAAR(sxct a);
include/sxc_auto.h:sxct sxCADAR(sxct a);
include/sxc_auto.h:sxct sxCDDAR(sxct a);
include/sxc_auto.h:sxct sxCAADR(sxct a);
include/sxc_auto.h:sxct sxCDADR(sxct a);
include/sxc_auto.h:sxct sxCADDR(sxct a);
include/sxc_auto.h:sxct sxCDDDR(sxct a);
include/sxc_auto.h:sxct sxCAAAAR(sxct a);
include/sxc_auto.h:sxct sxCDAAAR(sxct a);
include/sxc_auto.h:sxct sxCADAAR(sxct a);
include/sxc_auto.h:sxct sxCDDAAR(sxct a);
include/sxc_auto.h:sxct sxCAADAR(sxct a);
include/sxc_auto.h:sxct sxCDADAR(sxct a);
include/sxc_auto.h:sxct sxCADDAR(sxct a);
include/sxc_auto.h:sxct sxCDDDAR(sxct a);
include/sxc_auto.h:sxct sxCAAADR(sxct a);
include/sxc_auto.h:sxct sxCDAADR(sxct a);
include/sxc_auto.h:sxct sxCADADR(sxct a);
include/sxc_auto.h:sxct sxCDDADR(sxct a);
include/sxc_auto.h:sxct sxCAADDR(sxct a);
include/sxc_auto.h:sxct sxCDADDR(sxct a);
include/sxc_auto.h:sxct sxCADDDR(sxct a);
include/sxc_auto.h:sxct sxCDDDDR(sxct a);
include/sxc_auto.h:int sxFormP(sxct a, char *s);
include/sxil_auto.h:void SXIL_AddParseNewBlock(SXIL_Context *ctx, char *buf);
include/sxil_auto.h:void SXIL_AddParseNewInline(SXIL_Context *ctx, char *buf);
include/sxil_auto.h:SXIL_Block *SXIL_ParseProc(SXIL_Context *ctx, char **str);
include/sxil_auto.h:SXIL_Block *SXIL_ParseInlineProc(SXIL_Context *ctx, char **str);
include/sxil_auto.h:SXIL_Block *SXIL_ParseBlock(SXIL_Context *ctx, char **str);
include/sxil_auto.h:SXIL_Block *SXIL_ParseStruct(SXIL_Context *ctx, char **str);
include/sxil_auto.h:dyt SXIL_ParseVarValue(SXIL_Context *ctx, char **str, int vt);
include/sxil_auto.h:void SXIL_ParseVar(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseArr(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseExtern(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseClassExtern(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseBinOp(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseUnOp(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseFile(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseLine(SXIL_Context *ctx, char **str);
include/sxil_auto.h:void SXIL_ParseFLine(SXIL_Context *ctx, char **str);
include/sxil_auto.h:BGBSXIL_API void SXIL_ProcessBuffer(SXIL_Context *ctx,char *buf, char *outfn);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_EatWhiteOnly(char *s);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_EatWhite(char *s);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_IsWhiteOnly(char *s);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_IsLineBreak(char *se);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_OpChar(int c);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_MatchTokenListLen(char *str, char **lst);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_Token(char *s, char *b, int *ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_PeekChar(char **str);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_ParseChar(char **str);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_EmitChar(char **str, int j);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_NameInitChar(int c);
include/sxil_auto.h:BGBSXIL_API int SXIL_Parse_NameChar(int c);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_CIfy(char *s);
include/sxil_auto.h:BGBSXIL_API int sxil_strisreal(char *str);
include/sxil_auto.h:BGBSXIL_API s64 sxil_atoi(char *str);
include/sxil_auto.h:BGBSXIL_API char *sxil_itoa(s64 val);
include/sxil_auto.h:BGBSXIL_API int sxil_stricmp(char *s1, char *s2);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_TokenC(char *s, char *b, int *ty);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_MultiToken(char *str, char **ab, int *at, int n);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_EatMultiToken(char *str, int n);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_EatToken(char *str);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_TokenQN(char *str, char *b, int *rty);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_MultiTokenQN(char *str, char **ab, int *at, int n);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_EatMultiTokenQN(char *str, int n);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_EatTokenQN(char *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupOpcode(char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupOpcode2(char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupOpcodeArgs(char *name, int *at, int na);
include/sxil_auto.h:BGBSXIL_API char *SXIL_ParseOpArgs(SXIL_Context *ctx, SXIL_Block *blk,char *str, char *opname);
include/sxil_auto.h:BGBSXIL_API char *SXIL_ParseCommand(SXIL_Context *ctx,SXIL_Block *blk, char *str);
include/sxil_auto.h:BGBSXIL_API void SXIL_RegisterOperator(int op, sxil_type lty, sxil_type rty,int (*fcn)(SXIL_Context *ctx, int opr, sxil_type lty, sxil_type rty));
include/sxil_auto.h:BGBSXIL_API void SXIL_RegisterUnary(int op, sxil_type ty,int (*fcn)(SXIL_Context *ctx, int opr, sxil_type lty, sxil_type rty));
include/sxil_auto.h:BGBSXIL_API int SXIL_OprCustomCur(SXIL_Context *ctx, SXIL_OperatorInfo *cur,int opr, sxil_type at, sxil_type bt);
include/sxil_auto.h:BGBSXIL_API int SXIL_OprCustomLst(SXIL_Context *ctx, SXIL_OperatorInfo *lst,int opr, sxil_type at, sxil_type bt);
include/sxil_auto.h:BGBSXIL_API int SXIL_OprCustom(SXIL_Context *ctx, int opr, sxil_type at, sxil_type bt);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprLitLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprFloatLitLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVariant(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprGeneric(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpFloatLitLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpVariant(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpGeneric(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpLitLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpFloatLitLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpVariant(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpGeneric(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_JmpRaw(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_JmpTrue(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_JmpFalse(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Boolify(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprSubPtrPtr(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprPtrInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprSubWPtrWPtr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprWPtrInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprIntLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprLitInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_SetccGReg(SXIL_Context *ctx,sxil_reg reg, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_SetcctGReg(SXIL_Context *ctx,sxil_reg reg, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpIntLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpLitInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpIntLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpLitInt(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprUnaryGeneric(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprLongSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprLong(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpLong(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpLong(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpLongLit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprLong64(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpLong64(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpLong64(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpLong64Lit(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128_Binary(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128_Cmp(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128_Jmp(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128_Unary(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128_Cast(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128_MakeInt128(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_XFloat_Init();
include/sxil_auto.h:BGBSXIL_API void SXIL_XFloat_LoadMemXRegHF(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_XFloat_StoreMemXRegHF(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_Float128_PopXTmp(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128_Binary(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128_Cmp(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128_Jmp(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128_Unary(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128_Cast(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128_MakeFloat128(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprExp(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprExpSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprFloatSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpFloat2SSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpFloatSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpFloatSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprUnaryFloatSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_Builtin1SSE(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopST(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushST(SXIL_Context *ctx, int fl);
include/sxil_auto.h:BGBSXIL_API void SXIL_FlushST(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_DupFl(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadMemFlTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreMemFlTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprFloat(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprCmpFloat(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprJmpFloat(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprUnaryFloat(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_BuiltinArcSin(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_BuiltinArcCos(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVector(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatConj(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprUnaryVector(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OpMiscSSE(SXIL_Context *ctx, int op);
include/sxil_auto.h:BGBSXIL_API void SXIL_FVecLenSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVectorNegateSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatConjSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVectorToQuatSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatToV3fSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatToV4fSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVectorDotSSE_x87(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVectorDotSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVectorCrossSSE_x87(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVectorCrossSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatMulSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatRecipSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatDivSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatRDivSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprVectorSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprUnaryVectorSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_BuiltinVectorLerpSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_BuiltinRotVec3SSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_BuiltinRotVec4SSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_BuiltinQuatAxisAngleSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_MakeComplex(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_OprAddSubP(int opr);
include/sxil_auto.h:BGBSXIL_API int SXIL_OprMulDivP(int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprAddSubComplex(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprMulDivComplexImag(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprMulImagComplex(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprMulDivComplex(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprComplex(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprComplexNegate(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprComplexConj(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprUnaryComplex(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_MakeComplexSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ComplexRealSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ComplexImagSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprAddSubImagSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprMulDivImagSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprAddSubComplexSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprMulDivComplexImagSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprMulImagComplexSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprMulDivComplexSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprQuatSSE(SXIL_Context *ctx, int opr);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprComplexNegateSSE(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprComplexConjSSE(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_XI128_Add(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Sub(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Zero(u32 *c);
include/sxil_auto.h:void SXIL_XI128_Copy(u32 *a, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Neg(u32 *a, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Mul32O(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Mul32AO(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Mul64AO(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Mul128AO(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Mul64O(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Mul(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_MulO(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Shr(u32 *a, int b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Shl(u32 *a, int b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Shr256_1(u32 *a, u32 *c);
include/sxil_auto.h:void SXIL_XI128_Shr256_1B(u32 *a);
include/sxil_auto.h:int SXIL_XI128_CmpG_256(u32 *a, u32 *b);
include/sxil_auto.h:void SXIL_XI128_Div(u32 *a, u32 *b, u32 *c, u32 *r);
include/sxil_auto.h:void SXIL_XI128_DivS(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XI128_ModS(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:int SXIL_XI128_ModI(u32 *a, int b, u32 *c);
include/sxil_auto.h:void SXIL_XF128_GetMantissaTwos(u32 *a, u32 *b);
include/sxil_auto.h:int SXIL_XF128_GetExp(u32 *a);
include/sxil_auto.h:void SXIL_XF128_AddSub(u32 *a, u32 *b, u32 *c, int sb);
include/sxil_auto.h:void SXIL_XF128_Add(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XF128_Sub(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XF128_Mul(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XF128_Mul(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XF128_Div128_256I(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:void SXIL_XF128_Rcp(u32 *a, u32 *b);
include/sxil_auto.h:void SXIL_XF128_Div(u32 *a, u32 *b, u32 *c);
include/sxil_auto.h:s128 sxil_atoxl(char *str);
include/sxil_auto.h:char *sxil_xltoa(s128 val);
include/sxil_auto.h:s128 sxil_itoxl(s64 val);
include/sxil_auto.h:s64 sxil_xltoi(s128 val);
include/sxil_auto.h:s128 sxil_add_i128(s128 a, s128 b);
include/sxil_auto.h:s128 sxil_sub_i128(s128 a, s128 b);
include/sxil_auto.h:s128 sxil_mul_i128(s128 a, s128 b);
include/sxil_auto.h:s128 sxil_div_i128(s128 a, s128 b);
include/sxil_auto.h:s128 sxil_mod_i128(s128 a, s128 b);
include/sxil_auto.h:s128 sxil_addi_i128(s128 a, s64 b);
include/sxil_auto.h:s128 sxil_subi_i128(s128 a, s64 b);
include/sxil_auto.h:s128 sxil_muli_i128(s128 a, s64 b);
include/sxil_auto.h:s128 sxil_divi_i128(s128 a, s64 b);
include/sxil_auto.h:s128 sxil_modi_i128(s128 a, s64 b);
include/sxil_auto.h:BGBSXIL_API int SXIL_ResetRegRover(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_IndexRegName(SXIL_Context *ctx, char *reg);
include/sxil_auto.h:BGBSXIL_API char *SXIL_RegQName(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API char *SXIL_RegDName(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API char *SXIL_RegWName(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API char *SXIL_RegBName(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API char *SXIL_XRegName(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API char *SXIL_RegName(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Reg32P(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Reg64P(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Reg8P(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Reg16P(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegF64P(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegGRegP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegXRegP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegXRegLP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegXRegHP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegHRegP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegRegP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegTVarP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegLitP(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_RegEqvP(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_CheckFreeVarReg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_CheckFreeTmpReg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocVarReg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocGRegVar(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocGRegTmp(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocRegTmp(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_TryAllocGRegTmp(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_TryAllocXReg(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_TryAllocXRegL(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocXReg(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_TryAllocHReg(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocHReg(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocRegTmpT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocRegVarT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_TryAllocRegTmpT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_CheckRegVar(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_CheckRegFree(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_CheckFreeReg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_ReserveNumXReg(SXIL_Context *ctx, int ns, int nt);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetRegType(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushXRegT(SXIL_Context *ctx,sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopXRegT(SXIL_Context *ctx,sxil_reg reg, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopXFRegT(SXIL_Context *ctx,sxil_reg reg, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXTmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXFTmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXLTmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXITmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXFTmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXLTmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXITmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXFTmp(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXLTmp(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_PopXITmp(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_FlushPushReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_FlushReg2(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_FlushReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_FreeReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_FlushXReg2(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:void SXIL_FlushEAX(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_FlushEDX(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_FlushECX(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_FlushEBX(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_FlushESI(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_FlushEDI(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_FlushEDAX(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_FlushEDSI(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_SyncStack1(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_SyncStack2(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_SyncStack21(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_SyncStack3(SXIL_Context *ctx);
include/sxil_auto.h:void SXIL_SyncStack(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddSP(SXIL_Context *ctx, int sz);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubSP(SXIL_Context *ctx, int sz);
include/sxil_auto.h:BGBSXIL_API void SXIL_SyncESP(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_SyncESP2(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_StrRefESP(SXIL_Context *ctx, int disp);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPushImmL(SXIL_Context *ctx, s64 imm);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPushImm(SXIL_Context *ctx, int imm);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPushName(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPushReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPopReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPushDummy(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmZeroReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmIncReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmDecReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmCDQ(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendSign(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovSXB(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovZXB(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovSXW(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovZXW(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovSXD(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovZXD(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendSignBReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendSignWReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendSignDReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendZeroBReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendZeroWReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendZeroDReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendSignReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmExtendSignRegT(SXIL_Context *ctx, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmBSwapRegT(SXIL_Context *ctx, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprRegReg(SXIL_Context *ctx, char *op, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_OprRegReg2(SXIL_Context *ctx, char *op, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_XChgRegReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovRegReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmMovRegReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, int t);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmMovXRegXRegT(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPushXRegT(SXIL_Context *ctx,sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPopXRegT(SXIL_Context *ctx,sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AsmPopXFRegT(SXIL_Context *ctx,sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ConvGRegGRegT(SXIL_Context *ctx,sxil_reg dreg, sxil_reg sreg, sxil_type dty, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegInt(SXIL_Context *ctx, sxil_reg reg, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegLong(SXIL_Context *ctx,sxil_reg reg, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegInt128(SXIL_Context *ctx,sxil_reg reg, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegFloat(SXIL_Context *ctx,sxil_reg reg, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegDouble(SXIL_Context *ctx,sxil_reg reg, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegFComplex(SXIL_Context *ctx,sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegDComplex(SXIL_Context *ctx,sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegQuat(SXIL_Context *ctx,sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ConvXRegXRegT(SXIL_Context *ctx,sxil_reg dreg, sxil_reg sreg, sxil_type dty, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ConvRegRegT(SXIL_Context *ctx,sxil_reg dreg, sxil_reg sreg, sxil_type dty, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API sxil_reg SXIL_AllocTVar(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_FreeTVar(SXIL_Context *ctx, sxil_reg tv);
include/sxil_auto.h:BGBSXIL_API SXIL_MemRef *SXIL_LoadTVarRef(SXIL_Context *ctx,sxil_reg tv, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadRegTVarAddr(SXIL_Context *ctx,sxil_reg reg, sxil_reg tv);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovRegTVarT(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1, sxil_type t);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovTVarRegT(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1, sxil_type t);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovTVarTVarT(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1, sxil_type t);
include/sxil_auto.h:BGBSXIL_API void SXIL_BeginU(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_EndU(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_SetU(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_ImportClass(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadClassSlotAddr(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadClassSlot(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreClassSlot(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_CallClassMethodStatic(SXIL_Context *ctx,char *cname, char *name, char *sig);
include/sxil_auto.h:BGBSXIL_API void SXIL_CallClassMethodStaticQName(SXIL_Context *ctx, char *qname);
include/sxil_auto.h:BGBSXIL_API void SXIL_CallClassMethod(SXIL_Context *ctx, char *name, char *sig);
include/sxil_auto.h:BGBSXIL_API int SXIL_CheckNameQStatic(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_SplitNameQStatic(SXIL_Context *ctx, char *qname,char **rcname, char **rname, char **rsig);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_GetClassMethod(SXIL_Context *ctx,char *cname, char *name, char *sig);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_GetClassMethodQName(SXIL_Context *ctx, char *qname);
include/sxil_auto.h:BGBSXIL_API void SXIL_FComplexAddXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_FComplexSubXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexAddXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexSubXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_FComplexRecipXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexRecipXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexSquareXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexCubeXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulFComplexXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivFComplexXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulDComplexXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivDComplexXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_FComplexAddXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_FComplexSubXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexAddXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexSubXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_FComplexMulXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_FComplexDivXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexMulXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_DComplexDivXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatAddXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatSubXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatMulXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatRecipXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatDivXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatRDivXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatAddXRegFloat(SXIL_Context *ctx, sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatSubXRegFloat(SXIL_Context *ctx, sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatMulXRegFloat(SXIL_Context *ctx, sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_QuatDivXRegFloat(SXIL_Context *ctx, sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_LLong_Init();
include/sxil_auto.h:BGBSXIL_API void SXIL_LongShlXReg(SXIL_Context *ctx, sxil_reg reg, int cnt);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongShrXReg(SXIL_Context *ctx, sxil_reg reg, int cnt);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongMulXReg(SXIL_Context *ctx, sxil_reg reg, s64 v);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongDivXReg(SXIL_Context *ctx, sxil_reg reg, s64 v);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongAddXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongSubXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongMulXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongDivXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongModXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongAddXRegInt(SXIL_Context *ctx, sxil_reg reg, s64 val);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongSubXRegInt(SXIL_Context *ctx, sxil_reg reg, s64 val);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongMulXRegInt(SXIL_Context *ctx, sxil_reg reg, s64 val);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongDivXRegInt(SXIL_Context *ctx, sxil_reg reg, s64 val);
include/sxil_auto.h:BGBSXIL_API void SXIL_LongModXRegInt(SXIL_Context *ctx, sxil_reg reg, s64 val);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128_Init();
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128AddXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128SubXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128AddXRegRegSSE(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128SubXRegRegSSE(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128AddXReg(SXIL_Context *ctx, sxil_reg r0, s64 li);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128SubXReg(SXIL_Context *ctx, sxil_reg r0, s64 li);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128ShlXReg(SXIL_Context *ctx, sxil_reg r0, int i);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128ShrXReg(SXIL_Context *ctx, sxil_reg r0, int i);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128MulXReg(SXIL_Context *ctx, sxil_reg r0, s64 li);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128DivXReg(SXIL_Context *ctx, sxil_reg r0, s64 li);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128RSubXRegRegSSE(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128MulXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128DivXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128ModXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128ShlXRegRegSSE(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128ShrXRegRegSSE(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128CmpXRegXReg(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128NotXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128NegXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_Int128CmpZXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegFloat80(SXIL_Context *ctx,sxil_reg reg, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80AddXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80SubXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80MulXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80DivXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80CmpXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80NegXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80AddXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80SubXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80MulXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float80DivXRegFloat(SXIL_Context *ctx,sxil_reg reg, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128_Init();
include/sxil_auto.h:BGBSXIL_API void SXIL_CvtXRegFloat128(SXIL_Context *ctx, sxil_reg reg, sxil_type sty);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128AddXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128SubXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128MulXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128DivXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128CmpXRegXReg(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1);
include/sxil_auto.h:BGBSXIL_API void SXIL_Float128NegXReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddGRegGRegT(SXIL_Context *ctx,sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubGRegGRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulGRegGRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivGRegGRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_RDivRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ModGRegGRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ModXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ModRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AndGRegGRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AndXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AndRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OrGRegGRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OrXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OrRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_XorGRegGRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_XorXRegXRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_XorRegRegT(SXIL_Context *ctx, sxil_reg r0, sxil_reg r1, sxil_type ty);
include/sxil_auto.h:int sxil_log2exact(s64 val);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ModGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ModXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_ModRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AndGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AndXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AndRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OrGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OrXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_OrRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_XorGRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_XorXRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_XorRegIntT(SXIL_Context *ctx,sxil_reg reg, s64 val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddXRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_AddRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubXRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SubRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulXRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MulRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivXRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_DivRegFloatT(SXIL_Context *ctx, sxil_reg reg, double val, sxil_type ty);
include/sxil_auto.h:SXIL_HeapInfo *sxil_alloc_heap(SXIL_Context *ctx);
include/sxil_auto.h:void sxil_free_heap(SXIL_HeapInfo *heap);
include/sxil_auto.h:BGBSXIL_API void *sxil_alc_heap(SXIL_HeapInfo *heap, int sz, char *fn, int ln);
include/sxil_auto.h:int sxil_check_heap(SXIL_HeapInfo *heap);
include/sxil_auto.h:void sxil_init_heap(SXIL_Context *ctx);
include/sxil_auto.h:void sxil_deinit_heap(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void *sxil_alc_name(SXIL_Context *ctx, int sz, char *fn, int ln);
include/sxil_auto.h:BGBSXIL_API void *sxil_alc_tyname(SXIL_Context *ctx, char *ty, int sz, char *fn, int ln);
include/sxil_auto.h:BGBSXIL_API void sxil_free(void *ptr);
include/sxil_auto.h:BGBSXIL_API int sxil_heapalc_getsize(SXIL_HeapInfo *heap, void *ptr);
include/sxil_auto.h:BGBSXIL_API int sxil_alc_getsize(void *ptr);
include/sxil_auto.h:BGBSXIL_API SXIL_HeapInfo *sxil_alc_getheap(void *ptr);
include/sxil_auto.h:BGBSXIL_API void *sxil_realloc(void *ptr, int sz);
include/sxil_auto.h:BGBSXIL_API int sxil_strdup_i(char *str);
include/sxil_auto.h:BGBSXIL_API char *sxil_strtab_i(int i);
include/sxil_auto.h:BGBSXIL_API char *sxil_strdup(char *str);
include/sxil_auto.h:BGBSXIL_API void *sxil_ralloc(int sz);
include/sxil_auto.h:BGBSXIL_API char *sxil_rstrdup(char *s);
include/sxil_auto.h:BGBSXIL_API char **sxil_split(char *s);
include/sxil_auto.h:BGBSXIL_API char *sxil_rstradd(char *s0, char *s1);
include/sxil_auto.h:BGBSXIL_API char *sxil_rstradd2(char *s0, char *s1, char *s2);
include/sxil_auto.h:BGBSXIL_API char *sxil_rstradd3(char *s0, char *s1, char *s2, char *s3);
include/sxil_auto.h:BGBSXIL_API int sxil_log2(s64 v);
include/sxil_auto.h:BGBSXIL_API int sxil_log2up(s64 v);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexSymbol(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexStringLiteral(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexStringLiteralName(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexFloatLiteral(SXIL_Context *ctx, float f);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexDoubleLiteral(SXIL_Context *ctx, double f);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexLongLiteral(SXIL_Context *ctx, s64 v);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexFloatLiteralName(SXIL_Context *ctx, double f);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexDoubleLiteralName(SXIL_Context *ctx, double f);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexLongLiteralName(SXIL_Context *ctx, s64 v);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexInt128LiteralName(SXIL_Context *ctx, s64 v);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexXVec(SXIL_Context *ctx, int *iv);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexNameV4I(SXIL_Context *ctx, int a, int b, int c, int d);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexNameV2F(SXIL_Context *ctx, double x, double y);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexNameV3F(SXIL_Context *ctx, double x, double y, double z);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexNameV4F(SXIL_Context *ctx, double x, double y, double z, double w);
include/sxil_auto.h:BGBSXIL_API char *SXIL_IndexNameV2D(SXIL_Context *ctx, double x, double y);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GetAliasTop(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API char *SXIL_AliasNameTop(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API SXIL_MemRef *SXIL_NewMemRef(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API SXIL_MemRef *SXIL_MkMemRef(SXIL_Context *ctx, int breg, int ireg, int scale, int disp);
include/sxil_auto.h:BGBSXIL_API SXIL_MemRef *SXIL_MemRefName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API SXIL_MemRef *SXIL_MemRefESP(SXIL_Context *ctx, int disp);
include/sxil_auto.h:BGBSXIL_API SXIL_MemRef *SXIL_MemRefAbsESP(SXIL_Context *ctx, int disp);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GenRefStrDisp(SXIL_Context *ctx, SXIL_MemRef *ref, int disp);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GenRefStr(SXIL_Context *ctx, SXIL_MemRef *ref);
include/sxil_auto.h:BGBSXIL_API char *SXIL_StrRefAbsESP(SXIL_Context *ctx, int disp);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadRegRefAddr(SXIL_Context *ctx, sxil_reg reg, SXIL_MemRef *ref);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadMemTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreMemTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovMemRegT(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MovRegMemT(SXIL_Context *ctx, sxil_reg reg, SXIL_MemRef *ref, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadMemRegTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreMemRegTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadMemGRegTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreMemGRegTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadMemXRegTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreMemXRegTy(SXIL_Context *ctx, SXIL_MemRef *ref, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MemCopyRegRegTy(SXIL_Context *ctx, sxil_reg dreg, sxil_reg sreg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MemCopyMemRegTy(SXIL_Context *ctx, SXIL_MemRef *dref, sxil_reg sreg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MemCopyRegMemTy(SXIL_Context *ctx, sxil_reg dreg, SXIL_MemRef *sref, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_MemCopyMemMemTy(SXIL_Context *ctx,SXIL_MemRef *dref, SXIL_MemRef *sref, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_MemCopyMemMemSz(SXIL_Context *ctx,SXIL_MemRef *dref, SXIL_MemRef *sref, int sz);
include/sxil_auto.h:BGBSXIL_API void SXIL_MemCopyMemGRegSz(SXIL_Context *ctx,SXIL_MemRef *dref, sxil_reg sreg, int sz);
include/sxil_auto.h:BGBSXIL_API void SXIL_MemCopyGRegMemSz(SXIL_Context *ctx,sxil_reg dreg, SXIL_MemRef *sref, int sz);
include/sxil_auto.h:BGBSXIL_API void SXIL_MemCopyGRegGRegSz(SXIL_Context *ctx,sxil_reg dreg, sxil_reg sreg, int sz);
include/sxil_auto.h:BGBSXIL_API void SXIL_CallFuncPtr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_SetupFuncArgs(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRetStructPtr(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API void SXIL_CallFuncName(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_EnterX86(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_EnterX64_XCall(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_EnterX64_Win64(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_EnterX64_AMD64(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Enter(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ExitX86(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ExitX64_XCall(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ExitX64_Win64(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ExitX64_AMD64(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Exit(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Return(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ReturnValue(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Arg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_LArg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushMark(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushMarkSBlk(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushMarkS(SXIL_Context *ctx, char *s);
include/sxil_auto.h:BGBSXIL_API int SXIL_MarkFrameSize(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopMark(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopMarkResv(SXIL_Context *ctx, int r);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopMarkCall(SXIL_Context *ctx, char *s);
include/sxil_auto.h:BGBSXIL_API void SXIL_PrepareCallWin64(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PrepareCallAMD64(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopMarkCallX64(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API void SXIL_CallerPushReturnValue(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_CallPopMarkStr(SXIL_Context *ctx, char *name, sxil_type rty);
include/sxil_auto.h:BGBSXIL_API void SXIL_BeginCallFunc(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_EndCallFunc(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_RegisterCast(sxil_type dty, sxil_type sty,int (*fcn)(SXIL_Context *ctx, sxil_type dty, sxil_type sty, int fl));
include/sxil_auto.h:BGBSXIL_API int SXIL_CastCustomCur(SXIL_Context *ctx, SXIL_CastInfo *cur,sxil_type dt, sxil_type st, int fl);
include/sxil_auto.h:BGBSXIL_API int SXIL_CastCustomLst(SXIL_Context *ctx, SXIL_CastInfo *lst,sxil_type dt, sxil_type st, int fl);
include/sxil_auto.h:BGBSXIL_API int SXIL_CastCustom(SXIL_Context *ctx, sxil_type dt, sxil_type st, int fl);
include/sxil_auto.h:BGBSXIL_API int SXIL_CastVec(SXIL_Context *ctx, sxil_type ty, sxil_type ty1, int fl);
include/sxil_auto.h:BGBSXIL_API void SXIL_Cast(SXIL_Context *ctx, sxil_type ty, int fl);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushLitInt(SXIL_Context *ctx, s64 v);
include/sxil_auto.h:BGBSXIL_API s64 SXIL_PopLitInt(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushLitLong(SXIL_Context *ctx, s64 v);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushLitFloat(SXIL_Context *ctx, double v);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushLitDouble(SXIL_Context *ctx, double v);
include/sxil_auto.h:BGBSXIL_API double SXIL_PopLitFloat(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushStrInt(SXIL_Context *ctx, int v);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushSymInt(SXIL_Context *ctx, int v);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushSymStr(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_PopSymInt(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_PopSymStr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_PopJmpStr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API s64 SXIL_PopIntVal(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushBlkInt(SXIL_Context *ctx, int v);
include/sxil_auto.h:BGBSXIL_API char *SXIL_PeekSymStr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_PopBlock(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushString(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API void SXIL_SetRegInt(SXIL_Context *ctx, sxil_reg reg, s64 v);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopSReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopRegT(SXIL_Context *ctx, sxil_reg reg, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRegT(SXIL_Context *ctx, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackPos(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_SetStackPos(SXIL_Context *ctx, int sp);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackAlign(SXIL_Context *ctx, int al);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLastPos(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRegFT(SXIL_Context *ctx, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_PopVarT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_PopTmpT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_PopVar(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_PopTmp(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRegL(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEAX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEDX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopECX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEBX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopESI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEDI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEAX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushECX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEBX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushESI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEAX2(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDX2(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushECX2(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEBX2(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEAXT(SXIL_Context *ctx, int *ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEDXT(SXIL_Context *ctx, int *ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopECXT(SXIL_Context *ctx, int *ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEBXT(SXIL_Context *ctx, int *ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEAXT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDXT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushECXT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEBXT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushESIT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDIT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEAX2T(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDX2T(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushECX2T(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEBX2T(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushESI2T(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDI2T(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopRAX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopRDX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopRCX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopRBX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopRSI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopRDI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRAX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRDX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRCX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRBX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRSI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushRDI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEDAX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDAX(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDAX2(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEDSI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDSI(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDSI2(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEDAXT(SXIL_Context *ctx, int *ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopEDSIT(SXIL_Context *ctx, int *ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDAXT(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PushEDAX2T(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_Pop(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopInt(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_PopLong(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Dup(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_ExchIJ32(SXIL_Context *ctx, int i, int j);
include/sxil_auto.h:BGBSXIL_API void SXIL_ExchIJ64(SXIL_Context *ctx, int i, int j);
include/sxil_auto.h:BGBSXIL_API void SXIL_Exch(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_AliasName(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadAddrName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadGenericName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreGenericName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadAddr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadGeneric(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreGeneric(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadReg(SXIL_Context *ctx, char *name, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreReg(SXIL_Context *ctx, char *name, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadSlot_VecPerm(SXIL_Context *ctx, char *s, int l);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadSlot(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreSlot(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadSlotAddr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadIndex(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreIndex(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadIndexAddr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_SizeOfT(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_SizeOf(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_OffsetOf(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_IncVar(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_DecVar(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexLocal(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexArg(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadLocalOffset(SXIL_Context *ctx, char *name, int *ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadArgOffset(SXIL_Context *ctx, char *name, int *ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_CheckGlobalInner(SXIL_Context *ctx, char *name, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_CheckGlobal(SXIL_Context *ctx, char *name, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetTlsAddrReg(SXIL_Context *ctx, char *name, int sz);
include/sxil_auto.h:BGBSXIL_API int SXIL_CheckGeneric(SXIL_Context *ctx, char *name, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetVarFlags(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API SXIL_MemRef *SXIL_LoadNameRef(SXIL_Context *ctx, char *name, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_VecPermReg(SXIL_Context *ctx, sxil_reg reg, sxil_type ty, char *slot, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadSlotReg(SXIL_Context *ctx, sxil_reg reg, sxil_type ty, char *slot, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreSlotReg(SXIL_Context *ctx, sxil_reg reg, sxil_type ty, char *slot, int vreg);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadSlotAddrReg(SXIL_Context *ctx,sxil_reg reg, sxil_type ty, char *slot, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadIndexAddrRegInt(SXIL_Context *ctx,sxil_reg reg, sxil_type ty, int idx, sxil_reg rreg, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadIndexAddrRegReg(SXIL_Context *ctx,sxil_reg reg, sxil_type ty, int ridx, sxil_reg rreg, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadIndexRegInt(SXIL_Context *ctx,sxil_reg reg, sxil_type ty, int idx, int *rreg, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_StoreIndexRegInt(SXIL_Context *ctx,sxil_reg reg, sxil_type ty, int idx, int vreg);
include/sxil_auto.h:BGBSXIL_API int SXIL_LoadIndexRegReg(SXIL_Context *ctx,sxil_reg reg, sxil_type ty, int ridx, int *rreg, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_StoreIndexRegReg(SXIL_Context *ctx,sxil_reg reg, sxil_type ty, int ridx, int vreg);
include/sxil_auto.h:BGBSXIL_API void SXIL_IncVarName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_DecVarName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LookupVar(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LookupVarReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_CheckIndexVar(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_IndexVarName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_IndexVarNameTy(SXIL_Context *ctx, char *name, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_BindNameReg(SXIL_Context *ctx, char *name, sxil_reg reg, sxil_type type);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_BindTVar(SXIL_Context *ctx, char *name, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVarIdx(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVar(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_SaveVar(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_SaveVarIdx(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_FlushVarIdx(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_FlushVars(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_FlushVar(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVarRegVar(SXIL_Context *ctx, char *name, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVarReg(SXIL_Context *ctx, char *name, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_SetVarReg(SXIL_Context *ctx, char *name, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_StoreVarReg(SXIL_Context *ctx, char *name, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVarSlotReg(SXIL_Context *ctx,char *name, char *slot, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_StoreVarSlotReg(SXIL_Context *ctx,char *name, char *slot, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVarIdxReg(SXIL_Context *ctx,char *name, int idx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_StoreVarIdxReg(SXIL_Context *ctx,char *name, int idx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVarIdxRegReg(SXIL_Context *ctx,char *name, int ridx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_StoreVarIdxRegReg(SXIL_Context *ctx,char *name, int ridx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_LoadVarIdxVarReg(SXIL_Context *ctx,char *name, char *vidx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_Var2_StoreVarIdxVarReg(SXIL_Context *ctx,char *name, char *vidx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API void SXIL_WPtr_Init();
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadWPtrTy(SXIL_Context *ctx, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreWPtrTy(SXIL_Context *ctx, sxil_reg reg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_LoadWPtrRegT(SXIL_Context *ctx, sxil_reg dreg, sxil_reg sreg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_StoreWPtrRegT(SXIL_Context *ctx, sxil_reg dreg, sxil_reg sreg, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_PredAddFcn(sxil_type typ, int fl, int (*fcn)(SXIL_Context *ctx, sxil_type dty, sxil_type sty, int fl));
include/sxil_auto.h:BGBSXIL_API void SXIL_PredAddIs(sxil_type typ, sxil_type ty, int fl);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_LookupStruct(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_LookupStructType(SXIL_Context *ctx,sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetExtBaseType(SXIL_Context *ctx,sxil_type ty);
include/sxil_auto.h:BGBSXIL_API void SXIL_SizeTypeCount(SXIL_Context *ctx,sxil_type ty, int asz, int *algn, int *rsz);
include/sxil_auto.h:BGBSXIL_API void SXIL_SizeType(SXIL_Context *ctx, sxil_type ty, int *algn, int *rsz);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetTypeItemCount(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_SizeStruct(SXIL_Context *ctx, SXIL_Block *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_SizeUnion(SXIL_Context *ctx, SXIL_Block *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_StructSlotInfo(SXIL_Context *ctx, SXIL_Block *st,char *name, int *roffs, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSlotInfo(SXIL_Context *ctx, sxil_type ty, char *name, int *roffs, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_TypeExtBTY(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeStructP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeUnionP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeClassP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetTypePtr(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetPtrType(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetTypeWPtr(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetTypeBase(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetTypeBase2(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetPtrTypeSize(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetTypeStackSize(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API SXIL_TypeBody *SXIL_GetTypeOvf(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_SetTypeOvf(SXIL_Context *ctx, sxil_type ty, SXIL_TypeBody *ovf);
include/sxil_auto.h:BGBSXIL_API SXIL_TypeBody *SXIL_GetTypeOvf2(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetTypeFlag(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_SetTypeFlag(SXIL_Context *ctx, sxil_type ty, int fl);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetTypeSize(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetArrayStepSize(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetArrayStepType(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_GetArrayStepCount(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetRefType(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetTypeRef(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetVRefType(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_GetTypeVRef(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeOvfP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeWPtrP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeRefP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeVRefP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeBasicP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeLitP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeExtP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypePtrP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeArrP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeArr1DP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeBaseP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeBaseLitP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeIntP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeLongP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSmallIntP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSmallLongP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeInt128P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSmallInt128P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeFloatP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeDoubleP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeFloat80P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeFloat128P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeHFloatP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeLitRealP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeRealP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeComplexP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeImagP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeNumberP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSmallComplexP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeFComplexP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeDComplexP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeFImagP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeDImagP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeQuatP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeVariantP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeVarargP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeDNumberP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeM128P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeM64P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSSE64P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSSE128P(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeVectorP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeFVecP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeMatrixP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSSEP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeRetSSEP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeGRegP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSysvGRegP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeSysvXRegP(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypePredP(SXIL_Context *ctx, sxil_type ty, sxil_type typ);
include/sxil_auto.h:BGBSXIL_API int SXIL_TypeTemplateP(SXIL_Context *ctx, sxil_type ty, sxil_type typ);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_StackIdx(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxBasicP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxLitP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxPtrP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxIntP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxLongP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxLitIntP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxLitLongP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdxLIP(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdx32P(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIdx64P(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLitP(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackIntP(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLongP(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackInt2P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLong2P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLit12P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackInt12P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLong12P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackInt3P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLong3P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack32P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack32_2P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack64P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack64_2P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack32_12P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack64_12P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack32_3P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_Stack64_3P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLIntP(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_StackLInt12P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_VaStart(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_VaEnd(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_VaArg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_VaCopy(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API byte *SXIL_EncodeOpcode(byte *ip, int n);
include/sxil_auto.h:BGBSXIL_API byte *SXIL_EncVLI(byte *ip, long long i);
include/sxil_auto.h:BGBSXIL_API byte *SXIL_EncSVLI(byte *ip, long long i);
include/sxil_auto.h:BGBSXIL_API s64 SXIL_DecVLI(byte **rip);
include/sxil_auto.h:BGBSXIL_API s64 SXIL_DecSVLI(byte **rip);
include/sxil_auto.h:BGBSXIL_API char *SXIL_Parse_TypeSig(char **str);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_ParseProtoSig(SXIL_Context *ctx, char **str);
include/sxil_auto.h:BGBSXIL_API sxil_type SXIL_ParseType(SXIL_Context *ctx, char **str);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GetTypeSig(SXIL_Context *ctx, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GetStackMarkSig(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GetBlockSig(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GetBlockVaSig(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API int SXIL_MangleStrBuf(char *str, char *buf);
include/sxil_auto.h:BGBSXIL_API int SXIL_MangleStrArrayBuf(char **str, char *buf);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GenericMangleString(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GenericMangleStringArray(SXIL_Context *ctx, char **str);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GetBlockNameMangleX64(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexTypeBody(SXIL_Context *ctx, SXIL_TypeBody *ovf);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexTypeBodyXF(SXIL_Context *ctx, int xf);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_LookupBlock(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_LookupBlock2(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_LookupProc(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_LookupFunc(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_LookupText(SXIL_Context *ctx, char *buf);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_AllocBlock(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API SXIL_Block *SXIL_AllocBlockNameSig(SXIL_Context *ctx,char *name, char *sig);
include/sxil_auto.h:BGBSXIL_API void SXIL_FinishBlock(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API void SXIL_FreeBlock(SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupBlockArg(SXIL_Block *blk, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupBlockVar(SXIL_Block *blk, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupBlockLabel(SXIL_Block *blk, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_AddBlockArg(SXIL_Block *blk, char *name, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_AddBlockVar(SXIL_Block *blk, char *name, sxil_type ty);
include/sxil_auto.h:BGBSXIL_API int SXIL_AddBlockLabel(SXIL_Block *blk, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_CheckEmitBlock(SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockOpcode(SXIL_Block *blk, int op);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockVLI(SXIL_Block *blk, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockSVLI(SXIL_Block *blk, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockSym(SXIL_Block *blk, char *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockString(SXIL_Block *blk, char *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockInt(SXIL_Block *blk, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockLong(SXIL_Block *blk, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockFloat(SXIL_Block *blk, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_EmitBlockDouble(SXIL_Block *blk, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpRet(SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpRetVar(SXIL_Block *blk, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpRetInt(SXIL_Block *blk, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpRetLong(SXIL_Block *blk, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpRetFloat(SXIL_Block *blk, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpRetDouble(SXIL_Block *blk, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpIf(SXIL_Block *blk, char *var, char *lbl);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpIfCond(SXIL_Block *blk,char *var0, int op, char *var1, char *lbl);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpIfCondInt(SXIL_Block *blk,char *var, int op, int val, char *lbl);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpIfCondLong(SXIL_Block *blk,char *var, int op, int val, char *lbl);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpIfCondFloat(SXIL_Block *blk,char *var, int op, double val, char *lbl);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpIfCondDouble(SXIL_Block *blk,char *var, int op, double val, char *lbl);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpCall(SXIL_Block *blk, char *fcn);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpCallA(SXIL_Block *blk, char *fcn, int *arg);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetCall(SXIL_Block *blk, char *var, char *fcn);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetCallA(SXIL_Block *blk, char *var, char *fcn, int *arg);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarIdxVar(SXIL_Block *blk,char *var, char *svar, char *idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarIdxInt(SXIL_Block *blk,char *var, char *svar, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarIdxSym(SXIL_Block *blk,char *var, char *svar, char *sym);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarVar(SXIL_Block *blk, char *var, char *svar);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarAddrVar(SXIL_Block *blk, char *var, char *svar);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarDefVar(SXIL_Block *blk, char *var, char *svar);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarCastVar(SXIL_Block *blk,char *var, char *sig, char *svar);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarInt(SXIL_Block *blk, char *var, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarLong(SXIL_Block *blk, char *var, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarFloat(SXIL_Block *blk, char *var, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarDouble(SXIL_Block *blk, char *var, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetDefVarVar(SXIL_Block *blk, char *var, char *svar);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetDefVarInt(SXIL_Block *blk, char *var, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetDefVarLong(SXIL_Block *blk, char *var, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetDefVarFloat(SXIL_Block *blk, char *var, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetDefVarDouble(SXIL_Block *blk, char *var, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarAddrIdxVar(SXIL_Block *blk,char *var, char *svar, char *idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarAddrIdxInt(SXIL_Block *blk,char *var, char *svar, int idx);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarAddrIdxSym(SXIL_Block *blk,char *var, char *svar, char *sym);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarUnaryVar(SXIL_Block *blk,char *dvar, int op, char *svar);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarBinaryVar(SXIL_Block *blk,char *dvar, char *var0, int op, char *var1);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarBinaryInt(SXIL_Block *blk,char *dvar, char *var0, int op, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarBinaryLong(SXIL_Block *blk,char *dvar, char *var0, int op, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarBinaryFloat(SXIL_Block *blk,char *dvar, char *var0, int op, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_BlockOpSetVarBinaryDouble(SXIL_Block *blk,char *dvar, char *var0, int op, double val);
include/sxil_auto.h:BGBSXIL_API void SXIL_LitIndexChkExpand(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_LitIndexSym(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LitIndexString(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LitIndexInt(SXIL_Context *ctx, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_LitIndexLong(SXIL_Context *ctx, s64 val);
include/sxil_auto.h:BGBSXIL_API int SXIL_LitIndexFloat(SXIL_Context *ctx, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_LitIndexDouble(SXIL_Context *ctx, double val);
include/sxil_auto.h:BGBSXIL_API int SXIL_LitGetType(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_LitGetSym(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_LitGetString(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API s64 SXIL_LitGetInt(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API s64 SXIL_LitGetLong(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API double SXIL_LitGetFloat(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API double SXIL_LitGetDouble(SXIL_Context *ctx, int idx);
include/sxil_auto.h:BGBSXIL_API void SXIL_Warn(char *str, ...);
include/sxil_auto.h:BGBSXIL_API void SXIL_Error(char *str, ...);
include/sxil_auto.h:BGBSXIL_API int SXIL_ExecBlock(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API int SXIL_TransName(SXIL_Context *ctx, char *str);
include/sxil_auto.h:BGBSXIL_API int SXIL_OpIf(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_OpIfElse(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_TransOpcode(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_TransOpcodeOp(SXIL_Context *ctx, int op);
include/sxil_auto.h:BGBSXIL_API SXIL_Top *SXIL_AllocTop(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_FreeTop(SXIL_Top *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexTopVar(SXIL_Context *ctx, char *name, char *sig);
include/sxil_auto.h:BGBSXIL_API SXIL_Context *SXIL_AllocContext();
include/sxil_auto.h:BGBSXIL_API void SXIL_FreeContext(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void *SXIL_TransBlock(SXIL_Context *ctx, SXIL_Block *blk);
include/sxil_auto.h:BGBSXIL_API int SXIL_X64P(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void SXIL_EmitVarNull(SXIL_Context *ctx, int vt);
include/sxil_auto.h:BGBSXIL_API void SXIL_EmitVarValue(SXIL_Context *ctx, int vt, dyt val);
include/sxil_auto.h:BGBSXIL_API s64 SXIL_DecOpInt(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API double SXIL_DecOpFloat(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_DecOpSym(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API char *SXIL_DecOpStr(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupBindName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_LookupBindReg(SXIL_Context *ctx, sxil_reg reg);
include/sxil_auto.h:BGBSXIL_API int SXIL_IndexBindName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API int SXIL_BindNameReg(SXIL_Context *ctx, char *name,sxil_reg reg, sxil_type type);
include/sxil_auto.h:BGBSXIL_API int SXIL_DecOpBind(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_DecOpReg(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_DecOpRegT(SXIL_Context *ctx, sxil_type *rty);
include/sxil_auto.h:BGBSXIL_API int SXIL_DecOpType(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API int SXIL_TransOpcodeRegOp(SXIL_Context *ctx, int op);
include/sxil_auto.h:BGBSXIL_API int SXIL_AddBuiltin(char *name,int (*fcn)(SXIL_Context *ctx, char *name));
include/sxil_auto.h:BGBSXIL_API int SXIL_Builtin_CheckName(char *name, char *pat);
include/sxil_auto.h:BGBSXIL_API int SXIL_Builtin_TryName(SXIL_Context *ctx, char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_Builtin(SXIL_Context *ctx);
include/sxil_auto.h:BGBSXIL_API void sxil_puts(char *str);
include/sxil_auto.h:BGBSXIL_API void sxil_print(char *str, ...);
include/sxil_auto.h:BGBSXIL_API void SXIL_BeginBuf();
include/sxil_auto.h:BGBSXIL_API char *SXIL_EndBuf();
include/sxil_auto.h:BGBSXIL_API void sxasm_print(SXIL_Context *ctx, char *str, ...);
include/sxil_auto.h:BGBSXIL_API void sxasm_print_lln(SXIL_Context *ctx, char *fn, int ln, char *str, ...);
include/sxil_auto.h:BGBSXIL_API int sxil_storetextfile(char *name, char *buf);
include/sxil_auto.h:BGBSXIL_API char *SXIL_GenSym();
include/sxil_auto.h:BGBSXIL_API void SXIL_SubmitASM(char *name, char *buf);
include/sxil_auto.h:BGBSXIL_API void SXIL_BeginModule(char *name);
include/sxil_auto.h:BGBSXIL_API void SXIL_EndModuleFile(char *outfn);
include/sxil_auto.h:BGBSXIL_API void SXIL_EndModule();
include/sxil_auto.h:BGBSXIL_API char *SXIL_EndModuleBuffer();
include/sxil_auto.h:BGBSXIL_API void SXIL_AbortModule();
include/sxil_auto.h:BGBSXIL_API void SXIL_Init();
include/sxil_auto.h:BGBSXIL_API int SXIL_GetSSE();
include/sxil_auto.h:BGBSXIL_API char *SXIL_MetaGetKey(char *key);
include/sxil_auto.h:BGBSXIL_API void SXIL_MetaSetKey(char *key, char *val);
include/sxil_core.h:int (*fcn)(SXIL_Context *ctx, char *name);
include/sxil_core.h:int (*fcn)(SXIL_Context *ctx, int opr, sxil_type lty, sxil_type rty);
include/sxil_core.h:int (*fcn)(SXIL_Context *ctx, sxil_type dty, sxil_type sty, int fl);
include/sxil_interp.h:dyt (*fcn)(SXIL_SxiContext *ctx, dyt args);
include/sxil_interp_prv.h:sxct (*fcn)(sxct ctx, sxct args);
include/vecnf.h:	{ return(qmul(qmul(a, (quat)b), qconj(a))); }
include/vecnf.h:	{ return(qmul(qmul(a, (quat)b), qconj(a))); }
include/vecnf.h:	{ return(qmul(qmul(a, b), qconj(a))); }
include/vecnf.h:	{ return(qmul(qmul(a, b), qconj(a))); }
include/vecnf.h:	{ return(v2add(v2scale(a, 1.0-t), v2scale(b, t))); }
include/vecnf.h:	{ return(v3add(v3scale(a, 1.0-t), v3scale(b, t))); }
include/vecnf.h:	{ return(v4add(v4scale(a, 1.0-t), v4scale(b, t))); }
include/vecnf.h:	{ return(v2norm(v2add(v2scale(a, 1.0-t), v2scale(b, t)))); }
include/vecnf.h:	{ return(v3norm(v3add(v3scale(a, 1.0-t), v3scale(b, t)))); }
include/vecnf.h:	{ return(v4norm(v4add(v4scale(a, 1.0-t), v4scale(b, t)))); }
include/vecnf.h:	{ return(qadd(qscale(a, 1.0-t), qscale(b, t))); }
include/vecnf.h:	{ return(qnorm(qadd(qscale(a, 1.0-t), qscale(b, t)))); }
include/vecnf.h:	{ return(acos(qreal(q)/qlen(q))); }
include/vecnf.h:static vec2 operator=(vec2 &a, float *b)	{ a=vec2vf(b); return(a); }
include/vecnf.h:static vec3 operator=(vec3 &a, float *b)	{ a=vec3vf(b); return(a); }
include/vecnf.h:static vec4 operator=(vec4 &a, float *b)	{ a=vec4vf(b); return(a); }
include/vecnf.h:static quat operator=(quat &a, float *b)	{ a=quatvf(b); return(a); }
include/vecnf.h:	{ vfvec2(a, b); return(b); }
include/vecnf.h:	{ vfvec3(a, b); return(b); }
include/vecnf.h:	{ vfvec4(a, b); return(b); }
include/vecnf.h:	{ vfquat(a, b); return(b); }
include/vecnf.h:static vec2 operator+(vec2 a, vec2 b)	{ return(v2add(a, b)); }
include/vecnf.h:static vec2 operator-(vec2 a, vec2 b)	{ return(v2sub(a, b)); }
include/vecnf.h:static vec3 operator+(vec3 a, vec3 b)	{ return(v3add(a, b)); }
include/vecnf.h:static vec3 operator-(vec3 a, vec3 b)	{ return(v3sub(a, b)); }
include/vecnf.h:static vec4 operator+(vec4 a, vec4 b)	{ return(v4add(a, b)); }
include/vecnf.h:static vec4 operator-(vec4 a, vec4 b)	{ return(v4sub(a, b)); }
include/vecnf.h:static quat operator+(quat a, quat b)	{ return(qadd(a, b)); }
include/vecnf.h:static quat operator-(quat a, quat b)	{ return(qsub(a, b)); }
include/vecnf.h:static float operator*(vec2 a, vec2 b)	{ return(v2dot(a, b)); }
include/vecnf.h:static float operator*(vec3 a, vec3 b)	{ return(v3dot(a, b)); }
include/vecnf.h:static float operator*(vec4 a, vec4 b)	{ return(v4dot(a, b)); }
include/vecnf.h:static vec2 operator*(vec2 a, float b)	{ return(v2scale(a, b)); }
include/vecnf.h:static vec3 operator*(vec3 a, float b)	{ return(v3scale(a, b)); }
include/vecnf.h:static vec4 operator*(vec4 a, float b)	{ return(v4scale(a, b)); }
include/vecnf.h:static quat operator*(quat a, float b)	{ return(qscale(a, b)); }
include/vecnf.h:static vec2 operator*(float a, vec2 b)	{ return(v2scale(b, a)); }
include/vecnf.h:static vec3 operator*(float a, vec3 b)	{ return(v3scale(b, a)); }
include/vecnf.h:static vec4 operator*(float a, vec4 b)	{ return(v4scale(b, a)); }
include/vecnf.h:static quat operator*(float a, quat b)	{ return(qscale(b, a)); }
include/vecnf.h:static vec2 operator/(vec2 a, float b)	{ return(v2scale(a, 1.0/b)); }
include/vecnf.h:static vec3 operator/(vec3 a, float b)	{ return(v3scale(a, 1.0/b)); }
include/vecnf.h:static vec4 operator/(vec4 a, float b)	{ return(v4scale(a, 1.0/b)); }
include/vecnf.h:static quat operator/(quat a, float b)	{ return(qscale(a, 1.0/b)); }
include/vecnf.h:static vec2 operator/(float a, vec2 b)	{ return(v2scale(b, 1.0/a)); }
include/vecnf.h:static vec3 operator/(float a, vec3 b)	{ return(v3scale(b, 1.0/a)); }
include/vecnf.h:static vec4 operator/(float a, vec4 b)	{ return(v4scale(b, 1.0/a)); }
include/vecnf.h:static quat operator/(float a, quat b)	{ return(qscale(b, 1.0/a)); }
include/vecnf.h:static quat operator*(quat a, quat b)	{ return(qmul(a, b)); }
include/vecnf.h:static quat operator/(quat a, quat b)	{ return(qdiv(a, b)); }
include/vecnf.h:static quat operator|(quat a, quat b)	{ return(qrdiv(a, b)); }
include/vecnf.h:static float operator%(vec2 a, vec2 b)	{ return(v2cross(a, b)); }
include/vecnf.h:static vec3 operator%(vec3 a, vec3 b)	{ return(v3cross(a, b)); }
include/vecnf.h:static vec4 operator%(vec4 a, vec4 b)	{ return(v4cross(a, b)); }
include/vecnf.h:static quat operator%(quat a, quat b)	{ return(qcross(a, b)); }
include/vecnf.h:static vec2 operator^(vec2 a, vec2 b)	{ return(v2mul(a, b)); }
include/vecnf.h:static vec3 operator^(vec3 a, vec3 b)	{ return(v3mul(a, b)); }
include/vecnf.h:static vec4 operator^(vec4 a, vec4 b)	{ return(v4mul(a, b)); }
include/vecnf.h:static quat operator^(quat a, quat b)	{ return(qexp(a, b)); }
include/vecnf.h:static quat operator^(quat a, float b)	{ return(qexpqs(a, b)); }
include/vecnf.h:static quat operator^(float a, quat b)	{ return(qexpsq(a, b)); }
include/vecnf.h:// static vec2 operator*(vec2 a, vec2 b)	{ return(v2mul(a, b)); }
include/vecnf.h:// static vec2 operator/(vec2 a, vec2 b)	{ return(v2div(a, b)); }
include/vecnf.h:// static vec3 operator*(vec3 a, vec3 b)	{ return(v3mul(a, b)); }
include/vecnf.h:// static vec3 operator/(vec3 a, vec3 b)	{ return(v3div(a, b)); }
include/vecnf.h:// static vec4 operator*(vec4 a, vec4 b)	{ return(v4mul(a, b)); }
include/vecnf.h:// static vec4 operator/(vec4 a, vec4 b)	{ return(v4div(a, b)); }
include/vecnf_raw.h:	{ vec2 t; t.x=x; t.y=y; return(t); };
include/vecnf_raw.h:	{ vec3 t; t.x=x; t.y=y; t.z=z; return(t); };
include/vecnf_raw.h:	{ vec4 t; t.x=x; t.y=y; t.z=z; t.w=w; return(t); };
include/vecnf_raw.h:	{ quat t; t.x=x; t.y=y; t.z=z; t.w=w; return(t); };
include/vecnf_raw.h:	{ return(_vec2i(x[0], x[1])); };
include/vecnf_raw.h:	{ return(_vec3i(x[0], x[1], x[2])); };
include/vecnf_raw.h:	{ return(_vec4i(x[0], x[1], x[2], x[3])); };
include/vecnf_raw.h:	{ return(_vec4i(x[0], x[1], x[2], x[3])); };
include/vecnf_raw.h:	{ return(_quati(x[0], x[1], x[2], x[3])); };
include/vecnf_raw.h:	p=(float *)gcralloc(4*sizeof(float));
include/vecnf_raw.h:	return(p);
include/vecnf_raw.h:	p=(float *)gcralloc(4*sizeof(float));
include/vecnf_raw.h:	return(p);
include/vecnf_raw.h:	p=(float *)gcralloc(4*sizeof(float));
include/vecnf_raw.h:	return(p);
include/vecnf_raw.h:	return(f);
include/vecnf_raw.h:	b.x=_vf4_getidx(v, sh&3);
include/vecnf_raw.h:	b.y=_vf4_getidx(v, (sh>>2)&3);
include/vecnf_raw.h:	b.z=_vf4_getidx(v, (sh>>4)&3);
include/vecnf_raw.h:	b.w=_vf4_getidx(v, (sh>>6)&3);
include/vecnf_raw.h:	return(b);
include/vecnf_raw.h:static float v2x(vec2 a)	{ return(a.x); };
include/vecnf_raw.h:static float v2y(vec2 a)	{ return(a.y); };
include/vecnf_raw.h:static float v3x(vec3 a)	{ return(a.x); };
include/vecnf_raw.h:static float v3y(vec3 a)	{ return(a.y); };
include/vecnf_raw.h:static float v3z(vec3 a)	{ return(a.z); };
include/vecnf_raw.h:static float v4x(vec4 a)	{ return(a.x); };
include/vecnf_raw.h:static float v4y(vec4 a)	{ return(a.y); };
include/vecnf_raw.h:static float v4z(vec4 a)	{ return(a.z); };
include/vecnf_raw.h:static float v4w(vec4 a)	{ return(a.w); };
include/vecnf_raw.h:static vec2 v2xy(vec2 a)	{ vec2 t; t.x=a.x; t.y=a.y; return(t); };
include/vecnf_raw.h:static vec2 v2yx(vec2 a)	{ vec2 t; t.x=a.y; t.y=a.x; return(t); };
include/vecnf_raw.h:static vec2 v3xy(vec3 a)	{ vec2 t; t.x=a.x; t.y=a.y; return(t); };
include/vecnf_raw.h:static vec2 v3xz(vec3 a)	{ vec2 t; t.x=a.x; t.y=a.z; return(t); };
include/vecnf_raw.h:static vec2 v3yx(vec3 a)	{ vec2 t; t.x=a.y; t.y=a.x; return(t); };
include/vecnf_raw.h:static vec2 v3yz(vec3 a)	{ vec2 t; t.x=a.y; t.y=a.z; return(t); };
include/vecnf_raw.h:static vec2 v3zx(vec3 a)	{ vec2 t; t.x=a.z; t.y=a.x; return(t); };
include/vecnf_raw.h:static vec2 v3zy(vec3 a)	{ vec2 t; t.x=a.z; t.y=a.y; return(t); };
include/vecnf_raw.h:static vec3 v3xyz(vec3 a) { vec3 t; t.x=a.x; t.y=a.y; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v3xzy(vec3 a) { vec3 t; t.x=a.x; t.y=a.z; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec3 v3yxz(vec3 a) { vec3 t; t.x=a.y; t.y=a.x; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v3yzx(vec3 a) { vec3 t; t.x=a.y; t.y=a.z; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec3 v3zxy(vec3 a) { vec3 t; t.x=a.z; t.y=a.x; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec3 v3zyx(vec3 a) { vec3 t; t.x=a.z; t.y=a.y; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec2 v4xy(vec4 a)	{ vec2 t; t.x=a.x; t.y=a.y; return(t); };
include/vecnf_raw.h:static vec2 v4xz(vec4 a)	{ vec2 t; t.x=a.x; t.y=a.z; return(t); };
include/vecnf_raw.h:static vec2 v4xw(vec4 a)	{ vec2 t; t.x=a.x; t.y=a.w; return(t); };
include/vecnf_raw.h:static vec2 v4yx(vec4 a)	{ vec2 t; t.x=a.y; t.y=a.x; return(t); };
include/vecnf_raw.h:static vec2 v4yz(vec4 a)	{ vec2 t; t.x=a.y; t.y=a.z; return(t); };
include/vecnf_raw.h:static vec2 v4yw(vec4 a)	{ vec2 t; t.x=a.y; t.y=a.w; return(t); };
include/vecnf_raw.h:static vec2 v4zx(vec4 a)	{ vec2 t; t.x=a.z; t.y=a.x; return(t); };
include/vecnf_raw.h:static vec2 v4zy(vec4 a)	{ vec2 t; t.x=a.z; t.y=a.y; return(t); };
include/vecnf_raw.h:static vec2 v4zw(vec4 a)	{ vec2 t; t.x=a.z; t.y=a.w; return(t); };
include/vecnf_raw.h:static vec2 v4wx(vec4 a)	{ vec2 t; t.x=a.w; t.y=a.x; return(t); };
include/vecnf_raw.h:static vec2 v4wy(vec4 a)	{ vec2 t; t.x=a.w; t.y=a.y; return(t); };
include/vecnf_raw.h:static vec2 v4wz(vec4 a)	{ vec2 t; t.x=a.w; t.y=a.z; return(t); };
include/vecnf_raw.h:static vec3 v4xyz(vec4 a) { vec3 t; t.x=a.x; t.y=a.y; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v4xyw(vec4 a) { vec3 t; t.x=a.x; t.y=a.y; t.z=a.w; return(t); };
include/vecnf_raw.h:static vec3 v4xzy(vec4 a) { vec3 t; t.x=a.x; t.y=a.z; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec3 v4xzw(vec4 a) { vec3 t; t.x=a.x; t.y=a.z; t.z=a.w; return(t); };
include/vecnf_raw.h:static vec3 v4xwy(vec4 a) { vec3 t; t.x=a.x; t.y=a.w; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec3 v4xwz(vec4 a) { vec3 t; t.x=a.x; t.y=a.w; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v4yxz(vec4 a) { vec3 t; t.x=a.y; t.y=a.x; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v4yxw(vec4 a) { vec3 t; t.x=a.y; t.y=a.x; t.z=a.w; return(t); };
include/vecnf_raw.h:static vec3 v4yzx(vec4 a) { vec3 t; t.x=a.y; t.y=a.z; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec3 v4yzw(vec4 a) { vec3 t; t.x=a.y; t.y=a.z; t.z=a.w; return(t); };
include/vecnf_raw.h:static vec3 v4ywx(vec4 a) { vec3 t; t.x=a.y; t.y=a.w; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec3 v4ywz(vec4 a) { vec3 t; t.x=a.y; t.y=a.w; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v4zxy(vec4 a) { vec3 t; t.x=a.z; t.y=a.x; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec3 v4zxw(vec4 a) { vec3 t; t.x=a.z; t.y=a.x; t.z=a.w; return(t); };
include/vecnf_raw.h:static vec3 v4zyx(vec4 a) { vec3 t; t.x=a.z; t.y=a.y; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec3 v4zyw(vec4 a) { vec3 t; t.x=a.z; t.y=a.y; t.z=a.w; return(t); };
include/vecnf_raw.h:static vec3 v4zwx(vec4 a) { vec3 t; t.x=a.z; t.y=a.w; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec3 v4zwy(vec4 a) { vec3 t; t.x=a.z; t.y=a.w; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec3 v4wxy(vec4 a) { vec3 t; t.x=a.w; t.y=a.x; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec3 v4wxz(vec4 a) { vec3 t; t.x=a.w; t.y=a.x; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v4wyx(vec4 a) { vec3 t; t.x=a.w; t.y=a.y; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec3 v4wyz(vec4 a) { vec3 t; t.x=a.w; t.y=a.y; t.z=a.z; return(t); };
include/vecnf_raw.h:static vec3 v4wzx(vec4 a) { vec3 t; t.x=a.w; t.y=a.z; t.z=a.x; return(t); };
include/vecnf_raw.h:static vec3 v4wzy(vec4 a) { vec3 t; t.x=a.w; t.y=a.z; t.z=a.y; return(t); };
include/vecnf_raw.h:static vec4 v4xyzw(vec4 a) { vec4 t; t.x=a.x; t.y=a.y; t.z=a.z; t.w=a.w; return(t); };
include/vecnf_raw.h:static vec4 v4xywz(vec4 a) { vec4 t; t.x=a.x; t.y=a.y; t.z=a.w; t.w=a.z; return(t); };
include/vecnf_raw.h:static vec4 v4xzyw(vec4 a) { vec4 t; t.x=a.x; t.y=a.z; t.z=a.y; t.w=a.w; return(t); };
include/vecnf_raw.h:static vec4 v4xzwy(vec4 a) { vec4 t; t.x=a.x; t.y=a.z; t.z=a.w; t.w=a.y; return(t); };
include/vecnf_raw.h:static vec4 v4xwyz(vec4 a) { vec4 t; t.x=a.x; t.y=a.w; t.z=a.y; t.w=a.z; return(t); };
include/vecnf_raw.h:static vec4 v4xwzy(vec4 a) { vec4 t; t.x=a.x; t.y=a.w; t.z=a.z; t.w=a.y; return(t); };
include/vecnf_raw.h:static vec4 v4yxzw(vec4 a) { vec4 t; t.x=a.y; t.y=a.x; t.z=a.z; t.w=a.w; return(t); };
include/vecnf_raw.h:static vec4 v4yxwz(vec4 a) { vec4 t; t.x=a.y; t.y=a.x; t.z=a.w; t.w=a.z; return(t); };
include/vecnf_raw.h:static vec4 v4yzxw(vec4 a) { vec4 t; t.x=a.y; t.y=a.z; t.z=a.x; t.w=a.w; return(t); };
include/vecnf_raw.h:static vec4 v4yzwx(vec4 a) { vec4 t; t.x=a.y; t.y=a.z; t.z=a.w; t.w=a.x; return(t); };
include/vecnf_raw.h:static vec4 v4ywxz(vec4 a) { vec4 t; t.x=a.y; t.y=a.w; t.z=a.x; t.w=a.z; return(t); };
include/vecnf_raw.h:static vec4 v4ywzx(vec4 a) { vec4 t; t.x=a.y; t.y=a.w; t.z=a.z; t.w=a.x; return(t); };
include/vecnf_raw.h:static vec4 v4zxyw(vec4 a) { vec4 t; t.x=a.z; t.y=a.x; t.z=a.y; t.w=a.w; return(t); };
include/vecnf_raw.h:static vec4 v4zxwy(vec4 a) { vec4 t; t.x=a.z; t.y=a.x; t.z=a.w; t.w=a.y; return(t); };
include/vecnf_raw.h:static vec4 v4zyxw(vec4 a) { vec4 t; t.x=a.z; t.y=a.y; t.z=a.x; t.w=a.w; return(t); };
include/vecnf_raw.h:static vec4 v4zywx(vec4 a) { vec4 t; t.x=a.z; t.y=a.y; t.z=a.w; t.w=a.x; return(t); };
include/vecnf_raw.h:static vec4 v4zwxy(vec4 a) { vec4 t; t.x=a.z; t.y=a.w; t.z=a.x; t.w=a.y; return(t); };
include/vecnf_raw.h:static vec4 v4zwyx(vec4 a) { vec4 t; t.x=a.z; t.y=a.w; t.z=a.y; t.w=a.x; return(t); };
include/vecnf_raw.h:static vec4 v4wxyz(vec4 a) { vec4 t; t.x=a.w; t.y=a.x; t.z=a.y; t.w=a.z; return(t); };
include/vecnf_raw.h:static vec4 v4wxzy(vec4 a) { vec4 t; t.x=a.w; t.y=a.x; t.z=a.z; t.w=a.y; return(t); };
include/vecnf_raw.h:static vec4 v4wyxz(vec4 a) { vec4 t; t.x=a.w; t.y=a.y; t.z=a.x; t.w=a.z; return(t); };
include/vecnf_raw.h:static vec4 v4wyzx(vec4 a) { vec4 t; t.x=a.w; t.y=a.y; t.z=a.z; t.w=a.x; return(t); };
include/vecnf_raw.h:static vec4 v4wzxy(vec4 a) { vec4 t; t.x=a.w; t.y=a.z; t.z=a.x; t.w=a.y; return(t); };
include/vecnf_raw.h:static vec4 v4wzyx(vec4 a) { vec4 t; t.x=a.w; t.y=a.z; t.z=a.y; t.w=a.x; return(t); };
include/vecnf_raw.h:static float qx(vec4 a)	{ return(a.x); };
include/vecnf_raw.h:static float qy(vec4 a)	{ return(a.y); };
include/vecnf_raw.h:static float qz(vec4 a)	{ return(a.z); };
include/vecnf_raw.h:static float qw(vec4 a)	{ return(a.w); };
include/vecnf_raw.h:static float qi(vec4 a)	{ return(a.x); };
include/vecnf_raw.h:static float qj(vec4 a)	{ return(a.y); };
include/vecnf_raw.h:static float qk(vec4 a)	{ return(a.z); };
include/vecnf_raw.h:static float qr(vec4 a)	{ return(a.w); };
include/vecnf_raw.h:static float qreal(vec4 a)	{ return(a.w); };
include/vecnf_raw.h:static quat qvec(vec4 a)	{ a.w=0; return(a); };
include/vecnf_raw.h:	{ return(a.x*b.x+a.y*b.y); }
include/vecnf_raw.h:	{ return(a.x*b.x+a.y*b.y+a.z*b.z); }
include/vecnf_raw.h:	{ return(a.x*b.x+a.y*b.y+a.z*b.z+a.w*b.w); }
include/vecnf_raw.h:	{ return(a.x*b.x+a.y*b.y+a.z*b.z+a.w*b.w); }
include/vecnf_raw.h:	{ return(a.x*b.y-a.y*b.x); }
include/vecnf_raw.h:	c.x=(a.y*b.z)-(a.z*b.y);
include/vecnf_raw.h:	c.y=(a.z*b.x)-(a.x*b.z);
include/vecnf_raw.h:	c.z=(a.x*b.y)-(a.y*b.x);
include/vecnf_raw.h:	return(c);
include/vecnf_raw.h:	c.x=(a.y*b.z)-(a.z*b.y);
include/vecnf_raw.h:	c.y=(a.z*b.x)-(a.x*b.z);
include/vecnf_raw.h:	c.z=(a.x*b.y)-(a.y*b.x);
include/vecnf_raw.h:	return(c);
include/vecnf_raw.h:	{ return(v4cross(a, b)); }
include/vecnf_raw.h:	{ return(sqrt(a.x*a.x+a.y*a.y)); }
include/vecnf_raw.h:	{ return(sqrt(a.x*a.x+a.y*a.y+a.z*a.z)); }
include/vecnf_raw.h:	{ return(sqrt(a.x*a.x+a.y*a.y+a.z*a.z+a.w*a.w)); }
include/vecnf_raw.h:	{ return(sqrt(a.x*a.x+a.y*a.y+a.z*a.z+a.w*a.w)); }
include/vecnf_raw.h:	l=v2len(a); if(l!=0)l=1.0/l;
include/vecnf_raw.h:	return(c); }
include/vecnf_raw.h:	l=v3len(a); if(l!=0)l=1.0/l;
include/vecnf_raw.h:	return(c); }
include/vecnf_raw.h:	l=v4len(a); if(l!=0)l=1.0/l;
include/vecnf_raw.h:	return(c); }
include/vecnf_raw.h:	l=v4len(a); if(l!=0)l=1.0/l;
include/vecnf_raw.h:	return(c); }
include/vecnf_raw.h:	{ vec2 c; c.x=-a.x; c.y=-a.y; return(c); }
include/vecnf_raw.h:	{ vec3 c; c.x=-a.x; c.y=-a.y; c.z=-a.z; return(c); }
include/vecnf_raw.h:	{ vec4 c; c.x=-a.x; c.y=-a.y; c.z=-a.z; c.w=-a.w; return(c); }
include/vecnf_raw.h:	{ quat c; c.x=-a.x; c.y=-a.y; c.z=-a.z; c.w=-a.w; return(c); }
include/vecnf_raw.h:	{ quat c; c.x=-a.x; c.y=-a.y; c.z=-a.z; c.w=a.w; return(c); }
include/vecnf_raw.h:	f=(a.w*a.w)+(a.x*a.x)+(a.y*a.y)+(a.z*a.z);
include/vecnf_raw.h:	return(c);
include/vecnf_raw.h:	{ vec2 c; c.x=a.x+b.x; c.y=a.y+b.y; return(c); }
include/vecnf_raw.h:	{ vec2 c; c.x=a.x-b.x; c.y=a.y-b.y; return(c); }
include/vecnf_raw.h:	{ vec2 c; c.x=a.x*b.x; c.y=a.y*b.y; return(c); }
include/vecnf_raw.h:	{ vec2 c; c.x=a.x/b.x; c.y=a.y/b.y; return(c); }
include/vecnf_raw.h:	{ vec3 c; c.x=a.x+b.x; c.y=a.y+b.y; c.z=a.z+b.z; return(c); }
include/vecnf_raw.h:	{ vec3 c; c.x=a.x-b.x; c.y=a.y-b.y; c.z=a.z-b.z; return(c); }
include/vecnf_raw.h:	{ vec3 c; c.x=a.x*b.x; c.y=a.y*b.y; c.z=a.z*b.z; return(c); }
include/vecnf_raw.h:	{ vec3 c; c.x=a.x/b.x; c.y=a.y/b.y; c.z=a.z/b.z; return(c); }
include/vecnf_raw.h:	{vec4 c;c.x=a.x+b.x;c.y=a.y+b.y;c.z=a.z+b.z;c.w=a.w+b.w;return(c);}
include/vecnf_raw.h:	{vec4 c;c.x=a.x-b.x;c.y=a.y-b.y;c.z=a.z-b.z;c.w=a.w-b.w;return(c);}
include/vecnf_raw.h:	{vec4 c;c.x=a.x*b.x;c.y=a.y*b.y;c.z=a.z*b.z;c.w=a.w*b.w;return(c);}
include/vecnf_raw.h:	{vec4 c;c.x=a.x/b.x;c.y=a.y/b.y;c.z=a.z/b.z;c.w=a.w/b.w;return(c);}
include/vecnf_raw.h:	{vec4 c;c.x=a.x+b.x;c.y=a.y+b.y;c.z=a.z+b.z;c.w=a.w+b.w;return(c);}
include/vecnf_raw.h:	{vec4 c;c.x=a.x-b.x;c.y=a.y-b.y;c.z=a.z-b.z;c.w=a.w-b.w;return(c);}
include/vecnf_raw.h:	c.x=(a.w*b.x)+(a.x*b.w)+(a.y*b.z)-(a.z*b.y);
include/vecnf_raw.h:	c.y=(a.w*b.y)+(a.y*b.w)+(a.z*b.x)-(a.x*b.z);
include/vecnf_raw.h:	c.z=(a.w*b.z)+(a.z*b.w)+(a.x*b.y)-(a.y*b.x);
include/vecnf_raw.h:	c.w=(a.w*b.w)-(a.x*b.x)-(a.y*b.y)-(a.z*b.z);
include/vecnf_raw.h:	return(c);
include/vecnf_raw.h:	{ return(qmul(a, qrcp(b))); }
include/vecnf_raw.h:	{ return(qmul(qrcp(b), a)); }
include/vecnf_raw.h:static float v2dist(vec2 a, vec2 b) { return(v2len(v2sub(a, b))); }
include/vecnf_raw.h:static float v3dist(vec3 a, vec3 b) { return(v3len(v3sub(a, b))); }
include/vecnf_raw.h:static float v4dist(vec4 a, vec4 b) { return(v4len(v4sub(a, b))); }
include/vecnf_raw.h:static float qdist(quat a, quat b) { return(qlen(qsub(a, b))); }
include/vecnf_raw.h:	{ vec2 c; c.x=a.x*f; c.y=a.y*f; return(c); }
include/vecnf_raw.h:	{ vec3 c; c.x=a.x*f; c.y=a.y*f; c.z=a.z*f; return(c); }
include/vecnf_raw.h:	{ vec4 c; c.x=a.x*f; c.y=a.y*f; c.z=a.z*f; c.w=a.w*f; return(c); }
include/vecnf_raw.h:	{ quat c; c.x=a.x*f; c.y=a.y*f; c.z=a.z*f; c.w=a.w*f; return(c); }
include/vecnf_raw.h:	{ return((a.x==b.x) && (a.y==b.y)); }
include/vecnf_raw.h:	{ return((a.x==b.x) && (a.y==b.y) && (a.z==b.z)); }
include/vecnf_raw.h:	{ return((a.x==b.x) && (a.y==b.y) && (a.z==b.z) && (a.w==b.w)); }
include/vecnf_raw.h:	{ return((a.x==b.x) && (a.y==b.y) && (a.z==b.z) && (a.w==b.w)); }
include/vecnf_raw.h:	{ return((a.x!=b.x) || (a.y!=b.y)); }
include/vecnf_raw.h:	{ return((a.x!=b.x) || (a.y!=b.y) || (a.z!=b.z)); }
include/vecnf_raw.h:	{ return((a.x!=b.x) || (a.y!=b.y) || (a.z!=b.z) || (a.w!=b.w)); }
include/vecnf_raw.h:	{ return((a.x!=b.x) || (a.y!=b.y) || (a.z!=b.z) || (a.w!=b.w)); }
include/vecnf_raw.h:	{ return(v2add(a, v2mul(b, vec2(f, f)))); }
include/vecnf_raw.h:	{ return(v3add(a, v3mul(b, vec3(f, f, f)))); }
include/vecnf_raw.h:	{ return(v4add(a, v4mul(b, vec4(f, f, f, f)))); }
include/vecnf_raw.h:	{ return(v4add(a, v4mul(b, vec4(f, f, f, f)))); }
include/vecnf_raw.h:	{ return(v2add(v2mul(a, vec2(f, f)), v2mul(b, vec2(g, g)))); }
include/vecnf_raw.h:	{ return(v3add(v3mul(a, vec3(f, f, f)), v3mul(b, vec3(g, g, g)))); }
include/vecnf_raw.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_raw.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_raw.h:	{ return(v2add(v2mul(a, vec2(f, f)), v2mul(b, vec2(g, g)))); }
include/vecnf_raw.h:	{ return(v3add(v3mul(a, vec3(f, f, f)), v3mul(b, vec3(g, g, g)))); }
include/vecnf_raw.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_raw.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_raw.h:		));
include/vecnf_raw.h:		));
include/vecnf_raw.h:		));
include/vecnf_raw.h:		));
include/vecnf_raw.h:		));
include/vecnf_raw.h:		));
include/vecnf_raw.h:		));
include/vecnf_raw.h:		));
include/zpack.h:u32 ZPACK_GetDateTime();
include/zpack.h:u32 ZPACK_GetTimeMS();
include/zpack.h:u16 ZPACK_GetDate();
include/zpack.h:u16 ZPACK_GetTime();
include/zpack.h:ZPACK_CacheFile *ZPACK_LookupCache(ZPACK_Context *ctx, char *name);
include/zpack.h:ZPACK_CacheFile *ZPACK_GetCache(ZPACK_Context *ctx, char *name);
include/zpack.h:void ZPACK_DropCache(ZPACK_Context *ctx, char *name);
include/zpack.h:void ZPACK_CommitCacheAll(ZPACK_Context *ctx);
include/zpack.h:void ZPACK_InsertSpan(ZPACK_Context *ctx, u64 offs, u32 size, char *name);
include/zpack.h:int ZPACK_DeleteSpan(ZPACK_Context *ctx, u64 offs);
include/zpack.h:int ZPACK_NextSpan(ZPACK_Context *ctx, u64 offs);
include/zpack.h:int ZPACK_CheckSpan(ZPACK_Context *ctx, u64 offs, u32 size);
include/zpack.h:u64 ZPACK_FindMinSpan(ZPACK_Context *ctx, u32 size);
include/zpack.h:ZPACK_API void ZPACK_CreateImage(char *name);
include/zpack.h:ZPACK_API ZPACK_Context *ZPACK_OpenImage(char *name, int ro);
include/zpack.h:ZPACK_API int ZPACK_CommitImage(ZPACK_Context *ctx);
include/zpack.h:ZPACK_API int ZPACK_CloseImage(ZPACK_Context *ctx);
include/zpack.h:ZPACK_API int ZPACK_DeleteFile(ZPACK_Context *ctx, char *name);
include/zpack.h:ZPACK_API int ZPACK_StatFile(ZPACK_Context *ctx, char *name, ZPACK_STAT *stat);
include/zpack.h:ZPACK_API int ZPACK_SetFileTime(ZPACK_Context *ctx, char *name, u32 t);
include/zpack.h:ZPACK_API ZPACK_FILE *ZPACK_OpenFile(ZPACK_Context *ctx, char *name, char *mode);
include/zpack.h:ZPACK_API int ZPACK_Close(ZPACK_FILE *fd);
include/zpack.h:ZPACK_API int ZPACK_Flush(ZPACK_FILE *fd);
include/zpack.h:ZPACK_API int ZPACK_Read(ZPACK_FILE *fd, byte *buf, int sz);
include/zpack.h:ZPACK_API int ZPACK_Write(ZPACK_FILE *fd, byte *buf, int sz);
include/zpack.h:ZPACK_API u32 ZPACK_Seek(ZPACK_FILE *fd, u32 offs, int rel);
include/zpack.h:ZPACK_API u32 ZPACK_Tell(ZPACK_FILE *fd);
include/zpack.h:ZPACK_API int ZPACK_Eof(ZPACK_FILE *fd);
include/zpack.h:ZPACK_API ZPACK_DIR *ZPACK_OpenDir(ZPACK_Context *ctx, char *name);
include/zpack.h:ZPACK_API void ZPACK_CloseDir(ZPACK_DIR *dir);
include/zpack.h:ZPACK_API void ZPACK_RewindDir(ZPACK_DIR *dir);
include/zpack.h:ZPACK_API char *ZPACK_ReadDir(ZPACK_DIR *dir);
include/zpack.h:ZPACK_API int ZPACK_MkDir(ZPACK_Context *ctx, char *name);
include/dyc_auto.h:BGBDY_API int dycObjectP(dyt obj);
include/dyc_auto.h:BGBDY_API int dycClassP(dyt obj);
include/dyc_auto.h:BGBDY_API int dycSlotP(dyt obj);
include/dyc_auto.h:BGBDY_API int dycMethodP(dyt obj);
include/dyc_auto.h:BGBDY_API int dycObjectInstanceOfP(dyt obj, char *name);
include/dyc_auto.h:BGBDY_API void dycRegisterClassResolver(dycClass (*fn)(char *name));
include/dyc_auto.h:BGBDY_API void dycBeginClass(char *name, char *super);
include/dyc_auto.h:BGBDY_API dycClass dycEndClass();
include/dyc_auto.h:BGBDY_API void dycBeginClassAnon(dycClass super);
include/dyc_auto.h:BGBDY_API dycClass dycEndClassAnon();
include/dyc_auto.h:BGBDY_API void dycClassSuper(char *name);
include/dyc_auto.h:BGBDY_API void dycSlotBasic(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycSlotStatic(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycSlotInit(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycSlotStatici(char *name, char *sig, int val);
include/dyc_auto.h:BGBDY_API void dycSlotStaticl(char *name, char *sig, s64 val);
include/dyc_auto.h:BGBDY_API void dycSlotStaticf(char *name, char *sig, double val);
include/dyc_auto.h:BGBDY_API void dycSlotStaticd(char *name, char *sig, double val);
include/dyc_auto.h:BGBDY_API void dycSlotStaticU(char *name, char *sig, void *val);
include/dyc_auto.h:BGBDY_API void dycSlotIniti(char *name, char *sig, int val);
include/dyc_auto.h:BGBDY_API void dycSlotInitl(char *name, char *sig, s64 val);
include/dyc_auto.h:BGBDY_API void dycSlotInitf(char *name, char *sig, double val);
include/dyc_auto.h:BGBDY_API void dycSlotInitd(char *name, char *sig, double val);
include/dyc_auto.h:BGBDY_API void dycSlotInitU(char *name, char *sig, void *val);
include/dyc_auto.h:BGBDY_API void dycSlotDelegate(char *name, char *cname);
include/dyc_auto.h:BGBDY_API void dycSlotStaticDelegate(char *name, char *cname);
include/dyc_auto.h:BGBDY_API void dycMethodBasic(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycMethodStatic(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycMethodFunc(char *name, char *sig, dyt fcn);
include/dyc_auto.h:BGBDY_API void dycMethodStaticFunc(char *name, char *sig, dyt fcn);
include/dyc_auto.h:BGBDY_API void dycMethodCFunc(char *name, char *sig, void *fcn);
include/dyc_auto.h:BGBDY_API void dycMethodCFuncData(char *name, char *sig, void *fcn, void *data);
include/dyc_auto.h:BGBDY_API void dycMethodCSelf(char *name, char *sig, void *fcn);
include/dyc_auto.h:BGBDY_API void dycMethodCSelfData(char *name, char *sig, void *fcn, void *data);
include/dyc_auto.h:BGBDY_API void dycMethodStaticCFunc(char *name, char *sig, void *fcn);
include/dyc_auto.h:BGBDY_API void dycMethodStaticCFuncData(char *name, char *sig, void *fcn, void *data);
include/dyc_auto.h:BGBDY_API void dycMethodStaticCSelf(char *name, char *sig, void *fcn);
include/dyc_auto.h:BGBDY_API void dycMethodStaticCSelfData(char *name, char *sig, void *fcn, void *data);
include/dyc_auto.h:BGBDY_API void dycSlotMethod(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycStaticSlotMethod(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycAddMethodFlags(char *name, char *sig, s64 flags);
include/dyc_auto.h:BGBDY_API void dycAddSlotFlags(char *name, s64 flags);
include/dyc_auto.h:BGBDY_API void dycClassInterface(char *name);
include/dyc_auto.h:BGBDY_API void dycBeginIface(char *name, char *super);
include/dyc_auto.h:BGBDY_API dycClass dycEndIface();
include/dyc_auto.h:BGBDY_API void dycIfaceSuper(char *name);
include/dyc_auto.h:BGBDY_API void dycIfaceMethod(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycIfaceSlot(char *name, char *sig);
include/dyc_auto.h:BGBDY_API void dycBeginStruct(char *name);
include/dyc_auto.h:BGBDY_API dycClass dycEndStruct();
include/dyc_auto.h:BGBDY_API dycClass dycGetClass(char *name);
include/dyc_auto.h:BGBDY_API dycObject dycAlloc(dycClass inf);
include/dyc_auto.h:BGBDY_API void dycFreeObject(dycObject obj);
include/dyc_auto.h:BGBDY_API void dycSetObjectObject(dycObject dst, dycObject src);
include/dyc_auto.h:BGBDY_API int dycSubclassP(dycClass info, dycClass super);
include/dyc_auto.h:BGBDY_API int dycInstanceP(dycObject obj, dycClass inf);
include/dyc_auto.h:BGBDY_API dycClass dycGetObjClass(dycObject obj);
include/dyc_auto.h:BGBDY_API dycClass dycGetClassSuper(dycClass inf);
include/dyc_auto.h:BGBDY_API char *dycGetClassName(dycClass inf);
include/dyc_auto.h:BGBDY_API char *dycGetObjClassName(dycObject obj);
include/dyc_auto.h:BGBDY_API s64 dycGetClassFlags(dycClass inf);
include/dyc_auto.h:BGBDY_API dycClassV dycGetClassVersion(dycClass inf);
include/dyc_auto.h:BGBDY_API int dycGetStructSize(dycClassV vinf);
include/dyc_auto.h:BGBDY_API dycClass dycGetVersionClass(dycClassV vinf);
include/dyc_auto.h:BGBDY_API char *dycGetSlotName(dycSlot idx);
include/dyc_auto.h:BGBDY_API char *dycGetSlotSig(dycSlot idx);
include/dyc_auto.h:BGBDY_API dycClass dycGetSlotClass(dycSlot idx);
include/dyc_auto.h:BGBDY_API s64 dycGetSlotFlags(dycSlot idx);
include/dyc_auto.h:BGBDY_API char *dycGetMethodName(dycMethod idx);
include/dyc_auto.h:BGBDY_API char *dycGetMethodSig(dycMethod idx);
include/dyc_auto.h:BGBDY_API dycClass dycGetMethodClass(dycMethod idx);
include/dyc_auto.h:BGBDY_API s64 dycGetMethodFlags(dycMethod idx);
include/dyc_auto.h:BGBDY_API dycSlot dycIdxSlot(dycClass info, char *name);
include/dyc_auto.h:BGBDY_API dycSlot dycIdxObjSlot(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API dycMethod dycIdxMethod(dycClass inf, char *name, char *sig);
include/dyc_auto.h:BGBDY_API dycMethod dycIdxObjMethod(dycObject obj, char *name, char *sig);
include/dyc_auto.h:BGBDY_API void *dycGetSlotPtr(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycGetInitPtr(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycGetStaticPtr(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycGetStructPtr(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycPtrSlot(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API void *dycPtrStaticSlot(dycClass info, char *name);
include/dyc_auto.h:BGBDY_API void *dycPtrInitSlot(dycClass info, char *name);
include/dyc_auto.h:BGBDY_API void *dycPtrStructSlot(dycClassV vinf, void *obj, char *name);
include/dyc_auto.h:BGBDY_API int dycInstanceOfP(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API int dycSubclassOfP(char *name, char *super);
include/dyc_auto.h:BGBDY_API dyt dycLookupMethodSig(dycObject obj, char *name, char *sig);
include/dyc_auto.h:BGBDY_API dyt dycGetMethodFunc(dycClass inf, dycMethod idx);
include/dyc_auto.h:BGBDY_API dyt dycGetObjMethodFunc(dycObject obj, dycMethod idx);
include/dyc_auto.h:BGBDY_API void dycSetMethodFunc(dycClass inf, dycMethod idx, dyt fcn);
include/dyc_auto.h:BGBDY_API void dycSetObjMethodFunc(dycObject obj, dycMethod idx, dyt fcn);
include/dyc_auto.h:BGBDY_API dycSlot dycAddObjSlot(dycObject obj, char *name, char *sig);
include/dyc_auto.h:BGBDY_API dycMethod dycAddObjMethod(dycObject obj, char *name, char *sig);
include/dyc_auto.h:BGBDY_API dycObject dycCloneObject(dycObject obj);
include/dyc_auto.h:BGBDY_API dycObject dycGetObjDelegate(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API void dycSetObjDelegate(dycObject obj, char *name, dycObject obj1);
include/dyc_auto.h:BGBDY_API dycSlot *dycEnumSlotArray(dycClass inf);
include/dyc_auto.h:BGBDY_API dycMethod *dycEnumMethodArray(dycClass inf);
include/dyc_auto.h:BGBDY_API dycSlot *dycEnumClassSlotArray(char *name);
include/dyc_auto.h:BGBDY_API dycMethod *dycEnumClassMethodArray(char *name);
include/dyc_auto.h:BGBDY_API dycObject dycAllocClass(char *name);
include/dyc_auto.h:BGBDY_API void *dycPtrClassSlot(char *cname, char *sname);
include/dyc_auto.h:BGBDY_API dycSlot dycIdxClassSlot(char *cname, char *sname);
include/dyc_auto.h:BGBDY_API dycMethod dycIdxClassMethod(char *cname, char *name, char *sig);
include/dyc_auto.h:BGBDY_API dyt dycGetSlot(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API dyt dycGetSlotr(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API void *dycGetSlotp(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API int dycGetSlotsb(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API int dycGetSlotub(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API int dycGetSlotss(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API int dycGetSlotus(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API int dycGetSloti(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API s64 dycGetSlotl(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API float dycGetSlotf(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API double dycGetSlotd(dycObject obj, char *name);
include/dyc_auto.h:BGBDY_API int dycSetSlot(dycObject obj, char *name, dyt val);
include/dyc_auto.h:BGBDY_API int dycSetSlotr(dycObject obj, char *name, dyt val);
include/dyc_auto.h:BGBDY_API int dycSetSlotp(dycObject obj, char *name, void *val);
include/dyc_auto.h:BGBDY_API int dycSetSlotsb(dycObject obj, char *name, int val);
include/dyc_auto.h:BGBDY_API int dycSetSlotub(dycObject obj, char *name, int val);
include/dyc_auto.h:BGBDY_API int dycSetSlotss(dycObject obj, char *name, int val);
include/dyc_auto.h:BGBDY_API int dycSetSlotus(dycObject obj, char *name, int val);
include/dyc_auto.h:BGBDY_API int dycSetSloti(dycObject obj, char *name, int val);
include/dyc_auto.h:BGBDY_API int dycSetSlotl(dycObject obj, char *name, s64 val);
include/dyc_auto.h:BGBDY_API int dycSetSlotf(dycObject obj, char *name, float val);
include/dyc_auto.h:BGBDY_API int dycSetSlotd(dycObject obj, char *name, double val);
include/dyc_auto.h:BGBDY_API dyt dycGet(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycSet(dycObject obj, dycSlot slot, dyt val);
include/dyc_auto.h:BGBDY_API dyt dycGetr(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API void dycSetr(dycObject obj, dycSlot idx, dyt val);
include/dyc_auto.h:BGBDY_API int dycGetsb(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetub(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetss(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetus(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGeti(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API s64 dycGetl(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API float dycGetf(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API double dycGetd(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycGetp(dycObject obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API void dycSetsb(dycObject obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetub(dycObject obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetss(dycObject obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetus(dycObject obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSeti(dycObject obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetl(dycObject obj, dycSlot idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetf(dycObject obj, dycSlot idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetd(dycObject obj, dycSlot idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetp(dycObject obj, dycSlot idx, void *val);
include/dyc_auto.h:BGBDY_API int dycGetStaticsb(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStaticub(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStaticss(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStaticus(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStatici(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API s64 dycGetStaticl(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API float dycGetStaticf(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API double dycGetStaticd(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API dyt dycGetStaticr(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycGetStaticp(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API void dycSetStaticsb(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStaticub(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStaticss(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStaticus(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStatici(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStaticl(dycClass inf, dycSlot idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetStaticf(dycClass inf, dycSlot idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetStaticd(dycClass inf, dycSlot idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetStaticr(dycClass inf, dycSlot idx, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetStaticp(dycClass inf, dycSlot idx, void *val);
include/dyc_auto.h:BGBDY_API int dycGetInitsb(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetInitub(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetInitss(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetInitus(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetIniti(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API s64 dycGetInitl(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API float dycGetInitf(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API double dycGetInitd(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API dyt dycGetInitr(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycGetInitp(dycClass inf, dycSlot idx);
include/dyc_auto.h:BGBDY_API void dycSetInitsb(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetInitub(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetInitss(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetInitus(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetIniti(dycClass inf, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetInitl(dycClass inf, dycSlot idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetInitf(dycClass inf, dycSlot idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetInitd(dycClass inf, dycSlot idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetInitr(dycClass inf, dycSlot idx, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetInitp(dycClass inf, dycSlot idx, void *val);
include/dyc_auto.h:BGBDY_API int dycGetStructsb(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStructub(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStructss(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStructus(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API int dycGetStructi(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API s64 dycGetStructl(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API float dycGetStructf(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API double dycGetStructd(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API dyt dycGetStructr(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API void *dycGetStructp(dycClassV vinf, void *obj, dycSlot idx);
include/dyc_auto.h:BGBDY_API void dycSetStructsb(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStructub(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStructss(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStructus(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStructi(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetStructl(dycClassV vinf, void *obj, dycSlot idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetStructf(dycClassV vinf, void *obj, dycSlot idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetStructd(dycClassV vinf, void *obj, dycSlot idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetStructr(dycClassV vinf, void *obj, dycSlot idx, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetStructp(dycClassV vinf, void *obj, dycSlot idx, void *val);
include/dyc_auto.h:BGBDY_API dycObject dycNewClass(char *name);
include/dyc_auto.h:BGBDY_API dycObject dycNewInitClass(char *name, char *sig, ...);
include/dyc_auto.h:BGBDY_API dycObject dycNewInitClassV(char *name, char *sig, va_list args);
include/dyc_auto.h:BGBDY_API dycObject dycNewInitClassU(char *name, char *sig, void **args);
include/dyc_auto.h:BGBDY_API dycObject dycNew(dycClass inf);
include/dyc_auto.h:BGBDY_API dycObject dycNewInit(dycClass inf, char *sig, ...);
include/dyc_auto.h:BGBDY_API dycObject dycNewInitV(dycClass inf, char *sig, va_list args);
include/dyc_auto.h:BGBDY_API dycObject dycNewInitU(dycClass inf, char *sig, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallSigU(dycObject obj, char *name, char *sig, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallSigV(dycObject obj, char *name, char *sig, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallSig(dycObject obj, char *name, char *sig, ...);
include/dyc_auto.h:BGBDY_API dyt dycCallSigVr(dycObject obj, char *name, char *sig, va_list lst);
include/dyc_auto.h:BGBDY_API int dycCallSigVi(dycObject obj, char *name, char *sig, va_list lst);
include/dyc_auto.h:BGBDY_API s64 dycCallSigVl(dycObject obj, char *name, char *sig, va_list lst);
include/dyc_auto.h:BGBDY_API float dycCallSigVf(dycObject obj, char *name, char *sig, va_list lst);
include/dyc_auto.h:BGBDY_API double dycCallSigVd(dycObject obj, char *name, char *sig, va_list lst);
include/dyc_auto.h:BGBDY_API dyt dycCallSigUr(dycObject obj, char *name, char *sig, void **args);
include/dyc_auto.h:BGBDY_API int dycCallSigUi(dycObject obj, char *name, char *sig, void **args);
include/dyc_auto.h:BGBDY_API s64 dycCallSigUl(dycObject obj, char *name, char *sig, void **args);
include/dyc_auto.h:BGBDY_API float dycCallSigUf(dycObject obj, char *name, char *sig, void **args);
include/dyc_auto.h:BGBDY_API double dycCallSigUd(dycObject obj, char *name, char *sig, void **args);
include/dyc_auto.h:BGBDY_API int dycCallSigi(dycObject obj, char *name, char *sig, ...);
include/dyc_auto.h:BGBDY_API s64 dycCallSigl(dycObject obj, char *name, char *sig, ...);
include/dyc_auto.h:BGBDY_API float dycCallSigf(dycObject obj, char *name, char *sig, ...);
include/dyc_auto.h:BGBDY_API double dycCallSigd(dycObject obj, char *name, char *sig, ...);
include/dyc_auto.h:BGBDY_API void *dycCallU(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallV(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCall(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API int dycCallUi(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API s64 dycCallUl(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API float dycCallUf(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API double dycCallUd(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API dyt dycCallUr(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallUp(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void dycCallUv(dycObject obj, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API int dycCallVi(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API s64 dycCallVl(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API float dycCallVf(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API double dycCallVd(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API dyt dycCallVr(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallVp(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void dycCallVv(dycObject obj, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API int dycCalli(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API s64 dycCalll(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API float dycCallf(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API double dycCalld(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API dyt dycCallr(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void *dycCallp(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void dycCallv(dycObject obj, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void *dycCallStaticU(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallStaticV(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallStatic(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API int dycCallStaticUi(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API s64 dycCallStaticUl(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API float dycCallStaticUf(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API double dycCallStaticUd(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API dyt dycCallStaticUr(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallStaticUp(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void dycCallStaticUv(dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API int dycCallStaticVi(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API s64 dycCallStaticVl(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API float dycCallStaticVf(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API double dycCallStaticVd(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API dyt dycCallStaticVr(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallStaticVp(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void dycCallStaticVv(dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API int dycCallStatici(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API s64 dycCallStaticl(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API float dycCallStaticf(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API double dycCallStaticd(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API dyt dycCallStaticr(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void *dycCallStaticp(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void dycCallStaticv(dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void *dycCallAsU(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallAsV(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallAs(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API int dycCallAsUi(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API s64 dycCallAsUl(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API float dycCallAsUf(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API double dycCallAsUd(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API dyt dycCallAsUr(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallAsUp(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void dycCallAsUv(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API int dycCallAsVi(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API s64 dycCallAsVl(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API float dycCallAsVf(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API double dycCallAsVd(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API dyt dycCallAsVr(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallAsVp(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void dycCallAsVv(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API int dycCallAsi(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API s64 dycCallAsl(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API float dycCallAsf(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API double dycCallAsd(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API dyt dycCallAsr(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void *dycCallAsp(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void dycCallAsv(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void *dycCallStructU(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallStructV(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallStruct(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API int dycCallStructUi(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API s64 dycCallStructUl(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API float dycCallStructUf(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API double dycCallStructUd(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API dyt dycCallStructUr(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void *dycCallStructUp(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API void dycCallStructUv(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dyc_auto.h:BGBDY_API int dycCallStructVi(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API s64 dycCallStructVl(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API float dycCallStructVf(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API double dycCallStructVd(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API dyt dycCallStructVr(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void *dycCallStructVp(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API void dycCallStructVv(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dyc_auto.h:BGBDY_API int dycCallStructi(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API s64 dycCallStructl(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API float dycCallStructf(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API double dycCallStructd(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API dyt dycCallStructr(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void *dycCallStructp(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API void dycCallStructv(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dyc_auto.h:BGBDY_API dycArray dycNewArray(char *sig, int cnt);
include/dyc_auto.h:BGBDY_API int dycArrayP(dyt p);
include/dyc_auto.h:BGBDY_API int dycArrayDataP(dyt p);
include/dyc_auto.h:BGBDY_API int dycArray2P(dyt p);
include/dyc_auto.h:BGBDY_API dycArray dycArrayFromData(dyt p);
include/dyc_auto.h:BGBDY_API int dycArraySigP(dyt p, char *sig);
include/dyc_auto.h:BGBDY_API void *dycArrayV(dycArray arr);
include/dyc_auto.h:BGBDY_API int dycArraySz(dycArray arr);
include/dyc_auto.h:BGBDY_API char *dycArraySig(dycArray arr);
include/dyc_auto.h:BGBDY_API int dycArrayStep(dycArray arr);
include/dyc_auto.h:BGBDY_API void *dycArrayIdxPtr(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API dyt dycGetArrayVar(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API void dycSetArrayVar(dycArray arr, int idx, dyt val);
include/dyc_auto.h:BGBDY_API int dycGetArraysb(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayub(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayss(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayus(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayi(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API s64 dycGetArrayl(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API float dycGetArrayf(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API double dycGetArrayd(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API dyt dycGetArrayr(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API void *dycGetArrayp(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API void dycSetArraysb(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayub(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayss(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayus(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayi(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayl(dycArray arr, int idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArrayf(dycArray arr, int idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetArrayd(dycArray arr, int idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetArrayr(dycArray arr, int idx, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArrayp(dycArray arr, int idx, void *val);
include/dyc_auto.h:BGBDY_API void *dycArrayIdxPtrBC(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArraySsb(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArraySub(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArraySss(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArraySus(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API int dycGetArraySi(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API s64 dycGetArraySl(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API float dycGetArraySf(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API double dycGetArraySd(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API dyt dycGetArraySr(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API void *dycGetArraySp(dycArray arr, int idx);
include/dyc_auto.h:BGBDY_API void dycSetArraySsb(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArraySub(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArraySss(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArraySus(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArraySi(dycArray arr, int idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArraySl(dycArray arr, int idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArraySf(dycArray arr, int idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetArraySd(dycArray arr, int idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetArraySr(dycArray arr, int idx, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArraySp(dycArray arr, int idx, void *val);
include/dyc_auto.h:BGBDY_API dycArray DYC_NewArrayM_R(char *sig, int ord, int *sz);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM(char *sig, int ord, int *sz);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM2(char *sig, int sz0, int sz1);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM3(char *sig, int sz0, int sz1, int sz2);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM4(char *sig, int sz0, int sz1, int sz2, int sz3);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM5(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM6(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM7(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM8(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM9(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM10(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8, int sz9);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM11(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10);
include/dyc_auto.h:BGBDY_API dycArray dycNewArrayM12(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10, int sz11);
include/dyc_auto.h:BGBDY_API dycArrayN dycNewArrayN(char *sig, int ord, int *sz);
include/dyc_auto.h:BGBDY_API int dycArrayNP(dyt p);
include/dyc_auto.h:BGBDY_API int dycArrayNSigP(dyt p, char *sig);
include/dyc_auto.h:BGBDY_API int dycArrayNSigOrdP(dyt p, char *sig, int ord);
include/dyc_auto.h:BGBDY_API void *dycArrayNV(dycArrayN arr);
include/dyc_auto.h:BGBDY_API int *dycArrayNSz(dycArrayN arr);
include/dyc_auto.h:BGBDY_API int dycArrayNCnt(dycArrayN arr);
include/dyc_auto.h:BGBDY_API int dycArrayNOrd(dycArrayN arr);
include/dyc_auto.h:BGBDY_API char *dycArrayNSig(dycArrayN arr);
include/dyc_auto.h:BGBDY_API int dycArrayNStep(dycArrayN arr);
include/dyc_auto.h:BGBDY_API void *dycArrayNIdxPtr(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API void *dycArrayNIdxPtrBC(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNsb(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNub(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNss(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNus(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNi(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API s64 dycGetArrayNl(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API float dycGetArrayNf(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API double dycGetArrayNd(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API dyt dycGetArrayNr(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API void *dycGetArrayNp(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API void dycSetArrayNsb(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNub(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNss(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNus(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNi(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNl(dycArrayN arr, int *idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNf(dycArrayN arr, int *idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNd(dycArrayN arr, int *idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNr(dycArrayN arr, int *idx, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNp(dycArrayN arr, int *idx, void *val);
include/dyc_auto.h:BGBDY_API int dycGetArrayNSsb(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNSub(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNSss(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNSus(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API int dycGetArrayNSi(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API s64 dycGetArrayNSl(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API float dycGetArrayNSf(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API double dycGetArrayNSd(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API dyt dycGetArrayNSr(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API void *dycGetArrayNSp(dycArrayN arr, int *idx);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSsb(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSub(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSss(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSus(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSi(dycArrayN arr, int *idx, int val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSl(dycArrayN arr, int *idx, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSf(dycArrayN arr, int *idx, float val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSd(dycArrayN arr, int *idx, double val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSr(dycArrayN arr, int *idx, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArrayNSp(dycArrayN arr, int *idx, void *val);
include/dyc_auto.h:BGBDY_API void *dycArray2IdxPtr(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API void *dycArray2IdxPtrBC(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2sb(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2ub(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2ss(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2us(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2i(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API s64 dycGetArray2l(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API float dycGetArray2f(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API double dycGetArray2d(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API dyt dycGetArray2r(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API void *dycGetArray2p(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API void dycSetArray2sb(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2ub(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2ss(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2us(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2i(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2l(dycArrayN arr, int y, int x, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArray2f(dycArrayN arr, int y, int x, float val);
include/dyc_auto.h:BGBDY_API void dycSetArray2d(dycArrayN arr, int y, int x, double val);
include/dyc_auto.h:BGBDY_API void dycSetArray2r(dycArrayN arr, int y, int x, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArray2p(dycArrayN arr, int y, int x, void *val);
include/dyc_auto.h:BGBDY_API int dycGetArray2Ssb(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2Sub(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2Sss(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2Sus(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray2Si(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API s64 dycGetArray2Sl(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API float dycGetArray2Sf(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API double dycGetArray2Sd(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API dyt dycGetArray2Sr(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API void *dycGetArray2Sp(dycArrayN arr, int y, int x);
include/dyc_auto.h:BGBDY_API void dycSetArray2Ssb(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sub(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sss(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sus(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Si(dycArrayN arr, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sl(dycArrayN arr, int y, int x, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sf(dycArrayN arr, int y, int x, float val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sd(dycArrayN arr, int y, int x, double val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sr(dycArrayN arr, int y, int x, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArray2Sp(dycArrayN arr, int y, int x, void *val);
include/dyc_auto.h:BGBDY_API void *dycArray3IdxPtr(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API void *dycArray3IdxPtrBC(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3sb(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3ub(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3ss(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3us(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3i(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API s64 dycGetArray3l(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API float dycGetArray3f(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API double dycGetArray3d(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API dyt dycGetArray3r(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API void *dycGetArray3p(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API void dycSetArray3sb(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3ub(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3ss(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3us(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3i(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3l(dycArrayN arr, int z, int y, int x, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArray3f(dycArrayN arr, int z, int y, int x, float val);
include/dyc_auto.h:BGBDY_API void dycSetArray3d(dycArrayN arr, int z, int y, int x, double val);
include/dyc_auto.h:BGBDY_API void dycSetArray3r(dycArrayN arr, int z, int y, int x, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArray3p(dycArrayN arr, int z, int y, int x, void *val);
include/dyc_auto.h:BGBDY_API int dycGetArray3Ssb(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3Sub(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3Sss(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3Sus(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API int dycGetArray3Si(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API s64 dycGetArray3Sl(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API float dycGetArray3Sf(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API double dycGetArray3Sd(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API dyt dycGetArray3Sr(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API void *dycGetArray3Sp(dycArrayN arr, int z, int y, int x);
include/dyc_auto.h:BGBDY_API void dycSetArray3Ssb(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sub(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sss(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sus(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Si(dycArrayN arr, int z, int y, int x, int val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sl(dycArrayN arr, int z, int y, int x, s64 val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sf(dycArrayN arr, int z, int y, int x, float val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sd(dycArrayN arr, int z, int y, int x, double val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sr(dycArrayN arr, int z, int y, int x, dyt val);
include/dyc_auto.h:BGBDY_API void dycSetArray3Sp(dycArrayN arr, int z, int y, int x, void *val);
include/bmcc_auto.h:void *BMCC_MM_RAlloc(int sz);
include/bmcc_auto.h:char *BMCC_RStrDup(char *s);
include/bmcc_auto.h:void BMCC_StrCpy(char *t, char *s);
include/bmcc_auto.h:char **BMCC_Split(char *s);
include/bmcc_auto.h:int BMCC_MM_AddBlock();
include/bmcc_auto.h:int BMCC_MM_FindFreeCell(int *ri, int *rj);
include/bmcc_auto.h:int BMCC_MM_FindFreeCells(int num, int *ri, int *rj);
include/bmcc_auto.h:int BMCC_MM_FindFreeCells(int num, int *ri, int *rj);
include/bmcc_auto.h:elem BMCC_MM_MultiCons(int num);
include/bmcc_auto.h:elem BMCC_MM_AllocCons();
include/bmcc_auto.h:elem BMCC_MM_AllocObj(int ty, int sz);
include/bmcc_auto.h:elem BMCC_MM_AllocObjA64(int ty, int sz);
include/bmcc_auto.h:elem BMCC_MM_AllocObjAPtr(int ty, int sz);
include/bmcc_auto.h:elem BMCC_MM_AllocObjName(char *ty, int sz);
include/bmcc_auto.h:elem BMCC_MM_AllocObjNameAPtr(char *ty, int sz);
include/bmcc_auto.h:int BMCC_MM_FindElemCell(elem t, int *ri, int *rj);
include/bmcc_auto.h:void BMCC_MM_FindElemCell2(elem t, int *ri, int *rj);
include/bmcc_auto.h:elem BMCC_MM_ElemFromCell(int i, int j);
include/bmcc_auto.h:int BMCC_MM_FindElemLObj(elem t);
include/bmcc_auto.h:int BMCC_MM_FreeCells(int i, int j);
include/bmcc_auto.h:int BMCC_MM_FreeObj(elem t);
include/bmcc_auto.h:int BMCC_MM_GetObjType(elem t);
include/bmcc_auto.h:int BMCC_MM_GetObjSize(elem t);
include/bmcc_auto.h:int BMCC_MM_GetObjMark(elem t);
include/bmcc_auto.h:elem BMCC_MM_GetPtrElem(void *ptr);
include/bmcc_auto.h:void *BMCC_TY_GetElemPtr(elem t);
include/bmcc_auto.h:void *BMCC_TY_GetElemPtrA64(elem t);
include/bmcc_auto.h:elem *BMCC_TY_GetCellPtr(elem t);
include/bmcc_auto.h:int BMCC_MM_HeapUsed();
include/bmcc_auto.h:int BMCC_MM_HeapFree();
include/bmcc_auto.h:int BMCC_MM_HeapSize();
include/bmcc_auto.h:void BMCC_GC_PrintStats();
include/bmcc_auto.h:void BMCC_GC_AddRoot(elem *p);
include/bmcc_auto.h:void BMCC_GC_AddRootArray(elem *p, int n);
include/bmcc_auto.h:void BMCC_GC_PushRoot(elem *p);
include/bmcc_auto.h:void BMCC_GC_PushRootArg(elem *p);
include/bmcc_auto.h:void BMCC_GC_PushRootPos();
include/bmcc_auto.h:void BMCC_GC_PopRootPos();
include/bmcc_auto.h:void BMCC_GC_Assign(elem *p, elem t);
include/bmcc_auto.h:void BMCC_GC_Clear(elem *p);
include/bmcc_auto.h:void BMCC_GC_Assign(elem *p, elem t);
include/bmcc_auto.h:void BMCC_GC_Clear(elem *p);
include/bmcc_auto.h:elem BMCC_GC_AllocCons();
include/bmcc_auto.h:int BMCC_GC_BlackenCells(int i, int j);
include/bmcc_auto.h:int BMCC_GC_LockCells(int i, int j);
include/bmcc_auto.h:int BMCC_GC_FreeCellObj(int i, int j);
include/bmcc_auto.h:int BMCC_GC_FreeObj(elem t);
include/bmcc_auto.h:void BMCC_GC_IncRef(elem t);
include/bmcc_auto.h:void BMCC_GC_DecRef(elem t);
include/bmcc_auto.h:void BMCC_GC_SafeDecRef(elem t);
include/bmcc_auto.h:void BMCC_GC_CheckRef(elem t);
include/bmcc_auto.h:void BMCC_GC_SetManyRef(elem t);
include/bmcc_auto.h:void BMCC_GC_SetProtectRef(elem t);
include/bmcc_auto.h:int BMCC_GC_GetRefCount(elem t);
include/bmcc_auto.h:int BMCC_GC_GetRefCount(elem t);
include/bmcc_auto.h:int BMCC_GC_ClearMarks();
include/bmcc_auto.h:int BMCC_GC_Sweep();
include/bmcc_auto.h:void BMCC_GC_MarkRef(elem t);
include/bmcc_auto.h:void BMCC_GC_MarkObj(elem t);
include/bmcc_auto.h:void BMCC_GC_Mark();
include/bmcc_auto.h:int BMCC_GC_MarkProtect();
include/bmcc_auto.h:void BMCC_GC_Collect();
include/bmcc_auto.h:int BMCC_TY_SymsUsed();
include/bmcc_auto.h:int BMCC_TY_SymsMax();
include/bmcc_auto.h:void BMCC_TY_BeginSetFunc(int ty);
include/bmcc_auto.h:void BMCC_TY_SetMarkFunc(int ty, void (*fcn)(elem obj));
include/bmcc_auto.h:void BMCC_TY_SetDestroyFunc(int ty, void (*fcn)(elem obj));
include/bmcc_auto.h:void BMCC_TY_SetPrintFunc(int ty, void (*fcn)(char **str, elem obj));
include/bmcc_auto.h:void BMCC_TY_SetParseFunc(int ty, elem (*fcn)(char **str));
include/bmcc_auto.h:void BMCC_TY_SetLoadIndexFunc(int ty, elem (*fcn)(elem obj, elem slot));
include/bmcc_auto.h:void BMCC_TY_SetStoreIndexFunc(int ty,elem (*fcn)(elem obj, elem slot, elem val));
include/bmcc_auto.h:void BMCC_TY_SetCallFunc(int ty, elem (*fcn)(elem obj, elem fcn, elem args));
include/bmcc_auto.h:void BMCC_TY_SetMethodCallFunc(int ty,elem (*fcn)(elem obj, elem slot, elem args));
include/bmcc_auto.h:void BMCC_TY_CallMarkFunc(elem obj);
include/bmcc_auto.h:void BMCC_TY_CallDestroyFunc(elem obj);
include/bmcc_auto.h:int BMCC_TY_CallPrintFunc(char **str, elem obj);
include/bmcc_auto.h:elem BMCC_TY_LoadIndex(elem obj, elem slot);
include/bmcc_auto.h:elem BMCC_TY_StoreIndex(elem obj, elem slot, elem val);
include/bmcc_auto.h:elem BMCC_TY_Call(elem obj, elem fcn, elem args);
include/bmcc_auto.h:elem BMCC_TY_MethodCall(elem obj, elem slot, elem args);
include/bmcc_auto.h:int BMCC_TY_HasMethodCall(elem obj);
include/bmcc_auto.h:int BMCC_TY_HashIndex(char **hash, char *str);
include/bmcc_auto.h:int BMCC_TY_HashIndex(char **hash, char *str);
include/bmcc_auto.h:int BMCC_TY_HashType(char *str);
include/bmcc_auto.h:char *BMCC_TY_HashTypeString(char *str);
include/bmcc_auto.h:int BMCC_TY_GetType(elem t);
include/bmcc_auto.h:char *BMCC_TY_GetTypeName(elem t);
include/bmcc_auto.h:void *BMCC_TY_GetObjData(elem t);
include/bmcc_auto.h:void *BMCC_TY_GetObjDataA64(elem t);
include/bmcc_auto.h:void *BMCC_TY_GetObjDataAPtr(elem t);
include/bmcc_auto.h:elem BMCC_TY_HashSymbol(char *str);
include/bmcc_auto.h:elem BMCC_TY_HashKeyword(char *str);
include/bmcc_auto.h:elem BMCC_TY_HashString(char *str);
include/bmcc_auto.h:char *BMCC_TY_GetSymbol(elem t);
include/bmcc_auto.h:int BMCC_TY_GetSymbolIndex(elem t);
include/bmcc_auto.h:char *BMCC_TY_GetString(elem t);
include/bmcc_auto.h:int BMCC_TY_GetInt(elem t);
include/bmcc_auto.h:s64 BMCC_TY_GetLong(elem t);
include/bmcc_auto.h:float BMCC_TY_GetFloat(elem t);
include/bmcc_auto.h:double BMCC_TY_GetDouble(elem t);
include/bmcc_auto.h:void BMCC_TY_GetRational(elem t, int *ri, int *rj);
include/bmcc_auto.h:elem BMCC_TY_Int(s64 i);
include/bmcc_auto.h:elem BMCC_TY_Long(s64 i);
include/bmcc_auto.h:elem BMCC_TY_Char(int i);
include/bmcc_auto.h:elem BMCC_TY_Float(double f);
include/bmcc_auto.h:elem BMCC_TY_Rational(int i, int j);
include/bmcc_auto.h:int BMCC_TY_GetBool(elem t);
include/bmcc_auto.h:elem BMCC_TY_Cons(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TY_GetCar(elem t);
include/bmcc_auto.h:elem BMCC_TY_GetCdr(elem t);
include/bmcc_auto.h:elem BMCC_TY_SetCar(elem t, elem a);
include/bmcc_auto.h:elem BMCC_TY_SetCdr(elem t, elem a);
include/bmcc_auto.h:void BMCC_TY_SetCar2(elem t, elem a);
include/bmcc_auto.h:void BMCC_TY_SetCdr2(elem t, elem a);
include/bmcc_auto.h:elem BMCC_TY_GetCaar(elem t);
include/bmcc_auto.h:elem BMCC_TY_GetCdar(elem t);
include/bmcc_auto.h:elem BMCC_TY_GetCadr(elem t);
include/bmcc_auto.h:elem BMCC_TY_GetCddr(elem t);
include/bmcc_auto.h:elem BMCC_TY_Reverse(elem l);
include/bmcc_auto.h:elem BMCC_TY_NReverse(elem l);
include/bmcc_auto.h:elem BMCC_TY_CopyList(elem a);
include/bmcc_auto.h:elem BMCC_TY_Append(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TY_NAppend(elem a, elem b);
include/bmcc_auto.h:int BMCC_TY_IsListP(elem l);
include/bmcc_auto.h:int BMCC_TY_GetListLen(elem l);
include/bmcc_auto.h:elem BMCC_TY_ListToArray(elem l);
include/bmcc_auto.h:elem BMCC_TY_NewArray(int n);
include/bmcc_auto.h:elem BMCC_TY_NewArrayFromArray(elem *arr, int n);
include/bmcc_auto.h:elem BMCC_TY_NewArray2(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TY_NewArray3(elem a, elem b, elem c);
include/bmcc_auto.h:elem BMCC_TY_NewArray4(elem a, elem b, elem c, elem d);
include/bmcc_auto.h:elem BMCC_TY_NewArray5(elem a, elem b, elem c, elem d, elem e);
include/bmcc_auto.h:elem BMCC_TY_NewArray6(elem a, elem b, elem c, elem d, elem e, elem f);
include/bmcc_auto.h:int BMCC_TY_GetArrayLen(elem t);
include/bmcc_auto.h:elem BMCC_TY_GetArrayElem(elem t, int idx);
include/bmcc_auto.h:elem BMCC_TY_GetArrayElem2(elem t, int idx);
include/bmcc_auto.h:int BMCC_TY_SetArrayElem(elem t, int idx, elem a);
include/bmcc_auto.h:char *BMCC_TY_PrintFloat(float f);
include/bmcc_auto.h:char *BMCC_TY_PrintLong(elem l);
include/bmcc_auto.h:int BMCC_TY_Print(elem t);
include/bmcc_auto.h:int BMCC_TY_PrintLN(elem t);
include/bmcc_auto.h:int BMCC_TY_PrintTC(elem t);
include/bmcc_auto.h:int BMCC_TY_PrintTLN(elem t);
include/bmcc_auto.h:int BMCC_TY_Init();
include/bmcc_auto.h:int BMCC_Opr_Init();
include/bmcc_auto.h:void BMCC_OPR_AddUnaryFcn(int op, char *ty, elem (*fcn)(elem a));
include/bmcc_auto.h:void BMCC_OPR_AddBinaryFcn(int op, char *ta, char *tb,elem (*fcn)(elem a, elem b));
include/bmcc_auto.h:elem BMCC_Opr_ApplyUnaryFcn(elem a, elem f);
include/bmcc_auto.h:elem BMCC_Opr_ApplyBinaryFcn(elem a, elem b, elem f);
include/bmcc_auto.h:elem BMCC_Opr_UnaryGeneric(int op, elem a);
include/bmcc_auto.h:elem BMCC_Opr_BinaryGeneric(int op, elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Add(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_DAdd(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Sub(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_DSub(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Mul(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_DMul(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Div(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_DDiv(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_IDiv(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Mod(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Shl(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Shr(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_And(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Or(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Xor(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Exp(elem a, elem b);
include/bmcc_auto.h:int BMCC_Opr_IsEqual(elem a, elem b);
include/bmcc_auto.h:int BMCC_Opr_IsLess(elem a, elem b);
include/bmcc_auto.h:int BMCC_Opr_IsGreater(elem a, elem b);
include/bmcc_auto.h:int BMCC_Opr_IsLessEqual(elem a, elem b);
include/bmcc_auto.h:int BMCC_Opr_IsGreaterEqual(elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Binary(int op, elem a, elem b);
include/bmcc_auto.h:elem BMCC_Opr_Unary(int op, elem a);
include/bmcc_auto.h:int BMCC_Opr_CondBinary(int op, elem a, elem b);
include/bmcc_auto.h:int BMCC_Opr_CondUnary(int op, elem a);
include/bmcc_auto.h:elem BMCC_Opr_LoadIndex(elem obj, elem key);
include/bmcc_auto.h:void BMCC_Opr_StoreIndex(elem obj, elem key, elem val);
include/bmcc_auto.h:char *BMCC_ParseS_EatWhite(char *s);
include/bmcc_auto.h:int BMCC_ParseS_SpecialP(char *s);
include/bmcc_auto.h:char *BMCC_ParseS_Token(char *s, char *b, int *t);
include/bmcc_auto.h:elem BMCC_ParseS_List(char **s, int ind);
include/bmcc_auto.h:double BMCC_ParseS_Float(char *s);
include/bmcc_auto.h:elem BMCC_ParseS_Item(char **s, int ind);
include/bmcc_auto.h:elem BMCC_ParseS_FromString(char *s);
include/bmcc_auto.h:elem BMCC_ParseS_MultiFromString(char *s);
include/bmcc_auto.h:char *BMCC_S_PrintListSim(char *s, char *se, elem l);
include/bmcc_auto.h:char *BMCC_S_PrintList(char *s, elem l);
include/bmcc_auto.h:char *BMCC_S_PrintListInd(char *s, elem l, int ind);
include/bmcc_auto.h:char *BMCC_S_Print(char *str, elem t, int ind);
include/bmcc_auto.h:char *BMCC_S_PrintS(elem t);
include/bmcc_auto.h:void BMCC_S_PrintFmt(elem t);
include/bmcc_auto.h:int BMCC_TYVec_GetVecLen(elem a);
include/bmcc_auto.h:float BMCC_TYVec_GetVecVal(elem a, int idx);
include/bmcc_auto.h:float BMCC_TYVec_GetVecVal2(elem a, int idx);
include/bmcc_auto.h:void BMCC_TYVec_SetVecVal(elem a, int idx, float f);
include/bmcc_auto.h:elem BMCC_TYVec_List2FVec(elem l);
include/bmcc_auto.h:elem BMCC_TYVec_MakeFVec(float *fa, int n);
include/bmcc_auto.h:elem BMCC_TYVec_MakeFVec2(float a, float b);
include/bmcc_auto.h:elem BMCC_TYVec_MakeFVec3(float a, float b, float c);
include/bmcc_auto.h:elem BMCC_TYVec_MakeFVec4(float a, float b, float c, float d);
include/bmcc_auto.h:elem BMCC_TYVec_AddVec(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_SubVec(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_DotVec(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_ScaleVecNum(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_CrossVec(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_CrossVec2(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_VecLength(elem a);
include/bmcc_auto.h:elem BMCC_TYVec_Normalize(elem a);
include/bmcc_auto.h:elem BMCC_TYVec_Conjugate(elem a);
include/bmcc_auto.h:elem BMCC_TYVec_Complex(float a, float b);
include/bmcc_auto.h:float BMCC_TYVec_GetReal(elem t);
include/bmcc_auto.h:float BMCC_TYVec_GetImag(elem t);
include/bmcc_auto.h:elem BMCC_TYVec_AddComplex(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_SubComplex(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_MulComplex(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_DivComplex(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYVec_ExpComplex(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYMat_List2FMat(elem l);
include/bmcc_auto.h:elem BMCC_TY_MakeMatrix(int xs, int ys);
include/bmcc_auto.h:int BMCC_TYMat_GetXS(elem t);
include/bmcc_auto.h:int BMCC_TYMat_GetYS(elem t);
include/bmcc_auto.h:float *BMCC_TYMat_GetBody(elem t);
include/bmcc_auto.h:float *BMCC_TYMat_GetBody2(elem t, int *rxs, int *rys);
include/bmcc_auto.h:float BMCC_TYMat_GetIndex(elem t, int x, int y);
include/bmcc_auto.h:void BMCC_TYMat_SetIndex(elem t, int x, int y, float v);
include/bmcc_auto.h:elem BMCC_TYMat_AddMatrix(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYMat_SubMatrix(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYMat_ScaleMatrix(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYMat_MultMatrix(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYMat_MultMatrixVector(elem a, elem b);
include/bmcc_auto.h:void BMCC_TYMat_Inverse(float *a, float *b, int n);
include/bmcc_auto.h:elem BMCC_TYMat_InvertMatrix(elem a);
include/bmcc_auto.h:elem BMCC_TYMat_DivMatrix(elem a, elem b);
include/bmcc_auto.h:int BMCC_TYRat_GCF(int i, int j);
include/bmcc_auto.h:int BMCC_TYRat_LCF(int i, int j);
include/bmcc_auto.h:void BMCC_TYRat_Reduce(int *ri, int *rj);
include/bmcc_auto.h:elem BMCC_TYRat_Add(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_Sub(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_Mul(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_Div(elem a, elem b);
include/bmcc_auto.h:void BMCC_TYRat_UnwrapLong(elem t, unsigned int *lv);
include/bmcc_auto.h:elem BMCC_TYRat_WrapLong(unsigned int *lv);
include/bmcc_auto.h:elem BMCC_TYRat_WrapSmallLong(unsigned int *lv);
include/bmcc_auto.h:elem BMCC_TYRat_AddLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_SubLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_MulLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_DivLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_ModLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_ShlLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_ShrLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_AndLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_OrLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_XorLong(elem a, elem b);
include/bmcc_auto.h:elem BMCC_TYRat_NegLong(elem a);
include/bmcc_auto.h:int BMCC_TYRat_EqualLong(elem a, elem b);
include/bmcc_auto.h:int BMCC_TYRat_LessLong(elem a, elem b);
include/bmcc_auto.h:int BMCC_TYRat_GreaterLong(elem a, elem b);
include/bmcc_auto.h:char *BMCC_TYRat_XLong2String(elem a);
include/bmcc_auto.h:elem BMCC_TYRat_String2XLong(char *str);
include/bmcc_auto.h:void BMCC_TYHDL_Init();
include/bmcc_auto.h:void BMCC_TYHDL_SetGetSlot(int ns, elem (*fn)(void *p, char *s));
include/bmcc_auto.h:void BMCC_TYHDL_SetSetSlot(int ns, elem (*fn)(void *p, char *s, elem v));
include/bmcc_auto.h:void BMCC_TYHDL_SetApply(int ns, elem (*fn)(void *p, elem a));
include/bmcc_auto.h:void BMCC_TYHDL_SetMApply(int ns, elem (*fn)(void *p, char *s, elem a));
include/bmcc_auto.h:int BMCC_TYHDL_IndexFromElem(elem t);
include/bmcc_auto.h:elem BMCC_TYHDL_ElemFromIndex(int i);
include/bmcc_auto.h:elem BMCC_TYHDL_ElemFromPtr(void *p);
include/bmcc_auto.h:void *BMCC_TYHDL_PtrFromElem(elem o);
include/bmcc_auto.h:elem BMCC_TYHDL_GetSlot(elem o, elem n);
include/bmcc_auto.h:elem BMCC_TYHDL_SetSlot(elem o, elem n, elem v);
include/bmcc_auto.h:elem BMCC_TYHDL_Call(elem o, elem a);
include/bmcc_auto.h:elem BMCC_TYHDL_CallMethod(elem o, elem n, elem a);
include/bmcc_auto.h:void BMCC_LXI_Add32O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Add64(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Add64O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Add128(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Add128O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Add256(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Add256O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Sub64O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Sub128(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Sub128O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Sub256(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Sub256O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Add256F(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Sub256F(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Copy256F(u32 *a, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Neg256F(u32 *a, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul32O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul32AO(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul64AO(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul128AO(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul256AO(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul64O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul128O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul256(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mul256O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Div32O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Div64O(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Shr256(u32 *a, int b, u32 *c);
include/bmcc_auto.h:int BMCC_LXI_Shl256(u32 *a, int b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Shl256O(u32 *a, int b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Shr512_1(u32 *a, u32 *c);
include/bmcc_auto.h:int BMCC_LXI_CmpG_512(u32 *a, u32 *b);
include/bmcc_auto.h:void BMCC_LXI_Div256(u32 *a, u32 *b, u32 *c, u32 *r);
include/bmcc_auto.h:void BMCC_LXI_Div256S(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:void BMCC_LXI_Mod256S(u32 *a, u32 *b, u32 *c);
include/bmcc_auto.h:int BMCC_LXI_Mod256I(u32 *a, int b, u32 *c);
include/bmcc_auto.h:int BMCC_CComp_Init();
include/bmcc_auto.h:int BMCC_CParse_GetLinenum();
include/bmcc_auto.h:char *BMCC_CParse_GetFilename();
include/bmcc_auto.h:int BMCC_CParse_CalcLinenum(char *se);
include/bmcc_auto.h:int BMCC_CParse_SetLinenum(char *fname, char *base, int num);
include/bmcc_auto.h:int BMCC_CParse_PushLinenum();
include/bmcc_auto.h:int BMCC_CParse_PopLinenum();
include/bmcc_auto.h:int BMCC_CParse_SkimLinenum(char *s, char **rfn, int *rln);
include/bmcc_auto.h:char *BMCC_CParse_GetLastFileName();
include/bmcc_auto.h:int BMCC_CParse_GetLastLineNumber();
include/bmcc_auto.h:char *BMCC_CParse_EatWhiteOnly(char *s);
include/bmcc_auto.h:char *BMCC_CParse_EatWhite(char *s);
include/bmcc_auto.h:int BMCC_CParse_IsWhiteOnly(char *s);
include/bmcc_auto.h:int BMCC_CParse_IsLineBreak(char *se);
include/bmcc_auto.h:int BMCC_CParse_OpChar(int c);
include/bmcc_auto.h:int BMCC_CParse_PeekChar(char **str);
include/bmcc_auto.h:int BMCC_CParse_ParseChar(char **str);
include/bmcc_auto.h:int BMCC_CParse_EmitChar(char **str, int j);
include/bmcc_auto.h:int BMCC_CParse_NameInitChar(int c);
include/bmcc_auto.h:int BMCC_CParse_NameChar(int c);
include/bmcc_auto.h:char *BMCC_CParse_Token(char *s, char *b, int *ty);
include/bmcc_auto.h:elem BMCC_CParse_LookupStruct(char *name);
include/bmcc_auto.h:elem BMCC_CParse_LookupSProto(elem body);
include/bmcc_auto.h:elem BMCC_CParse_LookupType(char *name);
include/bmcc_auto.h:int BMCC_CParse_HandleTypedef(elem n);
include/bmcc_auto.h:elem BMCC_CParse_DefType(char **str);
include/bmcc_auto.h:elem BMCC_CParse_DefName(char **str);
include/bmcc_auto.h:elem BMCC_CParse_DefName2(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpandDefinition(elem tn, elem dn);
include/bmcc_auto.h:elem BMCC_CParse_Definition(char **str);
include/bmcc_auto.h:elem BMCC_CParse_FunArgs(char **str);
include/bmcc_auto.h:elem BMCC_CParse_VarsList(char **str, elem tn);
include/bmcc_auto.h:elem BMCC_CParse_FunVarsList(char **str);
include/bmcc_auto.h:elem BMCC_CParse_EnumVarsList(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ModuleBuffer(char *name, char *modname, char *buf);
include/bmcc_auto.h:elem BMCC_CParse_Expression(char **str);
include/bmcc_auto.h:int BMCC_CParse_AddExpression(char *name, elem (*func)(char **s));
include/bmcc_auto.h:elem BMCC_CParse_ParseExpressionName(char *name, char **s);
include/bmcc_auto.h:elem BMCC_CParse_Number(char *str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionLit(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionPostfix(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionUnary(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionCast(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionExp(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionMD(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionAS(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionSHLR(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionRCmp(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionECmp(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionBitAnd(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionBitXor(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionBitOr(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionLop(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionLop2(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionTCond(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionEquals(char **str);
include/bmcc_auto.h:elem BMCC_CParse_ExpressionComma(char **str);
include/bmcc_auto.h:elem BMCC_CParse_Expression(char **str);
include/bmcc_auto.h:elem BMCC_CParse_Expression2(char **str);
include/bmcc_auto.h:elem BMCC_CParse_Expression3(char **str);
include/bmcc_auto.h:void BMCC_CParse_Warn(char *se, char *str, ...);
include/bmcc_auto.h:void BMCC_CParse_Error(char *se, char *str, ...);
include/bmcc_auto.h:int BMCC_CParse_AddStatement(char *name, elem (*func)(char **s));
include/bmcc_auto.h:elem BMCC_CParse_ParseStatementName(char *name, char **s);
include/bmcc_auto.h:int BMCC_CParse_AddBlockStatement(char *name,elem (*func)(char **s));
include/bmcc_auto.h:elem BMCC_CParse_ParseBlockStatementName(char *name, char **s);
include/bmcc_auto.h:char *BMCC_CParse_EatSemicolon(char *s);
include/bmcc_auto.h:elem BMCC_CParse_Statement(char **str);
include/bmcc_auto.h:elem BMCC_CParse_BlockStatementInner(char **str);
include/bmcc_auto.h:elem BMCC_CParse_BlockStatement(char **str);
include/bmcc_auto.h:elem BMCC_CParse_Block(char **str);
include/bmcc_auto.h:elem BMCC_CParse_BlockStatement2(char **str);
include/bmcc_auto.h:void BMCC_CComp_Warn(char *str, ...);
include/bmcc_auto.h:void BMCC_CComp_Error(char *str, ...);
include/bmcc_auto.h:int BMCC_CComp_IsAttr(elem l);
include/bmcc_auto.h:elem BMCC_CComp_GetFormAttr(elem l, char *name);
include/bmcc_auto.h:elem BMCC_CComp_StripForm(elem l);
include/bmcc_auto.h:int BMCC_CComp_CompileSwitch(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileStatement(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:char *BMCC_CComp_VarTypeString(BMCC_SVMCState *ctx, elem ty);
include/bmcc_auto.h:void BMCC_CComp_EmitVar(BMCC_SVMCState *ctx, elem n, elem ty, elem v);
include/bmcc_auto.h:void BMCC_CComp_EmitVar2(BMCC_SVMCState *ctx, elem n, elem ty, elem v);
include/bmcc_auto.h:void BMCC_CComp_CompileVarStatement(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:elem BMCC_CComp_CompileBlock(BMCC_SVMCState *ctx,elem name, elem args, elem body);
include/bmcc_auto.h:void BMCC_CComp_CompileStruct(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileUnion(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileEnum(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:elem BMCC_CComp_CompileSProto(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileStructs(BMCC_SVMCState *ctx);
include/bmcc_auto.h:elem BMCC_CComp_CompileProto(BMCC_SVMCState *ctx,elem name, elem args);
include/bmcc_auto.h:void BMCC_CComp_EmitVarValue(BMCC_SVMCState *ctx, elem v);
include/bmcc_auto.h:void BMCC_CComp_EmitVarValueR(BMCC_SVMCState *ctx, elem v);
include/bmcc_auto.h:void BMCC_CComp_EmitTopArray(BMCC_SVMCState *ctx, elem n, elem ty, elem v);
include/bmcc_auto.h:void BMCC_CComp_EmitTopVar(BMCC_SVMCState *ctx, elem n, elem ty, elem v);
include/bmcc_auto.h:void BMCC_CComp_CompileTopStatement(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:int BMCC_CComp_CompileModule(char *name, elem l, char *outfn);
include/bmcc_auto.h:char *BMCC_CComp_CIfy(char *s);
include/bmcc_auto.h:char *BMCC_CComp_LongStr(elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileAssign(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileFuncall(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileForm(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileExprT(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileExpr(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_CompileExprTail(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:void BMCC_CComp_EmitLabel(BMCC_SVMCState *ctx, char *name);
include/bmcc_auto.h:char *BMCC_CComp_GenSym();
include/bmcc_auto.h:char *BMCC_CComp_GenSym2();
include/bmcc_auto.h:void BMCC_CComp_CompileBreak(BMCC_SVMCState *ctx);
include/bmcc_auto.h:void BMCC_CComp_CompileContinue(BMCC_SVMCState *ctx);
include/bmcc_auto.h:void BMCC_CComp_CompileBreakFalse(BMCC_SVMCState *ctx);
include/bmcc_auto.h:void BMCC_CComp_CompileBreakTrue(BMCC_SVMCState *ctx);
include/bmcc_auto.h:void BMCC_CComp_CompileContinueFalse(BMCC_SVMCState *ctx);
include/bmcc_auto.h:void BMCC_CComp_CompileContinueTrue(BMCC_SVMCState *ctx);
include/bmcc_auto.h:void BMCC_CComp_CompileJmp(BMCC_SVMCState *ctx, char *s);
include/bmcc_auto.h:void BMCC_CComp_CompileJmpFalse(BMCC_SVMCState *ctx, char *s);
include/bmcc_auto.h:void BMCC_CComp_CompileJmpTrue(BMCC_SVMCState *ctx, char *s);
include/bmcc_auto.h:void BMCC_CComp_CompileJmpCond(BMCC_SVMCState *ctx, int i, char *s);
include/bmcc_auto.h:void BMCC_CComp_CompileJmpCond(BMCC_SVMCState *ctx, int i, char *s);
include/bmcc_auto.h:void BMCC_CComp_CompileJCO(BMCC_SVMCState *ctx, int op, elem ln, elem rn, char *s);
include/bmcc_auto.h:void BMCC_CComp_CompileJCT(BMCC_SVMCState *ctx, elem l, char *s);
include/bmcc_auto.h:void BMCC_CComp_CompileJCF(BMCC_SVMCState *ctx, elem l, char *s);
include/bmcc_auto.h:int BMCC_CComp_BoolExpr(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:int BMCC_CComp_IsExpr(elem l);
include/bmcc_auto.h:elem BMCC_CComp_ReduceForm(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:elem BMCC_CComp_ReduceExpr(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:elem BMCC_CComp_InferTypeBase(elem l);
include/bmcc_auto.h:int BMCC_CComp_InferIsIntP(elem t);
include/bmcc_auto.h:int BMCC_CComp_InferIsLongP(elem t);
include/bmcc_auto.h:int BMCC_CComp_InferIsFloatP(elem t);
include/bmcc_auto.h:int BMCC_CComp_InferIsDoubleP(elem t);
include/bmcc_auto.h:int BMCC_CComp_InferIsNumP(elem t);
include/bmcc_auto.h:elem BMCC_CComp_InferIsInt(elem t);
include/bmcc_auto.h:elem BMCC_CComp_InferIsLong(elem t);
include/bmcc_auto.h:elem BMCC_CComp_InferIsNum(elem t);
include/bmcc_auto.h:elem BMCC_CComp_InferForm(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:elem BMCC_CComp_InferExpr(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:elem BMCC_CComp_InferExprClean(BMCC_SVMCState *ctx, elem l, int *cp);
include/bmcc_auto.h:int BMCC_CComp_GuessCloseForm(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:int BMCC_CComp_GuessCloseExpr(BMCC_SVMCState *ctx, elem l);
include/bmcc_auto.h:int BMCC_CComp_GuessCloseBlock(BMCC_SVMCState *ctx, elem l);
include/bmcc_base.h:elem (*func)(char **s);
include/bmcc_base.h:u16 *(*func)(u16 *ip, BMCC_CompileContext *ctx, elem expr);
include/bmcc_core.h:#define ROOT2(p,q)		ROOT(p); ROOT(q)
include/bmcc_core.h:#define ROOT3(p,q,r)		ROOT2(p,q); ROOT(r)
include/bmcc_core.h:#define ROOT4(p,q,r,s)		ROOT3(p,q,r); ROOT(s)
include/bmcc_core.h:#define ROOT5(p,q,r,s,t)	ROOT4(p,q,r,s); ROOT(t)
include/bmcc_core.h:#define ROOT6(p,q,r,s,t,u)	ROOT5(p,q,r,s,t); ROOT(u)
include/bmcc_core.h:#define ROOT7(p,q,r,s,t,u,v)	ROOT6(p,q,r,s,t,u); ROOT(v)
include/bmcc_core.h:#define ROOT8(p,q,r,s,t,u,v,w)	ROOT7(p,q,r,s,t,u,v); ROOT(w)
include/bmcc_core.h:#define ARG2(p,q)		ARG(p); ARG(q)
include/bmcc_core.h:#define ARG3(p,q,r)		ARG2(p,q); ARG(r)
include/bmcc_core.h:#define ARG4(p,q,r,s)		ARG3(p,q,r); ARG(s)
include/bmcc_core.h:#define ARG5(p,q,r,s,t)		ARG4(p,q,r,s); ARG(t)
include/bmcc_core.h:#define ARG6(p,q,r,s,t,u)	ARG5(p,q,r,s,t); ARG(u)
include/bmcc_core.h:#define ARG7(p,q,r,s,t,u,v)	ARG6(p,q,r,s,t,u); ARG(v)
include/bmcc_core.h:#define ARG8(p,q,r,s,t,u,v,w)	ARG7(p,q,r,s,t,u,v); ARG(w)
include/bmcc_core.h:#define VAR1(p)			elem p;		BEGIN(); ROOT(p)
include/bmcc_core.h:#define VAR2(p,q)		elem p,q;	BEGIN(); ROOT2(p,q)
include/bmcc_core.h:#define VAR3(p,q,r)		elem p,q,r;	BEGIN(); ROOT3(p,q,r)
include/bmcc_core.h:#define VAR4(p,q,r,s)		elem p,q,r,s;	BEGIN(); ROOT4(p,q,r,s)
include/bmcc_core.h:#define VAR5(p,q,r,s,t)		elem p,q,r,s,t;	BEGIN(); ROOT5(p,q,r,s,t)
include/bmcc_core.h:#define RET(n)		END(); return(n);
include/bmcc_core.h:#define RETV()		END(); return;
include/bmcc_svm.h:int (*thunk)(BMCC_SVMState *ctx);
include/bmcc_svm.h:int (*thunk)(BMCC_SVMState *ctx);
include/bmcc_svm.h:int (*thunk)(BMCC_SVMState *ctx);
include/bmcc_svm.h:elem (*fcn)(BMCC_SVMState *ctx, elem args);
include/bmcc_svm.h:elem (*fcn)();
include/bgbasm_auto_asm.h:BASM_API char *BASM_ComposeLinkMetaName(char *name, char **args);
include/bgbasm_auto_asm.h:BASM_API char *BASM_ComposeLinkNotifyName(char *name, char **args);
include/bgbasm_auto_asm.h:BASM_API void BASM_RegisterSpecialOp(char *name,char *(*fcn)(BASM_Context *ctx, char *op, char **str));
include/bgbasm_auto_asm.h:BASM_API char *basm_strdup(char *str);
include/bgbasm_auto_asm.h:BASM_API char *basm_strdup(char *str);
include/bgbasm_auto_asm.h:BASM_API char *BASM_GetPtrName(void *ptr);
include/bgbasm_auto_asm.h:BASM_API byte *BDISASM_PrintOpcode(byte *ip, int *rfl);
include/bgbasm_auto_asm.h:BASM_API int BDISASM_PrintOpcodes(byte *ip, int fl, int sz);
include/bgbasm_auto_asm.h:BASM_API int BDISASM_HexDump(byte *ip, int sz);
include/bgbasm_auto_front.h:BASM_API char *BASM_CPUID_String();
include/bgbasm_auto_front.h:BASM_API u32 BASM_CPUID_Version();
include/bgbasm_auto_front.h:BASM_API u32 BASM_CPUID_Unit();
include/bgbasm_auto_front.h:BASM_API u32 BASM_CPUID_Ext();
include/bgbasm_auto_front.h:BASM_API u32 BASM_CPUID_Feature();
include/bgbasm_auto_front.h:BASM_API char *BASM_CPUID_FeatureStr();
include/bgbasm_auto_front.h:BASM_API void *BASM_GetEBP();
include/bgbasm_auto_front.h:BASM_API int BASM_GetReturnState(void **regs);
include/bgbasm_auto_front.h:BASM_API int BASM_StackTrace(void **ip, void **bp, int lim);
include/bgbasm_auto_front.h:BASM_API byte *BASM_Win64LocateEpilogue(byte *ip);
include/bgbasm_auto_front.h:BASM_API byte *BASM_Win64AdjustEpilogueRSP(byte *ip, byte *sp,BGBASM_RegsBuf *regs);
include/bgbasm_auto_front.h:BASM_API int BASM_StackTrace(void **ip, void **bp, int lim);
include/bgbasm_auto_front.h:BASM_API int BASM_StackTrace(void **ip, void **bp, int lim);
include/bgbasm_auto_front.h:BASM_API void basm_putc(int c);
include/bgbasm_auto_front.h:BASM_API void basm_puts(char *str);
include/bgbasm_auto_front.h:BASM_API void basm_vprint(char *str, va_list lst);
include/bgbasm_auto_front.h:BASM_API void basm_print(char *str, ...);
include/bgbasm_auto_front.h:BASM_API void BASM_RegisterPtr(char *lbl, void *ptr);
include/bgbasm_auto_front.h:BASM_API void *BASM_GetPtr(char *lbl);
include/bgbasm_auto_front.h:BASM_API char *BASM_GetPtrName(void *ptr);
include/bgbasm_auto_front.h:BASM_API char *BASM_GetLastNamePtr(void *ptr, void **rbp);
include/bgbasm_auto_front.h:BASM_API void *BASM_FetchSymPrefix(char *name);
include/bgbasm_auto_front.h:BASM_API char *BASM_FetchSymPrefixName(char *name);
include/bgbasm_auto_front.h:BASM_API void BASM_DumpModule(char *name);
include/bgbasm_auto_front.h:BASM_API void *BASM_GetFPtrDummy(char *lbl);
include/bgbasm_auto_front.h:BASM_API void BASM_BeginAssembly(char *name);
include/bgbasm_auto_front.h:BASM_API void *BASM_EndAssembly();
include/bgbasm_auto_front.h:BASM_API void *BASM_EndAssemblyQuiet();
include/bgbasm_auto_front.h:BASM_API void *BASM_EndAssemblyDebug();
include/bgbasm_auto_front.h:BASM_API void *BASM_EndAssemblyCache(char *name);
include/bgbasm_auto_front.h:BASM_API void BASM_EndAssemblyFile(char *name);
include/bgbasm_auto_front.h:BASM_API byte *BASM_EndAssemblyObjBuf(int *rsz);
include/bgbasm_auto_front.h:BASM_API byte *BASM_EndAssemblyCacheObjBuf(int *rsz);
include/bgbasm_auto_front.h:BASM_API BLNK_Thunk *BASM_EndAssemblyThunk(BLNK_Scope *scope);
include/bgbasm_auto_front.h:BASM_API byte *BASM_EndAssemblyThunkInline(BLNK_Scope *scope);
include/bgbasm_auto_front.h:BASM_API void BASM_EndAssemblyQueue();
include/bgbasm_auto_front.h:BASM_API void *BASM_EndAssemblyFast();
include/bgbasm_auto_front.h:BASM_API byte *BASM_EndAssemblyObjBufFast(int *rsz);
include/bgbasm_auto_front.h:BASM_API byte *BASM_EndAssemblyCacheObjBufFast(int *rsz);
include/bgbasm_auto_front.h:BASM_API void BASM_EndAssemblyQueueFast();
include/bgbasm_auto_front.h:BASM_API void BASM_EndAssemblyVirtualHeader();
include/bgbasm_auto_front.h:BASM_API void BASM_FreeAssembly(void *ip);
include/bgbasm_auto_front.h:BASM_API void BASM_FreeObjBuf(void *ip);
include/bgbasm_auto_front.h:BASM_API char *BASM_GenSym();
include/bgbasm_auto_front.h:BASM_API char *BASM_GenSym2();
include/bgbasm_auto_front.h:BASM_API int BASM_LoadObjectBuffer(char *name, byte *buf, int sz);
include/bgbasm_auto_front.h:BASM_API int BASM_LoadFile(char *name);
include/bgbasm_auto_front.h:BASM_API int BASM_AssembleFile(char *iname, char *oname);
include/bgbasm_auto_front.h:BASM_API int BASM_ProcessEXE(char *name);
include/bgbasm_auto_front.h:BASM_API void BASM_ThreadLocalInit();
include/bgbasm_auto_front.h:BASM_API void BASM_Init();
include/bgbasm_auto_front.h:BASM_API void BASM_CallSig(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto_front.h:BASM_API void BASM_CallSigStd(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto_front.h:BASM_API void BASM_CallSig(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto_front.h:BASM_API void BASM_CallSigStd(void *fcn, char *sig, void *buf, void *ret);
include/bgbasm_auto_front.h:BASM_API void BASM_CreateStub(void *buf, void *fcn, void *data, char *sig);
include/bgbasm_auto_front.h:BASM_API void *BASM_CreateStubGC(void *fcn, void *data, char *sig);
include/bgbasm_auto_front.h:BASM_API void *BASM_MakeBufferCallStub(void *fcn, char *sig);
include/bgbasm_auto_front.h:BASM_API void *BASM_MakeBufferCallStub(void *fcn, char *sig);
include/bgbasm_auto_front.h:BASM_API int BASM_UnmangleXCall(char *str, char *buf);
include/bgbasm_auto_front.h:BASM_API char **BASM_UnmangleSplit(char *str);
include/bgbasm_auto_front.h:BASM_API int BASM_MangleXCall(char *str, char *buf);
include/bgbasm_auto_front.h:BASM_API int BASM_RegisterLinkMeta(char *name, basm_meta_ft fcn);
include/bgbasm_auto_front.h:BASM_API int BASM_RegisterLinkMetaTrigger(char *name, basm_mtrg_ft fcn);
include/bgbasm_auto_front.h:BASM_API char *BASM_ComposeLinkMetaName(char *name, char **args);
include/bgbasm_auto_front.h:BASM_API char *BASM_ComposeLinkNotifyName(char *name, char **args);
include/bgbasm_auto_front.h:BASM_API int BASM_SaveRegs(BGBASM_RegsBuf *buf);
include/bgbasm_auto_front.h:BASM_API void *BASM_SetJmp(BGBASM_JmpBuf *buf);
include/bgbasm_auto_front.h:BASM_API void BASM_LongJmp(BGBASM_JmpBuf *buf, void *val);
include/bgbasm_auto_front.h:BASM_API void *BASM_StartUnwind(BGBASM_JmpBuf *buf);
include/bgbasm_auto_front.h:BASM_API void BASM_EndUnwind(BGBASM_JmpBuf *buf);
include/bgbasm_auto_front.h:BASM_API void *BASM_BeginUnwind(BGBASM_JmpBuf *buf);
include/bgbasm_auto_front.h:BASM_API void BASM_DoUnwind(void *val);
include/bgbasm_auto_link.h:BASM_API BLNK_GCFuncs_t *BLNK_GetGCFuncs();
include/bgbasm_auto_link.h:BASM_API void BLNK_SetScanRange(int (*fcn)(void **p, int cnt));
include/bgbasm_auto_link.h:BASM_API int BLNK_RegisterLookup(blnk_lookup_ft fcn);
include/bgbasm_auto_link.h:BASM_API int BLNK_RegisterNotify(blnk_notify_ft fcn);
include/bgbasm_auto_link.h:BASM_API void BLNK_MarkData();
include/bgbasm_auto_link.h:BASM_API int BLNK_CheckPointerImageP(void *p);
include/bgbasm_auto_link.h:BASM_API void BLNK_AssignSym(char *name, void *ptr);
include/bgbasm_auto_link.h:BASM_API void BLNK_AddProxyPtr(char *name, void *ptr);
include/bgbasm_auto_link.h:BASM_API void BLNK_AddProxy(char *name);
include/bgbasm_auto_link.h:BASM_API void BLNK_AddProxyImport(char *name);
include/bgbasm_auto_link.h:BASM_API int BLNK_LoadLibrary(char *name);
include/bgbasm_auto_link.h:BASM_API BLNK_Scope *BLNK_NewScope(BLNK_Scope *super);
include/bgbasm_auto_link.h:BASM_API void BLNK_FreeScope(BLNK_Scope *scope);
include/bgbasm_auto_link.h:BASM_API int BLNK_IndexScopeSym(BLNK_Scope *scope, char *name);
include/bgbasm_auto_link.h:BASM_API void BLNK_BindScopeSym(BLNK_Scope *scope, char *name, void *ptr);
include/bgbasm_auto_link.h:BASM_API void BLNK_BindScopeSymSig(BLNK_Scope *scope,char *name, char *sig, void *ptr);
include/bgbasm_auto_link.h:BASM_API void BLNK_AssignScopeSym(BLNK_Scope *scope, char *name, void *ptr);
include/bgbasm_auto_link.h:BASM_API void *BLNK_FetchScopeSym(BLNK_Scope *scope, char *name);
include/bgbasm_auto_link.h:BASM_API void *BLNK_FetchScopeSym2(BLNK_Scope *scope, char *name);
include/bgbasm_auto_link.h:BASM_API char *BLNK_FetchScopeSig(BLNK_Scope *scope, char *name);
include/bgbasm_auto_link.h:BASM_API BLNK_Thunk *BLNK_LinkModuleThunk(BLNK_Object *ctx, BLNK_Scope *scope);
include/bgbasm_auto_link.h:BASM_API byte *BLNK_LinkThunkInline(BLNK_Object *ctx, BLNK_Scope *scope);
include/bgbasm_auto_link.h:BASM_API BLNK_Thunk *BLNK_LinkModuleThunkObj(BLNK_Scope *scope, void *buf, int sz);
include/bgbasm_auto_link.h:BASM_API byte *BLNK_LinkModuleThunkInlineObj(BLNK_Scope *scope, void *buf, int sz);
include/bgbasm_auto_link.h:BASM_API int BLNK_GetModuleListOS(char **buf, int max);
include/bgbasm_auto_link.h:BASM_API char **BLNK_GetEnvironOS();
include/bgbasm_auto_link.h:BASM_API int BLNK_GetModuleListOS(char **buf, int max);
include/bgbasm_auto_link.h:BASM_API char **BLNK_GetEnvironOS();
include/bgbasm_auto_link.h:BASM_API BLNK_IOFuncs_t *BLNK_GetIOFuncs();
include/bgbasm_org.h:int (*scanrange_f)(void **p, int cnt);
include/bgbasm_org.h:void *(*gcalloc_f)(int sz);
include/bgbasm_org.h:void *(*gcexec_f)(int sz);
include/bgbasm_org.h:void *(*gcatomic_f)(int sz);
include/bgbasm_org.h:void *(*gctalloc_f)(char *ty, int sz);
include/bgbasm_org.h:void *(*gctexec_f)(char *ty, int sz);
include/bgbasm_org.h:void *(*gctatomic_f)(char *ty, int sz);
include/bgbasm_org.h:void (*gcfree_f)(void *p);
include/bgbasm_org.h:void *(*gcrealloc_f)(void *p, int sz);
include/bgbasm_org.h:char *(*gcgettype_f)(void *p);
include/bgbasm_org.h:int (*gcalloctls_f)(char *name, int sz);
include/bgbasm_org.h:int (*gcgettlstls_f)();
include/bgbasm_org.h:typedef void *(*basm_meta_ft)(char *sym, char *name, char **args);
include/bgbasm_org.h:typedef void (*basm_mtrg_ft)(char *sym, char *name, char **args, void *ptr);
include/bgblink.h:int (*scanrange_f)(void **p, int cnt);
include/bgblink.h:void *(*gcalloc_f)(int sz);
include/bgblink.h:void *(*gcexec_f)(int sz);
include/bgblink.h:void *(*gcatomic_f)(int sz);
include/bgblink.h:void *(*gctalloc_f)(char *ty, int sz);
include/bgblink.h:void *(*gctexec_f)(char *ty, int sz);
include/bgblink.h:void *(*gctatomic_f)(char *ty, int sz);
include/bgblink.h:void (*gcfree_f)(void *p);
include/bgblink.h:void *(*gcrealloc_f)(void *p, int sz);
include/bgblink.h:char *(*gcgettype_f)(void *p);
include/bgblink.h:int (*gcalloctls_f)(char *name, int sz);
include/bgblink.h:int (*gcgettlstls_f)();
include/bgblink.h:void *(*fopen_fp)(char *name, char *mode);
include/bgblink.h:void (*fclose_fp)(void *fd);
include/bgblink.h:int (*fread_fp)(void *buf, int m, int n, void *fd);
include/bgblink.h:int (*fwrite_fp)(void *buf, int m, int n, void *fd);
include/bgblink.h:int (*feof_fp)(void *fd);
include/bgblink.h:s64 (*ftell_fp)(void *fd);
include/bgblink.h:int (*fseek_fp)(void *fd, s64 pos, int rel);
include/bgblink.h:typedef void *(*blnk_lookup_ft)(char *sym);
include/bgblink.h:typedef void (*blnk_notify_ft)(char *sym, void *ptr);
include/bgbjvm_auto.h:BJVM_API int BJVM_InterpInit();
include/bgbjvm_auto.h:BJVM_API BJVM_Context *BJVM_CreateContext(BJVM_Method *mth);
include/bgbjvm_auto.h:BJVM_API BJVM_Frame *BJVM_CreateFrame(BJVM_Method *mth);
include/bgbjvm_auto.h:BJVM_API int BJVM_ReleaseFrame(BJVM_Frame *frm);
include/bgbjvm_auto.h:BJVM_API char *BJVM_ConvertJSigSig(char *sig);
include/bgbjvm_auto.h:BJVM_API int BJVM_GetSigArgSize(char *sig);
include/bgbjvm_auto.h:BJVM_API int BJVM_StepFrame(BJVM_Context *ctx, BJVM_Frame *frame);
include/bgbjvm_auto.h:BJVM_API BJVM_Frame *BJVM_InvokeFrame(BJVM_Frame *cur);
include/bgbjvm_auto.h:BJVM_API int BJVM_DumpOpcode(BJVM_Context *ctx);
include/bgbjvm_auto.h:BJVM_API int BJVM_DumpOpState(BJVM_Context *ctx);
include/bgbjvm_auto.h:BJVM_API int BJVM_CheckFrameEH(BJVM_Context *ctx, BJVM_Frame *cur,dycObject obj);
include/bgbjvm_auto.h:BJVM_API int BJVM_Step(BJVM_Context *ctx);
include/bgbjvm_auto.h:BJVM_API int BJVM_Run(BJVM_Context *ctx);
include/bgbjvm_auto.h:BJVM_API void *BJVM_ApplyMethod(BJVM_Method *mth, dyt obj, void **args);
include/bgbjvm_auto.h:BJVM_API void *BJVM_InvokeStaticMethodU(char *clsname, char *name, char *sig, void **args);
include/bgbjvm_auto.h:BJVM_API int BJVM_InvokeStaticMethodUi(char *clsname, char *mth, char *sig, void **args);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_LookupClass(char *name);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_AllocClass(char *name);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_CreateClass(char *name);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_GetClass(char *name);
include/bgbjvm_auto.h:BJVM_API BJVM_Method *BJVM_LookupClassMethod(BJVM_Class *info,char *name, char *sig);
include/bgbjvm_auto.h:BJVM_API BJVM_Method *BJVM_AllocMethod(BJVM_Class *info,char *name, char *sig);
include/bgbjvm_auto.h:BJVM_API BJVM_Method *BJVM_GetClassMethod(BJVM_Class *info,char *name, char *sig);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexUtf8(BJVM_Class *info, char *str);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexInt(BJVM_Class *info, int v);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexFloat(BJVM_Class *info, float v);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexLong(BJVM_Class *info, s64 v);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexDouble(BJVM_Class *info, double v);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexClass(BJVM_Class *info, char *str);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexString(BJVM_Class *info, char *str);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexNameType(BJVM_Class *info, char *name, char *type);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexFieldRef(BJVM_Class *info,char *classname, char *name, char *type);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexMethodRef(BJVM_Class *info,char *classname, char *name, char *type);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexInterfaceMethodRef(BJVM_Class *info,char *classname, char *name, char *type);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabLookupFieldRef(BJVM_Class *info,char *classname, char *name);
include/bgbjvm_auto.h:BJVM_API int BJVM_AddClassInterface(BJVM_Class *info, char *classname);
include/bgbjvm_auto.h:BJVM_API int BJVM_AddClassField(BJVM_Class *info,char *name, char *sig, int flags, int value);
include/bgbjvm_auto.h:BJVM_API int BJVM_AddClassMethod(BJVM_Class *info, BJVM_Method *mth);
include/bgbjvm_auto.h:BJVM_API int BJVM_CtabIndexDynamic(BJVM_Class *info, dyt val);
include/bgbjvm_auto.h:BJVM_API BJVM_FieldInfo *BJVM_LookupClassField(BJVM_Class *info, char *name);
include/bgbjvm_auto.h:BJVM_API int BJVM_WStringHash(u16 *str);
include/bgbjvm_auto.h:BJVM_API int BJVM_WStringHash2(u16 *str);
include/bgbjvm_auto.h:BJVM_API int BJVM_WStringCompare(u16 *stra, u16 *strb);
include/bgbjvm_auto.h:BJVM_API int BJVM_GetStringObjLen(dycObject obj);
include/bgbjvm_auto.h:BJVM_API u16 *BJVM_GetStringObjChars(dycObject obj);
include/bgbjvm_auto.h:BJVM_API u16 *BJVM_GetStringObjCharsAlloc(dycObject obj);
include/bgbjvm_auto.h:BJVM_API char *BJVM_GetStringObjCharsUtf8Alloc(dycObject obj);
include/bgbjvm_auto.h:BJVM_API int BJVM_CompareStringObjChars(dycObject obja, u16 *strb);
include/bgbjvm_auto.h:BJVM_API int BJVM_CompareStringObj(dycObject obja, dycObject objb);
include/bgbjvm_auto.h:BJVM_API int BJVM_CompareStringObjChars2(dycObject obja, char *str);
include/bgbjvm_auto.h:BJVM_API dycObject BJVM_NewStringWSz(u16 *str, int sz);
include/bgbjvm_auto.h:BJVM_API dycObject BJVM_NewStringW(u16 *str);
include/bgbjvm_auto.h:BJVM_API dycObject BJVM_NewString(char *str);
include/bgbjvm_auto.h:BJVM_API dycObject BJVM_LiteralStringW(u16 *str);
include/bgbjvm_auto.h:BJVM_API dycObject BJVM_LiteralString(char *str);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_ASM_AssembleBuffer(char *buf);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_ASM_AssembleBufferLink(char *buf);
include/bgbjvm_auto.h:BJVM_API int BJVM_ASM_AssembleBufferClassObj(char *ibuf,byte *obuf, int maxsz);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_Load_DecodeClass(byte *buf, int sz);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_Load_LoadClass(char *name);
include/bgbjvm_auto.h:BJVM_API void BJVM_AddClassPath(char *name);
include/bgbjvm_auto.h:BJVM_API byte *BJVM_ReadInFile(char *name, int *rsz);
include/bgbjvm_auto.h:BJVM_API int BJVM_LinkClass(BJVM_Class *info);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_GetLoadedClass(char *name);
include/bgbjvm_auto.h:BJVM_API BJVM_Class *BJVM_LoadClassBuf(char *name, byte *buf, int sz);
include/bgbjvm_auto.h:BJVM_API dycClass BJVM_DefineClass(char *name,dycObject loader, byte *buf, int len);
include/bgbjvm_auto.h:BJVM_API char *bjvm_strdup(char *name);
include/bgbjvm_auto.h:BJVM_API int BJVM_Init();
include/bgbjvm_auto.h:BJVM_API char *BJVM_JITC_CompileClass(BJVM_Class *info);
include/jni.h: *  (the "License"); you may not use this file except in compliance with
include/jni.h:    jint (JNICALL *GetVersion)(JNIEnv *env);
include/jni.h:       jsize len);
include/jni.h:      (JNIEnv *env, const char *name);
include/jni.h:      (JNIEnv *env, jobject method);
include/jni.h:      (JNIEnv *env, jobject field);
include/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, jboolean isStatic);
include/jni.h:      (JNIEnv *env, jclass sub);
include/jni.h:      (JNIEnv *env, jclass sub, jclass sup);
include/jni.h:      (JNIEnv *env, jclass cls, jfieldID fieldID, jboolean isStatic);
include/jni.h:      (JNIEnv *env, jthrowable obj);
include/jni.h:      (JNIEnv *env, jclass clazz, const char *msg);
include/jni.h:      (JNIEnv *env);
include/jni.h:      (JNIEnv *env);
include/jni.h:      (JNIEnv *env);
include/jni.h:      (JNIEnv *env, const char *msg);
include/jni.h:      (JNIEnv *env, jint cap);
include/jni.h:      (JNIEnv *env, jobject res);
include/jni.h:      (JNIEnv *env, jobject lobj);
include/jni.h:      (JNIEnv *env, jobject gref);
include/jni.h:      (JNIEnv *env, jobject obj);
include/jni.h:      (JNIEnv *env, jobject obj1, jobject obj2);
include/jni.h:      (JNIEnv *env, jobject ref);
include/jni.h:      (JNIEnv *env, jint);
include/jni.h:      (JNIEnv *env, jclass clazz);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz);
include/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue * args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue * args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue *args);
include/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni.h:       va_list args);
include/jni.h:       jvalue * args);
include/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jobject val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jboolean val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jbyte val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jchar val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jshort val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jint val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jlong val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jfloat val);
include/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jdouble val);
include/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, ...);
include/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, va_list args);
include/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, jvalue * args);
include/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jobject value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jboolean value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jbyte value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jchar value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jshort value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jint value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jlong value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jfloat value);
include/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jdouble value);
include/jni.h:      (JNIEnv *env, const jchar *unicode, jsize len);
include/jni.h:      (JNIEnv *env, jstring str);
include/jni.h:      (JNIEnv *env, jstring str, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jstring str, const jchar *chars);
include/jni.h:      (JNIEnv *env, const char *utf);
include/jni.h:      (JNIEnv *env, jstring str);
include/jni.h:      (JNIEnv *env, jstring str, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jstring str, const char* chars);
include/jni.h:      (JNIEnv *env, jarray array);
include/jni.h:      (JNIEnv *env, jsize len, jclass clazz, jobject init);
include/jni.h:      (JNIEnv *env, jobjectArray array, jsize index);
include/jni.h:      (JNIEnv *env, jobjectArray array, jsize index, jobject val);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jsize len);
include/jni.h:      (JNIEnv *env, jbooleanArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jbyteArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jcharArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jshortArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jintArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jlongArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jfloatArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jdoubleArray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jbooleanArray array, jboolean *elems, jint mode);
include/jni.h:      (JNIEnv *env, jbyteArray array, jbyte *elems, jint mode);
include/jni.h:      (JNIEnv *env, jcharArray array, jchar *elems, jint mode);
include/jni.h:      (JNIEnv *env, jshortArray array, jshort *elems, jint mode);
include/jni.h:      (JNIEnv *env, jintArray array, jint *elems, jint mode);
include/jni.h:      (JNIEnv *env, jlongArray array, jlong *elems, jint mode);
include/jni.h:      (JNIEnv *env, jfloatArray array, jfloat *elems, jint mode);
include/jni.h:      (JNIEnv *env, jdoubleArray array, jdouble *elems, jint mode);
include/jni.h:      (JNIEnv *env, jbooleanArray array, jsize start, jsize l, jboolean *buf);
include/jni.h:      (JNIEnv *env, jbyteArray array, jsize start, jsize len, jbyte *buf);
include/jni.h:      (JNIEnv *env, jcharArray array, jsize start, jsize len, jchar *buf);
include/jni.h:      (JNIEnv *env, jshortArray array, jsize start, jsize len, jshort *buf);
include/jni.h:      (JNIEnv *env, jintArray array, jsize start, jsize len, jint *buf);
include/jni.h:      (JNIEnv *env, jlongArray array, jsize start, jsize len, jlong *buf);
include/jni.h:      (JNIEnv *env, jfloatArray array, jsize start, jsize len, jfloat *buf);
include/jni.h:      (JNIEnv *env, jdoubleArray array, jsize start, jsize len, jdouble *buf);
include/jni.h:      (JNIEnv *env, jbooleanArray array, jsize start, jsize l, jboolean *buf);
include/jni.h:      (JNIEnv *env, jbyteArray array, jsize start, jsize len, jbyte *buf);
include/jni.h:      (JNIEnv *env, jcharArray array, jsize start, jsize len, jchar *buf);
include/jni.h:      (JNIEnv *env, jshortArray array, jsize start, jsize len, jshort *buf);
include/jni.h:      (JNIEnv *env, jintArray array, jsize start, jsize len, jint *buf);
include/jni.h:      (JNIEnv *env, jlongArray array, jsize start, jsize len, jlong *buf);
include/jni.h:      (JNIEnv *env, jfloatArray array, jsize start, jsize len, jfloat *buf);
include/jni.h:      (JNIEnv *env, jdoubleArray array, jsize start, jsize len, jdouble *buf);
include/jni.h:       jint nMethods);
include/jni.h:      (JNIEnv *env, jclass clazz);
include/jni.h:      (JNIEnv *env, jobject obj);
include/jni.h:      (JNIEnv *env, jobject obj);
include/jni.h:      (JNIEnv *env, JavaVM **vm);
include/jni.h:      (JNIEnv *env, jstring, jsize, jsize, jchar*);
include/jni.h:      (JNIEnv *env, jstring, jsize, jsize, char*);
include/jni.h:      (JNIEnv *env, jarray array, jboolean *isCopy);
include/jni.h:      (JNIEnv *env, jarray array, void* carray, jint mode);
include/jni.h:      (JNIEnv *env, jstring s, jboolean* isCopy);
include/jni.h:      (JNIEnv *env, jstring s, const jchar* cstr);
include/jni.h:      (JNIEnv *env, jobject obj);
include/jni.h:      (JNIEnv *env, jweak obj);
include/jni.h:      (JNIEnv *env);
include/jni.h:      (JNIEnv* env, void* address, jlong capacity);
include/jni.h:      (JNIEnv* env, jobject buf);
include/jni.h:      (JNIEnv* env, jobject buf);
include/jni.h:        return functions->GetVersion(this);
include/jni.h:        return functions->DefineClass(this, name, loader, buf, len);
include/jni.h:        return functions->FindClass(this, name);
include/jni.h:        return functions->FromReflectedMethod(this, method);
include/jni.h:        return functions->FromReflectedField(this, field);
include/jni.h:        return functions->ToReflectedMethod(this, cls, methodID, isStatic);
include/jni.h:        return functions->GetSuperclass(this, sub);
include/jni.h:        return functions->IsAssignableFrom(this, sub, sup);
include/jni.h:        return functions->ToReflectedField(this, cls, fieldID, isStatic);
include/jni.h:        return functions->Throw(this, obj);
include/jni.h:        return functions->ThrowNew(this, clazz, msg);
include/jni.h:        return functions->ExceptionOccurred(this);
include/jni.h:        functions->ExceptionDescribe(this);
include/jni.h:        functions->ExceptionClear(this);
include/jni.h:        functions->FatalError(this, msg);
include/jni.h:        return functions->PushLocalFrame(this, cap);
include/jni.h:        return functions->PopLocalFrame(this, res);
include/jni.h:        return functions->NewGlobalRef(this,lobj);
include/jni.h:        functions->DeleteGlobalRef(this,gref);
include/jni.h:        functions->DeleteLocalRef(this, obj);
include/jni.h:        return functions->IsSameObject(this,obj1,obj2);
include/jni.h:        return functions->NewLocalRef(this, ref);
include/jni.h:        return functions->EnsureLocalCapacity(this,cap);
include/jni.h:        return functions->AllocObject(this,clazz);
include/jni.h:    va_start(args, methodID);
include/jni.h:        result = functions->NewObjectV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->NewObjectV(this,clazz,methodID,args);
include/jni.h:        return functions->NewObjectA(this,clazz,methodID,args);
include/jni.h:        return functions->GetObjectClass(this,obj);
include/jni.h:        return functions->IsInstanceOf(this,obj,clazz);
include/jni.h:        return functions->GetMethodID(this,clazz,name,sig);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallObjectMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallObjectMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallObjectMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallBooleanMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallBooleanMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallBooleanMethodA(this,obj,methodID, args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallByteMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallByteMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallByteMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallCharMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallCharMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallCharMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallShortMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallShortMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallShortMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallIntMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallIntMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallIntMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallLongMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallLongMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallLongMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallFloatMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallFloatMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallFloatMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallDoubleMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallDoubleMethodV(this,obj,methodID,args);
include/jni.h:        return functions->CallDoubleMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    functions->CallVoidMethodV(this,obj,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        functions->CallVoidMethodV(this,obj,methodID,args);
include/jni.h:        functions->CallVoidMethodA(this,obj,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                            methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                              methodID,args);
include/jni.h:                              methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                             methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                               methodID,args);
include/jni.h:                               methodID, args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                              methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                            methodID,args);
include/jni.h:                            methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                              methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                            methodID,args);
include/jni.h:                            methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                               methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                             methodID,args);
include/jni.h:                             methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                             methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                           methodID,args);
include/jni.h:                           methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                              methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                            methodID,args);
include/jni.h:                            methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                               methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                             methodID,args);
include/jni.h:                             methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:                            methodID,args);
include/jni.h:    va_end(args);
include/jni.h:                              methodID,args);
include/jni.h:                              methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    functions->CallNonvirtualVoidMethodV(this,obj,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        functions->CallNonvirtualVoidMethodV(this,obj,clazz,methodID,args);
include/jni.h:        functions->CallNonvirtualVoidMethodA(this,obj,clazz,methodID,args);
include/jni.h:        return functions->GetFieldID(this,clazz,name,sig);
include/jni.h:        return functions->GetObjectField(this,obj,fieldID);
include/jni.h:        return functions->GetBooleanField(this,obj,fieldID);
include/jni.h:        return functions->GetByteField(this,obj,fieldID);
include/jni.h:        return functions->GetCharField(this,obj,fieldID);
include/jni.h:        return functions->GetShortField(this,obj,fieldID);
include/jni.h:        return functions->GetIntField(this,obj,fieldID);
include/jni.h:        return functions->GetLongField(this,obj,fieldID);
include/jni.h:        return functions->GetFloatField(this,obj,fieldID);
include/jni.h:        return functions->GetDoubleField(this,obj,fieldID);
include/jni.h:        functions->SetObjectField(this,obj,fieldID,val);
include/jni.h:        functions->SetBooleanField(this,obj,fieldID,val);
include/jni.h:        functions->SetByteField(this,obj,fieldID,val);
include/jni.h:        functions->SetCharField(this,obj,fieldID,val);
include/jni.h:        functions->SetShortField(this,obj,fieldID,val);
include/jni.h:        functions->SetIntField(this,obj,fieldID,val);
include/jni.h:        functions->SetLongField(this,obj,fieldID,val);
include/jni.h:        functions->SetFloatField(this,obj,fieldID,val);
include/jni.h:        functions->SetDoubleField(this,obj,fieldID,val);
include/jni.h:        return functions->GetStaticMethodID(this,clazz,name,sig);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticObjectMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticObjectMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticObjectMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticBooleanMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticBooleanMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticBooleanMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticByteMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticByteMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticByteMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticCharMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticCharMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticCharMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticShortMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticShortMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticShortMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticIntMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticIntMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticIntMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticLongMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticLongMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticLongMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticFloatMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticFloatMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticFloatMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    result = functions->CallStaticDoubleMethodV(this,clazz,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        return functions->CallStaticDoubleMethodV(this,clazz,methodID,args);
include/jni.h:        return functions->CallStaticDoubleMethodA(this,clazz,methodID,args);
include/jni.h:    va_start(args,methodID);
include/jni.h:    functions->CallStaticVoidMethodV(this,cls,methodID,args);
include/jni.h:    va_end(args);
include/jni.h:        functions->CallStaticVoidMethodV(this,cls,methodID,args);
include/jni.h:        functions->CallStaticVoidMethodA(this,cls,methodID,args);
include/jni.h:        return functions->GetStaticFieldID(this,clazz,name,sig);
include/jni.h:        return functions->GetStaticObjectField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticBooleanField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticByteField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticCharField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticShortField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticIntField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticLongField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticFloatField(this,clazz,fieldID);
include/jni.h:        return functions->GetStaticDoubleField(this,clazz,fieldID);
include/jni.h:      functions->SetStaticObjectField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticBooleanField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticByteField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticCharField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticShortField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticIntField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticLongField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticFloatField(this,clazz,fieldID,value);
include/jni.h:      functions->SetStaticDoubleField(this,clazz,fieldID,value);
include/jni.h:        return functions->NewString(this,unicode,len);
include/jni.h:        return functions->GetStringLength(this,str);
include/jni.h:        return functions->GetStringChars(this,str,isCopy);
include/jni.h:        functions->ReleaseStringChars(this,str,chars);
include/jni.h:        return functions->NewStringUTF(this,utf);
include/jni.h:        return functions->GetStringUTFLength(this,str);
include/jni.h:        return functions->GetStringUTFChars(this,str,isCopy);
include/jni.h:        functions->ReleaseStringUTFChars(this,str,chars);
include/jni.h:        return functions->GetArrayLength(this,array);
include/jni.h:        return functions->NewObjectArray(this,len,clazz,init);
include/jni.h:        return functions->GetObjectArrayElement(this,array,index);
include/jni.h:        functions->SetObjectArrayElement(this,array,index,val);
include/jni.h:        return functions->NewBooleanArray(this,len);
include/jni.h:        return functions->NewByteArray(this,len);
include/jni.h:        return functions->NewCharArray(this,len);
include/jni.h:        return functions->NewShortArray(this,len);
include/jni.h:        return functions->NewIntArray(this,len);
include/jni.h:        return functions->NewLongArray(this,len);
include/jni.h:        return functions->NewFloatArray(this,len);
include/jni.h:        return functions->NewDoubleArray(this,len);
include/jni.h:        return functions->GetBooleanArrayElements(this,array,isCopy);
include/jni.h:        return functions->GetByteArrayElements(this,array,isCopy);
include/jni.h:        return functions->GetCharArrayElements(this,array,isCopy);
include/jni.h:        return functions->GetShortArrayElements(this,array,isCopy);
include/jni.h:        return functions->GetIntArrayElements(this,array,isCopy);
include/jni.h:        return functions->GetLongArrayElements(this,array,isCopy);
include/jni.h:        return functions->GetFloatArrayElements(this,array,isCopy);
include/jni.h:        return functions->GetDoubleArrayElements(this,array,isCopy);
include/jni.h:        functions->ReleaseBooleanArrayElements(this,array,elems,mode);
include/jni.h:        functions->ReleaseByteArrayElements(this,array,elems,mode);
include/jni.h:        functions->ReleaseCharArrayElements(this,array,elems,mode);
include/jni.h:        functions->ReleaseShortArrayElements(this,array,elems,mode);
include/jni.h:        functions->ReleaseIntArrayElements(this,array,elems,mode);
include/jni.h:        functions->ReleaseLongArrayElements(this,array,elems,mode);
include/jni.h:        functions->ReleaseFloatArrayElements(this,array,elems,mode);
include/jni.h:        functions->ReleaseDoubleArrayElements(this,array,elems,mode);
include/jni.h:        functions->GetBooleanArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->GetByteArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->GetCharArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->GetShortArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->GetIntArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->GetLongArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->GetFloatArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->GetDoubleArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetBooleanArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetByteArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetCharArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetShortArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetIntArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetLongArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetFloatArrayRegion(this,array,start,len,buf);
include/jni.h:        functions->SetDoubleArrayRegion(this,array,start,len,buf);
include/jni.h:        return functions->RegisterNatives(this,clazz,methods,nMethods);
include/jni.h:        return functions->UnregisterNatives(this,clazz);
include/jni.h:        return functions->MonitorEnter(this,obj);
include/jni.h:        return functions->MonitorExit(this,obj);
include/jni.h:        return functions->GetJavaVM(this,vm);
include/jni.h:        functions->GetStringRegion(this, s, off, len, d);
include/jni.h:        functions->GetStringUTFRegion(this, s, off, len, d);
include/jni.h:        return functions->GetPrimitiveArrayCritical(this, array, isCopy);
include/jni.h:        functions->ReleasePrimitiveArrayCritical(this, array, carray, mode);
include/jni.h:        return functions->GetStringCritical(this, s, isCopy);
include/jni.h:        functions->ReleaseStringCritical(this, s, cstr);
include/jni.h:        return functions->NewWeakGlobalRef(this, obj);
include/jni.h:        functions->DeleteWeakGlobalRef(this, obj);
include/jni.h:        return functions->ExceptionCheck(this);
include/jni.h:        return functions->NewDirectByteBuffer(this, address, capacity);
include/jni.h:        return functions->GetDirectBufferAddress(this, buf);
include/jni.h:        return functions->GetDirectBufferCapacity(this, buf);
include/jni.h:    jint (JNICALL *DestroyJavaVM)(JavaVM*);
include/jni.h:    jint (JNICALL *AttachCurrentThread)(JavaVM*, void** penv, void* args);
include/jni.h:    jint (JNICALL *DetachCurrentThread)(JavaVM*);
include/jni.h:    jint (JNICALL *GetEnv)(JavaVM*, void** penv, jint ver);
include/jni.h:    jint (JNICALL *AttachCurrentThreadAsDaemon)(JavaVM*, void** penv, void* args);
include/jni.h:        return functions->DestroyJavaVM(this);
include/jni.h:        return functions->AttachCurrentThread(this, penv, args);
include/jni.h:        return functions->DetachCurrentThread(this);
include/jni.h:        return functions->GetEnv(this, penv, ver);
include/jni.h:        return functions->AttachCurrentThreadAsDaemon(this, penv, args);
include/jni.h:_JNI_EXPORT_ jint JNICALL JNI_GetDefaultJavaVMInitArgs(void * vm_args);
include/jni.h:                                                jsize * nVMs);
include/jni.h:                                           void * vm_args);
include/jni_types.h: *  (the "License"); you may not use this file except in compliance with
include/jniwrap.h:	{ return JNIENV->GetVersion(env); }
include/jniwrap.h:	{ return JNIENV->DefineClass(env, name, loader, buf, len); }
include/jniwrap.h:	{ return JNIENV->FindClass(env, name); }
include/jniwrap.h:	{ return JNIENV->FromReflectedMethod(env, mth); }
include/jniwrap.h:	{ return JNIENV->FromReflectedField(env, fld); }
include/jniwrap.h:	{ return JNIENV->ToReflectedMethod(env, cls, mth, staticP); }
include/jniwrap.h:	{ return JNIENV->GetSuperclass(env, sub); }
include/jniwrap.h:	{ return JNIENV->IsAssignableFrom(env, sub, sup); }
include/jniwrap.h:	{ return JNIENV->ToReflectedField(env, cls, id, staticP); }
include/jniwrap.h:	{ return JNIENV->Throw(env, obj); }
include/jniwrap.h:	{ return JNIENV->ThrowNew(env, cls, msg); }
include/jniwrap.h:	{ return JNIENV->ExceptionOccurred(env); }
include/jniwrap.h:	{ JNIENV->ExceptionDescribe(env); }
include/jniwrap.h:	{ JNIENV->ExceptionClear(env); }
include/jniwrap.h:	{ JNIENV->FatalError(env, msg); }
include/jniwrap.h:	{ return JNIENV->PushLocalFrame(env, cap); }
include/jniwrap.h:	{ return JNIENV->PopLocalFrame(env, res); }
include/jniwrap.h:	{ return JNIENV->NewGlobalRef(env, lobj); }
include/jniwrap.h:	{ JNIENV->DeleteGlobalRef(env, gref); }
include/jniwrap.h:	{ JNIENV->DeleteLocalRef(env, obj); }
include/jniwrap.h:	{ return JNIENV->IsSameObject(env, obj1, obj2); }
include/jniwrap.h:	{ return JNIENV->NewLocalRef(env, ref); }
include/jniwrap.h:	{ return JNIENV->EnsureLocalCapacity(env, cap); }
include/jniwrap.h:	{ return JNIENV->AllocObject(env, cls); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->NewObjectV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->NewObjectV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->NewObjectA(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->GetObjectClass(env, obj); }
include/jniwrap.h:	{ return JNIENV->IsInstanceOf(env, obj, cls); }
include/jniwrap.h:	{ return JNIENV->GetMethodID(env, cls, name, sig); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallObjectMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallObjectMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallObjectMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallBooleanMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallBooleanMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallBooleanMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallByteMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallByteMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallByteMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallCharMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallCharMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallCharMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallShortMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallShortMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallShortMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallIntMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallIntMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallIntMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallLongMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallLongMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallLongMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallFloatMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallFloatMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallFloatMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallDoubleMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallDoubleMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallDoubleMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	JNIENV->CallVoidMethodV(env, obj, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	{ JNIENV->CallVoidMethodV(env, obj, mth, args); }
include/jniwrap.h:	{ JNIENV->CallVoidMethodA(env, obj, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualObjectMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualObjectMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualObjectMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualBooleanMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualBooleanMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualBooleanMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualByteMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualByteMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualByteMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualCharMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualCharMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualCharMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualShortMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualShortMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualShortMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualIntMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualIntMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualIntMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualLongMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualLongMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualLongMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualFloatMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualFloatMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualFloatMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallNonvirtualDoubleMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallNonvirtualDoubleMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallNonvirtualDoubleMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	JNIENV->CallNonvirtualVoidMethodV(env, obj, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	{ JNIENV->CallNonvirtualVoidMethodV(env, obj, cls, mth, args); }
include/jniwrap.h:	{ JNIENV->CallNonvirtualVoidMethodA(env, obj, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->GetFieldID(env, cls, name, sig); }
include/jniwrap.h:	{ return JNIENV->GetObjectField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetBooleanField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetByteField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetCharField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetShortField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetIntField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetLongField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetFloatField(env, obj, id); }
include/jniwrap.h:	{ return JNIENV->GetDoubleField(env, obj, id); }
include/jniwrap.h:	{ JNIENV->SetObjectField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetBooleanField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetByteField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetCharField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetShortField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetIntField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetLongField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetFloatField(env, obj, id, val); }
include/jniwrap.h:	{ JNIENV->SetDoubleField(env, obj, id, val); }
include/jniwrap.h:	{ return JNIENV->GetStaticMethodID(env, cls, name, sig); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticObjectMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticObjectMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticObjectMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticBooleanMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticBooleanMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticBooleanMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticByteMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticByteMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticByteMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticCharMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticCharMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticCharMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticShortMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticShortMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticShortMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticIntMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticIntMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticIntMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticLongMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticLongMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticLongMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticFloatMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticFloatMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticFloatMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	val=JNIENV->CallStaticDoubleMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	return(val);
include/jniwrap.h:	{ return JNIENV->CallStaticDoubleMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->CallStaticDoubleMethodA(env, cls, mth, args); }
include/jniwrap.h:	va_start(args, mth);
include/jniwrap.h:	JNIENV->CallStaticVoidMethodV(env, cls, mth, args);
include/jniwrap.h:	va_end(args);
include/jniwrap.h:	{ JNIENV->CallStaticVoidMethodV(env, cls, mth, args); }
include/jniwrap.h:	{ JNIENV->CallStaticVoidMethodA(env, cls, mth, args); }
include/jniwrap.h:	{ return JNIENV->GetStaticFieldID(env, cls, name, sig); }
include/jniwrap.h:	{ return JNIENV->GetStaticObjectField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticBooleanField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticByteField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticCharField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticShortField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticIntField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticLongField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticFloatField(env, cls, id); }
include/jniwrap.h:	{ return JNIENV->GetStaticDoubleField(env, cls, id); }
include/jniwrap.h:	{ JNIENV->SetStaticObjectField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticBooleanField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticByteField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticCharField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticShortField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticIntField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticLongField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticFloatField(env, cls, id, value); }
include/jniwrap.h:	{ JNIENV->SetStaticDoubleField(env, cls, id, value); }
include/jniwrap.h:	{ return JNIENV->NewString(env, unicode, len); }
include/jniwrap.h:	{ return JNIENV->GetStringLength(env, str); }
include/jniwrap.h:	{ return JNIENV->GetStringChars(env, str, copy); }
include/jniwrap.h:	{ JNIENV->ReleaseStringChars(env, str, chars); }
include/jniwrap.h:	{ return JNIENV->NewStringUTF(env, utf); }
include/jniwrap.h:	{ return JNIENV->GetStringUTFLength(env, str); }
include/jniwrap.h:	{ return JNIENV->GetStringUTFChars(env, str, copy); }
include/jniwrap.h:	{ JNIENV->ReleaseStringUTFChars(env, str, chars); }
include/jniwrap.h:	{ return JNIENV->GetArrayLength(env, array); }
include/jniwrap.h:	{ return JNIENV->NewObjectArray(env, len, cls, init); }
include/jniwrap.h:	{ return JNIENV->GetObjectArrayElement(env, array, index); }
include/jniwrap.h:	{ JNIENV->SetObjectArrayElement(env, array, index, val); }
include/jniwrap.h:	{ return JNIENV->NewBooleanArray(env, len); }
include/jniwrap.h:	{ return JNIENV->NewByteArray(env, len); }
include/jniwrap.h:	{ return JNIENV->NewCharArray(env, len); }
include/jniwrap.h:	{ return JNIENV->NewShortArray(env, len); }
include/jniwrap.h:	{ return JNIENV->NewIntArray(env, len); }
include/jniwrap.h:	{ return JNIENV->NewLongArray(env, len); }
include/jniwrap.h:	{ return JNIENV->NewFloatArray(env, len); }
include/jniwrap.h:	{ return JNIENV->NewDoubleArray(env, len); }
include/jniwrap.h:	{ return JNIENV->GetBooleanArrayElements(env, array, copy); }
include/jniwrap.h:	{ return JNIENV->GetByteArrayElements(env, array, copy); }
include/jniwrap.h:	{ return JNIENV->GetCharArrayElements(env, array, copy); }
include/jniwrap.h:	{ return JNIENV->GetShortArrayElements(env, array, copy); }
include/jniwrap.h:	{ return JNIENV->GetIntArrayElements(env, array, copy); }
include/jniwrap.h:	{ return JNIENV->GetLongArrayElements(env, array, copy); }
include/jniwrap.h:	{ return JNIENV->GetFloatArrayElements(env, array, copy); }
include/jniwrap.h:	{ return JNIENV->GetDoubleArrayElements(env, array, copy); }
include/jniwrap.h:	{ JNIENV->ReleaseBooleanArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->ReleaseByteArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->ReleaseCharArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->ReleaseShortArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->ReleaseIntArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->ReleaseLongArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->ReleaseFloatArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->ReleaseDoubleArrayElements(env, array, elems, mode); }
include/jniwrap.h:	{ JNIENV->GetBooleanArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->GetByteArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->GetCharArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->GetShortArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->GetIntArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->GetLongArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->GetFloatArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->GetDoubleArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetBooleanArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetByteArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetCharArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetShortArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetIntArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetLongArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetFloatArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ JNIENV->SetDoubleArrayRegion(env, array, start, len, buf); }
include/jniwrap.h:	{ return JNIENV->RegisterNatives(env, cls, methods, n_method); }
include/jniwrap.h:	{ return JNIENV->UnregisterNatives(env, cls); }
include/jniwrap.h:	{ return JNIENV->MonitorEnter(env, obj); }
include/jniwrap.h:	{ return JNIENV->MonitorExit(env, obj); }
include/jniwrap.h:	{ return JNIENV->GetJavaVM(env, vm); }
include/jniwrap.h:	{ JNIENV->GetStringRegion(env, str, off, len, buf); }
include/jniwrap.h:	{ JNIENV->GetStringUTFRegion(env, str, off, len, buf); }
include/jniwrap.h:	{ return JNIENV->GetPrimitiveArrayCritical(env, array, copy); }
include/jniwrap.h:	{ JNIENV->ReleasePrimitiveArrayCritical(env, array, carray, mode); }
include/jniwrap.h:	{ return JNIENV->GetStringCritical(env, str, copy); }
include/jniwrap.h:	{ JNIENV->ReleaseStringCritical(env, str, cstr); }
include/jniwrap.h:	{ return JNIENV->NewWeakGlobalRef(env, obj); }
include/jniwrap.h:	{ JNIENV->DeleteWeakGlobalRef(env, obj); }
include/jniwrap.h:	{ return JNIENV->ExceptionCheck(env); }
include/jniwrap.h:	{ return JNIENV->NewDirectByteBuffer(env, address, capacity); }
include/jniwrap.h:	{ return JNIENV->GetDirectBufferAddress(env, buf); }
include/jniwrap.h:	{ return JNIENV->GetDirectBufferCapacity(env, buf); }
include/vecnf_msvc.h:	{ return(_mm_set_ps(0, 0, x[1], x[0])); };
include/vecnf_msvc.h:	{ return(_mm_set_ps(0, x[2], x[1], x[0])); };
include/vecnf_msvc.h:	{ return(_mm_loadu_ps(x)); };
include/vecnf_msvc.h:	{ return(_mm_set_ps(x[3], x[2], x[1], x[0])); };
include/vecnf_msvc.h:	{ return(_mm_set_ps(x[0], x[3], x[2], x[1])); };
include/vecnf_msvc.h:	p=gcralloc(4*sizeof(float));
include/vecnf_msvc.h:	_mm_storeu_ps(p, v);
include/vecnf_msvc.h:	return(p);
include/vecnf_msvc.h:	p=gcralloc(4*sizeof(float));
include/vecnf_msvc.h:	t=_mm_shuffle_ps(v, v, _MM_SHUFFLE(2, 1, 0, 3));
include/vecnf_msvc.h:	_mm_storeu_ps(p, t);
include/vecnf_msvc.h:	return(p);
include/vecnf_msvc.h:	t=_mm_shuffle_ps(v, v, _MM_SHUFFLE(2, 1, 0, 3));
include/vecnf_msvc.h:	_mm_storeu_ps(p, t);
include/vecnf_msvc.h:static float v2x(vec2 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[0]); };
include/vecnf_msvc.h:static float v2y(vec2 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[1]); };
include/vecnf_msvc.h:static float v3x(vec3 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[0]); };
include/vecnf_msvc.h:static float v3y(vec3 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[1]); };
include/vecnf_msvc.h:static float v3z(vec3 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[2]); };
include/vecnf_msvc.h:static float v4x(vec4 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[0]); };
include/vecnf_msvc.h:static float v4y(vec4 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[1]); };
include/vecnf_msvc.h:static float v4z(vec4 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[2]); };
include/vecnf_msvc.h:static float v4w(vec4 a)	{ float p[4]; _mm_storeu_ps(p, a); return(p[3]); };
include/vecnf_msvc.h:static float qx(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[0]); };
include/vecnf_msvc.h:static float qy(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[1]); };
include/vecnf_msvc.h:static float qz(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[2]); };
include/vecnf_msvc.h:static float qw(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[3]); };
include/vecnf_msvc.h:static float qi(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[0]); };
include/vecnf_msvc.h:static float qj(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[1]); };
include/vecnf_msvc.h:static float qk(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[2]); };
include/vecnf_msvc.h:static float qr(quat a)		{ float p[4]; _mm_storeu_ps(p, a); return(p[3]); };
include/vecnf_msvc.h:	_mm_storeu_ps(p, a);
include/vecnf_msvc.h:	return(p[3]);
include/vecnf_msvc.h:	t=_mm_set_ps(0, 1, 1, 1);
include/vecnf_msvc.h:	c=_mm_mul_ps(a, t);
include/vecnf_msvc.h:	return(c);
include/vecnf_msvc.h:static vec4 v4xyzw(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 1, 0)); return(t); };
include/vecnf_msvc.h:static vec4 v4xywz(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(2, 3, 1, 0)); return(t); };
include/vecnf_msvc.h:static vec4 v4xzyw(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 1, 2, 0)); return(t); };
include/vecnf_msvc.h:static vec4 v4xzwy(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 3, 2, 0)); return(t); };
include/vecnf_msvc.h:static vec4 v4xwyz(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(2, 1, 3, 0)); return(t); };
include/vecnf_msvc.h:static vec4 v4xwzy(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 2, 3, 0)); return(t); };
include/vecnf_msvc.h:static vec4 v4yxzw(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 0, 1)); return(t); };
include/vecnf_msvc.h:static vec4 v4yxwz(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(2, 3, 0, 1)); return(t); };
include/vecnf_msvc.h:static vec4 v4yzxw(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 0, 2, 1)); return(t); };
include/vecnf_msvc.h:static vec4 v4yzwx(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(0, 3, 2, 1)); return(t); };
include/vecnf_msvc.h:static vec4 v4ywxz(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(2, 0, 3, 1)); return(t); };
include/vecnf_msvc.h:static vec4 v4ywzx(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(0, 2, 3, 1)); return(t); };
include/vecnf_msvc.h:static vec4 v4zxyw(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 1, 0, 2)); return(t); };
include/vecnf_msvc.h:static vec4 v4zxwy(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 3, 0, 2)); return(t); };
include/vecnf_msvc.h:static vec4 v4zyxw(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 0, 1, 2)); return(t); };
include/vecnf_msvc.h:static vec4 v4zywx(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(0, 3, 1, 2)); return(t); };
include/vecnf_msvc.h:static vec4 v4zwxy(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 0, 3, 2)); return(t); };
include/vecnf_msvc.h:static vec4 v4zwyx(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(0, 1, 3, 2)); return(t); };
include/vecnf_msvc.h:static vec4 v4wxyz(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(2, 1, 0, 3)); return(t); };
include/vecnf_msvc.h:static vec4 v4wxzy(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 2, 0, 3)); return(t); };
include/vecnf_msvc.h:static vec4 v4wyxz(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(2, 0, 1, 3)); return(t); };
include/vecnf_msvc.h:static vec4 v4wyzx(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(0, 2, 1, 3)); return(t); };
include/vecnf_msvc.h:static vec4 v4wzxy(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 0, 2, 3)); return(t); };
include/vecnf_msvc.h:static vec4 v4wzyx(vec4 a)	{ vec4 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(0, 1, 2, 3)); return(t); };
include/vecnf_msvc.h:static vec2 v2xy(vec2 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 1, 0)); return(t); };
include/vecnf_msvc.h:static vec2 v2yx(vec2 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 0, 1)); return(t); };
include/vecnf_msvc.h:static vec2 v3xy(vec3 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 1, 0)); return(t); };
include/vecnf_msvc.h:static vec2 v3xz(vec3 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 2, 0)); return(t); };
include/vecnf_msvc.h:static vec2 v3yx(vec3 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 0, 1)); return(t); };
include/vecnf_msvc.h:static vec2 v3yz(vec3 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 2, 1)); return(t); };
include/vecnf_msvc.h:static vec2 v3zx(vec3 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 0, 2)); return(t); };
include/vecnf_msvc.h:static vec2 v3zy(vec3 a)	{ vec2 t; t=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 1, 2)); return(t); };
include/vecnf_msvc.h:	{ return(v2mul(a, vec2(f, f))); }
include/vecnf_msvc.h:	{ return(v3mul(a, vec3(f, f, f))); }
include/vecnf_msvc.h:	{ return(v4mul(a, vec4(f, f, f, f))); }
include/vecnf_msvc.h:	{ return(v4mul(a, vec4(f, f, f, f))); }
include/vecnf_msvc.h:	{ return(v2add(a, v2mul(b, vec2(f, f)))); }
include/vecnf_msvc.h:	{ return(v3add(a, v3mul(b, vec3(f, f, f)))); }
include/vecnf_msvc.h:	{ return(v4add(a, v4mul(b, vec4(f, f, f, f)))); }
include/vecnf_msvc.h:	{ return(v4add(a, v4mul(b, vec4(f, f, f, f)))); }
include/vecnf_msvc.h:	{ return(v2add(v2mul(a, vec2(f, f)), v2mul(b, vec2(g, g)))); }
include/vecnf_msvc.h:	{ return(v3add(v3mul(a, vec3(f, f, f)), v3mul(b, vec3(g, g, g)))); }
include/vecnf_msvc.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_msvc.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_msvc.h:	{ return(v2add(v2mul(a, vec2(f, f)), v2mul(b, vec2(g, g)))); }
include/vecnf_msvc.h:	{ return(v3add(v3mul(a, vec3(f, f, f)), v3mul(b, vec3(g, g, g)))); }
include/vecnf_msvc.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_msvc.h:	{ return(v4add(v4mul(a, vec4(f, f, f, f)), v4mul(b, vec4(g, g, g, g)))); }
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:	{ return(v2x(a)*v2y(b)-v2y(a)*v2x(b)); }
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:		));
include/vecnf_msvc.h:	a0=_mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 3, 3, 3));
include/vecnf_msvc.h:	b0=_mm_shuffle_ps(b, b, _MM_SHUFFLE(3, 2, 1, 0));
include/vecnf_msvc.h:	c0=_mm_mul_ps(a0, b0);
include/vecnf_msvc.h:	a1=_mm_shuffle_ps(a, a, _MM_SHUFFLE(0, 2, 1, 0));
include/vecnf_msvc.h:	b1=_mm_shuffle_ps(b, b, _MM_SHUFFLE(0, 3, 3, 3));
include/vecnf_msvc.h:	c1=_mm_mul_ps(a1, b1);
include/vecnf_msvc.h:	a2=_mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 0, 2, 1));
include/vecnf_msvc.h:	b2=_mm_shuffle_ps(b, b, _MM_SHUFFLE(1, 1, 0, 2));
include/vecnf_msvc.h:	c2=_mm_mul_ps(a2, b2);
include/vecnf_msvc.h:	a3=_mm_shuffle_ps(a, a, _MM_SHUFFLE(2, 1, 0, 2));
include/vecnf_msvc.h:	b3=_mm_shuffle_ps(b, b, _MM_SHUFFLE(2, 0, 2, 1));
include/vecnf_msvc.h:	c3=_mm_mul_ps(a3, b3);
include/vecnf_msvc.h:	d0=_mm_sub_ps(c0, c3);
include/vecnf_msvc.h:	d1=_mm_add_ps(c1, c2);
include/vecnf_msvc.h:	d2=_mm_set_ps(-1, 1, 1, 1);
include/vecnf_msvc.h:	d3=_mm_mul_ps(d1, d2);
include/vecnf_msvc.h:	c=_mm_add_ps(d0, d3);
include/vecnf_msvc.h://	c.x=(a.w*b.x)+(a.x*b.w)+(a.y*b.z)-(a.z*b.y);
include/vecnf_msvc.h://	c.y=(a.w*b.y)+(a.y*b.w)+(a.z*b.x)-(a.x*b.z);
include/vecnf_msvc.h://	c.z=(a.w*b.z)+(a.z*b.w)+(a.x*b.y)-(a.y*b.x);
include/vecnf_msvc.h://	c.w=(a.w*b.w)-(a.x*b.x)-(a.y*b.y)-(a.z*b.z);
include/vecnf_msvc.h:	return(c);
include/vecnf_msvc.h:	_mm_storeu_ps(p, _mm_mul_ps(a, b));
include/vecnf_msvc.h:	return(p[0]+p[1]);
include/vecnf_msvc.h:	_mm_storeu_ps(p, _mm_mul_ps(a, b));
include/vecnf_msvc.h:	return(p[0]+p[1]+p[2]);
include/vecnf_msvc.h:	_mm_storeu_ps(p, _mm_mul_ps(a, b));
include/vecnf_msvc.h:	return(p[0]+p[1]+p[2]+p[3]);
include/vecnf_msvc.h:	_mm_storeu_ps(p, _mm_mul_ps(a, b));
include/vecnf_msvc.h:	return(p[0]+p[1]+p[2]+p[3]);
include/vecnf_msvc.h:static float v2len2(vec2 a)	{ return(v2dot(a, a)); }
include/vecnf_msvc.h:static float v3len2(vec3 a)	{ return(v3dot(a, a)); }
include/vecnf_msvc.h:static float v4len2(vec4 a)	{ return(v4dot(a, a)); }
include/vecnf_msvc.h:static float qlen2(quat a)	{ return(qdot(a, a)); }
include/vecnf_msvc.h:	l=v2len(a); if(l!=0)l=1.0/l;
include/vecnf_msvc.h:	c=v2scale(a, l);
include/vecnf_msvc.h:	return(c);
include/vecnf_msvc.h:	l=v3len(a); if(l!=0)l=1.0/l;
include/vecnf_msvc.h:	c=v3scale(a, l);
include/vecnf_msvc.h:	return(c); }
include/vecnf_msvc.h:	l=v4len(a); if(l!=0)l=1.0/l;
include/vecnf_msvc.h:	c=v4scale(a, l);
include/vecnf_msvc.h:	return(c); }
include/vecnf_msvc.h:	l=qlen(a); if(l!=0)l=1.0/l;
include/vecnf_msvc.h:	c=qscale(a, l);
include/vecnf_msvc.h:	return(c); }
include/vecnf_msvc.h://	f=(a.w*a.w)+(a.x*a.x)+(a.y*a.y)+(a.z*a.z);
include/vecnf_msvc.h:	f=qdot(a, a); if(f!=0)f=1.0/f;
include/vecnf_msvc.h:	c=qscale(qconj(a), f);
include/vecnf_msvc.h:	return(c);
include/cplxf_raw.h:	{ fcplx t; t.r=r; t.i=r; return(t); };
include/cplxf_raw.h:	{ return(_vec2i(x[0], x[1])); };
include/cplxf_raw.h:	p=gcralloc(4*sizeof(float));
include/cplxf_raw.h:	return(p);
include/cplxf_raw.h:static float fcreal(fcplx a)	{ return(a.r); };
include/cplxf_raw.h:static float fcimag(fcplx a)	{ return(a.i); };
include/cplxf_raw.h:	{ return(a.r*b.r+a.i*b.i); }
include/cplxf_raw.h:	{ return(a.r*b.i-a.i*b.r); }
include/cplxf_raw.h:	{ return(sqrt(a.r*a.r+a.i*a.i)); }
include/cplxf_raw.h:	{ return(a.r*a.r+a.i*a.i); }
include/cplxf_raw.h:	l=fclen(a); if(l!=0)l=1.0/l;
include/cplxf_raw.h:	return(c); }
include/cplxf_raw.h:	{ fcplx c; c.r=-a.r; c.i=-a.i; return(c); }
include/cplxf_raw.h:	{ fcplx c; c.r=a.r+b.r; c.i=a.i+b.i; return(c); }
include/cplxf_raw.h:	{ fcplx c; c.r=a.r-b.r; c.i=a.i-b.i; return(c); }
include/cplxf_raw.h:	{ fcplx c; c.r=a.r*b.r-a.i*b.i; c.i=a.r*b.i+a.i*b.r; return(c); }
include/cplxf_raw.h:	return(fcplx(a.r/f, -a.i/f));
include/cplxf_raw.h:	{ fcplx c; c=fcmul(a, fcrcp(b)); return(c); }
include/cplxf_raw.h:	{ return(fclen(fcsub(a, b))); }
include/cplxf_raw.h:	{ fcplx c; c.r=a.r*f; c.i=a.i*f; return(c); }
include/cplxf_raw.h:	{ return((a.r==b.r) && (a.i==b.i)); }
include/cplxf_raw.h:	{ return((a.r!=b.r) || (a.i!=b.i)); }
include/cplxf_raw.h:	{ return(sqrt(a.r*a.r + a.i*a.i)); }
include/cplxf_raw.h:static float fcarg(fcplx a);
include/cplxf_raw.h:	{ return(atan2(a.i, a.r)); }
include/cplxf_raw.h:	{ return(fcplx(a.r, -a.i)); }
include/cplxf_raw.h:		x=fabs(z.r);
include/cplxf_raw.h:		y=fabs(z.i);
include/cplxf_raw.h:			w=sqrt(x)*sqrt(0.5*(1.0+sqrt(1.0+r*r)));
include/cplxf_raw.h:			w=sqrt(y)*sqrt(0.5*(r+sqrt(1.0+r*r)));
include/cplxf_raw.h:			c.i=z.i/(2.0*w);
include/cplxf_raw.h:			c.r=z.i/(2.0*c.i);
include/cplxf_raw.h:	return(c);
include/cplxf_raw.h:	{ return(fcplx(0.5*log(fclen2(a)), fcarg(a))); }
include/cplxf_raw.h:	{ fcplx c; c.r=a.r*a.r-a.i*a.i; c.i=2*a.r*a.i; return(c); }
include/cplxf_raw.h:	return(c);
include/cplxf_raw.h:	{ return(fcmul(fcpow2(a), fcpow2(a))); }
include/cplxf_raw.h:	{ return(fcmul(fcpow2(a), fcpow3(a))); }
include/cplxf_raw.h:	{ return(fcmul(fcpow3(a), fcpow3(a))); }
include/cplxf_raw.h:	{ fcplx c; c.r=a.r+(b.r*v); c.i=a.i+(b.i*v); return(c); }
include/cplxf_raw.h:	b=fcplx(1.0+a.r, a.i); x=fcpow2(a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/        2.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/        6.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/       24.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/      120.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/      720.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/     5040.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/    40320.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/   362880.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/  3628800.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/ 39916800.0); x=fcmul(x, a);
include/cplxf_raw.h:	b=fcaddscale(b, x, 1.0/479001600.0); x=fcmul(x, a);
include/cplxf_raw.h:	return(b);
include/cplxf_raw.h:static fcplx fcpow(fcplx a, fcplx b);
include/cplxf_raw.h:	{ fcplx c; c=fcexp(fcmul(fclog(p), q)); return(c); }
include/cplxf_raw.h:static fcplx fcproj(fcplx a);
include/cplxf_raw.h:static fcplx fcacos(fcplx a);
include/cplxf_raw.h:static fcplx fcasin(fcplx a);
include/cplxf_raw.h:static fcplx fcacosh(fcplx a);
include/cplxf_raw.h:static fcplx fcasinh(fcplx a);
include/cplxf_raw.h:static fcplx fcatan(fcplx a);
include/cplxf_raw.h:static fcplx fcatanh(fcplx a);
include/cplxf_raw.h:static fcplx fccos(fcplx a);
include/cplxf_raw.h:static fcplx fccosh(fcplx a);
include/cplxf_raw.h:static fcplx fcsin(fcplx a);
include/cplxf_raw.h:static fcplx fcsinh(fcplx a);
include/cplxf_raw.h:static fcplx fctan(fcplx a);
include/cplxf_raw.h:static fcplx fctanh(fcplx a);
include/dcplx.h:	{ dcomplex t; t.r=r; t.i=r; return(t); };
include/dcplx.h:	{ return(_dcomplex(x[0], x[1])); };
include/dcplx.h:static float dcreal(dcomplex a)	{ return(a.r); };
include/dcplx.h:static float dcimag(dcomplex a)	{ return(a.i); };
include/dcplx.h:	{ return(a.r*b.r+a.i*b.i); }
include/dcplx.h:	{ return(a.r*b.i-a.i*b.r); }
include/dcplx.h:	{ return(sqrt(a.r*a.r+a.i*a.i)); }
include/dcplx.h:	{ return(a.r*a.r+a.i*a.i); }
include/dcplx.h:	l=dclen(a); if(l!=0)l=1.0/l;
include/dcplx.h:	return(c); }
include/dcplx.h:	{ dcomplex c; c.r=-a.r; c.i=-a.i; return(c); }
include/dcplx.h:	{ dcomplex c; c.r=a.r+b.r; c.i=a.i+b.i; return(c); }
include/dcplx.h:	{ dcomplex c; c.r=a.r-b.r; c.i=a.i-b.i; return(c); }
include/dcplx.h:	{ dcomplex c; c.r=a.r*b.r-a.i*b.i; c.i=a.r*b.i+a.i*b.r; return(c); }
include/dcplx.h:	return(dcomplex(a.r/f, -a.i/f));
include/dcplx.h:	{ dcomplex c; c=dcmul(a, dcrcp(b)); return(c); }
include/dcplx.h:	{ return(dclen(dcsub(a, b))); }
include/dcplx.h:	{ dcomplex c; c.r=a.r*f; c.i=a.i*f; return(c); }
include/dcplx.h:	{ return((a.r==b.r) && (a.i==b.i)); }
include/dcplx.h:	{ return((a.r!=b.r) || (a.i!=b.i)); }
include/dcplx.h:	{ return(sqrt(a.r*a.r + a.i*a.i)); }
include/dcplx.h:static float dcarg(dcomplex a);
include/dcplx.h:	{ return(atan2(a.i, a.r)); }
include/dcplx.h:	{ return(dcomplex(a.r, -a.i)); }
include/dcplx.h:		x=fabs(z.r);
include/dcplx.h:		y=fabs(z.i);
include/dcplx.h:			w=sqrt(x)*sqrt(0.5*(1.0+sqrt(1.0+r*r)));
include/dcplx.h:			w=sqrt(y)*sqrt(0.5*(r+sqrt(1.0+r*r)));
include/dcplx.h:			c.i=z.i/(2.0*w);
include/dcplx.h:			c.r=z.i/(2.0*c.i);
include/dcplx.h:	return(c);
include/dcplx.h:	{ return(dcomplex(0.5*log(dclen2(a)), dcarg(a))); }
include/dcplx.h:	{ dcomplex c; c.r=a.r*a.r-a.i*a.i; c.i=2*a.r*a.i; return(c); }
include/dcplx.h:	return(c);
include/dcplx.h:	{ return(dcmul(dcpow2(a), dcpow2(a))); }
include/dcplx.h:	{ return(dcmul(dcpow2(a), dcpow3(a))); }
include/dcplx.h:	{ return(dcmul(dcpow3(a), dcpow3(a))); }
include/dcplx.h:	{ dcomplex c; c.r=a.r+(b.r*v); c.i=a.i+(b.i*v); return(c); }
include/dcplx.h:	b=dcomplex(1.0+a.r, a.i); x=dcpow2(a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/        2.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/        6.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/       24.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/      120.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/      720.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/     5040.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/    40320.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/   362880.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/  3628800.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/ 39916800.0); x=dcmul(x, a);
include/dcplx.h:	b=dcaddscale(b, x, 1.0/479001600.0); x=dcmul(x, a);
include/dcplx.h:	return(b);
include/dcplx.h:static dcomplex dcpow(dcomplex a, dcomplex b);
include/dcplx.h:	{ dcomplex c; c=dcexp(dcmul(dclog(a), b)); return(c); }
include/dcplx.h:// static dcomplex dcproj(dcomplex a);
include/dcplx.h:static dcomplex dcacos(dcomplex a);
include/dcplx.h:static dcomplex dcasin(dcomplex a);
include/dcplx.h:static dcomplex dcacosh(dcomplex a);
include/dcplx.h:static dcomplex dcasinh(dcomplex a);
include/dcplx.h:static dcomplex dcatan(dcomplex a);
include/dcplx.h:static dcomplex dcatanh(dcomplex a);
include/dcplx.h:static dcomplex dccos(dcomplex a);
include/dcplx.h:static dcomplex dccosh(dcomplex a);
include/dcplx.h:static dcomplex dcsin(dcomplex a);
include/dcplx.h:static dcomplex dcsinh(dcomplex a);
include/dcplx.h:static dcomplex dctan(dcomplex a);
include/dcplx.h:static dcomplex dctanh(dcomplex a);
include/fcplx.h:	{ fcomplex t; t.r=r; t.i=r; return(t); }
include/fcplx.h:	{ return(_fcomplex(x[0], x[1])); };
include/fcplx.h:static float fcreal(fcomplex a)	{ return(a.r); }
include/fcplx.h:static float fcimag(fcomplex a)	{ return(a.i); }
include/fcplx.h:	{ return(a.r*b.r+a.i*b.i); }
include/fcplx.h:	{ return(a.r*b.i-a.i*b.r); }
include/fcplx.h:	{ return(sqrt(a.r*a.r+a.i*a.i)); }
include/fcplx.h:	{ return(a.r*a.r+a.i*a.i); }
include/fcplx.h:	l=fclen(a); if(l!=0)l=1.0/l;
include/fcplx.h:	return(c); }
include/fcplx.h:	{ fcomplex c; c.r=-a.r; c.i=-a.i; return(c); }
include/fcplx.h:	{ fcomplex c; c.r=a.r+b.r; c.i=a.i+b.i; return(c); }
include/fcplx.h:	{ fcomplex c; c.r=a.r-b.r; c.i=a.i-b.i; return(c); }
include/fcplx.h:	{ fcomplex c; c.r=a.r*b.r-a.i*b.i; c.i=a.r*b.i+a.i*b.r; return(c); }
include/fcplx.h:	return(fcomplex(a.r/f, -a.i/f));
include/fcplx.h:	{ fcomplex c; c=fcmul(a, fcrcp(b)); return(c); }
include/fcplx.h:	{ return(fclen(fcsub(a, b))); }
include/fcplx.h:	{ fcomplex c; c.r=a.r*f; c.i=a.i*f; return(c); }
include/fcplx.h:	{ return((a.r==b.r) && (a.i==b.i)); }
include/fcplx.h:	{ return((a.r!=b.r) || (a.i!=b.i)); }
include/fcplx.h:	{ return(sqrt(a.r*a.r + a.i*a.i)); }
include/fcplx.h:static float fcarg(fcomplex a);
include/fcplx.h:	{ return(atan2(a.i, a.r)); }
include/fcplx.h:	{ return(fcomplex(a.r, -a.i)); }
include/fcplx.h:		x=fabs(z.r);
include/fcplx.h:		y=fabs(z.i);
include/fcplx.h:			w=sqrt(x)*sqrt(0.5*(1.0+sqrt(1.0+r*r)));
include/fcplx.h:			w=sqrt(y)*sqrt(0.5*(r+sqrt(1.0+r*r)));
include/fcplx.h:			c.i=z.i/(2.0*w);
include/fcplx.h:			c.r=z.i/(2.0*c.i);
include/fcplx.h:	return(c);
include/fcplx.h:	{ return(fcomplex(0.5*log(fclen2(a)), fcarg(a))); }
include/fcplx.h:	{ fcomplex c; c.r=a.r*a.r-a.i*a.i; c.i=2*a.r*a.i; return(c); }
include/fcplx.h:	return(c);
include/fcplx.h:	{ return(fcmul(fcpow2(a), fcpow2(a))); }
include/fcplx.h:	{ return(fcmul(fcpow2(a), fcpow3(a))); }
include/fcplx.h:	{ return(fcmul(fcpow3(a), fcpow3(a))); }
include/fcplx.h:	{ fcomplex c; c.r=a.r+(b.r*v); c.i=a.i+(b.i*v); return(c); }
include/fcplx.h:	b=fcomplex(1.0+a.r, a.i); x=fcpow2(a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/        2.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/        6.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/       24.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/      120.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/      720.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/     5040.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/    40320.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/   362880.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/  3628800.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/ 39916800.0); x=fcmul(x, a);
include/fcplx.h:	b=fcaddscale(b, x, 1.0/479001600.0); x=fcmul(x, a);
include/fcplx.h:	return(b);
include/fcplx.h:static fcomplex fcpow(fcomplex a, fcomplex b);
include/fcplx.h:	{ fcomplex c; c=fcexp(fcmul(fclog(a), b)); return(c); }
include/fcplx.h:// static fcomplex fcproj(fcomplex a);
include/fcplx.h:static fcomplex fcacos(fcomplex a);
include/fcplx.h:static fcomplex fcasin(fcomplex a);
include/fcplx.h:static fcomplex fcacosh(fcomplex a);
include/fcplx.h:static fcomplex fcasinh(fcomplex a);
include/fcplx.h:static fcomplex fcatan(fcomplex a);
include/fcplx.h:static fcomplex fcatanh(fcomplex a);
include/fcplx.h:static fcomplex fccos(fcomplex a);
include/fcplx.h:static fcomplex fccosh(fcomplex a);
include/fcplx.h:static fcomplex fcsin(fcomplex a);
include/fcplx.h:static fcomplex fcsinh(fcomplex a);
include/fcplx.h:static fcomplex fctan(fcomplex a);
include/fcplx.h:static fcomplex fctanh(fcomplex a);
include/bgbasm_autoi_asm.h:void basm_warning(char *str, ...);
include/bgbasm_autoi_asm.h:void basm_error(char *str, ...);
include/bgbasm_autoi_asm.h:void BASM_ModRM16(BASM_Context *ctx, int reg,int rm, int sc, int idx, int disp, char *lbl);
include/bgbasm_autoi_asm.h:void BASM_Sib(BASM_Context *ctx, int rm, int sc, int idx);
include/bgbasm_autoi_asm.h:void BASM_LabelDispRel(BASM_Context *ctx, char *lbl, int disp);
include/bgbasm_autoi_asm.h:void BASM_ModRM64(BASM_Context *ctx, int reg,int rm, int sc, int idx, int disp, char *lbl);
include/bgbasm_autoi_asm.h:int BASM_OpArgRegP(int i, int j, int reg);
include/bgbasm_autoi_asm.h:int BASM_OpArgRegP(int i, int j, int reg);
include/bgbasm_autoi_asm.h:int BASM_OpArgMemP(int i, int j, int w, int fl);
include/bgbasm_autoi_asm.h:int BASM_OpArgMemP(int i, int j, int w, int fl);
include/bgbasm_autoi_asm.h:int BASM_OpArgImmP(int i, int j, int w, long long imm);
include/bgbasm_autoi_asm.h:int BASM_OpArchP(BASM_Context *ctx, int i);
include/bgbasm_autoi_asm.h:int BASM_OpRegP(int i, int reg);
include/bgbasm_autoi_asm.h:int BASM_OpImmP(int i, int w, long long imm);
include/bgbasm_autoi_asm.h:int BASM_OpMemP(int i, int w);
include/bgbasm_autoi_asm.h:int BASM_OpRegRegP(int i, int r0, int r1);
include/bgbasm_autoi_asm.h:int BASM_OpRegImmP(int i, int reg, long long imm);
include/bgbasm_autoi_asm.h:int BASM_OpRegMemP(int i, int reg, int fl);
include/bgbasm_autoi_asm.h:int BASM_OpMemRegP(int i, int reg, int fl);
include/bgbasm_autoi_asm.h:int BASM_OpMemImmP(int i, int w, long long imm);
include/bgbasm_autoi_asm.h:int BASM_OpRegRegImmP(int i, int r0, int r1, long long imm);
include/bgbasm_autoi_asm.h:int BASM_OpRegMemImmP(int i, int reg, int fl, long long imm);
include/bgbasm_autoi_asm.h:int BASM_OpMemRegImmP(int i, int reg, int fl, long long imm);
include/bgbasm_autoi_asm.h:int BASM_OpRegRegRegP(int i, int r0, int r1, int r2);
include/bgbasm_autoi_asm.h:int BASM_OpRegMemRegP(int i, int r0, int r1, int fl);
include/bgbasm_autoi_asm.h:int BASM_OpMemRegRegP(int i, int r0, int r1, int fl);
include/bgbasm_autoi_asm.h:char *basm_strdup_alloc(char *str);
include/bgbasm_autoi_asm.h:u32 basm_atof_u32(char *str);
include/bgbasm_autoi_asm.h:u64 basm_atof_u64(char *str);
include/bgbasm_autoi_asm.h:u32 basm_atof_u32_sg(char *str, int sg);
include/bgbasm_autoi_asm.h:u64 basm_atof_u64_sg(char *str, int sg);
include/bgbasm_autoi_asm.h:s64 basm_atoi(char *str);
include/bgbasm_autoi_asm.h:int basm_stricmp(char *s1, char *s2);
include/bgbasm_autoi_asm.h:int BASM_Parse_MatchTokenListLen(char *str, char **lst);
include/bgbasm_autoi_asm.h:char *BASM_Parse_TokenGAS(char *s, char *b, int *ty);
include/bgbasm_autoi_asm.h:char *BASM_ParseArgGAS(BASM_Context *ctx, char *str,int *breg, int *ireg, int *sc, long long *disp, char **lbl);
include/bgbasm_autoi_asm.h:char *BASM_ParseOpcodeInner(BASM_Context *ctx, char *str,char *opname, int opnum);
include/bgbasm_autoi_asm.h:int BDISASM_CheckOpStr(byte **rip, char **str, int *rfl, int op);
include/bgbasm_autoi_asm.h:byte *BDISASM_PrintModRM_RM16(byte *ip, int op, int fl, int w, int ar);
include/bgbasm_autoi_asm.h:byte *BDISASM_PrintModRM_RM(byte *ip, int op, int fl, int w, int ar);
include/bgbasm_autoi_asm.h:byte *BDISASM_PrintModRM_RegRM(byte *ip, int op, int fl, int w);
include/bgbasm_autoi_asm.h:byte *BDISASM_PrintModRM_RMReg(byte *ip, int op, int fl, int w);
include/bgbasm_autoi_asm.h:byte *BDISASM_SkipModRM(byte *ip, int fl);
include/bgbasm_autoi_asm.h:int BDISASM_SizeOpStr(byte *oip, char *str, int fl);
include/bgbasm_autoi_asm.h:char *BDISASM_GetFixReg(int i, int j);
include/bgbasm_autoi_asm.h:void BDISASM_PrintFixRegPF(int i);
include/bgbasm_autoi_asm.h:void BDISASM_PrintFixRegSF(int i);
include/bgbasm_autoi_asm.h:int BASM_COFF_ResolveRelocs(BASM_Context *ctx, BASM_COFF_Info *inf, int sec,int offs, int cnt);
include/bgbasm_autoi_asm.h:BASM_Context *BASM_COFF_LoadObjectBuf(char *name, byte *buf, int sz);
include/bgbasm_autoi_asm.h:BASM_Context *BASM_COFF_LoadObject(char *name);
include/bgbasm_autoi_asm.h:int BASM_COFF_LoadLibrary(char *name);
include/bgbasm_autoi_asm.h:void basm_coff_set16(byte *ptr, int i);
include/bgbasm_autoi_asm.h:void basm_coff_set32(byte *ptr, int i);
include/bgbasm_autoi_asm.h:int basm_coff_get16(byte *ptr);
include/bgbasm_autoi_asm.h:int basm_coff_get32(byte *ptr);
include/bgbasm_autoi_asm.h:int basm_coff_idxstr(char *strs, char *str);
include/bgbasm_autoi_asm.h:int basm_coff_idxstr2(char *strs, char *str, int fl);
include/bgbasm_autoi_asm.h:int BASM_COFF_StoreObject(char *name, BASM_Context *ctx);
include/bgbasm_autoi_front.h:int BASM_Win64CheckEpilogueRet(byte *ip);
include/bgbasm_autoi_front.h:void *BASM_GetIP();
include/bgbasm_autoi_front.h:void *BASM_GetDP();
include/bgbasm_autoi_front.h:int basm_genseed();
include/bgbasm_autoi_front.h:void BASM_InitRand();
include/bgbasm_autoi_front.h:u32 basm_rand();
include/bgbasm_autoi_front.h:char *basm_rand_key12();
include/bgbasm_autoi_front.h:char *basm_rand_key18();
include/bgbasm_autoi_front.h:int BASM_LenSig(char *sig, char **esig);
include/bgbasm_autoi_front.h:int BASM_LenSig(char *sig, char **esig);
include/bgbasm_autoi_front.h:int BASM_SplitArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_autoi_front.h:int BASM_SplitArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_autoi_front.h:void BASM_ProcessSigArgs(char *sig, va_list lst, void *buf);
include/bgbasm_autoi_front.h:int BASM_MergeArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_autoi_front.h:int BASM_MergeArgsSig(char *sig, char **esig,byte *buf, byte *abuf, byte *greg, byte *xreg);
include/bgbasm_autoi_front.h:void BASM_CreateStub_Inner32(void *args, void **data);
include/bgbasm_autoi_front.h:void BASM_CreateStub_Inner64(void *args, void **data, void *greg, void *xreg);
include/bgbasm_autoi_front.h:void BASM_InitSig();
include/bgbasm_autoi_front.h:s64 basm_tell_tmp(void *fd);
include/bgbasm_autoi_front.h:int basm_seek_tmp(void *fd, s64 pos, int rel);
include/bgbasm_autoi_front.h:BGBASM_IOFuncs_t *basm_getio();
include/bgbasm_autoi_front.h:void basm_initvfs();
include/bgbasm_autoi_front.h:void *basm_fopen(char *name, char *mode);
include/bgbasm_autoi_front.h:void basm_fclose(void *fd);
include/bgbasm_autoi_front.h:int basm_fread(void *buf, int m, int n, void *fd);
include/bgbasm_autoi_front.h:int basm_fwrite(void *buf, int m, int n, void *fd);
include/bgbasm_autoi_front.h:int basm_feof(void *fd);
include/bgbasm_autoi_front.h:s64 basm_ftell(void *fd);
include/bgbasm_autoi_front.h:int basm_fseek(void *fd, s64 pos, int rel);
include/bgbasm_autoi_front.h:int basm_fgetc(void *fd);
include/bgbasm_autoi_front.h:void basm_fputc(int c, void *fd);
include/bgbasm_autoi_front.h:void *basm_loadfile(char *name, int *rsz);
include/bgbasm_autoi_front.h:int basm_storefile(char *name, void *buf, int sz);
include/bgbasm_autoi_front.h:int basm_storetextfile(char *name, char *buf);
include/bgbasm_autoi_front.h:void *BASM_GetLabelXCall(char *name);
include/bgbasm_autoi_front.h:void *BASM_GetLabelNativeXCall(char *name);
include/bgbasm_autoi_front.h:void *BASM_GetLabelXTls(char *name);
include/bgbasm_autoi_front.h:int BASM_XCallSplitSigSysV(char *sig, char **esig, int *rni, int *rnx, int *rns);
include/bgbasm_autoi_front.h:int BASM_XCallGenRepackSigSysV(char *sig);
include/bgbasm_autoi_front.h:void *BASM_XCallGenThunkSysV(char *name);
include/bgbasm_autoi_front.h:int BASM_XCallSplitSigW64(char *sig, char **esig, int *rni, int *rns);
include/bgbasm_autoi_front.h:int BASM_XCallGenRepackSigW64(char *sig);
include/bgbasm_autoi_front.h:int BASM_XCallGenNatRepackSigW64(char *sig);
include/bgbasm_autoi_front.h:void *BASM_XCallGenThunkW64(char *name);
include/bgbasm_autoi_front.h:int BASM_XCallCheckSigDirectW64(char *sig);
include/bgbasm_autoi_front.h:void *BASM_XCallGenNatThunkW64(char *name, char *xcname);
include/bgbasm_autoi_front.h:BASM_XMeta *BASM_LookupXMetaInfo(char *name);
include/bgbasm_autoi_front.h:BASM_XMeta *BASM_GetXMetaInfo(char *name);
include/bgbasm_autoi_front.h:void *BASM_GetLabelXMeta(char *name);
include/bgbasm_autoi_front.h:void BASM_NotifyLabelXMeta(char *name, void *ptr);
include/bgbasm_autoi_front.h:void *basm_xmeta_lookup(char *name);
include/bgbasm_autoi_front.h:void basm_xmeta_notify(char *name, void *ptr);
include/bgbasm_autoi_front.h:int BASM_InitXMeta();
include/bgbasm_autoi_front.h:void BASM_InitUnwind();
include/bgbasm_autoi_front.h:void *basm_loadfile(char *name, int *rsz);
include/bgbasm_autoi_front.h:int BASM_PP_AddIncludePathFront(char *str);
include/bgbasm_autoi_front.h:int BASM_PP_AddIncludePathBack(char *str);
include/bgbasm_autoi_front.h:int BASM_PP_AddVirtualHeader(char *name, char *buf);
include/bgbasm_autoi_front.h:char *BASM_PP_LookupVirtualHeader(char *name);
include/bgbasm_autoi_front.h:char *BASM_PP_EmitString(char *t, char *s);
include/bgbasm_autoi_front.h:char *BASM_PP_EmitCharString(char *t, char *s);
include/bgbasm_autoi_front.h:void BASM_PP_DeleteDefine(char *name);
include/bgbasm_autoi_front.h:void BASM_PP_CleanupDefines();
include/bgbasm_autoi_front.h:void BASM_PP_CleanupLocalDefines();
include/bgbasm_autoi_front.h:void BASM_PP_AddDefine(char *name, char *str);
include/bgbasm_autoi_front.h:void BASM_PP_AddDefineArgs(char *name, char **args, char *str);
include/bgbasm_autoi_front.h:void BASM_PP_AppendDefineLine(char *name, char *str);
include/bgbasm_autoi_front.h:void BASM_PP_AddStaticDefine(char *name, char *str);
include/bgbasm_autoi_front.h:void BASM_PP_AddStaticDefineArgs(char *name, char **args, char *str);
include/bgbasm_autoi_front.h:void BASM_PP_AddLocalDefine(char *name, char *str);
include/bgbasm_autoi_front.h:void BASM_PP_AddLocalDefineArgs(char *name, char **args, char *str);
include/bgbasm_autoi_front.h:char *BASM_PP_LoadInclude(char *name, int *rsz);
include/bgbasm_autoi_front.h:void BASM_PP_Include(char *str);
include/bgbasm_autoi_front.h:void BASM_PP_PushIncludeLevel();
include/bgbasm_autoi_front.h:void BASM_PP_PopIncludeLevel();
include/bgbasm_autoi_front.h:void BASM_PP_Directive2(char *str);
include/bgbasm_autoi_front.h:void BASM_PP_Directive(char *str);
include/bgbasm_autoi_front.h:char *BASM_PP_ParseArg(char *s, char *b);
include/bgbasm_autoi_front.h:char *BASM_PP_PrintName(char *t, char *s);
include/bgbasm_autoi_front.h:char *BASM_PP_PrintToken(char *t, char *s, int ty);
include/bgbasm_autoi_front.h:int BASM_PP_Expand(char **src, char **dst, char *op);
include/bgbasm_autoi_front.h:int BASM_PP_ExpandBinary(char *larg, char *op, char *rarg, char *dst);
include/bgbasm_autoi_front.h:int BASM_PP_LineArith(char *str);
include/bgbasm_autoi_front.h:int BASM_PP_Line(char *str);
include/bgbasm_autoi_front.h:char *BASM_PP_ParseLine(char *s, char *b);
include/bgbasm_autoi_front.h:void BASM_PP_Buffer(char *ibuf);
include/bgbasm_autoi_front.h:int BASM_PP_Filter(char *ibuf, char *obuf);
include/bgbasm_autoi_link.h:BLNK_Object *BLNK_NewContext();
include/bgbasm_autoi_link.h:int BLNK_DestroyContext(BLNK_Object *ctx);
include/bgbasm_autoi_link.h:void BLNK_EmitLabelPos(BLNK_Object *ctx, char *name, int pos);
include/bgbasm_autoi_link.h:void BLNK_EmitGotoPos(BLNK_Object *ctx, char *name, int ty, int pos);
include/bgbasm_autoi_link.h:void BLNK_ScanRange(void **p, int cnt);
include/bgbasm_autoi_link.h:void *BLNK_gcAlloc(int sz);
include/bgbasm_autoi_link.h:void *BLNK_gcExec(int sz);
include/bgbasm_autoi_link.h:void *BLNK_gcAtomic(int sz);
include/bgbasm_autoi_link.h:void *BLNK_gcTAlloc(char *ty, int sz);
include/bgbasm_autoi_link.h:void *BLNK_gcTExec(char *ty, int sz);
include/bgbasm_autoi_link.h:void *BLNK_gcTAtomic(char *ty, int sz);
include/bgbasm_autoi_link.h:void BLNK_gcFree(void *obj);
include/bgbasm_autoi_link.h:void *BLNK_gcReAlloc(void *obj, int sz);
include/bgbasm_autoi_link.h:int BLNK_gcAllocTls(char *name, int sz);
include/bgbasm_autoi_link.h:int BLNK_gcGetTlsTls();
include/bgbasm_autoi_link.h:int BLNK_ObjAllocTextP(byte *obj);
include/bgbasm_autoi_link.h:void BLNK_AddExeSection(char *name, s64 va, s64 sz, int fl);
include/bgbasm_autoi_link.h:byte *BLNK_AllocChunkBuffer(int sz);
include/bgbasm_autoi_link.h:void BLNK_AllocTextChunk(int sz);
include/bgbasm_autoi_link.h:void BLNK_AllocDataChunk(int sz);
include/bgbasm_autoi_link.h:byte *BLNK_AllocTextSz(int sz);
include/bgbasm_autoi_link.h:byte *BLNK_AllocDataSz(int sz);
include/bgbasm_autoi_link.h:void BLNK_InitLink();
include/bgbasm_autoi_link.h:char *blnk_strdup(char *str);
include/bgbasm_autoi_link.h:int blnk_strdup_i(char *str);
include/bgbasm_autoi_link.h:char *blnk_strtab_i(int str);
include/bgbasm_autoi_link.h:void BLNK_LinkReference(byte *ref, byte *ptr, int ty);
include/bgbasm_autoi_link.h:void BLNK_UnlinkReference(byte *ref, byte *ptr, int ty);
include/bgbasm_autoi_link.h:void BLNK_RelinkReference(byte *ref, byte *oldptr, byte *newptr, int ty);
include/bgbasm_autoi_link.h:void BLNK_LinkRefChain(int idx, byte *ptr);
include/bgbasm_autoi_link.h:void BLNK_UnlinkRefChain(int idx, byte *ptr);
include/bgbasm_autoi_link.h:void BLNK_RelinkRefChain(int idx, byte *oldptr, byte *newptr);
include/bgbasm_autoi_link.h:void BLNK_AddSymRef(char *name, byte *ref, int ty);
include/bgbasm_autoi_link.h:char *BLNK_UnmangleName(char *str);
include/bgbasm_autoi_link.h:void BLNK_AddSym(char *name, void *ptr);
include/bgbasm_autoi_link.h:void BLNK_AddSym(char *name, void *ptr);
include/bgbasm_autoi_link.h:void *BLNK_FetchSymHash(char *name);
include/bgbasm_autoi_link.h:void *BLNK_FetchSym(char *name);
include/bgbasm_autoi_link.h:void *BLNK_FetchSymPrefix(char *name);
include/bgbasm_autoi_link.h:int BLNK_FetchSymIndexPrefix(char *name);
include/bgbasm_autoi_link.h:char *BLNK_FetchSymPrefixName(char *name);
include/bgbasm_autoi_link.h:int BLNK_FetchSymIndex2(char *name);
include/bgbasm_autoi_link.h:int BLNK_FetchSymIndex(char *name);
include/bgbasm_autoi_link.h:int BLNK_GetSymIndex(char *name);
include/bgbasm_autoi_link.h:void *BLNK_LookupLabel(char *name);
include/bgbasm_autoi_link.h:int BLNK_CheckPtrBigSpace(void *ptr);
include/bgbasm_autoi_link.h:byte *BLNK_LinkModule(BLNK_Object *ctx);
include/bgbasm_autoi_link.h:byte *BLNK_LinkModuleObj(char *name, void *buf, int sz);
include/bgbasm_autoi_link.h:void BLNK_LinkModuleQueue(BLNK_Object *ctx);
include/bgbasm_autoi_link.h:void BLNK_LinkModuleObjQueue(char *name, void *buf, int sz);
include/bgbasm_autoi_link.h:void BLNK_UnlinkModuleQueue(BLNK_Object *ctx);
include/bgbasm_autoi_link.h:BLNK_Object *BLNK_LookupSymbolQueue(char *sym);
include/bgbasm_autoi_link.h:void *BLNK_ResolveSymbolQueue(char *sym);
include/bgbasm_autoi_link.h:int BLNK_LookupModule(char *name);
include/bgbasm_autoi_link.h:void *BLNK_LookupModuleText(char *name, int *rsz);
include/bgbasm_autoi_link.h:void *BLNK_LookupModuleData(char *name, int *rsz);
include/bgbasm_autoi_link.h:char *BLNK_GetNamePtr(void *ptr);
include/bgbasm_autoi_link.h:char *BLNK_GetLastNamePtr(void *ptr, void **rbp);
include/bgbasm_autoi_link.h:int BLNK_EnumUndefSyms(char **lst, int max);
include/bgbasm_autoi_link.h:void BLNK_AddSymArray(char **name, void **ptr, int cnt);
include/bgbasm_autoi_link.h:char *BLNK_LookupAddrNameOS(void *addr, void **addr2);
include/bgbasm_autoi_link.h:int BLNK_LoadDynamicOS(char *name);
include/bgbasm_autoi_link.h:void BLNK_UpdateProxyOS(char *name, void *ptr);
include/bgbasm_autoi_link.h:void *BLNK_LookupLabelOS(char *name);
include/bgbasm_autoi_link.h:int BLNK_ProcessEXE(char *name);
include/bgbasm_autoi_link.h:void BLNK_ProbeTst(byte *buf, int sz);
include/bgbasm_autoi_link.h:int BLNK_InitDllsOS();
include/bgbasm_autoi_link.h:int BLNK_LoadDynamicOS(char *name);
include/bgbasm_autoi_link.h:void BLNK_UpdateProxyOS(char *name, void *ptr);
include/bgbasm_autoi_link.h:void *BLNK_LookupLabelOS_1(char *name);
include/bgbasm_autoi_link.h:void *BLNK_LookupLabelOS_2(char *name, int *rfl);
include/bgbasm_autoi_link.h:void *BLNK_LookupLabelOS(char *name);
include/bgbasm_autoi_link.h:int BLNK_InitDbgHelpOS();
include/bgbasm_autoi_link.h:char *BLNK_LookupAddrNameOS(void *addr, void **addr2);
include/bgbasm_autoi_link.h:int BLNK_ProcessMAP(char *name);
include/bgbasm_autoi_link.h:int BLNK_ProcessEXE(char *name);
include/bgbasm_autoi_link.h:s64 blnk_tell_tmp(void *fd);
include/bgbasm_autoi_link.h:int blnk_seek_tmp(void *fd, s64 pos, int rel);
include/bgbasm_autoi_link.h:BLNK_IOFuncs_t *blnk_getio();
include/bgbasm_autoi_link.h:void blnk_initvfs();
include/bgbasm_autoi_link.h:void *blnk_fopen(char *name, char *mode);
include/bgbasm_autoi_link.h:void blnk_fclose(void *fd);
include/bgbasm_autoi_link.h:int blnk_fread(void *buf, int m, int n, void *fd);
include/bgbasm_autoi_link.h:int blnk_fwrite(void *buf, int m, int n, void *fd);
include/bgbasm_autoi_link.h:int blnk_feof(void *fd);
include/bgbasm_autoi_link.h:s64 blnk_ftell(void *fd);
include/bgbasm_autoi_link.h:int blnk_fseek(void *fd, s64 pos, int rel);
include/bgbasm_autoi_link.h:int blnk_fgetc(void *fd);
include/bgbasm_autoi_link.h:void blnk_fputc(int c, void *fd);
include/bgbasm_autoi_link.h:void *blnk_loadfile(char *name, int *rsz);
include/bgbasm_autoi_link.h:int blnk_storefile(char *name, void *buf, int sz);
include/bgbasm_autoi_link.h:int blnk_storetextfile(char *name, char *buf);
include/bgbasm_autoi_link.h:int BLNK_COFF_ResolveRelocs(BLNK_Object *ctx, BLNK_COFF_Info *inf, int sec,int offs, int cnt);
include/bgbasm_autoi_link.h:BLNK_Object *BLNK_COFF_LoadObjectBuf(char *name, byte *buf, int sz);
include/bgbasm_autoi_link.h:BLNK_Object *BLNK_COFF_LoadObject(char *name);
include/bgbasm_autoi_link.h:int BLNK_COFF_LoadLibraryBuf(char *name, byte *buf, int sz);
include/bgbasm_autoi_link.h:int BLNK_COFF_LoadLibrary(char *name);
include/bgbasm_autoi_link.h:int BLNK_COFF_LoadLibrary(char *name);
include/bgbasm_autoi_link.h:void blnk_coff_set16(byte *ptr, int i);
include/bgbasm_autoi_link.h:void blnk_coff_set32(byte *ptr, int i);
include/bgbasm_autoi_link.h:int blnk_coff_get16(byte *ptr);
include/bgbasm_autoi_link.h:int blnk_coff_get32(byte *ptr);
include/bgbasm_autoi_link.h:int blnk_coff_idxstr(char *strs, char *str);
include/bgbasm_autoi_link.h:int blnk_coff_idxstr2(char *strs, char *str, int fl);
include/bgbasm_autoi_link.h:int BLNK_COFF_StoreObjectBuf(BLNK_Object *ctx, byte *buf, int msz);
include/bgbasm_autoi_link.h:int BLNK_COFF_StoreObject(char *name, BLNK_Object *ctx);
include/bgbasm_autoi_link.h:byte *BLNK_COFF_EncodeObject(BLNK_Object *ctx, int *rsz);
include/bgbasm_autoi_link.h:BLNK_Object *BLNK_ELF_LoadObjectBuf(char *name, byte *buf, int sz);
include/dycni.h:	int (*ObjectP)(dyt obj);
include/dycni.h:	int (*ClassP)(dyt obj);
include/dycni.h:	int (*SlotP)(dyt obj);
include/dycni.h:	int (*MethodP)(dyt obj);
include/dycni.h:	void (*BeginClass)(char *name, char *super);
include/dycni.h:	dycClass (*EndClass();
include/dycni.h:	void (*BeginClassAnon)(dycClass super);
include/dycni.h:	dycClass (*EndClassAnon();
include/dycni.h:	void (*ClassSuper)(char *name);
include/dycni.h:	void (*SlotBasic)(char *name, char *sig);
include/dycni.h:	void (*SlotStatic)(char *name, char *sig);
include/dycni.h:	void (*SlotInit)(char *name, char *sig);
include/dycni.h:	void (*SlotStatici)(char *name, char *sig, int val);
include/dycni.h:	void (*SlotStaticl)(char *name, char *sig, s64 val);
include/dycni.h:	void (*SlotStaticf)(char *name, char *sig, double val);
include/dycni.h:	void (*SlotStaticd)(char *name, char *sig, double val);
include/dycni.h:	void (*SlotStaticU)(char *name, char *sig, void *val);
include/dycni.h:	void (*SlotIniti)(char *name, char *sig, int val);
include/dycni.h:	void (*SlotInitl)(char *name, char *sig, s64 val);
include/dycni.h:	void (*SlotInitf)(char *name, char *sig, double val);
include/dycni.h:	void (*SlotInitd)(char *name, char *sig, double val);
include/dycni.h:	void (*SlotInitU)(char *name, char *sig, void *val);
include/dycni.h:	void (*SlotDelegate)(char *name, char *cname);
include/dycni.h:	void (*SlotStaticDelegate)(char *name, char *cname);
include/dycni.h:	void (*MethodBasic)(char *name, char *sig);
include/dycni.h:	void (*MethodStatic)(char *name, char *sig);
include/dycni.h:	void (*MethodFunc)(char *name, char *sig, dyt fcn);
include/dycni.h:	void (*MethodStaticFunc)(char *name, char *sig, dyt fcn);
include/dycni.h:	void (*MethodCFunc)(char *name, char *sig, void *fcn);
include/dycni.h:	void (*MethodCFuncData)(char *name, char *sig, void *fcn, void *data);
include/dycni.h:	void (*MethodCSelf)(char *name, char *sig, void *fcn);
include/dycni.h:	void (*MethodCSelfData)(char *name, char *sig, void *fcn, void *data);
include/dycni.h:	void (*MethodStaticCFunc)(char *name, char *sig, void *fcn);
include/dycni.h:	void (*MethodStaticCFuncData)(char *name, char *sig, void *fcn, void *data);
include/dycni.h:	void (*MethodStaticCSelf)(char *name, char *sig, void *fcn);
include/dycni.h:	void (*MethodStaticCSelfData)(char *name, char *sig, void *fcn, void *data);
include/dycni.h:	void (*SlotMethod)(char *name, char *sig);
include/dycni.h:	void (*StaticSlotMethod)(char *name, char *sig);
include/dycni.h:	void (*ClassInterface)(char *name);
include/dycni.h:	void (*BeginIface)(char *name, char *super);
include/dycni.h:	dycClass (*EndIface)();
include/dycni.h:	void (*IfaceSuper)(char *name);
include/dycni.h:	void (*IfaceMethod)(char *name, char *sig);
include/dycni.h:	void (*IfaceSlot)(char *name, char *sig);
include/dycni.h:	void (*BeginStruct)(char *name);
include/dycni.h:	dycClass (*EndStruct)();
include/dycni.h:	dycClass (*GetClass)(char *name);
include/dycni.h:	dycObject (*Alloc)(dycClass inf);
include/dycni.h:	int (*SubclassP)(dycClass info, dycClass super);
include/dycni.h:	int (*InstanceP)(dycObject obj, dycClass inf);
include/dycni.h:	dycClass (*GetObjClass)(dycObject obj);
include/dycni.h:	dycClass (*GetClassSuper)(dycClass inf);
include/dycni.h:	char *(*GetClassName)(dycClass inf);
include/dycni.h:	char *(*GetObjClassName)(dycObject obj);
include/dycni.h:	dycClassV (*GetClassVersion)(dycClass inf);
include/dycni.h:	int (*GetStructSize)(dycClassV vinf);
include/dycni.h:	dycClass (*GetVersionClass)(dycClassV vinf);
include/dycni.h:	char *(*GetSlotName)(dycSlot idx);
include/dycni.h:	char *(*GetSlotSig)(dycSlot idx);
include/dycni.h:	dycClass (*GetSlotClass)(dycSlot idx);
include/dycni.h:	char *(*GetMethodName)(dycMethod idx);
include/dycni.h:	char *(*GetMethodSig)(dycMethod idx);
include/dycni.h:	dycClass (*GetMethodClass)(dycMethod idx);
include/dycni.h:	dycSlot (*IdxSlot)(dycClass info, char *name);
include/dycni.h:	dycSlot (*IdxObjSlot)(dycObject obj, char *name);
include/dycni.h:	dycMethod (*IdxMethod)(dycClass inf, char *name, char *sig);
include/dycni.h:	dycMethod (*IdxObjMethod)(dycObject obj, char *name, char *sig);
include/dycni.h:	void *(*GetSlotPtr)(dycObject obj, dycSlot idx);
include/dycni.h:	void *(*GetInitPtr)(dycClass inf, dycSlot idx);
include/dycni.h:	void *(*GetStaticPtr)(dycClass inf, dycSlot idx);
include/dycni.h:	void *(*GetStructPtr)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	void *(*PtrSlot)(dycObject obj, char *name);
include/dycni.h:	void *(*PtrStaticSlot)(dycClass info, char *name);
include/dycni.h:	void *(*PtrInitSlot)(dycClass info, char *name);
include/dycni.h:	void *(*PtrStructSlot)(dycClassV vinf, void *obj, char *name);
include/dycni.h:	int (*InstanceOfP)(dycObject obj, char *name);
include/dycni.h:	int (*SubclassOfP)(char *name, char *super);
include/dycni.h:	dyt (*LookupMethodSig)(dycObject obj, char *name, char *sig);
include/dycni.h:	dyt (*GetMethodFunc)(dycClass inf, dycMethod idx);
include/dycni.h:	dyt (*GetObjMethodFunc)(dycObject obj, dycMethod idx);
include/dycni.h:	void (*SetMethodFunc)(dycClass inf, dycMethod idx, dyt fcn);
include/dycni.h:	void (*SetObjMethodFunc)(dycObject obj, dycMethod idx, dyt fcn);
include/dycni.h:	dycSlot (*AddObjSlot)(dycObject obj, char *name, char *sig);
include/dycni.h:	dycMethod (*AddObjMethod)(dycObject obj, char *name, char *sig);
include/dycni.h:	dycObject (*CloneObject)(dycObject obj);
include/dycni.h:	dycObject (*GetObjDelegate)(dycObject obj, char *name);
include/dycni.h:	void (*SetObjDelegate)(dycObject obj, char *name, dycObject obj1);
include/dycni.h:	dycSlot *(*dycEnumSlotArray)(dycClass inf);
include/dycni.h:	dycMethod *(*dycEnumMethodArray)(dycClass inf);
include/dycni.h:	dycSlot *(*dycEnumClassSlotArray)(char *name);
include/dycni.h:	dycMethod *(*dycEnumClassMethodArray)(char *name);
include/dycni.h:	dycObject (*AllocClass)(char *name);
include/dycni.h:	void *(*PtrClassSlot)(char *cname, char *sname);
include/dycni.h:	dycSlot (*IdxClassSlot)(char *cname, char *sname);
include/dycni.h:	dycMethod (*IdxClassMethod)(char *cname, char *name, char *sig);
include/dycni.h:	dyt (*GetSlot)(dycObject obj, char *name);
include/dycni.h:	dyt (*GetSlotr)(dycObject obj, char *name);
include/dycni.h:	void *(*GetSlotp)(dycObject obj, char *name);
include/dycni.h:	int (*GetSlotsb)(dycObject obj, char *name);
include/dycni.h:	int (*GetSlotub)(dycObject obj, char *name);
include/dycni.h:	int (*GetSlotss)(dycObject obj, char *name);
include/dycni.h:	int (*GetSlotus)(dycObject obj, char *name);
include/dycni.h:	int (*GetSloti)(dycObject obj, char *name);
include/dycni.h:	s64 (*GetSlotl)(dycObject obj, char *name);
include/dycni.h:	float (*GetSlotf)(dycObject obj, char *name);
include/dycni.h:	double (*GetSlotd)(dycObject obj, char *name);
include/dycni.h:	int (*SetSlot)(dycObject obj, char *name, dyt val);
include/dycni.h:	int (*SetSlotr)(dycObject obj, char *name, dyt val);
include/dycni.h:	int (*SetSlotp)(dycObject obj, char *name, void *val);
include/dycni.h:	int (*SetSlotsb)(dycObject obj, char *name, int val);
include/dycni.h:	int (*SetSlotub)(dycObject obj, char *name, int val);
include/dycni.h:	int (*SetSlotss)(dycObject obj, char *name, int val);
include/dycni.h:	int (*SetSlotus)(dycObject obj, char *name, int val);
include/dycni.h:	int (*SetSloti)(dycObject obj, char *name, int val);
include/dycni.h:	int (*SetSlotl)(dycObject obj, char *name, s64 val);
include/dycni.h:	int (*SetSlotf)(dycObject obj, char *name, float val);
include/dycni.h:	int (*SetSlotd)(dycObject obj, char *name, double val);
include/dycni.h:	int (*Getsb)(dycObject obj, dycSlot idx);
include/dycni.h:	int (*Getub)(dycObject obj, dycSlot idx);
include/dycni.h:	int (*Getss)(dycObject obj, dycSlot idx);
include/dycni.h:	int (*Getus)(dycObject obj, dycSlot idx);
include/dycni.h:	int (*Geti)(dycObject obj, dycSlot idx);
include/dycni.h:	s64 (*Getl)(dycObject obj, dycSlot idx);
include/dycni.h:	float (*Getf)(dycObject obj, dycSlot idx);
include/dycni.h:	double (*Getd)(dycObject obj, dycSlot idx);
include/dycni.h:	dyt (*Getr)(dycObject obj, dycSlot idx);
include/dycni.h:	void *(*Getp)(dycObject obj, dycSlot idx);
include/dycni.h:	void (*Setsb)(dycObject obj, dycSlot idx, int val);
include/dycni.h:	void (*Setub)(dycObject obj, dycSlot idx, int val);
include/dycni.h:	void (*Setss)(dycObject obj, dycSlot idx, int val);
include/dycni.h:	void (*Setus)(dycObject obj, dycSlot idx, int val);
include/dycni.h:	void (*Seti)(dycObject obj, dycSlot idx, int val);
include/dycni.h:	void (*Setl)(dycObject obj, dycSlot idx, s64 val);
include/dycni.h:	void (*Setf)(dycObject obj, dycSlot idx, float val);
include/dycni.h:	void (*Setd)(dycObject obj, dycSlot idx, double val);
include/dycni.h:	void (*Setr)(dycObject obj, dycSlot idx, dyt val);
include/dycni.h:	void (*Setp)(dycObject obj, dycSlot idx, void *val);
include/dycni.h:	int (*GetStaticsb)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetStaticub)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetStaticss)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetStaticus)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetStatici)(dycClass inf, dycSlot idx);
include/dycni.h:	s64 (*GetStaticl)(dycClass inf, dycSlot idx);
include/dycni.h:	float (*GetStaticf)(dycClass inf, dycSlot idx);
include/dycni.h:	double (*GetStaticd)(dycClass inf, dycSlot idx);
include/dycni.h:	dyt (*GetStaticr)(dycClass inf, dycSlot idx);
include/dycni.h:	void *(*GetStaticp)(dycClass inf, dycSlot idx);
include/dycni.h:	void (*SetStaticsb)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetStaticub)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetStaticss)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetStaticus)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetStatici)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetStaticl)(dycClass inf, dycSlot idx, s64 val);
include/dycni.h:	void (*SetStaticf)(dycClass inf, dycSlot idx, float val);
include/dycni.h:	void (*SetStaticd)(dycClass inf, dycSlot idx, double val);
include/dycni.h:	void (*SetStaticr)(dycClass inf, dycSlot idx, dyt val);
include/dycni.h:	void (*SetStaticp)(dycClass inf, dycSlot idx, void *val);
include/dycni.h:	int (*GetInitsb)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetInitub)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetInitss)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetInitus)(dycClass inf, dycSlot idx);
include/dycni.h:	int (*GetIniti)(dycClass inf, dycSlot idx);
include/dycni.h:	s64 (*GetInitl)(dycClass inf, dycSlot idx);
include/dycni.h:	float (*GetInitf)(dycClass inf, dycSlot idx);
include/dycni.h:	double (*GetInitd)(dycClass inf, dycSlot idx);
include/dycni.h:	dyt (*GetInitr)(dycClass inf, dycSlot idx);
include/dycni.h:	void *(*GetInitp)(dycClass inf, dycSlot idx);
include/dycni.h:	void (*SetInitsb)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetInitub)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetInitss)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetInitus)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetIniti)(dycClass inf, dycSlot idx, int val);
include/dycni.h:	void (*SetInitl)(dycClass inf, dycSlot idx, s64 val);
include/dycni.h:	void (*SetInitf)(dycClass inf, dycSlot idx, float val);
include/dycni.h:	void (*SetInitd)(dycClass inf, dycSlot idx, double val);
include/dycni.h:	void (*SetInitr)(dycClass inf, dycSlot idx, dyt val);
include/dycni.h:	void (*SetInitp)(dycClass inf, dycSlot idx, void *val);
include/dycni.h:	int (*GetStructsb)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	int (*GetStructub)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	int (*GetStructss)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	int (*GetStructus)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	int (*GetStructi)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	s64 (*GetStructl)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	float (*GetStructf)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	double (*GetStructd)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	dyt (*GetStructr)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	void *(*GetStructp)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	void (*SetStructsb)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:	void (*SetStructub)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:	void (*SetStructss)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:	void (*SetStructus)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:	void (*SetStructi)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:	void (*SetStructl)(dycClassV vinf, void *obj, dycSlot idx, s64 val);
include/dycni.h:	void (*SetStructf)(dycClassV vinf, void *obj, dycSlot idx, float val);
include/dycni.h:	void (*SetStructd)(dycClassV vinf, void *obj, dycSlot idx, double val);
include/dycni.h:	void (*SetStructr)(dycClassV vinf, void *obj, dycSlot idx, dyt val);
include/dycni.h:	void (*SetStructp)(dycClassV vinf, void *obj, dycSlot idx, void *val);
include/dycni.h:	dycObject (*NewClass)(char *name);
include/dycni.h:	dycObject (*NewInitClassV)(char *name, char *sig, va_list args);
include/dycni.h:	dycObject (*NewInitClassU)(char *name, char *sig, void **args);
include/dycni.h:	dycObject (*New)(dycClass inf);
include/dycni.h:	dycObject (*NewInitV)(dycClass inf, char *sig, va_list args);
include/dycni.h:	dycObject (*NewInitU)(dycClass inf, char *sig, void **args);
include/dycni.h:	void *(*CallSigU)(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:	void *(*CallSigV)(dycObject obj, char *name, char *sig, va_list args);
include/dycni.h:	dyt (*CallSigVr)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:	int (*CallSigVi)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:	s64 (*CallSigVl)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:	float (*CallSigVf)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:	double (*CallSigVd)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:	dyt (*CallSigUr)(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:	int (*CallSigUi)(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:	s64 (*CallSigUl)(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:	float (*CallSigUf)(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:	double (*CallSigUd)(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:	void *(*CallU)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	void *(*CallV)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	int (*CallUi)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	s64 (*CallUl)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	float (*CallUf)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	double (*CallUd)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	dyt (*CallUr)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	void *(*CallUp)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	void (*CallUv)(dycObject obj, dycMethod mth, void **args);
include/dycni.h:	int (*CallVi)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	s64 (*CallVl)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	float (*CallVf)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	double (*CallVd)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	dyt (*CallVr)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	void *(*CallVp)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	void (*CallVv)(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:	void *(*CallStaticU)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	void *(*CallStaticV)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	int (*CallStaticUi)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	s64 (*CallStaticUl)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	float (*CallStaticUf)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	double (*CallStaticUd)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	dyt (*CallStaticUr)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	void *(*CallStaticUp)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	void (*CallStaticUv)(dycClass inf, dycMethod mth, void **args);
include/dycni.h:	int (*CallStaticVi)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	s64 (*CallStaticVl)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	float (*CallStaticVf)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	double (*CallStaticVd)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	dyt (*CallStaticVr)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	void *(*CallStaticVp)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	void (*CallStaticVv)(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	void *(*CallAsU)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	void *(*CallAsV)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	int (*CallAsUi)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	s64 (*CallAsUl)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	float (*CallAsUf)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	double (*CallAsUd)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	dyt (*CallAsUr)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	void *(*CallAsUp)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	void (*CallAsUv)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:	int (*CallAsVi)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	s64 (*CallAsVl)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	float (*CallAsVf)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	double (*CallAsVd)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	dyt (*CallAsVr)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	void *(*CallAsVp)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	void (*CallAsVv)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:	void *(*CallStructU)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	void *(*CallStructV)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	int (*CallStructUi)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	s64 (*CallStructUl)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	float (*CallStructUf)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	double (*CallStructUd)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	dyt (*CallStructUr)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	void *(*CallStructUp)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	void (*CallStructUv)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:	int (*CallStructVi)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	s64 (*CallStructVl)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	float (*CallStructVf)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	double (*CallStructVd)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	dyt (*CallStructVr)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	void *(*CallStructVp)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	void (*CallStructVv)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:	dycArray (*NewArray)(char *sig, int cnt);
include/dycni.h:	int (*ArrayP)(dyt p);
include/dycni.h:	int (*ArraySigP)(dyt p, char *sig);
include/dycni.h:	void *(*ArrayV)(dycArray arr);
include/dycni.h:	int (*ArraySz)(dycArray arr);
include/dycni.h:	char *(*ArraySig)(dycArray arr);
include/dycni.h:	int (*ArrayStep)(dycArray arr);
include/dycni.h:	void *(*ArrayIdxPtr)(dycArray arr, int idx);
include/dycni.h:	int (*GetArraysb)(dycArray arr, int idx);
include/dycni.h:	int (*GetArrayub)(dycArray arr, int idx);
include/dycni.h:	int (*GetArrayss)(dycArray arr, int idx);
include/dycni.h:	int (*GetArrayus)(dycArray arr, int idx);
include/dycni.h:	int (*GetArrayi)(dycArray arr, int idx);
include/dycni.h:	s64 (*GetArrayl)(dycArray arr, int idx);
include/dycni.h:	float (*GetArrayf)(dycArray arr, int idx);
include/dycni.h:	double (*GetArrayd)(dycArray arr, int idx);
include/dycni.h:	dyt (*GetArrayr)(dycArray arr, int idx);
include/dycni.h:	void *(*GetArrayp)(dycArray arr, int idx);
include/dycni.h:	void (*SetArraysb)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArrayub)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArrayss)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArrayus)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArrayi)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArrayl)(dycArray arr, int idx, s64 val);
include/dycni.h:	void (*SetArrayf)(dycArray arr, int idx, float val);
include/dycni.h:	void (*SetArrayd)(dycArray arr, int idx, double val);
include/dycni.h:	void (*SetArrayr)(dycArray arr, int idx, dyt val);
include/dycni.h:	void (*SetArrayp)(dycArray arr, int idx, void *val);
include/dycni.h:	void *(*ArrayIdxPtrBC)(dycArray arr, int idx);
include/dycni.h:	int (*GetArraySsb)(dycArray arr, int idx);
include/dycni.h:	int (*GetArraySub)(dycArray arr, int idx);
include/dycni.h:	int (*GetArraySss)(dycArray arr, int idx);
include/dycni.h:	int (*GetArraySus)(dycArray arr, int idx);
include/dycni.h:	int (*GetArraySi)(dycArray arr, int idx);
include/dycni.h:	s64 (*GetArraySl)(dycArray arr, int idx);
include/dycni.h:	float (*GetArraySf)(dycArray arr, int idx);
include/dycni.h:	double (*GetArraySd)(dycArray arr, int idx);
include/dycni.h:	dyt (*GetArraySr)(dycArray arr, int idx);
include/dycni.h:	void *(*GetArraySp)(dycArray arr, int idx);
include/dycni.h:	void (*SetArraySsb)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArraySub)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArraySss)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArraySus)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArraySi)(dycArray arr, int idx, int val);
include/dycni.h:	void (*SetArraySl)(dycArray arr, int idx, s64 val);
include/dycni.h:	void (*SetArraySf)(dycArray arr, int idx, float val);
include/dycni.h:	void (*SetArraySd)(dycArray arr, int idx, double val);
include/dycni.h:	void (*SetArraySr)(dycArray arr, int idx, dyt val);
include/dycni.h:	void (*SetArraySp)(dycArray arr, int idx, void *val);
include/dycni.h:	dycArray (*NewArrayM)(char *sig, int ord, int *sz);
include/dycni.h:	dycArray (*NewArrayM2)(char *sig, int sz0, int sz1);
include/dycni.h:	dycArray (*NewArrayM3)(char *sig, int sz0, int sz1, int sz2);
include/dycni.h:	dycArray (*NewArrayM4)(char *sig, int sz0, int sz1, int sz2, int sz3);
include/dycni.h:	dycArray (*NewArrayM5)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4);
include/dycni.h:	dycArray (*NewArrayM6)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5);
include/dycni.h:	dycArray (*NewArrayM7)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6);
include/dycni.h:	dycArray (*NewArrayM8)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7);
include/dycni.h:	dycArray (*NewArrayM9)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8);
include/dycni.h:	dycArray (*NewArrayM10)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8, int sz9);
include/dycni.h:	dycArray (*NewArrayM11)(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10);
include/dycni.h:	dycArray (*NewArrayM12)(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10, int sz11);
include/dycni.h:	dycArrayN (*NewArrayN)(char *sig, int ord, int *sz);
include/dycni.h:	int (*ArrayNP)(dyt p);
include/dycni.h:	int (*ArrayNSigP)(dyt p, char *sig);
include/dycni.h:	int (*ArrayNSigOrdP)(dyt p, char *sig, int ord);
include/dycni.h:	void *(*ArrayNV)(dycArrayN arr);
include/dycni.h:	int *(*dycArrayNSz)(dycArrayN arr);
include/dycni.h:	int (*ArrayNCnt)(dycArrayN arr);
include/dycni.h:	int (*ArrayNOrd)(dycArrayN arr);
include/dycni.h:	char *(*ArrayNSig)(dycArrayN arr);
include/dycni.h:	int (*ArrayNStep)(dycArrayN arr);
include/dycni.h:	void *(*ArrayNIdxPtr)(dycArrayN arr, int *idx);
include/dycni.h:	void *(*ArrayNIdxPtrBC)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNsb)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNub)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNss)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNus)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNi)(dycArrayN arr, int *idx);
include/dycni.h:	s64 (*GetArrayNl)(dycArrayN arr, int *idx);
include/dycni.h:	float (*GetArrayNf)(dycArrayN arr, int *idx);
include/dycni.h:	double (*GetArrayNd)(dycArrayN arr, int *idx);
include/dycni.h:	dyt (*GetArrayNr)(dycArrayN arr, int *idx);
include/dycni.h:	void *(*GetArrayNp)(dycArrayN arr, int *idx);
include/dycni.h:	void (*SetArrayNsb)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNub)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNss)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNus)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNi)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNl)(dycArrayN arr, int *idx, s64 val);
include/dycni.h:	void (*SetArrayNf)(dycArrayN arr, int *idx, float val);
include/dycni.h:	void (*SetArrayNd)(dycArrayN arr, int *idx, double val);
include/dycni.h:	void (*SetArrayNr)(dycArrayN arr, int *idx, dyt val);
include/dycni.h:	void (*SetArrayNp)(dycArrayN arr, int *idx, void *val);
include/dycni.h:	int (*GetArrayNSsb)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNSub)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNSss)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNSus)(dycArrayN arr, int *idx);
include/dycni.h:	int (*GetArrayNSi)(dycArrayN arr, int *idx);
include/dycni.h:	s64 (*GetArrayNSl)(dycArrayN arr, int *idx);
include/dycni.h:	float (*GetArrayNSf)(dycArrayN arr, int *idx);
include/dycni.h:	double (*GetArrayNSd)(dycArrayN arr, int *idx);
include/dycni.h:	dyt (*GetArrayNSr)(dycArrayN arr, int *idx);
include/dycni.h:	void *(*GetArrayNSp)(dycArrayN arr, int *idx);
include/dycni.h:	void (*SetArrayNSsb)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNSub)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNSss)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNSus)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNSi)(dycArrayN arr, int *idx, int val);
include/dycni.h:	void (*SetArrayNSl)(dycArrayN arr, int *idx, s64 val);
include/dycni.h:	void (*SetArrayNSf)(dycArrayN arr, int *idx, float val);
include/dycni.h:	void (*SetArrayNSd)(dycArrayN arr, int *idx, double val);
include/dycni.h:	void (*SetArrayNSr)(dycArrayN arr, int *idx, dyt val);
include/dycni.h:	void (*SetArrayNSp)(dycArrayN arr, int *idx, void *val);
include/dycni.h:	void *(*Array2IdxPtr)(dycArrayN arr, int y, int x);
include/dycni.h:	void *(*Array2IdxPtrBC)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2sb)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2ub)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2ss)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2us)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2i)(dycArrayN arr, int y, int x);
include/dycni.h:	s64 (*GetArray2l)(dycArrayN arr, int y, int x);
include/dycni.h:	float (*GetArray2f)(dycArrayN arr, int y, int x);
include/dycni.h:	double (*GetArray2d)(dycArrayN arr, int y, int x);
include/dycni.h:	dyt (*GetArray2r)(dycArrayN arr, int y, int x);
include/dycni.h:	void *(*GetArray2p)(dycArrayN arr, int y, int x);
include/dycni.h:	void (*SetArray2sb)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2ub)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2ss)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2us)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2i)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2l)(dycArrayN arr, int y, int x, s64 val);
include/dycni.h:	void (*SetArray2f)(dycArrayN arr, int y, int x, float val);
include/dycni.h:	void (*SetArray2d)(dycArrayN arr, int y, int x, double val);
include/dycni.h:	void (*SetArray2r)(dycArrayN arr, int y, int x, dyt val);
include/dycni.h:	void (*SetArray2p)(dycArrayN arr, int y, int x, void *val);
include/dycni.h:	int (*GetArray2Ssb)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2Sub)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2Sss)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2Sus)(dycArrayN arr, int y, int x);
include/dycni.h:	int (*GetArray2Si)(dycArrayN arr, int y, int x);
include/dycni.h:	s64 (*GetArray2Sl)(dycArrayN arr, int y, int x);
include/dycni.h:	float (*GetArray2Sf)(dycArrayN arr, int y, int x);
include/dycni.h:	double (*GetArray2Sd)(dycArrayN arr, int y, int x);
include/dycni.h:	dyt (*GetArray2Sr)(dycArrayN arr, int y, int x);
include/dycni.h:	void *(*GetArray2Sp)(dycArrayN arr, int y, int x);
include/dycni.h:	void (*SetArray2Ssb)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2Sub)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2Sss)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2Sus)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2Si)(dycArrayN arr, int y, int x, int val);
include/dycni.h:	void (*SetArray2Sl)(dycArrayN arr, int y, int x, s64 val);
include/dycni.h:	void (*SetArray2Sf)(dycArrayN arr, int y, int x, float val);
include/dycni.h:	void (*SetArray2Sd)(dycArrayN arr, int y, int x, double val);
include/dycni.h:	void (*SetArray2Sr)(dycArrayN arr, int y, int x, dyt val);
include/dycni.h:	void (*SetArray2Sp)(dycArrayN arr, int y, int x, void *val);
include/dycni.h:	void *(*Array3IdxPtr)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	void *(*Array3IdxPtrBC)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3sb)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3ub)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3ss)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3us)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3i)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	s64 (*GetArray3l)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	float (*GetArray3f)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	double (*GetArray3d)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	dyt (*GetArray3r)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	void *(*GetArray3p)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	void (*SetArray3sb)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3ub)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3ss)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3us)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3i)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3l)(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni.h:	void (*SetArray3f)(dycArrayN arr, int z, int y, int x, float val);
include/dycni.h:	void (*SetArray3d)(dycArrayN arr, int z, int y, int x, double val);
include/dycni.h:	void (*SetArray3r)(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni.h:	void (*SetArray3p)(dycArrayN arr, int z, int y, int x, void *val);
include/dycni.h:	int (*GetArray3Ssb)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3Sub)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3Sss)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3Sus)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	int (*GetArray3Si)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	s64 (*GetArray3Sl)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	float (*GetArray3Sf)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	double (*GetArray3Sd)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	dyt (*GetArray3Sr)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	void *(*GetArray3Sp)(dycArrayN arr, int z, int y, int x);
include/dycni.h:	void (*SetArray3Ssb)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3Sub)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3Sss)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3Sus)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3Si)(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:	void (*SetArray3Sl)(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni.h:	void (*SetArray3Sf)(dycArrayN arr, int z, int y, int x, float val);
include/dycni.h:	void (*SetArray3Sd)(dycArrayN arr, int z, int y, int x, double val);
include/dycni.h:	void (*SetArray3Sr)(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni.h:	void (*SetArray3Sp)(dycArrayN arr, int z, int y, int x, void *val);
include/dycni.h:extern struct DYCNI_s *DYCNI_InitGet();
include/dycni.h:	if(tmp)return(tmp);
include/dycni.h:	tmp=DYCNI_InitGet();
include/dycni.h:	return(tmp);
include/dycni.h:	{ return(dycni->ObjectP(obj)); }
include/dycni.h:	{ return(dycni->ClassP(obj)); }
include/dycni.h:	{ return(dycni->SlotP(obj)); }
include/dycni.h:	{ return(dycni->MethodP(obj)); }
include/dycni.h:	{ dycni->BeginClass(name, super); }
include/dycni.h:	{ return(dycni->EndClass()); }
include/dycni.h:	{ dycni->BeginClassAnon(super); }
include/dycni.h:	{ return(dycni->EndClassAnon()); }
include/dycni.h:	{ dycni->ClassSuper(name); }
include/dycni.h:	{ dycni->SlotBasic(name, sig); }
include/dycni.h:	{ dycni->SlotStatic(name, sig); }
include/dycni.h:	{ dycni->SlotInit(name, sig); }
include/dycni.h:	{ dycni->SlotStatici(name, sig, val); }
include/dycni.h:	{ dycni->SlotStaticl(name, sig, val); }
include/dycni.h:	{ dycni->SlotStaticf(name, sig, val); }
include/dycni.h:	{ dycni->SlotStaticd(name, sig, val); }
include/dycni.h:	{ dycni->SlotStaticU(name, sig, val); }
include/dycni.h:	{ dycni->SlotIniti(name, sig, val); }
include/dycni.h:	{ dycni->SlotInitl(name, sig, val); }
include/dycni.h:	{ dycni->SlotInitf(name, sig, val); }
include/dycni.h:	{ dycni->SlotInitd(name, sig, val); }
include/dycni.h:	{ dycni->SlotInitU(name, sig, val); }
include/dycni.h:	{ dycni->SlotDelegate(name, cname); }
include/dycni.h:	{ dycni->SlotStaticDelegate(name, cname); }
include/dycni.h:	{ dycni->MethodBasic(name, sig); }
include/dycni.h:	{ dycni->MethodStatic(name, sig); }
include/dycni.h:	{ dycni->MethodFunc(name, sig, fcn); }
include/dycni.h:	{ dycni->MethodStaticFunc(name, sig, fcn); }
include/dycni.h:	{ dycni->MethodCFunc(name, sig, fcn); }
include/dycni.h:	{ dycni->MethodCFuncData(name, sig, fcn, data); }
include/dycni.h:static void dycMethodCSelf(char *name, char *sig, void *fcn);
include/dycni.h:	{ dycni->MethodCSelf(name, sig, fcn); }
include/dycni.h:static void dycMethodCSelfData(char *name, char *sig, void *fcn, void *data);
include/dycni.h:	{ dycni->MethodCSelfData(name, sig, fcn, data); }
include/dycni.h:	{ dycni->MethodStaticCFunc(name, sig, fcn); }
include/dycni.h:	{ dycni->MethodStaticCFuncData(name, sig, fcn, data); }
include/dycni.h:	{ dycni->MethodStaticCSelf(name, sig, fcn); }
include/dycni.h:	{ dycni->MethodStaticCSelfData(name, sig, fcn, data); }
include/dycni.h:	{ dycni->SlotMethod(name, sig); }
include/dycni.h:	{ dycni->StaticSlotMethod(name, sig); }
include/dycni.h:static void dycClassInterface(char *name);
include/dycni.h:	{ dycni->ClassInterface(name); }
include/dycni.h:static void dycBeginIface(char *name, char *super);
include/dycni.h:	{ dycni->BeginIface(name, super); }
include/dycni.h:static dycClass dycEndIface();
include/dycni.h:	{ return(dycni->EndIface()); }
include/dycni.h:	{ dycni->IfaceSuper(name); }
include/dycni.h:	{ dycni->IfaceMethod(name, sig); }
include/dycni.h:	{ dycni->IfaceSlot(name, sig); }
include/dycni.h:	{ dycni->BeginStruct(name); }
include/dycni.h:	{ return(dycni->EndStruct()); }
include/dycni.h:	{ return(dycni->GetClass(name)); }
include/dycni.h:	{ return(dycni->Alloc(inf)); }
include/dycni.h:	{ return(dycni->SubclassP(info, super)); }
include/dycni.h:	{ return(dycni->InstanceP(obj, inf)); }
include/dycni.h:	{ return(dycni->GetObjClass(obj)); }
include/dycni.h:	{ return(dycni->GetClassSuper(inf)); }
include/dycni.h:	{ return(dycni->GetClassName(inf)); }
include/dycni.h:	{ return(dycni->GetObjClassName(obj)); }
include/dycni.h:	{ return(dycni->GetClassVersion(inf)); }
include/dycni.h:	{ return(dycni->GetStructSize(vinf)); }
include/dycni.h:	{ return(dycni->GetVersionClass(vinf)); }
include/dycni.h:	{ return(dycni->GetSlotName(idx)); }
include/dycni.h:	{ return(dycni->GetSlotSig(idx)); }
include/dycni.h:	{ return(dycni->GetSlotClass(idx)); }
include/dycni.h:	{ return(dycni->GetMethodName(idx)); }
include/dycni.h:	{ return(dycni->GetMethodSig(idx)); }
include/dycni.h:	{ return(dycni->GetMethodClass(idx)); }
include/dycni.h:	{ return(dycni->IdxSlot(info, name)); }
include/dycni.h:	{ return(dycni->IdxObjSlot(obj, name)); }
include/dycni.h:	{ return(dycni->IdxMethod(inf, name, sig)); }
include/dycni.h:	{ return(dycni->IdxObjMethod(obj, name, sig)); }
include/dycni.h:	{ return(dycni->GetSlotPtr(obj, idx)); }
include/dycni.h:	{ return(dycni->GetInitPtr(inf, idx)); }
include/dycni.h:	{ return(dycni->GetStaticPtr(inf, idx)); }
include/dycni.h:static void *dycGetStructPtr(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:	{ return(dycni->GetStructPtr(vinf, obj, idx)); }
include/dycni.h:	{ return(dycni->PtrSlot(obj, name)); }
include/dycni.h:	{ return(dycni->PtrStaticSlot(info, name)); }
include/dycni.h:	{ return(dycni->PtrInitSlot(info, name)); }
include/dycni.h:	{ return(dycni->PtrStructSlot(vinf, obj, name)); }
include/dycni.h:	{ return(dycni->PtrInstanceOf(obj, name)); }
include/dycni.h:	{ return(dycni->SubclassOf(name, super)); }
include/dycni.h:static dyt dycLookupMethodSig(dycObject obj, char *name, char *sig);
include/dycni.h:static dyt dycGetMethodFunc(dycClass inf, dycMethod idx);
include/dycni.h:static dyt dycGetObjMethodFunc(dycObject obj, dycMethod idx);
include/dycni.h:static void dycSetMethodFunc(dycClass inf, dycMethod idx, dyt fcn);
include/dycni.h:static void dycSetObjMethodFunc(dycObject obj, dycMethod idx, dyt fcn);
include/dycni.h:static dycSlot dycAddObjSlot(dycObject obj, char *name, char *sig);
include/dycni.h:static dycMethod dycAddObjMethod(dycObject obj, char *name, char *sig);
include/dycni.h:static dycObject dycCloneObject(dycObject obj);
include/dycni.h:static dycObject dycGetObjDelegate(dycObject obj, char *name);
include/dycni.h:static void dycSetObjDelegate(dycObject obj, char *name, dycObject obj1);
include/dycni.h:static dycSlot *dycEnumSlotArray(dycClass inf);
include/dycni.h:static dycMethod *dycEnumMethodArray(dycClass inf);
include/dycni.h:static dycSlot *dycEnumClassSlotArray(char *name);
include/dycni.h:static dycMethod *dycEnumClassMethodArray(char *name);
include/dycni.h:static dycObject dycAllocClass(char *name);
include/dycni.h:static void *dycPtrClassSlot(char *cname, char *sname);
include/dycni.h:static dycSlot dycIdxClassSlot(char *cname, char *sname);
include/dycni.h:static dycMethod dycIdxClassMethod(char *cname, char *name, char *sig);
include/dycni.h:static dyt dycGetSlot(dycObject obj, char *name);
include/dycni.h:static dyt dycGetSlotr(dycObject obj, char *name);
include/dycni.h:static void *dycGetSlotp(dycObject obj, char *name);
include/dycni.h:static int dycGetSlotsb(dycObject obj, char *name);
include/dycni.h:static int dycGetSlotub(dycObject obj, char *name);
include/dycni.h:static int dycGetSlotss(dycObject obj, char *name);
include/dycni.h:static int dycGetSlotus(dycObject obj, char *name);
include/dycni.h:static int dycGetSloti(dycObject obj, char *name);
include/dycni.h:static s64 dycGetSlotl(dycObject obj, char *name);
include/dycni.h:static float dycGetSlotf(dycObject obj, char *name);
include/dycni.h:static double dycGetSlotd(dycObject obj, char *name);
include/dycni.h:static int dycSetSlot(dycObject obj, char *name, dyt val);
include/dycni.h:static int dycSetSlotr(dycObject obj, char *name, dyt val);
include/dycni.h:static int dycSetSlotp(dycObject obj, char *name, void *val);
include/dycni.h:static int dycSetSlotsb(dycObject obj, char *name, int val);
include/dycni.h:static int dycSetSlotub(dycObject obj, char *name, int val);
include/dycni.h:static int dycSetSlotss(dycObject obj, char *name, int val);
include/dycni.h:static int dycSetSlotus(dycObject obj, char *name, int val);
include/dycni.h:static int dycSetSloti(dycObject obj, char *name, int val);
include/dycni.h:static int dycSetSlotl(dycObject obj, char *name, s64 val);
include/dycni.h:static int dycSetSlotf(dycObject obj, char *name, float val);
include/dycni.h:static int dycSetSlotd(dycObject obj, char *name, double val);
include/dycni.h:static int dycGetsb(dycObject obj, dycSlot idx);
include/dycni.h:static int dycGetub(dycObject obj, dycSlot idx);
include/dycni.h:static int dycGetss(dycObject obj, dycSlot idx);
include/dycni.h:static int dycGetus(dycObject obj, dycSlot idx);
include/dycni.h:static int dycGeti(dycObject obj, dycSlot idx);
include/dycni.h:static s64 dycGetl(dycObject obj, dycSlot idx);
include/dycni.h:static float dycGetf(dycObject obj, dycSlot idx);
include/dycni.h:static double dycGetd(dycObject obj, dycSlot idx);
include/dycni.h:static dyt dycGetr(dycObject obj, dycSlot idx);
include/dycni.h:static void *dycGetp(dycObject obj, dycSlot idx);
include/dycni.h:static void dycSetsb(dycObject obj, dycSlot idx, int val);
include/dycni.h:static void dycSetub(dycObject obj, dycSlot idx, int val);
include/dycni.h:static void dycSetss(dycObject obj, dycSlot idx, int val);
include/dycni.h:static void dycSetus(dycObject obj, dycSlot idx, int val);
include/dycni.h:static void dycSeti(dycObject obj, dycSlot idx, int val);
include/dycni.h:static void dycSetl(dycObject obj, dycSlot idx, s64 val);
include/dycni.h:static void dycSetf(dycObject obj, dycSlot idx, float val);
include/dycni.h:static void dycSetd(dycObject obj, dycSlot idx, double val);
include/dycni.h:static void dycSetr(dycObject obj, dycSlot idx, dyt val);
include/dycni.h:static void dycSetp(dycObject obj, dycSlot idx, void *val);
include/dycni.h:static int dycGetStaticsb(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetStaticub(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetStaticss(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetStaticus(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetStatici(dycClass inf, dycSlot idx);
include/dycni.h:static s64 dycGetStaticl(dycClass inf, dycSlot idx);
include/dycni.h:static float dycGetStaticf(dycClass inf, dycSlot idx);
include/dycni.h:static double dycGetStaticd(dycClass inf, dycSlot idx);
include/dycni.h:static dyt dycGetStaticr(dycClass inf, dycSlot idx);
include/dycni.h:static void *dycGetStaticp(dycClass inf, dycSlot idx);
include/dycni.h:static void dycSetStaticsb(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetStaticub(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetStaticss(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetStaticus(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetStatici(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetStaticl(dycClass inf, dycSlot idx, s64 val);
include/dycni.h:static void dycSetStaticf(dycClass inf, dycSlot idx, float val);
include/dycni.h:static void dycSetStaticd(dycClass inf, dycSlot idx, double val);
include/dycni.h:static void dycSetStaticr(dycClass inf, dycSlot idx, dyt val);
include/dycni.h:static void dycSetStaticp(dycClass inf, dycSlot idx, void *val);
include/dycni.h:static int dycGetInitsb(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetInitub(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetInitss(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetInitus(dycClass inf, dycSlot idx);
include/dycni.h:static int dycGetIniti(dycClass inf, dycSlot idx);
include/dycni.h:static s64 dycGetInitl(dycClass inf, dycSlot idx);
include/dycni.h:static float dycGetInitf(dycClass inf, dycSlot idx);
include/dycni.h:static double dycGetInitd(dycClass inf, dycSlot idx);
include/dycni.h:static dyt dycGetInitr(dycClass inf, dycSlot idx);
include/dycni.h:static void *dycGetInitp(dycClass inf, dycSlot idx);
include/dycni.h:static void dycSetInitsb(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetInitub(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetInitss(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetInitus(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetIniti(dycClass inf, dycSlot idx, int val);
include/dycni.h:static void dycSetInitl(dycClass inf, dycSlot idx, s64 val);
include/dycni.h:static void dycSetInitf(dycClass inf, dycSlot idx, float val);
include/dycni.h:static void dycSetInitd(dycClass inf, dycSlot idx, double val);
include/dycni.h:static void dycSetInitr(dycClass inf, dycSlot idx, dyt val);
include/dycni.h:static void dycSetInitp(dycClass inf, dycSlot idx, void *val);
include/dycni.h:static int dycGetStructsb(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static int dycGetStructub(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static int dycGetStructss(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static int dycGetStructus(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static int dycGetStructi(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static s64 dycGetStructl(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static float dycGetStructf(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static double dycGetStructd(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static dyt dycGetStructr(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static void *dycGetStructp(dycClassV vinf, void *obj, dycSlot idx);
include/dycni.h:static void dycSetStructsb(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:static void dycSetStructub(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:static void dycSetStructss(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:static void dycSetStructus(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:static void dycSetStructi(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni.h:static void dycSetStructl(dycClassV vinf, void *obj, dycSlot idx, s64 val);
include/dycni.h:static void dycSetStructf(dycClassV vinf, void *obj, dycSlot idx, float val);
include/dycni.h:static void dycSetStructd(dycClassV vinf, void *obj, dycSlot idx, double val);
include/dycni.h:static void dycSetStructr(dycClassV vinf, void *obj, dycSlot idx, dyt val);
include/dycni.h:static void dycSetStructp(dycClassV vinf, void *obj, dycSlot idx, void *val);
include/dycni.h:static dycObject dycNewClass(char *name);
include/dycni.h:static dycObject dycNewInitClass(char *name, char *sig, ...);
include/dycni.h:static dycObject dycNewInitClassV(char *name, char *sig, va_list args);
include/dycni.h:static dycObject dycNewInitClassU(char *name, char *sig, void **args);
include/dycni.h:static dycObject dycNew(dycClass inf);
include/dycni.h:static dycObject dycNewInit(dycClass inf, char *sig, ...);
include/dycni.h:static dycObject dycNewInitV(dycClass inf, char *sig, va_list args);
include/dycni.h:static dycObject dycNewInitU(dycClass inf, char *sig, void **args);
include/dycni.h:static void *dycCallSigU(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:static void *dycCallSigV(dycObject obj, char *name, char *sig, va_list args);
include/dycni.h:static void *dycCallSig(dycObject obj, char *name, char *sig, ...);
include/dycni.h:static dyt dycCallSigVr(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:static int dycCallSigVi(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:static s64 dycCallSigVl(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:static float dycCallSigVf(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:static double dycCallSigVd(dycObject obj, char *name, char *sig, va_list lst);
include/dycni.h:static dyt dycCallSigUr(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:static int dycCallSigUi(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:static s64 dycCallSigUl(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:static float dycCallSigUf(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:static double dycCallSigUd(dycObject obj, char *name, char *sig, void **args);
include/dycni.h:static int dycCallSigi(dycObject obj, char *name, char *sig, ...);
include/dycni.h:static s64 dycCallSigl(dycObject obj, char *name, char *sig, ...);
include/dycni.h:static float dycCallSigf(dycObject obj, char *name, char *sig, ...);
include/dycni.h:static double dycCallSigd(dycObject obj, char *name, char *sig, ...);
include/dycni.h:static void *dycCallU(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static void *dycCallV(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static void *dycCall(dycObject obj, dycMethod mth, ...);
include/dycni.h:static int dycCallUi(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static s64 dycCallUl(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static float dycCallUf(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static double dycCallUd(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static dyt dycCallUr(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static void *dycCallUp(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static void dycCallUv(dycObject obj, dycMethod mth, void **args);
include/dycni.h:static int dycCallVi(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static s64 dycCallVl(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static float dycCallVf(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static double dycCallVd(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static dyt dycCallVr(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static void *dycCallVp(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static void dycCallVv(dycObject obj, dycMethod mth, va_list args);
include/dycni.h:static int dycCalli(dycObject obj, dycMethod mth, ...);
include/dycni.h:static s64 dycCalll(dycObject obj, dycMethod mth, ...);
include/dycni.h:static float dycCallf(dycObject obj, dycMethod mth, ...);
include/dycni.h:static double dycCalld(dycObject obj, dycMethod mth, ...);
include/dycni.h:static dyt dycCallr(dycObject obj, dycMethod mth, ...);
include/dycni.h:static void *dycCallp(dycObject obj, dycMethod mth, ...);
include/dycni.h:static void dycCallv(dycObject obj, dycMethod mth, ...);
include/dycni.h:static void *dycCallStaticU(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static void *dycCallStaticV(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static void *dycCallStatic(dycClass inf, dycMethod mth, ...);
include/dycni.h:static int dycCallStaticUi(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static s64 dycCallStaticUl(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static float dycCallStaticUf(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static double dycCallStaticUd(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static dyt dycCallStaticUr(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static void *dycCallStaticUp(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static void dycCallStaticUv(dycClass inf, dycMethod mth, void **args);
include/dycni.h:static int dycCallStaticVi(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static s64 dycCallStaticVl(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static float dycCallStaticVf(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static double dycCallStaticVd(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static dyt dycCallStaticVr(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static void *dycCallStaticVp(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static void dycCallStaticVv(dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static int dycCallStatici(dycClass inf, dycMethod mth, ...);
include/dycni.h:static s64 dycCallStaticl(dycClass inf, dycMethod mth, ...);
include/dycni.h:static float dycCallStaticf(dycClass inf, dycMethod mth, ...);
include/dycni.h:static double dycCallStaticd(dycClass inf, dycMethod mth, ...);
include/dycni.h:static dyt dycCallStaticr(dycClass inf, dycMethod mth, ...);
include/dycni.h:static void *dycCallStaticp(dycClass inf, dycMethod mth, ...);
include/dycni.h:static void dycCallStaticv(dycClass inf, dycMethod mth, ...);
include/dycni.h:static void *dycCallAsU(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static void *dycCallAsV(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static void *dycCallAs(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static int dycCallAsUi(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static s64 dycCallAsUl(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static float dycCallAsUf(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static double dycCallAsUd(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static dyt dycCallAsUr(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static void *dycCallAsUp(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static void dycCallAsUv(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni.h:static int dycCallAsVi(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static s64 dycCallAsVl(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static float dycCallAsVf(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static double dycCallAsVd(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static dyt dycCallAsVr(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static void *dycCallAsVp(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static void dycCallAsVv(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni.h:static int dycCallAsi(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static s64 dycCallAsl(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static float dycCallAsf(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static double dycCallAsd(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static dyt dycCallAsr(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static void *dycCallAsp(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static void dycCallAsv(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni.h:static void *dycCallStructU(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static void *dycCallStructV(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static void *dycCallStruct(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static int dycCallStructUi(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static s64 dycCallStructUl(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static float dycCallStructUf(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static double dycCallStructUd(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static dyt dycCallStructUr(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static void *dycCallStructUp(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static void dycCallStructUv(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni.h:static int dycCallStructVi(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static s64 dycCallStructVl(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static float dycCallStructVf(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static double dycCallStructVd(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static dyt dycCallStructVr(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static void *dycCallStructVp(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static void dycCallStructVv(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni.h:static int dycCallStructi(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static s64 dycCallStructl(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static float dycCallStructf(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static double dycCallStructd(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static dyt dycCallStructr(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static void *dycCallStructp(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static void dycCallStructv(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni.h:static dycArray dycNewArray(char *sig, int cnt);
include/dycni.h:static int dycArrayP(dyt p);
include/dycni.h:static int dycArraySigP(dyt p, char *sig);
include/dycni.h:static void *dycArrayV(dycArray arr);
include/dycni.h:static int dycArraySz(dycArray arr);
include/dycni.h:static char *dycArraySig(dycArray arr);
include/dycni.h:static int dycArrayStep(dycArray arr);
include/dycni.h:static void *dycArrayIdxPtr(dycArray arr, int idx);
include/dycni.h:static int dycGetArraysb(dycArray arr, int idx);
include/dycni.h:static int dycGetArrayub(dycArray arr, int idx);
include/dycni.h:static int dycGetArrayss(dycArray arr, int idx);
include/dycni.h:static int dycGetArrayus(dycArray arr, int idx);
include/dycni.h:static int dycGetArrayi(dycArray arr, int idx);
include/dycni.h:static s64 dycGetArrayl(dycArray arr, int idx);
include/dycni.h:static float dycGetArrayf(dycArray arr, int idx);
include/dycni.h:static double dycGetArrayd(dycArray arr, int idx);
include/dycni.h:static dyt dycGetArrayr(dycArray arr, int idx);
include/dycni.h:static void *dycGetArrayp(dycArray arr, int idx);
include/dycni.h:static void dycSetArraysb(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArrayub(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArrayss(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArrayus(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArrayi(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArrayl(dycArray arr, int idx, s64 val);
include/dycni.h:static void dycSetArrayf(dycArray arr, int idx, float val);
include/dycni.h:static void dycSetArrayd(dycArray arr, int idx, double val);
include/dycni.h:static void dycSetArrayr(dycArray arr, int idx, dyt val);
include/dycni.h:static void dycSetArrayp(dycArray arr, int idx, void *val);
include/dycni.h:static void *dycArrayIdxPtrBC(dycArray arr, int idx);
include/dycni.h:static int dycGetArraySsb(dycArray arr, int idx);
include/dycni.h:static int dycGetArraySub(dycArray arr, int idx);
include/dycni.h:static int dycGetArraySss(dycArray arr, int idx);
include/dycni.h:static int dycGetArraySus(dycArray arr, int idx);
include/dycni.h:static int dycGetArraySi(dycArray arr, int idx);
include/dycni.h:static s64 dycGetArraySl(dycArray arr, int idx);
include/dycni.h:static float dycGetArraySf(dycArray arr, int idx);
include/dycni.h:static double dycGetArraySd(dycArray arr, int idx);
include/dycni.h:static dyt dycGetArraySr(dycArray arr, int idx);
include/dycni.h:static void *dycGetArraySp(dycArray arr, int idx);
include/dycni.h:static void dycSetArraySsb(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArraySub(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArraySss(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArraySus(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArraySi(dycArray arr, int idx, int val);
include/dycni.h:static void dycSetArraySl(dycArray arr, int idx, s64 val);
include/dycni.h:static void dycSetArraySf(dycArray arr, int idx, float val);
include/dycni.h:static void dycSetArraySd(dycArray arr, int idx, double val);
include/dycni.h:static void dycSetArraySr(dycArray arr, int idx, dyt val);
include/dycni.h:static void dycSetArraySp(dycArray arr, int idx, void *val);
include/dycni.h:static dycArray DYC_NewArrayM_R(char *sig, int ord, int *sz);
include/dycni.h:static dycArray dycNewArrayM(char *sig, int ord, int *sz);
include/dycni.h:static dycArray dycNewArrayM2(char *sig, int sz0, int sz1);
include/dycni.h:static dycArray dycNewArrayM3(char *sig, int sz0, int sz1, int sz2);
include/dycni.h:static dycArray dycNewArrayM4(char *sig, int sz0, int sz1, int sz2, int sz3);
include/dycni.h:static dycArray dycNewArrayM5(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4);
include/dycni.h:static dycArray dycNewArrayM6(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5);
include/dycni.h:static dycArray dycNewArrayM7(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6);
include/dycni.h:static dycArray dycNewArrayM8(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7);
include/dycni.h:static dycArray dycNewArrayM9(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8);
include/dycni.h:static dycArray dycNewArrayM10(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8, int sz9);
include/dycni.h:static dycArray dycNewArrayM11(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10);
include/dycni.h:static dycArray dycNewArrayM12(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10, int sz11);
include/dycni.h:static dycArrayN dycNewArrayN(char *sig, int ord, int *sz);
include/dycni.h:static int dycArrayNP(dyt p);
include/dycni.h:static int dycArrayNSigP(dyt p, char *sig);
include/dycni.h:static int dycArrayNSigOrdP(dyt p, char *sig, int ord);
include/dycni.h:static void *dycArrayNV(dycArrayN arr);
include/dycni.h:static int *dycArrayNSz(dycArrayN arr);
include/dycni.h:static int dycArrayNCnt(dycArrayN arr);
include/dycni.h:static int dycArrayNOrd(dycArrayN arr);
include/dycni.h:static char *dycArrayNSig(dycArrayN arr);
include/dycni.h:static int dycArrayNStep(dycArrayN arr);
include/dycni.h:static void *dycArrayNIdxPtr(dycArrayN arr, int *idx);
include/dycni.h:static void *dycArrayNIdxPtrBC(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNsb(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNub(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNss(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNus(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNi(dycArrayN arr, int *idx);
include/dycni.h:static s64 dycGetArrayNl(dycArrayN arr, int *idx);
include/dycni.h:static float dycGetArrayNf(dycArrayN arr, int *idx);
include/dycni.h:static double dycGetArrayNd(dycArrayN arr, int *idx);
include/dycni.h:static dyt dycGetArrayNr(dycArrayN arr, int *idx);
include/dycni.h:static void *dycGetArrayNp(dycArrayN arr, int *idx);
include/dycni.h:static void dycSetArrayNsb(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNub(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNss(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNus(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNi(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNl(dycArrayN arr, int *idx, s64 val);
include/dycni.h:static void dycSetArrayNf(dycArrayN arr, int *idx, float val);
include/dycni.h:static void dycSetArrayNd(dycArrayN arr, int *idx, double val);
include/dycni.h:static void dycSetArrayNr(dycArrayN arr, int *idx, dyt val);
include/dycni.h:static void dycSetArrayNp(dycArrayN arr, int *idx, void *val);
include/dycni.h:static int dycGetArrayNSsb(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNSub(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNSss(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNSus(dycArrayN arr, int *idx);
include/dycni.h:static int dycGetArrayNSi(dycArrayN arr, int *idx);
include/dycni.h:static s64 dycGetArrayNSl(dycArrayN arr, int *idx);
include/dycni.h:static float dycGetArrayNSf(dycArrayN arr, int *idx);
include/dycni.h:static double dycGetArrayNSd(dycArrayN arr, int *idx);
include/dycni.h:static dyt dycGetArrayNSr(dycArrayN arr, int *idx);
include/dycni.h:static void *dycGetArrayNSp(dycArrayN arr, int *idx);
include/dycni.h:static void dycSetArrayNSsb(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNSub(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNSss(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNSus(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNSi(dycArrayN arr, int *idx, int val);
include/dycni.h:static void dycSetArrayNSl(dycArrayN arr, int *idx, s64 val);
include/dycni.h:static void dycSetArrayNSf(dycArrayN arr, int *idx, float val);
include/dycni.h:static void dycSetArrayNSd(dycArrayN arr, int *idx, double val);
include/dycni.h:static void dycSetArrayNSr(dycArrayN arr, int *idx, dyt val);
include/dycni.h:static void dycSetArrayNSp(dycArrayN arr, int *idx, void *val);
include/dycni.h:static void *dycArray2IdxPtr(dycArrayN arr, int y, int x);
include/dycni.h:static void *dycArray2IdxPtrBC(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2sb(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2ub(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2ss(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2us(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2i(dycArrayN arr, int y, int x);
include/dycni.h:static s64 dycGetArray2l(dycArrayN arr, int y, int x);
include/dycni.h:static float dycGetArray2f(dycArrayN arr, int y, int x);
include/dycni.h:static double dycGetArray2d(dycArrayN arr, int y, int x);
include/dycni.h:static dyt dycGetArray2r(dycArrayN arr, int y, int x);
include/dycni.h:static void *dycGetArray2p(dycArrayN arr, int y, int x);
include/dycni.h:static void dycSetArray2sb(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2ub(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2ss(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2us(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2i(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2l(dycArrayN arr, int y, int x, s64 val);
include/dycni.h:static void dycSetArray2f(dycArrayN arr, int y, int x, float val);
include/dycni.h:static void dycSetArray2d(dycArrayN arr, int y, int x, double val);
include/dycni.h:static void dycSetArray2r(dycArrayN arr, int y, int x, dyt val);
include/dycni.h:static void dycSetArray2p(dycArrayN arr, int y, int x, void *val);
include/dycni.h:static int dycGetArray2Ssb(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2Sub(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2Sss(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2Sus(dycArrayN arr, int y, int x);
include/dycni.h:static int dycGetArray2Si(dycArrayN arr, int y, int x);
include/dycni.h:static s64 dycGetArray2Sl(dycArrayN arr, int y, int x);
include/dycni.h:static float dycGetArray2Sf(dycArrayN arr, int y, int x);
include/dycni.h:static double dycGetArray2Sd(dycArrayN arr, int y, int x);
include/dycni.h:static dyt dycGetArray2Sr(dycArrayN arr, int y, int x);
include/dycni.h:static void *dycGetArray2Sp(dycArrayN arr, int y, int x);
include/dycni.h:static void dycSetArray2Ssb(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2Sub(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2Sss(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2Sus(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2Si(dycArrayN arr, int y, int x, int val);
include/dycni.h:static void dycSetArray2Sl(dycArrayN arr, int y, int x, s64 val);
include/dycni.h:static void dycSetArray2Sf(dycArrayN arr, int y, int x, float val);
include/dycni.h:static void dycSetArray2Sd(dycArrayN arr, int y, int x, double val);
include/dycni.h:static void dycSetArray2Sr(dycArrayN arr, int y, int x, dyt val);
include/dycni.h:static void dycSetArray2Sp(dycArrayN arr, int y, int x, void *val);
include/dycni.h:static void *dycArray3IdxPtr(dycArrayN arr, int z, int y, int x);
include/dycni.h:static void *dycArray3IdxPtrBC(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3sb(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3ub(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3ss(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3us(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3i(dycArrayN arr, int z, int y, int x);
include/dycni.h:static s64 dycGetArray3l(dycArrayN arr, int z, int y, int x);
include/dycni.h:static float dycGetArray3f(dycArrayN arr, int z, int y, int x);
include/dycni.h:static double dycGetArray3d(dycArrayN arr, int z, int y, int x);
include/dycni.h:static dyt dycGetArray3r(dycArrayN arr, int z, int y, int x);
include/dycni.h:static void *dycGetArray3p(dycArrayN arr, int z, int y, int x);
include/dycni.h:static void dycSetArray3sb(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3ub(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3ss(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3us(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3i(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3l(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni.h:static void dycSetArray3f(dycArrayN arr, int z, int y, int x, float val);
include/dycni.h:static void dycSetArray3d(dycArrayN arr, int z, int y, int x, double val);
include/dycni.h:static void dycSetArray3r(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni.h:static void dycSetArray3p(dycArrayN arr, int z, int y, int x, void *val);
include/dycni.h:static int dycGetArray3Ssb(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3Sub(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3Sss(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3Sus(dycArrayN arr, int z, int y, int x);
include/dycni.h:static int dycGetArray3Si(dycArrayN arr, int z, int y, int x);
include/dycni.h:static s64 dycGetArray3Sl(dycArrayN arr, int z, int y, int x);
include/dycni.h:static float dycGetArray3Sf(dycArrayN arr, int z, int y, int x);
include/dycni.h:static double dycGetArray3Sd(dycArrayN arr, int z, int y, int x);
include/dycni.h:static dyt dycGetArray3Sr(dycArrayN arr, int z, int y, int x);
include/dycni.h:static void *dycGetArray3Sp(dycArrayN arr, int z, int y, int x);
include/dycni.h:static void dycSetArray3Ssb(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3Sub(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3Sss(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3Sus(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3Si(dycArrayN arr, int z, int y, int x, int val);
include/dycni.h:static void dycSetArray3Sl(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni.h:static void dycSetArray3Sf(dycArrayN arr, int z, int y, int x, float val);
include/dycni.h:static void dycSetArray3Sd(dycArrayN arr, int z, int y, int x, double val);
include/dycni.h:static void dycSetArray3Sr(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni.h:static void dycSetArray3Sp(dycArrayN arr, int z, int y, int x, void *val);
include/jvmti.h: *  (the "License"); you may not use this file except in compliance with
include/jvmti.h:        Agent_OnLoad(JavaVM * vm, char *options, void *reserved);
include/jvmti.h:    JNIEXPORT void JNICALL Agent_OnUnload(JavaVM * vm);
include/jvmti.h:        ...);
include/jvmti.h:        jthread ** threads_ptr);
include/jvmti.h:    jvmtiError (JNICALL * SuspendThread) (jvmtiEnv * env, jthread thread);
include/jvmti.h:    jvmtiError (JNICALL * ResumeThread) (jvmtiEnv * env, jthread thread);
include/jvmti.h:        jthread thread, jobject exception);
include/jvmti.h:    jvmtiError (JNICALL * InterruptThread) (jvmtiEnv * env, jthread thread);
include/jvmti.h:        jvmtiThreadInfo * info_ptr);
include/jvmti.h:        owned_monitors_ptr);
include/jvmti.h:        jobject * monitor_ptr);
include/jvmti.h:        const void *arg, jint priority);
include/jvmti.h:        jthreadGroup ** groups_ptr);
include/jvmti.h:        info_ptr);
include/jvmti.h:        groups_ptr);
include/jvmti.h:        jthread thread, jint * count_ptr);
include/jvmti.h:        jint * thread_state_ptr);
include/jvmti.h:        jlocation * location_ptr);
include/jvmti.h:        jthread thread, jint depth);
include/jvmti.h:        jint slot, jobject * value_ptr);
include/jvmti.h:        jint slot, jint * value_ptr);
include/jvmti.h:        jint slot, jlong * value_ptr);
include/jvmti.h:        jint slot, jfloat * value_ptr);
include/jvmti.h:        jint slot, jdouble * value_ptr);
include/jvmti.h:        jint slot, jobject value);
include/jvmti.h:        jint depth, jint slot, jint value);
include/jvmti.h:        jint depth, jint slot, jlong value);
include/jvmti.h:        jint slot, jfloat value);
include/jvmti.h:        jint slot, jdouble value);
include/jvmti.h:        jrawMonitorID * monitor_ptr);
include/jvmti.h:        jrawMonitorID monitor);
include/jvmti.h:        jrawMonitorID monitor);
include/jvmti.h:        jrawMonitorID monitor);
include/jvmti.h:        jlong millis);
include/jvmti.h:        jrawMonitorID monitor);
include/jvmti.h:        jrawMonitorID monitor);
include/jvmti.h:        jlocation location);
include/jvmti.h:        jlocation location);
include/jvmti.h:        jclass clazz, jfieldID field);
include/jvmti.h:        jfieldID field);
include/jvmti.h:        jfieldID field);
include/jvmti.h:        jfieldID field);
include/jvmti.h:        jlong size, unsigned char **mem_ptr);
include/jvmti.h:    jvmtiError (JNICALL * Deallocate) (jvmtiEnv * env, unsigned char *mem);
include/jvmti.h:        char **generic_ptr);
include/jvmti.h:        jclass clazz, jint * status_ptr);
include/jvmti.h:        char **source_name_ptr);
include/jvmti.h:        jint * modifiers_ptr);
include/jvmti.h:        jmethodID ** methods_ptr);
include/jvmti.h:        jfieldID ** fields_ptr);
include/jvmti.h:        interfaces_ptr);
include/jvmti.h:        jboolean * is_interface_ptr);
include/jvmti.h:        jboolean * is_array_class_ptr);
include/jvmti.h:        jobject * classloader_ptr);
include/jvmti.h:        jint * hash_code_ptr);
include/jvmti.h:        info_ptr);
include/jvmti.h:        char **generic_ptr);
include/jvmti.h:        declaring_class_ptr);
include/jvmti.h:        jint * modifiers_ptr);
include/jvmti.h:        jboolean * is_synthetic_ptr);
include/jvmti.h:        char **generic_ptr);
include/jvmti.h:        declaring_class_ptr);
include/jvmti.h:        jint * modifiers_ptr);
include/jvmti.h:        jmethodID method, jint * max_ptr);
include/jvmti.h:        jint * size_ptr);
include/jvmti.h:        table_ptr);
include/jvmti.h:        jlocation * end_location_ptr);
include/jvmti.h:        table_ptr);
include/jvmti.h:        unsigned char **bytecodes_ptr);
include/jvmti.h:        jboolean * is_native_ptr);
include/jvmti.h:        jboolean * is_synthetic_ptr);
include/jvmti.h:        jclass ** classes_ptr);
include/jvmti.h:        jclass ** classes_ptr);
include/jvmti.h:    jvmtiError (JNICALL * PopFrame) (jvmtiEnv * env, jthread thread);
include/jvmti.h:        class_definitions);
include/jvmti.h:        jint * version_ptr);
include/jvmti.h:        capabilities_ptr);
include/jvmti.h:        **source_debug_extension_ptr);
include/jvmti.h:        jboolean * is_obsolete_ptr);
include/jvmti.h:        jvmtiError * results);
include/jvmti.h:        jvmtiError * results);
include/jvmti.h:        jint * thread_count_ptr);
include/jvmti.h:        stack_info_ptr);
include/jvmti.h:        void **data_ptr);
include/jvmti.h:        const void *data);
include/jvmti.h:        jint * count_ptr);
include/jvmti.h:        jobject object, jlong * tag_ptr);
include/jvmti.h:    jvmtiError (JNICALL * SetTag) (jvmtiEnv * env, jobject object, jlong tag);
include/jvmti.h:    jvmtiError (JNICALL * ForceGarbageCollection) (jvmtiEnv * env);
include/jvmti.h:        *user_data);
include/jvmti.h:        void *user_data);
include/jvmti.h:        void *user_data);
include/jvmti.h:        void *user_data);
include/jvmti.h:        jlong ** tag_result_ptr);
include/jvmti.h:        function_table);
include/jvmti.h:        function_table);
include/jvmti.h:        jint size_of_callbacks);
include/jvmti.h:        jvmtiEvent event_type);
include/jvmti.h:        ** extensions);
include/jvmti.h:        extensions);
include/jvmti.h:        callback);
include/jvmti.h:    jvmtiError (JNICALL * DisposeEnvironment) (jvmtiEnv * env);
include/jvmti.h:        jvmtiError error, char **name_ptr);
include/jvmti.h:        format_ptr);
include/jvmti.h:        char ***property_ptr);
include/jvmti.h:        char **value_ptr);
include/jvmti.h:        const char *value);
include/jvmti.h:    jvmtiError (JNICALL * GetPhase) (jvmtiEnv * env, jvmtiPhase * phase_ptr);
include/jvmti.h:        info_ptr);
include/jvmti.h:        jlong * nanos_ptr);
include/jvmti.h:        jvmtiTimerInfo * info_ptr);
include/jvmti.h:        jlong * nanos_ptr);
include/jvmti.h:        jvmtiTimerInfo * info_ptr);
include/jvmti.h:    jvmtiError (JNICALL * GetTime) (jvmtiEnv * env, jlong * nanos_ptr);
include/jvmti.h:        capabilities_ptr);
include/jvmti.h:        capabilities_ptr);
include/jvmti.h:        capabilities_ptr);
include/jvmti.h:        processor_count_ptr);
include/jvmti.h:        void **data_ptr);
include/jvmti.h:        const void *data);
include/jvmti.h:        *segment);
include/jvmti.h:        jboolean value);
include/jvmti.h:        jobject object, jlong * size_ptr);
include/jvmti.h:        return funcs->Allocate (this, size, mem_ptr);
include/jvmti.h:        return funcs->Deallocate (this, mem);
include/jvmti.h:        return funcs->GetThreadState (this, thread, thread_state_ptr);
include/jvmti.h:        return funcs->GetAllThreads (this, threads_count_ptr, threads_ptr);
include/jvmti.h:        return funcs->SuspendThread (this, thread);
include/jvmti.h:            results);
include/jvmti.h:        return funcs->ResumeThread (this, thread);
include/jvmti.h:            results);
include/jvmti.h:        return funcs->StopThread (this, thread, exception);
include/jvmti.h:        return funcs->InterruptThread (this, thread);
include/jvmti.h:        return funcs->GetThreadInfo (this, thread, info_ptr);
include/jvmti.h:            owned_monitors_ptr);
include/jvmti.h:        return funcs->GetCurrentContendedMonitor (this, thread, monitor_ptr);
include/jvmti.h:        return funcs->RunAgentThread (this, thread, proc, arg, priority);
include/jvmti.h:        return funcs->SetThreadLocalStorage (this, thread, data);
include/jvmti.h:        return funcs->GetThreadLocalStorage (this, thread, data_ptr);
include/jvmti.h:        return funcs->GetTopThreadGroups (this, group_count_ptr, groups_ptr);
include/jvmti.h:        return funcs->GetThreadGroupInfo (this, group, info_ptr);
include/jvmti.h:            groups_ptr);
include/jvmti.h:            max_frame_count, frame_buffer, count_ptr);
include/jvmti.h:            stack_info_ptr, thread_count_ptr);
include/jvmti.h:            stack_info_ptr);
include/jvmti.h:        return funcs->GetFrameCount (this, thread, count_ptr);
include/jvmti.h:        return funcs->PopFrame (this, thread);
include/jvmti.h:            location_ptr);
include/jvmti.h:        return funcs->NotifyFramePop (this, thread, depth);
include/jvmti.h:        return funcs->GetTag (this, object, tag_ptr);
include/jvmti.h:        return funcs->SetTag (this, object, tag);
include/jvmti.h:        return funcs->ForceGarbageCollection (this);
include/jvmti.h:            user_data);
include/jvmti.h:            user_data);
include/jvmti.h:            heap_object_callback, user_data);
include/jvmti.h:            user_data);
include/jvmti.h:            object_result_ptr, tag_result_ptr);
include/jvmti.h:        return funcs->GetLocalObject (this, thread, depth, slot, value_ptr);
include/jvmti.h:        return funcs->GetLocalInt (this, thread, depth, slot, value_ptr);
include/jvmti.h:        return funcs->GetLocalLong (this, thread, depth, slot, value_ptr);
include/jvmti.h:        return funcs->GetLocalFloat (this, thread, depth, slot, value_ptr);
include/jvmti.h:        return funcs->GetLocalDouble (this, thread, depth, slot, value_ptr);
include/jvmti.h:        return funcs->SetLocalObject (this, thread, depth, slot, value);
include/jvmti.h:        return funcs->SetLocalInt (this, thread, depth, slot, value);
include/jvmti.h:        return funcs->SetLocalLong (this, thread, depth, slot, value);
include/jvmti.h:        return funcs->SetLocalFloat (this, thread, depth, slot, value);
include/jvmti.h:        return funcs->SetLocalDouble (this, thread, depth, slot, value);
include/jvmti.h:        return funcs->SetBreakpoint (this, method, location);
include/jvmti.h:        return funcs->ClearBreakpoint (this, method, location);
include/jvmti.h:        return funcs->SetFieldAccessWatch (this, clazz, field);
include/jvmti.h:        return funcs->ClearFieldAccessWatch (this, clazz, field);
include/jvmti.h:        return funcs->SetFieldModificationWatch (this, clazz, field);
include/jvmti.h:        return funcs->ClearFieldModificationWatch (this, clazz, field);
include/jvmti.h:        return funcs->GetLoadedClasses (this, class_count_ptr, classes_ptr);
include/jvmti.h:            class_count_ptr, classes_ptr);
include/jvmti.h:        return funcs->GetClassSignature (this, clazz, signature_ptr, generic_ptr);
include/jvmti.h:        return funcs->GetClassStatus (this, clazz, status_ptr);
include/jvmti.h:        return funcs->GetSourceFileName (this, clazz, source_name_ptr);
include/jvmti.h:        return funcs->GetClassModifiers (this, clazz, modifiers_ptr);
include/jvmti.h:            methods_ptr);
include/jvmti.h:        return funcs->GetClassFields (this, clazz, field_count_ptr, fields_ptr);
include/jvmti.h:            interfaces_ptr);
include/jvmti.h:        return funcs->IsInterface (this, clazz, is_interface_ptr);
include/jvmti.h:        return funcs->IsArrayClass (this, clazz, is_array_class_ptr);
include/jvmti.h:        return funcs->GetClassLoader (this, clazz, classloader_ptr);
include/jvmti.h:            source_debug_extension_ptr);
include/jvmti.h:        return funcs->RedefineClasses (this, class_count, class_definitions);
include/jvmti.h:        return funcs->GetObjectSize (this, object, size_ptr);
include/jvmti.h:        return funcs->GetObjectHashCode (this, object, hash_code_ptr);
include/jvmti.h:        return funcs->GetObjectMonitorUsage (this, object, info_ptr);
include/jvmti.h:            signature_ptr, generic_ptr);
include/jvmti.h:            declaring_class_ptr);
include/jvmti.h:        return funcs->GetFieldModifiers (this, clazz, field, modifiers_ptr);
include/jvmti.h:        return funcs->IsFieldSynthetic (this, clazz, field, is_synthetic_ptr);
include/jvmti.h:            generic_ptr);
include/jvmti.h:        return funcs->GetMethodDeclaringClass (this, method, declaring_class_ptr);
include/jvmti.h:        return funcs->GetMethodModifiers (this, method, modifiers_ptr);
include/jvmti.h:        return funcs->GetMaxLocals (this, method, max_ptr);
include/jvmti.h:        return funcs->GetArgumentsSize (this, method, size_ptr);
include/jvmti.h:            table_ptr);
include/jvmti.h:            end_location_ptr);
include/jvmti.h:            table_ptr);
include/jvmti.h:            bytecodes_ptr);
include/jvmti.h:        return funcs->IsMethodNative (this, method, is_native_ptr);
include/jvmti.h:        return funcs->IsMethodSynthetic (this, method, is_synthetic_ptr);
include/jvmti.h:        return funcs->IsMethodObsolete (this, method, is_obsolete_ptr);
include/jvmti.h:        return funcs->CreateRawMonitor (this, name, monitor_ptr);
include/jvmti.h:        return funcs->DestroyRawMonitor (this, monitor);
include/jvmti.h:        return funcs->RawMonitorEnter (this, monitor);
include/jvmti.h:        return funcs->RawMonitorExit (this, monitor);
include/jvmti.h:        return funcs->RawMonitorWait (this, monitor, millis);
include/jvmti.h:        return funcs->RawMonitorNotify (this, monitor);
include/jvmti.h:        return funcs->RawMonitorNotifyAll (this, monitor);
include/jvmti.h:        return funcs->SetJNIFunctionTable (this, function_table);
include/jvmti.h:        return funcs->GetJNIFunctionTable (this, function_table);
include/jvmti.h:        return funcs->SetEventCallbacks (this, callbacks, size_of_callbacks);
include/jvmti.h:            event_thread);
include/jvmti.h:        return funcs->GenerateEvents (this, event_type);
include/jvmti.h:            extensions);
include/jvmti.h:        return funcs->GetExtensionEvents (this, extension_count_ptr, extensions);
include/jvmti.h:            callback);
include/jvmti.h:        return funcs->GetPotentialCapabilities (this, capabilities_ptr);
include/jvmti.h:        return funcs->AddCapabilities (this, capabilities_ptr);
include/jvmti.h:        return funcs->RelinquishCapabilities (this, capabilities_ptr);
include/jvmti.h:        return funcs->GetCapabilities (this, capabilities_ptr);
include/jvmti.h:        return funcs->GetCurrentThreadCpuTimerInfo (this, info_ptr);
include/jvmti.h:        return funcs->GetCurrentThreadCpuTime (this, nanos_ptr);
include/jvmti.h:        return funcs->GetThreadCpuTimerInfo (this, info_ptr);
include/jvmti.h:        return funcs->GetThreadCpuTime (this, thread, nanos_ptr);
include/jvmti.h:        return funcs->GetTimerInfo (this, info_ptr);
include/jvmti.h:        return funcs->GetTime (this, nanos_ptr);
include/jvmti.h:        return funcs->GetAvailableProcessors (this, processor_count_ptr);
include/jvmti.h:        return funcs->AddToBootstrapClassLoaderSearch (this, segment);
include/jvmti.h:        return funcs->GetSystemProperties (this, count_ptr, property_ptr);
include/jvmti.h:        return funcs->GetSystemProperty (this, property, value_ptr);
include/jvmti.h:        return funcs->SetSystemProperty (this, property, value);
include/jvmti.h:        return funcs->GetPhase (this, phase_ptr);
include/jvmti.h:        return funcs->DisposeEnvironment (this);
include/jvmti.h:        return funcs->SetEnvironmentLocalStorage (this, data);
include/jvmti.h:        return funcs->GetEnvironmentLocalStorage (this, data_ptr);
include/jvmti.h:        return funcs->GetVersionNumber (this, version_ptr);
include/jvmti.h:        return funcs->GetErrorName (this, error, name_ptr);
include/jvmti.h:        return funcs->SetVerboseFlag (this, flag, value);
include/jvmti.h:        return funcs->GetJLocationFormat (this, format_ptr);
include/jvmti_types.h: *  (the "License"); you may not use this file except in compliance with
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, void *arg);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, jthread thread);
include/jvmti_types.h:        jmethodID method, jlocation location);
include/jvmti_types.h:        jmethodID method, jlocation location);
include/jvmti_types.h:        jobject object, jfieldID field);
include/jvmti_types.h:        jobject object, jfieldID field, char signature_type, jvalue new_value);
include/jvmti_types.h:        jmethodID method, jboolean was_popped_by_exception);
include/jvmti_types.h:        jmethodID method);
include/jvmti_types.h:        jmethodID method, jboolean was_popped_by_exception, jvalue return_value);
include/jvmti_types.h:        jmethodID method, void *address, void **new_address_ptr);
include/jvmti_types.h:        jmethodID catch_method, jlocation catch_location);
include/jvmti_types.h:        jthread thread, jmethodID method, jlocation location, jobject exception);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, jthread thread);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, jthread thread);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, jthread thread, jclass clazz);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, jthread thread, jclass clazz);
include/jvmti_types.h:        jint * new_class_data_len, unsigned char **new_class_data);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env);
include/jvmti_types.h:        const jvmtiAddrLocationMap * almap, const void *compile_info);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, jmethodID method, const void *code_addr);
include/jvmti_types.h:        const char *name, const void *address, jint length);
include/jvmti_types.h:    typedef void (JNICALL * jvmtiEventDataDumpRequest) (jvmtiEnv * jvmti_env);
include/jvmti_types.h:    typedef void (JNICALL * jvmtiEventDataResetRequest) (jvmtiEnv * jvmti_env);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, jthread thread, jobject object);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, JNIEnv * jni_env, jthread thread, jobject object);
include/jvmti_types.h:        jobject object, jlong timeout);
include/jvmti_types.h:        jobject object, jboolean timed_out);
include/jvmti_types.h:        jobject object, jclass object_clazz, jlong size);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env, jlong tag);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env);
include/jvmti_types.h:        (jvmtiEnv * jvmti_env);
include/jvmti_types.h:        (JNICALL * jvmtiExtensionFunction) (jvmtiEnv * jvmti_env, ...);
include/jvmti_types.h:        (jlong class_tag, jlong size, jlong * tag_ptr, void *user_data);
include/jvmti_types.h:        jlong * tag_ptr, void *user_data);
include/jvmti_types.h:        jint slot, void *user_data);
include/jvmti_types.h:        void *user_data);
include/jvmti_types.h:    typedef void (JNICALL * jvmtiExtensionEvent) (jvmtiEnv * jvmti_env, ...);
include/bgbdy_autoi.h:void bgbrng_minemult();
include/bgbdy_autoi.h:void bgbrng_mineupdate();
include/bgbdy_autoi.h:void bgbrng_minedump();
include/bgbdy_autoi.h:void bgbrng_mineload();
include/bgbdy_autoi.h:int bgbrng_loop(void *p);
include/bgbdy_autoi.h:int bgbrng_init();
include/bgbdy_autoi.h:iv128_t bgbrng_mulM107(iv128_t a);
include/bgbdy_autoi.h:iv128_t bgbrng_mulP96(iv128_t a);
include/bgbdy_autoi.h:void vfdir_init();
include/bgbdy_autoi.h:void vf_init();
include/bgbdy_autoi.h:dyt vf_fd_method(dyt obj, dyt sym, dyt *args, int nargs);
include/bgbdy_autoi.h:int vfdir_vfread(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_autoi.h:int vfdir_vfwrite(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_autoi.h:int vfdir_vfgetc(VFILE *fd);
include/bgbdy_autoi.h:int vfdir_vfputc(int c, VFILE *fd);
include/bgbdy_autoi.h:int vfdir_vfflush(VFILE *fd);
include/bgbdy_autoi.h:vfoffs_t vfdir_vfseek(VFILE *fd, vfoffs_t rel, int pos);
include/bgbdy_autoi.h:vfoffs_t vfdir_vftell(VFILE *fd);
include/bgbdy_autoi.h:int vfdir_vfeof(VFILE *fd);
include/bgbdy_autoi.h:int vfdir_vfclose(VFILE *fd);
include/bgbdy_autoi.h:VFILE *vfdir_vfopen(VFILE_Mount *mnt, char *name, char *mode);
include/bgbdy_autoi.h:VFILE *vfdir_open_os(char *name, char *mode);
include/bgbdy_autoi.h:VFILE_Mount *vfdir_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
include/bgbdy_autoi.h:void *vfdir_opendir(VFILE_Mount *mnt, char *name);
include/bgbdy_autoi.h:void vfdir_closedir(VFILE_Mount *mnt, void *dir);
include/bgbdy_autoi.h:char *vfdir_readdir(VFILE_Mount *mnt, void *dir);
include/bgbdy_autoi.h:int vfdir_statflags(VFILE_Mount *mnt, char *name);
include/bgbdy_autoi.h:void *vfdir_opendir_os(char *name);
include/bgbdy_autoi.h:void vfdir_closedir_os(void *dir);
include/bgbdy_autoi.h:char *vfdir_readdir_os(void *dir);
include/bgbdy_autoi.h:int vfdir_statflags_os(char *name);
include/bgbdy_autoi.h:void *vfdir_opendir(VFILE_Mount *mnt, char *name);
include/bgbdy_autoi.h:void vfdir_closedir(VFILE_Mount *mnt, void *dir);
include/bgbdy_autoi.h:char *vfdir_readdir(VFILE_Mount *mnt, void *dir);
include/bgbdy_autoi.h:int vfdir_statflags(VFILE_Mount *mnt, char *name);
include/bgbdy_autoi.h:void *vfdir_opendir_os(char *name);
include/bgbdy_autoi.h:void vfdir_closedir_os(void *dir);
include/bgbdy_autoi.h:char *vfdir_readdir_os(void *dir);
include/bgbdy_autoi.h:int vfdir_statflags_os(char *name);
include/bgbdy_autoi.h:void vfdir_init();
include/bgbdy_autoi.h:int VFZIP_ReadUInt16(FILE *fd);
include/bgbdy_autoi.h:int VFZIP_ReadUInt32(FILE *fd);
include/bgbdy_autoi.h:void VFZIP_WriteUInt16(FILE *fd, int v);
include/bgbdy_autoi.h:void VFZIP_WriteUInt32(FILE *fd, int v);
include/bgbdy_autoi.h:u32 VFZIP_CRC32(void *buf, int sz, u32 lcrc);
include/bgbdy_autoi.h:int VFZIP_IsText(byte *buf, int sz);
include/bgbdy_autoi.h:VFZIP_Context *VFZIP_OpenZip(char *fname, int rrw);
include/bgbdy_autoi.h:int VFZIP_WriteZip(VFZIP_Context *ctx, char *name);
include/bgbdy_autoi.h:VFZIP_Entry *VFZIP_LocateFile(VFZIP_Context *ctx, char *name);
include/bgbdy_autoi.h:VFZIP_Entry *VFZIP_CreateFile(VFZIP_Context *ctx, char *name);
include/bgbdy_autoi.h:void VFZIP_ReadInFile(VFZIP_Context *ctx, VFZIP_Entry *tmp);
include/bgbdy_autoi.h:int VFZIP_UncacheFile(VFZIP_Context *ctx);
include/bgbdy_autoi.h:void VFZIP_CacheFile(VFZIP_Context *ctx, char *name);
include/bgbdy_autoi.h:void VFZIP_ReCacheFile(VFZIP_Context *ctx, VFZIP_Entry *ent);
include/bgbdy_autoi.h:int vfzip_vfread(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_autoi.h:int vfzip_vfwrite(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_autoi.h:int vfzip_vfgetc(VFILE *fd);
include/bgbdy_autoi.h:int vfzip_vfputc(int c, VFILE *fd);
include/bgbdy_autoi.h:int vfzip_vfflush(VFILE *fd);
include/bgbdy_autoi.h:vfoffs_t vfzip_vfseek(VFILE *fd, vfoffs_t rel, int pos);
include/bgbdy_autoi.h:vfoffs_t vfzip_vftell(VFILE *fd);
include/bgbdy_autoi.h:int vfzip_vfeof(VFILE *fd);
include/bgbdy_autoi.h:int vfzip_vfclose(VFILE *fd);
include/bgbdy_autoi.h:VFILE *vfzip_vfopen_w(VFILE_Mount *mnt, char *name, char *mode);
include/bgbdy_autoi.h:VFILE *vfzip_vfopen(VFILE_Mount *mnt, char *name, char *mode);
include/bgbdy_autoi.h:VFILE_Mount *vfzip_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
include/bgbdy_autoi.h:void vfzip_init();
include/bgbdy_autoi.h:int vfzpak_vfread(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_autoi.h:int vfzpak_vfwrite(void *buf, int s1, int s2, VFILE *fd);
include/bgbdy_autoi.h:int vfzpak_vfgetc(VFILE *fd);
include/bgbdy_autoi.h:int vfzpak_vfputc(int c, VFILE *fd);
include/bgbdy_autoi.h:int vfzpak_vfflush(VFILE *fd);
include/bgbdy_autoi.h:vfoffs_t vfzpak_vfseek(VFILE *fd, vfoffs_t pos, int rel);
include/bgbdy_autoi.h:vfoffs_t vfzpak_vftell(VFILE *fd);
include/bgbdy_autoi.h:int vfzpak_vfeof(VFILE *fd);
include/bgbdy_autoi.h:int vfzpak_vfclose(VFILE *fd);
include/bgbdy_autoi.h:VFILE *vfzpak_vfopen(VFILE_Mount *mnt, char *name, char *mode);
include/bgbdy_autoi.h:VFILE_Mount *vfzpak_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
include/bgbdy_autoi.h:VFILE_Mount *vfzpak_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
include/bgbdy_autoi.h:VFILE_Mount *vfzpak_vfmount2(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
include/bgbdy_autoi.h:int vfzpak_vfumount(VFILE_Mount *mnt);
include/bgbdy_autoi.h:void *vfzpak_opendir(VFILE_Mount *mnt, char *name);
include/bgbdy_autoi.h:void vfzpak_closedir(VFILE_Mount *mnt, void *dir);
include/bgbdy_autoi.h:char *vfzpak_readdir(VFILE_Mount *mnt, void *dir);
include/bgbdy_autoi.h:int vfzpak_statflags(VFILE_Mount *mnt, char *name);
include/bgbdy_autoi.h:void vfzpak_init();
include/bgbdy_autoi.h:int PDUNZ_ReadBit();
include/bgbdy_autoi.h:int PDUNZ_Read2Bits();
include/bgbdy_autoi.h:int PDUNZ_Read3Bits();
include/bgbdy_autoi.h:int PDUNZ_Read4Bits();
include/bgbdy_autoi.h:int PDUNZ_Read5Bits();
include/bgbdy_autoi.h:int PDUNZ_ReadNBits(int n);
include/bgbdy_autoi.h:void PDUNZ_SkipNBits(int n);
include/bgbdy_autoi.h:int PDUNZ_PeekWord();
include/bgbdy_autoi.h:void PDUNZ_AlignByte();
include/bgbdy_autoi.h:int PDUNZ_ReadAlignedByte();
include/bgbdy_autoi.h:int PDUNZ_ReadAlignedWord();
include/bgbdy_autoi.h:int PDUNZ_TransposeByte(int v);
include/bgbdy_autoi.h:int PDUNZ_TransposeWord(int v);
include/bgbdy_autoi.h:int PDUNZ_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
include/bgbdy_autoi.h:int PDUNZ_SetupStatic();
include/bgbdy_autoi.h:int PDUNZ_DecodeSymbol();
include/bgbdy_autoi.h:int PDUNZ_DecodeDistance();
include/bgbdy_autoi.h:int PDUNZ_DecodeCodeLengths(byte *cl, int ncl);
include/bgbdy_autoi.h:int PDUNZ_DecodeHeader();
include/bgbdy_autoi.h:int PDUNZ_DecodeRun(int sym);
include/bgbdy_autoi.h:int PDUNZ_DecodeBlockData();
include/bgbdy_autoi.h:int PDUNZ_DecodeBlock();
include/bgbdy_autoi.h:int PDUNZ_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
include/bgbdy_autoi.h:void PDZ2_WriteBit(int i);
include/bgbdy_autoi.h:void PDZ2_Write2Bits(int i);
include/bgbdy_autoi.h:void PDZ2_Write3Bits(int i);
include/bgbdy_autoi.h:void PDZ2_Write4Bits(int i);
include/bgbdy_autoi.h:void PDZ2_Write5Bits(int i);
include/bgbdy_autoi.h:void PDZ2_WriteNBits(int i, int n);
include/bgbdy_autoi.h:void PDZ2_FlushBits();
include/bgbdy_autoi.h:int PDZ2_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
include/bgbdy_autoi.h:void PDZ2_CalcLengths_r(short *nodes, byte *cl, int root, int h);
include/bgbdy_autoi.h:void PDZ2_BuildLengths(int *stat, int nc, byte *cl, int ml);
include/bgbdy_autoi.h:void PDZ2_UpdateWindowByte(byte *s);
include/bgbdy_autoi.h:void PDZ2_UpdateWindowString(byte *s, int l);
include/bgbdy_autoi.h:int PDZ2_LookupString(byte *cs, byte *ce, int *rl, int *rd);
include/bgbdy_autoi.h:int PDZ2_LZCompressBuffer(byte *ibuf, byte *obuf, byte *mbuf, int sz);
include/bgbdy_autoi.h:void PDZ2_StatLZRun(byte *cs, int *lstat, int *dstat);
include/bgbdy_autoi.h:void PDZ2_StatLZBuffer(byte *tbuf, byte *mbuf, int n,int *lstat, int *dstat);
include/bgbdy_autoi.h:void PDZ2_StatLengths(byte *cl, int nc, int *stat);
include/bgbdy_autoi.h:void PDZ2_EncodeSymbol(int v);
include/bgbdy_autoi.h:void PDZ2_EncodeLengths(byte *cl, int nc);
include/bgbdy_autoi.h:void PDZ2_EncodeLZRun(byte *cs);
include/bgbdy_autoi.h:void PDZ2_EncodeLZBuffer(byte *tbuf, byte *mbuf, int n);
include/bgbdy_autoi.h:int PDZ2_EncodeBlockStatic(byte *ibuf, int isz, int last);
include/bgbdy_autoi.h:int PDZ2_EncodeBlock(byte *ibuf, int isz, int last);
include/bgbdy_autoi.h:int PDZ2_EncodeStream_I(byte *ibuf, byte *obuf, int isz, int osz);
include/bgbdy_autoi.h:int PDZ2_EncodeStream(byte *ibuf, byte *obuf, int isz, int osz);
include/bgbdy_autoi.h:int PDZ2_EncodeStream64(byte *ibuf, byte *obuf, int isz, int osz);
include/bgbdy_autoi.h:int PDZ2_EncodeStreamLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
include/bgbdy_autoi.h:int BGBDY_IsPRange(byte *p, byte *addr, int rng);
include/bgbdy_autoi.h:int BGBDY_IsFixnumFP(byte *p);
include/bgbdy_autoi.h:int BGBDY_IsFlonumFP(byte *p);
include/bgbdy_autoi.h:char *BGBDY_GetVType(byte *p);
include/bgbdy_autoi.h:char *BGBDY_HashSymbol(void **tab, char *ty, char *str);
include/bgbdy_autoi.h:char *BGBDY_HashSymbolQuick(void **tab, char *ty, char *str);
include/bgbdy_autoi.h:int bgbdy_wstrlen(u16 *str);
include/bgbdy_autoi.h:int bgbdy_wstrcmp(u16 *s0, u16 *s1);
include/bgbdy_autoi.h:void bgbdy_wstrcpy(u16 *sdst, u16 *ssrc);
include/bgbdy_autoi.h:u16 *BGBDY_HashSymbol16Quick(void **tab, char *ty, u16 *str);
include/bgbdy_autoi.h:void *BGBDY_WrapInt(int i);
include/bgbdy_autoi.h:void *BGBDY_WrapInt64(s64 i);
include/bgbdy_autoi.h:void *BGBDY_TryWrapInt64(s64 i);
include/bgbdy_autoi.h:void *BGBDY_HashString(char *s);
include/bgbdy_autoi.h:void *BGBDY_WrapSymbol(char *s);
include/bgbdy_autoi.h:void *BGBDY_WrapKeyword(char *s);
include/bgbdy_autoi.h:void *BGBDY_HashString16(u16 *s);
include/bgbdy_autoi.h:int BGBDY_EncUStrChar(int i);
include/bgbdy_autoi.h:int BGBDY_DecUStrChar(int i);
include/bgbdy_autoi.h:int BGBDY_EncodeUChars(char *s);
include/bgbdy_autoi.h:char *BGBDY_DecodeUChars(int v);
include/bgbdy_autoi.h:void *BGBDY_WrapUString(char *s);
include/bgbdy_autoi.h:void *BGBDY_WrapUSymbol(char *s);
include/bgbdy_autoi.h:char *BGBDY_UnwrapUString(void *p);
include/bgbdy_autoi.h:char *BGBDY_UnwrapUSymbol(void *p);
include/bgbdy_autoi.h:double bgbdy_pow2(int i);
include/bgbdy_autoi.h:void *BGBDY_WrapMiniFloat28(double f);
include/bgbdy_autoi.h:double BGBDY_UnwrapMiniFloat28(void *p);
include/bgbdy_autoi.h:void *BGBDY_WrapMiniFloat24(double f);
include/bgbdy_autoi.h:double BGBDY_UnwrapMiniFloat24(void *p);
include/bgbdy_autoi.h:void *BGBDY_WrapFlonum(double f);
include/bgbdy_autoi.h:void *BGBDY_WrapFloat(double f);
include/bgbdy_autoi.h:void *BGBDY_WrapDouble(double f);
include/bgbdy_autoi.h:void *BGBDY_WrapArray(void *a);
include/bgbdy_autoi.h:void *BGBDY_WrapDArray(void *a);
include/bgbdy_autoi.h:void *BGBDY_WrapNDArray(void *a, int n);
include/bgbdy_autoi.h:int BGBDY_GetDArraySize(void *arr);
include/bgbdy_autoi.h:void *BGBDY_GetDArrayIndex(void *arr, int idx);
include/bgbdy_autoi.h:int BGBDY_SetDArrayIndex(void *arr, int idx, void *val);
include/bgbdy_autoi.h:int BGBDY_UnwrapInt(void *a);
include/bgbdy_autoi.h:s64 BGBDY_UnwrapInt64(void *a);
include/bgbdy_autoi.h:int BGBDY_UnwrapBool(void *a);
include/bgbdy_autoi.h:double BGBDY_UnwrapFloat(void *a);
include/bgbdy_autoi.h:void **BGBDY_UnwrapArray(void *a);
include/bgbdy_autoi.h:void **BGBDY_UnwrapDArray(void *a);
include/bgbdy_autoi.h:int BGBDY_IsNumber(void *p);
include/bgbdy_autoi.h:int BGBDY_InitTypes();
include/bgbdy_autoi.h:char *dyll_func_toString(dyt obj);
include/bgbdy_autoi.h:void BGBGC_InitDyLL_Func();
include/bgbdy_autoi.h:void *bgbdyll_rawfunc_ApplyV_self(void *obj,dyt mth, char *sig, va_list args);
include/bgbdy_autoi.h:void *bgbdyll_rawfunc_ApplyU(void *obj,dyt mth, char *sig, void **args, int szargs);
include/bgbdy_autoi.h:void *bgbdyll_rawfunc_ApplyV(void *obj,dyt mth, char *sig, va_list args);
include/bgbdy_autoi.h:BGBDYC_ApplyU_t dyllGetRawFuncApplyU(BGBGC_RawFunc *inf);
include/bgbdy_autoi.h:BGBDYC_ApplyV_t dyllGetRawFuncApplyV(BGBGC_RawFunc *inf);
include/bgbdy_autoi.h:char *dyll_SigReadQName(char **sig);
include/bgbdy_autoi.h:int DYLL_GetArch();
include/bgbdy_autoi.h:int DYLL_FlagSig_ModifierChar(s64 i);
include/bgbdy_autoi.h:char *DYLL_FlagSig_FlattenModifiers2(char *t, int fl);
include/bgbdy_autoi.h:char *DYLL_VarTypeFlagsString(s64 fl);
include/bgbdy_autoi.h:int DYLL_LoadLibraryI(char *name);
include/bgbdy_autoi.h:int DYLL_LoadLibraryI2(char *name);
include/bgbdy_autoi.h:int DYLL_LoadLibrary(char *name);
include/bgbdy_autoi.h:void BGBGC_InitSig();
include/bgbdy_autoi.h:void BGBGC_SaveSig();
include/bgbdy_autoi.h:int BGBGC_HashSigName(char *str);
include/bgbdy_autoi.h:char *BGBGC_LookupSig(char *name);
include/bgbdy_autoi.h:int BGBGC_BindSig(char *name, char *value);
include/bgbdy_autoi.h:BGBDYC_MetaNode *DYLL_MetaPath_LookupNodeR(BGBDYC_MetaNode *node, char *path);
include/bgbdy_autoi.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
include/bgbdy_autoi.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
include/bgbdy_autoi.h:int DYLL_MetaPath_AdjustBiDepth(BGBDYC_MetaBiNode *node);
include/bgbdy_autoi.h:int DYLL_MetaPath_BalanceBiNode(BGBDYC_MetaBiNode *node);
include/bgbdy_autoi.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR2(BGBDYC_MetaBiNode *node, char *name);
include/bgbdy_autoi.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
include/bgbdy_autoi.h:BGBDYC_MetaNode *DYLL_MetaPath_LookupNode(char *path);
include/bgbdy_autoi.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNode(char *path);
include/bgbdy_autoi.h:BGBDYC_MetaLeaf *DYLL_MetaPath_LookupNodeLeaf(BGBDYC_MetaNode *node, char *key);
include/bgbdy_autoi.h:BGBDYC_MetaLeaf *DYLL_MetaPath_GetNodeLeaf(BGBDYC_MetaNode *node, char *key);
include/bgbdy_autoi.h:char *DYLL_MetaPath_GetNodePathR(BGBDYC_MetaNode *node, char *t);
include/bgbdy_autoi.h:char *DYLL_MetaPath_GetNodePath(BGBDYC_MetaNode *node);
include/bgbdy_autoi.h:void DYLL_MetaPath_SplitKey(char *path, char *nb, char *kb);
include/bgbdy_autoi.h:char *DYLL_MetaPath_LookupKey(char *path);
include/bgbdy_autoi.h:char *DYLL_MetaPath_LookupKey2(char *path);
include/bgbdy_autoi.h:void DYLL_MetaPath_BindKey(char *path, char *val);
include/bgbdy_autoi.h:int DYLL_MetaPath_LoadDB(char *name);
include/bgbdy_autoi.h:void DYLL_MetaPath_LoadAll();
include/bgbdy_autoi.h:void DYLL_MetaPath_SaveNode(VFILE *fd,BGBDYC_MetaNode *node, char *path, int ind);
include/bgbdy_autoi.h:void DYLL_MetaPath_SaveAll();
include/bgbdy_autoi.h:int DYLL_MetaPath_SaveDB(char *name);
include/bgbdy_autoi.h:int DYLL_MetaPath_AddSearchPath(char *name);
include/bgbdy_autoi.h:int DYLL_MetaPath_ParseSearchPath(char *path);
include/bgbdy_autoi.h:int DYLL_MetaPath_ParseEnvString(char *str);
include/bgbdy_autoi.h:void *dyll_meta_classslot(char *sym, char *name, char **args);
include/bgbdy_autoi.h:void *dyll_meta_classmethod(char *sym, char *name, char **args);
include/bgbdy_autoi.h:void *dyll_meta_fieldref(char *sym, char *name, char **args);
include/bgbdy_autoi.h:void *dyll_meta_staticfieldref(char *sym, char *name, char **args);
include/bgbdy_autoi.h:void *dyll_meta_methodref(char *sym, char *name, char **args);
include/bgbdy_autoi.h:void *dyll_meta_staticmethodref(char *sym, char *name, char **args);
include/bgbdy_autoi.h:void BGBGC_InitDyLL_Thunk();
include/bgbdy_autoi.h:char *dyll_typebox_sig_toString(dyt obj);
include/bgbdy_autoi.h:char *dyll_typebox_boxval_toString(dyt obj);
include/bgbdy_autoi.h:char *dyll_typebox_boxptr_toString(dyt obj);
include/bgbdy_autoi.h:dyt dyll_ctop_GetSlot(dyt obj, dyt key);
include/bgbdy_autoi.h:dyt dyll_ctop_SetSlot(dyt obj, dyt key, dyt val);
include/bgbdy_autoi.h:dyt dyll_ctop_CallMethod(dyt obj, dyt sym, dyt *args, int nargs);
include/bgbdy_autoi.h:void BGBGC_InitDyLL_Typebox();
include/bgbdy_autoi.h:dyt DYLL_CTopGetHash(char *name);
include/bgbdy_autoi.h:void DYLL_CTopSetHash(char *name, dyt val);
include/bgbdy_autoi.h:int DYLL_MRBC2_ParseHexData(char **rcs, byte **rct, int *rsz);
include/bgbdy_autoi.h:int DYLL_MRBC2_ParseBase64Data(char **rcs, byte **rct, int *rsz);
include/bgbdy_autoi.h:int DYLL_MRBC2_ParseBase85Data(char **rcs, byte **rct, int *rsz);
include/bgbdy_autoi.h:DYLL_MRBC2_Context *DYLL_MRBC2_AllocContext();
include/bgbdy_autoi.h:int DYLL_MRBC2_FreeContext(DYLL_MRBC2_Context *tmp);
include/bgbdy_autoi.h:void DYLL_MRBC2_Push(DYLL_MRBC2_Context *ctx, dytf val);
include/bgbdy_autoi.h:dytf DYLL_MRBC2_Pop(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:void DYLL_MRBC2_PushInt(DYLL_MRBC2_Context *ctx, s64 val);
include/bgbdy_autoi.h:s64 DYLL_MRBC2_PopInt(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:void DYLL_MRBC2_PushFloat(DYLL_MRBC2_Context *ctx, double val);
include/bgbdy_autoi.h:double DYLL_MRBC2_PopFloat(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:void DYLL_MRBC2_PushMark(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:void DYLL_MRBC2_PopMark(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:void DYLL_MRBC2_CallBlock(DYLL_MRBC2_Context *ctx, char *ip);
include/bgbdy_autoi.h:int DYLL_MRBC2_RetBlock(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:char *DYLL_MRBC2_ReadString(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:char *DYLL_MRBC2_BlockString(DYLL_MRBC2_Context *ctx, char *str);
include/bgbdy_autoi.h:char *DYLL_MRBC2_ReadBlock(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:dytf DYLL_MRBC2_ReadData(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:int DYLL_MRBC2_ReadInt(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:int DYLL_MRBC2_StepInt(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:double DYLL_MRBC2_ReadFloat(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:dytf DYLL_MRBC2_ReadNumber(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:int DYLL_MRBC2_StepFloat(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:int DYLL_MRBC2_Step(DYLL_MRBC2_Context *ctx);
include/bgbdy_autoi.h:BGBDYC_RDB *DYLL_SQL_LookupDB(char *name);
include/bgbdy_autoi.h:void DYLL_SQL_UnlinkDB(BGBDYC_RDB *db);
include/bgbdy_autoi.h:void DYLL_MetaRDB_TryCacheKey(char *key);
include/bgbdy_autoi.h:char *DYLL_MetaRDB_LookupCacheKey(char *key);
include/bgbdy_autoi.h:fcomplex dtyFComplex(float r, float i);
include/bgbdy_autoi.h:float dtyFCreal(fcomplex a);
include/bgbdy_autoi.h:float dtyFCimag(fcomplex a);
include/bgbdy_autoi.h:fcomplex dtyFCadd(fcomplex a, fcomplex b);
include/bgbdy_autoi.h:fcomplex dtyFCsub(fcomplex a, fcomplex b);
include/bgbdy_autoi.h:fcomplex dtyFCmul(fcomplex a, fcomplex b);
include/bgbdy_autoi.h:fcomplex dtyFCscale(fcomplex a, float x);
include/bgbdy_autoi.h:fcomplex dtyFCrscale(float x, fcomplex a);
include/bgbdy_autoi.h:fcomplex dtyFConj(fcomplex z);
include/bgbdy_autoi.h:fcomplex dtyFCdiv(fcomplex a, fcomplex b);
include/bgbdy_autoi.h:float dtyFCabs(fcomplex a);
include/bgbdy_autoi.h:fcomplex dtyFCsqrt(fcomplex z);
include/bgbdy_autoi.h:dcomplex dtyDComplex(double r, double i);
include/bgbdy_autoi.h:double dtyDCreal(dcomplex a);
include/bgbdy_autoi.h:double dtyDCimag(dcomplex a);
include/bgbdy_autoi.h:dcomplex dtyDCadd(dcomplex a, dcomplex b);
include/bgbdy_autoi.h:dcomplex dtyDCsub(dcomplex a, dcomplex b);
include/bgbdy_autoi.h:dcomplex dtyDCmul(dcomplex a, dcomplex b);
include/bgbdy_autoi.h:dcomplex dtyDCscale(dcomplex a, double x);
include/bgbdy_autoi.h:dcomplex dtyDCrscale(double x, dcomplex a);
include/bgbdy_autoi.h:dcomplex dtyDConj(dcomplex z);
include/bgbdy_autoi.h:dcomplex dtyDCdiv(dcomplex a, dcomplex b);
include/bgbdy_autoi.h:double dtyDCabs(dcomplex a);
include/bgbdy_autoi.h:dcomplex dtyDCsqrt(dcomplex z);
include/bgbdy_autoi.h:void WRef_Init();
include/bgbdy_autoi.h:u64 WRef_GenSeg();
include/bgbdy_autoi.h:dyWRefCtx *WRef_LookupSegLin(u64 seg);
include/bgbdy_autoi.h:dyWRefCtx *WRef_LookupSegHash(u64 seg);
include/bgbdy_autoi.h:dyWRefCtx *WRef_LookupSeg(u64 seg);
include/bgbdy_autoi.h:void WRef_SplitRef(iv128_t wp, dyWRefCtx **cur, u64 *seg, u64 *offs);
include/bgbdy_autoi.h:iv128_t WRef_MergeRef(dyWRefCtx *cur, u64 offs);
include/bgbdy_autoi.h:void *WRef_CastPtr(iv128_t wp);
include/bgbdy_autoi.h:iv128_t WRef_LocalPtr(void *p);
include/bgbdy_autoi.h:int WRef_LocalPtrP(iv128_t wp);
include/bgbdy_autoi.h:int WRef_ReadMem(void *buf, int sz, iv128_t wp, int disp);
include/bgbdy_autoi.h:int WRef_WriteMem(void *buf, int sz, iv128_t wp, int disp);
include/bgbdy_autoi.h:int WRef_CopyMem(iv128_t dst, iv128_t src, u64 sz);
include/bgbdy_autoi.h:iv128_t WRef_AllocMem(u64 seg, u64 sz);
include/bgbdy_autoi.h:int WRef_FreeMem(iv128_t wp);
include/bgbdy_autoi.h:iv128_t WRef_ReallocMem(iv128_t wp, u64 sz);
include/bgbdy_autoi.h:char *WRef_GetType(iv128_t wp);
include/bgbdy_autoi.h:int DYS_DumpBuf(char *tb, int sz);
include/bgbdy_autoi.h:int DYS_InvertBuf(char *tb, int sz);
include/bgbdy_autoi.h:int DYS_NegBuf(char *tb, int sz);
include/bgbdy_autoi.h:int DYS_Shl10Buf(char *tb, int sz, int sh);
include/bgbdy_autoi.h:int DYS_Shr10Buf(char *tb, int sz, int sh);
include/bgbdy_autoi.h:int DYS_Shl2Buf1(char *tb, int sz);
include/bgbdy_autoi.h:int DYS_Shr2Buf1(char *tb, int sz);
include/bgbdy_autoi.h:void DYS_Shl2Buf(char *tb, int sz, int sh);
include/bgbdy_autoi.h:void DYS_Shr2Buf(char *tb, int sz, int sh);
include/bgbdy_autoi.h:int DYS_AddBufInt(char *tb, int sz, int v);
include/bgbdy_autoi.h:int DYS_AddBuf(char *sa, int sza, char *sb, int szb);
include/bgbdy_autoi.h:int DYS_SubBuf(char *sa, int sza, char *sb, int szb);
include/bgbdy_autoi.h:int DYS_AddBufScaleInt(char *sa, int sza, char *sb, int szb, int sc);
include/bgbdy_autoi.h:int DYS_CmpBuf(char *sa, int sza, char *sb, int szb);
include/bgbdy_autoi.h:int DYS_CopyStrBuf(char *tb, int sz, char *sa);
include/bgbdy_autoi.h:int DYS_CopyBufStr(char *tb, char *sa, int sz, int pt);
include/bgbdy_autoi.h:dyt dyFunc(dyt (*fcn)(dyt *args, int nargs));
include/bgbdy_autoi.h:dyt dyMethod(dyt (*fcn)(dyt self, dyt *args, int nargs));
include/bgbdy_autoi.h:dyt dyFuncData(dyt data, dyt (*fcn)(dyt data, dyt *args, int nargs));
include/bgbdy_autoi.h:dyt dyMethodData(dyt data, dyt (*fcn)(dyt self, dyt data, dyt *args, int nargs));
include/bgbdy_autoi.h:dyt dyStubMethod(dyt data, dyt method,void *(*fcn)(BGBGC_StubMethod *inf, dyt self, char *sig, void **args, int szargs));
include/bgbdy_autoi.h:dyt dyFunc_NN(void *fcn, int n);
include/bgbdy_autoi.h:dyt dyMethod_NN(void *fcn, int n);
include/bgbdy_autoi.h:dyt dyFunc_NND(void *fcn, int n, void *data);
include/bgbdy_autoi.h:dyt dyMethod_NND(void *fcn, int n, void *data);
include/bgbdy_autoi.h:dyt dyFunc0(dyt (*fcn)());
include/bgbdy_autoi.h:dyt dyFunc1(dyt (*fcn)(dyt));
include/bgbdy_autoi.h:dyt dyFunc2(dyt (*fcn)(dyt, dyt));
include/bgbdy_autoi.h:dyt dyFunc3(dyt (*fcn)(dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyFunc4(dyt (*fcn)(dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyFunc5(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyFunc6(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyFunc7(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyFunc8(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethod0(dyt (*fcn)(dyt self));
include/bgbdy_autoi.h:dyt dyMethod1(dyt (*fcn)(dyt self, dyt));
include/bgbdy_autoi.h:dyt dyMethod2(dyt (*fcn)(dyt self, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethod3(dyt (*fcn)(dyt self, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethod4(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethod5(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethod6(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethod7(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethod8(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt, dyt, dyt, dyt));
include/bgbdy_autoi.h:dyt dyMethodN(dyt (*fcn)(dyt self, dyt));
include/bgbdy_autoi.h:dyt dyMethod1N(dyt (*fcn)(dyt self, dyt,dyt));
include/bgbdy_autoi.h:dyt dyMethod2N(dyt (*fcn)(dyt self, dyt,dyt,dyt));
include/bgbdy_autoi.h:dyt dyMethod3N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt));
include/bgbdy_autoi.h:dyt dyMethod4N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt));
include/bgbdy_autoi.h:dyt dyMethod5N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_autoi.h:dyt dyMethod6N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_autoi.h:dyt dyMethod7N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_autoi.h:dyt dyMethod8N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt));
include/bgbdy_autoi.h:void *bgbdyc_rawfunc_ApplyU(void *obj,dyt mth, char *sig, void **args, int szargs);
include/bgbdy_autoi.h:void *bgbdyc_stubmethod_ApplyU(void *obj,dyt mth, char *sig, void **args, int szargs);
include/bgbdy_autoi.h:void *bgbdyc_rawfunc_ApplyV(void *obj,dyt mth, char *sig, va_list args);
include/bgbdy_autoi.h:void *bgbdyc_stubmethod_ApplyV(void *obj,dyt mth, char *sig, va_list args);
include/bgbdy_autoi.h:BGBDYC_ApplyU_t dycGetMethodApplyU(dyt mth);
include/bgbdy_autoi.h:BGBDYC_ApplyV_t dycGetMethodApplyV(dyt mth);
include/bgbdy_autoi.h:void *DYLL_ConvObjCFunc_Ip(void *data, ...);
include/bgbdy_autoi.h:s64 DYLL_ConvObjCFunc_Il(void *data, ...);
include/bgbdy_autoi.h:double DYLL_ConvObjCFunc_Id(void *data, ...);
include/bgbdy_autoi.h:void dyoo_init();
include/bgbdy_autoi.h:BGBDY_ObjVTab *BGBDY_GetTypeVTab(char *str);
include/bgbdy_autoi.h:BGBDY_ObjVTab *BGBDY_GetObjVTab(void *obj);
include/bgbdy_autoi.h:int BGBDY_SetGetSlot(char *type, void *(*fn)(void *p, char *sym));
include/bgbdy_autoi.h:int BGBDY_SetSetSlot(char *type, void *(*fn)(void *p, char *sym, void *val));
include/bgbdy_autoi.h:int BGBDY_SetNextSlot(char *type, char *(*fn)(void *p, char *sym));
include/bgbdy_autoi.h:int BGBDY_SetGetDel(char *type, void *(*fn)(void *p, char *sym));
include/bgbdy_autoi.h:int BGBDY_SetSetDel(char *type, void *(*fn)(void *p, char *sym, void *val));
include/bgbdy_autoi.h:int BGBDY_SetNextDel(char *type, char *(*fn)(void *p, char *sym));
include/bgbdy_autoi.h:int BGBDY_SetTrySetSlot(char *type, void *(*fn)(void *p, char *sym, void *val));
include/bgbdy_autoi.h:int BGBDY_SetCallMethod(char *type, void *(*fn)(void *p, char *sym, void **args, int n));
include/bgbdy_autoi.h:int BGBDY_SetApply(char *type, void *(*fn)(void *p, void **args, int n));
include/bgbdy_autoi.h:int BGBDY_SetApplyObj(char *type,void *(*fn)(void *p, void *o, void **args, int n));
include/bgbdy_autoi.h:int BGBDY_SetToString(char *type, char *(*fn)(void *p));
include/bgbdy_autoi.h:int BGBDY_SetVtabMethod(char *type, char *name, void *func);
include/bgbdy_autoi.h:void *BGBDY_GetTypeVtabMethod(char *type, char *name);
include/bgbdy_autoi.h:void *BGBDY_GetVtabMethod(void *obj, char *name);
include/bgbdy_autoi.h:void *BGBDY_GetSlot(void *p, char *s);
include/bgbdy_autoi.h:void *BGBDY_SetSlot(void *p, char *s, void *v);
include/bgbdy_autoi.h:char *BGBDY_NextSlot(void *p, char *s);
include/bgbdy_autoi.h:void *BGBDY_GetDel(void *p, char *s);
include/bgbdy_autoi.h:void *BGBDY_SetDel(void *p, char *s, void *v);
include/bgbdy_autoi.h:char *BGBDY_NextDel(void *p, char *s);
include/bgbdy_autoi.h:void *BGBDY_TrySetSlot(void *p, char *s, void *v);
include/bgbdy_autoi.h:void *BGBDY_CallMethod(void *p, char *s, void **a, int n);
include/bgbdy_autoi.h:void *BGBDY_Apply(void *p, void **a, int n);
include/bgbdy_autoi.h:int BGBDY_CanApplyP(void *p);
include/bgbdy_autoi.h:void *BGBDY_ApplyObj(void *p, void *o, void **a, int n);
include/bgbdy_autoi.h:int BGBDY_CanApplyObjP(void *p);
include/bgbdy_autoi.h:char *BGBDY_ToString(void *p);
include/bgbdy_autoi.h:dyt dyGetInner(dyt obj, char *str);
include/bgbdy_autoi.h:dyt dyBind_I(dyt obj, char *var, dyt val);
include/bgbdy_autoi.h:dyt dyTrySet_I(dyt obj, char *var, dyt val);
include/bgbdy_autoi.h:dyt dySetR(dyt obj, char *sym, dyt val);
include/bgbdy_autoi.h:dyt dyCall_I(dyt obj, char *sym, dyt *args, int nargs);
include/bgbdy_autoi.h:void dyo_init();
include/bgbdy_autoi.h:dyt dyStatus();
include/bgbdy_autoi.h:void dySetStatus(char *str);
include/bgbdy_autoi.h:void dyClearStatus();
include/bgbdy_autoi.h:dyt dyoThis();
include/bgbdy_autoi.h:void dyoSetThis(dyt obj);
include/bgbdy_autoi.h:void dyoPushThis(dyt obj);
include/bgbdy_autoi.h:void dyoPopThis();
include/bgbdy_autoi.h:void dyoPushThis2(dyt obj, int *stk);
include/bgbdy_autoi.h:void dyoPopThis2(int j);
include/bgbdy_autoi.h:dyt dyoGet(char *name);
include/bgbdy_autoi.h:void dyoSet(char *name, dyt val);
include/bgbdy_autoi.h:dyt dyoG(char *name);
include/bgbdy_autoi.h:void dyoS(char *name, dyt val);
include/bgbdy_autoi.h:char *dyoGs(char *name);
include/bgbdy_autoi.h:int dyoGi(char *name);
include/bgbdy_autoi.h:s64 dyoGl(char *name);
include/bgbdy_autoi.h:double dyoGf(char *name);
include/bgbdy_autoi.h:double dyoGd(char *name);
include/bgbdy_autoi.h:vec2 dyoGv2(char *name);
include/bgbdy_autoi.h:vec3 dyoGv3(char *name);
include/bgbdy_autoi.h:vec4 dyoGv4(char *name);
include/bgbdy_autoi.h:void dyoSs(char *name, char *str);
include/bgbdy_autoi.h:void dyoSi(char *name, int val);
include/bgbdy_autoi.h:void dyoSl(char *name, s64 val);
include/bgbdy_autoi.h:void dyoSf(char *name, double val);
include/bgbdy_autoi.h:void dyoSd(char *name, double val);
include/bgbdy_autoi.h:void dyoSv2(char *name, vec2 val);
include/bgbdy_autoi.h:void dyoSv3(char *name, vec3 val);
include/bgbdy_autoi.h:void dyoSv4(char *name, vec4 val);
include/bgbdy_autoi.h:dyt dyoC(char *name);
include/bgbdy_autoi.h:dyt dyoC1(char *name, dyt a);
include/bgbdy_autoi.h:dyt dyoC2(char *name, dyt a, dyt b);
include/bgbdy_autoi.h:dyt dyoC3(char *name, dyt a, dyt b, dyt c);
include/bgbdy_autoi.h:dyt dyoC4(char *name, dyt a, dyt b, dyt c, dyt d);
include/bgbdy_autoi.h:dyt dyoC5(char *name, dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_autoi.h:dyt dyoC6(char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_autoi.h:dyt dyoC7(char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
include/bgbdy_autoi.h:dyt dyoC8(char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
include/bgbdy_autoi.h:dyt dyoM(dyt obj, char *name);
include/bgbdy_autoi.h:dyt dyoM1(dyt obj, char *name, dyt a);
include/bgbdy_autoi.h:dyt dyoM2(dyt obj, char *name, dyt a, dyt b);
include/bgbdy_autoi.h:dyt dyoM3(dyt obj, char *name, dyt a, dyt b, dyt c);
include/bgbdy_autoi.h:dyt dyoM4(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d);
include/bgbdy_autoi.h:dyt dyoM5(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_autoi.h:dyt dyoM6(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_autoi.h:dyt dyoM7(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
include/bgbdy_autoi.h:dyt dyoM8(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
include/bgbdy_autoi.h:void BGBDYC_Init();
include/bgbdy_autoi.h:void BGBDYC_RegisterClassResolver(BGBGC_ClassInfo *(*fn)(char *name));
include/bgbdy_autoi.h:void BGBDYC_RegisterClassAlias(char *name, char *altname);
include/bgbdy_autoi.h:char *BGBDYC_LookupClassAlias(char *name);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_LookupClassSName(BGBGC_ClassInfo *last, char *name);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_LookupClassQName(BGBGC_ClassInfo *last, char *name);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_FindClassQName(char *name);
include/bgbdy_autoi.h:int BGBDYC_IndexClassSuper(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:int BGBDYC_InheritMulti(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:int BGBDYC_EnumClassSlots(BGBGC_ClassInfo *inf,BGBGC_ClassSlot **arr, int num);
include/bgbdy_autoi.h:int BGBDYC_EnumClassMinf(BGBGC_ClassInfo *inf,BGBGC_ClassMinf **arr, int num);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_InheritMultiSlot(BGBGC_ClassInfo *inf,BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_InheritMultiMinf(BGBGC_ClassInfo *inf,BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:int BGBDYC_InheritMulti(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:int BGBDYC_InheritSingle(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:int BGBDYC_InheritNone(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_CreateClassI(char *qname, char *super, int type);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_CreateClass(char *qname, char *super);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_CreateInterface(char *qname, char *super);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_CreateClassAnon(BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_CreateClassAnon2(char *super);
include/bgbdy_autoi.h:BGBGC_ClassInfo *BGBDYC_CreateStruct(char *qname);
include/bgbdy_autoi.h:int BGBDYC_AddClassInterface(BGBGC_ClassInfo *info, BGBGC_ClassInfo *iface);
include/bgbdy_autoi.h:int BGBDYC_AlignClassLength(BGBGC_ClassInfo *info, int align);
include/bgbdy_autoi.h:int BGBDYC_CheckAddSlot(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:int BGBDYC_CheckAddMinf(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddSlotAbstract(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddSlot(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddSlotInit(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddSlotStatic(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddSlotDelegate(BGBGC_ClassInfo *inf, char *name, char *cname);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddSlotStaticDelegate(BGBGC_ClassInfo *inf, char *name, char *cname);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddSlotIface(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_AddMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_AddSlotMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_AddStaticSlotMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:int BGBDYC_CheckInitData(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:int BGBDYC_TouchMinfMethod(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *minf);
include/bgbdy_autoi.h:BGBGC_ClassBase *BGBDYC_CreateInstance(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:BGBGC_ObjProto *BGBDYC_CreateInstanceProto(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:BGBGC_ClassBase *BGBDYC_CloneInstance(BGBGC_ClassBase *obj);
include/bgbdy_autoi.h:void BGBDYC_FreeInstance(BGBGC_ClassBase *obj);
include/bgbdy_autoi.h:void BGBDYC_SetInstance(BGBGC_ClassBase *dst, BGBGC_ClassBase *src);
include/bgbdy_autoi.h:int BGBDYC_SubclassP(BGBGC_ClassInfo *info, BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:int BGBDYC_SubclassOrImplP(BGBGC_ClassInfo *info, BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:int BGBDYC_InstanceP(BGBGC_ClassInfo *info, BGBGC_ClassInfo *super);
include/bgbdy_autoi.h:void *BGBDYC_GetObjectSlotIdxPtr_MI(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_ClassVinf *BGBDYC_GetClassSlotVInfo(BGBGC_ClassInfo *info, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_ClassVinf *BGBDYC_GetObjectSlotVInfo(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:int BGBDYC_GetClassSlotVIdx(BGBGC_ClassInfo *info, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:int BGBDYC_GetObjectSlotVIdx(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:int *BGBDYC_GetClassSlotVOffsTab(BGBGC_ClassInfo *info, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:int *BGBDYC_GetObjectSlotVOffsTab(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetObjectSlotIdxPtr_MI(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetInitIdxPtr_MI(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetObjectSlotIdxPtr(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetInitIdxPtr(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetObjectSlotIdxPtrTH(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetInitIdxPtrTH(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupSlotBasic(BGBGC_ClassInfo *inf, char *name);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupSlotRA(BGBGC_ClassInfo *inf, char *name, int nhi);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupSlotRB(BGBGC_ClassInfo *inf, char *name, int nhi);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupSlot(BGBGC_ClassInfo *inf, char *name);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupSlotR(BGBGC_ClassInfo *inf, char *name, int nhi);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupSlot(BGBGC_ClassInfo *inf, char *name);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupSlotIface(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupMethodSigRA(BGBGC_ClassInfo *inf, char *name, char *sig, int nhi);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupMethodSigRB(BGBGC_ClassInfo *inf, char *name, char *sig, int nhi);
include/bgbdy_autoi.h:char *BGBDYC_RemapNameSpecial(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupMethodSigRS(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_GetMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_GetIfaceMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupMethodIface(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupObjectSlot(BGBGC_ClassBase *obj, char *name);
include/bgbdy_autoi.h:void *BGBDYC_LookupObjectSlotPtr(BGBGC_ClassBase *obj, char *name);
include/bgbdy_autoi.h:char *BGBDYC_LookupObjectSlotSig(BGBGC_ClassBase *obj, char *name);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupObjectMethodSig(BGBGC_ClassBase *obj, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupClassMethodSig(char *cname, char *sname, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupObjectSlotIface(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupObjectMethodIface(BGBGC_ClassBase *obj, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:int *BGBDYC_GetClassMinfOffsTab(BGBGC_ClassInfo *info, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:int *BGBDYC_GetObjectMinfOffsTab(BGBGC_ClassBase *obj, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:dyt BGBDYC_GetStaticMinfFunc(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *minf);
include/bgbdy_autoi.h:void BGBDYC_SetStaticMinfFunc(BGBGC_ClassInfo *inf,BGBGC_ClassMinf *minf, dyt fcn);
include/bgbdy_autoi.h:dyt BGBDYC_GetMinfFunc(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf);
include/bgbdy_autoi.h:void BGBDYC_SetMinfFunc(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf, dyt fcn);
include/bgbdy_autoi.h:dyt BGBDYC_GetMinfFunc2(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf,BGBGC_ClassBase **robj);
include/bgbdy_autoi.h:dyt BGBDYC_GetMinfFunc3U(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf,BGBDYC_ApplyU_t *apply);
include/bgbdy_autoi.h:dyt BGBDYC_GetMinfFunc3V(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf,BGBDYC_ApplyV_t *apply);
include/bgbdy_autoi.h:int BGBDYC_GetClassSlotArrayBuf(BGBGC_ClassInfo *inf, BGBGC_ClassSlot **arr);
include/bgbdy_autoi.h:int BGBDYC_GetClassMinfArrayBuf(BGBGC_ClassInfo *inf, BGBGC_ClassMinf **arr);
include/bgbdy_autoi.h:BGBGC_ClassSlot **BGBDYC_GetClassSlotArray(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:BGBGC_ClassMinf **BGBDYC_GetClassMinfArray(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:void BGBDYC_InitHash();
include/bgbdy_autoi.h:int BGBDYC_CalcHashName(char *name);
include/bgbdy_autoi.h:int BGBDYC_CalcHashNameSig(char *name, char *sig);
include/bgbdy_autoi.h:void BGBDYC_SortHashItems_Swap(void **h_data, void **h_class, int *h_cnt, int i, int j);
include/bgbdy_autoi.h:void BGBDYC_SortHashItems(void **h_data, void **h_class, int *h_cnt, int base, int lim);
include/bgbdy_autoi.h:void BGBDYC_ResizeSlotHash();
include/bgbdy_autoi.h:void BGBDYC_ResizeMinfHash();
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_CheckHashSlot(BGBGC_ClassInfo *inf, char *name, int hi);
include/bgbdy_autoi.h:void BGBDYC_AddHashSlot(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *sinf, int hi);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_CheckHashMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig, int hi);
include/bgbdy_autoi.h:void BGBDYC_AddHashMethod(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *minf, int hi);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_CheckHashSlot2(BGBGC_ClassInfo *inf, char *name, int hi);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_CheckHashMethodSig2(BGBGC_ClassInfo *inf, char *name, char *sig, int hi);
include/bgbdy_autoi.h:void BGBDYC_InitProto();
include/bgbdy_autoi.h:int BGBDYC_CheckAddProtoSlot();
include/bgbdy_autoi.h:int BGBDYC_CheckAddProtoMinf();
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupProtoSlot(char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupProtoMinf(char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_GetProtoSlot(char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_GetProtoMinf(char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ObjProto *BGBDYC_AllocProtoObj();
include/bgbdy_autoi.h:BGBGC_ObjProto *BGBDYC_CloneProtoObj(BGBGC_ObjProto *obj);
include/bgbdy_autoi.h:void BGBDYC_FreeProtoObj(BGBGC_ObjProto *obj);
include/bgbdy_autoi.h:void *BGBDYC_LookupProtoSlotIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:dyt *BGBDYC_LookupProtoMinfIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetProtoSlotIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:dyt *BGBDYC_GetProtoMinfIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupObjProtoSlot(BGBGC_ObjProto *obj, char *name);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_LookupObjProtoSlotIface(BGBGC_ObjProto *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupObjProtoMethodSig(BGBGC_ObjProto *obj, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_LookupObjProtoMethodIface(BGBGC_ObjProto *obj, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:BGBGC_ClassSlot *BGBDYC_AddObjProtoSlot(BGBGC_ObjProto *obj, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_ClassMinf *BGBDYC_AddObjProtoMethodSig(BGBGC_ObjProto *obj, char *name, char *sig);
include/bgbdy_autoi.h:int BGBDYC_EnumClassDelegateSlots(BGBGC_ClassInfo *inf,BGBGC_ClassSlot **arr, int num, int lim);
include/bgbdy_autoi.h:void *BGBDYC_GetObjectSlotIdxPtr_DI(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:dyt BGBDYC_GetMinfFunc_DI(BGBGC_ClassBase *obj,BGBGC_ClassMinf *idx, BGBGC_ClassBase **robj);
include/bgbdy_autoi.h:BGBGC_ClassBase *BGBDYC_GetObjectDelegate(BGBGC_ClassBase *obj,char *name);
include/bgbdy_autoi.h:void BGBDYC_SetObjectDelegate(BGBGC_ClassBase *obj,char *name, BGBGC_ClassBase *obj1);
include/bgbdy_autoi.h:int *BGBDYC_GetStructSlotVOffsTab(BGBGC_ClassVinf *vinf, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:int *BGBDYC_GetStructMinfOffsTab(BGBGC_ClassVinf *vinf, BGBGC_ClassMinf *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetStructSlotIdxPtr(BGBGC_ClassVinf *vinf, void *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:void *BGBDYC_GetStructSlotIdxPtrTH(BGBGC_ClassVinf *vinf, void *obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:dyt BGBDYC_GetStructMinfFunc(BGBGC_ClassVinf *vinf, BGBGC_ClassMinf *minf);
include/bgbdy_autoi.h:void BGBDYC_SetStructMinfFunc(BGBGC_ClassVinf *vinf,BGBGC_ClassMinf *minf, dyt fcn);
include/bgbdy_autoi.h:void BGBDYC_InitStruct(BGBGC_ClassVinf *vinf, void *obj);
include/bgbdy_autoi.h:void *BGBDYC_GetDynSlotIdxPtrTH(dyt obj, BGBGC_ClassSlot *idx);
include/bgbdy_autoi.h:BGBGC_Namespace *BGBDYC_LookupNamespaceInner(BGBGC_Namespace *ns, char *name);
include/bgbdy_autoi.h:BGBGC_Namespace *BGBDYC_GetNamespaceInner(BGBGC_Namespace *ns, char *name);
include/bgbdy_autoi.h:BGBGC_Namespace *BGBDYC_LookupNamespace(BGBGC_Namespace *ns, char *name);
include/bgbdy_autoi.h:BGBGC_Namespace *BGBDYC_GetNamespace(BGBGC_Namespace *ns, char *name);
include/bgbdy_autoi.h:BGBGC_Namespace *BGBDYC_LookupNamespaceGlobal(char *name);
include/bgbdy_autoi.h:BGBGC_Namespace *BGBDYC_GetNamespaceGlobal(char *name);
include/bgbdy_autoi.h:void BGBDYC_LinkClassNamespace(BGBGC_ClassInfo *inf);
include/bgbdy_autoi.h:BGBGC_NamespaceSlot *BGBDYC_LookupNamespaceSlot(BGBGC_Namespace *ns, char *name);
include/bgbdy_autoi.h:BGBGC_NamespaceSlot *BGBDYC_GetNamespaceSlot(BGBGC_Namespace *ns, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_NamespaceSlot *BGBDYC_LookupNamespaceFunc(BGBGC_Namespace *ns, char *name, char *sig);
include/bgbdy_autoi.h:BGBGC_NamespaceSlot *BGBDYC_GetNamespaceFunc(BGBGC_Namespace *ns, char *name, char *sig);
include/bgbdy_autoi.h:void dyopr_init();
include/bgbdy_autoi.h:dyt dyopr_stradd(dyt a, dyt b);
include/bgbdy_autoi.h:dyt dylist10(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h, dyt i, dyt j);
include/bgbdy_autoi.h:dyt dyNewSparse();
include/bgbdy_autoi.h:int dySparseP(dyt obj);
include/bgbdy_autoi.h:dyt BGBGC_SparseGetIdx(dyt arr, int idx);
include/bgbdy_autoi.h:dyt *BGBGC_SparseGetPtrIdx(dyt *pp, int idx);
include/bgbdy_autoi.h:int BGBGC_SparseSetIdx(dyt arr, int idx, dyt val);
include/bgbdy_autoi.h:dyt dyqsym(char *ns, char *name);
include/bgbdy_autoi.h:dyt dyqsymns(dyt p);
include/bgbdy_autoi.h:dyt dyqsymn(dyt p);
include/bgbdy_autoi.h:int dyqsymp(dyt p);
include/bgbdy_autoi.h:dyt dytlAttr(dyt var, dyt val);
include/bgbdy_autoi.h:dyt dytlAttrS(char *var, dyt val);
include/bgbdy_autoi.h:dyt dytlAttrNS(char *ns, char *var, dyt val);
include/bgbdy_autoi.h:dyt dytlAttrVar(dyt p);
include/bgbdy_autoi.h:dyt dytlAttrVal(dyt p);
include/bgbdy_autoi.h:void dytlAttrSetVal(dyt p, dyt val);
include/bgbdy_autoi.h:int dytlAttrP(dyt p);
include/bgbdy_autoi.h:dyt dytlTag(dyt tag, dyt attr, dyt rest);
include/bgbdy_autoi.h:dyt dytlTagGetAttr(dyt tl, dyt var);
include/bgbdy_autoi.h:void dytlTagSetAttr(dyt tl, dyt var, dyt val);
include/bgbdy_autoi.h:void dytlTagAddFirst(dyt tl, dyt val);
include/bgbdy_autoi.h:void dytlTagAddLast(dyt tl, dyt val);
include/bgbdy_autoi.h:dyt dytlTagGetAttrS(dyt tl, char *var);
include/bgbdy_autoi.h:dyt dytlTagGetAttrNS(dyt tl, char *ns, char *var);
include/bgbdy_autoi.h:void dytlTagSetAttrS(dyt tl, char *var, dyt val);
include/bgbdy_autoi.h:void dytlTagSetAttrNS(dyt tl, char *ns, char *var, dyt val);
include/bgbdy_autoi.h:dyt dytlTagS(char *tag, dyt attr, dyt rest);
include/bgbdy_autoi.h:dyt dytlTagNS(char *ns, char *tag, dyt attr, dyt rest);
include/bgbdy_autoi.h:dyt dytlTag0S(char *tag, dyt attr);
include/bgbdy_autoi.h:dyt dytlTag1S(char *tag, dyt attr, dyt a);
include/bgbdy_autoi.h:dyt dytlTag2S(char *tag, dyt attr, dyt a, dyt b);
include/bgbdy_autoi.h:dyt dytlTag3S(char *tag, dyt attr, dyt a, dyt b, dyt c);
include/bgbdy_autoi.h:dyt dytlTag4S(char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d);
include/bgbdy_autoi.h:dyt dytlTag5S(char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_autoi.h:dyt dytlTag6S(char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_autoi.h:dyt dytlTag0NS(char *ns, char *tag, dyt attr);
include/bgbdy_autoi.h:dyt dytlTag1NS(char *ns, char *tag, dyt attr, dyt a);
include/bgbdy_autoi.h:dyt dytlTag2NS(char *ns, char *tag, dyt attr, dyt a, dyt b);
include/bgbdy_autoi.h:dyt dytlTag3NS(char *ns, char *tag, dyt attr, dyt a, dyt b, dyt c);
include/bgbdy_autoi.h:dyt dytlTag4NS(char *ns, char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d);
include/bgbdy_autoi.h:dyt dytlTagA0S(char *tag);
include/bgbdy_autoi.h:dyt dytlTagA1S(char *tag, dyt a);
include/bgbdy_autoi.h:dyt dytlTagA2S(char *tag, dyt a, dyt b);
include/bgbdy_autoi.h:dyt dytlTagA3S(char *tag, dyt a, dyt b, dyt c);
include/bgbdy_autoi.h:dyt dytlTagA4S(char *tag, dyt a, dyt b, dyt c, dyt d);
include/bgbdy_autoi.h:dyt dytlTagA5S(char *tag, dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_autoi.h:dyt dytlTagA6S(char *tag, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_autoi.h:dyt dytlTagA0NS(char *ns, char *tag);
include/bgbdy_autoi.h:dyt dytlTagA1NS(char *ns, char *tag, dyt a);
include/bgbdy_autoi.h:dyt dytlTagA2NS(char *ns, char *tag, dyt a, dyt b);
include/bgbdy_autoi.h:dyt dytlTagA3NS(char *ns, char *tag, dyt a, dyt b, dyt c);
include/bgbdy_autoi.h:dyt dytlTagA4NS(char *ns, char *tag, dyt a, dyt b, dyt c, dyt d);
include/bgbdy_autoi.h:dyt dytlTagA5NS(char *ns, char *tag, dyt a, dyt b, dyt c, dyt d, dyt e);
include/bgbdy_autoi.h:dyt dytlTagA6NS(char *ns, char *tag, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
include/bgbdy_autoi.h:int BGBGC_PeekChar(char **str);
include/bgbdy_autoi.h:int BGBGC_ParseChar(char **str);
include/bgbdy_autoi.h:int BGBGC_EmitChar(char **str, int j);
include/bgbdy_autoi.h:int BGBGC_ParseChar16(u16 **str);
include/bgbdy_autoi.h:void BGBGC_EmitChar16(u16 **str, int i);
include/bgbdy_autoi.h:int BGBGC_ParseNibble(char **str);
include/bgbdy_autoi.h:int BGBGC_ParseHex(char **str);
include/bgbdy_autoi.h:int BGBGC_ParseHex8(char **str);
include/bgbdy_autoi.h:int BGBGC_ParseHex16(char **str);
include/bgbdy_autoi.h:int BGBGC_ParseHex32(char **str);
include/bgbdy_autoi.h:int BGBGC_EmitNibble(char **str, int i);
include/bgbdy_autoi.h:int BGBGC_EmitHex8(char **str, int i);
include/bgbdy_autoi.h:int BGBGC_EmitHex16(char **str, int i);
include/bgbdy_autoi.h:int BGBGC_EmitHex32(char **str, int i);
include/bgbdy_autoi.h:char *BGBGC_FlattenString(char *str);
include/bgbdy_autoi.h:int BGBGC_PrintSpecialP(char *s);
include/bgbdy_autoi.h:int BGBGC_PrintSymbolEscapeP(char *str);
include/bgbdy_autoi.h:void BGBDY_PrintFlattenItem(dysPrintStream strm, dyt obj);
include/bgbdy_autoi.h:void BGBDY_PrintItemI(dysPrintStream strm, dyt obj);
include/bgbdy_autoi.h:char *DYX_PrintText(char *s, char *t);
include/bgbdy_autoi.h:void *sbxe_malloc(int sz);
include/bgbdy_autoi.h:void *sbxe_tmalloc(char *ty, int sz);
include/bgbdy_autoi.h:void sbxe_free(void *ptr);
include/bgbdy_autoi.h:char *sbxe_strdup(char *str);
include/bgbdy_autoi.h:DYSH_Console *DYSH_NewConsole(int width, int szcon, int szhist);
include/bgbdy_autoi.h:void DYSH_FreeBuf(void *buf);
include/bgbdy_autoi.h:char *DYSH_StrCopy(char *str);
include/bgbdy_autoi.h:void DYSH_PrintAddLineClr(DYSH_Console *tmp,char *str, byte *clr, byte *eff);
include/bgbdy_autoi.h:void DYSH_PrintAddLine(DYSH_Console *tmp, char *str);
include/bgbdy_autoi.h:dyshShell DYSH_AllocShell(int szhist);
include/bgbdy_autoi.h:void DYSH_ConsolePuts(DYSH_Console *con, char *str);
include/bgbdy_autoi.h:void DYSH_Puts(dyshShell shell, char *str);
include/bgbdy_autoi.h:void DYSH_AddHistory(dyshShell shell, char *str);
include/bgbdy_autoi.h:char *DYSH_GetHistory(dyshShell shell, int idx);
include/bgbdy_autoi.h:int DYSH_ExecuteCmd(dyshShell shell, char *str);
include/bgbdy_autoi.h:char *DYSH_Complete(dyshShell shell, char *str);
include/bgbdy_autoi.h:char *DYSH_FindLabel(dyshShell shell, char *str, char *lbl);
include/bgbdy_autoi.h:int DYSH_ExecuteScript(dyshShell shell, char *str);
include/bgbdy_autoi.h:int dy_init2_i(int (*fcn)());
include/bgbdy_autoi.h:void bgal_free_default(bgalContext *ctx, bgalMember *obj);
include/bgbdy_autoi.h:bgalMember *bgal_pick_default(bgalContext *ctx, bgalMember *skip);
include/bgbdy_autoi.h:int bgal_noisebytemask(float m);
include/bgbdy_autoi.h:byte *bgal_breedprogbytes(bgalMember *tmp, byte *pa, byte *pb);
include/bgbdy_autoi.h:bgalMember *bgal_breed_default(bgalContext *ctx,bgalMember *obja, bgalMember *objb);
include/bgbdy_autoi.h:void bgal_step_test_default(bgalContext *ctx, void *data);
include/bgbdy_autoi.h:void bgal_step_select_min_default(bgalContext *ctx);
include/bgbdy_autoi.h:void bgal_step_select_max_default(bgalContext *ctx);
include/bgbdy_autoi.h:void bgal_step_breed_default(bgalContext *ctx);
include/bgbdy_autoi.h:void bgal_step_default(bgalContext *ctx);
include/bgbdy_autoi.h:void bgal_setup_default(bgalContext *ctx, void *data);
include/bgbdy_autoi.h:void bgal_evolve_default(bgalContext *ctx, void *data);
include/bgbdy_autoi.h:void BGAL_InterpInit();
include/bgbdy_autoi.h:float BGAL_InterpPop(BGAL_ICtx *ctx);
include/bgbdy_autoi.h:int BGAL_InterpPopI(BGAL_ICtx *ctx);
include/bgbdy_autoi.h:int BGAL_InterpPush(BGAL_ICtx *ctx, float f);
include/bgbdy_autoi.h:int BGAL_StepCall(BGAL_ICtx *ctx, int idx);
include/bgbdy_autoi.h:int BGAL_StepTCall(BGAL_ICtx *ctx, int idx);
include/bgbdy_autoi.h:int BGAL_StepCallSub(BGAL_ICtx *ctx, int idx);
include/bgbdy_autoi.h:int BGAL_StepJmp(BGAL_ICtx *ctx, int idx);
include/bgbdy_autoi.h:int BGAL_Step(BGAL_ICtx *ctx);
include/bgbdy_autoi.h:void bgal_nn_spawn_generic(bgalNeuron *self);
include/bgbdy_autoi.h:void bgal_nn_fire_generic(bgalNeuron *self);
include/bgbdy_autoi.h:void bgal_nn_pulse_generic(bgalNeuron *self, bgalNeuron *other,bgalNeuronLink *link, float value);
include/bgbdy_autoi.h:void BGAL_InitNeuron();
include/dyvfsi.h:int (*vfread)(VFILE_Env *env, void *buf, int s1, int s2, VFILE *fd);	//4
include/dyvfsi.h:int (*vfwrite)(VFILE_Env *env, void *buf, int s1, int s2, VFILE *fd);	//5
include/dyvfsi.h:int (*vfgetc)(VFILE_Env *env, VFILE *fd);				//6
include/dyvfsi.h:int (*vfputc)(VFILE_Env *env, int c, VFILE *fd);			//7
include/dyvfsi.h:int (*vfflush)(VFILE_Env *env, VFILE *fd);				//8
include/dyvfsi.h:vfoffs_t (*vfseek)(VFILE_Env *env, VFILE *fd, vfoffs_t pos, int rel);	//9
include/dyvfsi.h:vfoffs_t (*vftell)(VFILE_Env *env, VFILE *fd);				//10
include/dyvfsi.h:int (*vfeof)(VFILE_Env *env, VFILE *fd);				//11
include/dyvfsi.h:int (*vfclose)(VFILE_Env *env, VFILE *fd);				//12
include/dyvfsi.h:int (*vfioctl)(VFILE_Env *env, VFILE *fd, int req, void *arg);		//13
include/dyvfsi.h:VFILE *(*vfopen)(VFILE_Env *env, char *name, char *mode);		//14
include/dyvfsi.h:	char *src, char *dst, char *fstype, char **ops);		//15
include/dyvfsi.h:int (*vfumount)(VFILE_Env *env, char *mnt);				//16
include/dyvfsi.h:void *(*vfopendir)(VFILE_Env *env, char *name);				//17
include/dyvfsi.h:void (*vfclosedir)(VFILE_Env *env, void *dir);				//18
include/dyvfsi.h:char *(*vfreaddir)(VFILE_Env *env, void *dir);				//19
include/dyvfsi.h:void (*vfrewinddir)(VFILE_Env *env, void *dir);				//20
include/dyvfsi.h:int (*vfstatflags)(VFILE_Env *env, char *name);				//21
include/dyvfsi.h:int (*vfstat)(VFILE_Env *env, char *name, VFILE_Stat *st);		//22
include/dyvfsi.h:int (*vfsetstat)(VFILE_Env *env, char *name, VFILE_Stat *st, int fl);	//23
include/dyvfsi.h:int (*vfmkdir)(VFILE_Env *env, char *name);				//24
include/dyvfsi.h:int (*vfunlink)(VFILE_Env *env, char *name);				//25
include/dyvfsi.h:int (*vflink)(VFILE_Env *env, char *oldname, char *newname);		//26
include/dyvfsi.h:int (*vfscmd)(VFILE_Env *env, int cmd, void *arg, int szarg);		//27
include/bsvm_auto.h:dyt bsvm_special_apply(dyt fcn, dyt *args, int nargs);
include/bsvm_auto.h:dyt bsvm_special_applyobj(dyt fcn, dyt obj, dyt *args, int nargs);
include/bsvm_auto.h:BGBSVM_API int BSVM_Init();
include/bsvm_auto.h:BGBSVM_API void BSVM_AddBuiltin(char *name, char *desc,dyt (*fcn)(BSVM_SVMState *ctx, dyt args), int nargs);
include/bsvm_auto.h:BGBSVM_API void BSVM_AddBuiltin2(char *name, char *desc,dyt (*fcn)(BSVM_SVMState *ctx, dyt args), int nargs);
include/bsvm_auto.h:BGBSVM_API void BSVM_AddBinding(char *name, dyt val);
include/bsvm_auto.h:BGBSVM_API void BSVM_AddBinding2(char *name, dyt val);
include/bsvm_auto.h:BGBSVM_API dyt BSVM_GetTop(char *name);
include/bsvm_auto.h:BGBSVM_API void BSVM_SetTop(char *name, dyt val);
include/bsvm_auto.h:BGBSVM_API dyt BSVM_NewState();
include/bsvm_auto.h:BGBSVM_API void BSVM_DestroyState(BSVM_SVMState *ctx);
include/bsvm_auto.h:BGBSVM_API void BSVM_SetOpCnt(int i);
include/bsvm_auto.h:BGBSVM_API int BSVM_GetOpCnt();
include/bsvm_auto.h:void BSVM_Push(BSVM_SVMState *ctx, dyt val);
include/bsvm_auto.h:dyt BSVM_Pop(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_PushF(BSVM_SVMState *ctx, dyt val);
include/bsvm_auto.h:dyt BSVM_PopF(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_PopDestroy(BSVM_SVMState *ctx);
include/bsvm_auto.h:int BSVM_PopBool(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_PushList(BSVM_SVMState *ctx, dyt l);
include/bsvm_auto.h:dyt BSVM_PopList(BSVM_SVMState *ctx);
include/bsvm_auto.h:dyt BSVM_PopList2(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_PopMark(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_ShiftMark(BSVM_SVMState *ctx);
include/bsvm_auto.h:dyt BSVM_LookupCTop(BSVM_SVMState *ctx, dyt key);
include/bsvm_auto.h:dyt BSVM_Lookup(BSVM_SVMState *ctx, dyt key);
include/bsvm_auto.h:void BSVM_Assign(BSVM_SVMState *ctx, dyt key, dyt val);
include/bsvm_auto.h:dyt BSVM_LookupIdx(BSVM_SVMState *ctx, int idx);
include/bsvm_auto.h:void BSVM_AssignIdx(BSVM_SVMState *ctx, int idx, dyt val);
include/bsvm_auto.h:void BSVM_AssignIdxF(BSVM_SVMState *ctx, int idx, dyt val);
include/bsvm_auto.h:void BSVM_Bind(BSVM_SVMState *ctx, dyt key, dyt val);
include/bsvm_auto.h:void BSVM_LexBind(BSVM_SVMState *ctx, dyt key, dyt val);
include/bsvm_auto.h:void BSVM_DynBind(BSVM_SVMState *ctx, dyt key, dyt val);
include/bsvm_auto.h:dyt BSVM_LoadIndex(BSVM_SVMState *ctx, dyt obj, dyt key);
include/bsvm_auto.h:void BSVM_StoreIndex(BSVM_SVMState *ctx, dyt obj, dyt key, dyt val);
include/bsvm_auto.h:dyt BSVM_Unary(BSVM_SVMState *ctx, int i, dyt obj);
include/bsvm_auto.h:dyt BSVM_Binary(BSVM_SVMState *ctx, int i, dyt tl, dyt tr);
include/bsvm_auto.h:int BSVM_CondUnary(BSVM_SVMState *ctx, int i, dyt obj);
include/bsvm_auto.h:int BSVM_CondBinary(BSVM_SVMState *ctx, int i, dyt tl, dyt tr);
include/bsvm_auto.h:void BSVM_PushFrame(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_PopFrame(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_BindArgs(BSVM_SVMState *ctx, dyt kl, dyt vl);
include/bsvm_auto.h:void BSVM_CallObj(BSVM_SVMState *ctx, dyt obj, dyt f);
include/bsvm_auto.h:void BSVM_TailCallObj(BSVM_SVMState *ctx, dyt obj, dyt f);
include/bsvm_auto.h:void BSVM_MethodCall(BSVM_SVMState *ctx, dyt obj, dyt key);
include/bsvm_auto.h:void BSVM_MethodTailCall(BSVM_SVMState *ctx, dyt obj, dyt key);
include/bsvm_auto.h:dyt BSVM_Close(BSVM_SVMState *ctx, dyt f);
include/bsvm_auto.h:dyt BSVM_Cast(BSVM_SVMState *ctx, dyt ty, dyt t);
include/bsvm_auto.h:dyt BSVM_ReadID(BSVM_SVMState *ctx);
include/bsvm_auto.h:int BSVM_ReadIDX(BSVM_SVMState *ctx);
include/bsvm_auto.h:int BSVM_DumpOpcode(BSVM_SVMState *ctx);
include/bsvm_auto.h:void BSVM_StepJmpBool(BSVM_SVMState *ctx, int j);
include/bsvm_auto.h:int BSVM_StepC1(BSVM_SVMState *ctx);
include/bsvm_auto.h:int BSVM_Step(BSVM_SVMState *ctx);
include/bsvm_auto.h:int BSVM_Run(dyt ct);
include/bsvm_auto.h:BGBSVM_API dyt BSVM_EvalExprsObj(dyt exp, dyt obj);
include/bsvm_auto.h:BGBSVM_API dyt BSVM_EvalStringS(char *str);
include/bsvm_auto.h:BGBSVM_API dyt BSVM_EvalString(char *str);
include/bsvm_auto.h:BGBSVM_API dyt BSVM_EvalStringObj(char *str, dyt obj);
include/bsvm_auto.h:BGBSVM_API dyt BSVM_CallFuncObj(dyt obj, dyt fcn, dyt args);
include/bsvm_auto.h:int BSVMC_FormIs(dyt a, char *s);
include/bsvm_auto.h:int BSVMC_FormIsBinary(dyt a, char *s);
include/bsvm_auto.h:int BSVMC_CompileSwitch(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_CompileStatement(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:byte *BSVMC_NextOpcode(byte *ip);
include/bsvm_auto.h:byte *BSVMC_DumpOpcode(byte *ip, dyt lit);
include/bsvm_auto.h:dyt BSVMC_CompileBlock(BSVM_SVMCState *lctx,dyt name, dyt args, dyt body);
include/bsvm_auto.h:int BSVMC_BoolExpr(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:int BSVMC_IsExpr(dyt l);
include/bsvm_auto.h:dyt BSVMC_ReduceForm(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:char *BSVMC_LookupPPKey(BSVM_SVMCState *ctx, char *name);
include/bsvm_auto.h:dyt BSVMC_ReduceExpr(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:dyt BSVMC_InferTypeBase(dyt l);
include/bsvm_auto.h:int BSVMC_InferIsIntP(dyt t);
include/bsvm_auto.h:int BSVMC_InferIsLongP(dyt t);
include/bsvm_auto.h:int BSVMC_InferIsFloatP(dyt t);
include/bsvm_auto.h:int BSVMC_InferIsDoubleP(dyt t);
include/bsvm_auto.h:int BSVMC_InferIsNumP(dyt t);
include/bsvm_auto.h:dyt BSVMC_InferIsInt(dyt t);
include/bsvm_auto.h:dyt BSVMC_InferIsLong(dyt t);
include/bsvm_auto.h:dyt BSVMC_InferIsNum(dyt t);
include/bsvm_auto.h:dyt BSVMC_InferForm(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:dyt BSVMC_InferExpr(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:dyt BSVMC_InferExprClean(BSVM_SVMCState *ctx, dyt l, int *cp);
include/bsvm_auto.h:int BSVMC_GuessCloseForm(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:int BSVMC_GuessCloseExpr(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:int BSVMC_GuessCloseBlock(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:dyt BSVMC_ReverseStepStmt(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:dyt BSVMC_ReverseStepBlock(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:int BSVMC_IndexLit(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:int BSVMC_IndexLit2(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_EncIDX(BSVM_SVMCState *ctx, int i);
include/bsvm_auto.h:void BSVMC_EmitGoto(BSVM_SVMCState *ctx, char *name, byte *ip);
include/bsvm_auto.h:void BSVMC_EmitLabel(BSVM_SVMCState *ctx, char *name, byte *ip);
include/bsvm_auto.h:char *BSVMC_GenSym();
include/bsvm_auto.h:int BSVMC_RegIdx(dyt t);
include/bsvm_auto.h:void BSVMC_CompileBreak(BSVM_SVMCState *ctx);
include/bsvm_auto.h:void BSVMC_CompileContinue(BSVM_SVMCState *ctx);
include/bsvm_auto.h:void BSVMC_CompileBreakFalse(BSVM_SVMCState *ctx);
include/bsvm_auto.h:void BSVMC_CompileBreakTrue(BSVM_SVMCState *ctx);
include/bsvm_auto.h:void BSVMC_CompileContinueFalse(BSVM_SVMCState *ctx);
include/bsvm_auto.h:void BSVMC_CompileContinueTrue(BSVM_SVMCState *ctx);
include/bsvm_auto.h:void BSVMC_CompileJmp(BSVM_SVMCState *ctx, char *s);
include/bsvm_auto.h:void BSVMC_CompileJmpFalse(BSVM_SVMCState *ctx, char *s);
include/bsvm_auto.h:void BSVMC_CompileJmpTrue(BSVM_SVMCState *ctx, char *s);
include/bsvm_auto.h:void BSVMC_CompileJmpCond(BSVM_SVMCState *ctx, int i, char *s);
include/bsvm_auto.h:void BSVMC_CompileJCO(BSVM_SVMCState *ctx, int op, dyt ln, dyt rn);
include/bsvm_auto.h:void BSVMC_CompileJCT(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_CompileJCF(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:int BSVMC_CompileBinary(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:int BSVMC_CompileSpecial(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_EmitOp(BSVM_SVMCState *ctx, int i);
include/bsvm_auto.h:int BSVMC_CheckLexical(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_CompileAssign(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_CompileForm(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_CompileExprT(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_CompileExpr(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:void BSVMC_CompileExprTail(BSVM_SVMCState *ctx, dyt l);
include/bsvm_auto.h:dyt BSVMC_TranslateGastExpr(BSVM_SVMCState *ctx, dyxNode *l);
include/bsvm_auto.h:dyt BSVMC_TranslateGastExprList(BSVM_SVMCState *ctx, dyxNode *l);
include/bsvm_auto.h:dyt BSVMC_TranslateGastStmtList(BSVM_SVMCState *ctx, dyxNode *l);
include/bsvm_auto.h:dyt BSVMC_TranslateGastStmt(BSVM_SVMCState *ctx, dyxNode *l);
include/bsvm_auto.h:int BSVMC_CompileGast(BSVM_SVMCState *ctx, byte *data, int sz);
include/bsvm_auto.h:BGBSVM_API int BSVMP_GetLinenum();
include/bsvm_auto.h:BGBSVM_API char *BSVMP_GetFilename();
include/bsvm_auto.h:int BSVMP_CalcLinenum(char *se);
include/bsvm_auto.h:BGBSVM_API int BSVMP_SetLinenum(char *fname, char *base, int num);
include/bsvm_auto.h:int BSVMP_PushLinenum();
include/bsvm_auto.h:int BSVMP_PopLinenum();
include/bsvm_auto.h:int BSVM_MSG_Note(char *se, char *s, ...);
include/bsvm_auto.h:int BSVM_MSG_Warning(char *se, char *s, ...);
include/bsvm_auto.h:int BSVM_MSG_Error(char *se, char *s, ...);
include/bsvm_auto.h:char *BSVMP_EatWhiteOnly(char *s);
include/bsvm_auto.h:char *BSVMP_EatWhite(char *s);
include/bsvm_auto.h:int BSVMP_IsWhiteOnly(char *s);
include/bsvm_auto.h:int BSVMP_IsNextIndented(char *se);
include/bsvm_auto.h:int BSVMP_IsLineBreak(char *se);
include/bsvm_auto.h:int BSVMP_OpChar(int c);
include/bsvm_auto.h:char *BSVMP_Token(char *s, char *b, int *ty);
include/bsvm_auto.h:char *BSVMP_TokenQName(char *s, char *b, int *rty);
include/bsvm_auto.h:dyt BSVMP_FunArgs(char **str);
include/bsvm_auto.h:dyt BSVMP_FunArgs2(char **str);
include/bsvm_auto.h:dyt BSVMP_IListArgs(char **str);
include/bsvm_auto.h:dyt BSVMP_RListArgs(char **str);
include/bsvm_auto.h:dyt BSVMP_VarsList(char **str);
include/bsvm_auto.h:dyt BSVMP_DefType(char **str);
include/bsvm_auto.h:dyt BSVMP_FunVarsList(char **str);
include/bsvm_auto.h:dyt BSVMP_Class(char **str);
include/bsvm_auto.h:BGBSVM_API int BSVMP_AddExpression(char *name, dyt (*func)(char **s));
include/bsvm_auto.h:dyt BSVMP_ParseExpressionName(char *name, char **s);
include/bsvm_auto.h:dyt BSVMP_Number(char *str);
include/bsvm_auto.h:dyt BSVMP_RegEx(char *str);
include/bsvm_auto.h:dyt BSVMP_ExpressionLit(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionPE(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionCast(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionIncDec(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionE(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionMD(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionAS(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionSHLR(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionRCmp(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionLop(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionLop2(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionTCond(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionFunc(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionAttr(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionEquals(char **str);
include/bsvm_auto.h:dyt BSVMP_ExpressionComma(char **str);
include/bsvm_auto.h:BGBSVM_API dyt BSVMP_Expression(char **str);
include/bsvm_auto.h:dyt BSVMP_Expression2(char **str);
include/bsvm_auto.h:dyt BSVMP_Expression3(char **str);
include/bsvm_auto.h:BGBSVM_API dyt BSVMP_ExpressionType(char **str);
include/bsvm_auto.h:dyt BSVMP_TypeArgs(char **str);
include/bsvm_auto.h:dyt BSVMP_TypeExpressionLit(char **str);
include/bsvm_auto.h:dyt BSVMP_TypeExpressionPE(char **str);
include/bsvm_auto.h:dyt BSVMP_TypeExpressionUnary(char **str);
include/bsvm_auto.h:dyt BSVMP_TypeExpression(char **str);
include/bsvm_auto.h:dyt BSVMP_CastTypeExpression(char **str);
include/bsvm_auto.h:BGBSVM_API int BSVMP_AddStatement(char *name, dyt (*func)(char **s));
include/bsvm_auto.h:dyt BSVMP_ParseStatementName(char *name, char **s);
include/bsvm_auto.h:int BSVMP_AddBlockStatement(char *name,dyt (*func)(char **s));
include/bsvm_auto.h:dyt BSVMP_ParseBlockStatementName(char *name, char **s);
include/bsvm_auto.h:char *BSVMP_EatSemicolon(char *s);
include/bsvm_auto.h:dyt BSVMP_Statement(char **str);
include/bsvm_auto.h:dyt BSVMP_BlockStatementInner(char **str);
include/bsvm_auto.h:BGBSVM_API dyt BSVMP_BlockStatement(char **str);
include/bsvm_auto.h:BGBSVM_API dyt BSVMP_Block(char **str);
include/bsvm_auto.h:BGBSVM_API dyt BSVMP_BlockStatement2(char **str);
include/bsvm_auto.h:dyt bsvm_print(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_println(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_load(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_eval(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_car(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cdr(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_caar(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cdar(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cadr(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cddr(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_caaar(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cdaar(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cadar(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cddar(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_caadr(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cdadr(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_caddr(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cdddr(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:int BSVM_Builtins_Init();
include/bsvm_auto.h:dyt bsvm_sqrt(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_floor(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_ceil(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_round(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_truncate(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_pow(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_degrees(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_radians(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cos(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_sin(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_tan(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_cosd(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_sind(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_tand(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_acos(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_asin(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_atan(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_ln(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_log(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_log2(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_log10(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_real(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:dyt bsvm_imag(BSVM_SVMState *ctx, dyt args);
include/bsvm_auto.h:int BSVM_BuiltinMath_Init();
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_abs(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_acos(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_asin(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_atan(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_atan2(double y, double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_ceil(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_cos(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_exp(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_floor(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_log(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_pow(double x, double y);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_round(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_sin(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_sqrt(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_tan(double x);
include/bsvm_auto.h:BGBSVM_API double BSAPI_Math_random();
include/bsvm_base.h:dyt (*func)(char **s);
include/bsvm_base.h:u16 *(*func)(u16 *ip, BSVM_CompileContext *ctx, dyt expr);
include/bsvm_svm.h:int (*thunk)(BSVM_SVMState *ctx);
include/bsvm_svm.h:int (*thunk)(BSVM_SVMState *ctx);
include/bsvm_svm.h:int (*thunk)(BSVM_SVMState *ctx);
include/bsvm_svm.h:dyt (*fcn)(BSVM_SVMState *ctx, dyt args);
include/bsvm_svm.h:dyt (*fcn)();
include/bgbvx86.h:int (*scanrange_f)(void **p, int cnt);
include/bgbvx86.h:void *(*gcalloc_f)(int sz);
include/bgbvx86.h:void *(*gcexec_f)(int sz);
include/bgbvx86.h:void *(*gcatomic_f)(int sz);
include/bgbvx86.h:void *(*gctalloc_f)(char *ty, int sz);
include/bgbvx86.h:void *(*gctexec_f)(char *ty, int sz);
include/bgbvx86.h:void *(*gctatomic_f)(char *ty, int sz);
include/bgbvx86.h:void (*gcfree_f)(void *p);
include/bgbvx86.h:void *(*gcrealloc_f)(void *p, int sz);
include/bgbvx86.h:char *(*gcgettype_f)(void *p);
include/bgbvx86.h:int (*gcalloctls_f)(char *name, int sz);
include/bgbvx86.h:int (*gcgettlstls_f)();
include/bgbvx86.h:void *(*GetAddr)(char *sym);
include/bgbvx86.h:char *(*GetAddrName)(void *ptr);
include/bgbvx86.h:void (*SetAddr)(char *sym, void *ptr);
include/bgbvx86.h:char *(*GetAddrSig)(void *fcn);
include/bgbvx86.h:void *(*GetDynamic)(char *sym);
include/bgbvx86.h:void (*SetDynamic)(char *sym, void *val);
include/bgbvx86.h:void (*AsmBegin)();
include/bgbvx86.h:void *(*AsmEnd)();
include/bgbvx86.h:void (*AsmBeginThunkInline)();
include/bgbvx86.h:void *(*AsmEndThunkInline)();
include/bgbvx86.h:void (*AsmPuts)(char *str);
include/bgbvx86.h:	void *(*fcn)(char *sym, char *name, char **args));
include/bgbvx86.h:	void (*fcn)(char *sym, char *name, char **args, void *ptr));
include/bgbvx86.h:char *(*ComposeLinkMetaName)(char *name, char **args);
include/bgbvx86.h:char *(*ComposeLinkNotifyName)(char *name, char **args);
include/bgbvx86.h:void *(*ApplyPtrV)(void *fcn, va_list lst);
include/bgbvx86.h:void *(*ApplyPtrU)(void *fcn, void **args);
include/bgbvx86.h:void *(*ApplyPtrObjV)(void *fcn, void *obj, va_list lst);
include/bgbvx86.h:void *(*ApplyPtrObjU)(void *fcn, void *obj, void **args);
include/bgbvx86.h:void *(*ApplyPtrSigV)(void *fcn, char *sig, va_list lst);
include/bgbvx86.h:void *(*ApplyPtrSigU)(void *fcn, char *sig, void **args);
include/bgbvx86.h:void *(*ApplyPtrSigObjV)(void *fcn, char *sig, void *obj, va_list lst);
include/bgbvx86.h:void *(*ApplyPtrSigObjU)(void *fcn, char *sig, void *obj, void **args);
include/bgbvx86.h:void *(*WrapClosure)(void *fcn, void *data, char *sig);
include/bgbvx86.h:void (*MetaInit)();
include/bgbvx86.h:void (*MetaCommit)();
include/bgbvx86.h:void (*MetaBindKey)(char *key, char *val);
include/bgbvx86.h:char *(*MetaLookupKey)(char *key);
include/bgbvx86.h:void *(*fopen_fp)(char *name, char *mode);
include/bgbvx86.h:void (*fclose_fp)(void *fd);
include/bgbvx86.h:int (*fread_fp)(void *buf, int m, int n, void *fd);
include/bgbvx86.h:int (*fwrite_fp)(void *buf, int m, int n, void *fd);
include/bgbvx86.h:int (*feof_fp)(void *fd);
include/bgbvx86.h:s64 (*ftell_fp)(void *fd);
include/bgbvx86.h:int (*fseek_fp)(void *fd, s64 pos, int rel);
include/bgbvx86.h:int (**ihdlr)(BGBV86_Context *ctx);
include/bgbvx86.h:int (*exec)(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86.h:void (*fcn)(BGBV86_Context *ctx, BGBV86_JumpInfo *jmp);
include/bgbvx86_auto.h:BGBV86_API BGBV86_Image *BGBV86_LookupImage(int pid);
include/bgbvx86_auto.h:BGBV86_API BGBV86_Context *BGBV86_LookupContext(int tid);
include/bgbvx86_auto.h:BGBV86_API BGBV86_Image *BGBV86_NewImage();
include/bgbvx86_auto.h:BGBV86_API BGBV86_Context *BGBV86_NewContextImg(BGBV86_Image *img);
include/bgbvx86_auto.h:BGBV86_API BGBV86_Context *BGBV86_NewContext();
include/bgbvx86_auto.h:BGBV86_API int BGBV86_DestroyContext(BGBV86_Context *ctx);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_DestroyImage(BGBV86_Image *img);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageIndexAddr(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageIndexAddr(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageIndexAddr2(BGBV86_Context *ctx, s64 addr, s64 sz);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageIndexAddr(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageIndexAddr2(BGBV86_Context *ctx, s64 addr, s64 sz);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_ImageResolveAddr(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_ImageResolveAddr2(BGBV86_Context *ctx, s64 addr, s64 sz);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_ImageResolveAddrW(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_ImageResolveAddr2W(BGBV86_Context *ctx, s64 addr, s64 sz);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageCheckPointerVA(BGBV86_Context *ctx, byte *ptr);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_ImageResolveAddr(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_ImageResolveAddr2(BGBV86_Context *ctx, s64 addr, s64 sz);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageMapRange(BGBV86_Context *ctx,void *ptr, s64 base, int size);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageCheckRangeFree(BGBV86_Context *ctx,s64 base, int size);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageFindFreeRange(BGBV86_Context *ctx, s64 size);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageFindFreeRangeTD(BGBV86_Context *ctx, s64 size);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageVirtualAlloc(BGBV86_Context *ctx,s64 base, s64 size, int flalloc, int flprot);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageVirtualFree(BGBV86_Context *ctx,s64 base, s64 size, int flag);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageMapFile(BGBV86_Context *ctx,s64 base, s64 size, int flalloc, int flprot, int fd, s64 offs);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageMapSync(BGBV86_Context *ctx,s64 base, s64 size, int fl);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageMapProtect(BGBV86_Context *ctx,s64 base, s64 size, int fl);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageReadSz(BGBV86_Context *ctx, s64 addr, byte *buf, int sz);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_ImageWriteSz(BGBV86_Context *ctx, s64 addr, byte *buf, int sz);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageMalloc(BGBV86_Context *ctx, int size);
include/bgbvx86_auto.h:BGBV86_API void BGBV86_ImageFree(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageStrdup(BGBV86_Context *ctx, char *str);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_DecodeOpcode(BGBV86_Context *ctx,BGBV86_DecodeOp *dop, byte *ip);
include/bgbvx86_auto.h:BGBV86_API char *BGBV86_GetRegName(int reg);
include/bgbvx86_auto.h:BGBV86_API void BGBV86_DumpOpcode_RM(BGBV86_Context *ctx,BGBV86_DecodeOp *op);
include/bgbvx86_auto.h:BGBV86_API void BGBV86_DumpOpcode(BGBV86_Context *ctx,BGBV86_DecodeOp *op);
include/bgbvx86_auto.h:BGBV86_API void BGBV86_SetEIP(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API void BGBV86_SetESP(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API void BGBV86_SetEBP(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_DumpState(BGBV86_Context *ctx);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_Step(BGBV86_Context *ctx);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_RunCnt2(BGBV86_Context *ctx, int cnt);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_RunCnt(BGBV86_Context *ctx, int cnt);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_RunSchedPass(int cnt);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_RunSchedUS(int usec);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_GetTimeUS();
include/bgbvx86_auto.h:BGBV86_API int BGBV86_MiniRand();
include/bgbvx86_auto.h:BGBV86_API int BGBV86_RegisterHandlerStatic(int idx, int (*fcn)(BGBV86_Context *ctx));
include/bgbvx86_auto.h:BGBV86_API int BGBV86_RegisterHandlerDynamic(int (*fcn)(BGBV86_Context *ctx));
include/bgbvx86_auto.h:BGBV86_API int BGBV86_Init();
include/bgbvx86_auto.h:BGBV86_API int BGBV86_DestroyProcess(BGBV86_Context *ctx);
include/bgbvx86_auto.h:BGBV86_API BGBV86_Context *BGBV86_SpawnProcess(char *path, char **argv, char **env, BGBV86_SpawnInfo *inf, int flag);
include/bgbvx86_auto.h:BGBV86_API void *BGBV86_GetVFEnvOS();
include/bgbvx86_auto.h:BGBV86_API void *bgbv86_setio(void *env);
include/bgbvx86_auto.h:BGBV86_API BGBV86_GCFuncs *BGBV86_GetGCFuncs();
include/bgbvx86_auto.h:BGBV86_API BGBV86_ASFuncs *BGBV86_GetASFuncs();
include/bgbvx86_auto.h:BGBV86_API void BGBV86_InitGCAS();
include/bgbvx86_auto.h:BGBV86_API int BGBV86_AddDllPath(char *path);
include/bgbvx86_auto.h:BGBV86_API BGBV86_PE_Info *BGBV86_PE_LookupImage(BGBV86_Context *vm, char *name);
include/bgbvx86_auto.h:BGBV86_API BGBV86_PE_Info *BGBV86_PE_LookupImageAddr(BGBV86_Context *vm, s64 addr);
include/bgbvx86_auto.h:BGBV86_API int BGBV86_PE_LookupImageExportNameOrdinal(BGBV86_PE_Info *ctx, char *name);
include/bgbvx86_auto.h:BGBV86_API u32 BGBV86_PE_LookupImageExportOrdinalRVA(BGBV86_PE_Info *ctx, int ord);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_PE_LookupImageExportOrdinal(BGBV86_PE_Info *ctx, int ord);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_PE_LookupImageExportOrdinalVA(BGBV86_PE_Info *ctx, int ord);
include/bgbvx86_auto.h:BGBV86_API byte *BGBV86_PE_LookupImageExport(BGBV86_PE_Info *ctx, char *name);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_PE_LookupImageExportVA(BGBV86_PE_Info *ctx, char *name);
include/bgbvx86_auto.h:BGBV86_API BGBV86_PE_Info *BGBV86_PE_LoadImageBuf(BGBV86_Context *vm,char *name, byte *buf, int sz);
include/bgbvx86_auto.h:BGBV86_API BGBV86_PE_Info *BGBV86_PE_LoadImage(BGBV86_Context *vm, char *name);
include/bgbvx86_auto.h:BGBV86_API s64 BGBV86_ImageLookupSymbol(BGBV86_Context *ctx, char *name);
include/bgbvx86_autoi.h:void *bgbv86_malloc(int sz);
include/bgbvx86_autoi.h:void *bgbv86_realloc(void *p, int sz);
include/bgbvx86_autoi.h:void bgbv86_free(void *p);
include/bgbvx86_autoi.h:char *bgbv86_strdup(char *s);
include/bgbvx86_autoi.h:void *bgbv86_ralloc(int sz);
include/bgbvx86_autoi.h:char *bgbv86_rstrdup(char *str);
include/bgbvx86_autoi.h:char *bgbv86_rsprint(char *str, ...);
include/bgbvx86_autoi.h:char **bgbv86_rsplit(char *s);
include/bgbvx86_autoi.h:char *bgbv86_rgets(char **str);
include/bgbvx86_autoi.h:s64 BGBV86_ImageMallocCellBlk(BGBV86_Context *ctx,BGBV86_MapInfo *map, int size);
include/bgbvx86_autoi.h:s64 BGBV86_ImageMallocCell(BGBV86_Context *ctx, int size);
include/bgbvx86_autoi.h:void BGBV86_ImageFreeCellBlk(BGBV86_Context *ctx,BGBV86_MapInfo *map, s64 addr);
include/bgbvx86_autoi.h:int BGBV86_GetRegU8(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:int BGBV86_GetRegS8(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:int BGBV86_GetRegU16(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:int BGBV86_GetRegS16(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:u32 BGBV86_GetRegU32(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:s32 BGBV86_GetRegS32(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:u64 BGBV86_GetRegU64(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:s64 BGBV86_GetRegS64(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:s64 BGBV86_GetRegGeneric(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:u64 BGBV86_GetRegUGeneric(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:int BGBV86_SetRegU8(BGBV86_Context *ctx, int reg, int val);
include/bgbvx86_autoi.h:int BGBV86_SetRegU16(BGBV86_Context *ctx, int reg, int val);
include/bgbvx86_autoi.h:int BGBV86_SetRegU32(BGBV86_Context *ctx, int reg, u32 val);
include/bgbvx86_autoi.h:int BGBV86_SetRegU64(BGBV86_Context *ctx, int reg, u64 val);
include/bgbvx86_autoi.h:int BGBV86_SetRegGeneric(BGBV86_Context *ctx, int reg, s64 val);
include/bgbvx86_autoi.h:int BGBV86_ImageReadU8(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:int BGBV86_ImageReadS8(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:u16 BGBV86_ImageReadU16(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:s16 BGBV86_ImageReadS16(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:u32 BGBV86_ImageReadU32(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:s32 BGBV86_ImageReadS32(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:u64 BGBV86_ImageReadU64(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:s64 BGBV86_ImageReadS64(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteU8(BGBV86_Context *ctx, s64 addr, byte val);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteU16(BGBV86_Context *ctx, s64 addr, u16 val);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteU32(BGBV86_Context *ctx, s64 addr, u32 val);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteU64(BGBV86_Context *ctx, s64 addr, u64 val);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteS8(BGBV86_Context *ctx, s64 addr, int val);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteS16(BGBV86_Context *ctx, s64 addr, int val);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteS32(BGBV86_Context *ctx, s64 addr, s32 val);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteS64(BGBV86_Context *ctx, s64 addr, s64 val);
include/bgbvx86_autoi.h:u64 BGBV86_ImageReadUGeneric(BGBV86_Context *ctx, s64 addr, int w);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteUGeneric(BGBV86_Context *ctx, s64 addr, u64 val, int w);
include/bgbvx86_autoi.h:s64 BGBV86_ImageReadGeneric(BGBV86_Context *ctx, s64 addr, int w);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteGeneric(BGBV86_Context *ctx, s64 addr, s64 val, int w);
include/bgbvx86_autoi.h:u64 BGBV86_ImageReadUGenericDS(BGBV86_Context *ctx, s64 addr, int w);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteUGenericDS(BGBV86_Context *ctx, s64 addr, u64 val, int w);
include/bgbvx86_autoi.h:s64 BGBV86_ImageReadGenericDS(BGBV86_Context *ctx, s64 addr, int w);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteGenericDS(BGBV86_Context *ctx, s64 addr, s64 val, int w);
include/bgbvx86_autoi.h:u64 BGBV86_ImageReadUGenericES(BGBV86_Context *ctx, s64 addr, int w);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteUGenericES(BGBV86_Context *ctx, s64 addr, u64 val, int w);
include/bgbvx86_autoi.h:s64 BGBV86_ImageReadGenericES(BGBV86_Context *ctx, s64 addr, int w);
include/bgbvx86_autoi.h:int BGBV86_ImageWriteGenericES(BGBV86_Context *ctx, s64 addr, s64 val, int w);
include/bgbvx86_autoi.h:char *BGBV86_ImageReadString(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:void BGBV86_InitDecode();
include/bgbvx86_autoi.h:int BGBV86_CheckOpStrN(byte *ip, char *str, int fl, int op, int n);
include/bgbvx86_autoi.h:int BGBV86_CheckOpStr(byte **rip, char **str, int *rfl, int op);
include/bgbvx86_autoi.h:byte *BGBV86_DecodeModRM_RM16(BGBV86_Context *ctx, BGBV86_DecodeOp *dop,byte *ip, int op, int fl, int w);
include/bgbvx86_autoi.h:byte *BGBV86_DecodeModRM_RM(BGBV86_Context *ctx, BGBV86_DecodeOp *dop,byte *ip, int op, int fl, int w);
include/bgbvx86_autoi.h:byte *BGBV86_SkipModRM(byte *ip, int fl);
include/bgbvx86_autoi.h:int BGBV86_GetFixReg(int i, int j);
include/bgbvx86_autoi.h:int BGBV86_SetSegReg(BGBV86_Context *ctx, int reg, int val);
include/bgbvx86_autoi.h:void BGBV86_AdjustArithFlagsU8(BGBV86_Context *ctx, int a);
include/bgbvx86_autoi.h:void BGBV86_AdjustArithFlagsU16(BGBV86_Context *ctx, int a);
include/bgbvx86_autoi.h:void BGBV86_AdjustArithFlagsU32(BGBV86_Context *ctx, u32 a);
include/bgbvx86_autoi.h:void BGBV86_AdjustArithFlagsU32_64(BGBV86_Context *ctx, s64 a);
include/bgbvx86_autoi.h:void BGBV86_AdjustArithFlagsU64(BGBV86_Context *ctx, u64 a);
include/bgbvx86_autoi.h:int BGBV86_AdjustArithFlagsUGeneric(BGBV86_Context *ctx, u64 val, int w);
include/bgbvx86_autoi.h:int BGBV86_AdjustMulFlagsUGeneric(BGBV86_Context *ctx, u64 val, int w);
include/bgbvx86_autoi.h:int BGBV86_AdjustMulFlagsGeneric(BGBV86_Context *ctx, s64 val, int w);
include/bgbvx86_autoi.h:s64 BGBV86_AddAdjustFlagsGeneric(BGBV86_Context *ctx, s64 aq, s64 bq, int w);
include/bgbvx86_autoi.h:s64 BGBV86_SubAdjustFlagsGeneric(BGBV86_Context *ctx, s64 aq, s64 bq, int w);
include/bgbvx86_autoi.h:s64 BGBV86_AdcAdjustFlagsGeneric(BGBV86_Context *ctx, s64 aq, s64 bq, int w);
include/bgbvx86_autoi.h:s64 BGBV86_SbbAdjustFlagsGeneric(BGBV86_Context *ctx, s64 aq, s64 bq, int w);
include/bgbvx86_autoi.h:u64 BGBV86_HighMulU64(BGBV86_Context *ctx, u64 aq, u64 bq);
include/bgbvx86_autoi.h:s64 BGBV86_HighMulS64(BGBV86_Context *ctx, s64 aq, s64 bq);
include/bgbvx86_autoi.h:int BGBV86_CheckFlagsCC(BGBV86_Context *ctx, int cc);
include/bgbvx86_autoi.h:BGBV86_JumpInfo *BGBV86_LookupJumpTriggerEIP(BGBV86_Context *ctx,s64 eip);
include/bgbvx86_autoi.h:BGBV86_JumpInfo *BGBV86_AddJumpTrigger(BGBV86_Context *ctx,void (*fcn)(BGBV86_Context *ctx, BGBV86_JumpInfo *jmp), void *data, s64 eip);
include/bgbvx86_autoi.h:void BGBV86_JumpAddr(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:void BGBV86_JumpAddrCC(BGBV86_Context *ctx, s64 addr, int cc);
include/bgbvx86_autoi.h:void BGBV86_DoRCL(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_DoRCR(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_DoROL(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_DoROR(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_DoSAL(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_DoSAR(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_DoSHL(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_DoSHR(BGBV86_Context *ctx, u32 rm, int width, int step);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseDE(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseUD(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseGP(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseHalt(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseLock(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseCPL0(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseInt(BGBV86_Context *ctx, int n);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseExit(BGBV86_Context *ctx, int val);
include/bgbvx86_autoi.h:void BGBV86_CheckRaiseUSleep(BGBV86_Context *ctx, s64 val);
include/bgbvx86_autoi.h:int BGBV86_MiniRand1();
include/bgbvx86_autoi.h:s64 BGBV86_ResolveRMAddr(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:void BGBV86_PushGeneric(BGBV86_Context *ctx, s64 val, int w);
include/bgbvx86_autoi.h:s64 BGBV86_PopGeneric(BGBV86_Context *ctx, int w);
include/bgbvx86_autoi.h:void BGBV86_CMovCC(BGBV86_Context *ctx, BGBV86_DecodeOp *op, int cc);
include/bgbvx86_autoi.h:void BGBV86_SetCC(BGBV86_Context *ctx, s64 rm, int cc);
include/bgbvx86_autoi.h:void BGBV86_DoRepOp_DirectFW(BGBV86_Context *ctx,BGBV86_DecodeOp *op, byte *psi, byte *pdi, s64 cx);
include/bgbvx86_autoi.h:void BGBV86_DoRepOp_DirectBW(BGBV86_Context *ctx,BGBV86_DecodeOp *op, byte *psi, byte *pdi, s64 cx);
include/bgbvx86_autoi.h:void BGBV86_DoRepOp(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:void BGBV86_DoStrOp(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:void BGBV86_DoRepccOp(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:void BGBV86_DoCPUID(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_Basic(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RM(BGBV86_Context *ctx,BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegRM(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMReg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegRMImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMRegImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegRMReg2(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMRegReg2(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegReg2RM(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMReg2Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegRMReg2Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMRegReg2Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegReg2RMImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMReg2RegImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegRMReg2Reg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMRegReg2Reg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegReg2RMReg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMReg2RegReg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegRMReg2Reg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMRegReg2Reg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegReg2RMReg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RMReg2RegReg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcode(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpAdc_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpAdd_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpAnd_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpCmp_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpImul_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMov_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovsxb_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovsxw_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovsxd_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovzxb_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovzxw_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovzxd_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpOr_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpSbb_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpSub_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpXChg_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpXor_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:void *BGBV86_FetchOpcode_RegReg1(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpAdc_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpAdd_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpAnd_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpCmp_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpImul_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMov_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovsxb_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovsxw_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovsxd_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovzxb_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovzxw_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMovzxd_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpOr_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpSbb_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpSub_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpXChg_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpXor_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpMov_Reg1Reg32(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpAnd_Reg1Reg32(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpOr_Reg1Reg32(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_OpXor_Reg1Reg32(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:void *BGBV86_FetchOpcode_Reg1Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:void *BGBV86_FetchOpcodeExec(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:double BGBV86_DecodeFloat32(u32 t);
include/bgbvx86_autoi.h:double BGBV86_DecodeFloat64(u64 t);
include/bgbvx86_autoi.h:double BGBV86_DecodeFloat80(u64 m, u16 t);
include/bgbvx86_autoi.h:u32 BGBV86_EncodeFloat32(double f);
include/bgbvx86_autoi.h:u64 BGBV86_EncodeFloat64(double f);
include/bgbvx86_autoi.h:double BGBV86_DecodeFloat32(u32 t);
include/bgbvx86_autoi.h:double BGBV86_DecodeFloat64(u64 t);
include/bgbvx86_autoi.h:double BGBV86_DecodeFloat80(u64 m, u16 t);
include/bgbvx86_autoi.h:u32 BGBV86_EncodeFloat32(double f);
include/bgbvx86_autoi.h:u64 BGBV86_EncodeFloat64(double f);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatAdd(BGBV86_VFloat a, BGBV86_VFloat b);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatNeg(BGBV86_VFloat a);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatNorm(BGBV86_VFloat a);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatSub(BGBV86_VFloat a, BGBV86_VFloat b);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatMul(BGBV86_VFloat a, BGBV86_VFloat b);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatRcp(BGBV86_VFloat a);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatDiv(BGBV86_VFloat a, BGBV86_VFloat b);
include/bgbvx86_autoi.h:double BGBV86_VFloat2Double(BGBV86_VFloat a);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_Double2VFloat(double f);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatLoad32(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatLoad64(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_VFloatLoad80(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:u32 BGBV86_VFloatConv32(BGBV86_Context *ctx, BGBV86_VFloat a);
include/bgbvx86_autoi.h:u64 BGBV86_VFloatConv64(BGBV86_Context *ctx, BGBV86_VFloat a);
include/bgbvx86_autoi.h:int BGBV86_VFloatStore32(BGBV86_Context *ctx, s64 addr, BGBV86_VFloat a);
include/bgbvx86_autoi.h:int BGBV86_VFloatStore64(BGBV86_Context *ctx, s64 addr, BGBV86_VFloat a);
include/bgbvx86_autoi.h:int BGBV86_VFloatStore80(BGBV86_Context *ctx, s64 addr, BGBV86_VFloat a);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_FPU_GetRegST(BGBV86_Context *ctx, int st);
include/bgbvx86_autoi.h:void BGBV86_FPU_SetRegST(BGBV86_Context *ctx, int st, BGBV86_VFloat a);
include/bgbvx86_autoi.h:int BGBV86_FPU_GetST(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_FPU_DecST(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_FPU_IncST(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int BGBV86_FPU_SetFreeST(BGBV86_Context *ctx, int st);
include/bgbvx86_autoi.h:int BGBV86_FPU_SetUsedST(BGBV86_Context *ctx, int st);
include/bgbvx86_autoi.h:double BGBV86_FPU_GetRegSTd(BGBV86_Context *ctx, int st);
include/bgbvx86_autoi.h:void BGBV86_FPU_SetRegSTd(BGBV86_Context *ctx, int st, double f);
include/bgbvx86_autoi.h:BGBV86_VFloat BGBV86_FPU_PopRegST(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_FPU_PushRegST(BGBV86_Context *ctx, BGBV86_VFloat a);
include/bgbvx86_autoi.h:double BGBV86_FPU_PopRegSTd(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:void BGBV86_FPU_PushRegSTd(BGBV86_Context *ctx, double f);
include/bgbvx86_autoi.h:void BGBV86_FPU_Init(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeFPU_Basic(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeFPU_Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeFPU_RM(BGBV86_Context *ctx,BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeFPU_RegRM(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeFPU_RMReg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:u32 BGBV86_AddReal32A(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_AddReal32B(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_AddReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_SubReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_MulReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_RcpReal32(u32 a);
include/bgbvx86_autoi.h:u32 BGBV86_DivReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_AddReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_SubReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_MulReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u32 BGBV86_RcpReal32(u32 a);
include/bgbvx86_autoi.h:u32 BGBV86_DivReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u64 BGBV86_AddReal64(u64 a, u64 b);
include/bgbvx86_autoi.h:u64 BGBV86_SubReal64(u64 a, u64 b);
include/bgbvx86_autoi.h:u64 BGBV86_MulReal64(u64 a, u64 b);
include/bgbvx86_autoi.h:u64 BGBV86_RcpReal64(u64 a);
include/bgbvx86_autoi.h:u64 BGBV86_DivReal64(u64 a, u64 b);
include/bgbvx86_autoi.h:u32 BGBV86_SqrtReal32(u32 a);
include/bgbvx86_autoi.h:u32 BGBV86_RSqrtReal32(u32 a);
include/bgbvx86_autoi.h:int BGBV86_CmpReal32(u32 a, u32 b);
include/bgbvx86_autoi.h:u64 BGBV86_SqrtReal64(u64 a);
include/bgbvx86_autoi.h:u64 BGBV86_RSqrtReal64(u64 a);
include/bgbvx86_autoi.h:int BGBV86_CmpReal64(u64 a, u64 b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAddSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSubSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMulSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdDivSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRcpSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSqrtSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMaxSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMinSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRSqrtSS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAddPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSubPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMulPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdDivPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRcpPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSqrtPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMaxPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMinPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRSqrtPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAndPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdOrPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdXorPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAndNPS(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:u64 BGBV86_SimdGet64(BGBV86_VXMM *a, int i);
include/bgbvx86_autoi.h:void BGBV86_SimdSet64(BGBV86_VXMM *a, int i, u64 v);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAddSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSubSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMulSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdDivSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRcpSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSqrtSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMaxSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMinSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRSqrtSD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAddPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSubPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMulPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdDivPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRcpPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdSqrtPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMaxPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdMinPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdRSqrtPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAndPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdOrPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdXorPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_SimdAndNPD(BGBV86_VXMM a, BGBV86_VXMM b);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_GetRegXMM_MM(BGBV86_Context *ctx, int n);
include/bgbvx86_autoi.h:void BGBV86_SetRegXMM_MM(BGBV86_Context *ctx, int n, BGBV86_VXMM a);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_GetRegXMM(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:void BGBV86_SetRegXMM(BGBV86_Context *ctx, int reg, BGBV86_VXMM a);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_ImageReadXMM(BGBV86_Context *ctx, s64 rm);
include/bgbvx86_autoi.h:void BGBV86_ImageWriteXMM(BGBV86_Context *ctx, s64 rm, BGBV86_VXMM a);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_ImageReadSS(BGBV86_Context *ctx, s64 rm);
include/bgbvx86_autoi.h:void BGBV86_ImageWriteSS(BGBV86_Context *ctx, s64 rm, BGBV86_VXMM a);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_ImageReadSD(BGBV86_Context *ctx, s64 rm);
include/bgbvx86_autoi.h:void BGBV86_ImageWriteSD(BGBV86_Context *ctx, s64 rm, BGBV86_VXMM a);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_GetRegSS(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:void BGBV86_SetRegSS(BGBV86_Context *ctx, int reg, BGBV86_VXMM a);
include/bgbvx86_autoi.h:BGBV86_VXMM BGBV86_GetRegSD(BGBV86_Context *ctx, int reg);
include/bgbvx86_autoi.h:void BGBV86_SetRegSD(BGBV86_Context *ctx, int reg, BGBV86_VXMM a);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_Basic(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RM(BGBV86_Context *ctx,BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegRM(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMReg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegRMImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMRegImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegRMReg2(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMRegReg2(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegReg2RM(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMReg2Reg(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegRMReg2Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMRegReg2Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegReg2RMImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMReg2RegImm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegRMReg2Reg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMRegReg2Reg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegReg2RMReg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMReg2RegReg3(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegRMReg2Reg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMRegReg2Reg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RegReg2RMReg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int BGBV86_ExecOpcodeSSE_RMReg2RegReg3Imm(BGBV86_Context *ctx, BGBV86_DecodeOp *op);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_print(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_malloc(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_free(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_read(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_write(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_lseek(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_open(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_close(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_eof(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_tell(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_exit(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_loadlib(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_getmodhdl(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_getprocaddr(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_nativecall(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_nativecall2(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_metagetkey(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_metasetkey(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int bgbv86_ihdlr_inttab(BGBV86_Context *ctx);
include/bgbvx86_autoi.h:int BGBV86_InitHandler();
include/bgbvx86_autoi.h:s64 bgbv86_tell_tmp(void *fd);
include/bgbvx86_autoi.h:int bgbv86_seek_tmp(void *fd, s64 pos, int rel);
include/bgbvx86_autoi.h:void bgbv86_initvfs();
include/bgbvx86_autoi.h:void *bgbv86_fopen(char *name, char *mode);
include/bgbvx86_autoi.h:void bgbv86_fclose(void *fd);
include/bgbvx86_autoi.h:int bgbv86_fread(void *buf, int m, int n, void *fd);
include/bgbvx86_autoi.h:int bgbv86_fwrite(void *buf, int m, int n, void *fd);
include/bgbvx86_autoi.h:int bgbv86_feof(void *fd);
include/bgbvx86_autoi.h:s64 bgbv86_ftell(void *fd);
include/bgbvx86_autoi.h:s64 bgbv86_fseek(void *fd, s64 pos, int rel);
include/bgbvx86_autoi.h:int bgbv86_fgetc(void *fd);
include/bgbvx86_autoi.h:void bgbv86_fputc(int c, void *fd);
include/bgbvx86_autoi.h:int bgbv86_mkdir(char *name);
include/bgbvx86_autoi.h:void *bgbv86_opendir(char *name);
include/bgbvx86_autoi.h:void bgbv86_closedir(void *hdl);
include/bgbvx86_autoi.h:char *bgbv86_readdir(void *hdl);
include/bgbvx86_autoi.h:void bgbv86_rewinddir(void *hdl);
include/bgbvx86_autoi.h:void *bgbv86_loadfile(char *name, int *rsz);
include/bgbvx86_autoi.h:int bgbv86_storefile(char *name, void *buf, int sz);
include/bgbvx86_autoi.h:int bgbv86_storetextfile(char *name, char *buf);
include/bgbvx86_autoi.h:void *bgbv86_getfd(int fd);
include/bgbvx86_autoi.h:int bgbv86_setfd(int fd, void *ptr);
include/bgbvx86_autoi.h:int bgbv86_idxfd(void *fd);
include/bgbvx86_autoi.h:void bgbv86_msyncfd(int fd);
include/bgbvx86_autoi.h:void *bgbv86_mmapfd(int fd, s64 offs, int sz);
include/bgbvx86_autoi.h:int bgbv86_read(int fd, void *buf, int sz);
include/bgbvx86_autoi.h:int bgbv86_write(int fd, void *buf, int sz);
include/bgbvx86_autoi.h:s64 bgbv86_lseek(int fd, s64 offs, int mode);
include/bgbvx86_autoi.h:int bgbv86_open(char *name, int flag, int mode);
include/bgbvx86_autoi.h:int bgbv86_close(int fd);
include/bgbvx86_autoi.h:int bgbv86_eof(int fd);
include/bgbvx86_autoi.h:int bgbv86_tell(int fd);
include/bgbvx86_autoi.h:void BGBV86_InitGCAS_DLL();
include/bgbvx86_autoi.h:void BGBV86_ScanRange(void **p, int cnt);
include/bgbvx86_autoi.h:void *VXGC_Alloc(int sz);
include/bgbvx86_autoi.h:void *VXGC_Exec(int sz);
include/bgbvx86_autoi.h:void *VXGC_Atomic(int sz);
include/bgbvx86_autoi.h:void *VXGC_TAlloc(char *ty, int sz);
include/bgbvx86_autoi.h:void *VXGC_TExec(char *ty, int sz);
include/bgbvx86_autoi.h:void *VXGC_TAtomic(char *ty, int sz);
include/bgbvx86_autoi.h:void VXGC_Free(void *obj);
include/bgbvx86_autoi.h:void *VXGC_ReAlloc(void *obj, int sz);
include/bgbvx86_autoi.h:int VXGC_AllocTls(char *name, int sz);
include/bgbvx86_autoi.h:int VXGC_GetTlsTls();
include/bgbvx86_autoi.h:void *VXAS_GetAddr(char *sym);
include/bgbvx86_autoi.h:char *VXAS_GetAddrName(void *ptr);
include/bgbvx86_autoi.h:void VXAS_SetAddr(char *sym, void *ptr);
include/bgbvx86_autoi.h:void *VXAS_GetDynamic(char *sym);
include/bgbvx86_autoi.h:void VXAS_SetDynamic(char *sym, void *val);
include/bgbvx86_autoi.h:void VXAS_AsmBegin();
include/bgbvx86_autoi.h:void *VXAS_AsmEnd();
include/bgbvx86_autoi.h:void VXAS_AsmBeginThunkInline();
include/bgbvx86_autoi.h:void *VXAS_AsmEndThunkInline();
include/bgbvx86_autoi.h:void VXAS_AsmPuts(char *str);
include/bgbvx86_autoi.h:int VXAS_AsmRegisterLinkMeta(char *name,void *(*fcn)(char *sym, char *name, char **args));
include/bgbvx86_autoi.h:int VXAS_AsmRegisterLinkNotify(char *name,void (*fcn)(char *sym, char *name, char **args, void *ptr));
include/bgbvx86_autoi.h:char *VXAS_ComposeLinkMetaName(char *name, char **args);
include/bgbvx86_autoi.h:char *VXAS_ComposeLinkNotifyName(char *name, char **args);
include/bgbvx86_autoi.h:char *VXAS_GetAddrSig(void *fcn);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrV(void *fcn, va_list lst);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrU(void *fcn, void **args);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrObjV(void *fcn, void *obj, va_list lst);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrObjU(void *fcn, void *obj, void **args);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrSigV(void *fcn, char *sig, va_list lst);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrSigU(void *fcn, char *sig, void **args);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrSigObjV(void *fcn, char *sig,void *obj, va_list lst);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrSigObjU(void *fcn, char *sig,void *obj, void **args);
include/bgbvx86_autoi.h:void *VXAS_WrapClosure(void *fcn, void *data, char *sig);
include/bgbvx86_autoi.h:void VXAS_MetaInit();
include/bgbvx86_autoi.h:void VXAS_MetaCommit();
include/bgbvx86_autoi.h:void VXAS_MetaBindKey(char *key, char *val);
include/bgbvx86_autoi.h:char *VXAS_MetaLookupKey(char *key);
include/bgbvx86_autoi.h:void VXAS_AsmPrintv(char *str, va_list lst);
include/bgbvx86_autoi.h:void VXAS_AsmPrint(char *str, ...);
include/bgbvx86_autoi.h:void *VXAS_GetPtr(char *sym);
include/bgbvx86_autoi.h:void VXAS_SetPtr(char *sym, void *v);
include/bgbvx86_autoi.h:int VXAS_GetInt(char *sym);
include/bgbvx86_autoi.h:void VXAS_SetInt(char *sym, int v);
include/bgbvx86_autoi.h:s64 VXAS_GetLong(char *sym);
include/bgbvx86_autoi.h:void VXAS_SetLong(char *sym, s64 v);
include/bgbvx86_autoi.h:float VXAS_GetFloat(char *sym);
include/bgbvx86_autoi.h:void VXAS_SetFloat(char *sym, float v);
include/bgbvx86_autoi.h:double VXAS_GetDouble(char *sym);
include/bgbvx86_autoi.h:void VXAS_SetDouble(char *sym, double v);
include/bgbvx86_autoi.h:int VXAS_ApplyPtrVi(void *fcn, va_list lst);
include/bgbvx86_autoi.h:s64 VXAS_ApplyPtrVl(void *fcn, va_list lst);
include/bgbvx86_autoi.h:float VXAS_ApplyPtrVf(void *fcn, va_list lst);
include/bgbvx86_autoi.h:double VXAS_ApplyPtrVd(void *fcn, va_list lst);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrVp(void *fcn, va_list lst);
include/bgbvx86_autoi.h:int VXAS_ApplyPtrSigVi(void *fcn, char *sig, va_list lst);
include/bgbvx86_autoi.h:s64 VXAS_ApplyPtrSigVl(void *fcn, char *sig, va_list lst);
include/bgbvx86_autoi.h:float VXAS_ApplyPtrSigVf(void *fcn, char *sig, va_list lst);
include/bgbvx86_autoi.h:double VXAS_ApplyPtrSigVd(void *fcn, char *sig, va_list lst);
include/bgbvx86_autoi.h:void *VXAS_ApplyPtrSigVp(void *fcn, char *sig, va_list lst);
include/bgbvx86_autoi.h:int VXAS_SigQuickSize(char *sig);
include/bgbvx86_autoi.h:int VXAS_SigAlignSize(char *sig);
include/bgbvx86_autoi.h:char *VXAS_SigSizeAlign(char *sig, int *rsz, int *ral);
include/bgbvx86_autoi.h:char *VXAS_SigNext(char *sig);
include/bgbvx86_autoi.h:char *VXAS_SigRet(char *sig);
include/bgbvx86_autoi.h:void *vxNativeCall(char *name, char *sig, ...);
include/bgbvx86_autoi.h:int vxNativeCalli(char *name, char *sig, ...);
include/bgbvx86_autoi.h:s64 vxNativeCalll(char *name, char *sig, ...);
include/bgbvx86_autoi.h:float vxNativeCallf(char *name, char *sig, ...);
include/bgbvx86_autoi.h:double vxNativeCalld(char *name, char *sig, ...);
include/bgbvx86_autoi.h:void *vxNativeCallp(char *name, char *sig, ...);
include/bgbvx86_autoi.h:void *vxNativeCallr(char *name, char *sig, ...);
include/bgbvx86_autoi.h:void vxNativeCallv(char *name, char *sig, ...);
include/bgbvx86_autoi.h:void *vxNativeCallt(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:int vxNativeCallti(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:s64 vxNativeCalltl(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:float vxNativeCalltf(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:double vxNativeCalltd(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:void *vxNativeCalltp(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:void *vxNativeCalltr(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:void vxNativeCalltv(void **pt, char *name, char *sig, ...);
include/bgbvx86_autoi.h:VX_Message *bgbv86_allocmsg(int szdata);
include/bgbvx86_autoi.h:void bgbv86_freemsg(VX_Message *msg);
include/bgbvx86_autoi.h:BGBV86_IOBuf *BGBC86_AllocIOBuf();
include/bgbvx86_autoi.h:void BGBC86_FreeIOBuf(BGBV86_IOBuf *buf);
include/bgbvx86_autoi.h:int BGBC86_CheckIOBufIdx(BGBV86_IOBuf *buf, int idx);
include/bgbvx86_autoi.h:int BGBC86_WriteIOBuf(BGBV86_IOBuf *buf, void *data, int sz);
include/bgbvx86_autoi.h:int BGBC86_ReadIOBuf(BGBV86_IOBuf *buf, void *data, int sz);
include/bgbvx86_autoi.h:int bgbv86_addreq(struct vx_sockaddr *addra, struct vx_sockaddr *addrb);
include/bgbvx86_autoi.h:int bgbv86_findsock(struct vx_sockaddr *addr, size_t szaddr);
include/bgbvx86_autoi.h:BGBV86_SockInfo *BGBV86_GetSockInfo(int fd);
include/bgbvx86_autoi.h:void BGBV86_RouteMsg(VX_Message *msg);
include/bgbvx86_autoi.h:size_t vx_recvmsg(int sock, struct vx_msghdr *msg, int flags);
include/bgbvx86_autoi.h:size_t vx_sendmsg(int fd, const struct vx_msghdr *msg, int flags);
include/bgbvx86_autoi.h:size_t vx_recvfrom(int fd, void *msg, size_t msglen, int flags,struct vx_sockaddr *addr, size_t *szaddr);
include/bgbvx86_autoi.h:size_t vx_sendto(int sock, const void *msg, size_t msglen, int flags,const struct vx_sockaddr *dest, size_t szdest);
include/bgbvx86_autoi.h:size_t vx_recv(int sock, void *msg, size_t msglen, int flags);
include/bgbvx86_autoi.h:size_t vx_send(int sock, const void *msg, size_t msglen, int flags);
include/bgbvx86_autoi.h:int vx_bind(int sock, const struct vx_sockaddr *addr, size_t addrlen);
include/bgbvx86_autoi.h:int vx_socket(int domain, int type, int protocol);
include/bgbvx86_autoi.h:int vx_connect(int fd, const struct vx_sockaddr *addr, size_t addrlen);
include/bgbvx86_autoi.h:int vx_accept(int fd, struct vx_sockaddr *addr, size_t *addrlen);
include/bgbvx86_autoi.h:int vx_listen(int fd, int backlog);
include/bgbvx86_autoi.h:int vx_getpeername(int, struct vx_sockaddr *, size_t *);
include/bgbvx86_autoi.h:int vx_getsockname(int, struct vx_sockaddr *, size_t *);
include/bgbvx86_autoi.h:int vx_getsockopt(int, int, int, void *, size_t *);
include/bgbvx86_autoi.h:int vx_setsockopt(int, int, int, const void *, size_t);
include/bgbvx86_autoi.h:int vx_shutdown(int, int);
include/bgbvx86_autoi.h:int vx_sockatmark(int);
include/bgbvx86_autoi.h:int vx_socketpair(int, int, int, int[2]);
include/bgbvx86_autoi.h:int BGBV86_NativeIndexPointer(BGBV86_Context *ctx, void *ptr);
include/bgbvx86_autoi.h:void *BGBV86_NativePointerIndex(BGBV86_Context *ctx, int idx);
include/bgbvx86_autoi.h:s64 BGBV86_NativeMapPointerToVA(BGBV86_Context *ctx, void *ptr);
include/bgbvx86_autoi.h:void *BGBV86_NativeMapVAToPointer(BGBV86_Context *ctx, s64 l);
include/bgbvx86_autoi.h:int BGBV86_SigStackSizeVM(BGBV86_Context *ctx, char *sig);
include/bgbvx86_autoi.h:int BGBV86_SigConvItemNative(BGBV86_Context *ctx, char *sig, void *buf, s64 rm);
include/bgbvx86_autoi.h:int BGBV86_SigConvItemVM(BGBV86_Context *ctx, char *sig, s64 rm, void *buf);
include/bgbvx86_autoi.h:int BGBV86_SigConvNative(BGBV86_Context *ctx, char *sig, void **args, s64 rm);
include/bgbvx86_autoi.h:int BGBV86_NativeCall(BGBV86_Context *ctx, char *name, s64 rm);
include/bgbvx86_autoi.h:int BGBV86_NativeCall2(BGBV86_Context *ctx, char *name, char *sig, s64 rm);
include/bgbvx86_autoi.h:char *BGBV86_MetaGetKey(BGBV86_Context *ctx, char *key);
include/bgbvx86_autoi.h:int BGBV86_MetaSetKey(BGBV86_Context *ctx, char *key, char *val);
include/bgbvx86_autoi.h:char *BGBV86_PE_NormalizeName(char *name);
include/bgbvx86_autoi.h:s64 BGBV86_PE_AllocImageSpace(BGBV86_Context *ctx, s64 base, int sz);
include/bgbvx86_autoi.h:int BGBV86_PE_LookupImageSectionIdx(BGBV86_PE_Info *ctx, char *name);
include/bgbvx86_autoi.h:byte *BGBV86_PE_LookupImageSectionBase(BGBV86_PE_Info *ctx, char *name);
include/bgbvx86_autoi.h:byte *BGBV86_PE_LookupImageSectionEnd(BGBV86_PE_Info *ctx, char *name);
include/bgbvx86_autoi.h:BGBV86_CLI_Info *BGBV86_CLI_LookupDllInfo(BGBV86_PE_Info *ctx);
include/bgbvx86_autoi.h:BGBV86_CLI_Info *BGBV86_CLI_GetDllInfo(BGBV86_PE_Info *ctx);
include/bgbvx86_autoi.h:byte *BGBV86_CLI_GetInfoStream(BGBV86_CLI_Info *inf, char *name);
include/bgbvx86_autoi.h:char *BGBV86_CLI_TableIdxName(BGBV86_CLI_Info *inf, int idx);
include/bgbvx86_autoi.h:int BGBV86_CLI_IndexTable(BGBV86_CLI_Info *inf, char *name);
include/bgbvx86_autoi.h:int BGBV86_CLI_CheckTableBits(BGBV86_CLI_Info *inf, char *name, int bits);
include/bgbvx86_autoi.h:int BGBV86_CLI_CheckCodedIndexBits(BGBV86_CLI_Info *inf, char *sig);
include/bgbvx86_autoi.h:int BGBV86_CLI_DecodeCodedIndexBits(BGBV86_CLI_Info *inf,char *sig, byte *ptr, int *ridx, int *rtab);
include/bgbvx86_autoi.h:s64 BGBV86_CLI_DecodeTableRef(BGBV86_CLI_Info *inf,char *sig, byte *ptr);
include/bgbvx86_autoi.h:int BGBV86_CLI_SigQuickSize(BGBV86_CLI_Info *inf, char *sig);
include/bgbvx86_autoi.h:char *BGBV86_CLI_SigNext(BGBV86_CLI_Info *inf, char *sig);
include/bgbvx86_autoi.h:char *BGBV86_CLI_SigPrintValue(BGBV86_CLI_Info *inf, char *sig, byte *cs);
include/bgbvx86_autoi.h:int BGBV86_CLI_CalcSigSize(BGBV86_CLI_Info *inf, char *sig);
include/bgbvx86_autoi.h:int BGBV86_CLI_SigPrintData(BGBV86_CLI_Info *inf,char *sig, char *names, byte *ptr);
include/bgbvx86_autoi.h:int BGBV86_CLI_DumpTable(BGBV86_CLI_Info *inf, int idx);
include/bgbvx86_autoi.h:int BGBV86_CLI_TableLookupColumnOffs(BGBV86_CLI_Info *inf,int idx, char *name);
include/bgbvx86_autoi.h:char *BGBV86_CLI_TableLookupColumnSig(BGBV86_CLI_Info *inf,int idx, char *name);
include/bgbvx86_autoi.h:int BGBV86_CLI_LookupTableColumnOffs(BGBV86_CLI_Info *inf,char *table, char *name);
include/bgbvx86_autoi.h:char *BGBV86_CLI_LookupTableColumnSig(BGBV86_CLI_Info *inf,char *table, char *name);
include/bgbvx86_autoi.h:BGBV86_CLI_Tables *BGBV86_CLI_ProcessMetadataTables(BGBV86_CLI_Info *inf);
include/bgbvx86_autoi.h:BGBV86_CLI_Info *BGBV86_CLI_ProcessMetadataHeader(BGBV86_PE_Info *ctx, int rva);
include/bgbvx86_autoi.h:int BGBV86_CLI_ProcessCLRHeader(BGBV86_PE_Info *ctx, int rva);
include/bgbvx86_autoi.h:void BGBV86_ProbeTst(byte *buf, int sz);
include/bgbvx86_autoi.h:int BGBV86_CheckModNameOS(char *name);
include/bgbvx86_autoi.h:int BGBV86_RefreshDllsOS();
include/bgbvx86_autoi.h:int BGBV86_InitDllsOS();
include/bgbvx86_autoi.h:int BGBV86_LoadDynamicOS(char *name);
include/bgbvx86_autoi.h:void *BGBV86_LookupLabelOS_1(char *name);
include/bgbvx86_autoi.h:void *BGBV86_LookupLabelOS_2(char *name, int *rfl);
include/bgbvx86_autoi.h:void *BGBV86_LookupLabelOS(char *name);
include/bgbvx86_autoi.h:int BGBV86_InitDbgHelpOS();
include/bgbvx86_autoi.h:char *BGBV86_LookupAddrNameOS(void *addr, void **addr2);
include/bgbvx86_autoi.h:int BGBV86_GetTimeNS(s64 *rsec, s64 *rns);
include/bgbvx86_autoi.h:int BGBV86_CheckModNameOS(char *name);
include/bgbvx86_autoi.h:int BGBV86_RefreshDllsOS();
include/bgbvx86_autoi.h:int BGBV86_InitDllsOS();
include/bgbvx86_autoi.h:int BGBV86_LoadDynamicOS(char *name);
include/bgbvx86_autoi.h:void *BGBV86_LookupLabelOS(char *name);
include/bgbvx86_autoi.h:char *BGBV86_LookupAddrNameOS(void *addr, void **addr2);
include/bgbvx86_autoi.h:int BGBV86_GetTimeNS(s64 *rsec, s64 *rns);
include/bgbvx86_autoi.h:int BGBV86_CLI_CheckOp(BGBV86_Context *ctx, byte *ip, int op);
include/bgbvx86_autoi.h:byte *BGBV86_CLI_DecodeOpcode(BGBV86_Context *ctx,BGBV86_DecodeOp *dop, byte *ip);
include/bgbvx86_autoi.h:void BGBV86_CLI_DumpOpcode(BGBV86_Context *ctx,BGBV86_DecodeOp *dop);
include/bgbvx86_autoi.h:BGBV86_CLI_Info *BGBV86_CLI_LookupInfoAddr(BGBV86_Context *ctx, s64 addr);
include/bgbvx86_autoi.h:void *BGBV86_CLI_FetchOpcodeExec(BGBV86_Context *ctx, BGBV86_DecodeOp *dop);
include/bgbvx86_autoi.h:int BGBV86_CLI_ExecOpcodeDummy(BGBV86_Context *ctx, BGBV86_DecodeOp *dop);
include/bgbvx86_autoi.h:void BGBV86_CLI_PushGenericTTok(BGBV86_Context *ctx, s64 val, u32 ttok);
include/bgbvx86_autoi.h:int BGBV86_CLI_ExecLoadAddrType(BGBV86_Context *ctx, s64 addr, u32 ttok);
include/bgbvx86_autoi.h:int BGBV86_CLI_ExecLoadArgIdx(BGBV86_Context *ctx, int idx);
include/bgbvx86_autoi.h:int BGBV86_CLI_ExecLoadLocalIdx(BGBV86_Context *ctx, int idx);
include/bgbvx86_autoi.h:int BGBV86_CLI_ExecLoadArgAddrIdx(BGBV86_Context *ctx, int idx);
include/bgbvx86_autoi.h:int BGBV86_CLI_ExecLoadLocalAddrIdx(BGBV86_Context *ctx, int idx);
include/bgbvx86_autoi.h:int BGBV86_CLI_ExecOpcode(BGBV86_Context *ctx, BGBV86_DecodeOp *dop);
include/bgbvx86_shell.h:int (*func)(VXShell_Info *ctx, char **args);
include/bgbvx86_socket.h:int     vx_accept(int, struct vx_sockaddr *, size_t *);
include/bgbvx86_socket.h:int     vx_bind(int, const struct vx_sockaddr *, size_t);
include/bgbvx86_socket.h:int     vx_connect(int, const struct vx_sockaddr *, size_t);
include/bgbvx86_socket.h:int     vx_getpeername(int, struct vx_sockaddr *, size_t *);
include/bgbvx86_socket.h:int     vx_getsockname(int, struct vx_sockaddr *, size_t *);
include/bgbvx86_socket.h:int     vx_getsockopt(int, int, int, void *, size_t *);
include/bgbvx86_socket.h:int     vx_listen(int, int);
include/bgbvx86_socket.h:size_t vx_recv(int, void *, size_t, int);
include/bgbvx86_socket.h:        struct vx_sockaddr *, size_t *);
include/bgbvx86_socket.h:size_t vx_recvmsg(int, struct vx_msghdr *, int);
include/bgbvx86_socket.h:size_t vx_send(int, const void *, size_t, int);
include/bgbvx86_socket.h:size_t vx_sendmsg(int, const struct vx_msghdr *, int);
include/bgbvx86_socket.h:		const struct vx_sockaddr *, size_t);
include/bgbvx86_socket.h:int     vx_setsockopt(int, int, int, const void *, size_t);
include/bgbvx86_socket.h:int     vx_shutdown(int, int);
include/bgbvx86_socket.h:int     vx_socket(int, int, int);
include/bgbvx86_socket.h:int     vx_sockatmark(int);
include/bgbvx86_socket.h:int     vx_socketpair(int, int, int, int[2]);
include/dycni_0.h:	int (*ObjectP)(dyt obj);
include/dycni_0.h:	int (*ClassP)(dyt obj);
include/dycni_0.h:	int (*SlotP)(dyt obj);
include/dycni_0.h:	int (*MethodP)(dyt obj);
include/dycni_0.h:	void (*BeginClass)(char *name, char *super);
include/dycni_0.h:	dycClass (*EndClass();
include/dycni_0.h:	void (*BeginClassAnon)(dycClass super);
include/dycni_0.h:	dycClass (*EndClassAnon();
include/dycni_0.h:	void (*ClassSuper)(char *name);
include/dycni_0.h:	void (*SlotBasic)(char *name, char *sig);
include/dycni_0.h:	void (*SlotStatic)(char *name, char *sig);
include/dycni_0.h:	void (*SlotInit)(char *name, char *sig);
include/dycni_0.h:	void (*SlotStatici)(char *name, char *sig, int val);
include/dycni_0.h:	void (*SlotStaticl)(char *name, char *sig, s64 val);
include/dycni_0.h:	void (*SlotStaticf)(char *name, char *sig, double val);
include/dycni_0.h:	void (*SlotStaticd)(char *name, char *sig, double val);
include/dycni_0.h:	void (*SlotStaticU)(char *name, char *sig, void *val);
include/dycni_0.h:	void (*SlotIniti)(char *name, char *sig, int val);
include/dycni_0.h:	void (*SlotInitl)(char *name, char *sig, s64 val);
include/dycni_0.h:	void (*SlotInitf)(char *name, char *sig, double val);
include/dycni_0.h:	void (*SlotInitd)(char *name, char *sig, double val);
include/dycni_0.h:	void (*SlotInitU)(char *name, char *sig, void *val);
include/dycni_0.h:	void (*SlotDelegate)(char *name, char *cname);
include/dycni_0.h:	void (*SlotStaticDelegate)(char *name, char *cname);
include/dycni_0.h:	void (*MethodBasic)(char *name, char *sig);
include/dycni_0.h:	void (*MethodStatic)(char *name, char *sig);
include/dycni_0.h:	void (*MethodFunc)(char *name, char *sig, dyt fcn);
include/dycni_0.h:	void (*MethodStaticFunc)(char *name, char *sig, dyt fcn);
include/dycni_0.h:	void (*MethodCFunc)(char *name, char *sig, void *fcn);
include/dycni_0.h:	void (*MethodCFuncData)(char *name, char *sig, void *fcn, void *data);
include/dycni_0.h:	void (*MethodCSelf)(char *name, char *sig, void *fcn);
include/dycni_0.h:	void (*MethodCSelfData)(char *name, char *sig, void *fcn, void *data);
include/dycni_0.h:	void (*MethodStaticCFunc)(char *name, char *sig, void *fcn);
include/dycni_0.h:	void (*MethodStaticCFuncData)(char *name, char *sig, void *fcn, void *data);
include/dycni_0.h:	void (*MethodStaticCSelf)(char *name, char *sig, void *fcn);
include/dycni_0.h:	void (*MethodStaticCSelfData)(char *name, char *sig, void *fcn, void *data);
include/dycni_0.h:	void (*SlotMethod)(char *name, char *sig);
include/dycni_0.h:	void (*StaticSlotMethod)(char *name, char *sig);
include/dycni_0.h:	void (*ClassInterface)(char *name);
include/dycni_0.h:	void (*BeginIface)(char *name, char *super);
include/dycni_0.h:	dycClass (*EndIface)();
include/dycni_0.h:	void (*IfaceSuper)(char *name);
include/dycni_0.h:	void (*IfaceMethod)(char *name, char *sig);
include/dycni_0.h:	void (*IfaceSlot)(char *name, char *sig);
include/dycni_0.h:	void (*BeginStruct)(char *name);
include/dycni_0.h:	dycClass (*EndStruct)();
include/dycni_0.h:	dycClass (*GetClass)(char *name);
include/dycni_0.h:	dycObject (*Alloc)(dycClass inf);
include/dycni_0.h:	int (*SubclassP)(dycClass info, dycClass super);
include/dycni_0.h:	int (*InstanceP)(dycObject obj, dycClass inf);
include/dycni_0.h:	dycClass (*GetObjClass)(dycObject obj);
include/dycni_0.h:	dycClass (*GetClassSuper)(dycClass inf);
include/dycni_0.h:	char *(*GetClassName)(dycClass inf);
include/dycni_0.h:	char *(*GetObjClassName)(dycObject obj);
include/dycni_0.h:	dycClassV (*GetClassVersion)(dycClass inf);
include/dycni_0.h:	int (*GetStructSize)(dycClassV vinf);
include/dycni_0.h:	dycClass (*GetVersionClass)(dycClassV vinf);
include/dycni_0.h:	char *(*GetSlotName)(dycSlot idx);
include/dycni_0.h:	char *(*GetSlotSig)(dycSlot idx);
include/dycni_0.h:	dycClass (*GetSlotClass)(dycSlot idx);
include/dycni_0.h:	char *(*GetMethodName)(dycMethod idx);
include/dycni_0.h:	char *(*GetMethodSig)(dycMethod idx);
include/dycni_0.h:	dycClass (*GetMethodClass)(dycMethod idx);
include/dycni_0.h:	dycSlot (*IdxSlot)(dycClass info, char *name);
include/dycni_0.h:	dycSlot (*IdxObjSlot)(dycObject obj, char *name);
include/dycni_0.h:	dycMethod (*IdxMethod)(dycClass inf, char *name, char *sig);
include/dycni_0.h:	dycMethod (*IdxObjMethod)(dycObject obj, char *name, char *sig);
include/dycni_0.h:	void *(*GetSlotPtr)(dycObject obj, dycSlot idx);
include/dycni_0.h:	void *(*GetInitPtr)(dycClass inf, dycSlot idx);
include/dycni_0.h:	void *(*GetStaticPtr)(dycClass inf, dycSlot idx);
include/dycni_0.h:	void *(*GetStructPtr)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	void *(*PtrSlot)(dycObject obj, char *name);
include/dycni_0.h:	void *(*PtrStaticSlot)(dycClass info, char *name);
include/dycni_0.h:	void *(*PtrInitSlot)(dycClass info, char *name);
include/dycni_0.h:	void *(*PtrStructSlot)(dycClassV vinf, void *obj, char *name);
include/dycni_0.h:	int (*InstanceOfP)(dycObject obj, char *name);
include/dycni_0.h:	int (*SubclassOfP)(char *name, char *super);
include/dycni_0.h:	dyt (*LookupMethodSig)(dycObject obj, char *name, char *sig);
include/dycni_0.h:	dyt (*GetMethodFunc)(dycClass inf, dycMethod idx);
include/dycni_0.h:	dyt (*GetObjMethodFunc)(dycObject obj, dycMethod idx);
include/dycni_0.h:	void (*SetMethodFunc)(dycClass inf, dycMethod idx, dyt fcn);
include/dycni_0.h:	void (*SetObjMethodFunc)(dycObject obj, dycMethod idx, dyt fcn);
include/dycni_0.h:	dycSlot (*AddObjSlot)(dycObject obj, char *name, char *sig);
include/dycni_0.h:	dycMethod (*AddObjMethod)(dycObject obj, char *name, char *sig);
include/dycni_0.h:	dycObject (*CloneObject)(dycObject obj);
include/dycni_0.h:	dycObject (*GetObjDelegate)(dycObject obj, char *name);
include/dycni_0.h:	void (*SetObjDelegate)(dycObject obj, char *name, dycObject obj1);
include/dycni_0.h:	dycSlot *(*dycEnumSlotArray)(dycClass inf);
include/dycni_0.h:	dycMethod *(*dycEnumMethodArray)(dycClass inf);
include/dycni_0.h:	dycSlot *(*dycEnumClassSlotArray)(char *name);
include/dycni_0.h:	dycMethod *(*dycEnumClassMethodArray)(char *name);
include/dycni_0.h:	dycObject (*AllocClass)(char *name);
include/dycni_0.h:	void *(*PtrClassSlot)(char *cname, char *sname);
include/dycni_0.h:	dycSlot (*IdxClassSlot)(char *cname, char *sname);
include/dycni_0.h:	dycMethod (*IdxClassMethod)(char *cname, char *name, char *sig);
include/dycni_0.h:	dyt (*GetSlot)(dycObject obj, char *name);
include/dycni_0.h:	dyt (*GetSlotr)(dycObject obj, char *name);
include/dycni_0.h:	void *(*GetSlotp)(dycObject obj, char *name);
include/dycni_0.h:	int (*GetSlotsb)(dycObject obj, char *name);
include/dycni_0.h:	int (*GetSlotub)(dycObject obj, char *name);
include/dycni_0.h:	int (*GetSlotss)(dycObject obj, char *name);
include/dycni_0.h:	int (*GetSlotus)(dycObject obj, char *name);
include/dycni_0.h:	int (*GetSloti)(dycObject obj, char *name);
include/dycni_0.h:	s64 (*GetSlotl)(dycObject obj, char *name);
include/dycni_0.h:	float (*GetSlotf)(dycObject obj, char *name);
include/dycni_0.h:	double (*GetSlotd)(dycObject obj, char *name);
include/dycni_0.h:	int (*SetSlot)(dycObject obj, char *name, dyt val);
include/dycni_0.h:	int (*SetSlotr)(dycObject obj, char *name, dyt val);
include/dycni_0.h:	int (*SetSlotp)(dycObject obj, char *name, void *val);
include/dycni_0.h:	int (*SetSlotsb)(dycObject obj, char *name, int val);
include/dycni_0.h:	int (*SetSlotub)(dycObject obj, char *name, int val);
include/dycni_0.h:	int (*SetSlotss)(dycObject obj, char *name, int val);
include/dycni_0.h:	int (*SetSlotus)(dycObject obj, char *name, int val);
include/dycni_0.h:	int (*SetSloti)(dycObject obj, char *name, int val);
include/dycni_0.h:	int (*SetSlotl)(dycObject obj, char *name, s64 val);
include/dycni_0.h:	int (*SetSlotf)(dycObject obj, char *name, float val);
include/dycni_0.h:	int (*SetSlotd)(dycObject obj, char *name, double val);
include/dycni_0.h:	int (*Getsb)(dycObject obj, dycSlot idx);
include/dycni_0.h:	int (*Getub)(dycObject obj, dycSlot idx);
include/dycni_0.h:	int (*Getss)(dycObject obj, dycSlot idx);
include/dycni_0.h:	int (*Getus)(dycObject obj, dycSlot idx);
include/dycni_0.h:	int (*Geti)(dycObject obj, dycSlot idx);
include/dycni_0.h:	s64 (*Getl)(dycObject obj, dycSlot idx);
include/dycni_0.h:	float (*Getf)(dycObject obj, dycSlot idx);
include/dycni_0.h:	double (*Getd)(dycObject obj, dycSlot idx);
include/dycni_0.h:	dyt (*Getr)(dycObject obj, dycSlot idx);
include/dycni_0.h:	void *(*Getp)(dycObject obj, dycSlot idx);
include/dycni_0.h:	void (*Setsb)(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:	void (*Setub)(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:	void (*Setss)(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:	void (*Setus)(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:	void (*Seti)(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:	void (*Setl)(dycObject obj, dycSlot idx, s64 val);
include/dycni_0.h:	void (*Setf)(dycObject obj, dycSlot idx, float val);
include/dycni_0.h:	void (*Setd)(dycObject obj, dycSlot idx, double val);
include/dycni_0.h:	void (*Setr)(dycObject obj, dycSlot idx, dyt val);
include/dycni_0.h:	void (*Setp)(dycObject obj, dycSlot idx, void *val);
include/dycni_0.h:	int (*GetStaticsb)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetStaticub)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetStaticss)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetStaticus)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetStatici)(dycClass inf, dycSlot idx);
include/dycni_0.h:	s64 (*GetStaticl)(dycClass inf, dycSlot idx);
include/dycni_0.h:	float (*GetStaticf)(dycClass inf, dycSlot idx);
include/dycni_0.h:	double (*GetStaticd)(dycClass inf, dycSlot idx);
include/dycni_0.h:	dyt (*GetStaticr)(dycClass inf, dycSlot idx);
include/dycni_0.h:	void *(*GetStaticp)(dycClass inf, dycSlot idx);
include/dycni_0.h:	void (*SetStaticsb)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStaticub)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStaticss)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStaticus)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStatici)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStaticl)(dycClass inf, dycSlot idx, s64 val);
include/dycni_0.h:	void (*SetStaticf)(dycClass inf, dycSlot idx, float val);
include/dycni_0.h:	void (*SetStaticd)(dycClass inf, dycSlot idx, double val);
include/dycni_0.h:	void (*SetStaticr)(dycClass inf, dycSlot idx, dyt val);
include/dycni_0.h:	void (*SetStaticp)(dycClass inf, dycSlot idx, void *val);
include/dycni_0.h:	int (*GetInitsb)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetInitub)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetInitss)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetInitus)(dycClass inf, dycSlot idx);
include/dycni_0.h:	int (*GetIniti)(dycClass inf, dycSlot idx);
include/dycni_0.h:	s64 (*GetInitl)(dycClass inf, dycSlot idx);
include/dycni_0.h:	float (*GetInitf)(dycClass inf, dycSlot idx);
include/dycni_0.h:	double (*GetInitd)(dycClass inf, dycSlot idx);
include/dycni_0.h:	dyt (*GetInitr)(dycClass inf, dycSlot idx);
include/dycni_0.h:	void *(*GetInitp)(dycClass inf, dycSlot idx);
include/dycni_0.h:	void (*SetInitsb)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetInitub)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetInitss)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetInitus)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetIniti)(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:	void (*SetInitl)(dycClass inf, dycSlot idx, s64 val);
include/dycni_0.h:	void (*SetInitf)(dycClass inf, dycSlot idx, float val);
include/dycni_0.h:	void (*SetInitd)(dycClass inf, dycSlot idx, double val);
include/dycni_0.h:	void (*SetInitr)(dycClass inf, dycSlot idx, dyt val);
include/dycni_0.h:	void (*SetInitp)(dycClass inf, dycSlot idx, void *val);
include/dycni_0.h:	int (*GetStructsb)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	int (*GetStructub)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	int (*GetStructss)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	int (*GetStructus)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	int (*GetStructi)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	s64 (*GetStructl)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	float (*GetStructf)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	double (*GetStructd)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	dyt (*GetStructr)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	void *(*GetStructp)(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	void (*SetStructsb)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStructub)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStructss)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStructus)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStructi)(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:	void (*SetStructl)(dycClassV vinf, void *obj, dycSlot idx, s64 val);
include/dycni_0.h:	void (*SetStructf)(dycClassV vinf, void *obj, dycSlot idx, float val);
include/dycni_0.h:	void (*SetStructd)(dycClassV vinf, void *obj, dycSlot idx, double val);
include/dycni_0.h:	void (*SetStructr)(dycClassV vinf, void *obj, dycSlot idx, dyt val);
include/dycni_0.h:	void (*SetStructp)(dycClassV vinf, void *obj, dycSlot idx, void *val);
include/dycni_0.h:	dycObject (*NewClass)(char *name);
include/dycni_0.h:	dycObject (*NewInitClassV)(char *name, char *sig, va_list args);
include/dycni_0.h:	dycObject (*NewInitClassU)(char *name, char *sig, void **args);
include/dycni_0.h:	dycObject (*New)(dycClass inf);
include/dycni_0.h:	dycObject (*NewInitV)(dycClass inf, char *sig, va_list args);
include/dycni_0.h:	dycObject (*NewInitU)(dycClass inf, char *sig, void **args);
include/dycni_0.h:	void *(*CallSigU)(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:	void *(*CallSigV)(dycObject obj, char *name, char *sig, va_list args);
include/dycni_0.h:	dyt (*CallSigVr)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:	int (*CallSigVi)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:	s64 (*CallSigVl)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:	float (*CallSigVf)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:	double (*CallSigVd)(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:	dyt (*CallSigUr)(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:	int (*CallSigUi)(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:	s64 (*CallSigUl)(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:	float (*CallSigUf)(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:	double (*CallSigUd)(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:	void *(*CallU)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallV)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	int (*CallUi)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	s64 (*CallUl)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	float (*CallUf)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	double (*CallUd)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	dyt (*CallUr)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallUp)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	void (*CallUv)(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:	int (*CallVi)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	s64 (*CallVl)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	float (*CallVf)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	double (*CallVd)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	dyt (*CallVr)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	void *(*CallVp)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	void (*CallVv)(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:	void *(*CallStaticU)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallStaticV)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	int (*CallStaticUi)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	s64 (*CallStaticUl)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	float (*CallStaticUf)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	double (*CallStaticUd)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	dyt (*CallStaticUr)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallStaticUp)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	void (*CallStaticUv)(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	int (*CallStaticVi)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	s64 (*CallStaticVl)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	float (*CallStaticVf)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	double (*CallStaticVd)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	dyt (*CallStaticVr)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	void *(*CallStaticVp)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	void (*CallStaticVv)(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	void *(*CallAsU)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallAsV)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	int (*CallAsUi)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	s64 (*CallAsUl)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	float (*CallAsUf)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	double (*CallAsUd)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	dyt (*CallAsUr)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallAsUp)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	void (*CallAsUv)(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:	int (*CallAsVi)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	s64 (*CallAsVl)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	float (*CallAsVf)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	double (*CallAsVd)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	dyt (*CallAsVr)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	void *(*CallAsVp)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	void (*CallAsVv)(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:	void *(*CallStructU)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallStructV)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	int (*CallStructUi)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	s64 (*CallStructUl)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	float (*CallStructUf)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	double (*CallStructUd)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	dyt (*CallStructUr)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	void *(*CallStructUp)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	void (*CallStructUv)(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:	int (*CallStructVi)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	s64 (*CallStructVl)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	float (*CallStructVf)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	double (*CallStructVd)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	dyt (*CallStructVr)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	void *(*CallStructVp)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	void (*CallStructVv)(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:	dycArray (*NewArray)(char *sig, int cnt);
include/dycni_0.h:	int (*ArrayP)(dyt p);
include/dycni_0.h:	int (*ArraySigP)(dyt p, char *sig);
include/dycni_0.h:	void *(*ArrayV)(dycArray arr);
include/dycni_0.h:	int (*ArraySz)(dycArray arr);
include/dycni_0.h:	char *(*ArraySig)(dycArray arr);
include/dycni_0.h:	int (*ArrayStep)(dycArray arr);
include/dycni_0.h:	void *(*ArrayIdxPtr)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArraysb)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArrayub)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArrayss)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArrayus)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArrayi)(dycArray arr, int idx);
include/dycni_0.h:	s64 (*GetArrayl)(dycArray arr, int idx);
include/dycni_0.h:	float (*GetArrayf)(dycArray arr, int idx);
include/dycni_0.h:	double (*GetArrayd)(dycArray arr, int idx);
include/dycni_0.h:	dyt (*GetArrayr)(dycArray arr, int idx);
include/dycni_0.h:	void *(*GetArrayp)(dycArray arr, int idx);
include/dycni_0.h:	void (*SetArraysb)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArrayub)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArrayss)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArrayus)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArrayi)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArrayl)(dycArray arr, int idx, s64 val);
include/dycni_0.h:	void (*SetArrayf)(dycArray arr, int idx, float val);
include/dycni_0.h:	void (*SetArrayd)(dycArray arr, int idx, double val);
include/dycni_0.h:	void (*SetArrayr)(dycArray arr, int idx, dyt val);
include/dycni_0.h:	void (*SetArrayp)(dycArray arr, int idx, void *val);
include/dycni_0.h:	void *(*ArrayIdxPtrBC)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArraySsb)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArraySub)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArraySss)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArraySus)(dycArray arr, int idx);
include/dycni_0.h:	int (*GetArraySi)(dycArray arr, int idx);
include/dycni_0.h:	s64 (*GetArraySl)(dycArray arr, int idx);
include/dycni_0.h:	float (*GetArraySf)(dycArray arr, int idx);
include/dycni_0.h:	double (*GetArraySd)(dycArray arr, int idx);
include/dycni_0.h:	dyt (*GetArraySr)(dycArray arr, int idx);
include/dycni_0.h:	void *(*GetArraySp)(dycArray arr, int idx);
include/dycni_0.h:	void (*SetArraySsb)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArraySub)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArraySss)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArraySus)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArraySi)(dycArray arr, int idx, int val);
include/dycni_0.h:	void (*SetArraySl)(dycArray arr, int idx, s64 val);
include/dycni_0.h:	void (*SetArraySf)(dycArray arr, int idx, float val);
include/dycni_0.h:	void (*SetArraySd)(dycArray arr, int idx, double val);
include/dycni_0.h:	void (*SetArraySr)(dycArray arr, int idx, dyt val);
include/dycni_0.h:	void (*SetArraySp)(dycArray arr, int idx, void *val);
include/dycni_0.h:	dycArray (*NewArrayM)(char *sig, int ord, int *sz);
include/dycni_0.h:	dycArray (*NewArrayM2)(char *sig, int sz0, int sz1);
include/dycni_0.h:	dycArray (*NewArrayM3)(char *sig, int sz0, int sz1, int sz2);
include/dycni_0.h:	dycArray (*NewArrayM4)(char *sig, int sz0, int sz1, int sz2, int sz3);
include/dycni_0.h:	dycArray (*NewArrayM5)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4);
include/dycni_0.h:	dycArray (*NewArrayM6)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5);
include/dycni_0.h:	dycArray (*NewArrayM7)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6);
include/dycni_0.h:	dycArray (*NewArrayM8)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7);
include/dycni_0.h:	dycArray (*NewArrayM9)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8);
include/dycni_0.h:	dycArray (*NewArrayM10)(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8, int sz9);
include/dycni_0.h:	dycArray (*NewArrayM11)(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10);
include/dycni_0.h:	dycArray (*NewArrayM12)(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10, int sz11);
include/dycni_0.h:	dycArrayN (*NewArrayN)(char *sig, int ord, int *sz);
include/dycni_0.h:	int (*ArrayNP)(dyt p);
include/dycni_0.h:	int (*ArrayNSigP)(dyt p, char *sig);
include/dycni_0.h:	int (*ArrayNSigOrdP)(dyt p, char *sig, int ord);
include/dycni_0.h:	void *(*ArrayNV)(dycArrayN arr);
include/dycni_0.h:	int *(*dycArrayNSz)(dycArrayN arr);
include/dycni_0.h:	int (*ArrayNCnt)(dycArrayN arr);
include/dycni_0.h:	int (*ArrayNOrd)(dycArrayN arr);
include/dycni_0.h:	char *(*ArrayNSig)(dycArrayN arr);
include/dycni_0.h:	int (*ArrayNStep)(dycArrayN arr);
include/dycni_0.h:	void *(*ArrayNIdxPtr)(dycArrayN arr, int *idx);
include/dycni_0.h:	void *(*ArrayNIdxPtrBC)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNsb)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNub)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNss)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNus)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNi)(dycArrayN arr, int *idx);
include/dycni_0.h:	s64 (*GetArrayNl)(dycArrayN arr, int *idx);
include/dycni_0.h:	float (*GetArrayNf)(dycArrayN arr, int *idx);
include/dycni_0.h:	double (*GetArrayNd)(dycArrayN arr, int *idx);
include/dycni_0.h:	dyt (*GetArrayNr)(dycArrayN arr, int *idx);
include/dycni_0.h:	void *(*GetArrayNp)(dycArrayN arr, int *idx);
include/dycni_0.h:	void (*SetArrayNsb)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNub)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNss)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNus)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNi)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNl)(dycArrayN arr, int *idx, s64 val);
include/dycni_0.h:	void (*SetArrayNf)(dycArrayN arr, int *idx, float val);
include/dycni_0.h:	void (*SetArrayNd)(dycArrayN arr, int *idx, double val);
include/dycni_0.h:	void (*SetArrayNr)(dycArrayN arr, int *idx, dyt val);
include/dycni_0.h:	void (*SetArrayNp)(dycArrayN arr, int *idx, void *val);
include/dycni_0.h:	int (*GetArrayNSsb)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNSub)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNSss)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNSus)(dycArrayN arr, int *idx);
include/dycni_0.h:	int (*GetArrayNSi)(dycArrayN arr, int *idx);
include/dycni_0.h:	s64 (*GetArrayNSl)(dycArrayN arr, int *idx);
include/dycni_0.h:	float (*GetArrayNSf)(dycArrayN arr, int *idx);
include/dycni_0.h:	double (*GetArrayNSd)(dycArrayN arr, int *idx);
include/dycni_0.h:	dyt (*GetArrayNSr)(dycArrayN arr, int *idx);
include/dycni_0.h:	void *(*GetArrayNSp)(dycArrayN arr, int *idx);
include/dycni_0.h:	void (*SetArrayNSsb)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNSub)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNSss)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNSus)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNSi)(dycArrayN arr, int *idx, int val);
include/dycni_0.h:	void (*SetArrayNSl)(dycArrayN arr, int *idx, s64 val);
include/dycni_0.h:	void (*SetArrayNSf)(dycArrayN arr, int *idx, float val);
include/dycni_0.h:	void (*SetArrayNSd)(dycArrayN arr, int *idx, double val);
include/dycni_0.h:	void (*SetArrayNSr)(dycArrayN arr, int *idx, dyt val);
include/dycni_0.h:	void (*SetArrayNSp)(dycArrayN arr, int *idx, void *val);
include/dycni_0.h:	void *(*Array2IdxPtr)(dycArrayN arr, int y, int x);
include/dycni_0.h:	void *(*Array2IdxPtrBC)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2sb)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2ub)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2ss)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2us)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2i)(dycArrayN arr, int y, int x);
include/dycni_0.h:	s64 (*GetArray2l)(dycArrayN arr, int y, int x);
include/dycni_0.h:	float (*GetArray2f)(dycArrayN arr, int y, int x);
include/dycni_0.h:	double (*GetArray2d)(dycArrayN arr, int y, int x);
include/dycni_0.h:	dyt (*GetArray2r)(dycArrayN arr, int y, int x);
include/dycni_0.h:	void *(*GetArray2p)(dycArrayN arr, int y, int x);
include/dycni_0.h:	void (*SetArray2sb)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2ub)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2ss)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2us)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2i)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2l)(dycArrayN arr, int y, int x, s64 val);
include/dycni_0.h:	void (*SetArray2f)(dycArrayN arr, int y, int x, float val);
include/dycni_0.h:	void (*SetArray2d)(dycArrayN arr, int y, int x, double val);
include/dycni_0.h:	void (*SetArray2r)(dycArrayN arr, int y, int x, dyt val);
include/dycni_0.h:	void (*SetArray2p)(dycArrayN arr, int y, int x, void *val);
include/dycni_0.h:	int (*GetArray2Ssb)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2Sub)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2Sss)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2Sus)(dycArrayN arr, int y, int x);
include/dycni_0.h:	int (*GetArray2Si)(dycArrayN arr, int y, int x);
include/dycni_0.h:	s64 (*GetArray2Sl)(dycArrayN arr, int y, int x);
include/dycni_0.h:	float (*GetArray2Sf)(dycArrayN arr, int y, int x);
include/dycni_0.h:	double (*GetArray2Sd)(dycArrayN arr, int y, int x);
include/dycni_0.h:	dyt (*GetArray2Sr)(dycArrayN arr, int y, int x);
include/dycni_0.h:	void *(*GetArray2Sp)(dycArrayN arr, int y, int x);
include/dycni_0.h:	void (*SetArray2Ssb)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2Sub)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2Sss)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2Sus)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2Si)(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:	void (*SetArray2Sl)(dycArrayN arr, int y, int x, s64 val);
include/dycni_0.h:	void (*SetArray2Sf)(dycArrayN arr, int y, int x, float val);
include/dycni_0.h:	void (*SetArray2Sd)(dycArrayN arr, int y, int x, double val);
include/dycni_0.h:	void (*SetArray2Sr)(dycArrayN arr, int y, int x, dyt val);
include/dycni_0.h:	void (*SetArray2Sp)(dycArrayN arr, int y, int x, void *val);
include/dycni_0.h:	void *(*Array3IdxPtr)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	void *(*Array3IdxPtrBC)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3sb)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3ub)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3ss)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3us)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3i)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	s64 (*GetArray3l)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	float (*GetArray3f)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	double (*GetArray3d)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	dyt (*GetArray3r)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	void *(*GetArray3p)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	void (*SetArray3sb)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3ub)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3ss)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3us)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3i)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3l)(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni_0.h:	void (*SetArray3f)(dycArrayN arr, int z, int y, int x, float val);
include/dycni_0.h:	void (*SetArray3d)(dycArrayN arr, int z, int y, int x, double val);
include/dycni_0.h:	void (*SetArray3r)(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni_0.h:	void (*SetArray3p)(dycArrayN arr, int z, int y, int x, void *val);
include/dycni_0.h:	int (*GetArray3Ssb)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3Sub)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3Sss)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3Sus)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	int (*GetArray3Si)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	s64 (*GetArray3Sl)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	float (*GetArray3Sf)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	double (*GetArray3Sd)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	dyt (*GetArray3Sr)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	void *(*GetArray3Sp)(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:	void (*SetArray3Ssb)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3Sub)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3Sss)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3Sus)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3Si)(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:	void (*SetArray3Sl)(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni_0.h:	void (*SetArray3Sf)(dycArrayN arr, int z, int y, int x, float val);
include/dycni_0.h:	void (*SetArray3Sd)(dycArrayN arr, int z, int y, int x, double val);
include/dycni_0.h:	void (*SetArray3Sr)(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni_0.h:	void (*SetArray3Sp)(dycArrayN arr, int z, int y, int x, void *val);
include/dycni_0.h:extern struct DYCNI_s *DYCNI_InitGet();
include/dycni_0.h:	if(tmp)return(tmp);
include/dycni_0.h:	tmp=DYCNI_InitGet();
include/dycni_0.h:	return(tmp);
include/dycni_0.h:	{ return(dycni->ObjectP(obj)); }
include/dycni_0.h:	{ return(dycni->ClassP(obj)); }
include/dycni_0.h:	{ return(dycni->SlotP(obj)); }
include/dycni_0.h:	{ return(dycni->MethodP(obj)); }
include/dycni_0.h:	{ dycni->BeginClass(name, super); }
include/dycni_0.h:	{ return(dycni->EndClass()); }
include/dycni_0.h:	{ dycni->BeginClassAnon(super); }
include/dycni_0.h:	{ return(dycni->EndClassAnon()); }
include/dycni_0.h:	{ dycni->ClassSuper(name); }
include/dycni_0.h:	{ dycni->SlotBasic(name, sig); }
include/dycni_0.h:	{ dycni->SlotStatic(name, sig); }
include/dycni_0.h:	{ dycni->SlotInit(name, sig); }
include/dycni_0.h:	{ dycni->SlotStatici(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotStaticl(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotStaticf(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotStaticd(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotStaticU(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotIniti(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotInitl(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotInitf(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotInitd(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotInitU(name, sig, val); }
include/dycni_0.h:	{ dycni->SlotDelegate(name, cname); }
include/dycni_0.h:	{ dycni->SlotStaticDelegate(name, cname); }
include/dycni_0.h:	{ dycni->MethodBasic(name, sig); }
include/dycni_0.h:	{ dycni->MethodStatic(name, sig); }
include/dycni_0.h:	{ dycni->MethodFunc(name, sig, fcn); }
include/dycni_0.h:	{ dycni->MethodStaticFunc(name, sig, fcn); }
include/dycni_0.h:	{ dycni->MethodCFunc(name, sig, fcn); }
include/dycni_0.h:	{ dycni->MethodCFuncData(name, sig, fcn, data); }
include/dycni_0.h:static void dycMethodCSelf(char *name, char *sig, void *fcn);
include/dycni_0.h:	{ dycni->MethodCSelf(name, sig, fcn); }
include/dycni_0.h:static void dycMethodCSelfData(char *name, char *sig, void *fcn, void *data);
include/dycni_0.h:	{ dycni->MethodCSelfData(name, sig, fcn, data); }
include/dycni_0.h:	{ dycni->MethodStaticCFunc(name, sig, fcn); }
include/dycni_0.h:	{ dycni->MethodStaticCFuncData(name, sig, fcn, data); }
include/dycni_0.h:	{ dycni->MethodStaticCSelf(name, sig, fcn); }
include/dycni_0.h:	{ dycni->MethodStaticCSelfData(name, sig, fcn, data); }
include/dycni_0.h:	{ dycni->SlotMethod(name, sig); }
include/dycni_0.h:	{ dycni->StaticSlotMethod(name, sig); }
include/dycni_0.h:static void dycClassInterface(char *name);
include/dycni_0.h:	{ dycni->ClassInterface(name); }
include/dycni_0.h:static void dycBeginIface(char *name, char *super);
include/dycni_0.h:	{ dycni->BeginIface(name, super); }
include/dycni_0.h:static dycClass dycEndIface();
include/dycni_0.h:	{ return(dycni->EndIface()); }
include/dycni_0.h:	{ dycni->IfaceSuper(name); }
include/dycni_0.h:	{ dycni->IfaceMethod(name, sig); }
include/dycni_0.h:	{ dycni->IfaceSlot(name, sig); }
include/dycni_0.h:	{ dycni->BeginStruct(name); }
include/dycni_0.h:	{ return(dycni->EndStruct()); }
include/dycni_0.h:	{ return(dycni->GetClass(name)); }
include/dycni_0.h:	{ return(dycni->Alloc(inf)); }
include/dycni_0.h:	{ return(dycni->SubclassP(info, super)); }
include/dycni_0.h:	{ return(dycni->InstanceP(obj, inf)); }
include/dycni_0.h:	{ return(dycni->GetObjClass(obj)); }
include/dycni_0.h:	{ return(dycni->GetClassSuper(inf)); }
include/dycni_0.h:	{ return(dycni->GetClassName(inf)); }
include/dycni_0.h:	{ return(dycni->GetObjClassName(obj)); }
include/dycni_0.h:	{ return(dycni->GetClassVersion(inf)); }
include/dycni_0.h:	{ return(dycni->GetStructSize(vinf)); }
include/dycni_0.h:	{ return(dycni->GetVersionClass(vinf)); }
include/dycni_0.h:	{ return(dycni->GetSlotName(idx)); }
include/dycni_0.h:	{ return(dycni->GetSlotSig(idx)); }
include/dycni_0.h:	{ return(dycni->GetSlotClass(idx)); }
include/dycni_0.h:	{ return(dycni->GetMethodName(idx)); }
include/dycni_0.h:	{ return(dycni->GetMethodSig(idx)); }
include/dycni_0.h:	{ return(dycni->GetMethodClass(idx)); }
include/dycni_0.h:	{ return(dycni->IdxSlot(info, name)); }
include/dycni_0.h:	{ return(dycni->IdxObjSlot(obj, name)); }
include/dycni_0.h:	{ return(dycni->IdxMethod(inf, name, sig)); }
include/dycni_0.h:	{ return(dycni->IdxObjMethod(obj, name, sig)); }
include/dycni_0.h:	{ return(dycni->GetSlotPtr(obj, idx)); }
include/dycni_0.h:	{ return(dycni->GetInitPtr(inf, idx)); }
include/dycni_0.h:	{ return(dycni->GetStaticPtr(inf, idx)); }
include/dycni_0.h:static void *dycGetStructPtr(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:	{ return(dycni->GetStructPtr(vinf, obj, idx)); }
include/dycni_0.h:	{ return(dycni->PtrSlot(obj, name)); }
include/dycni_0.h:	{ return(dycni->PtrStaticSlot(info, name)); }
include/dycni_0.h:	{ return(dycni->PtrInitSlot(info, name)); }
include/dycni_0.h:	{ return(dycni->PtrStructSlot(vinf, obj, name)); }
include/dycni_0.h:	{ return(dycni->PtrInstanceOf(obj, name)); }
include/dycni_0.h:	{ return(dycni->SubclassOf(name, super)); }
include/dycni_0.h:static dyt dycLookupMethodSig(dycObject obj, char *name, char *sig);
include/dycni_0.h:static dyt dycGetMethodFunc(dycClass inf, dycMethod idx);
include/dycni_0.h:static dyt dycGetObjMethodFunc(dycObject obj, dycMethod idx);
include/dycni_0.h:static void dycSetMethodFunc(dycClass inf, dycMethod idx, dyt fcn);
include/dycni_0.h:static void dycSetObjMethodFunc(dycObject obj, dycMethod idx, dyt fcn);
include/dycni_0.h:static dycSlot dycAddObjSlot(dycObject obj, char *name, char *sig);
include/dycni_0.h:static dycMethod dycAddObjMethod(dycObject obj, char *name, char *sig);
include/dycni_0.h:static dycObject dycCloneObject(dycObject obj);
include/dycni_0.h:static dycObject dycGetObjDelegate(dycObject obj, char *name);
include/dycni_0.h:static void dycSetObjDelegate(dycObject obj, char *name, dycObject obj1);
include/dycni_0.h:static dycSlot *dycEnumSlotArray(dycClass inf);
include/dycni_0.h:static dycMethod *dycEnumMethodArray(dycClass inf);
include/dycni_0.h:static dycSlot *dycEnumClassSlotArray(char *name);
include/dycni_0.h:static dycMethod *dycEnumClassMethodArray(char *name);
include/dycni_0.h:static dycObject dycAllocClass(char *name);
include/dycni_0.h:static void *dycPtrClassSlot(char *cname, char *sname);
include/dycni_0.h:static dycSlot dycIdxClassSlot(char *cname, char *sname);
include/dycni_0.h:static dycMethod dycIdxClassMethod(char *cname, char *name, char *sig);
include/dycni_0.h:static dyt dycGetSlot(dycObject obj, char *name);
include/dycni_0.h:static dyt dycGetSlotr(dycObject obj, char *name);
include/dycni_0.h:static void *dycGetSlotp(dycObject obj, char *name);
include/dycni_0.h:static int dycGetSlotsb(dycObject obj, char *name);
include/dycni_0.h:static int dycGetSlotub(dycObject obj, char *name);
include/dycni_0.h:static int dycGetSlotss(dycObject obj, char *name);
include/dycni_0.h:static int dycGetSlotus(dycObject obj, char *name);
include/dycni_0.h:static int dycGetSloti(dycObject obj, char *name);
include/dycni_0.h:static s64 dycGetSlotl(dycObject obj, char *name);
include/dycni_0.h:static float dycGetSlotf(dycObject obj, char *name);
include/dycni_0.h:static double dycGetSlotd(dycObject obj, char *name);
include/dycni_0.h:static int dycSetSlot(dycObject obj, char *name, dyt val);
include/dycni_0.h:static int dycSetSlotr(dycObject obj, char *name, dyt val);
include/dycni_0.h:static int dycSetSlotp(dycObject obj, char *name, void *val);
include/dycni_0.h:static int dycSetSlotsb(dycObject obj, char *name, int val);
include/dycni_0.h:static int dycSetSlotub(dycObject obj, char *name, int val);
include/dycni_0.h:static int dycSetSlotss(dycObject obj, char *name, int val);
include/dycni_0.h:static int dycSetSlotus(dycObject obj, char *name, int val);
include/dycni_0.h:static int dycSetSloti(dycObject obj, char *name, int val);
include/dycni_0.h:static int dycSetSlotl(dycObject obj, char *name, s64 val);
include/dycni_0.h:static int dycSetSlotf(dycObject obj, char *name, float val);
include/dycni_0.h:static int dycSetSlotd(dycObject obj, char *name, double val);
include/dycni_0.h:static int dycGetsb(dycObject obj, dycSlot idx);
include/dycni_0.h:static int dycGetub(dycObject obj, dycSlot idx);
include/dycni_0.h:static int dycGetss(dycObject obj, dycSlot idx);
include/dycni_0.h:static int dycGetus(dycObject obj, dycSlot idx);
include/dycni_0.h:static int dycGeti(dycObject obj, dycSlot idx);
include/dycni_0.h:static s64 dycGetl(dycObject obj, dycSlot idx);
include/dycni_0.h:static float dycGetf(dycObject obj, dycSlot idx);
include/dycni_0.h:static double dycGetd(dycObject obj, dycSlot idx);
include/dycni_0.h:static dyt dycGetr(dycObject obj, dycSlot idx);
include/dycni_0.h:static void *dycGetp(dycObject obj, dycSlot idx);
include/dycni_0.h:static void dycSetsb(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetub(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetss(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetus(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSeti(dycObject obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetl(dycObject obj, dycSlot idx, s64 val);
include/dycni_0.h:static void dycSetf(dycObject obj, dycSlot idx, float val);
include/dycni_0.h:static void dycSetd(dycObject obj, dycSlot idx, double val);
include/dycni_0.h:static void dycSetr(dycObject obj, dycSlot idx, dyt val);
include/dycni_0.h:static void dycSetp(dycObject obj, dycSlot idx, void *val);
include/dycni_0.h:static int dycGetStaticsb(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetStaticub(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetStaticss(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetStaticus(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetStatici(dycClass inf, dycSlot idx);
include/dycni_0.h:static s64 dycGetStaticl(dycClass inf, dycSlot idx);
include/dycni_0.h:static float dycGetStaticf(dycClass inf, dycSlot idx);
include/dycni_0.h:static double dycGetStaticd(dycClass inf, dycSlot idx);
include/dycni_0.h:static dyt dycGetStaticr(dycClass inf, dycSlot idx);
include/dycni_0.h:static void *dycGetStaticp(dycClass inf, dycSlot idx);
include/dycni_0.h:static void dycSetStaticsb(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStaticub(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStaticss(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStaticus(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStatici(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStaticl(dycClass inf, dycSlot idx, s64 val);
include/dycni_0.h:static void dycSetStaticf(dycClass inf, dycSlot idx, float val);
include/dycni_0.h:static void dycSetStaticd(dycClass inf, dycSlot idx, double val);
include/dycni_0.h:static void dycSetStaticr(dycClass inf, dycSlot idx, dyt val);
include/dycni_0.h:static void dycSetStaticp(dycClass inf, dycSlot idx, void *val);
include/dycni_0.h:static int dycGetInitsb(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetInitub(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetInitss(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetInitus(dycClass inf, dycSlot idx);
include/dycni_0.h:static int dycGetIniti(dycClass inf, dycSlot idx);
include/dycni_0.h:static s64 dycGetInitl(dycClass inf, dycSlot idx);
include/dycni_0.h:static float dycGetInitf(dycClass inf, dycSlot idx);
include/dycni_0.h:static double dycGetInitd(dycClass inf, dycSlot idx);
include/dycni_0.h:static dyt dycGetInitr(dycClass inf, dycSlot idx);
include/dycni_0.h:static void *dycGetInitp(dycClass inf, dycSlot idx);
include/dycni_0.h:static void dycSetInitsb(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetInitub(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetInitss(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetInitus(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetIniti(dycClass inf, dycSlot idx, int val);
include/dycni_0.h:static void dycSetInitl(dycClass inf, dycSlot idx, s64 val);
include/dycni_0.h:static void dycSetInitf(dycClass inf, dycSlot idx, float val);
include/dycni_0.h:static void dycSetInitd(dycClass inf, dycSlot idx, double val);
include/dycni_0.h:static void dycSetInitr(dycClass inf, dycSlot idx, dyt val);
include/dycni_0.h:static void dycSetInitp(dycClass inf, dycSlot idx, void *val);
include/dycni_0.h:static int dycGetStructsb(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static int dycGetStructub(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static int dycGetStructss(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static int dycGetStructus(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static int dycGetStructi(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static s64 dycGetStructl(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static float dycGetStructf(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static double dycGetStructd(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static dyt dycGetStructr(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static void *dycGetStructp(dycClassV vinf, void *obj, dycSlot idx);
include/dycni_0.h:static void dycSetStructsb(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStructub(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStructss(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStructus(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStructi(dycClassV vinf, void *obj, dycSlot idx, int val);
include/dycni_0.h:static void dycSetStructl(dycClassV vinf, void *obj, dycSlot idx, s64 val);
include/dycni_0.h:static void dycSetStructf(dycClassV vinf, void *obj, dycSlot idx, float val);
include/dycni_0.h:static void dycSetStructd(dycClassV vinf, void *obj, dycSlot idx, double val);
include/dycni_0.h:static void dycSetStructr(dycClassV vinf, void *obj, dycSlot idx, dyt val);
include/dycni_0.h:static void dycSetStructp(dycClassV vinf, void *obj, dycSlot idx, void *val);
include/dycni_0.h:static dycObject dycNewClass(char *name);
include/dycni_0.h:static dycObject dycNewInitClass(char *name, char *sig, ...);
include/dycni_0.h:static dycObject dycNewInitClassV(char *name, char *sig, va_list args);
include/dycni_0.h:static dycObject dycNewInitClassU(char *name, char *sig, void **args);
include/dycni_0.h:static dycObject dycNew(dycClass inf);
include/dycni_0.h:static dycObject dycNewInit(dycClass inf, char *sig, ...);
include/dycni_0.h:static dycObject dycNewInitV(dycClass inf, char *sig, va_list args);
include/dycni_0.h:static dycObject dycNewInitU(dycClass inf, char *sig, void **args);
include/dycni_0.h:static void *dycCallSigU(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:static void *dycCallSigV(dycObject obj, char *name, char *sig, va_list args);
include/dycni_0.h:static void *dycCallSig(dycObject obj, char *name, char *sig, ...);
include/dycni_0.h:static dyt dycCallSigVr(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:static int dycCallSigVi(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:static s64 dycCallSigVl(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:static float dycCallSigVf(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:static double dycCallSigVd(dycObject obj, char *name, char *sig, va_list lst);
include/dycni_0.h:static dyt dycCallSigUr(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:static int dycCallSigUi(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:static s64 dycCallSigUl(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:static float dycCallSigUf(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:static double dycCallSigUd(dycObject obj, char *name, char *sig, void **args);
include/dycni_0.h:static int dycCallSigi(dycObject obj, char *name, char *sig, ...);
include/dycni_0.h:static s64 dycCallSigl(dycObject obj, char *name, char *sig, ...);
include/dycni_0.h:static float dycCallSigf(dycObject obj, char *name, char *sig, ...);
include/dycni_0.h:static double dycCallSigd(dycObject obj, char *name, char *sig, ...);
include/dycni_0.h:static void *dycCallU(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallV(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCall(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static int dycCallUi(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static s64 dycCallUl(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static float dycCallUf(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static double dycCallUd(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static dyt dycCallUr(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallUp(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static void dycCallUv(dycObject obj, dycMethod mth, void **args);
include/dycni_0.h:static int dycCallVi(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static s64 dycCallVl(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static float dycCallVf(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static double dycCallVd(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static dyt dycCallVr(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCallVp(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static void dycCallVv(dycObject obj, dycMethod mth, va_list args);
include/dycni_0.h:static int dycCalli(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static s64 dycCalll(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static float dycCallf(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static double dycCalld(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static dyt dycCallr(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static void *dycCallp(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static void dycCallv(dycObject obj, dycMethod mth, ...);
include/dycni_0.h:static void *dycCallStaticU(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallStaticV(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCallStatic(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static int dycCallStaticUi(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static s64 dycCallStaticUl(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static float dycCallStaticUf(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static double dycCallStaticUd(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static dyt dycCallStaticUr(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallStaticUp(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static void dycCallStaticUv(dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static int dycCallStaticVi(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static s64 dycCallStaticVl(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static float dycCallStaticVf(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static double dycCallStaticVd(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static dyt dycCallStaticVr(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCallStaticVp(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static void dycCallStaticVv(dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static int dycCallStatici(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static s64 dycCallStaticl(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static float dycCallStaticf(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static double dycCallStaticd(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static dyt dycCallStaticr(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static void *dycCallStaticp(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static void dycCallStaticv(dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static void *dycCallAsU(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallAsV(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCallAs(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static int dycCallAsUi(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static s64 dycCallAsUl(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static float dycCallAsUf(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static double dycCallAsUd(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static dyt dycCallAsUr(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallAsUp(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static void dycCallAsUv(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/dycni_0.h:static int dycCallAsVi(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static s64 dycCallAsVl(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static float dycCallAsVf(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static double dycCallAsVd(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static dyt dycCallAsVr(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCallAsVp(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static void dycCallAsVv(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/dycni_0.h:static int dycCallAsi(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static s64 dycCallAsl(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static float dycCallAsf(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static double dycCallAsd(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static dyt dycCallAsr(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static void *dycCallAsp(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static void dycCallAsv(dycObject obj, dycClass inf, dycMethod mth, ...);
include/dycni_0.h:static void *dycCallStructU(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallStructV(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCallStruct(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static int dycCallStructUi(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static s64 dycCallStructUl(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static float dycCallStructUf(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static double dycCallStructUd(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static dyt dycCallStructUr(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static void *dycCallStructUp(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static void dycCallStructUv(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/dycni_0.h:static int dycCallStructVi(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static s64 dycCallStructVl(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static float dycCallStructVf(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static double dycCallStructVd(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static dyt dycCallStructVr(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static void *dycCallStructVp(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static void dycCallStructVv(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/dycni_0.h:static int dycCallStructi(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static s64 dycCallStructl(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static float dycCallStructf(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static double dycCallStructd(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static dyt dycCallStructr(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static void *dycCallStructp(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static void dycCallStructv(void *obj, dycClassV vinf, dycMethod mth, ...);
include/dycni_0.h:static dycArray dycNewArray(char *sig, int cnt);
include/dycni_0.h:static int dycArrayP(dyt p);
include/dycni_0.h:static int dycArraySigP(dyt p, char *sig);
include/dycni_0.h:static void *dycArrayV(dycArray arr);
include/dycni_0.h:static int dycArraySz(dycArray arr);
include/dycni_0.h:static char *dycArraySig(dycArray arr);
include/dycni_0.h:static int dycArrayStep(dycArray arr);
include/dycni_0.h:static void *dycArrayIdxPtr(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArraysb(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArrayub(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArrayss(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArrayus(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArrayi(dycArray arr, int idx);
include/dycni_0.h:static s64 dycGetArrayl(dycArray arr, int idx);
include/dycni_0.h:static float dycGetArrayf(dycArray arr, int idx);
include/dycni_0.h:static double dycGetArrayd(dycArray arr, int idx);
include/dycni_0.h:static dyt dycGetArrayr(dycArray arr, int idx);
include/dycni_0.h:static void *dycGetArrayp(dycArray arr, int idx);
include/dycni_0.h:static void dycSetArraysb(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArrayub(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArrayss(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArrayus(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArrayi(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArrayl(dycArray arr, int idx, s64 val);
include/dycni_0.h:static void dycSetArrayf(dycArray arr, int idx, float val);
include/dycni_0.h:static void dycSetArrayd(dycArray arr, int idx, double val);
include/dycni_0.h:static void dycSetArrayr(dycArray arr, int idx, dyt val);
include/dycni_0.h:static void dycSetArrayp(dycArray arr, int idx, void *val);
include/dycni_0.h:static void *dycArrayIdxPtrBC(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArraySsb(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArraySub(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArraySss(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArraySus(dycArray arr, int idx);
include/dycni_0.h:static int dycGetArraySi(dycArray arr, int idx);
include/dycni_0.h:static s64 dycGetArraySl(dycArray arr, int idx);
include/dycni_0.h:static float dycGetArraySf(dycArray arr, int idx);
include/dycni_0.h:static double dycGetArraySd(dycArray arr, int idx);
include/dycni_0.h:static dyt dycGetArraySr(dycArray arr, int idx);
include/dycni_0.h:static void *dycGetArraySp(dycArray arr, int idx);
include/dycni_0.h:static void dycSetArraySsb(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArraySub(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArraySss(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArraySus(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArraySi(dycArray arr, int idx, int val);
include/dycni_0.h:static void dycSetArraySl(dycArray arr, int idx, s64 val);
include/dycni_0.h:static void dycSetArraySf(dycArray arr, int idx, float val);
include/dycni_0.h:static void dycSetArraySd(dycArray arr, int idx, double val);
include/dycni_0.h:static void dycSetArraySr(dycArray arr, int idx, dyt val);
include/dycni_0.h:static void dycSetArraySp(dycArray arr, int idx, void *val);
include/dycni_0.h:static dycArray DYC_NewArrayM_R(char *sig, int ord, int *sz);
include/dycni_0.h:static dycArray dycNewArrayM(char *sig, int ord, int *sz);
include/dycni_0.h:static dycArray dycNewArrayM2(char *sig, int sz0, int sz1);
include/dycni_0.h:static dycArray dycNewArrayM3(char *sig, int sz0, int sz1, int sz2);
include/dycni_0.h:static dycArray dycNewArrayM4(char *sig, int sz0, int sz1, int sz2, int sz3);
include/dycni_0.h:static dycArray dycNewArrayM5(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4);
include/dycni_0.h:static dycArray dycNewArrayM6(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5);
include/dycni_0.h:static dycArray dycNewArrayM7(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6);
include/dycni_0.h:static dycArray dycNewArrayM8(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7);
include/dycni_0.h:static dycArray dycNewArrayM9(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8);
include/dycni_0.h:static dycArray dycNewArrayM10(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8, int sz9);
include/dycni_0.h:static dycArray dycNewArrayM11(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10);
include/dycni_0.h:static dycArray dycNewArrayM12(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10, int sz11);
include/dycni_0.h:static dycArrayN dycNewArrayN(char *sig, int ord, int *sz);
include/dycni_0.h:static int dycArrayNP(dyt p);
include/dycni_0.h:static int dycArrayNSigP(dyt p, char *sig);
include/dycni_0.h:static int dycArrayNSigOrdP(dyt p, char *sig, int ord);
include/dycni_0.h:static void *dycArrayNV(dycArrayN arr);
include/dycni_0.h:static int *dycArrayNSz(dycArrayN arr);
include/dycni_0.h:static int dycArrayNCnt(dycArrayN arr);
include/dycni_0.h:static int dycArrayNOrd(dycArrayN arr);
include/dycni_0.h:static char *dycArrayNSig(dycArrayN arr);
include/dycni_0.h:static int dycArrayNStep(dycArrayN arr);
include/dycni_0.h:static void *dycArrayNIdxPtr(dycArrayN arr, int *idx);
include/dycni_0.h:static void *dycArrayNIdxPtrBC(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNsb(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNub(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNss(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNus(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNi(dycArrayN arr, int *idx);
include/dycni_0.h:static s64 dycGetArrayNl(dycArrayN arr, int *idx);
include/dycni_0.h:static float dycGetArrayNf(dycArrayN arr, int *idx);
include/dycni_0.h:static double dycGetArrayNd(dycArrayN arr, int *idx);
include/dycni_0.h:static dyt dycGetArrayNr(dycArrayN arr, int *idx);
include/dycni_0.h:static void *dycGetArrayNp(dycArrayN arr, int *idx);
include/dycni_0.h:static void dycSetArrayNsb(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNub(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNss(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNus(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNi(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNl(dycArrayN arr, int *idx, s64 val);
include/dycni_0.h:static void dycSetArrayNf(dycArrayN arr, int *idx, float val);
include/dycni_0.h:static void dycSetArrayNd(dycArrayN arr, int *idx, double val);
include/dycni_0.h:static void dycSetArrayNr(dycArrayN arr, int *idx, dyt val);
include/dycni_0.h:static void dycSetArrayNp(dycArrayN arr, int *idx, void *val);
include/dycni_0.h:static int dycGetArrayNSsb(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNSub(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNSss(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNSus(dycArrayN arr, int *idx);
include/dycni_0.h:static int dycGetArrayNSi(dycArrayN arr, int *idx);
include/dycni_0.h:static s64 dycGetArrayNSl(dycArrayN arr, int *idx);
include/dycni_0.h:static float dycGetArrayNSf(dycArrayN arr, int *idx);
include/dycni_0.h:static double dycGetArrayNSd(dycArrayN arr, int *idx);
include/dycni_0.h:static dyt dycGetArrayNSr(dycArrayN arr, int *idx);
include/dycni_0.h:static void *dycGetArrayNSp(dycArrayN arr, int *idx);
include/dycni_0.h:static void dycSetArrayNSsb(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNSub(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNSss(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNSus(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNSi(dycArrayN arr, int *idx, int val);
include/dycni_0.h:static void dycSetArrayNSl(dycArrayN arr, int *idx, s64 val);
include/dycni_0.h:static void dycSetArrayNSf(dycArrayN arr, int *idx, float val);
include/dycni_0.h:static void dycSetArrayNSd(dycArrayN arr, int *idx, double val);
include/dycni_0.h:static void dycSetArrayNSr(dycArrayN arr, int *idx, dyt val);
include/dycni_0.h:static void dycSetArrayNSp(dycArrayN arr, int *idx, void *val);
include/dycni_0.h:static void *dycArray2IdxPtr(dycArrayN arr, int y, int x);
include/dycni_0.h:static void *dycArray2IdxPtrBC(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2sb(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2ub(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2ss(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2us(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2i(dycArrayN arr, int y, int x);
include/dycni_0.h:static s64 dycGetArray2l(dycArrayN arr, int y, int x);
include/dycni_0.h:static float dycGetArray2f(dycArrayN arr, int y, int x);
include/dycni_0.h:static double dycGetArray2d(dycArrayN arr, int y, int x);
include/dycni_0.h:static dyt dycGetArray2r(dycArrayN arr, int y, int x);
include/dycni_0.h:static void *dycGetArray2p(dycArrayN arr, int y, int x);
include/dycni_0.h:static void dycSetArray2sb(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2ub(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2ss(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2us(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2i(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2l(dycArrayN arr, int y, int x, s64 val);
include/dycni_0.h:static void dycSetArray2f(dycArrayN arr, int y, int x, float val);
include/dycni_0.h:static void dycSetArray2d(dycArrayN arr, int y, int x, double val);
include/dycni_0.h:static void dycSetArray2r(dycArrayN arr, int y, int x, dyt val);
include/dycni_0.h:static void dycSetArray2p(dycArrayN arr, int y, int x, void *val);
include/dycni_0.h:static int dycGetArray2Ssb(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2Sub(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2Sss(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2Sus(dycArrayN arr, int y, int x);
include/dycni_0.h:static int dycGetArray2Si(dycArrayN arr, int y, int x);
include/dycni_0.h:static s64 dycGetArray2Sl(dycArrayN arr, int y, int x);
include/dycni_0.h:static float dycGetArray2Sf(dycArrayN arr, int y, int x);
include/dycni_0.h:static double dycGetArray2Sd(dycArrayN arr, int y, int x);
include/dycni_0.h:static dyt dycGetArray2Sr(dycArrayN arr, int y, int x);
include/dycni_0.h:static void *dycGetArray2Sp(dycArrayN arr, int y, int x);
include/dycni_0.h:static void dycSetArray2Ssb(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2Sub(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2Sss(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2Sus(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2Si(dycArrayN arr, int y, int x, int val);
include/dycni_0.h:static void dycSetArray2Sl(dycArrayN arr, int y, int x, s64 val);
include/dycni_0.h:static void dycSetArray2Sf(dycArrayN arr, int y, int x, float val);
include/dycni_0.h:static void dycSetArray2Sd(dycArrayN arr, int y, int x, double val);
include/dycni_0.h:static void dycSetArray2Sr(dycArrayN arr, int y, int x, dyt val);
include/dycni_0.h:static void dycSetArray2Sp(dycArrayN arr, int y, int x, void *val);
include/dycni_0.h:static void *dycArray3IdxPtr(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static void *dycArray3IdxPtrBC(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3sb(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3ub(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3ss(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3us(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3i(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static s64 dycGetArray3l(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static float dycGetArray3f(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static double dycGetArray3d(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static dyt dycGetArray3r(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static void *dycGetArray3p(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static void dycSetArray3sb(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3ub(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3ss(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3us(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3i(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3l(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni_0.h:static void dycSetArray3f(dycArrayN arr, int z, int y, int x, float val);
include/dycni_0.h:static void dycSetArray3d(dycArrayN arr, int z, int y, int x, double val);
include/dycni_0.h:static void dycSetArray3r(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni_0.h:static void dycSetArray3p(dycArrayN arr, int z, int y, int x, void *val);
include/dycni_0.h:static int dycGetArray3Ssb(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3Sub(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3Sss(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3Sus(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static int dycGetArray3Si(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static s64 dycGetArray3Sl(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static float dycGetArray3Sf(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static double dycGetArray3Sd(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static dyt dycGetArray3Sr(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static void *dycGetArray3Sp(dycArrayN arr, int z, int y, int x);
include/dycni_0.h:static void dycSetArray3Ssb(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3Sub(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3Sss(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3Sus(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3Si(dycArrayN arr, int z, int y, int x, int val);
include/dycni_0.h:static void dycSetArray3Sl(dycArrayN arr, int z, int y, int x, s64 val);
include/dycni_0.h:static void dycSetArray3Sf(dycArrayN arr, int z, int y, int x, float val);
include/dycni_0.h:static void dycSetArray3Sd(dycArrayN arr, int z, int y, int x, double val);
include/dycni_0.h:static void dycSetArray3Sr(dycArrayN arr, int z, int y, int x, dyt val);
include/dycni_0.h:static void dycSetArray3Sp(dycArrayN arr, int z, int y, int x, void *val);
include/sqlite3.h:** assert( sqlite3_libversion_number()==SQLITE_VERSION_NUMBER );
include/sqlite3.h:** assert( strcmp(sqlite3_sourceid(),SQLITE_SOURCE_ID)==0 );
include/sqlite3.h:** assert( strcmp(sqlite3_libversion(),SQLITE_VERSION)==0 );
include/sqlite3.h:SQLITE_API const char *sqlite3_libversion(void);
include/sqlite3.h:SQLITE_API const char *sqlite3_sourceid(void);
include/sqlite3.h:SQLITE_API int sqlite3_libversion_number(void);
include/sqlite3.h:SQLITE_API int sqlite3_threadsafe(void);
include/sqlite3.h:SQLITE_API int sqlite3_close(sqlite3 *);
include/sqlite3.h:typedef int (*sqlite3_callback)(void*,int,char**, char**);
include/sqlite3.h:);
include/sqlite3.h:  int (*xClose)(sqlite3_file*);
include/sqlite3.h:  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);
include/sqlite3.h:  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);
include/sqlite3.h:  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);
include/sqlite3.h:  int (*xSync)(sqlite3_file*, int flags);
include/sqlite3.h:  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);
include/sqlite3.h:  int (*xLock)(sqlite3_file*, int);
include/sqlite3.h:  int (*xUnlock)(sqlite3_file*, int);
include/sqlite3.h:  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);
include/sqlite3.h:  int (*xFileControl)(sqlite3_file*, int op, void *pArg);
include/sqlite3.h:  int (*xSectorSize)(sqlite3_file*);
include/sqlite3.h:  int (*xDeviceCharacteristics)(sqlite3_file*);
include/sqlite3.h:               int flags, int *pOutFlags);
include/sqlite3.h:  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);
include/sqlite3.h:  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);
include/sqlite3.h:  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);
include/sqlite3.h:  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);
include/sqlite3.h:  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);
include/sqlite3.h:  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);
include/sqlite3.h:  void (*xDlClose)(sqlite3_vfs*, void*);
include/sqlite3.h:  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);
include/sqlite3.h:  int (*xSleep)(sqlite3_vfs*, int microseconds);
include/sqlite3.h:  int (*xCurrentTime)(sqlite3_vfs*, double*);
include/sqlite3.h:  int (*xGetLastError)(sqlite3_vfs*, int, char *);
include/sqlite3.h:SQLITE_API int sqlite3_initialize(void);
include/sqlite3.h:SQLITE_API int sqlite3_shutdown(void);
include/sqlite3.h:SQLITE_API int sqlite3_os_init(void);
include/sqlite3.h:SQLITE_API int sqlite3_os_end(void);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_config(int, ...);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_db_config(sqlite3*, int op, ...);
include/sqlite3.h:  void *(*xMalloc)(int);         /* Memory allocation function */
include/sqlite3.h:  void (*xFree)(void*);          /* Free a prior allocation */
include/sqlite3.h:  void *(*xRealloc)(void*,int);  /* Resize an allocation */
include/sqlite3.h:  int (*xSize)(void*);           /* Return the size of an allocation */
include/sqlite3.h:  int (*xRoundup)(int);          /* Round up request size to allocation size */
include/sqlite3.h:  int (*xInit)(void*);           /* Initialize the memory allocator */
include/sqlite3.h:  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */
include/sqlite3.h:SQLITE_API int sqlite3_extended_result_codes(sqlite3*, int onoff);
include/sqlite3.h:SQLITE_API sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*);
include/sqlite3.h:SQLITE_API int sqlite3_changes(sqlite3*);
include/sqlite3.h:SQLITE_API int sqlite3_total_changes(sqlite3*);
include/sqlite3.h:SQLITE_API void sqlite3_interrupt(sqlite3*);
include/sqlite3.h:SQLITE_API int sqlite3_complete(const char *sql);
include/sqlite3.h:SQLITE_API int sqlite3_complete16(const void *sql);
include/sqlite3.h:SQLITE_API int sqlite3_busy_handler(sqlite3*, int(*)(void*,int), void*);
include/sqlite3.h:SQLITE_API int sqlite3_busy_timeout(sqlite3*, int ms);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API void sqlite3_free_table(char **result);
include/sqlite3.h:**  char *zSQL = sqlite3_mprintf("INSERT INTO table VALUES('%q')", zText);
include/sqlite3.h:**  sqlite3_exec(db, zSQL, 0, 0, 0);
include/sqlite3.h:**  sqlite3_free(zSQL);
include/sqlite3.h:**  INSERT INTO table1 VALUES('It's a happy day!');
include/sqlite3.h:**  char *zSQL = sqlite3_mprintf("INSERT INTO table VALUES(%Q)", zText);
include/sqlite3.h:**  sqlite3_exec(db, zSQL, 0, 0, 0);
include/sqlite3.h:**  sqlite3_free(zSQL);
include/sqlite3.h:SQLITE_API char *sqlite3_mprintf(const char*,...);
include/sqlite3.h:SQLITE_API char *sqlite3_vmprintf(const char*, va_list);
include/sqlite3.h:SQLITE_API char *sqlite3_snprintf(int,char*,const char*, ...);
include/sqlite3.h:SQLITE_API void *sqlite3_malloc(int);
include/sqlite3.h:SQLITE_API void *sqlite3_realloc(void*, int);
include/sqlite3.h:SQLITE_API void sqlite3_free(void*);
include/sqlite3.h:SQLITE_API sqlite3_int64 sqlite3_memory_used(void);
include/sqlite3.h:SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag);
include/sqlite3.h:SQLITE_API void sqlite3_randomness(int N, void *P);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL void *sqlite3_trace(sqlite3*, void(*xTrace)(void*,const char*), void*);
include/sqlite3.h:   void(*xProfile)(void*,const char*,sqlite3_uint64), void*);
include/sqlite3.h:SQLITE_API void sqlite3_progress_handler(sqlite3*, int, int(*)(void*), void*);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API int sqlite3_errcode(sqlite3 *db);
include/sqlite3.h:SQLITE_API int sqlite3_extended_errcode(sqlite3 *db);
include/sqlite3.h:SQLITE_API const char *sqlite3_errmsg(sqlite3*);
include/sqlite3.h:SQLITE_API const void *sqlite3_errmsg16(sqlite3*);
include/sqlite3.h:SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt);
include/sqlite3.h:SQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));
include/sqlite3.h:SQLITE_API int sqlite3_bind_double(sqlite3_stmt*, int, double);
include/sqlite3.h:SQLITE_API int sqlite3_bind_int(sqlite3_stmt*, int, int);
include/sqlite3.h:SQLITE_API int sqlite3_bind_int64(sqlite3_stmt*, int, sqlite3_int64);
include/sqlite3.h:SQLITE_API int sqlite3_bind_null(sqlite3_stmt*, int);
include/sqlite3.h:SQLITE_API int sqlite3_bind_text(sqlite3_stmt*, int, const char*, int n, void(*)(void*));
include/sqlite3.h:SQLITE_API int sqlite3_bind_text16(sqlite3_stmt*, int, const void*, int, void(*)(void*));
include/sqlite3.h:SQLITE_API int sqlite3_bind_value(sqlite3_stmt*, int, const sqlite3_value*);
include/sqlite3.h:SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt*, int, int n);
include/sqlite3.h:SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt*);
include/sqlite3.h:SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt*, int);
include/sqlite3.h:SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt*, const char *zName);
include/sqlite3.h:SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt*);
include/sqlite3.h:SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt);
include/sqlite3.h:SQLITE_API const char *sqlite3_column_name(sqlite3_stmt*, int N);
include/sqlite3.h:SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt*, int N);
include/sqlite3.h:SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt*,int);
include/sqlite3.h:SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt*,int);
include/sqlite3.h:SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt*,int);
include/sqlite3.h:SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt*,int);
include/sqlite3.h:SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt*,int);
include/sqlite3.h:SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt*,int);
include/sqlite3.h:** CREATE TABLE t1(c1 VARIANT);
include/sqlite3.h:SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt*,int);
include/sqlite3.h:SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt*,int);
include/sqlite3.h:SQLITE_API int sqlite3_step(sqlite3_stmt*);
include/sqlite3.h:SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt);
include/sqlite3.h:SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);
include/sqlite3.h:SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);
include/sqlite3.h:SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API SQLITE_DEPRECATED int sqlite3_aggregate_count(sqlite3_context*);
include/sqlite3.h:SQLITE_API SQLITE_DEPRECATED int sqlite3_expired(sqlite3_stmt*);
include/sqlite3.h:SQLITE_API SQLITE_DEPRECATED int sqlite3_transfer_bindings(sqlite3_stmt*, sqlite3_stmt*);
include/sqlite3.h:SQLITE_API SQLITE_DEPRECATED int sqlite3_global_recover(void);
include/sqlite3.h:SQLITE_API SQLITE_DEPRECATED void sqlite3_thread_cleanup(void);
include/sqlite3.h:SQLITE_API SQLITE_DEPRECATED int sqlite3_memory_alarm(void(*)(void*,sqlite3_int64,int),void*,sqlite3_int64);
include/sqlite3.h:SQLITE_API const void *sqlite3_value_blob(sqlite3_value*);
include/sqlite3.h:SQLITE_API int sqlite3_value_bytes(sqlite3_value*);
include/sqlite3.h:SQLITE_API int sqlite3_value_bytes16(sqlite3_value*);
include/sqlite3.h:SQLITE_API double sqlite3_value_double(sqlite3_value*);
include/sqlite3.h:SQLITE_API int sqlite3_value_int(sqlite3_value*);
include/sqlite3.h:SQLITE_API sqlite3_int64 sqlite3_value_int64(sqlite3_value*);
include/sqlite3.h:SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value*);
include/sqlite3.h:SQLITE_API const void *sqlite3_value_text16(sqlite3_value*);
include/sqlite3.h:SQLITE_API const void *sqlite3_value_text16le(sqlite3_value*);
include/sqlite3.h:SQLITE_API const void *sqlite3_value_text16be(sqlite3_value*);
include/sqlite3.h:SQLITE_API int sqlite3_value_type(sqlite3_value*);
include/sqlite3.h:SQLITE_API int sqlite3_value_numeric_type(sqlite3_value*);
include/sqlite3.h:SQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);
include/sqlite3.h:SQLITE_API void *sqlite3_user_data(sqlite3_context*);
include/sqlite3.h:SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);
include/sqlite3.h:SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);
include/sqlite3.h:SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));
include/sqlite3.h:typedef void (*sqlite3_destructor_type)(void*);
include/sqlite3.h:SQLITE_API void sqlite3_result_blob(sqlite3_context*, const void*, int, void(*)(void*));
include/sqlite3.h:SQLITE_API void sqlite3_result_double(sqlite3_context*, double);
include/sqlite3.h:SQLITE_API void sqlite3_result_error(sqlite3_context*, const char*, int);
include/sqlite3.h:SQLITE_API void sqlite3_result_error16(sqlite3_context*, const void*, int);
include/sqlite3.h:SQLITE_API void sqlite3_result_error_toobig(sqlite3_context*);
include/sqlite3.h:SQLITE_API void sqlite3_result_error_nomem(sqlite3_context*);
include/sqlite3.h:SQLITE_API void sqlite3_result_error_code(sqlite3_context*, int);
include/sqlite3.h:SQLITE_API void sqlite3_result_int(sqlite3_context*, int);
include/sqlite3.h:SQLITE_API void sqlite3_result_int64(sqlite3_context*, sqlite3_int64);
include/sqlite3.h:SQLITE_API void sqlite3_result_null(sqlite3_context*);
include/sqlite3.h:SQLITE_API void sqlite3_result_text(sqlite3_context*, const char*, int, void(*)(void*));
include/sqlite3.h:SQLITE_API void sqlite3_result_text16(sqlite3_context*, const void*, int, void(*)(void*));
include/sqlite3.h:SQLITE_API void sqlite3_result_text16le(sqlite3_context*, const void*, int,void(*)(void*));
include/sqlite3.h:SQLITE_API void sqlite3_result_text16be(sqlite3_context*, const void*, int,void(*)(void*));
include/sqlite3.h:SQLITE_API void sqlite3_result_value(sqlite3_context*, sqlite3_value*);
include/sqlite3.h:SQLITE_API void sqlite3_result_zeroblob(sqlite3_context*, int n);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API int sqlite3_sleep(int);
include/sqlite3.h:SQLITE_API int sqlite3_get_autocommit(sqlite3*);
include/sqlite3.h:SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt*);
include/sqlite3.h:SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);
include/sqlite3.h:SQLITE_API void *sqlite3_commit_hook(sqlite3*, int(*)(void*), void*);
include/sqlite3.h:SQLITE_API void *sqlite3_rollback_hook(sqlite3*, void(*)(void *), void*);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API int sqlite3_enable_shared_cache(int);
include/sqlite3.h:SQLITE_API int sqlite3_release_memory(int);
include/sqlite3.h:SQLITE_API void sqlite3_soft_heap_limit(int);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff);
include/sqlite3.h:SQLITE_API int sqlite3_auto_extension(void (*xEntryPoint)(void));
include/sqlite3.h:SQLITE_API void sqlite3_reset_auto_extension(void);
include/sqlite3.h:               sqlite3_vtab **ppVTab, char**);
include/sqlite3.h:               sqlite3_vtab **ppVTab, char**);
include/sqlite3.h:  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);
include/sqlite3.h:  int (*xDisconnect)(sqlite3_vtab *pVTab);
include/sqlite3.h:  int (*xDestroy)(sqlite3_vtab *pVTab);
include/sqlite3.h:  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);
include/sqlite3.h:  int (*xClose)(sqlite3_vtab_cursor*);
include/sqlite3.h:                int argc, sqlite3_value **argv);
include/sqlite3.h:  int (*xNext)(sqlite3_vtab_cursor*);
include/sqlite3.h:  int (*xEof)(sqlite3_vtab_cursor*);
include/sqlite3.h:  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);
include/sqlite3.h:  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);
include/sqlite3.h:  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);
include/sqlite3.h:  int (*xBegin)(sqlite3_vtab *pVTab);
include/sqlite3.h:  int (*xSync)(sqlite3_vtab *pVTab);
include/sqlite3.h:  int (*xCommit)(sqlite3_vtab *pVTab);
include/sqlite3.h:  int (*xRollback)(sqlite3_vtab *pVTab);
include/sqlite3.h:                       void **ppArg);
include/sqlite3.h:  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);
include/sqlite3.h:);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_declare_vtab(sqlite3*, const char *zSQL);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API int sqlite3_blob_close(sqlite3_blob *);
include/sqlite3.h:SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *);
include/sqlite3.h:SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
include/sqlite3.h:SQLITE_API int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);
include/sqlite3.h:SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);
include/sqlite3.h:SQLITE_API int sqlite3_vfs_register(sqlite3_vfs*, int makeDflt);
include/sqlite3.h:SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs*);
include/sqlite3.h:SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int);
include/sqlite3.h:SQLITE_API void sqlite3_mutex_free(sqlite3_mutex*);
include/sqlite3.h:SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex*);
include/sqlite3.h:SQLITE_API int sqlite3_mutex_try(sqlite3_mutex*);
include/sqlite3.h:SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex*);
include/sqlite3.h:  int (*xMutexInit)(void);
include/sqlite3.h:  int (*xMutexEnd)(void);
include/sqlite3.h:  sqlite3_mutex *(*xMutexAlloc)(int);
include/sqlite3.h:  void (*xMutexFree)(sqlite3_mutex *);
include/sqlite3.h:  void (*xMutexEnter)(sqlite3_mutex *);
include/sqlite3.h:  int (*xMutexTry)(sqlite3_mutex *);
include/sqlite3.h:  void (*xMutexLeave)(sqlite3_mutex *);
include/sqlite3.h:  int (*xMutexHeld)(sqlite3_mutex *);
include/sqlite3.h:  int (*xMutexNotheld)(sqlite3_mutex *);
include/sqlite3.h:SQLITE_API int sqlite3_mutex_held(sqlite3_mutex*);
include/sqlite3.h:SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex*);
include/sqlite3.h:SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3*);
include/sqlite3.h:SQLITE_API int sqlite3_file_control(sqlite3*, const char *zDbName, int op, void*);
include/sqlite3.h:SQLITE_API int sqlite3_test_control(int op, ...);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
include/sqlite3.h:SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);
include/sqlite3.h:  int (*xInit)(void*);
include/sqlite3.h:  void (*xShutdown)(void*);
include/sqlite3.h:  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);
include/sqlite3.h:  void (*xCachesize)(sqlite3_pcache*, int nCachesize);
include/sqlite3.h:  int (*xPagecount)(sqlite3_pcache*);
include/sqlite3.h:  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);
include/sqlite3.h:  void (*xUnpin)(sqlite3_pcache*, void*, int discard);
include/sqlite3.h:  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);
include/sqlite3.h:  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);
include/sqlite3.h:  void (*xDestroy)(sqlite3_pcache*);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage);
include/sqlite3.h:SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p);
include/sqlite3.h:SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p);
include/sqlite3.h:SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p);
include/sqlite3.h:);
include/sqlite3.h:SQLITE_API int sqlite3_strnicmp(const char *, const char *, int);
include/sqlite3ext.h:  void * (*aggregate_context)(sqlite3_context*,int nBytes);
include/sqlite3ext.h:  int  (*aggregate_count)(sqlite3_context*);
include/sqlite3ext.h:  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));
include/sqlite3ext.h:  int  (*bind_double)(sqlite3_stmt*,int,double);
include/sqlite3ext.h:  int  (*bind_int)(sqlite3_stmt*,int,int);
include/sqlite3ext.h:  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);
include/sqlite3ext.h:  int  (*bind_null)(sqlite3_stmt*,int);
include/sqlite3ext.h:  int  (*bind_parameter_count)(sqlite3_stmt*);
include/sqlite3ext.h:  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);
include/sqlite3ext.h:  const char * (*bind_parameter_name)(sqlite3_stmt*,int);
include/sqlite3ext.h:  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));
include/sqlite3ext.h:  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));
include/sqlite3ext.h:  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);
include/sqlite3ext.h:  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);
include/sqlite3ext.h:  int  (*busy_timeout)(sqlite3*,int ms);
include/sqlite3ext.h:  int  (*changes)(sqlite3*);
include/sqlite3ext.h:  int  (*close)(sqlite3*);
include/sqlite3ext.h:  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));
include/sqlite3ext.h:  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));
include/sqlite3ext.h:  const void * (*column_blob)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  int  (*column_bytes)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  int  (*column_bytes16)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  int  (*column_count)(sqlite3_stmt*pStmt);
include/sqlite3ext.h:  const char * (*column_database_name)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const void * (*column_database_name16)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const char * (*column_decltype)(sqlite3_stmt*,int i);
include/sqlite3ext.h:  const void * (*column_decltype16)(sqlite3_stmt*,int);
include/sqlite3ext.h:  double  (*column_double)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  int  (*column_int)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  const char * (*column_name)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const void * (*column_name16)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const char * (*column_origin_name)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const void * (*column_origin_name16)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const char * (*column_table_name)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const void * (*column_table_name16)(sqlite3_stmt*,int);
include/sqlite3ext.h:  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  const void * (*column_text16)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  int  (*column_type)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);
include/sqlite3ext.h:  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);
include/sqlite3ext.h:  int  (*complete)(const char*sql);
include/sqlite3ext.h:  int  (*complete16)(const void*sql);
include/sqlite3ext.h:  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));
include/sqlite3ext.h:  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));
include/sqlite3ext.h:  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));
include/sqlite3ext.h:  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));
include/sqlite3ext.h:  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);
include/sqlite3ext.h:  int  (*data_count)(sqlite3_stmt*pStmt);
include/sqlite3ext.h:  sqlite3 * (*db_handle)(sqlite3_stmt*);
include/sqlite3ext.h:  int (*declare_vtab)(sqlite3*,const char*);
include/sqlite3ext.h:  int  (*enable_shared_cache)(int);
include/sqlite3ext.h:  int  (*errcode)(sqlite3*db);
include/sqlite3ext.h:  const char * (*errmsg)(sqlite3*);
include/sqlite3ext.h:  const void * (*errmsg16)(sqlite3*);
include/sqlite3ext.h:  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);
include/sqlite3ext.h:  int  (*expired)(sqlite3_stmt*);
include/sqlite3ext.h:  int  (*finalize)(sqlite3_stmt*pStmt);
include/sqlite3ext.h:  void  (*free)(void*);
include/sqlite3ext.h:  void  (*free_table)(char**result);
include/sqlite3ext.h:  int  (*get_autocommit)(sqlite3*);
include/sqlite3ext.h:  void * (*get_auxdata)(sqlite3_context*,int);
include/sqlite3ext.h:  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);
include/sqlite3ext.h:  int  (*global_recover)(void);
include/sqlite3ext.h:  void  (*interruptx)(sqlite3*);
include/sqlite3ext.h:  sqlite_int64  (*last_insert_rowid)(sqlite3*);
include/sqlite3ext.h:  const char * (*libversion)(void);
include/sqlite3ext.h:  int  (*libversion_number)(void);
include/sqlite3ext.h:  void *(*malloc)(int);
include/sqlite3ext.h:  char * (*mprintf)(const char*,...);
include/sqlite3ext.h:  int  (*open)(const char*,sqlite3**);
include/sqlite3ext.h:  int  (*open16)(const void*,sqlite3**);
include/sqlite3ext.h:  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);
include/sqlite3ext.h:  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);
include/sqlite3ext.h:  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);
include/sqlite3ext.h:  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);
include/sqlite3ext.h:  void *(*realloc)(void*,int);
include/sqlite3ext.h:  int  (*reset)(sqlite3_stmt*pStmt);
include/sqlite3ext.h:  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));
include/sqlite3ext.h:  void  (*result_double)(sqlite3_context*,double);
include/sqlite3ext.h:  void  (*result_error)(sqlite3_context*,const char*,int);
include/sqlite3ext.h:  void  (*result_error16)(sqlite3_context*,const void*,int);
include/sqlite3ext.h:  void  (*result_int)(sqlite3_context*,int);
include/sqlite3ext.h:  void  (*result_int64)(sqlite3_context*,sqlite_int64);
include/sqlite3ext.h:  void  (*result_null)(sqlite3_context*);
include/sqlite3ext.h:  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));
include/sqlite3ext.h:  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));
include/sqlite3ext.h:  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));
include/sqlite3ext.h:  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));
include/sqlite3ext.h:  void  (*result_value)(sqlite3_context*,sqlite3_value*);
include/sqlite3ext.h:  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);
include/sqlite3ext.h:  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);
include/sqlite3ext.h:  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));
include/sqlite3ext.h:  char * (*snprintf)(int,char*,const char*,...);
include/sqlite3ext.h:  int  (*step)(sqlite3_stmt*);
include/sqlite3ext.h:  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);
include/sqlite3ext.h:  void  (*thread_cleanup)(void);
include/sqlite3ext.h:  int  (*total_changes)(sqlite3*);
include/sqlite3ext.h:  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);
include/sqlite3ext.h:  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);
include/sqlite3ext.h:  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);
include/sqlite3ext.h:  void * (*user_data)(sqlite3_context*);
include/sqlite3ext.h:  const void * (*value_blob)(sqlite3_value*);
include/sqlite3ext.h:  int  (*value_bytes)(sqlite3_value*);
include/sqlite3ext.h:  int  (*value_bytes16)(sqlite3_value*);
include/sqlite3ext.h:  double  (*value_double)(sqlite3_value*);
include/sqlite3ext.h:  int  (*value_int)(sqlite3_value*);
include/sqlite3ext.h:  sqlite_int64  (*value_int64)(sqlite3_value*);
include/sqlite3ext.h:  int  (*value_numeric_type)(sqlite3_value*);
include/sqlite3ext.h:  const unsigned char * (*value_text)(sqlite3_value*);
include/sqlite3ext.h:  const void * (*value_text16)(sqlite3_value*);
include/sqlite3ext.h:  const void * (*value_text16be)(sqlite3_value*);
include/sqlite3ext.h:  const void * (*value_text16le)(sqlite3_value*);
include/sqlite3ext.h:  int  (*value_type)(sqlite3_value*);
include/sqlite3ext.h:  char *(*vmprintf)(const char*,va_list);
include/sqlite3ext.h:  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);
include/sqlite3ext.h:  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);
include/sqlite3ext.h:  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);
include/sqlite3ext.h:  int (*clear_bindings)(sqlite3_stmt*);
include/sqlite3ext.h:  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));
include/sqlite3ext.h:  int (*bind_zeroblob)(sqlite3_stmt*,int,int);
include/sqlite3ext.h:  int (*blob_bytes)(sqlite3_blob*);
include/sqlite3ext.h:  int (*blob_close)(sqlite3_blob*);
include/sqlite3ext.h:  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);
include/sqlite3ext.h:  int (*blob_read)(sqlite3_blob*,void*,int,int);
include/sqlite3ext.h:  int (*blob_write)(sqlite3_blob*,const void*,int,int);
include/sqlite3ext.h:  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));
include/sqlite3ext.h:  int (*file_control)(sqlite3*,const char*,int,void*);
include/sqlite3ext.h:  sqlite3_int64 (*memory_highwater)(int);
include/sqlite3ext.h:  sqlite3_int64 (*memory_used)(void);
include/sqlite3ext.h:  sqlite3_mutex *(*mutex_alloc)(int);
include/sqlite3ext.h:  void (*mutex_enter)(sqlite3_mutex*);
include/sqlite3ext.h:  void (*mutex_free)(sqlite3_mutex*);
include/sqlite3ext.h:  void (*mutex_leave)(sqlite3_mutex*);
include/sqlite3ext.h:  int (*mutex_try)(sqlite3_mutex*);
include/sqlite3ext.h:  int (*open_v2)(const char*,sqlite3**,int,const char*);
include/sqlite3ext.h:  int (*release_memory)(int);
include/sqlite3ext.h:  void (*result_error_nomem)(sqlite3_context*);
include/sqlite3ext.h:  void (*result_error_toobig)(sqlite3_context*);
include/sqlite3ext.h:  int (*sleep)(int);
include/sqlite3ext.h:  void (*soft_heap_limit)(int);
include/sqlite3ext.h:  sqlite3_vfs *(*vfs_find)(const char*);
include/sqlite3ext.h:  int (*vfs_register)(sqlite3_vfs*,int);
include/sqlite3ext.h:  int (*vfs_unregister)(sqlite3_vfs*);
include/sqlite3ext.h:  int (*xthreadsafe)(void);
include/sqlite3ext.h:  void (*result_zeroblob)(sqlite3_context*,int);
include/sqlite3ext.h:  void (*result_error_code)(sqlite3_context*,int);
include/sqlite3ext.h:  int (*test_control)(int, ...);
include/sqlite3ext.h:  void (*randomness)(int,void*);
include/sqlite3ext.h:  sqlite3 *(*context_db_handle)(sqlite3_context*);
include/sqlite3ext.h:  int (*extended_result_codes)(sqlite3*,int);
include/sqlite3ext.h:  int (*limit)(sqlite3*,int,int);
include/sqlite3ext.h:  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);
include/sqlite3ext.h:  const char *(*sql)(sqlite3_stmt*);
include/sqlite3ext.h:  int (*status)(int,int*,int*,int);
include/bgbasm_auto2_asm.h:BASM2_API BASM_Context *BASM_NewContext();
include/bgbasm_auto2_asm.h:BASM2_API void BASM_DestroyContext(BASM_Context *ctx);
include/bgbasm_auto2_asm.h:BASM2_API void *BASM_TempAllocTy(BASM_Context *ctx, char *ty, int sz);
include/bgbasm_auto2_asm.h:BASM2_API void *BASM_TempAlloc(BASM_Context *ctx, int sz);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutPadText(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutPadZero(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutPadVLI(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutPad(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_Align(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_GetSectionOffset(BASM_Context *ctx);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_Align(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_AlignVLI(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutByte(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutWord(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutDWord(BASM_Context *ctx, int i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutQWord(BASM_Context *ctx, long long i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutUVLIP(BASM_Context *ctx, unsigned long long i, int pad);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutUVLI(BASM_Context *ctx, unsigned long long i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutSVLI(BASM_Context *ctx, long long i);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutSVLIP(BASM_Context *ctx, long long i, int pad);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutStr8(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutStr16(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutStr8Z(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutStr16Z(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutBytes(BASM_Context *ctx, byte *buf, int sz);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutSection(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutBits(BASM_Context *ctx, int bits);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutRelPtrDisp(BASM_Context *ctx, char *lbl, int disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutRelSPtrDisp(BASM_Context *ctx, char *lbl, int disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_LabelDisp(BASM_Context *ctx, char *lbl, int disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_ModRM(BASM_Context *ctx, int reg,int rm, int sc, int idx, int disp, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_RegREXW(int reg);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Reg16P(int reg);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Reg32P(int reg);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_AddrOverride(BASM_Context *ctx, int breg);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_SegOverride(BASM_Context *ctx);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_OutSufBytes(BASM_Context *ctx, char *s);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_OutBodyBytes(BASM_Context *ctx, char *s, int rex);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_OutImm(BASM_Context *ctx, char *s,long long imm, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_OutMOffs(BASM_Context *ctx, char *s, int disp, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_OutModRM(BASM_Context *ctx, char *s, int reg,int breg, int sc, int ireg, int disp, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStr(BASM_Context *ctx, char *s);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrReg(BASM_Context *ctx, char *s, int reg);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrImm(BASM_Context *ctx, char *s, long long imm, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrMem(BASM_Context *ctx, char *s,char *lbl, int breg, int ireg, int sc, int disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrRegReg(BASM_Context *ctx, char *s, int r0, int r1);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrRegImm(BASM_Context *ctx, char *s, int reg,long long imm, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrRegMem(BASM_Context *ctx, char *s, int reg,char *lbl, int breg, int ireg, int sc, int disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrMemImm(BASM_Context *ctx, char *s, int w,char *lbl, int breg, int ireg, int sc, int disp, long long imm, char *lbl2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrRegRegImm(BASM_Context *ctx, char *s,int r0, int r1, long long imm, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrRegMemImm(BASM_Context *ctx, char *s, int reg,char *lbl, int breg, int ireg, int sc, int disp, long long imm, char *lbl2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrRegRegReg(BASM_Context *ctx, char *s,int r0, int r1, int r2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpStrRegMemReg(BASM_Context *ctx, char *s, int reg,char *lbl, int breg, int ireg, int sc, int disp, int reg2);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_OpSingleP(int i);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_GetRegWidth(int reg);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpSingle(BASM_Context *ctx, int op);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpReg(BASM_Context *ctx, int op, int reg);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpImm(BASM_Context *ctx, int op, int w,long long imm, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpMem(BASM_Context *ctx, int op, int w,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpRegReg(BASM_Context *ctx, int op, int r0, int r1);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpRegImm(BASM_Context *ctx, int op,int reg, long long imm, char *lbl);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpRegMem(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpMemReg(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpMemImm(BASM_Context *ctx, int op, int w,char *lbl, int breg, int ireg, int sc, long long disp, long long imm, char *lbl2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpRegRegImm(BASM_Context *ctx, int op, int r0, int r1,long long imm, char *lbl2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpRegMemImm(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp, long long imm, char *lbl2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpMemRegImm(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp, long long imm, char *lbl2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpRegRegReg(BASM_Context *ctx, int op, int r0, int r1, int r2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpRegMemReg(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp, int reg2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpMemRegReg(BASM_Context *ctx, int op, int reg,char *lbl, int breg, int ireg, int sc, long long disp, int reg2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpGeneric1(BASM_Context *ctx, int op, int w,char *lbl, int breg, int ireg, int sc, long long disp);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpGeneric2(BASM_Context *ctx, int op, int w,char *lbl0, int breg0, int ireg0, int sc0, long long disp0, char *lbl1, int breg1, int ireg1, int sc1, long long disp1);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_OutOpGeneric3(BASM_Context *ctx, int op, int w,char *lbl0, int breg0, int ireg0, int sc0, long long disp0, char *lbl1, int breg1, int ireg1, int sc1, long long disp1, char *lbl2, int breg2, int ireg2, int sc2, long long disp2);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_EmitLabelPos(BASM_Context *ctx, char *name, int pos);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_EmitGotoPos(BASM_Context *ctx, char *name, int ty, int pos);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_EmitLabel(BASM_Context *ctx, char *name);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_EmitGoto(BASM_Context *ctx, char *name, int ty);
include/bgbasm_auto2_asm.h:BASM2_API void BASM_EmitConst(BASM_Context *ctx, char *name, long long val);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_PredictPos(BASM_Context *ctx, char *name);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_PredictDisp(BASM_Context *ctx, char *name);
include/bgbasm_auto2_asm.h:BASM2_API int basm_strdup_i(char *str);
include/bgbasm_auto2_asm.h:BASM2_API char *basm_strtab_i(int str);
include/bgbasm_auto2_asm.h:BASM2_API int basm_strdup_i(char *str);
include/bgbasm_auto2_asm.h:BASM2_API char *basm_strtab_i(int i);
include/bgbasm_auto2_asm.h:BASM2_API int basm_strildup_i(char *str);
include/bgbasm_auto2_asm.h:BASM2_API void *basm_ralloc(int sz);
include/bgbasm_auto2_asm.h:BASM2_API char *basm_rstrdup(char *str);
include/bgbasm_auto2_asm.h:BASM2_API int basm_strisreal(char *str);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_Parse_EatWhiteOnly(char *s);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_Parse_EatWhite(char *s);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Parse_IsWhiteOnly(char *s);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Parse_IsLineBreak(char *se);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Parse_OpChar(int c);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Parse_PeekChar(char **str);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Parse_ParseChar(char **str);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_Parse_EmitChar(char **str, int j);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_Parse_Token(char *s, char *b, int *ty);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_ParseReg(BASM_Context *ctx, char *b);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_ParseReg(BASM_Context *ctx, char *b);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_ParseArg(BASM_Context *ctx, char *str,int *breg, int *ireg, int *sc, long long *disp, char **lbl);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_OpOnlySingleP(int op);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_ParseXMeta(BASM_Context *ctx, char *str,char *op, char *tag);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_ParseSpecial(BASM_Context *ctx, char *str, char *op);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_LookupOpcode(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_ParseOpcode(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_ParseOpcode(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API char *BASM_ParseOpcodeList(BASM_Context *ctx, char *str);
include/bgbasm_auto2_asm.h:BASM2_API int BASM_COFF_StoreObjectBuf(BASM_Context *ctx,byte *buf, int msz);
include/bgbasm_auto2_asm.h:BASM2_API byte *BASM_COFF_EncodeObject(BASM_Context *ctx, int *rsz);
include/bgbasm_auto_asmx.h:BASMX_API char *BASMX_ParseOpcodeI(BASM_Context *ctx,char *str, BASMX_Opcode *dop);
include/bgbasm_auto_asmx.h:BASMX_API BASMX_OpArg *BASMX_CloneOpArgMalloc(BASM_Context *ctx, BASMX_OpArg *op);
include/bgbasm_auto_asmx.h:BASMX_API BASMX_Opcode *BASMX_CloneOpcodeMalloc(BASM_Context *ctx, BASMX_Opcode *op);
include/bgbasm_auto_asmx.h:BASMX_API BASMX_Opcode *BASMX_ParseOpcodeMalloc(BASM_Context *ctx, char **str);
include/bgbasm_auto_asmx.h:BASMX_API BASMX_Opcode **BASMX_ParseOpcodeListMalloc(BASM_Context *ctx, char **str);
include/bgbasm_auto_asmx.h:BASMX_API void BASMX_OutOpcode(BASM_Context *ctx, BASMX_Opcode *op);
include/bgbasm_auto_asmx.h:BASMX_API void BASMX_OutOpcodeList(BASM_Context *ctx, BASMX_Opcode **ops);
include/bgbasm_auto_asmx.h:BASMX_API void BASMX_BeginAssembly(BASM_Context *ctx, char *name);
include/bgbasm_auto_asmx.h:BASMX_API void *BASMX_EndAssembly(BASM_Context *ctx);
include/bgbasm_auto_asmx.h:BASMX_API byte *BASMX_EndAssemblyObjBuf(BASM_Context *ctx, int *rsz);
include/bgbasm_auto_asmx.h:BASMX_API byte *BASMX_EndAssemblyCacheObjBuf(BASM_Context *ctx, int *rsz);
include/bgbasm_auto_asmx.h:BASMX_API void BASMX_EndAssemblyQueue(BASM_Context *ctx);
include/bgbcc_autom.h:int BGBCP_GetLinenum();
include/bgbcc_autom.h:char *BGBCP_GetFilename();
include/bgbcc_autom.h:int BGBCP_CalcLinenum(char *se);
include/bgbcc_autom.h:int BGBCP_SetLinenum(char *fname, char *base, int num);
include/bgbcc_autom.h:int BGBCP_PushLinenum();
include/bgbcc_autom.h:int BGBCP_PopLinenum();
include/bgbcc_autom.h:int BGBCP_SkimLinenum(char *s, char **rfn, int *rln);
include/bgbcc_autom.h:char *BGBCP_GetLastFileName();
include/bgbcc_autom.h:int BGBCP_GetLastLineNumber();
include/bgbcc_autom.h:char *BGBCP_EatWhiteOnly(char *s);
include/bgbcc_autom.h:char *BGBCP_EatWhiteOnly2(char *s);
include/bgbcc_autom.h:char *BGBCP_EatWhite(char *s);
include/bgbcc_autom.h:int BGBCP_IsWhiteOnly(char *s);
include/bgbcc_autom.h:int BGBCP_IsLineBreak(char *se);
include/bgbcc_autom.h:int BGBCP_OpChar(int c);
include/bgbcc_autom.h:int BGBCP_PeekChar(char **str);
include/bgbcc_autom.h:int BGBCP_ParseChar(char **str);
include/bgbcc_autom.h:int BGBCP_EmitChar(char **str, int j);
include/bgbcc_autom.h:int BGBCP_NameInitChar(int c);
include/bgbcc_autom.h:int BGBCP_NameChar(int c);
include/bgbcc_autom.h:char *BGBCP_TokenI(char *s, char *b, int *ty, int lang, int sz);
include/bgbcc_autom.h:char *BGBCP_Token(char *s, char *b, int *ty);
include/bgbcc_autom.h:void BGBCP_FlushToken(char *s);
include/bgbcc_autom.h:char *BGBCP_Token(char *s, char *b, int *ty);
include/bgbcc_autom.h:void BGBCP_FlushToken(char *s);
include/bgbcc_autom.h:char *BGBCP_TokenGen(char *s, char *b, int *ty);
include/bgbcc_autom.h:char *BGBCP_TokenLang(char *s, char *b, int *ty, int lang);
include/bgbcc_autom.h:char *BGBCP_TokenCtx(BGBCP_ParseState *ctx, char *s, char *b, int *ty);
include/bgbcc_autom.h:char *BGBCP_ReadToken(BGBCP_ParseState *ctx, char **str, int *ty);
include/bgbcc_autom.h:BCCX_Node *BGBCP_FunArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_GenArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
include/bgbcc_autom.h:int BGBCP_LangForName(char *name);
include/bgbcc_autom.h:char *BGBCP_NameForLang(int lang);
include/bgbcc_autom.h:int BGBCP_ArchForName(char *name);
include/bgbcc_autom.h:char *BGBCP_NameForArch(int arch);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
include/bgbcc_autom.h:BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:int BGBCP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_LookupStruct(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_LookupType(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:int BGBCP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BGBCP_GetStruct(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_GetUnion(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_GetEnum(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBCP_GetStructJ(BGBCP_ParseState *ctx, char *name, int ty);
include/bgbcc_autom.h:int BGBCP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:int BGBCP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DefClassC(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DeclAttributeC(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DefTypeC(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DefClassJ(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DefTypeJ(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DefType(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
include/bgbcc_autom.h:BCCX_Node *BGBCP_FunVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DefName(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_DefName2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_VarDefinition(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_Definition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:int BGBCP_AddExpression(char *name, BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_autom.h:BCCX_Node *BGBCP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_autom.h:BCCX_Node *BGBCP_Number(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
include/bgbcc_autom.h:BCCX_Node *BGBCP_UnaryExpr(char *op, BCCX_Node *v);
include/bgbcc_autom.h:BCCX_Node *BGBCP_IfExpr(BCCX_Node *cond, BCCX_Node *ln, BCCX_Node *rn);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_Expression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_Expression2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:void BGBCP_Warn(char *se, char *str, ...);
include/bgbcc_autom.h:void BGBCP_Error(char *se, char *str, ...);
include/bgbcc_autom.h:int BGBCP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_autom.h:BCCX_Node *BGBCP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_autom.h:int BGBCP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_autom.h:BCCX_Node *BGBCP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_autom.h:char *BGBCP_EatSemicolon(char *s);
include/bgbcc_autom.h:BCCX_Node *BGBCP_Statement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ParseComment(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_ParseDocComment(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_BlockStatement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_Block(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBCP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:int BGBPP_AddIncludePathFront(char *str);
include/bgbcc_autom.h:int BGBPP_AddIncludePathBack(char *str);
include/bgbcc_autom.h:char *BGBPP_EmitString(char *t, char *s);
include/bgbcc_autom.h:char *BGBPP_EmitCharString(char *t, char *s);
include/bgbcc_autom.h:void BGBPP_Trigraphs(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:void BGBPP_UniEscape(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:int BGBPP_Error(BGBCP_ParseState *ctx, char *str, ...);
include/bgbcc_autom.h:BGBPP_Def *BGBPP_LookupDefine(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:void BGBPP_DeleteDefine(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:void BGBPP_CleanupDefines(BGBCP_ParseState *ctx);
include/bgbcc_autom.h:void BGBPP_AddDefine(BGBCP_ParseState *ctx, char *name, char *str);
include/bgbcc_autom.h:void BGBPP_AddDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
include/bgbcc_autom.h:void BGBPP_AddStaticDefine(BGBCP_ParseState *ctx,char *name, char *str);
include/bgbcc_autom.h:void BGBPP_AddStaticDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
include/bgbcc_autom.h:void BGBPP_SendDefines(BGBCP_ParseState *ctx);
include/bgbcc_autom.h:char *BGBPP_LoadInclude(BGBCP_ParseState *ctx, char *name, int *rsz);
include/bgbcc_autom.h:void BGBPP_Include(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:void BGBPP_Directive2(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:void BGBPP_Directive(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:char *BGBPP_ParseArg(BGBCP_ParseState *ctx, char *s, char *b);
include/bgbcc_autom.h:char *BGBPP_PrintName(char *t, char *s);
include/bgbcc_autom.h:char *BGBPP_PrintToken(char *t, char *s, int ty);
include/bgbcc_autom.h:int BGBPP_Expand(BGBCP_ParseState *ctx, char **src, char **dst, char *op);
include/bgbcc_autom.h:int BGBPP_Line(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:int BGBPP_LineDigraph(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:int BGBPP_LinePostFilter(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:char *BGBPP_ParseLine(BGBCP_ParseState *ctx, char *s, char *b);
include/bgbcc_autom.h:void BGBPP_BufferLine(BGBCP_ParseState *ctx, char *b);
include/bgbcc_autom.h:void BGBPP_Buffer(BGBCP_ParseState *ctx, char *ibuf);
include/bgbcc_autom.h:int BGBPP_Filter(BGBCP_ParseState *ctx, char *ibuf, char *obuf);
include/bgbcc_autom.h:int BGBJP_GetLinenum();
include/bgbcc_autom.h:char *BGBJP_GetFilename();
include/bgbcc_autom.h:int BGBJP_CalcLinenum(char *se);
include/bgbcc_autom.h:int BGBJP_SetLinenum(char *fname, char *base, int num);
include/bgbcc_autom.h:int BGBJP_PushLinenum();
include/bgbcc_autom.h:int BGBJP_PopLinenum();
include/bgbcc_autom.h:int BGBJP_SkimLinenum(char *s, char **rfn, int *rln);
include/bgbcc_autom.h:char *BGBJP_GetLastFileName();
include/bgbcc_autom.h:int BGBJP_GetLastLineNumber();
include/bgbcc_autom.h:char *BGBJP_EatWhiteOnly(char *s);
include/bgbcc_autom.h:char *BGBJP_EatWhiteOnly2(char *s);
include/bgbcc_autom.h:char *BGBJP_EatWhite(char *s);
include/bgbcc_autom.h:int BGBJP_IsWhiteOnly(char *s);
include/bgbcc_autom.h:int BGBJP_IsLineBreak(char *se);
include/bgbcc_autom.h:int BGBJP_OpChar(int c);
include/bgbcc_autom.h:int BGBJP_PeekChar(char **str);
include/bgbcc_autom.h:int BGBJP_ParseChar(char **str);
include/bgbcc_autom.h:int BGBJP_EmitChar(char **str, int j);
include/bgbcc_autom.h:int BGBJP_NameChar(int c);
include/bgbcc_autom.h:char *BGBJP_Token(char *s, char *b, int *ty);
include/bgbcc_autom.h:void BGBJP_FlushToken(char *s);
include/bgbcc_autom.h:char *BGBJP_TokenGen(char *s, char *b, int *ty);
include/bgbcc_autom.h:BCCX_Node *BGBJP_FunArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_FunArgs2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ModuleBuffer(char *name, char *modname, char *buf);
include/bgbcc_autom.h:int BGBJP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBJP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBJP_LookupType(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:int BGBJP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BGBJP_NewStructJ(BGBCP_ParseState *ctx, char *name, int ty);
include/bgbcc_autom.h:int BGBJP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:BCCX_Node *BGBJP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:int BGBJP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
include/bgbcc_autom.h:BCCX_Node *BGBJP_DefClass(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_DeclAttribute(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_DefType(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_FlagsBlock(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
include/bgbcc_autom.h:BCCX_Node *BGBJP_FunVarsList(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_DefName(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_DefName2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_VarDefinition(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn, int mfl);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_Definition(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_TypeArgExpression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_TypeArgs(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_TypeExpressionLit(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_TypeExpressionPE(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_TypeExpressionUnary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_TypeExpressionBinary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_TypeExpression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_CastTypeExpression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:int BGBJP_AddExpression(char *name, BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_autom.h:BCCX_Node *BGBJP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_autom.h:BCCX_Node *BGBJP_Number(BGBCP_ParseState *ctx, char *str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionFunction(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_Expression(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_Expression2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:void BGBJP_Warn(char *se, char *str, ...);
include/bgbcc_autom.h:void BGBJP_Error(char *se, char *str, ...);
include/bgbcc_autom.h:int BGBJP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_autom.h:BCCX_Node *BGBJP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_autom.h:int BGBJP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
include/bgbcc_autom.h:BCCX_Node *BGBJP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
include/bgbcc_autom.h:char *BGBJP_EatSemicolon(char *s);
include/bgbcc_autom.h:BCCX_Node *BGBJP_Statement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_BlockStatement(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_Block(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:BCCX_Node *BGBJP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
include/bgbcc_autom.h:void BGBCC_Warn(char *str, ...);
include/bgbcc_autom.h:void BGBCC_Error(char *str, ...);
include/bgbcc_autom.h:char *BGBCC_GenSym();
include/bgbcc_autom.h:char *BGBCC_GenSym2();
include/bgbcc_autom.h:void bgbcc_puts(BGBCC_State *ctx, char *str);
include/bgbcc_autom.h:void bgbcc_print(BGBCC_State *ctx, char *str, ...);
include/bgbcc_autom.h:int BGBCC_CompileSwitch(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:char *BGBCC_VarTypeString_FlattenExpr(BGBCC_State *ctx,char *dst, BCCX_Node *l, int fl);
include/bgbcc_autom.h:char *BGBCC_VarTypeString_FlattenName(BGBCC_State *ctx,char *t, char *s, int i);
include/bgbcc_autom.h:int BGBCC_VarTypeString_ModifierChar(BGBCC_State *ctx, int i);
include/bgbcc_autom.h:char *BGBCC_VarTypeString_FlattenModifiers(BGBCC_State *ctx,char *t, int fl);
include/bgbcc_autom.h:char *BGBCC_VarTypeString_FlattenModifiers2(BGBCC_State *ctx,char *t, int fl);
include/bgbcc_autom.h:char *BGBCC_VarTypeString(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_autom.h:char *BGBCC_VarTypeFlagsString(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_autom.h:void BGBCC_EmitVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_EmitVar2(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_EmitVar3(BGBCC_State *ctx, char *name, char *ty);
include/bgbcc_autom.h:void BGBCC_EmitVarProperty(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileVarProperty(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_CompileVarDummyP(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileVarStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileVarStatement2(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_CompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
include/bgbcc_autom.h:char *BGBCC_GenProtoSig(BGBCC_State *ctx,BCCX_Node *type, BCCX_Node *args);
include/bgbcc_autom.h:void BGBCC_EmitSigProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_autom.h:BCCX_Node *BGBCC_CompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_autom.h:void BGBCC_CompileStruct(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileUnion(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileClass(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileEnum(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_CompileSProto(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GetNodeAttribute(BGBCC_State *ctx,BCCX_Node *l, char *name);
include/bgbcc_autom.h:char *BGBCC_GetNodeAttributeString(BGBCC_State *ctx,BCCX_Node *l, char *name);
include/bgbcc_autom.h:void BGBCC_CompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileStructs(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_EmitVarValue(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_EmitVarValueR(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_EmitVarValueR2(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_autom.h:char *BGBCC_QualifyNameNS(BGBCC_State *ctx, char *name);
include/bgbcc_autom.h:void BGBCC_EmitTopArray(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_EmitTopVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_CompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:char *BGBCC_CompileModule(char *name, BCCX_Node *l);
include/bgbcc_autom.h:char *BGBCC_CIfy(char *s);
include/bgbcc_autom.h:void BGBCC_CompileAssign(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileExprList(BGBCC_State *ctx, BCCX_Node *lst);
include/bgbcc_autom.h:void BGBCC_CompileExprListReverse(BGBCC_State *ctx, BCCX_Node *lst);
include/bgbcc_autom.h:void BGBCC_CompileArgsList(BGBCC_State *ctx, BCCX_Node *lst);
include/bgbcc_autom.h:void BGBCC_CompileFuncall(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileExprT(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_CompileExprTail(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_EmitLabel(BGBCC_State *ctx, char *name);
include/bgbcc_autom.h:void BGBCC_CompileBreak(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_CompileContinue(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_CompileBreakFalse(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_CompileBreakTrue(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_CompileContinueFalse(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_CompileContinueTrue(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_CompileJmp(BGBCC_State *ctx, char *s);
include/bgbcc_autom.h:void BGBCC_CompileJmpFalse(BGBCC_State *ctx, char *s);
include/bgbcc_autom.h:void BGBCC_CompileJmpTrue(BGBCC_State *ctx, char *s);
include/bgbcc_autom.h:void BGBCC_CompileJmpCond(BGBCC_State *ctx, char *op, char *s);
include/bgbcc_autom.h:void BGBCC_CompileJCO(BGBCC_State *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn, char *s);
include/bgbcc_autom.h:void BGBCC_CompileJCT(BGBCC_State *ctx, BCCX_Node *l, char *s);
include/bgbcc_autom.h:void BGBCC_CompileJCF(BGBCC_State *ctx, BCCX_Node *l, char *s);
include/bgbcc_autom.h:int BGBCC_TryGetSizeofType(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_autom.h:int BGBCC_IsUnaryP(BCCX_Node *l, char *op);
include/bgbcc_autom.h:int BGBCC_IsBinaryP(BCCX_Node *l, char *op);
include/bgbcc_autom.h:int BGBCC_BoolExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_IsExpr(BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_BoolExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_WrapIntSuf(s64 i, char *suf);
include/bgbcc_autom.h:BCCX_Node *BGBCC_WrapRealSuf(double f, char *suf);
include/bgbcc_autom.h:BCCX_Node *BGBCC_WrapInt(s64 i);
include/bgbcc_autom.h:BCCX_Node *BGBCC_WrapReal(double f);
include/bgbcc_autom.h:int BGBCC_IsIntP(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_IsRealP(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_Boolify(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:char *BGBCC_BinaryTySuf(BGBCC_State *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn);
include/bgbcc_autom.h:BCCX_Node *BGBCC_ReduceForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_SetLine(BGBCC_State *ctx, BCCX_Node *l,char *fn, int ln);
include/bgbcc_autom.h:BCCX_Node *BGBCC_ReduceStatementForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_ReduceExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_ReduceStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_InferTypeBase(BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_InferIsIntP(BCCX_Node *t);
include/bgbcc_autom.h:int BGBCC_InferIsLongP(BCCX_Node *t);
include/bgbcc_autom.h:int BGBCC_InferIsFloatP(BCCX_Node *t);
include/bgbcc_autom.h:int BGBCC_InferIsDoubleP(BCCX_Node *t);
include/bgbcc_autom.h:int BGBCC_InferIsNumP(BCCX_Node *t);
include/bgbcc_autom.h:BCCX_Node *BGBCC_InferIsInt(BCCX_Node *t);
include/bgbcc_autom.h:BCCX_Node *BGBCC_InferIsLong(BCCX_Node *t);
include/bgbcc_autom.h:BCCX_Node *BGBCC_InferIsNum(BCCX_Node *t);
include/bgbcc_autom.h:BCCX_Node *BGBCC_InferForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_InferExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_InferExprClean(BGBCC_State *ctx, BCCX_Node *l, int *cp);
include/bgbcc_autom.h:int BGBCC_GuessCloseForm(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_GuessCloseExpr(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:int BGBCC_GuessCloseBlock(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_MetaCompileStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_MetaEmitVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_MetaEmitVar2(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_MetaCompileVarStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_MetaCompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
include/bgbcc_autom.h:char *BGBCC_GenProtoSig(BGBCC_State *ctx,BCCX_Node *type, BCCX_Node *args);
include/bgbcc_autom.h:void BGBCC_MetaEmitSigProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_autom.h:BCCX_Node *BGBCC_MetaCompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_autom.h:void BGBCC_MetaCompileStruct(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_MetaCompileUnion(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_MetaCompileEnum(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_MetaCompileSProto(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_MetaCompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_MetaCompileStructs(BGBCC_State *ctx);
include/bgbcc_autom.h:void BGBCC_MetaEmitVarValue(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_MetaEmitVarValueR(BGBCC_State *ctx, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_MetaEmitTopArray(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_MetaEmitTopVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
include/bgbcc_autom.h:void BGBCC_MetaCompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:char *BGBCC_MetaCompileModule(char *name, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileStatementList(BGBCC_State *ctx, char *tag,BCCX_Node *lst);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileStatementBody(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileType(BGBCC_State *ctx, BCCX_Node *ty);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileVar(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileStruct(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileUnion(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileSProto(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:void BGBCC_GAstCompileStructs(BGBCC_State *ctx);
include/bgbcc_autom.h:BCCX_Node *BGBCC_GAstCompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
include/bgbcc_autom.h:byte *BGBCC_GAstCompileModule(char *name, BCCX_Node *l, int *rsz);
include/bgbcc_autom.h:BCCX_Attr *BCCX_LookupAttr(BCCX_Node *n, char *var);
include/bgbcc_autom.h:BCCX_Attr *BCCX_LookupAttrNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_autom.h:BCCX_Attr *BCCX_NewAttr();
include/bgbcc_autom.h:BCCX_Attr *BCCX_FetchAttr(BCCX_Node *n, char *var);
include/bgbcc_autom.h:BCCX_Attr *BCCX_FetchAttrNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_autom.h:char *BCCX_Get(BCCX_Node *n, char *var);
include/bgbcc_autom.h:char *BCCX_Get_SI(BCCX_Node *n, char *var);
include/bgbcc_autom.h:int BCCX_GetInt(BCCX_Node *n, char *var);
include/bgbcc_autom.h:double BCCX_GetFloat(BCCX_Node *n, char *var);
include/bgbcc_autom.h:char *BCCX_GetNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_autom.h:int BCCX_GetIntNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_autom.h:double BCCX_GetFloatNS(BCCX_Node *n, char *ns, char *var);
include/bgbcc_autom.h:void BCCX_Set(BCCX_Node *n, char *var, char *val);
include/bgbcc_autom.h:void BCCX_SetInt(BCCX_Node *n, char *var, int val);
include/bgbcc_autom.h:void BCCX_SetFloat(BCCX_Node *n, char *var, double val);
include/bgbcc_autom.h:void BCCX_SetNS(BCCX_Node *n, char *ns, char *var, char *val);
include/bgbcc_autom.h:void BCCX_SetIntNS(BCCX_Node *n, char *ns, char *var, int val);
include/bgbcc_autom.h:void BCCX_SetFloatNS(BCCX_Node *n, char *ns, char *var, double val);
include/bgbcc_autom.h:char *BCCX_NSURI(BCCX_Node *n, char *ns);
include/bgbcc_autom.h:char *BCCX_URINS(BCCX_Node *n, char *uri);
include/bgbcc_autom.h:char *BCCX_GetURI(BCCX_Node *n, char *uri, char *var);
include/bgbcc_autom.h:int BCCX_GetIntURI(BCCX_Node *n, char *uri, char *var);
include/bgbcc_autom.h:double BCCX_GetFloatURI(BCCX_Node *n, char *uri, char *var);
include/bgbcc_autom.h:void BCCX_SetURI(BCCX_Node *n, char *uri, char *var, char *val);
include/bgbcc_autom.h:void BCCX_SetIntURI(BCCX_Node *n, char *uri, char *var, int val);
include/bgbcc_autom.h:void BCCX_SetFloatURI(BCCX_Node *n, char *uri, char *var, double val);
include/bgbcc_autom.h:BCCX_Node *BCCX_New(char *tag);
include/bgbcc_autom.h:BCCX_Node *BCCX_NewNS(char *ns, char *tag);
include/bgbcc_autom.h:BCCX_Node *BCCX_NewText(char *text);
include/bgbcc_autom.h:void BCCX_Add(BCCX_Node *parent, BCCX_Node *child);
include/bgbcc_autom.h:BCCX_Node *BCCX_AddEnd(BCCX_Node *lst, BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BCCX_AddEnd2(BCCX_Node *fst, BCCX_Node **rlst, BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BCCX_New1(char *tag, BCCX_Node *a);
include/bgbcc_autom.h:BCCX_Node *BCCX_New2(char *tag, BCCX_Node *a, BCCX_Node *b);
include/bgbcc_autom.h:BCCX_Node *BCCX_New3(char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c);
include/bgbcc_autom.h:BCCX_Node *BCCX_New4(char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
include/bgbcc_autom.h:BCCX_Node *BCCX_New1NS(char *ns, char *tag, BCCX_Node *a);
include/bgbcc_autom.h:BCCX_Node *BCCX_New2NS(char *ns, char *tag, BCCX_Node *a, BCCX_Node *b);
include/bgbcc_autom.h:BCCX_Node *BCCX_New3NS(char *ns, char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c);
include/bgbcc_autom.h:BCCX_Node *BCCX_New4NS(char *ns, char *tag,BCCX_Node *a, BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
include/bgbcc_autom.h:int BCCX_NodeP(BCCX_Node *n);
include/bgbcc_autom.h:int BCCX_TextP(BCCX_Node *n);
include/bgbcc_autom.h:int BCCX_LeafP(BCCX_Node *n);
include/bgbcc_autom.h:int BCCX_ChildP(BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BCCX_Next(BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BCCX_Prev(BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BCCX_Parent(BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BCCX_Child(BCCX_Node *n);
include/bgbcc_autom.h:char *BCCX_NS(BCCX_Node *n);
include/bgbcc_autom.h:char *BCCX_URI(BCCX_Node *n);
include/bgbcc_autom.h:char *BCCX_Tag(BCCX_Node *n);
include/bgbcc_autom.h:char *BCCX_Text(BCCX_Node *n);
include/bgbcc_autom.h:void BCCX_SetTag(BCCX_Node *n, char *s);
include/bgbcc_autom.h:int BCCX_TagIsP(BCCX_Node *n, char *str);
include/bgbcc_autom.h:int BCCX_AttrIsP(BCCX_Node *n, char *var, char *val);
include/bgbcc_autom.h:int BCCX_TagAttrIsP(BCCX_Node *n, char *tag, char *var, char *val);
include/bgbcc_autom.h:BCCX_Node *BCCX_FindNextTag(BCCX_Node *last, char *tag);
include/bgbcc_autom.h:BCCX_Node *BCCX_FindNextAttr(BCCX_Node *last, char *var, char *val);
include/bgbcc_autom.h:BCCX_Node *BCCX_FindNextTagAttr(BCCX_Node *last,char *tag, char *var, char *val);
include/bgbcc_autom.h:BCCX_Node *BCCX_FindTag(BCCX_Node *parent, char *tag);
include/bgbcc_autom.h:BCCX_Node *BCCX_FindAttr(BCCX_Node *parent, char *var, char *val);
include/bgbcc_autom.h:BCCX_Node *BCCX_FindTagAttr(BCCX_Node *parent, char *tag, char *var, char *val);
include/bgbcc_autom.h:BCCX_Node *BCCX_Fetch(BCCX_Node *parent, char *tag);
include/bgbcc_autom.h:BCCX_Node *BCCX_Clone(BCCX_Node *n);
include/bgbcc_autom.h:BCCX_Node *BCCX_CloneList(BCCX_Node *n);
include/bgbcc_autom.h:void BCCX_Unlink(BCCX_Node *n);
include/bgbcc_autom.h:char *BCCX_PrintText(char *s, char *t);
include/bgbcc_autom.h:void BCCX_PrintBufSpecial(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbcc_autom.h:void BCCX_PrintBuf(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbcc_autom.h:void BCCX_DumpFD(FILE *fd, BCCX_Node *node);
include/bgbcc_autom.h:void BCCX_PrintFD(FILE *fd, BCCX_Node *node);
include/bgbcc_autom.h:char *BCCX_DumpStr(char *buf, BCCX_Node *node);
include/bgbcc_autom.h:char *BCCX_PrintStr(char *buf, BCCX_Node *node);
include/bgbcc_autom.h:void BCCX_Print(BCCX_Node *node);
include/bgbcc_autom.h:BCCX_ReadStream BCCX_NewReadStreamBuf(char *buf);
include/bgbcc_autom.h:BCCX_ReadPos BCCX_GetPos(BCCX_ReadStream strm);
include/bgbcc_autom.h:void BCCX_SetPos(BCCX_ReadStream strm, BCCX_ReadPos pos);
include/bgbcc_autom.h:int BCCX_PeekChar(BCCX_ReadStream strm);
include/bgbcc_autom.h:int BCCX_ReadChar(BCCX_ReadStream strm);
include/bgbcc_autom.h:int BCCX_PeekCharIdx(BCCX_ReadStream strm, int idx);
include/bgbcc_autom.h:int BCCX_ParseEatWhite(BCCX_ReadStream strm);
include/bgbcc_autom.h:int BCCX_ParseSpecialP(BCCX_ReadStream strm);
include/bgbcc_autom.h:int BCCX_ParseContSpecialP(BCCX_ReadStream strm);
include/bgbcc_autom.h:char *BCCX_ParseToken(BCCX_ReadStream strm, int *ty);
include/bgbcc_autom.h:char *BCCX_PeekToken(BCCX_ReadStream strm, int *ty);
include/bgbcc_autom.h:char *BCCX_ParseText(BCCX_ReadStream strm);
include/bgbcc_autom.h:BCCX_Attr *BCCX_ParseOpts(BCCX_ReadStream strm);
include/bgbcc_autom.h:BCCX_Node *BCCX_ParseTag(BCCX_ReadStream strm, int *rgrp);
include/bgbcc_autom.h:BCCX_Node *BCCX_ParseExprR(BCCX_ReadStream strm, int *rgrp);
include/bgbcc_autom.h:BCCX_Node *BCCX_ParseExpr(BCCX_ReadStream strm);
include/bgbcc_autom.h:BCCX_Node *BCCX_ParseExprStr(char *str);
include/bgbcc_autom.h:void *sbxe_malloc(int sz);
include/bgbcc_autom.h:void *sbxe_tmalloc(char *ty, int sz);
include/bgbcc_autom.h:void sbxe_free(void *ptr);
include/bgbcc_autom.h:int SBXE_WriteNodeList(byte *buf, BCCX_Node *expr);
include/bgbcc_autom.h:BCCX_Node *SBXE_ReadNodeList(byte *buf);
include/bgbcc_autom.h:void BGBCC_DieError();
include/bgbcc_autom.h:void BGBCC_DieFatal();
include/bgbcc_autom.h:void BGBCC_CleanupAll();
include/bgbcc_autom.h:void *bgbcc_tmalloc(char *ty, int sz);
include/bgbcc_autom.h:void *bgbcc_malloc(int sz);
include/bgbcc_autom.h:void *bgbcc_tmalloc2(char *ty, int sz);
include/bgbcc_autom.h:void *bgbcc_malloc2(int sz);
include/bgbcc_autom.h:void bgbcc_free(void *p);
include/bgbcc_autom.h:char *bgbcc_strdup(char *str);
include/bgbcc_autom.h:int bgbcc_strdup_i(char *str);
include/bgbcc_autom.h:char *bgbcc_strtab_i(int i);
include/bgbcc_autom.h:char *bgbcc_strdup(char *str);
include/bgbcc_autom.h:void *bgbcc_ralloc(int sz);
include/bgbcc_autom.h:char *bgbcc_rstrdup(char *s);
include/bgbcc_autom.h:char **bgbcc_split(char *s);
include/bgbcc_autom.h:char *bgbcc_rstradd(char *s0, char *s1);
include/bgbcc_autom.h:char *bgbcc_rstradd2(char *s0, char *s1, char *s2);
include/bgbcc_autom.h:char *bgbcc_rstradd3(char *s0, char *s1, char *s2, char *s3);
include/bgbcc_autom.h:void *bgbcc_neword(char **tab);
include/bgbcc_autom.h:int bgbcc_strord(char *str, void *tab);
include/bgbcc_autom.h:int BGBCC_GetOrdinal(char *str);
include/bgbcc_autom.h:int BGBCC_CheckOrdinalFlag(int i, int ty);
include/bgbcc_autom.h:int BGBCC_GetOrdinalLang(char *str, int lang);
include/bgbcc_autom.h:int BGBCC_GetOrdinalLangType(char *str, int lang, int ty);
include/bgbcc_autom.h:double BGBCC_ParseNumber(char *str);
include/bgbcc_autom.h:BGBDYC_MetaNode *DYLL_MetaPath_LookupNodeR(BGBDYC_MetaNode *node, char *path);
include/bgbcc_autom.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
include/bgbcc_autom.h:int DYLL_MetaPath_AdjustBiDepth(BGBDYC_MetaBiNode *node);
include/bgbcc_autom.h:int DYLL_MetaPath_BalanceBiNode(BGBDYC_MetaBiNode *node);
include/bgbcc_autom.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR2(BGBDYC_MetaBiNode *node, char *name);
include/bgbcc_autom.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
include/bgbcc_autom.h:BGBDYC_MetaNode *DYLL_MetaPath_LookupNode(char *path);
include/bgbcc_autom.h:BGBDYC_MetaNode *DYLL_MetaPath_GetNode(char *path);
include/bgbcc_autom.h:BGBDYC_MetaLeaf *DYLL_MetaPath_LookupNodeLeaf(BGBDYC_MetaNode *node, char *key);
include/bgbcc_autom.h:BGBDYC_MetaLeaf *DYLL_MetaPath_GetNodeLeaf(BGBDYC_MetaNode *node, char *key);
include/bgbcc_autom.h:void DYLL_MetaPath_SplitKey(char *path, char *nb, char *kb);
include/bgbcc_autom.h:char *DYLL_MetaPath_LookupKey(char *path);
include/bgbcc_autom.h:void DYLL_MetaPath_BindKey(char *path, char *val);
include/bgbcc_autom.h:void DYLL_MetaPath_LoadDB(char *name);
include/bgbcc_autom.h:void DYLL_MetaPath_SaveNode(FILE *fd,BGBDYC_MetaNode *node, char *path, int ind);
include/bgbcc_autom.h:void DYLL_MetaPath_SaveDB(char *name);
include/bgbcc_autom.h:void dyllMetaInit();
include/bgbcc_autom.h:void dyllMetaCommit();
include/bgbcc_autom.h:void dyllMetaBindKey(char *key, char *val);
include/bgbcc_autom.h:char *dyllMetaLookupKey(char *key);
include/bgbcc_autom.h:BGBCC_API int BGBCC_BindSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_autom.h:int BGBCC_BindTypeSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_autom.h:int BGBCC_BindVarSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_autom.h:int BGBCC_BindVarInfo(BGBCC_State *ctx, char *name, char *key, char *val);
include/bgbcc_autom.h:int BGBCC_BindTypeInfo(BGBCC_State *ctx, char *name, char *key, char *val);
include/bgbcc_autom.h:int BGBCC_BindDyTypeSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_autom.h:char *BGBCP_LookupSig(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:char *BGBCP_LookupTypeSig(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:int BGBCC_BindStructSig(BGBCC_State *ctx, char *name, char *sig);
include/bgbcc_autom.h:int BGBCC_BindStructInfo(BGBCC_State *ctx, char *name, char *key, char *val);
include/bgbcc_autom.h:int BGBCC_BindStructInfoIdx(BGBCC_State *ctx,char *name, char *key, int idx, char *val);
include/bgbcc_autom.h:int BGBCC_BindFieldSig(BGBCC_State *ctx, char *cls, char *name, char *sig);
include/bgbcc_autom.h:int BGBCC_BindFieldInfo(BGBCC_State *ctx,char *cls, char *name, char *key, char *val);
include/bgbcc_autom.h:int BGBCC_BindStructInfoI(BGBCC_State *ctx,char *name, char *key, int val);
include/bgbcc_autom.h:int BGBCC_BindFieldInfoI(BGBCC_State *ctx,char *cls, char *name, char *key, int val);
include/bgbcc_autom.h:char *BGBCP_LookupPPKey(BGBCP_ParseState *ctx, char *name);
include/bgbcc_autom.h:int BGBCC_BindPPKey(BGBCP_ParseState *ctx, char *name, char *sig);
include/bgbcc_autom.h:int BGBCC_StoreTextFile(char *name, char *buf);
include/bgbcc_autom.h:char *bgbcc_loadfile(char *name, int *rsz);
include/bgbcc_autom.h:int BGBCC_LoadCMeta(char *name);
include/bgbcc_autom.h:int BGBCC_GetArch();
include/bgbcc_autom.h:int BGBCC_InitEnv(int argc, char **argv, char **env);
include/bgbcc_autom.h:int BGBCC_Init();
include/bgbcc_autom.h:void ccAddInclude(char *path);
include/bgbcc_autom.h:void ccAddLibrary(char *path);
include/bgbcc_autom.h:void ccAddSource(char *path);
include/bgbcc_autom.h:void ccAddDefineString(char *str);
include/bgbcc_autom.h:int main(int argc, char *argv[], char **env);
include/bgbdylli.h:void *(*GetAddr)(char *sym);
include/bgbdylli.h:char *(*GetAddrName)(void *ptr);
include/bgbdylli.h:void (*SetAddr)(char *sym, void *ptr);
include/bgbdylli.h:void *(*GetPtr)(char *sym);
include/bgbdylli.h:void (*SetPtr)(char *sym, void *v);
include/bgbdylli.h:int (*GetInt)(char *sym);
include/bgbdylli.h:void (*SetInt)(char *sym, int v);
include/bgbdylli.h:s64 (*GetLong)(char *sym);
include/bgbdylli.h:void (*SetLong)(char *sym, s64 v);
include/bgbdylli.h:float (*GetFloat)(char *sym);
include/bgbdylli.h:void (*SetFloat)(char *sym, float v);
include/bgbdylli.h:double (*GetDouble)(char *sym);
include/bgbdylli.h:void (*SetDouble)(char *sym, double v);
include/bgbdylli.h:dyt (*GetDynamic)(char *sym);
include/bgbdylli.h:void (*SetDynamic)(char *sym, dyt val);
include/bgbdylli.h:dyt (*NewEnv)(dyt super);
include/bgbdylli.h:void (*EnvBindAddr)(dyt env, char *name, void *addr);
include/bgbdylli.h:void (*EnvBindAddrSig)(dyt env, char *name, char *sig, void *addr);
include/bgbdylli.h:void (*EnvSetAddr)(dyt env, char *name, void *addr);
include/bgbdylli.h:void *(*EnvGetAddr)(dyt env, char *name);
include/bgbdylli.h:char *(*EnvGetSig)(dyt env, char *name);
include/bgbdylli.h:void *(*EnvAllocVar)(dyt env, char *name, char *sig);
include/bgbdylli.h:dyt (*ThunkEnv)(dyt fcn);
include/bgbdylli.h:void (*ThunkBindAddr)(dyt fcn, char *name, void *addr);
include/bgbdylli.h:void (*ThunkBindAddrSig)(dyt fcn, char *name, char *sig, void *addr);
include/bgbdylli.h:void (*ThunkSetAddr)(dyt fcn, char *name, void *addr);
include/bgbdylli.h:void *(*ThunkGetAddr)(dyt fcn, char *name);
include/bgbdylli.h:char *(*ThunkGetSig)(dyt fcn, char *name);
include/bgbdylli.h:dyt (*AsmThunk)(char *buf);
include/bgbdylli.h:dyt (*AsmThunkEnv)(char *buf, dyt env);
include/bgbdylli.h:dyt (*AsmThunkSuperEnv)(char *buf, dyt senv);
include/bgbdylli.h:dyt (*AsmThunkInline)(char *buf);
include/bgbdylli.h:dyt (*AsmThunkInlineEnv)(char *buf, dyt env);
include/bgbdylli.h:dyt (*AsmThunkInlineSuperEnv)(char *buf, dyt senv);
include/bgbdylli.h:void (*AsmBegin)();
include/bgbdylli.h:void *(*AsmEnd)();
include/bgbdylli.h:void (*AsmBeginThunkInline)();
include/bgbdylli.h:void *(*AsmEndThunkInline)();
include/bgbdylli.h:void (*AsmPuts)(char *str);
include/bgbdylli.h:void (*AsmPrintv)(char *str, va_list lst);
include/bgbdylli.h:void (*AsmPrint)(char *str, ...);
include/bgbdylli.h:int (*AsmRegisterLinkMeta)(char *name, void *(*fcn)(char *sym, char *name, char **args));
include/bgbdylli.h:int (*AsmRegisterLinkNotify)(char *name, void (*fcn)(char *sym, char *name, char **args, void *ptr));
include/bgbdylli.h:char *(*ComposeLinkMetaName)(char *name, char **args);
include/bgbdylli.h:char *(*ComposeLinkNotifyName)(char *name, char **args);
include/bgbdylli.h:char *(*ComposeLinkMetaName0)(char *name);
include/bgbdylli.h:char *(*ComposeLinkMetaName1)(char *name, char *ar0);
include/bgbdylli.h:char *(*ComposeLinkMetaName2)(char *name, char *ar0, char *ar1);
include/bgbdylli.h:char *(*ComposeLinkMetaName3)(char *name, char *ar0, char *ar1, char *ar2);
include/bgbdylli.h:char *(*ComposeLinkMetaName4)(char *name,char *ar0, char *ar1, char *ar2, char *ar3);
include/bgbdylli.h:char *(*GetAddrSig)(void *fcn);
include/bgbdylli.h:char *(*GetNameSig)(char *name);
include/bgbdylli.h:void *(*ApplyPtrV)(void *fcn, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrU)(void *fcn, void **args);
include/bgbdylli.h:int (*ApplyPtrVi)(void *fcn, va_list lst);
include/bgbdylli.h:s64 (*ApplyPtrVl)(void *fcn, va_list lst);
include/bgbdylli.h:float (*ApplyPtrVf)(void *fcn, va_list lst);
include/bgbdylli.h:double (*ApplyPtrVd)(void *fcn, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrVp)(void *fcn, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrObjV)(void *fcn, void *obj, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrObjU)(void *fcn, void *obj, void **args);
include/bgbdylli.h:void *(*ApplyPtrSigV)(void *fcn, char *sig, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrSigU)(void *fcn, char *sig, void **args);
include/bgbdylli.h:int (*ApplyPtrSigVi)(void *fcn, char *sig, va_list lst);
include/bgbdylli.h:s64 (*ApplyPtrSigVl)(void *fcn, char *sig, va_list lst);
include/bgbdylli.h:float (*ApplyPtrSigVf)(void *fcn, char *sig, va_list lst);
include/bgbdylli.h:double (*ApplyPtrSigVd)(void *fcn, char *sig, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrSigVp)(void *fcn, char *sig, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrSigObjV)(void *fcn, char *sig,void *obj, va_list lst);
include/bgbdylli.h:void *(*ApplyPtrSigObjU)(void *fcn, char *sig,void *obj, void **args);
include/bgbdylli.h:void *(*WrapClosure)(void *fcn, void *data, char *sig);
include/bgbdylli.h:int (*LoadLibrary)(char *name);
include/bgbdylli.h:void (*MetaInit)();
include/bgbdylli.h:void (*MetaCommit)();
include/bgbdylli.h:int (*MetaLoadDB)(char *name);
include/bgbdylli.h:int (*MetaSaveDB)(char *name);
include/bgbdylli.h:void (*MetaBindKey)(char *key, char *val);
include/bgbdylli.h:char *(*MetaLookupKey)(char *key);
include/bgbdylli.h:void *(*GetObject)(char *name);
include/bgbdylli.h:void (*SetObject)(char *name, void *value);
include/bgbdylli.h:int (*SigQuickSize)(char *sig);
include/bgbdylli.h:int (*SigAlignSize)(char *sig);
include/bgbdylli.h:char *(*SigSizeAlign)(char *sig, int *rsz, int *ral);
include/bgbdylli.h:char *(*SigNext)(char *sig);
include/bgbdylli.h:int (*SigSizeListEsig)(char *sig, char **esig, int *algn);
include/bgbdylli.h:int (*SigSizeList)(char *sig);
include/bgbdylli.h:dyt (*GetVarSig)(void *var, char *sig);
include/bgbdylli.h:void (*SetVarSig)(void *var, char *sig, dyt val);
include/bgbdylli.h:char *(*SigRet)(char *sig);
include/bgbdylli.h:int (*CheckCallSig)(char *fsig, char *sig);
include/bgbdylli.h:char *(*GenSym)();
include/bgbdylli.h:dyt (*RawFunc)(char *sig, void *fcn);
include/bgbdylli.h:dyt (*RawClose)(char *sig, void *fcn, void *data);
include/bgbdylli.h:dyt (*RawMethod)(char *sig, void *fcn);
include/bgbdylli.h:dyt (*RawMethodData)(char *sig, void *fcn, void *data);
include/bgbdylli.h:dyt (*RawStaticMethod)(char *sig, void *fcn);
include/bgbdylli.h:dyt (*RawStaticMethodData)(char *sig, void *fcn, void *data);
include/bgbdylli.h:int (*RawFuncP)(dyt obj);
include/bgbdylli.h:char *(*GenSym)();
include/bgbdylli.h:char *(*ToString)(dyt obj);
include/bgbdylli.h:void *(*ConvObjCFunc)(dyt obj, char *sig);
include/bgbdylli.h:dyt (*ApplyMethod)(dyt obj, dyt mth, dyt *args, int nargs);
include/bgbdylli.h:dyt (*ApplyMethodLst)(dyt obj, dyt mth, dyt args);
include/bgbdylli.h:void *(*ApplyMethodU)(dyt obj, dyt mth,char *sig, void **args, int szargs);
include/bgbdylli.h:void *(*ApplyMethodV)(dyt obj, dyt mth,char *sig, va_list args);
include/bgbdylli.h:void (*TypeGetSlot)(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdylli.h:void (*TypeSetSlot)(char *ty, dyt (*fcn)(dyt, dyt, dyt));
include/bgbdylli.h:void (*TypeNextSlot)(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdylli.h:void (*TypeTrySetSlot)(char *ty, dyt (*fcn)(dyt, dyt, dyt));
include/bgbdylli.h:void (*TypeGetDelegate)(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdylli.h:void (*TypeSetDelegate)(char *ty, dyt (*fcn)(dyt, dyt, dyt));
include/bgbdylli.h:void (*TypeNextDelegate)(char *ty, dyt (*fcn)(dyt, dyt));
include/bgbdylli.h:void (*TypeCallMethod)(char *ty, dyt (*fcn)(dyt, dyt, dyt *, int));
include/bgbdylli.h:void (*TypeApply)(char *ty, dyt (*fcn)(dyt, dyt *, int));
include/bgbdylli.h:void (*TypeApplyObj)(char *ty, dyt (*fcn)(dyt, dyt, dyt *, int));
include/bgbdylli.h:void (*TypeToString)(char *ty, char *(*fcn)(dyt));
include/bgbdylli.h:dyt (*Object)();
include/bgbdylli.h:dyt (*ObjectParent)(dyt parent);
include/bgbdylli.h:int (*Objectp)(dyt obj);
include/bgbdylli.h:int (*ObjectP)(dyt obj);
include/bgbdylli.h:dyt (*Bind)(dyt obj, char *var, dyt val);
include/bgbdylli.h:dyt (*TrySet)(dyt obj, char *var, dyt val);
include/bgbdylli.h:dyt (*Get)(dyt obj, char *sym);
include/bgbdylli.h:int (*Geti)(dyt obj, char *sym);
include/bgbdylli.h:s64 (*Getl)(dyt obj, char *sym);
include/bgbdylli.h:double (*Getf)(dyt obj, char *sym);
include/bgbdylli.h:double (*Getd)(dyt obj, char *sym);
include/bgbdylli.h:void (*Get2fv)(dyt obj, char *sym, float *v);
include/bgbdylli.h:void (*Get3fv)(dyt obj, char *sym, float *v);
include/bgbdylli.h:void (*Get4fv)(dyt obj, char *sym, float *v);
include/bgbdylli.h:void (*Get2dv)(dyt obj, char *sym, double *v);
include/bgbdylli.h:void (*Get3dv)(dyt obj, char *sym, double *v);
include/bgbdylli.h:void (*Get4dv)(dyt obj, char *sym, double *v);
include/bgbdylli.h:char *(*Gets)(dyt obj, char *sym);
include/bgbdylli.h:dyt (*Set)(dyt obj, char *sym, dyt val);
include/bgbdylli.h:void (*Seti)(dyt obj, char *sym, int val);
include/bgbdylli.h:void (*Setl)(dyt obj, char *sym, s64 val);
include/bgbdylli.h:void (*Setf)(dyt obj, char *sym, double val);
include/bgbdylli.h:void (*Setd)(dyt obj, char *sym, double val);
include/bgbdylli.h:void (*Set2f)(dyt obj, char *sym, double x, double y);
include/bgbdylli.h:void (*Set3f)(dyt obj, char *sym, double x, double y, double z);
include/bgbdylli.h:void (*Set4f)(dyt obj, char *sym, double x, double y, double z, double w);
include/bgbdylli.h:void (*Set2fv)(dyt obj, char *sym, float *v);
include/bgbdylli.h:void (*Set3fv)(dyt obj, char *sym, float *v);
include/bgbdylli.h:void (*Set4fv)(dyt obj, char *sym, float *v);
include/bgbdylli.h:void (*Set2dv)(dyt obj, char *sym, double *v);
include/bgbdylli.h:void (*Set3dv)(dyt obj, char *sym, double *v);
include/bgbdylli.h:void (*Set4dv)(dyt obj, char *sym, double *v);
include/bgbdylli.h:void (*Sets)(dyt obj, char *sym, char *val);
include/bgbdylli.h:dyt (*GetIdx)(dyt obj, int idx);
include/bgbdylli.h:dyt (*SetIdx)(dyt obj, int idx, dyt val);
include/bgbdylli.h:dyt (*GetKey)(dyt obj, dyt key);
include/bgbdylli.h:dyt (*SetKey)(dyt obj, dyt key, dyt val);
include/bgbdylli.h:dyt (*GetDelegate)(dyt obj, char *sym);
include/bgbdylli.h:void (*SetDelegate)(dyt obj, char *sym, dyt val);
include/bgbdylli.h:dyt (*GetParent)(dyt obj);
include/bgbdylli.h:void (*SetParent)(dyt obj, dyt val);
include/bgbdylli.h:void (*BindMethod)(dyt obj, char *sym, dyt mth);
include/bgbdylli.h:void (*DefMethod)(dyt obj, char *sym,dyt (*fcn)(dyt self, dyt *args, int nargs));
include/bgbdylli.h:void (*DefMethodN)(dyt obj, char *sym, dyt (*fcn)(dyt self,dyt rest));
include/bgbdylli.h:dyt (*Call)(dyt obj, char *sym, dyt *args, int nargs);
include/bgbdylli.h:dyt (*CallN)(dyt obj, char *sym, dyt args);
include/bgbdylli.h:dyt (*CallSig)(dyt obj, char *sym, char *sig, ...);
include/bgbdylli.h:dyt (*LookupMethodSig)(dyt obj, char *name, char *sig);
include/bgbdylli.h:dyt (*add)(dyt a, dyt b);
include/bgbdylli.h:dyt (*sub)(dyt a, dyt b);
include/bgbdylli.h:dyt (*mul)(dyt a, dyt b);
include/bgbdylli.h:dyt (*div)(dyt a, dyt b);
include/bgbdylli.h:dyt (*mod)(dyt a, dyt b);
include/bgbdylli.h:dyt (*and)(dyt a, dyt b);
include/bgbdylli.h:dyt (*or)(dyt a, dyt b);
include/bgbdylli.h:dyt (*xor)(dyt a, dyt b);
include/bgbdylli.h:dyt (*shl)(dyt a, dyt b);
include/bgbdylli.h:dyt (*shr)(dyt a, dyt b);
include/bgbdylli.h:dyt (*exp)(dyt a, dyt b);
include/bgbdylli.h:dyt (*neg)(dyt a);
include/bgbdylli.h:dyt (*not)(dyt a);
include/bgbdylli.h:dyt (*lnot)(dyt a);
include/bgbdylli.h:int (*eqp)(dyt a, dyt b);
include/bgbdylli.h:int (*neqp)(dyt a, dyt b);
include/bgbdylli.h:int (*ltp)(dyt a, dyt b);
include/bgbdylli.h:int (*gtp)(dyt a, dyt b);
include/bgbdylli.h:int (*lep)(dyt a, dyt b);
include/bgbdylli.h:int (*gep)(dyt a, dyt b);
include/bgbdylli.h:int (*truep)(dyt a);
include/bgbdylli.h:int (*falsep)(dyt a);
include/bgbdylli.h:dyt (*sqr)(dyt a);
include/bgbdylli.h:dyt (*sqrt)(dyt a);
include/bgbdylli.h:dyt (*cons)(dyt a, dyt b);
include/bgbdylli.h:int (*consp)(dyt p);
include/bgbdylli.h:int (*listp)(dyt lst);
include/bgbdylli.h:int (*listlen)(dyt lst);
include/bgbdylli.h:void (*FreeCons)(dyt p);
include/bgbdylli.h:void (*FreeList)(dyt p);
include/bgbdylli.h:int (*FormIsP)(dyt lst, char *str);
include/bgbdylli.h:dyt (*car)(dyt p);
include/bgbdylli.h:dyt (*cdr)(dyt p);
include/bgbdylli.h:void (*setcar)(dyt p, dyt v);
include/bgbdylli.h:void (*setcdr)(dyt p, dyt v);
include/bgbdylli.h:dyt (*reverse)(dyt lst);
include/bgbdylli.h:dyt (*nreverse)(dyt lst);
include/bgbdylli.h:dyt (*nappend)(dyt la, dyt lb);
include/bgbdylli.h:dyt (*ListToArray)(dyt lst);
include/bgbdylli.h:dyt (*listcopy)(dyt lst);
include/bgbdylli.h:dyt (*append)(dyt la, dyt lb);
include/bgbdylli.h:dyt (*array)(int cnt);
include/bgbdylli.h:int (*arrayp)(dyt p);
include/bgbdylli.h:dyt (*arrayidx)(dyt p, int idx);
include/bgbdylli.h:void (*arraysetidx)(dyt p, int idx, dyt q);
include/bgbdylli.h:dyt *(*arrayv)(dyt p);
include/bgbdylli.h:int (*arraysz)(dyt p);
include/bgbdylli.h:dyt (*WrapArray)(dyt *args, int cnt);
include/bgbdylli.h:void (*PrintBuf)(dyt n, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbdylli.h:void (*DumpFD)(FILE *fd, dyt n);
include/bgbdylli.h:void (*PrintFD)(FILE *fd, dyt n);
include/bgbdylli.h:void (*DumpGCP)(dyt n);
include/bgbdylli.h:void (*PrintGCP)(dyt n);
include/bgbdylli.h:char *(*DumpStr)(char *buf, dyt n);
include/bgbdylli.h:char *(*PrintStr)(char *buf, dyt n);
include/bgbdylli.h:void (*Print)(dyt n);
include/bgbdylli.h:dyt (*sParseFromString)(char *s);
include/bgbdylli.h:dyt (*sParseMultiFromString)(char *s);
include/bgbdylli.h:void (*sDumpFD)(FILE *fd, dyt n);
include/bgbdylli.h:void (*sPrintFD)(FILE *fd, dyt n);
include/bgbdylli.h:char *(*sDumpStr)(char *buf, dyt n);
include/bgbdylli.h:char *(*sPrintStr)(char *buf, dyt n);
include/bgbdylli.h:void (*sPrint)(dyt n);
include/bgbdylli.h:void (*sPrintln)(dyt n);
include/bgbdylli.h:void (*dy_init)(void *base);
include/bgbdylli.h:void (*dy_init2)(int (*fcn)());
include/bgbdylli.h:void (*AddLogHook)(void (*fcn)(char *str));
include/bgbdylli.h:void (*AddTypeHook)(char *(*fcn)(void *p));
include/bgbdylli.h:char *(*gettype)(dyt p);
include/bgbdylli.h:int (*typep)(dyt p, char *ty);
include/bgbdylli.h:dyt (*dybool)(int v);
include/bgbdylli.h:dyt (*dyint)(int v);
include/bgbdylli.h:dyt (*dylong)(s64 v);
include/bgbdylli.h:dyt (*dylonglong)(s64 v);
include/bgbdylli.h:dyt (*dyflonum)(float v);
include/bgbdylli.h:dyt (*dyfloat)(float v);
include/bgbdylli.h:dyt (*dydouble)(double v);
include/bgbdylli.h:dyt (*dycomplex2)(double r, double i);
include/bgbdylli.h:dyt (*string)(char *s);
include/bgbdylli.h:dyt (*symbol)(char *s);
include/bgbdylli.h:dyt (*keyword)(char *s);
include/bgbdylli.h:dyt (*sym)(char *s);
include/bgbdylli.h:dyt (*ksym)(char *s);
include/bgbdylli.h:dyt (*wstring)(u16 *s);
include/bgbdylli.h:dyt (*wstring2)(char *str);
include/bgbdylli.h:dyt (*ustring)(char *s);
include/bgbdylli.h:dyt (*usym)(char *s);
include/bgbdylli.h:int (*boolp)(dyt p);
include/bgbdylli.h:int (*fixintp)(dyt p);
include/bgbdylli.h:int (*intp)(dyt p);
include/bgbdylli.h:int (*longp)(dyt p);
include/bgbdylli.h:int (*longlongp)(dyt p);
include/bgbdylli.h:int (*flonump)(dyt p);
include/bgbdylli.h:int (*floatp)(dyt p);
include/bgbdylli.h:int (*doublep)(dyt p);
include/bgbdylli.h:int (*realp)(dyt p);
include/bgbdylli.h:int (*fcomplexp)(dyt p);
include/bgbdylli.h:int (*dcomplexp)(dyt p);
include/bgbdylli.h:int (*complexp)(dyt p);
include/bgbdylli.h:int (*stringp)(dyt p);
include/bgbdylli.h:int (*symbolp)(dyt p);
include/bgbdylli.h:int (*keywordp)(dyt p);
include/bgbdylli.h:int (*wstringp)(dyt p);
include/bgbdylli.h:int (*ustringp)(dyt p);
include/bgbdylli.h:int (*usymp)(dyt p);
include/bgbdylli.h:char *(*stringv)(dyt p);
include/bgbdylli.h:char *(*symbolv)(dyt p);
include/bgbdylli.h:u16 *(*wstringv)(dyt p);
include/bgbdylli.h:int (*intv)(dyt p);
include/bgbdylli.h:s64 (*longv)(dyt p);
include/bgbdylli.h:s64 (*longlongv)(dyt p);
include/bgbdylli.h:float (*floatv)(dyt p);
include/bgbdylli.h:double (*doublev)(dyt p);
include/bgbdylli.h:double (*realv)(dyt p);
include/bgbdylli.h:double (*creal)(dyt p);
include/bgbdylli.h:double (*cimag)(dyt p);
include/bgbdylli.h:dyt (*dyvec2)(float x, float y);
include/bgbdylli.h:dyt (*dyvec3)(float x, float y, float z);
include/bgbdylli.h:dyt (*dyvec4)(float x, float y, float z, float w);
include/bgbdylli.h:dyt (*dyvec2fv)(float *v);
include/bgbdylli.h:dyt (*dyvec3fv)(float *v);
include/bgbdylli.h:dyt (*dyvec4fv)(float *v);
include/bgbdylli.h:dyt (*dyvec2dv)(double *v);
include/bgbdylli.h:dyt (*dyvec3dv)(double *v);
include/bgbdylli.h:dyt (*dyvec4dv)(double *v);
include/bgbdylli.h:int (*dyvec2p)(dyt p);
include/bgbdylli.h:int (*dyvec3p)(dyt p);
include/bgbdylli.h:int (*dyvec4p)(dyt p);
include/bgbdylli.h:void (*dyvecv2fv)(dyt p, float *v);
include/bgbdylli.h:void (*dyvecv3fv)(dyt p, float *v);
include/bgbdylli.h:void (*dyvecv4fv)(dyt p, float *v);
include/bgbdylli.h:void (*dyvecv2dv)(dyt p, double *v);
include/bgbdylli.h:void (*dyvecv3dv)(dyt p, double *v);
include/bgbdylli.h:void (*dyvecv4dv)(dyt p, double *v);
include/bgbdylli.h:dyt (*hash)(int cnt);
include/bgbdylli.h:int (*hashp)(dyt p);
include/bgbdylli.h:dyt (*hashget)(dyt p, char *str);
include/bgbdylli.h:dyt (*hashset)(dyt obj, char *var, dyt val);
include/sxil_xml.h:void (*prints_f)(void *buf, char *str);
include/sxil_xml.h:void *(*get_pos_f)(BCCX_ReadStream strm);
include/sxil_xml.h:void (*set_pos_f)(BCCX_ReadStream strm, void *pos);
include/sxil_xml.h:int (*peek_char_f)(BCCX_ReadStream strm);
include/sxil_xml.h:int (*read_char_f)(BCCX_ReadStream strm);
include/sxil_xml.h:int (*peek_idx_f)(BCCX_ReadStream strm, int idx);
include/bgbbcx.h:char *(*toString)(bcxPackage ctx, bcxt ref);
include/bgbbcx.h:bcxt (*fromString)(bcxPackage ctx, char *str);
include/bgbbcx.h:bcxNode (*toXML)(bcxPackage ctx, bcxt ref);
include/bgbbcx.h:bcxt (*fromXML)(bcxPackage ctx, bcxNode node);
include/bgbbcx.h:void (*prints_f)(void *buf, char *str);
include/bgbbcx.h:void *(*get_pos_f)(bcxReadStream strm);
include/bgbbcx.h:void (*set_pos_f)(bcxReadStream strm, void *pos);
include/bgbbcx.h:int (*peek_char_f)(bcxReadStream strm);
include/bgbbcx.h:int (*read_char_f)(bcxReadStream strm);
include/bgbbcx.h:int (*peek_idx_f)(bcxReadStream strm, int idx);
include/bgbbcx_auto.h:BCX_API bcxAttr bcxLookupAttr(bcxNode n, char *var);
include/bgbbcx_auto.h:BCX_API bcxAttr bcxLookupAttrNS(bcxNode n, char *ns, char *var);
include/bgbbcx_auto.h:BCX_API bcxAttr bcxNewAttr();
include/bgbbcx_auto.h:BCX_API bcxAttr bcxFetchAttr(bcxNode n, char *var);
include/bgbbcx_auto.h:BCX_API bcxAttr bcxFetchAttrNS(bcxNode n, char *ns, char *var);
include/bgbbcx_auto.h:BCX_API char *bcxGet(bcxNode n, char *var);
include/bgbbcx_auto.h:BCX_API char *bcxGet_SI(bcxNode n, char *var);
include/bgbbcx_auto.h:BCX_API int bcxGetInt(bcxNode n, char *var);
include/bgbbcx_auto.h:BCX_API double bcxGetFloat(bcxNode n, char *var);
include/bgbbcx_auto.h:BCX_API char *bcxGetNS(bcxNode n, char *ns, char *var);
include/bgbbcx_auto.h:BCX_API int bcxGetIntNS(bcxNode n, char *ns, char *var);
include/bgbbcx_auto.h:BCX_API double bcxGetFloatNS(bcxNode n, char *ns, char *var);
include/bgbbcx_auto.h:BCX_API void bcxSet(bcxNode n, char *var, char *val);
include/bgbbcx_auto.h:BCX_API void bcxSetInt(bcxNode n, char *var, int val);
include/bgbbcx_auto.h:BCX_API void bcxSetFloat(bcxNode n, char *var, double val);
include/bgbbcx_auto.h:BCX_API void bcxSetNS(bcxNode n, char *ns, char *var, char *val);
include/bgbbcx_auto.h:BCX_API void bcxSetIntNS(bcxNode n, char *ns, char *var, int val);
include/bgbbcx_auto.h:BCX_API void bcxSetFloatNS(bcxNode n, char *ns, char *var, double val);
include/bgbbcx_auto.h:BCX_API char *bcxNSURI(bcxNode n, char *ns);
include/bgbbcx_auto.h:BCX_API char *bcxURINS(bcxNode n, char *uri);
include/bgbbcx_auto.h:BCX_API char *bcxGetURI(bcxNode n, char *uri, char *var);
include/bgbbcx_auto.h:BCX_API int bcxGetIntURI(bcxNode n, char *uri, char *var);
include/bgbbcx_auto.h:BCX_API double bcxGetFloatURI(bcxNode n, char *uri, char *var);
include/bgbbcx_auto.h:BCX_API void bcxSetURI(bcxNode n, char *uri, char *var, char *val);
include/bgbbcx_auto.h:BCX_API void bcxSetIntURI(bcxNode n, char *uri, char *var, int val);
include/bgbbcx_auto.h:BCX_API void bcxSetFloatURI(bcxNode n, char *uri, char *var, double val);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew(bcxPackage doc, char *tag);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNewNS(bcxPackage doc, char *ns, char *tag);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNewText(bcxPackage doc, char *text);
include/bgbbcx_auto.h:BCX_API void bcxAdd(bcxNode parent, bcxNode child);
include/bgbbcx_auto.h:BCX_API bcxNode bcxAddEnd(bcxNode lst, bcxNode n);
include/bgbbcx_auto.h:BCX_API bcxNode bcxAddEnd2(bcxNode fst, bcxNode *rlst, bcxNode n);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew1(bcxPackage doc, char *tag, bcxNode a);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew2(bcxPackage doc, char *tag, bcxNode a, bcxNode b);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew3(bcxPackage doc, char *tag, bcxNode a, bcxNode b, bcxNode c);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew4(bcxPackage doc, char *tag, bcxNode a, bcxNode b, bcxNode c, bcxNode d);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew1NS(bcxPackage doc, char *ns, char *tag, bcxNode a);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew2NS(bcxPackage doc, char *ns, char *tag, bcxNode a, bcxNode b);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew3NS(bcxPackage doc, char *ns, char *tag, bcxNode a, bcxNode b, bcxNode c);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNew4NS(bcxPackage doc, char *ns, char *tag,bcxNode a, bcxNode b, bcxNode c, bcxNode d);
include/bgbbcx_auto.h:BCX_API int bcxNodeP(bcxNode n);
include/bgbbcx_auto.h:BCX_API int bcxTextP(bcxNode n);
include/bgbbcx_auto.h:BCX_API int bcxLeafP(bcxNode n);
include/bgbbcx_auto.h:BCX_API int bcxChildP(bcxNode n);
include/bgbbcx_auto.h:BCX_API bcxNode bcxNext(bcxNode n);
include/bgbbcx_auto.h:BCX_API bcxNode bcxPrev(bcxNode n);
include/bgbbcx_auto.h:BCX_API bcxNode bcxParent(bcxNode n);
include/bgbbcx_auto.h:BCX_API bcxNode bcxChild(bcxNode n);
include/bgbbcx_auto.h:BCX_API char *bcxNS(bcxNode n);
include/bgbbcx_auto.h:BCX_API char *bcxURI(bcxNode n);
include/bgbbcx_auto.h:BCX_API char *bcxTag(bcxNode n);
include/bgbbcx_auto.h:BCX_API char *bcxText(bcxNode n);
include/bgbbcx_auto.h:BCX_API void bcxSetTag(bcxNode n, char *s);
include/bgbbcx_auto.h:BCX_API int bcxTagIsP(bcxNode n, char *str);
include/bgbbcx_auto.h:BCX_API int bcxAttrIsP(bcxNode n, char *var, char *val);
include/bgbbcx_auto.h:BCX_API int bcxTagAttrIsP(bcxNode n, char *tag, char *var, char *val);
include/bgbbcx_auto.h:BCX_API bcxNode bcxFindNextTag(bcxNode last, char *tag);
include/bgbbcx_auto.h:BCX_API bcxNode bcxFindNextAttr(bcxNode last, char *var, char *val);
include/bgbbcx_auto.h:BCX_API bcxNode bcxFindNextTagAttr(bcxNode last,char *tag, char *var, char *val);
include/bgbbcx_auto.h:BCX_API bcxNode bcxFindTag(bcxNode parent, char *tag);
include/bgbbcx_auto.h:BCX_API bcxNode bcxFindAttr(bcxNode parent, char *var, char *val);
include/bgbbcx_auto.h:BCX_API bcxNode bcxFindTagAttr(bcxNode parent, char *tag, char *var, char *val);
include/bgbbcx_auto.h:BCX_API bcxNode bcxFetch(bcxNode parent, char *tag);
include/bgbbcx_auto.h:BCX_API bcxNode bcxClone(bcxNode n);
include/bgbbcx_auto.h:BCX_API bcxNode bcxCloneList(bcxNode n);
include/bgbbcx_auto.h:BCX_API void bcxUnlink(bcxNode n);
include/bgbbcx_auto.h:BCX_API char *bcxPrintText(char *s, char *t);
include/bgbbcx_auto.h:BCX_API void bcxPrintNodeBufSpecial(bcxNode node, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbbcx_auto.h:BCX_API void bcxPrintNodeBuf(bcxNode node, int ind,void (*pb)(void *p, char *b), void *ob);
include/bgbbcx_auto.h:BCX_API void bcxDumpFD(FILE *fd, bcxNode node);
include/bgbbcx_auto.h:BCX_API void bcxPrintFD(FILE *fd, bcxNode node);
include/bgbbcx_auto.h:BCX_API char *bcxDumpStr(char *buf, bcxNode node);
include/bgbbcx_auto.h:BCX_API char *bcxPrintStr(char *buf, bcxNode node);
include/bgbbcx_auto.h:BCX_API void bcxPrint(bcxNode node);
include/bgbbcx_auto.h:BCX_API bcxReadStream bcxNewReadStreamBuf(char *buf);
include/bgbbcx_auto.h:BCX_API bcxReadPos bcxGetPos(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API void bcxSetPos(bcxReadStream strm, bcxReadPos pos);
include/bgbbcx_auto.h:BCX_API int bcxPeekChar(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API int bcxReadChar(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API int bcxPeekCharIdx(bcxReadStream strm, int idx);
include/bgbbcx_auto.h:int BGBCP_PeekChar(char **str);
include/bgbbcx_auto.h:int BGBCP_ParseChar(char **str);
include/bgbbcx_auto.h:int BGBCP_EmitChar(char **str, int j);
include/bgbbcx_auto.h:BCX_API int bcxParseEatWhite(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API int bcxParseSpecialP(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API int bcxParseContSpecialP(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API char *bcxParseToken(bcxReadStream strm, int *ty);
include/bgbbcx_auto.h:BCX_API char *bcxPeekToken(bcxReadStream strm, int *ty);
include/bgbbcx_auto.h:BCX_API char *bcxParseText(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API bcxAttr bcxParseOpts(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API bcxNode bcxParseTag(bcxReadStream strm, int *rgrp);
include/bgbbcx_auto.h:BCX_API bcxNode bcxParseExprR(bcxReadStream strm, int *rgrp);
include/bgbbcx_auto.h:BCX_API bcxNode bcxParseExpr(bcxReadStream strm);
include/bgbbcx_auto.h:BCX_API bcxNode bcxParseExprStr(char *str);
include/bgbbcx_auto.h:void BCX_SBXE_LZMUpdateByte(BCX_SBXE_Context *ctx, int v);
include/bgbbcx_auto.h:void BCX_SBXE_LZMUpdateString(BCX_SBXE_Context *ctx,byte *s, int l);
include/bgbbcx_auto.h:int BCX_SBXE_LZMFindMatch(BCX_SBXE_Context *ctx, byte *str,int *ri, int *rl);
include/bgbbcx_auto.h:void BCX_SBXE_LZMEncodeString(BCX_SBXE_Context *ctx, char *str);
include/bgbbcx_auto.h:char *BCX_SBXE_LZMDecodeString(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeUVLI(BCX_SBXE_Context *ctx, int v);
include/bgbbcx_auto.h:int BCX_SBXE_DecodeUVLI(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeVLI(BCX_SBXE_Context *ctx, int v);
include/bgbbcx_auto.h:int BCX_SBXE_DecodeVLI(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:void BCX_SBXE_TextMRU(BCX_SBXE_Context *ctx, char *str);
include/bgbbcx_auto.h:BCX_API void BCX_SBXE_EmitString(BCX_SBXE_Context *ctx, char *str);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeText(BCX_SBXE_Context *ctx, char *str);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeTag(BCX_SBXE_Context *ctx, char *str);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeAttr(BCX_SBXE_Context *ctx, char *str);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeNS(BCX_SBXE_Context *ctx, char *str);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeAttrList(BCX_SBXE_Context *ctx,bcxAttr first);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeNode(BCX_SBXE_Context *ctx, bcxNode expr);
include/bgbbcx_auto.h:void BCX_SBXE_EncodeNodeList(BCX_SBXE_Context *ctx, bcxNode expr);
include/bgbbcx_auto.h:char *BCX_SBXE_DecodeText(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:char *BCX_SBXE_DecodeTag(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:char *BCX_SBXE_DecodeAttr(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:char *BCX_SBXE_DecodeNS(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:bcxNode BCX_SBXE_DecodeTextNode(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:bcxAttr BCX_SBXE_DecodeAttribute(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:bcxAttr BCX_SBXE_DecodeAttributeList(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:bcxNode BCX_SBXE_DecodeDataNode(BCX_SBXE_Context *ctx,bcxNode up);
include/bgbbcx_auto.h:bcxNode BCX_SBXE_DecodeDataNode(BCX_SBXE_Context *ctx,bcxNode up);
include/bgbbcx_auto.h:bcxNode BCX_SBXE_DecodeNode(BCX_SBXE_Context *ctx,bcxNode up);
include/bgbbcx_auto.h:bcxNode BCX_SBXE_DecodeNodeList(BCX_SBXE_Context *ctx, bcxNode up);
include/bgbbcx_auto.h:BCX_API BCX_SBXE_Context *BCX_SBXE_NewContext(bcxPackage doc,byte *buf, int sz);
include/bgbbcx_auto.h:BCX_API int BCX_SBXE_DestroyContext(BCX_SBXE_Context *ctx);
include/bgbbcx_auto.h:BCX_API int BCX_SBXE_WriteNodeList(bcxPackage doc,byte *buf, int msz, bcxNode expr);
include/bgbbcx_auto.h:BCX_API bcxNode BCX_SBXE_ReadNodeList(bcxPackage doc, byte *buf, int sz);
include/bgbbcx_auto.h:BCX_API void BCX_PushPackage(bcxPackage ctx);
include/bgbbcx_auto.h:BCX_API bcxPackage BCX_PopPackage(void);
include/bgbbcx_auto.h:BCX_API bcxPackage BCX_CreatePackage(char *name);
include/bgbbcx_auto.h:BCX_API void BCX_DestroyPackage(bcxPackage ctx);
include/bgbbcx_auto.h:BCX_API bcxPackage BCX_LookupPackage(char *name);
include/bgbbcx_auto.h:BCX_API bcxPackage BCX_GetPackage(char *name);
include/bgbbcx_auto.h:int BGBGC_CheckPackagePointer(bcxPackage ctx, void *ptr);
include/bgbbcx_auto.h:bcxPackage BCX_LookupPackagePointer(void *ptr);
include/bgbbcx_auto.h:BCX_API void BCX_BindPackage(bcxPackage ctx);
include/bgbbcx_auto.h:bcxPackage bcx_doc();
include/bgbbcx_auto.h:bcxPackage bcx_ptrdoc(void *ptr);
include/bgbbcx_auto.h:void BCX_DieError();
include/bgbbcx_auto.h:void BCX_DieFatal();
include/bgbbcx_auto.h:BCX_API void BCX_ResetPackage(bcxPackage doc);
include/bgbbcx_auto.h:BCX_API BCX_TypeInfo *BCX_LookupTypeInfo(bcxPackage doc, char *name);
include/bgbbcx_auto.h:BCX_API BCX_TypeInfo *BCX_GetTypeInfo(bcxPackage doc, char *name);
include/bgbbcx_auto.h:BCX_API void *BCX_MallocRaw(bcxPackage doc, int sz);
include/bgbbcx_auto.h:BCX_API void *BCX_AllocRaw(bcxPackage doc, int sz);
include/bgbbcx_auto.h:BCX_API void *BCX_TyAlloc(bcxPackage doc, char *ty, size_t sz);
include/bgbbcx_auto.h:BCX_API void *BCX_Malloc(bcxPackage doc, size_t sz);
include/bgbbcx_auto.h:BCX_API void BCX_Free(bcxPackage doc, void *ptr);
include/bgbbcx_auto.h:BCX_API void BCX_SetupObjInfo(bcxPackage doc, BCX_ObjInfo *head);
include/bgbbcx_auto.h:BCX_API int BCX_CheckObjInfo(bcxPackage doc, BCX_ObjInfo *head);
include/bgbbcx_auto.h:BCX_API BCX_ObjInfo *BCX_GetObjInfo(bcxPackage doc, void *ptr);
include/bgbbcx_auto.h:BCX_API BCX_TypeInfo *BCX_GetObjTypeInfo(bcxPackage doc, void *ptr);
include/bgbbcx_auto.h:BCX_API size_t BCX_GetObjSize(bcxPackage doc, void *ptr);
include/bgbbcx_auto.h:BCX_API char *BCX_GetObjTypeName(bcxPackage doc, void *ptr);
include/bgbbcx_auto.h:BCX_API void *BCX_Realloc(bcxPackage doc, void *ptr, size_t sz);
include/bgbbcx_auto.h:BCX_API void *bcxTyAlloc(bcxPackage doc, char *ty, size_t sz);
include/bgbbcx_auto.h:BCX_API void *bcxMalloc(bcxPackage doc, size_t sz);
include/bgbbcx_auto.h:BCX_API void *bcx_tmalloc(char *ty, size_t sz);
include/bgbbcx_auto.h:BCX_API void *bcx_malloc(size_t sz);
include/bgbbcx_auto.h:BCX_API void *bcx_tmalloc2(char *ty, size_t sz);
include/bgbbcx_auto.h:BCX_API void *bcx_malloc2(size_t sz);
include/bgbbcx_auto.h:BCX_API void bcx_free(void *p);
include/bgbbcx_auto.h:BCX_API void bcxFree(bcxPackage doc, void *ptr);
include/bgbbcx_auto.h:BCX_API void *bcx_realloc(void *ptr, int sz);
include/bgbbcx_auto.h:BCX_API char *bcx_gettype(bcxt ptr);
include/bgbbcx_auto.h:BCX_API int bcx_typep(bcxt ptr, char *str);
include/bgbbcx_auto.h:BCX_API void *bcx_ralloc(int sz);
include/bgbbcx_auto.h:BCX_API int BCX_Strdup_i(bcxPackage doc, char *str);
include/bgbbcx_auto.h:BCX_API char *BCX_Strtab_i(bcxPackage doc, int i);
include/bgbbcx_auto.h:BCX_API char *BCX_Strdup(bcxPackage doc, char *str);
include/bgbbcx_auto.h:BCX_API char *bcxStrdup(bcxPackage doc, char *str);
include/bgbbcx_auto.h:BCX_API int bcx_strdup_i(char *str);
include/bgbbcx_auto.h:BCX_API char *bcx_strtab_i(int i);
include/bgbbcx_auto.h:BCX_API char *bcx_strdup(char *str);
include/bgbbcx_auto.h:BCX_API char *bcx_rstrdup(char *s);
include/bgbbcx_auto.h:BCX_API char **bcx_split(char *s);
include/bgbbcx_auto.h:BCX_API char *bcx_rstradd(char *s0, char *s1);
include/bgbbcx_auto.h:BCX_API char *bcx_rstradd2(char *s0, char *s1, char *s2);
include/bgbbcx_auto.h:BCX_API char *bcx_rstradd3(char *s0, char *s1, char *s2, char *s3);
include/bgbbcx_auto.h:BCX_API void *bcx_neword(char **tab);
include/bgbbcx_auto.h:BCX_API int bcx_strord(char *str, void *tab);
include/bgbbcx_auto.h:BCX_API double BCX_ParseNumber(char *str);
include/bgbbcx_auto.h:BCX_API bcxPrintBuf bcxNewPrintBuf(bcxPackage heap);
include/bgbbcx_auto.h:BCX_API void bcxFreePrintBuf(bcxPrintBuf buf);
include/bgbbcx_auto.h:BCX_API char *bcxFlattenPrintBuf(bcxPrintBuf buf);
include/bgbbcx_auto.h:BCX_API void BCX_BufPuts_lln(bcxPrintBuf buf,char *fn, int ln, char *str);
include/bgbbcx_auto.h:BCX_API void BCX_BufPrintVA_lln(bcxPrintBuf buf,char *fn, int ln, char *str, va_list lst);
include/bgbbcx_auto.h:BCX_API void BCX_BufPrint_lln(bcxPrintBuf buf,char *fn, int ln, char *str, ...);
include/bgbbcx_auto.h:BCX_API void bcxBufPuts(bcxPrintBuf buf, char *str);
include/bgbbcx_auto.h:BCX_API void bcxBufPrintVA(bcxPrintBuf buf, char *str, va_list lst);
include/bgbbcx_auto.h:BCX_API void bcxBufPrint(bcxPrintBuf buf, char *str, ...);
include/bgbbcx_auto.h:bcxt bcxCons(bcxPackage doc, bcxt car, bcxt cdr);
include/bgbbcx_auto.h:int bcxConsP(bcxt cons);
include/bgbbcx_auto.h:bcxt bcxCarF(bcxt cons);
include/bgbbcx_auto.h:bcxt bcxCdrF(bcxt cons);
include/bgbbcx_auto.h:bcxt bcxCar(bcxt cons);
include/bgbbcx_auto.h:bcxt bcxCdr(bcxt cons);
include/bgbbcx_auto.h:bcxt bcxInt(bcxPackage doc, s64 val);
include/bgbbcx_auto.h:s64 bcxIntv(bcxt val);
include/bgbbcx_auto.h:bcxt bcxSym(bcxPackage doc, char *str);
include/bgbjvm_autoi.h:int BJVM_GetSigCTab2(char **sig);
include/bgbjvm_autoi.h:int BJVM_GetSigCTab(char *sig);
include/bgbjvm_autoi.h:int BJVM_SplitArgsSigCTab(char *sig, int *aty, int *rty);
include/bgbjvm_autoi.h:void BJVM_PushRef(BJVM_Frame *ctx, void *p);
include/bgbjvm_autoi.h:void *BJVM_PopRef(BJVM_Frame *ctx);
include/bgbjvm_autoi.h:void BJVM_PushInt(BJVM_Frame *ctx, int i);
include/bgbjvm_autoi.h:void BJVM_PushLong(BJVM_Frame *ctx, s64 i);
include/bgbjvm_autoi.h:void BJVM_PushFloat(BJVM_Frame *ctx, int i);
include/bgbjvm_autoi.h:void BJVM_PushDouble(BJVM_Frame *ctx, s64 i);
include/bgbjvm_autoi.h:int BJVM_PopInt(BJVM_Frame *ctx);
include/bgbjvm_autoi.h:float BJVM_PopFloat(BJVM_Frame *ctx);
include/bgbjvm_autoi.h:s64 BJVM_PopLong(BJVM_Frame *ctx);
include/bgbjvm_autoi.h:double BJVM_PopDouble(BJVM_Frame *ctx);
include/bgbjvm_autoi.h:int BJVM_OpGetField(BJVM_Frame *ctx, int i);
include/bgbjvm_autoi.h:int BJVM_OpPutField(BJVM_Frame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_OpGetStatic(BJVM_Frame *ctx, int i);
include/bgbjvm_autoi.h:int BJVM_OpPutStatic(BJVM_Frame *ctx, int idx);
include/bgbjvm_autoi.h:dyt BJVM_NewArray(int ty, int sz);
include/bgbjvm_autoi.h:dyt BJVM_NewObjectArray(char *ty, int sz);
include/bgbjvm_autoi.h:int BJVM_ArrayLength(dyt arr);
include/bgbjvm_autoi.h:int BJVM_OpNewArray(BJVM_Frame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_OpANewArray(BJVM_Frame *ctx, int idx);
include/bgbjvm_autoi.h:dyt BJVM_OpMultiANewArrayR(int *dsz, int dim, char *sig);
include/bgbjvm_autoi.h:int BJVM_OpMultiANewArray(BJVM_Frame *ctx, int idx, int dim);
include/bgbjvm_autoi.h:int BJVM_OpArrayLength(BJVM_Frame *ctx);
include/bgbjvm_autoi.h:void BJVM_OpAThrow(BJVM_Context *ctx, BJVM_Frame *frame, void *obj);
include/bgbjvm_autoi.h:void BJVM_OpThrow(BJVM_Context *ctx, char *name);
include/bgbjvm_autoi.h:int BJVM_OpTableSwitch(BJVM_Frame *frame);
include/bgbjvm_autoi.h:int BJVM_OpLookupSwitch(BJVM_Frame *frame);
include/bgbjvm_autoi.h:BJVM_Frame *BJVM_ReturnFrame(BJVM_Frame *cur);
include/bgbjvm_autoi.h:BJVM_Frame *BJVM_InvokeMethodFrame(BJVM_Frame *cur, BJVM_Method *mth);
include/bgbjvm_autoi.h:int BJVM_CtabCheckExpand(BJVM_Class *info);
include/bgbjvm_autoi.h:void BJVM_InitStrings();
include/bgbjvm_autoi.h:int BJVM_PeekChar(char **str);
include/bgbjvm_autoi.h:int BJVM_ParseChar(char **str);
include/bgbjvm_autoi.h:void BJVM_EmitChar(char **str, int j);
include/bgbjvm_autoi.h:int BJVM_ParseChar16(u16 **str);
include/bgbjvm_autoi.h:void BJVM_EmitChar16(u16 **str, int i);
include/bgbjvm_autoi.h:int BJVM_ASM_LookupOp(char *name);
include/bgbjvm_autoi.h:void BJVM_ASM_EmitOpByte(BJVM_AsmState *ctx, int i);
include/bgbjvm_autoi.h:void BJVM_ASM_EmitOpSByte(BJVM_AsmState *ctx, int i);
include/bgbjvm_autoi.h:void BJVM_ASM_EmitOpShort(BJVM_AsmState *ctx, int i);
include/bgbjvm_autoi.h:void BJVM_ASM_EmitOpInt(BJVM_AsmState *ctx, int i);
include/bgbjvm_autoi.h:int BJVM_ASM_IsNumber(char *str);
include/bgbjvm_autoi.h:s64 BJVM_ASM_DecodeInt(char *str);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpConst8(BJVM_AsmState *ctx, char *s);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpConst16(BJVM_AsmState *ctx, char *s);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpConst16W(BJVM_AsmState *ctx, char *s);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpClass(BJVM_AsmState *ctx, char *s);
include/bgbjvm_autoi.h:int BJVM_ASM_SplitMethod(char *str, char **rcname, char **rname, char **rsig);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpMethod(BJVM_AsmState *ctx, char *str, int ifp);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpField(BJVM_AsmState *ctx, char *slot, char *desc);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitLabel(BJVM_AsmState *ctx, char *str);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpAddr(BJVM_AsmState *ctx, char *str, int disp);
include/bgbjvm_autoi.h:int BJVM_ASM_EmitOpAddrW(BJVM_AsmState *ctx, char *str, int disp);
include/bgbjvm_autoi.h:int BJVM_ASM_AssembleOpcode(BJVM_AsmState *ctx, char **args);
include/bgbjvm_autoi.h:char *BJVM_ASM_GetStr(char **str);
include/bgbjvm_autoi.h:char **BJVM_ASM_Split(char *s);
include/bgbjvm_autoi.h:int BJVM_ASM_BeginMethod(BJVM_AsmState *ctx, char *name, char *sig, int flags);
include/bgbjvm_autoi.h:int BJVM_ASM_EndMethod(BJVM_AsmState *ctx);
include/bgbjvm_autoi.h:int BJVM_ASM_DirClass(BJVM_AsmState *ctx, char *name, int flags);
include/bgbjvm_autoi.h:int BJVM_ASM_DirSuper(BJVM_AsmState *ctx, char *name);
include/bgbjvm_autoi.h:int BJVM_ASM_IndexLiteral(BJVM_AsmState *ctx, char *val, char *sig);
include/bgbjvm_autoi.h:int BJVM_ASM_AssembleDirective(BJVM_AsmState *ctx, char **args);
include/bgbjvm_autoi.h:int BJVM_ASM_AssembleLoop(BJVM_AsmState *ctx, char *buf);
include/bgbjvm_autoi.h:int BJVM_Load_ReadU1(byte **buf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_ReadU2(byte **buf, byte *lim);
include/bgbjvm_autoi.h:u32 BJVM_Load_ReadU4(byte **buf, byte *lim);
include/bgbjvm_autoi.h:s32 BJVM_Load_ReadS4(byte **buf, byte *lim);
include/bgbjvm_autoi.h:s64 BJVM_Load_ReadS8(byte **buf, byte *lim);
include/bgbjvm_autoi.h:float BJVM_Load_ReadF4(byte **buf, byte *lim);
include/bgbjvm_autoi.h:double BJVM_Load_ReadF8(byte **buf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeConstantPool(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeInterfaces(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeFieldAttr(BJVM_Class *inf, BJVM_FieldInfo *finf,byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:BJVM_FieldInfo *BJVM_Load_DecodeField(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeFields(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeMethodAttr(BJVM_Class *inf, BJVM_Method *minf,byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:BJVM_Method *BJVM_Load_DecodeMethod(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeMethods(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeClassAttr(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Load_DecodeAttributes(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:void BJVM_Save_WriteU1(byte **buf, int val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteU2(byte **buf, int val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteU4(byte **buf, u32 val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteU8(byte **buf, u64 val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteS4(byte **buf, s32 val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteS8(byte **buf, s64 val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteF4(byte **buf, float val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteF8(byte **buf, double val);
include/bgbjvm_autoi.h:void BJVM_Save_WriteBytes(byte **buf, byte *sbuf, int sz);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeConstantPool(BJVM_Class *inf, byte **buf, byte *lim);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeInterfaces(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeAttribute(BJVM_Class *inf,byte **rbuf, byte *lim, char *type, byte *data, int sz);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeAttrConstValue(BJVM_Class *inf,byte **rbuf, byte *lim, int idx);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeField(BJVM_Class *inf, byte **rbuf, byte *lim,BJVM_FieldInfo *finf);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeFields(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeAttrCode(BJVM_Class *inf,byte **rbuf, byte *lim, BJVM_Method *minf);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeMethod(BJVM_Class *inf, byte **rbuf, byte *lim,BJVM_Method *minf);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeMethods(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:void BJVM_Save_EncodeClassInner(BJVM_Class *inf, byte **rbuf, byte *lim);
include/bgbjvm_autoi.h:int BJVM_Save_EncodeClassBuffer(byte *buf, int maxsz, BJVM_Class *inf);
include/bgbjvm_autoi.h:void *BJVM_Link_HandleMethodStub(BGBGC_StubMethod *inf,dyt self, char *sig, void **args, int szargs);
include/bgbjvm_autoi.h:dyt BJVM_Link_WrapMethodStub(BJVM_Method *mth);
include/bgbjvm_autoi.h:dycClass bjvm_link_resolveclass(char *name);
include/bgbjvm_autoi.h:BJVM_JitFrame *BJVM_JITC_CreateFrame(BJVM_Method *mth);
include/bgbjvm_autoi.h:int BJVM_JITC_ReleaseFrame(BJVM_JitFrame *frm);
include/bgbjvm_autoi.h:int BJVM_JITC_Puts(BJVM_JitFrame *ctx, char *str);
include/bgbjvm_autoi.h:int BJVM_JITC_Print(BJVM_JitFrame *ctx, char *str, ...);
include/bgbjvm_autoi.h:int BJVM_JITC_IndexTVar(BJVM_JitFrame *ctx, char *str);
include/bgbjvm_autoi.h:int BJVM_JITC_IndexTVarT(BJVM_JitFrame *ctx, char *str, int ty);
include/bgbjvm_autoi.h:char *BJVM_JITC_PopTmpName(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:char *BJVM_JITC_PushTmpName(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:char *BJVM_JITC_StackTmpName(BJVM_JitFrame *ctx, int idx, int ty);
include/bgbjvm_autoi.h:char *BJVM_JITC_LocalTmpName(BJVM_JitFrame *ctx, int idx, int ty);
include/bgbjvm_autoi.h:char *BJVM_JITC_GetCTabTypeSuf(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:char *BJVM_JITC_GetCTabCType(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_MangleStrBuf(char *str, char *buf);
include/bgbjvm_autoi.h:int BJVM_JITC_MangleStrArrayBuf(char **str, char *buf);
include/bgbjvm_autoi.h:char *BJVM_JITC_GenericMangleString(char *str);
include/bgbjvm_autoi.h:char *BJVM_JITC_GenericMangleStringArray(char **str);
include/bgbjvm_autoi.h:char *BJVM_JITC_CIfy(char *s);
include/bgbjvm_autoi.h:char *BJVM_JITC_CIfy(char *s);
include/bgbjvm_autoi.h:char *bjvm_jitc_ftoa(double f);
include/bgbjvm_autoi.h:int BJVM_JITC_ConvCTab(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:int BJVM_JITC_ConvFinal(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:char *BJVM_JITC_GetCTabIdxName(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpPop(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpPop2(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpDup(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpDup2(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpDupX1(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpDupX2(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpDup2X1(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpDup2X2(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpExch(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:void BJVM_JITC_OpAdd(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpSub(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpMul(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpDiv(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpMod(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpMod2(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpAnd(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpOr(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpXor(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpShl(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpShr(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpUShr(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:void BJVM_JITC_OpNeg(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpGetField(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpPutField(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpGetStatic(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpPutStatic(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpInvoke(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpInvokeStatic(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpNew(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpInstanceOf(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpCheckCast(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpNewArray(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpANewArray(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpMultiANewArray(BJVM_JitFrame *ctx, int idx, int dim);
include/bgbjvm_autoi.h:int BJVM_JITC_OpArrayLength(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpAThrow(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpMonitorEnter(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpMonitorExit(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpThrow(BJVM_JitFrame *ctx, char *name);
include/bgbjvm_autoi.h:int BJVM_JITC_OpLDC(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpLoad(BJVM_JitFrame *ctx, int idx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpStore(BJVM_JitFrame *ctx, int idx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpALoad(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpAStore(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpIInc(BJVM_JitFrame *ctx, int idx, int val);
include/bgbjvm_autoi.h:int BJVM_JITC_OpConv(BJVM_JitFrame *ctx, int sty, int dty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpCmpl(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpCmpg(BJVM_JitFrame *ctx, int ty);
include/bgbjvm_autoi.h:int BJVM_JITC_OpJSR(BJVM_JitFrame *ctx, char *lbl);
include/bgbjvm_autoi.h:int BJVM_JITC_OpJsrRet(BJVM_JitFrame *ctx, int idx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpTableSwitch(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:int BJVM_JITC_OpLookupSwitch(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:char *BJVM_JITC_GetLabel(BJVM_JitFrame *ctx, byte *ip);
include/bgbjvm_autoi.h:int BJVM_JITC_BeginTry(BJVM_JitFrame *ctx, int idx, int lst);
include/bgbjvm_autoi.h:int BJVM_JITC_EndTry(BJVM_JitFrame *ctx, int idx, int lst);
include/bgbjvm_autoi.h:int BJVM_JITC_Catch(BJVM_JitFrame *ctx, int idx, int lst);
include/bgbjvm_autoi.h:int BJVM_JITC_StepFrame(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:int BJVM_JITC_CompileFrame(BJVM_JitFrame *ctx);
include/bgbjvm_autoi.h:char *BJVM_JITC_GetMethodName(BJVM_Method *mth);
include/bgbjvm_autoi.h:char *BJVM_JITC_CompileMethod(BJVM_Method *mth);
include/bgbjvm_autoi.h:void *BJVM_GetEnv(int ver);
include/bgbjvm_autoi.h:char *BJVM_JNI_MangleName(char *name);
include/bgbjvm_autoi.h:char *BJVM_JNI_ComposeNativeShort(char *cname, char *name, char *sig);
include/bgbjvm_autoi.h:char *BJVM_JNI_ComposeNativeLong(char *cname, char *name, char *sig);
include/bgbjvm_autoi.h:void BJVM_JNI_RepackArgsJavaNative(char *jsig, char *nsig, void **jargs, void **nargs, int szargs);
include/bgbjvm_autoi.h:void *BJVM_JNI_HandleNativeStubZCall(BGBGC_StubMethod *inf,dyt self, char *sig, void **args, int szargs);
include/bgbjvm_autoi.h:dyt BJVM_JNI_GetNativeStubZCall(char *cname, char *name, char *sig);
include/bgbjvm_autoi.h:void *BJVM_JNI_HandleNativeStub(BGBGC_StubMethod *inf, dyt self, char *sig,void **args, int szargs);
include/bgbjvm_autoi.h:void *BJVM_JNI_HandleNativeStubRaw(BGBGC_StubMethod *inf,dyt self, char *sig, void **args, int szargs);
include/bgbjvm_autoi.h:void *BJVM_JNI_HandleNativeRawVirt(BGBGC_StubMethod *inf,dyt self, char *sig, void **args, int szargs);
include/bgbjvm_autoi.h:dyt BJVM_JNI_GetNativeStub2(char *cname, char *name, char *sig);
include/bgbjvm_autoi.h:dyt BJVM_JNI_GetNativeStub(char *cname, char *name, char *sig);
include/bgbjvm_autoi.h:char *bjvmc_strdup(char *str);
include/bgbjvm_autoi.h:char *BJVMC_GenSym();
include/bgbjvm_autoi.h:char *BJVMC_GenSym2();
include/bgbjvm_autoi.h:void bjvmc_puts(BJVMC_Context *ctx, char *str);
include/bgbjvm_autoi.h:void bjvmc_print(BJVMC_Context *ctx, char *str, ...);
include/bgbjvm_autoi.h:void BJVMC_Warning(BJVMC_Context *ctx, char *str, ...);
include/bgbjvm_autoi.h:void BJVMC_Error(BJVMC_Context *ctx, char *str, ...);
include/bgbjvm_autoi.h:void BJVMC_ErrorUnsupTag(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:char *BJVMC_VarTypeString(BJVMC_Context *ctx, BJVMX_Node *ty);
include/bgbjvm_autoi.h:void BJVMC_CompileVarStatement(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileBlock(BJVMC_Context *ctx,BJVMX_Node *type, char *name, BJVMX_Node *args, BJVMX_Node *body);
include/bgbjvm_autoi.h:char *BJVMC_GenProtoSig(BJVMC_Context *ctx,BJVMX_Node *type, BJVMX_Node *args);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_CompileProto(BJVMC_Context *ctx,BJVMX_Node *type, char *name, BJVMX_Node *args);
include/bgbjvm_autoi.h:void BJVMC_CompileStruct(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileUnion(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_CompileSProto(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileTypedef(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileStructs(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:dyt BJVMC_DecodeValue(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_EmitTopVar(BJVMC_Context *ctx,char *name, BJVMX_Node *ty, BJVMX_Node *v);
include/bgbjvm_autoi.h:void BJVMC_CompileTopStatement(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:int BJVMC_CompileModule(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:int BJVMC_PeekChar(char **str);
include/bgbjvm_autoi.h:int BJVMC_ParseChar(char **str);
include/bgbjvm_autoi.h:void BJVMC_EmitChar(char **str, int j);
include/bgbjvm_autoi.h:char *BJVMC_CIfy(char *s);
include/bgbjvm_autoi.h:void BJVMC_CompileAssign(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileExprList(BJVMC_Context *ctx, BJVMX_Node *lst);
include/bgbjvm_autoi.h:void BJVMC_CompileExprListReverse(BJVMC_Context *ctx, BJVMX_Node *lst);
include/bgbjvm_autoi.h:void BJVMC_CompileArgsList(BJVMC_Context *ctx, BJVMX_Node *lst);
include/bgbjvm_autoi.h:void BJVMC_CompileFuncall(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileForm(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileExprT(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileExpr(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileExprTail(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_PushType(BJVMC_Context *ctx, char *str);
include/bgbjvm_autoi.h:char *BJVMC_PopType(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:void BJVMC_EmitLabel(BJVMC_Context *ctx, char *name);
include/bgbjvm_autoi.h:void BJVMC_CompileBreak(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:void BJVMC_CompileContinue(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:void BJVMC_CompileBreakFalse(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:void BJVMC_CompileBreakTrue(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:void BJVMC_CompileContinueFalse(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:void BJVMC_CompileContinueTrue(BJVMC_Context *ctx);
include/bgbjvm_autoi.h:void BJVMC_CompileJmp(BJVMC_Context *ctx, char *s);
include/bgbjvm_autoi.h:void BJVMC_CompileJmpFalse(BJVMC_Context *ctx, char *s);
include/bgbjvm_autoi.h:void BJVMC_CompileJmpTrue(BJVMC_Context *ctx, char *s);
include/bgbjvm_autoi.h:void BJVMC_CompileJmpCond(BJVMC_Context *ctx, char *op, char *s);
include/bgbjvm_autoi.h:void BJVMC_CompileJCO(BJVMC_Context *ctx, char *op,BJVMX_Node *ln, BJVMX_Node *rn, char *s);
include/bgbjvm_autoi.h:void BJVMC_CompileJCT(BJVMC_Context *ctx, BJVMX_Node *l, char *s);
include/bgbjvm_autoi.h:void BJVMC_CompileJCF(BJVMC_Context *ctx, BJVMX_Node *l, char *s);
include/bgbjvm_autoi.h:int BJVMC_IsUnaryP(BJVMX_Node *l, char *op);
include/bgbjvm_autoi.h:int BJVMC_IsBinaryP(BJVMX_Node *l, char *op);
include/bgbjvm_autoi.h:int BJVMC_BoolExpr(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_WrapInt(int i);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_WrapReal(double f);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_WrapIntSig(int i, char *sig);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_WrapRealSig(double f, char *sig);
include/bgbjvm_autoi.h:int BJVMC_IsIntP(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:int BJVMC_IsRealP(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_UnaryExpr(char *op, BJVMX_Node *n);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_UnaryExprSig(char *op, BJVMX_Node *n, char *sig);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_BinaryExpr(char *op, BJVMX_Node *ln, BJVMX_Node *rn);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_BinaryExprSig(char *op,BJVMX_Node *ln, BJVMX_Node *rn, char *sig);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_Number(void *ctx, char *str);
include/bgbjvm_autoi.h:char *BJVMC_GetFormSig(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:char *BJVMC_GetBinarySig(BJVMC_Context *ctx, char *op,BJVMX_Node *ln, BJVMX_Node *rn);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_ReduceForm(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:BJVMX_Node *BJVMC_ReduceExpr(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:int BJVMC_CompileSwitch(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileStatementLineNum(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgbjvm_autoi.h:void BJVMC_CompileStatement(BJVMC_Context *ctx, BJVMX_Node *l);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject, jbyteArray, jint);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject, jbyteArray, jint);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject, jlong, jint);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject);
include/bgb_vm_Z_File.h:  (JNIEnv *, jobject, jint, jobject);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring, jstring);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring, jstring, jobjectArray);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jobject);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jobject);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jobject);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jstring, jstring);
include/bgb_vm_Z_FileSystem.h:  (JNIEnv *, jobject, jint, jobject);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jfloat);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_Math.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jbyteArray, jint, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jbyteArray, jint, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong, jlong, jint);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong, jint, jobject);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring, jstring);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring, jstring, jobjectArray);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jstring, jstring);
include/bgb_vm_Z_NativeFile.h:  (JNIEnv *, jclass, jint, jobject);
include/bgb_vm_Z_ConsoleInput.h:  (JNIEnv *, jobject);
include/bgb_vm_Z_ConsoleOutput.h:  (JNIEnv *, jobject, jcharArray);
include/bgb_vm_Z_ConsoleOutput.h:  (JNIEnv *, jobject, jstring);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jint);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jstring, jint);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jdouble);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jint);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jint);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jint);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jint);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jint);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jlong);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jfloat);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jdouble);
include/bgb_vm_Z_SysUtil.h:  (JNIEnv *, jclass, jlong, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring, jstring);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring, jstring, jstring, jobjectArray);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jstring, jstring, jint);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jint, jobject);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jbyteArray, jint, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jbyteArray, jint, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jint, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong, jlong, jint);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong);
include/bgb_vm_Z_VFS.h:  (JNIEnv *, jclass, jlong, jint, jobject);
include/jni_apache/jni.h: *  (the "License"); you may not use this file except in compliance with
include/jni_apache/jni.h:    jint (JNICALL *GetVersion)(JNIEnv *env);
include/jni_apache/jni.h:       jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, const char *name);
include/jni_apache/jni.h:      (JNIEnv *env, jobject method);
include/jni_apache/jni.h:      (JNIEnv *env, jobject field);
include/jni_apache/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, jboolean isStatic);
include/jni_apache/jni.h:      (JNIEnv *env, jclass sub);
include/jni_apache/jni.h:      (JNIEnv *env, jclass sub, jclass sup);
include/jni_apache/jni.h:      (JNIEnv *env, jclass cls, jfieldID fieldID, jboolean isStatic);
include/jni_apache/jni.h:      (JNIEnv *env, jthrowable obj);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, const char *msg);
include/jni_apache/jni.h:      (JNIEnv *env);
include/jni_apache/jni.h:      (JNIEnv *env);
include/jni_apache/jni.h:      (JNIEnv *env);
include/jni_apache/jni.h:      (JNIEnv *env, const char *msg);
include/jni_apache/jni.h:      (JNIEnv *env, jint cap);
include/jni_apache/jni.h:      (JNIEnv *env, jobject res);
include/jni_apache/jni.h:      (JNIEnv *env, jobject lobj);
include/jni_apache/jni.h:      (JNIEnv *env, jobject gref);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj1, jobject obj2);
include/jni_apache/jni.h:      (JNIEnv *env, jobject ref);
include/jni_apache/jni.h:      (JNIEnv *env, jint);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue * args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue * args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:       va_list args);
include/jni_apache/jni.h:       jvalue * args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jobject val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jboolean val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jbyte val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jchar val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jshort val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jint val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jlong val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jfloat val);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj, jfieldID fieldID, jdouble val);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, ...);
include/jni_apache/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, va_list args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass cls, jmethodID methodID, jvalue * args);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jobject value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jboolean value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jbyte value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jchar value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jshort value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jint value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jlong value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jfloat value);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz, jfieldID fieldID, jdouble value);
include/jni_apache/jni.h:      (JNIEnv *env, const jchar *unicode, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jstring str);
include/jni_apache/jni.h:      (JNIEnv *env, jstring str, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jstring str, const jchar *chars);
include/jni_apache/jni.h:      (JNIEnv *env, const char *utf);
include/jni_apache/jni.h:      (JNIEnv *env, jstring str);
include/jni_apache/jni.h:      (JNIEnv *env, jstring str, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jstring str, const char* chars);
include/jni_apache/jni.h:      (JNIEnv *env, jarray array);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len, jclass clazz, jobject init);
include/jni_apache/jni.h:      (JNIEnv *env, jobjectArray array, jsize index);
include/jni_apache/jni.h:      (JNIEnv *env, jobjectArray array, jsize index, jobject val);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jsize len);
include/jni_apache/jni.h:      (JNIEnv *env, jbooleanArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jbyteArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jcharArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jshortArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jintArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jlongArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jfloatArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jdoubleArray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jbooleanArray array, jboolean *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jbyteArray array, jbyte *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jcharArray array, jchar *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jshortArray array, jshort *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jintArray array, jint *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jlongArray array, jlong *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jfloatArray array, jfloat *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jdoubleArray array, jdouble *elems, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jbooleanArray array, jsize start, jsize l, jboolean *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jbyteArray array, jsize start, jsize len, jbyte *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jcharArray array, jsize start, jsize len, jchar *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jshortArray array, jsize start, jsize len, jshort *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jintArray array, jsize start, jsize len, jint *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jlongArray array, jsize start, jsize len, jlong *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jfloatArray array, jsize start, jsize len, jfloat *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jdoubleArray array, jsize start, jsize len, jdouble *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jbooleanArray array, jsize start, jsize l, jboolean *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jbyteArray array, jsize start, jsize len, jbyte *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jcharArray array, jsize start, jsize len, jchar *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jshortArray array, jsize start, jsize len, jshort *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jintArray array, jsize start, jsize len, jint *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jlongArray array, jsize start, jsize len, jlong *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jfloatArray array, jsize start, jsize len, jfloat *buf);
include/jni_apache/jni.h:      (JNIEnv *env, jdoubleArray array, jsize start, jsize len, jdouble *buf);
include/jni_apache/jni.h:       jint nMethods);
include/jni_apache/jni.h:      (JNIEnv *env, jclass clazz);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj);
include/jni_apache/jni.h:      (JNIEnv *env, JavaVM **vm);
include/jni_apache/jni.h:      (JNIEnv *env, jstring, jsize, jsize, jchar*);
include/jni_apache/jni.h:      (JNIEnv *env, jstring, jsize, jsize, char*);
include/jni_apache/jni.h:      (JNIEnv *env, jarray array, jboolean *isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jarray array, void* carray, jint mode);
include/jni_apache/jni.h:      (JNIEnv *env, jstring s, jboolean* isCopy);
include/jni_apache/jni.h:      (JNIEnv *env, jstring s, const jchar* cstr);
include/jni_apache/jni.h:      (JNIEnv *env, jobject obj);
include/jni_apache/jni.h:      (JNIEnv *env, jweak obj);
include/jni_apache/jni.h:      (JNIEnv *env);
include/jni_apache/jni.h:      (JNIEnv* env, void* address, jlong capacity);
include/jni_apache/jni.h:      (JNIEnv* env, jobject buf);
include/jni_apache/jni.h:      (JNIEnv* env, jobject buf);
include/jni_apache/jni.h:        return functions->GetVersion(this);
include/jni_apache/jni.h:        return functions->DefineClass(this, name, loader, buf, len);
include/jni_apache/jni.h:        return functions->FindClass(this, name);
include/jni_apache/jni.h:        return functions->FromReflectedMethod(this, method);
include/jni_apache/jni.h:        return functions->FromReflectedField(this, field);
include/jni_apache/jni.h:        return functions->ToReflectedMethod(this, cls, methodID, isStatic);
include/jni_apache/jni.h:        return functions->GetSuperclass(this, sub);
include/jni_apache/jni.h:        return functions->IsAssignableFrom(this, sub, sup);
include/jni_apache/jni.h:        return functions->ToReflectedField(this, cls, fieldID, isStatic);
include/jni_apache/jni.h:        return functions->Throw(this, obj);
include/jni_apache/jni.h:        return functions->ThrowNew(this, clazz, msg);
include/jni_apache/jni.h:        return functions->ExceptionOccurred(this);
include/jni_apache/jni.h:        functions->ExceptionDescribe(this);
include/jni_apache/jni.h:        functions->ExceptionClear(this);
include/jni_apache/jni.h:        functions->FatalError(this, msg);
include/jni_apache/jni.h:        return functions->PushLocalFrame(this, cap);
include/jni_apache/jni.h:        return functions->PopLocalFrame(this, res);
include/jni_apache/jni.h:        return functions->NewGlobalRef(this,lobj);
include/jni_apache/jni.h:        functions->DeleteGlobalRef(this,gref);
include/jni_apache/jni.h:        functions->DeleteLocalRef(this, obj);
include/jni_apache/jni.h:        return functions->IsSameObject(this,obj1,obj2);
include/jni_apache/jni.h:        return functions->NewLocalRef(this, ref);
include/jni_apache/jni.h:        return functions->EnsureLocalCapacity(this,cap);
include/jni_apache/jni.h:        return functions->AllocObject(this,clazz);
include/jni_apache/jni.h:    va_start(args, methodID);
include/jni_apache/jni.h:        result = functions->NewObjectV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->NewObjectV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->NewObjectA(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->GetObjectClass(this,obj);
include/jni_apache/jni.h:        return functions->IsInstanceOf(this,obj,clazz);
include/jni_apache/jni.h:        return functions->GetMethodID(this,clazz,name,sig);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallObjectMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallObjectMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallObjectMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallBooleanMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallBooleanMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallBooleanMethodA(this,obj,methodID, args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallByteMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallByteMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallByteMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallCharMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallCharMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallCharMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallShortMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallShortMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallShortMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallIntMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallIntMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallIntMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallLongMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallLongMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallLongMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallFloatMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallFloatMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallFloatMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallDoubleMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallDoubleMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        return functions->CallDoubleMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    functions->CallVoidMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        functions->CallVoidMethodV(this,obj,methodID,args);
include/jni_apache/jni.h:        functions->CallVoidMethodA(this,obj,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                              methodID,args);
include/jni_apache/jni.h:                              methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                             methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                               methodID,args);
include/jni_apache/jni.h:                               methodID, args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                              methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                              methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                               methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                             methodID,args);
include/jni_apache/jni.h:                             methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                             methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                           methodID,args);
include/jni_apache/jni.h:                           methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                              methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                               methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                             methodID,args);
include/jni_apache/jni.h:                             methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:                            methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:                              methodID,args);
include/jni_apache/jni.h:                              methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    functions->CallNonvirtualVoidMethodV(this,obj,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        functions->CallNonvirtualVoidMethodV(this,obj,clazz,methodID,args);
include/jni_apache/jni.h:        functions->CallNonvirtualVoidMethodA(this,obj,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->GetFieldID(this,clazz,name,sig);
include/jni_apache/jni.h:        return functions->GetObjectField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetBooleanField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetByteField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetCharField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetShortField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetIntField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetLongField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetFloatField(this,obj,fieldID);
include/jni_apache/jni.h:        return functions->GetDoubleField(this,obj,fieldID);
include/jni_apache/jni.h:        functions->SetObjectField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetBooleanField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetByteField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetCharField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetShortField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetIntField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetLongField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetFloatField(this,obj,fieldID,val);
include/jni_apache/jni.h:        functions->SetDoubleField(this,obj,fieldID,val);
include/jni_apache/jni.h:        return functions->GetStaticMethodID(this,clazz,name,sig);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticObjectMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticObjectMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticObjectMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticBooleanMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticBooleanMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticBooleanMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticByteMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticByteMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticByteMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticCharMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticCharMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticCharMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticShortMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticShortMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticShortMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticIntMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticIntMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticIntMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticLongMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticLongMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticLongMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticFloatMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticFloatMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticFloatMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    result = functions->CallStaticDoubleMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        return functions->CallStaticDoubleMethodV(this,clazz,methodID,args);
include/jni_apache/jni.h:        return functions->CallStaticDoubleMethodA(this,clazz,methodID,args);
include/jni_apache/jni.h:    va_start(args,methodID);
include/jni_apache/jni.h:    functions->CallStaticVoidMethodV(this,cls,methodID,args);
include/jni_apache/jni.h:    va_end(args);
include/jni_apache/jni.h:        functions->CallStaticVoidMethodV(this,cls,methodID,args);
include/jni_apache/jni.h:        functions->CallStaticVoidMethodA(this,cls,methodID,args);
include/jni_apache/jni.h:        return functions->GetStaticFieldID(this,clazz,name,sig);
include/jni_apache/jni.h:        return functions->GetStaticObjectField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticBooleanField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticByteField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticCharField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticShortField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticIntField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticLongField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticFloatField(this,clazz,fieldID);
include/jni_apache/jni.h:        return functions->GetStaticDoubleField(this,clazz,fieldID);
include/jni_apache/jni.h:      functions->SetStaticObjectField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticBooleanField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticByteField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticCharField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticShortField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticIntField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticLongField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticFloatField(this,clazz,fieldID,value);
include/jni_apache/jni.h:      functions->SetStaticDoubleField(this,clazz,fieldID,value);
include/jni_apache/jni.h:        return functions->NewString(this,unicode,len);
include/jni_apache/jni.h:        return functions->GetStringLength(this,str);
include/jni_apache/jni.h:        return functions->GetStringChars(this,str,isCopy);
include/jni_apache/jni.h:        functions->ReleaseStringChars(this,str,chars);
include/jni_apache/jni.h:        return functions->NewStringUTF(this,utf);
include/jni_apache/jni.h:        return functions->GetStringUTFLength(this,str);
include/jni_apache/jni.h:        return functions->GetStringUTFChars(this,str,isCopy);
include/jni_apache/jni.h:        functions->ReleaseStringUTFChars(this,str,chars);
include/jni_apache/jni.h:        return functions->GetArrayLength(this,array);
include/jni_apache/jni.h:        return functions->NewObjectArray(this,len,clazz,init);
include/jni_apache/jni.h:        return functions->GetObjectArrayElement(this,array,index);
include/jni_apache/jni.h:        functions->SetObjectArrayElement(this,array,index,val);
include/jni_apache/jni.h:        return functions->NewBooleanArray(this,len);
include/jni_apache/jni.h:        return functions->NewByteArray(this,len);
include/jni_apache/jni.h:        return functions->NewCharArray(this,len);
include/jni_apache/jni.h:        return functions->NewShortArray(this,len);
include/jni_apache/jni.h:        return functions->NewIntArray(this,len);
include/jni_apache/jni.h:        return functions->NewLongArray(this,len);
include/jni_apache/jni.h:        return functions->NewFloatArray(this,len);
include/jni_apache/jni.h:        return functions->NewDoubleArray(this,len);
include/jni_apache/jni.h:        return functions->GetBooleanArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        return functions->GetByteArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        return functions->GetCharArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        return functions->GetShortArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        return functions->GetIntArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        return functions->GetLongArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        return functions->GetFloatArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        return functions->GetDoubleArrayElements(this,array,isCopy);
include/jni_apache/jni.h:        functions->ReleaseBooleanArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->ReleaseByteArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->ReleaseCharArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->ReleaseShortArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->ReleaseIntArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->ReleaseLongArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->ReleaseFloatArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->ReleaseDoubleArrayElements(this,array,elems,mode);
include/jni_apache/jni.h:        functions->GetBooleanArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->GetByteArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->GetCharArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->GetShortArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->GetIntArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->GetLongArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->GetFloatArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->GetDoubleArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetBooleanArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetByteArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetCharArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetShortArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetIntArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetLongArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetFloatArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        functions->SetDoubleArrayRegion(this,array,start,len,buf);
include/jni_apache/jni.h:        return functions->RegisterNatives(this,clazz,methods,nMethods);
include/jni_apache/jni.h:        return functions->UnregisterNatives(this,clazz);
include/jni_apache/jni.h:        return functions->MonitorEnter(this,obj);
include/jni_apache/jni.h:        return functions->MonitorExit(this,obj);
include/jni_apache/jni.h:        return functions->GetJavaVM(this,vm);
include/jni_apache/jni.h:        functions->GetStringRegion(this, s, off, len, d);
include/jni_apache/jni.h:        functions->GetStringUTFRegion(this, s, off, len, d);
include/jni_apache/jni.h:        return functions->GetPrimitiveArrayCritical(this, array, isCopy);
include/jni_apache/jni.h:        functions->ReleasePrimitiveArrayCritical(this, array, carray, mode);
include/jni_apache/jni.h:        return functions->GetStringCritical(this, s, isCopy);
include/jni_apache/jni.h:        functions->ReleaseStringCritical(this, s, cstr);
include/jni_apache/jni.h:        return functions->NewWeakGlobalRef(this, obj);
include/jni_apache/jni.h:        functions->DeleteWeakGlobalRef(this, obj);
include/jni_apache/jni.h:        return functions->ExceptionCheck(this);
include/jni_apache/jni.h:        return functions->NewDirectByteBuffer(this, address, capacity);
include/jni_apache/jni.h:        return functions->GetDirectBufferAddress(this, buf);
include/jni_apache/jni.h:        return functions->GetDirectBufferCapacity(this, buf);
include/jni_apache/jni.h:    jint (JNICALL *DestroyJavaVM)(JavaVM*);
include/jni_apache/jni.h:    jint (JNICALL *AttachCurrentThread)(JavaVM*, void** penv, void* args);
include/jni_apache/jni.h:    jint (JNICALL *DetachCurrentThread)(JavaVM*);
include/jni_apache/jni.h:    jint (JNICALL *GetEnv)(JavaVM*, void** penv, jint ver);
include/jni_apache/jni.h:    jint (JNICALL *AttachCurrentThreadAsDaemon)(JavaVM*, void** penv, void* args);
include/jni_apache/jni.h:        return functions->DestroyJavaVM(this);
include/jni_apache/jni.h:        return functions->AttachCurrentThread(this, penv, args);
include/jni_apache/jni.h:        return functions->DetachCurrentThread(this);
include/jni_apache/jni.h:        return functions->GetEnv(this, penv, ver);
include/jni_apache/jni.h:        return functions->AttachCurrentThreadAsDaemon(this, penv, args);
include/jni_apache/jni.h:_JNI_EXPORT_ jint JNICALL JNI_GetDefaultJavaVMInitArgs(void * vm_args);
include/jni_apache/jni.h:                                                jsize * nVMs);
include/jni_apache/jni.h:                                           void * vm_args);
include/jni_apache/jni_types.h: *  (the "License"); you may not use this file except in compliance with
include/vxsys/vxsyscall.h:#define VXSYSCALL_PRINTSTR		4096	// print(char *str);	//ecx=str
include/vxsys/vxsyscall.h:#define VXSYSCALL_MALLOC		4097	// malloc(int sz);
include/vxsys/vxsyscall.h:#define VXSYSCALL_FREE			4098	// free(void *ptr);
include/vxsys/vxsyscall.h:#define VXSYSCALL_READ			4099	// read(int fd, void *buf, int sz);
include/vxsys/vxsyscall.h:#define VXSYSCALL_WRITE			4100	// write(int fd, void *buf, int sz);
include/vxsys/vxsyscall.h:#define VXSYSCALL_OPEN			4101	// open(char *name, int flag, int mode);
include/vxsys/vxsyscall.h:#define VXSYSCALL_CLOSE			4102	// close(int fd);
include/vxsys/vxsyscall.h:#define VXSYSCALL_LSEEK			4103	// lseek(int fd, int offs, int mode);
include/vxsys/vxsyscall.h:#define VXSYSCALL_UNLINK		4104	// unlink(char *fd);
include/vxsys/vxsyscall.h:#define VXSYSCALL_FORK			4105	// fork();
include/vxsys/vxsyscall.h:#define VXSYSCALL_EXIT			4106	// exit(int ret);
include/vxsys/vxsyscall.h:#define VXSYSCALL_LLSEEK		4107	// llseek(int fd, s64 offs, int mode);
include/vxsys/vxsyscall.h:#define VXSYSCALL_LOADLIBRARY		4108	// HMODULE LoadLibrary(char *name);
include/vxsys/vxsyscall.h:#define VXSYSCALL_GETPROCADDRESS	4109	// LPVOID GetProcAddress(HMODULE lib, char *name);
include/vxsys/vxsyscall.h:#define VXSYSCALL_GETMODULEHANDLE	4110	// HMODULE GetModuleHandle(char *name);
include/vxsys/vxsyscall.h:#define VXSYSCALL_NATIVECALL		4111	// NativeCall(char *name, void *args);
include/vxsys/vxsyscall.h:#define VXSYSCALL_NATIVECALL2		4112	// NativeCall2(char *name, char *sig, void *args);
include/vxsys/vxsyscall.h:#define VXSYSCALL_METAGETKEY		4113	// char *MetaGetKey(char *key);
include/vxsys/vxsyscall.h:#define VXSYSCALL_METASETKEY		4114	// int MetaSetKey(char *key, char *val);
include/vxsys/vxsyscall.h:#define VXSYSCALL_INTTAB		4127	// IntTab(int idx, s64 *args, int nargs);
include/vxsys/vxsyscall.h:#define VXSYSCALL_EOF			4128	// int eof(int fd);
include/vxsys/vxsyscall.h:#define VXSYSCALL_TELL			4129	// long tell(int fd);
include/vxsys/vxsyscall.h:#define VXSYSCALL_IOCTL			4130	// int ioctl(int fd, int req, char *argp);
include/vxsys/vxsyscall.h:#define VXSYSCALL_OPENDIR		4131	// void *opendir(char *name);
include/vxsys/vxsyscall.h:#define VXSYSCALL_CLOSEDIR		4132	// void closedir(void *hdl);
include/vxsys/vxsyscall.h:#define VXSYSCALL_READDIR		4133	// char *readdir(void *hdl);
include/vxsys/vxsyscall.h:#define VXSYSCALL_REWINDDIR		4134	// void rewinddir(void *hdl);
include/vxsys/vxsyscall.h:#define VXSYSCALL_MMAP			4135	// void *mmap(void *addr, size_t len, ...);
include/vxsys/vxsyscall.h:#define VXSYSCALL_MPROTECT		4136	// void mprotect(void *addr, size_t len, int prot);
include/vxsys/vxsyscall.h:#define VXSYSCALL_MSYNC			4137	// void msync(void *addr, size_t len, int flag);
include/vxsys/vxsyscall.h:#define VXSYSCALL_MUNMAP		4138	// void munmap(void *addr, size_t len);
include/vxsys/vxsyscall.h:#define VXSYSCALL_TIMENS		4139	// int vx_timens(s64 *rsec, s32 *nsec);
include/vxsys/vxsyscall.h:#define VXSYSCALL_NSLEEP		4140	// int vx_nsleep(s64 nsec);
include/vxsys/vxclass.h:int dycObjectP(dyt obj);
include/vxsys/vxclass.h:int dycClassP(dyt obj);
include/vxsys/vxclass.h:int dycSlotP(dyt obj);
include/vxsys/vxclass.h:int dycMethodP(dyt obj);
include/vxsys/vxclass.h:void dycBeginClass(char *name, char *super);
include/vxsys/vxclass.h:dycClass dycEndClass();
include/vxsys/vxclass.h:void dycBeginClassAnon(dycClass super);
include/vxsys/vxclass.h:dycClass dycEndClassAnon();
include/vxsys/vxclass.h:void dycClassSuper(char *name);
include/vxsys/vxclass.h:void dycSlotBasic(char *name, char *sig);
include/vxsys/vxclass.h:void dycSlotStatic(char *name, char *sig);
include/vxsys/vxclass.h:void dycSlotInit(char *name, char *sig);
include/vxsys/vxclass.h:void dycSlotStatici(char *name, char *sig, int val);
include/vxsys/vxclass.h:void dycSlotStaticl(char *name, char *sig, s64 val);
include/vxsys/vxclass.h:void dycSlotStaticf(char *name, char *sig, double val);
include/vxsys/vxclass.h:void dycSlotStaticd(char *name, char *sig, double val);
include/vxsys/vxclass.h:void dycSlotStaticU(char *name, char *sig, void *val);
include/vxsys/vxclass.h:void dycSlotIniti(char *name, char *sig, int val);
include/vxsys/vxclass.h:void dycSlotInitl(char *name, char *sig, s64 val);
include/vxsys/vxclass.h:void dycSlotInitf(char *name, char *sig, double val);
include/vxsys/vxclass.h:void dycSlotInitd(char *name, char *sig, double val);
include/vxsys/vxclass.h:void dycSlotInitU(char *name, char *sig, void *val);
include/vxsys/vxclass.h:void dycSlotDelegate(char *name, char *cname);
include/vxsys/vxclass.h:void dycSlotStaticDelegate(char *name, char *cname);
include/vxsys/vxclass.h:void dycMethodBasic(char *name, char *sig);
include/vxsys/vxclass.h:void dycMethodStatic(char *name, char *sig);
include/vxsys/vxclass.h:void dycMethodFunc(char *name, char *sig, dyt fcn);
include/vxsys/vxclass.h:void dycMethodStaticFunc(char *name, char *sig, dyt fcn);
include/vxsys/vxclass.h:void dycMethodCFunc(char *name, char *sig, void *fcn);
include/vxsys/vxclass.h:void dycMethodCFuncData(char *name, char *sig, void *fcn, void *data);
include/vxsys/vxclass.h:void dycMethodCSelf(char *name, char *sig, void *fcn);
include/vxsys/vxclass.h:void dycMethodCSelfData(char *name, char *sig, void *fcn, void *data);
include/vxsys/vxclass.h:void dycMethodStaticCFunc(char *name, char *sig, void *fcn);
include/vxsys/vxclass.h:void dycMethodStaticCFuncData(char *name, char *sig, void *fcn, void *data);
include/vxsys/vxclass.h:void dycMethodStaticCSelf(char *name, char *sig, void *fcn);
include/vxsys/vxclass.h:void dycMethodStaticCSelfData(char *name, char *sig, void *fcn, void *data);
include/vxsys/vxclass.h:void dycSlotMethod(char *name, char *sig);
include/vxsys/vxclass.h:void dycStaticSlotMethod(char *name, char *sig);
include/vxsys/vxclass.h:void dycClassInterface(char *name);
include/vxsys/vxclass.h:void dycBeginIface(char *name, char *super);
include/vxsys/vxclass.h:dycClass dycEndIface();
include/vxsys/vxclass.h:void dycIfaceSuper(char *name);
include/vxsys/vxclass.h:void dycIfaceMethod(char *name, char *sig);
include/vxsys/vxclass.h:void dycIfaceSlot(char *name, char *sig);
include/vxsys/vxclass.h:void dycBeginStruct(char *name);
include/vxsys/vxclass.h:dycClass dycEndStruct();
include/vxsys/vxclass.h:dycClass dycGetClass(char *name);
include/vxsys/vxclass.h:dycObject dycAlloc(dycClass inf);
include/vxsys/vxclass.h:int dycSubclassP(dycClass info, dycClass super);
include/vxsys/vxclass.h:int dycInstanceP(dycObject obj, dycClass inf);
include/vxsys/vxclass.h:dycClass dycGetObjClass(dycObject obj);
include/vxsys/vxclass.h:dycClass dycGetClassSuper(dycClass inf);
include/vxsys/vxclass.h:char *dycGetClassName(dycClass inf);
include/vxsys/vxclass.h:char *dycGetObjClassName(dycObject obj);
include/vxsys/vxclass.h:dycClassV dycGetClassVersion(dycClass inf);
include/vxsys/vxclass.h:int dycGetStructSize(dycClassV vinf);
include/vxsys/vxclass.h:dycClass dycGetVersionClass(dycClassV vinf);
include/vxsys/vxclass.h:char *dycGetSlotName(dycSlot idx);
include/vxsys/vxclass.h:char *dycGetSlotSig(dycSlot idx);
include/vxsys/vxclass.h:dycClass dycGetSlotClass(dycSlot idx);
include/vxsys/vxclass.h:char *dycGetMethodName(dycMethod idx);
include/vxsys/vxclass.h:char *dycGetMethodSig(dycMethod idx);
include/vxsys/vxclass.h:dycClass dycGetMethodClass(dycMethod idx);
include/vxsys/vxclass.h:dycSlot dycIdxSlot(dycClass info, char *name);
include/vxsys/vxclass.h:dycSlot dycIdxObjSlot(dycObject obj, char *name);
include/vxsys/vxclass.h:dycMethod dycIdxMethod(dycClass inf, char *name, char *sig);
include/vxsys/vxclass.h:dycMethod dycIdxObjMethod(dycObject obj, char *name, char *sig);
include/vxsys/vxclass.h:void *dycGetSlotPtr(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:void *dycGetInitPtr(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:void *dycGetStaticPtr(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:void *dycGetStructPtr(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:void *dycPtrSlot(dycObject obj, char *name);
include/vxsys/vxclass.h:void *dycPtrStaticSlot(dycClass info, char *name);
include/vxsys/vxclass.h:void *dycPtrInitSlot(dycClass info, char *name);
include/vxsys/vxclass.h:void *dycPtrStructSlot(dycClassV vinf, void *obj, char *name);
include/vxsys/vxclass.h:int dycInstanceOfP(dycObject obj, char *name);
include/vxsys/vxclass.h:int dycSubclassOfP(char *name, char *super);
include/vxsys/vxclass.h:dyt dycLookupMethodSig(dycObject obj, char *name, char *sig);
include/vxsys/vxclass.h:dyt dycGetMethodFunc(dycClass inf, dycMethod idx);
include/vxsys/vxclass.h:dyt dycGetObjMethodFunc(dycObject obj, dycMethod idx);
include/vxsys/vxclass.h:void dycSetMethodFunc(dycClass inf, dycMethod idx, dyt fcn);
include/vxsys/vxclass.h:void dycSetObjMethodFunc(dycObject obj, dycMethod idx, dyt fcn);
include/vxsys/vxclass.h:dycSlot dycAddObjSlot(dycObject obj, char *name, char *sig);
include/vxsys/vxclass.h:dycMethod dycAddObjMethod(dycObject obj, char *name, char *sig);
include/vxsys/vxclass.h:dycObject dycCloneObject(dycObject obj);
include/vxsys/vxclass.h:dycObject dycGetObjDelegate(dycObject obj, char *name);
include/vxsys/vxclass.h:void dycSetObjDelegate(dycObject obj, char *name, dycObject obj1);
include/vxsys/vxclass.h:dycSlot *dycEnumSlotArray(dycClass inf);
include/vxsys/vxclass.h:dycMethod *dycEnumMethodArray(dycClass inf);
include/vxsys/vxclass.h:dycSlot *dycEnumClassSlotArray(char *name);
include/vxsys/vxclass.h:dycMethod *dycEnumClassMethodArray(char *name);
include/vxsys/vxclass.h:dycObject dycAllocClass(char *name);
include/vxsys/vxclass.h:void *dycPtrClassSlot(char *cname, char *sname);
include/vxsys/vxclass.h:dycSlot dycIdxClassSlot(char *cname, char *sname);
include/vxsys/vxclass.h:dycMethod dycIdxClassMethod(char *cname, char *name, char *sig);
include/vxsys/vxclass.h:dyt dycGetSlot(dycObject obj, char *name);
include/vxsys/vxclass.h:dyt dycGetSlotr(dycObject obj, char *name);
include/vxsys/vxclass.h:void *dycGetSlotp(dycObject obj, char *name);
include/vxsys/vxclass.h:int dycGetSlotsb(dycObject obj, char *name);
include/vxsys/vxclass.h:int dycGetSlotub(dycObject obj, char *name);
include/vxsys/vxclass.h:int dycGetSlotss(dycObject obj, char *name);
include/vxsys/vxclass.h:int dycGetSlotus(dycObject obj, char *name);
include/vxsys/vxclass.h:int dycGetSloti(dycObject obj, char *name);
include/vxsys/vxclass.h:s64 dycGetSlotl(dycObject obj, char *name);
include/vxsys/vxclass.h:float dycGetSlotf(dycObject obj, char *name);
include/vxsys/vxclass.h:double dycGetSlotd(dycObject obj, char *name);
include/vxsys/vxclass.h:int dycSetSlot(dycObject obj, char *name, dyt val);
include/vxsys/vxclass.h:int dycSetSlotr(dycObject obj, char *name, dyt val);
include/vxsys/vxclass.h:int dycSetSlotp(dycObject obj, char *name, void *val);
include/vxsys/vxclass.h:int dycSetSlotsb(dycObject obj, char *name, int val);
include/vxsys/vxclass.h:int dycSetSlotub(dycObject obj, char *name, int val);
include/vxsys/vxclass.h:int dycSetSlotss(dycObject obj, char *name, int val);
include/vxsys/vxclass.h:int dycSetSlotus(dycObject obj, char *name, int val);
include/vxsys/vxclass.h:int dycSetSloti(dycObject obj, char *name, int val);
include/vxsys/vxclass.h:int dycSetSlotl(dycObject obj, char *name, s64 val);
include/vxsys/vxclass.h:int dycSetSlotf(dycObject obj, char *name, float val);
include/vxsys/vxclass.h:int dycSetSlotd(dycObject obj, char *name, double val);
include/vxsys/vxclass.h:int dycGetsb(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGetub(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGetss(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGetus(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGeti(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:s64 dycGetl(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:float dycGetf(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:double dycGetd(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:dyt dycGetr(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:void *dycGetp(dycObject obj, dycSlot idx);
include/vxsys/vxclass.h:void dycSetsb(dycObject obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetub(dycObject obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetss(dycObject obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetus(dycObject obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSeti(dycObject obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetl(dycObject obj, dycSlot idx, s64 val);
include/vxsys/vxclass.h:void dycSetf(dycObject obj, dycSlot idx, float val);
include/vxsys/vxclass.h:void dycSetd(dycObject obj, dycSlot idx, double val);
include/vxsys/vxclass.h:void dycSetr(dycObject obj, dycSlot idx, dyt val);
include/vxsys/vxclass.h:void dycSetp(dycObject obj, dycSlot idx, void *val);
include/vxsys/vxclass.h:int dycGetStaticsb(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStaticub(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStaticss(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStaticus(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStatici(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:s64 dycGetStaticl(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:float dycGetStaticf(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:double dycGetStaticd(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:dyt dycGetStaticr(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:void *dycGetStaticp(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:void dycSetStaticsb(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStaticub(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStaticss(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStaticus(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStatici(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStaticl(dycClass inf, dycSlot idx, s64 val);
include/vxsys/vxclass.h:void dycSetStaticf(dycClass inf, dycSlot idx, float val);
include/vxsys/vxclass.h:void dycSetStaticd(dycClass inf, dycSlot idx, double val);
include/vxsys/vxclass.h:void dycSetStaticr(dycClass inf, dycSlot idx, dyt val);
include/vxsys/vxclass.h:void dycSetStaticp(dycClass inf, dycSlot idx, void *val);
include/vxsys/vxclass.h:int dycGetInitsb(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetInitub(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetInitss(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetInitus(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:int dycGetIniti(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:s64 dycGetInitl(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:float dycGetInitf(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:double dycGetInitd(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:dyt dycGetInitr(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:void *dycGetInitp(dycClass inf, dycSlot idx);
include/vxsys/vxclass.h:void dycSetInitsb(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetInitub(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetInitss(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetInitus(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetIniti(dycClass inf, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetInitl(dycClass inf, dycSlot idx, s64 val);
include/vxsys/vxclass.h:void dycSetInitf(dycClass inf, dycSlot idx, float val);
include/vxsys/vxclass.h:void dycSetInitd(dycClass inf, dycSlot idx, double val);
include/vxsys/vxclass.h:void dycSetInitr(dycClass inf, dycSlot idx, dyt val);
include/vxsys/vxclass.h:void dycSetInitp(dycClass inf, dycSlot idx, void *val);
include/vxsys/vxclass.h:int dycGetStructsb(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStructub(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStructss(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStructus(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:int dycGetStructi(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:s64 dycGetStructl(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:float dycGetStructf(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:double dycGetStructd(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:dyt dycGetStructr(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:void *dycGetStructp(dycClassV vinf, void *obj, dycSlot idx);
include/vxsys/vxclass.h:void dycSetStructsb(dycClassV vinf, void *obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStructub(dycClassV vinf, void *obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStructss(dycClassV vinf, void *obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStructus(dycClassV vinf, void *obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStructi(dycClassV vinf, void *obj, dycSlot idx, int val);
include/vxsys/vxclass.h:void dycSetStructl(dycClassV vinf, void *obj, dycSlot idx, s64 val);
include/vxsys/vxclass.h:void dycSetStructf(dycClassV vinf, void *obj, dycSlot idx, float val);
include/vxsys/vxclass.h:void dycSetStructd(dycClassV vinf, void *obj, dycSlot idx, double val);
include/vxsys/vxclass.h:void dycSetStructr(dycClassV vinf, void *obj, dycSlot idx, dyt val);
include/vxsys/vxclass.h:void dycSetStructp(dycClassV vinf, void *obj, dycSlot idx, void *val);
include/vxsys/vxclass.h:dycObject dycNewClass(char *name);
include/vxsys/vxclass.h:dycObject dycNewInitClass(char *name, char *sig, ...);
include/vxsys/vxclass.h:dycObject dycNewInitClassV(char *name, char *sig, va_list args);
include/vxsys/vxclass.h:dycObject dycNewInitClassU(char *name, char *sig, void **args);
include/vxsys/vxclass.h:dycObject dycNew(dycClass inf);
include/vxsys/vxclass.h:dycObject dycNewInit(dycClass inf, char *sig, ...);
include/vxsys/vxclass.h:dycObject dycNewInitV(dycClass inf, char *sig, va_list args);
include/vxsys/vxclass.h:dycObject dycNewInitU(dycClass inf, char *sig, void **args);
include/vxsys/vxclass.h:void *dycCallSigU(dycObject obj, char *name, char *sig, void **args);
include/vxsys/vxclass.h:void *dycCallSigV(dycObject obj, char *name, char *sig, va_list args);
include/vxsys/vxclass.h:void *dycCallSig(dycObject obj, char *name, char *sig, ...);
include/vxsys/vxclass.h:dyt dycCallSigVr(dycObject obj, char *name, char *sig, va_list lst);
include/vxsys/vxclass.h:int dycCallSigVi(dycObject obj, char *name, char *sig, va_list lst);
include/vxsys/vxclass.h:s64 dycCallSigVl(dycObject obj, char *name, char *sig, va_list lst);
include/vxsys/vxclass.h:float dycCallSigVf(dycObject obj, char *name, char *sig, va_list lst);
include/vxsys/vxclass.h:double dycCallSigVd(dycObject obj, char *name, char *sig, va_list lst);
include/vxsys/vxclass.h:dyt dycCallSigUr(dycObject obj, char *name, char *sig, void **args);
include/vxsys/vxclass.h:int dycCallSigUi(dycObject obj, char *name, char *sig, void **args);
include/vxsys/vxclass.h:s64 dycCallSigUl(dycObject obj, char *name, char *sig, void **args);
include/vxsys/vxclass.h:float dycCallSigUf(dycObject obj, char *name, char *sig, void **args);
include/vxsys/vxclass.h:double dycCallSigUd(dycObject obj, char *name, char *sig, void **args);
include/vxsys/vxclass.h:int dycCallSigi(dycObject obj, char *name, char *sig, ...);
include/vxsys/vxclass.h:s64 dycCallSigl(dycObject obj, char *name, char *sig, ...);
include/vxsys/vxclass.h:float dycCallSigf(dycObject obj, char *name, char *sig, ...);
include/vxsys/vxclass.h:double dycCallSigd(dycObject obj, char *name, char *sig, ...);
include/vxsys/vxclass.h:void *dycCallU(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallV(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCall(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:int dycCallUi(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:s64 dycCallUl(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:float dycCallUf(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:double dycCallUd(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:dyt dycCallUr(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallUp(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:void dycCallUv(dycObject obj, dycMethod mth, void **args);
include/vxsys/vxclass.h:int dycCallVi(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:s64 dycCallVl(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:float dycCallVf(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:double dycCallVd(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:dyt dycCallVr(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCallVp(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void dycCallVv(dycObject obj, dycMethod mth, va_list args);
include/vxsys/vxclass.h:int dycCalli(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:s64 dycCalll(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:float dycCallf(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:double dycCalld(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:dyt dycCallr(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:void *dycCallp(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:void dycCallv(dycObject obj, dycMethod mth, ...);
include/vxsys/vxclass.h:void *dycCallStaticU(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallStaticV(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCallStatic(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:int dycCallStaticUi(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:s64 dycCallStaticUl(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:float dycCallStaticUf(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:double dycCallStaticUd(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:dyt dycCallStaticUr(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallStaticUp(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void dycCallStaticUv(dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:int dycCallStaticVi(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:s64 dycCallStaticVl(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:float dycCallStaticVf(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:double dycCallStaticVd(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:dyt dycCallStaticVr(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCallStaticVp(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void dycCallStaticVv(dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:int dycCallStatici(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:s64 dycCallStaticl(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:float dycCallStaticf(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:double dycCallStaticd(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:dyt dycCallStaticr(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:void *dycCallStaticp(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:void dycCallStaticv(dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:void *dycCallAsU(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallAsV(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCallAs(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:int dycCallAsUi(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:s64 dycCallAsUl(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:float dycCallAsUf(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:double dycCallAsUd(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:dyt dycCallAsUr(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallAsUp(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void dycCallAsUv(dycObject obj, dycClass inf, dycMethod mth, void **args);
include/vxsys/vxclass.h:int dycCallAsVi(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:s64 dycCallAsVl(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:float dycCallAsVf(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:double dycCallAsVd(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:dyt dycCallAsVr(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCallAsVp(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void dycCallAsVv(dycObject obj, dycClass inf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:int dycCallAsi(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:s64 dycCallAsl(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:float dycCallAsf(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:double dycCallAsd(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:dyt dycCallAsr(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:void *dycCallAsp(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:void dycCallAsv(dycObject obj, dycClass inf, dycMethod mth, ...);
include/vxsys/vxclass.h:void *dycCallStructU(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallStructV(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCallStruct(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:int dycCallStructUi(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:s64 dycCallStructUl(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:float dycCallStructUf(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:double dycCallStructUd(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:dyt dycCallStructUr(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void *dycCallStructUp(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:void dycCallStructUv(void *obj, dycClassV vinf, dycMethod mth, void **args);
include/vxsys/vxclass.h:int dycCallStructVi(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:s64 dycCallStructVl(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:float dycCallStructVf(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:double dycCallStructVd(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:dyt dycCallStructVr(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void *dycCallStructVp(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:void dycCallStructVv(void *obj, dycClassV vinf, dycMethod mth, va_list args);
include/vxsys/vxclass.h:int dycCallStructi(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:s64 dycCallStructl(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:float dycCallStructf(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:double dycCallStructd(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:dyt dycCallStructr(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:void *dycCallStructp(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:void dycCallStructv(void *obj, dycClassV vinf, dycMethod mth, ...);
include/vxsys/vxclass.h:dycArray dycNewArray(char *sig, int cnt);
include/vxsys/vxclass.h:int dycArrayP(dyt p);
include/vxsys/vxclass.h:int dycArraySigP(dyt p, char *sig);
include/vxsys/vxclass.h:void *dycArrayV(dycArray arr);
include/vxsys/vxclass.h:int dycArraySz(dycArray arr);
include/vxsys/vxclass.h:char *dycArraySig(dycArray arr);
include/vxsys/vxclass.h:int dycArrayStep(dycArray arr);
include/vxsys/vxclass.h:void *dycArrayIdxPtr(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArraysb(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArrayub(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArrayss(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArrayus(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArrayi(dycArray arr, int idx);
include/vxsys/vxclass.h:s64 dycGetArrayl(dycArray arr, int idx);
include/vxsys/vxclass.h:float dycGetArrayf(dycArray arr, int idx);
include/vxsys/vxclass.h:double dycGetArrayd(dycArray arr, int idx);
include/vxsys/vxclass.h:dyt dycGetArrayr(dycArray arr, int idx);
include/vxsys/vxclass.h:void *dycGetArrayp(dycArray arr, int idx);
include/vxsys/vxclass.h:void dycSetArraysb(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArrayub(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArrayss(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArrayus(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArrayi(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArrayl(dycArray arr, int idx, s64 val);
include/vxsys/vxclass.h:void dycSetArrayf(dycArray arr, int idx, float val);
include/vxsys/vxclass.h:void dycSetArrayd(dycArray arr, int idx, double val);
include/vxsys/vxclass.h:void dycSetArrayr(dycArray arr, int idx, dyt val);
include/vxsys/vxclass.h:void dycSetArrayp(dycArray arr, int idx, void *val);
include/vxsys/vxclass.h:void *dycArrayIdxPtrBC(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArraySsb(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArraySub(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArraySss(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArraySus(dycArray arr, int idx);
include/vxsys/vxclass.h:int dycGetArraySi(dycArray arr, int idx);
include/vxsys/vxclass.h:s64 dycGetArraySl(dycArray arr, int idx);
include/vxsys/vxclass.h:float dycGetArraySf(dycArray arr, int idx);
include/vxsys/vxclass.h:double dycGetArraySd(dycArray arr, int idx);
include/vxsys/vxclass.h:dyt dycGetArraySr(dycArray arr, int idx);
include/vxsys/vxclass.h:void *dycGetArraySp(dycArray arr, int idx);
include/vxsys/vxclass.h:void dycSetArraySsb(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArraySub(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArraySss(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArraySus(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArraySi(dycArray arr, int idx, int val);
include/vxsys/vxclass.h:void dycSetArraySl(dycArray arr, int idx, s64 val);
include/vxsys/vxclass.h:void dycSetArraySf(dycArray arr, int idx, float val);
include/vxsys/vxclass.h:void dycSetArraySd(dycArray arr, int idx, double val);
include/vxsys/vxclass.h:void dycSetArraySr(dycArray arr, int idx, dyt val);
include/vxsys/vxclass.h:void dycSetArraySp(dycArray arr, int idx, void *val);
include/vxsys/vxclass.h:dycArray DYC_NewArrayM_R(char *sig, int ord, int *sz);
include/vxsys/vxclass.h:dycArray dycNewArrayM(char *sig, int ord, int *sz);
include/vxsys/vxclass.h:dycArray dycNewArrayM2(char *sig, int sz0, int sz1);
include/vxsys/vxclass.h:dycArray dycNewArrayM3(char *sig, int sz0, int sz1, int sz2);
include/vxsys/vxclass.h:dycArray dycNewArrayM4(char *sig, int sz0, int sz1, int sz2, int sz3);
include/vxsys/vxclass.h:dycArray dycNewArrayM5(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4);
include/vxsys/vxclass.h:dycArray dycNewArrayM6(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5);
include/vxsys/vxclass.h:dycArray dycNewArrayM7(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6);
include/vxsys/vxclass.h:dycArray dycNewArrayM8(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7);
include/vxsys/vxclass.h:dycArray dycNewArrayM9(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8);
include/vxsys/vxclass.h:dycArray dycNewArrayM10(char *sig,int sz0, int sz1, int sz2, int sz3, int sz4, int sz5, int sz6, int sz7, int sz8, int sz9);
include/vxsys/vxclass.h:dycArray dycNewArrayM11(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10);
include/vxsys/vxclass.h:dycArray dycNewArrayM12(char *sig,int sz0, int sz1, int sz2 , int sz3, int sz4, int sz5, int sz6 , int sz7, int sz8, int sz9, int sz10, int sz11);
include/vxsys/vxclass.h:dycArrayN dycNewArrayN(char *sig, int ord, int *sz);
include/vxsys/vxclass.h:int dycArrayNP(dyt p);
include/vxsys/vxclass.h:int dycArrayNSigP(dyt p, char *sig);
include/vxsys/vxclass.h:int dycArrayNSigOrdP(dyt p, char *sig, int ord);
include/vxsys/vxclass.h:void *dycArrayNV(dycArrayN arr);
include/vxsys/vxclass.h:int *dycArrayNSz(dycArrayN arr);
include/vxsys/vxclass.h:int dycArrayNCnt(dycArrayN arr);
include/vxsys/vxclass.h:int dycArrayNOrd(dycArrayN arr);
include/vxsys/vxclass.h:char *dycArrayNSig(dycArrayN arr);
include/vxsys/vxclass.h:int dycArrayNStep(dycArrayN arr);
include/vxsys/vxclass.h:void *dycArrayNIdxPtr(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:void *dycArrayNIdxPtrBC(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNsb(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNub(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNss(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNus(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNi(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:s64 dycGetArrayNl(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:float dycGetArrayNf(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:double dycGetArrayNd(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:dyt dycGetArrayNr(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:void *dycGetArrayNp(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:void dycSetArrayNsb(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNub(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNss(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNus(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNi(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNl(dycArrayN arr, int *idx, s64 val);
include/vxsys/vxclass.h:void dycSetArrayNf(dycArrayN arr, int *idx, float val);
include/vxsys/vxclass.h:void dycSetArrayNd(dycArrayN arr, int *idx, double val);
include/vxsys/vxclass.h:void dycSetArrayNr(dycArrayN arr, int *idx, dyt val);
include/vxsys/vxclass.h:void dycSetArrayNp(dycArrayN arr, int *idx, void *val);
include/vxsys/vxclass.h:int dycGetArrayNSsb(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNSub(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNSss(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNSus(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:int dycGetArrayNSi(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:s64 dycGetArrayNSl(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:float dycGetArrayNSf(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:double dycGetArrayNSd(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:dyt dycGetArrayNSr(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:void *dycGetArrayNSp(dycArrayN arr, int *idx);
include/vxsys/vxclass.h:void dycSetArrayNSsb(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNSub(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNSss(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNSus(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNSi(dycArrayN arr, int *idx, int val);
include/vxsys/vxclass.h:void dycSetArrayNSl(dycArrayN arr, int *idx, s64 val);
include/vxsys/vxclass.h:void dycSetArrayNSf(dycArrayN arr, int *idx, float val);
include/vxsys/vxclass.h:void dycSetArrayNSd(dycArrayN arr, int *idx, double val);
include/vxsys/vxclass.h:void dycSetArrayNSr(dycArrayN arr, int *idx, dyt val);
include/vxsys/vxclass.h:void dycSetArrayNSp(dycArrayN arr, int *idx, void *val);
include/vxsys/vxclass.h:void *dycArray2IdxPtr(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:void *dycArray2IdxPtrBC(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2sb(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2ub(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2ss(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2us(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2i(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:s64 dycGetArray2l(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:float dycGetArray2f(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:double dycGetArray2d(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:dyt dycGetArray2r(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:void *dycGetArray2p(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:void dycSetArray2sb(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2ub(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2ss(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2us(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2i(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2l(dycArrayN arr, int y, int x, s64 val);
include/vxsys/vxclass.h:void dycSetArray2f(dycArrayN arr, int y, int x, float val);
include/vxsys/vxclass.h:void dycSetArray2d(dycArrayN arr, int y, int x, double val);
include/vxsys/vxclass.h:void dycSetArray2r(dycArrayN arr, int y, int x, dyt val);
include/vxsys/vxclass.h:void dycSetArray2p(dycArrayN arr, int y, int x, void *val);
include/vxsys/vxclass.h:int dycGetArray2Ssb(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2Sub(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2Sss(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2Sus(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:int dycGetArray2Si(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:s64 dycGetArray2Sl(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:float dycGetArray2Sf(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:double dycGetArray2Sd(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:dyt dycGetArray2Sr(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:void *dycGetArray2Sp(dycArrayN arr, int y, int x);
include/vxsys/vxclass.h:void dycSetArray2Ssb(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2Sub(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2Sss(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2Sus(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2Si(dycArrayN arr, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray2Sl(dycArrayN arr, int y, int x, s64 val);
include/vxsys/vxclass.h:void dycSetArray2Sf(dycArrayN arr, int y, int x, float val);
include/vxsys/vxclass.h:void dycSetArray2Sd(dycArrayN arr, int y, int x, double val);
include/vxsys/vxclass.h:void dycSetArray2Sr(dycArrayN arr, int y, int x, dyt val);
include/vxsys/vxclass.h:void dycSetArray2Sp(dycArrayN arr, int y, int x, void *val);
include/vxsys/vxclass.h:void *dycArray3IdxPtr(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:void *dycArray3IdxPtrBC(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3sb(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3ub(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3ss(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3us(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3i(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:s64 dycGetArray3l(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:float dycGetArray3f(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:double dycGetArray3d(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:dyt dycGetArray3r(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:void *dycGetArray3p(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:void dycSetArray3sb(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3ub(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3ss(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3us(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3i(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3l(dycArrayN arr, int z, int y, int x, s64 val);
include/vxsys/vxclass.h:void dycSetArray3f(dycArrayN arr, int z, int y, int x, float val);
include/vxsys/vxclass.h:void dycSetArray3d(dycArrayN arr, int z, int y, int x, double val);
include/vxsys/vxclass.h:void dycSetArray3r(dycArrayN arr, int z, int y, int x, dyt val);
include/vxsys/vxclass.h:void dycSetArray3p(dycArrayN arr, int z, int y, int x, void *val);
include/vxsys/vxclass.h:int dycGetArray3Ssb(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3Sub(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3Sss(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3Sus(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:int dycGetArray3Si(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:s64 dycGetArray3Sl(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:float dycGetArray3Sf(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:double dycGetArray3Sd(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:dyt dycGetArray3Sr(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:void *dycGetArray3Sp(dycArrayN arr, int z, int y, int x);
include/vxsys/vxclass.h:void dycSetArray3Ssb(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3Sub(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3Sss(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3Sus(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3Si(dycArrayN arr, int z, int y, int x, int val);
include/vxsys/vxclass.h:void dycSetArray3Sl(dycArrayN arr, int z, int y, int x, s64 val);
include/vxsys/vxclass.h:void dycSetArray3Sf(dycArrayN arr, int z, int y, int x, float val);
include/vxsys/vxclass.h:void dycSetArray3Sd(dycArrayN arr, int z, int y, int x, double val);
include/vxsys/vxclass.h:void dycSetArray3Sr(dycArrayN arr, int z, int y, int x, dyt val);
include/vxsys/vxclass.h:void dycSetArray3Sp(dycArrayN arr, int z, int y, int x, void *val);
include/bgb_vm_Struct.h:  (JNIEnv *, jobject);
include/bgb_vm_Struct.h:  (JNIEnv *, jobject);
include/bgb_vm_Struct.h:  (JNIEnv *, jobject, jobject);
include/bgb_vm_Struct.h:  (JNIEnv *, jobject, jobject);
