/*"sal.h"1967*/ 
/*52*/ typedef unsigned int uintptr_t;
/*61*/ typedef char*va_list;
/*"crtdefs.h"478*/ typedef unsigned int size_t;
/*485*/ typedef size_t rsize_t;
/*494*/ typedef int intptr_t;
/*512*/ typedef int ptrdiff_t;
/*518*/ typedef unsigned short wchar_t;
/*523*/ typedef unsigned short wint_t;
/*524*/ typedef unsigned short wctype_t;
/*548*/ typedef int errcode;
/*553*/ typedef int errno_t;
/*557*/ typedef long __time32_t;
/*562*/ typedef __int64 __time64_t;
/*570*/ typedef __time64_t time_t;
/*2025*/ struct threadlocaleinfostruct;
/*2026*/ struct threadmbcinfostruct;
/*2027*/ typedef struct threadlocaleinfostruct*pthreadlocinfo;
/*2028*/ typedef struct threadmbcinfostruct*pthreadmbcinfo;
/*2029*/ struct __lc_time_data;
/*2031*/ typedef struct localeinfo_struct
/*2032*/ {
/*2033*/ pthreadlocinfo locinfo;
/*2034*/ pthreadmbcinfo mbcinfo;
/*2035*/ }_locale_tstruct,*_locale_t;
/*2038*/ typedef struct tagLC_ID{
/*2039*/ unsigned short wLanguage;
/*2040*/ unsigned short wCountry;
/*2041*/ unsigned short wCodePage;
/*2042*/ }LC_ID,*LPLC_ID;
/*2047*/ typedef struct threadlocaleinfostruct{
/*2048*/ int refcount;
/*2049*/ unsigned int lc_codepage;
/*2050*/ unsigned int lc_collate_cp;
/*2051*/ unsigned long lc_handle[6];
/*2052*/ LC_ID lc_id[6];
/*2053*/ struct{
/*2054*/ char*locale;
/*2055*/ wchar_t*wlocale;
/*2056*/ int*refcount;
/*2057*/ int*wrefcount;
/*2058*/ }lc_category[6];
/*2059*/ int lc_clike;
/*2060*/ int mb_cur_max;
/*2061*/ int*lconv_intl_refcount;
/*2062*/ int*lconv_num_refcount;
/*2063*/ int*lconv_mon_refcount;
/*2064*/ struct lconv*lconv;
/*2065*/ int*ctype1_refcount;
/*2066*/ unsigned short*ctype1;
/*2067*/ const unsigned short*pctype;
/*2068*/ const unsigned char*pclmap;
/*2069*/ const unsigned char*pcumap;
/*2070*/ struct __lc_time_data*lc_time_curr;
/*2071*/ }threadlocinfo;
/*"excpt.h"39*/ typedef enum _EXCEPTION_DISPOSITION{
/*40*/ ExceptionContinueExecution,
/*41*/ ExceptionContinueSearch,
/*42*/ ExceptionNestedException,
/*43*/ ExceptionCollidedUnwind
/*44*/ }EXCEPTION_DISPOSITION;
/*48*/ typedef unsigned long ULONG;
/*49*/ typedef ULONG*PULONG;
/*50*/ typedef unsigned short USHORT;
/*51*/ typedef USHORT*PUSHORT;
/*52*/ typedef unsigned char UCHAR;
/*53*/ typedef UCHAR*PUCHAR;
/*54*/ typedef char*PSZ;
/*152*/ typedef unsigned long DWORD;
/*153*/ typedef int BOOL;
/*154*/ typedef unsigned char BYTE;
/*155*/ typedef unsigned short WORD;
/*156*/ typedef float FLOAT;
/*157*/ typedef FLOAT*PFLOAT;
/*158*/ typedef BOOL*PBOOL;
/*159*/ typedef BOOL*LPBOOL;
/*160*/ typedef BYTE*PBYTE;
/*161*/ typedef BYTE*LPBYTE;
/*162*/ typedef int*PINT;
/*163*/ typedef int*LPINT;
/*164*/ typedef WORD*PWORD;
/*165*/ typedef WORD*LPWORD;
/*166*/ typedef long*LPLONG;
/*167*/ typedef DWORD*PDWORD;
/*168*/ typedef DWORD*LPDWORD;
/*169*/ typedef void*LPVOID;
/*170*/ typedef const void*LPCVOID;
/*172*/ typedef int INT;
/*173*/ typedef unsigned int UINT;
/*174*/ typedef unsigned int*PUINT;
/*"ctype.h"43*/ const unsigned short*__cdecl __pctype_func(void);
/*45*/ extern const unsigned short*_pctype;
/*56*/ extern const unsigned short _wctype[];
/*59*/ const wctype_t*__cdecl __pwctype_func(void);
/*61*/ extern const wctype_t*_pwctype;
/*94*/ int __cdecl _isctype(int _C,int _Type);
/*95*/ int __cdecl _isctype_l(int _C,int _Type,_locale_t _Locale);
/*96*/ int __cdecl isalpha(int _C);
/*97*/ int __cdecl _isalpha_l(int _C,_locale_t _Locale);
/*98*/ int __cdecl isupper(int _C);
/*99*/ int __cdecl _isupper_l(int _C,_locale_t _Locale);
/*100*/ int __cdecl islower(int _C);
/*101*/ int __cdecl _islower_l(int _C,_locale_t _Locale);
/*102*/ int __cdecl isdigit(int _C);
/*103*/ int __cdecl _isdigit_l(int _C,_locale_t _Locale);
/*104*/ int __cdecl isxdigit(int _C);
/*105*/ int __cdecl _isxdigit_l(int _C,_locale_t _Locale);
/*106*/ int __cdecl isspace(int _C);
/*107*/ int __cdecl _isspace_l(int _C,_locale_t _Locale);
/*108*/ int __cdecl ispunct(int _C);
/*109*/ int __cdecl _ispunct_l(int _C,_locale_t _Locale);
/*110*/ int __cdecl isalnum(int _C);
/*111*/ int __cdecl _isalnum_l(int _C,_locale_t _Locale);
/*112*/ int __cdecl isprint(int _C);
/*113*/ int __cdecl _isprint_l(int _C,_locale_t _Locale);
/*114*/ int __cdecl isgraph(int _C);
/*115*/ int __cdecl _isgraph_l(int _C,_locale_t _Locale);
/*116*/ int __cdecl iscntrl(int _C);
/*117*/ int __cdecl _iscntrl_l(int _C,_locale_t _Locale);
/*118*/ int __cdecl toupper(int _C);
/*119*/ int __cdecl tolower(int _C);
/*120*/ int __cdecl _tolower(int _C);
/*121*/ int __cdecl _tolower_l(int _C,_locale_t _Locale);
/*122*/ int __cdecl _toupper(int _C);
/*123*/ int __cdecl _toupper_l(int _C,_locale_t _Locale);
/*124*/ int __cdecl __isascii(int _C);
/*125*/ int __cdecl __toascii(int _C);
/*126*/ int __cdecl __iscsymf(int _C);
/*127*/ int __cdecl __iscsym(int _C);
/*137*/ int __cdecl iswalpha(wint_t _C);
/*138*/ int __cdecl _iswalpha_l(wint_t _C,_locale_t _Locale);
/*139*/ int __cdecl iswupper(wint_t _C);
/*140*/ int __cdecl _iswupper_l(wint_t _C,_locale_t _Locale);
/*141*/ int __cdecl iswlower(wint_t _C);
/*142*/ int __cdecl _iswlower_l(wint_t _C,_locale_t _Locale);
/*143*/ int __cdecl iswdigit(wint_t _C);
/*144*/ int __cdecl _iswdigit_l(wint_t _C,_locale_t _Locale);
/*145*/ int __cdecl iswxdigit(wint_t _C);
/*146*/ int __cdecl _iswxdigit_l(wint_t _C,_locale_t _Locale);
/*147*/ int __cdecl iswspace(wint_t _C);
/*148*/ int __cdecl _iswspace_l(wint_t _C,_locale_t _Locale);
/*149*/ int __cdecl iswpunct(wint_t _C);
/*150*/ int __cdecl _iswpunct_l(wint_t _C,_locale_t _Locale);
/*151*/ int __cdecl iswalnum(wint_t _C);
/*152*/ int __cdecl _iswalnum_l(wint_t _C,_locale_t _Locale);
/*153*/ int __cdecl iswprint(wint_t _C);
/*154*/ int __cdecl _iswprint_l(wint_t _C,_locale_t _Locale);
/*155*/ int __cdecl iswgraph(wint_t _C);
/*156*/ int __cdecl _iswgraph_l(wint_t _C,_locale_t _Locale);
/*157*/ int __cdecl iswcntrl(wint_t _C);
/*158*/ int __cdecl _iswcntrl_l(wint_t _C,_locale_t _Locale);
/*159*/ int __cdecl iswascii(wint_t _C);
/*160*/ int __cdecl isleadbyte(int _C);
/*161*/ int __cdecl _isleadbyte_l(int _C,_locale_t _Locale);
/*163*/ wint_t __cdecl towupper(wint_t _C);
/*164*/ wint_t __cdecl _towupper_l(wint_t _C,_locale_t _Locale);
/*165*/ wint_t __cdecl towlower(wint_t _C);
/*166*/ wint_t __cdecl _towlower_l(wint_t _C,_locale_t _Locale);
/*167*/ int __cdecl iswctype(wint_t _C,wctype_t _Type);
/*168*/ int __cdecl _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
/*170*/ int __cdecl __iswcsymf(wint_t _C);
/*171*/ int __cdecl _iswcsymf_l(wint_t _C,_locale_t _Locale);
/*172*/ int __cdecl __iswcsym(wint_t _C);
/*173*/ int __cdecl _iswcsym_l(wint_t _C,_locale_t _Locale);
/*175*/ int __cdecl is_wctype(wint_t _C,wctype_t _Type);
/*197*/ extern int __mb_cur_max;
/*201*/ int __cdecl ___mb_cur_max_func(void);
/*202*/ int __cdecl ___mb_cur_max_l_func(_locale_t);
/*267*/ 
/*268*/ typ
/*76*/ typedef signed char INT8,*PINT8;
/*77*/ typedef signed short INT16,*PINT16;
/*78*/ typedef signed int INT32,*PINT32;
/*79*/ typedef signed __int64 INT64,*PINT64;
/*80*/ typedef unsigned char UINT8,*PUINT8;
/*81*/ typedef unsigned short UINT16,*PUINT16;
/*82*/ typedef unsigned int UINT32,*PUINT32;
/*83*/ typedef unsigned __int64 UINT64,*PUINT64;
/*89*/ typedef signed int LONG32,*PLONG32;
/*95*/ typedef unsigned int ULONG32,*PULONG32;
/*96*/ typedef unsigned int DWORD32,*PDWORD32;
/*135*/ typedef typ int INT_PTR,*PINT_PTR;
/*136*/ typedef typ unsigned int UINT_PTR,*PUINT_PTR;
/*138*/ typedef typ long LONG_PTR,*PLONG_PTR;
/*139*/ typedef typ unsigned long ULONG_PTR,*PULONG_PTR;
/*334*/ typedef unsigned short UHALF_PTR,*PUHALF_PTR;
/*335*/ typedef short HALF_PTR,*PHALF_PTR;
/*336*/ typedef typ long SHANDLE_PTR;
/*337*/ typedef typ unsigned long HANDLE_PTR;
/*355*/ __inline
/*356*/ void*POINTER_64
/*357*/ PtrToPtr64(
/*358*/ const void*p
/*359*/ )
/*360*/ {
/*361*/ return((void*POINTER_64)(unsigned __int64)(ULONG_PTR)p);
/*362*/ }
/*364*/ __inline
/*365*/ void*
/*366*/ Ptr64ToPtr(
/*367*/ const void*POINTER_64 p
/*368*/ )
/*369*/ {
/*370*/ return((void*)(ULONG_PTR)(unsigned __int64)p);
/*371*/ }
/*373*/ __inline
/*374*/ void*POINTER_64
/*375*/ HandleToHandle64(
/*376*/ const void*h
/*377*/ )
/*378*/ {
/*379*/ return((void*POINTER_64)(__int64)(LONG_PTR)h);
/*380*/ }
/*382*/ __inline
/*383*/ void*
/*384*/ Handle64ToHandle(
/*385*/ const void*POINTER_64 h
/*386*/ )
/*387*/ {
/*388*/ return((void*)(ULONG_PTR)(unsigned __int64)h);
/*389*/ }
/*421*/ typedef ULONG_PTR SIZE_T,*PSIZE_T;
/*422*/ typedef LONG_PTR SSIZE_T,*PSSIZE_T;
/*470*/ typedef ULONG_PTR DWORD_PTR,*PDWORD_PTR;
/*476*/ typedef __int64 LONG64,*PLONG64;
/*483*/ typedef unsigned __int64 ULONG64,*PULONG64;
/*484*/ typedef unsigned __int64 DWORD64,*PDWORD64;
/*490*/ typedef ULONG_PTR KAFFINITY;
/*491*/ typedef KAFFINITY*PKAFFINITY;
/*"winnt.h"282*/ typedef void*PVOID;
/*283*/ typedef void*POINTER_64 PVOID64;
/*324*/ typedef char CHAR;
/*325*/ typedef short SHORT;
/*326*/ typedef long LONG;
/*328*/ typedef int INT;
/*337*/ typedef wchar_t WCHAR;
/*343*/ typedef WCHAR*PWCHAR,*LPWCH,*PWCH;
/*344*/ typedef const WCHAR*LPCWCH,*PCWCH;
/*345*/ typedef typ WCHAR*NWPSTR,*LPWSTR,*PWSTR;
/*346*/ typedef typ PWSTR*PZPWSTR;
/*347*/ typedef typ const PWSTR*PCZPWSTR;
/*348*/ typedef typ WCHAR*LPUWSTR,*PUWSTR;
/*349*/ typedef typ const WCHAR*LPCWSTR,*PCWSTR;
/*350*/ typedef typ PCWSTR*PZPCWSTR;
/*351*/ typedef typ const WCHAR*LPCUWSTR,*PCUWSTR;
/*401*/ typedef CHAR*PCHAR,*LPCH,*PCH;
/*402*/ typedef const CHAR*LPCCH,*PCCH;
/*404*/ typedef typ CHAR*NPSTR,*LPSTR,*PSTR;
/*405*/ typedef typ PSTR*PZPSTR;
/*406*/ typedef typ const PSTR*PCZPSTR;
/*407*/ typedef typ const CHAR*LPCSTR,*PCSTR;
/*408*/ typedef typ PCSTR*PZPCSTR;
/*432*/ typedef char TCHAR,*PTCHAR;
/*433*/ typedef unsigned char TBYTE,*PTBYTE;
/*437*/ typedef LPCH LPTCH,PTCH;
/*438*/ typedef LPSTR PTSTR,LPTSTR,PUTSTR,LPUTSTR;
/*439*/ typedef LPCSTR PCTSTR,LPCTSTR,PCUTSTR,LPCUTSTR;
/*446*/ typedef SHORT*PSHORT;
/*447*/ typedef LONG*PLONG;
/*450*/ typedef void*HANDLE;
/*460*/ typedef HANDLE*PHANDLE;
/*466*/ typedef BYTE FCHAR;
/*467*/ typedef WORD FSHORT;
/*468*/ typedef DWORD FLONG;
/*477*/ typedef typ long HRESULT;
/*538*/ typedef char CCHAR;
/*539*/ typedef DWORD LCID;
/*540*/ typedef PDWORD PLCID;
/*541*/ typedef WORD LANGID;
/*565*/ typedef struct _FLOAT128{
/*566*/ __int64 LowPart;
/*567*/ __int64 HighPart;
/*568*/ }FLOAT128;
/*570*/ typedef FLOAT128*PFLOAT128;
/*596*/ typedef double LONGLONG;
/*597*/ typedef double ULONGLONG;
/*602*/ typedef LONGLONG*PLONGLONG;
/*603*/ typedef ULONGLONG*PULONGLONG;
/*607*/ typedef LONGLONG USN;
/*612*/ typedef union _LARGE_INTEGER{
/*613*/ struct{
/*614*/ DWORD LowPart;
/*615*/ LONG HighPart;
/*616*/ }s;
/*617*/ struct{
/*618*/ DWORD LowPart;
/*619*/ LONG HighPart;
/*620*/ }u;
/*622*/ LONGLONG QuadPart;
/*623*/ }LARGE_INTEGER;
/*625*/ typedef LARGE_INTEGER*PLARGE_INTEGER;
/*630*/ typedef union _ULARGE_INTEGER{
/*631*/ struct{
/*632*/ DWORD LowPart;
/*633*/ DWORD HighPart;
/*634*/ }s;
/*635*/ struct{
/*636*/ DWORD LowPart;
/*637*/ DWORD HighPart;
/*638*/ }u;
/*640*/ ULONGLONG QuadPart;
/*641*/ }ULARGE_INTEGER;
/*643*/ typedef ULARGE_INTEGER*PULARGE_INTEGER;
/*652*/ typedef struct _LUID{
/*653*/ DWORD LowPart;
/*654*/ LONG HighPart;
/*655*/ }LUID,*PLUID;
/*658*/ typedef ULONGLONG DWORDLONG;
/*659*/ typedef DWORDLONG*PDWORDLONG;
/*892*/ typedef BYTE BOOLEAN;
/*893*/ typedef BOOLEAN*PBOOLEAN;
/*899*/ typedef struct _LIST_ENTRY{
/*900*/ struct _LIST_ENTRY*Flink;
/*901*/ struct _LIST_ENTRY*Blink;
/*902*/ }LIST_ENTRY,*PLIST_ENTRY,*PRLIST_ENTRY;
/*909*/ typedef struct _SINGLE_LIST_ENTRY{
/*910*/ struct _SINGLE_LIST_ENTRY*Next;
/*911*/ }SINGLE_LIST_ENTRY,*PSINGLE_LIST_ENTRY;
/*917*/ typedef struct LIST_ENTRY32{
/*918*/ DWORD Flink;
/*919*/ DWORD Blink;
/*920*/ }LIST_ENTRY32;
/*921*/ typedef LIST_ENTRY32*PLIST_ENTRY32;
/*923*/ typedef struct LIST_ENTRY64{
/*924*/ ULONGLONG Flink;
/*925*/ ULONGLONG Blink;
/*926*/ }LIST_ENTRY64;
/*927*/ typedef LIST_ENTRY64*PLIST_ENTRY64;
/*"guiddef.h"22*/ typedef struct _GUID{
/*23*/ unsigned long Data1;
/*24*/ unsigned short Data2;
/*25*/ unsigned short Data3;
/*26*/ unsigned char Data4[8];
/*27*/ }GUID;
/*75*/ typedef GUID*LPGUID;
/*80*/ typedef const GUID*LPCGUID;
/*86*/ typedef GUID IID;
/*87*/ typedef IID*LPIID;
/*90*/ typedef GUID CLSID;
/*91*/ typedef CLSID*LPCLSID;
/*94*/ typedef GUID FMTID;
/*95*/ typedef FMTID*LPFMTID;
/*"string.h"48*/ typ void*_memccpy(typ typ void*_Dst,typ typ const void*_Src,typ typ int _Val,typ typ size_t _MaxCount);
/*49*/ typ typ typ void*memchr(typ typ typ const void*_Buf,typ typ int _Val,typ typ size_t _MaxCount);
/*50*/ typ typ int _memicmp(typ typ typ const void*_Buf1,typ typ typ const void*_Buf2,typ typ size_t _Size);
/*51*/ typ typ int _memicmp_l(typ typ typ const void*_Buf1,typ typ typ const void*_Buf2,typ typ size_t _Size,typ typ typ _locale_t _Locale);
/*52*/ typ int memcmp(typ typ typ const void*_Buf1,typ typ typ const void*_Buf2,typ typ size_t _Size);
/*53*/ typ void*memcpy(typ typ typ typ void*_Dst,typ typ typ const void*_Src,typ typ size_t _Size);
/*55*/ typ errno_t memcpy_s(typ typ typ typ void*_Dst,typ typ rsize_t _DstSize,typ typ typ const void*_Src,typ typ rsize_t _MaxCount);
/*57*/ void*memset(typ typ typ typ void*_Dst,typ typ int _Val,typ typ size_t _Size);
/*67*/ typ typ errno_t _strset_s(typ typ typ typ char*_Dst,typ typ size_t _DstSize,typ typ int _Value);
/*68*/ typ
/*69*/ typ typ char*_strset(typ typ typ typ char*_Dest,typ typ int _Value);
/*71*/ typ typ errno_t strcpy_s(typ typ typ typ char*_Dst,typ typ rsize_t _SizeInBytes,typ typ typ const char*_Src);
/*73*/ typ
/*74*/ typ typ char*strcpy(typ typ typ char*_Dest,typ typ typ const char*_Source);
/*76*/ typ typ errno_t strcat_s(typ typ typ typ char*_Dst,typ typ rsize_t _SizeInBytes,typ typ typ const char*_Src);
/*78*/ typ
/*79*/ typ typ char*strcat(typ typ typ typ typ char*_Dest,typ typ typ const char*_Source);
/*80*/ typ int strcmp(typ typ typ const char*_Str1,typ typ typ const char*_Str2);
/*81*/ typ size_t strlen(typ typ typ const char*_Str);
/*82*/ typ typ size_t strnlen(typ typ typ const char*_Str,typ typ size_t _MaxCount);
/*90*/ typ typ errno_t memmove_s(typ typ typ typ void*_Dst,typ typ rsize_t _DstSize,typ typ typ const void*_Src,typ typ rsize_t _MaxCount);
/*96*/ typ typ void*memmove(typ typ typ typ void*_Dst,typ typ typ const void*_Src,typ typ size_t _Size);
/*104*/ typ typ char*_strdup(typ typ typ const char*_Src);
/*110*/ typ typ typ char*strchr(typ typ typ const char*_Str,typ typ int _Val);
/*111*/ typ typ int _stricmp(typ typ typ const char*_Str1,typ typ typ const char*_Str2);
/*112*/ typ typ int _strcmpi(typ typ typ const char*_Str1,typ typ typ const char*_Str2);
/*113*/ typ typ int _stricmp_l(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ typ _locale_t _Locale);
/*114*/ typ typ int strcoll(typ typ typ const char*_Str1,typ typ typ const char*_Str2);
/*115*/ typ typ int _strcoll_l(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ typ _locale_t _Locale);
/*116*/ typ typ int _stricoll(typ typ typ const char*_Str1,typ typ typ const char*_Str2);
/*117*/ typ typ int _stricoll_l(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ typ _locale_t _Locale);
/*118*/ typ typ int _strncoll(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ size_t _MaxCount);
/*119*/ typ typ int _strncoll_l(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*120*/ typ typ int _strnicoll(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ size_t _MaxCount);
/*121*/ typ typ int _strnicoll_l(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*122*/ typ typ size_t strcspn(typ typ typ const char*_Str,typ typ typ const char*_Control);
/*123*/ typ typ typ char*_strerror(typ typ typ const char*_ErrMsg);
/*124*/ typ typ errno_t _strerror_s(typ typ typ typ char*_Buf,typ typ size_t _SizeInBytes,typ typ typ const char*_ErrMsg);
/*125*/ typ
/*126*/ typ typ typ char*strerror(typ typ int);
/*128*/ typ typ errno_t strerror_s(typ typ typ typ char*_Buf,typ typ size_t _SizeInBytes,typ typ int _ErrNum);
/*130*/ typ
/*131*/ typ typ errno_t _strlwr_s(typ typ typ typ char*_Str,typ typ size_t _Size);
/*132*/ typ
/*133*/ typ typ char*_strlwr(typ typ typ typ char*_String);
/*134*/ typ typ errno_t _strlwr_s_l(typ typ typ typ char*_Str,typ typ size_t _Size,typ typ typ _locale_t _Locale);
/*135*/ typ
/*136*/ typ typ char*_strlwr_l(typ typ typ typ char*_String,typ typ typ _locale_t _Locale);
/*138*/ typ typ errno_t strncat_s(typ typ typ typ char*_Dst,typ typ rsize_t _SizeInBytes,typ typ typ const char*_Src,typ typ rsize_t _MaxCount);
/*140*/ typ
/*144*/ typ typ char*strncat(typ typ typ typ char*_Dest,typ typ typ const char*_Source,typ typ size_t _Count);
/*149*/ typ typ int strncmp(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ size_t _MaxCount);
/*151*/ typ typ int _strnicmp(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ size_t _MaxCount);
/*152*/ typ typ int _strnicmp_l(typ typ typ const char*_Str1,typ typ typ const char*_Str2,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*154*/ typ typ errno_t strncpy_s(typ typ typ typ char*_Dst,typ typ rsize_t _SizeInBytes,typ typ typ const char*_Src,typ typ rsize_t _MaxCount);
/*156*/ typ
/*157*/ typ typ char*strncpy(typ typ typ char*_Dest,typ typ typ const char*_Source,typ typ size_t _Count);
/*158*/ typ typ errno_t _strnset_s(typ typ typ typ char*_Str,typ typ size_t _SizeInBytes,typ typ int _Val,typ typ size_t _MaxCount);
/*159*/ typ
/*160*/ typ typ char*_strnset(typ typ typ typ char*_Dest,typ typ int _Val,typ typ size_t _Count);
/*161*/ typ typ typ char*strpbrk(typ typ typ const char*_Str,typ typ typ const char*_Control);
/*162*/ typ typ typ char*strrchr(typ typ typ const char*_Str,typ typ int _Ch);
/*163*/ typ char*_strrev(typ typ typ typ char*_Str);
/*164*/ typ typ size_t strspn(typ typ typ const char*_Str,typ typ typ const char*_Control);
/*165*/ typ typ typ char*strstr(typ typ typ const char*_Str,typ typ typ const char*_SubStr);
/*166*/ typ typ typ char*strtok(typ typ typ typ char*_Str,typ typ typ const char*_Delim);
/*168*/ typ typ char*strtok_s(typ typ typ typ char*_Str,typ typ typ const char*_Delim,typ typ typ typ typ typ typ char**_Context);
/*170*/ typ typ errno_t _strupr_s(typ typ typ typ char*_Str,typ typ size_t _Size);
/*171*/ typ
/*172*/ typ typ char*_strupr(typ typ typ typ char*_String);
/*173*/ typ typ errno_t _strupr_s_l(typ typ typ typ char*_Str,typ typ size_t _Size,_locale_t _Locale);
/*174*/ typ
/*175*/ typ typ char*_strupr_l(typ typ typ typ char*_String,typ typ typ _locale_t _Locale);
/*176*/ typ typ size_t strxfrm(typ typ typ char*_Dst,typ typ typ const char*_Src,typ typ size_t _MaxCount);
/*177*/ typ typ size_t _strxfrm_l(typ typ typ char*_Dst,typ typ typ const char*_Src,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*235*/ typ typ wchar_t*_wcsdup(typ typ typ const wchar_t*_Str);
/*242*/ typ typ errno_t wcscat_s(typ typ typ typ wchar_t*_Dst,typ typ rsize_t _SizeInWords,typ typ typ const wchar_t*_Src);
/*244*/ typ
/*245*/ typ typ wchar_t*wcscat(typ typ typ typ typ wchar_t*_Dest,typ typ typ const wchar_t*_Source);
/*246*/ typ typ typ wchar_t*wcschr(typ typ typ const wchar_t*_Str,wchar_t _Ch);
/*247*/ typ typ int wcscmp(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2);
/*249*/ typ typ errno_t wcscpy_s(typ typ typ typ wchar_t*_Dst,typ typ rsize_t _SizeInWords,typ typ typ const wchar_t*_Src);
/*251*/ typ
/*252*/ typ typ wchar_t*wcscpy(typ typ typ wchar_t*_Dest,typ typ typ const wchar_t*_Source);
/*253*/ typ typ size_t wcscspn(typ typ typ const wchar_t*_Str,typ typ typ const wchar_t*_Control);
/*254*/ typ typ size_t wcslen(typ typ typ const wchar_t*_Str);
/*255*/ typ typ size_t wcsnlen(typ typ typ const wchar_t*_Src,typ typ size_t _MaxCount);
/*263*/ typ typ errno_t wcsncat_s(typ typ typ typ wchar_t*_Dst,typ typ rsize_t _SizeInWords,typ typ typ const wchar_t*_Src,typ typ rsize_t _MaxCount);
/*265*/ typ
/*268*/ typ typ wchar_t*wcsncat(typ typ typ typ wchar_t*_Dest,typ typ typ const wchar_t*_Source,typ typ size_t _Count);
/*270*/ typ typ int wcsncmp(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ size_t _MaxCount);
/*272*/ typ typ errno_t wcsncpy_s(typ typ typ typ wchar_t*_Dst,typ typ rsize_t _SizeInWords,typ typ typ const wchar_t*_Src,typ typ rsize_t _MaxCount);
/*274*/ typ
/*275*/ typ typ wchar_t*wcsncpy(typ typ typ wchar_t*_Dest,typ typ typ const wchar_t*_Source,typ typ size_t _Count);
/*276*/ typ typ typ wchar_t*wcspbrk(typ typ typ const wchar_t*_Str,typ typ typ const wchar_t*_Control);
/*277*/ typ typ typ wchar_t*wcsrchr(typ typ typ const wchar_t*_Str,typ typ wchar_t _Ch);
/*278*/ typ typ size_t wcsspn(typ typ typ const wchar_t*_Str,typ typ typ const wchar_t*_Control);
/*279*/ typ typ typ wchar_t*wcsstr(typ typ typ const wchar_t*_Str,typ typ typ const wchar_t*_SubStr);
/*280*/ typ typ typ wchar_t*wcstok(typ typ typ typ wchar_t*_Str,typ typ typ const wchar_t*_Delim);
/*282*/ typ typ wchar_t*wcstok_s(typ typ typ typ wchar_t*_Str,typ typ typ const wchar_t*_Delim,typ typ typ typ typ typ typ wchar_t**_Context);
/*284*/ typ typ typ wchar_t*_wcserror(typ typ int _ErrNum);
/*285*/ typ typ errno_t _wcserror_s(typ typ typ typ wchar_t*_Buf,typ typ size_t _SizeInWords,typ typ int _ErrNum);
/*286*/ typ
/*287*/ typ typ typ wchar_t*__wcserror(typ typ typ const wchar_t*_Str);
/*288*/ typ typ errno_t __wcserror_s(typ typ typ typ wchar_t*_Buffer,typ typ size_t _SizeInWords,typ typ typ const wchar_t*_ErrMsg);
/*289*/ typ
/*291*/ typ typ int _wcsicmp(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2);
/*292*/ typ typ int _wcsicmp_l(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ typ _locale_t _Locale);
/*293*/ typ typ int _wcsnicmp(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ size_t _MaxCount);
/*294*/ typ typ int _wcsnicmp_l(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*295*/ typ typ errno_t _wcsnset_s(typ typ typ typ wchar_t*_Dst,typ typ size_t _SizeInWords,typ typ wchar_t _Val,typ typ size_t _MaxCount);
/*296*/ typ
/*297*/ typ typ wchar_t*_wcsnset(typ typ typ typ wchar_t*_Str,wchar_t _Val,typ typ size_t _MaxCount);
/*298*/ typ wchar_t*_wcsrev(typ typ typ typ wchar_t*_Str);
/*299*/ typ typ errno_t _wcsset_s(typ typ typ typ wchar_t*_Dst,typ typ size_t _SizeInWords,typ typ wchar_t _Value);
/*300*/ typ
/*301*/ typ typ wchar_t*_wcsset(typ typ typ typ wchar_t*_Str,wchar_t _Val);
/*303*/ typ typ errno_t _wcslwr_s(typ typ typ typ wchar_t*_Str,typ typ size_t _SizeInWords);
/*304*/ typ
/*305*/ typ typ wchar_t*_wcslwr(typ typ typ typ wchar_t*_String);
/*306*/ typ typ errno_t _wcslwr_s_l(typ typ typ typ wchar_t*_Str,typ typ size_t _SizeInWords,typ typ typ _locale_t _Locale);
/*307*/ typ
/*308*/ typ typ wchar_t*_wcslwr_l(typ typ typ typ wchar_t*_String,typ typ typ _locale_t _Locale);
/*309*/ typ typ errno_t _wcsupr_s(typ typ typ typ wchar_t*_Str,typ typ size_t _Size);
/*310*/ typ
/*311*/ typ typ wchar_t*_wcsupr(typ typ typ typ wchar_t*_String);
/*312*/ typ typ errno_t _wcsupr_s_l(typ typ typ typ wchar_t*_Str,typ typ size_t _Size,typ typ typ _locale_t _Locale);
/*313*/ typ
/*314*/ typ typ wchar_t*_wcsupr_l(typ typ typ typ wchar_t*_String,typ typ typ _locale_t _Locale);
/*315*/ typ typ size_t wcsxfrm(typ typ typ wchar_t*_Dst,typ typ typ const wchar_t*_Src,typ typ size_t _MaxCount);
/*316*/ typ typ size_t _wcsxfrm_l(typ typ typ wchar_t*_Dst,typ typ typ const wchar_t*_Src,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*317*/ typ typ int wcscoll(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2);
/*318*/ typ typ int _wcscoll_l(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ typ _locale_t _Locale);
/*319*/ typ typ int _wcsicoll(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2);
/*320*/ typ typ int _wcsicoll_l(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ typ _locale_t _Locale);
/*321*/ typ typ int _wcsncoll(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ size_t _MaxCount);
/*322*/ typ typ int _wcsncoll_l(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*323*/ typ typ int _wcsnicoll(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ size_t _MaxCount);
/*324*/ typ typ int _wcsnicoll_l(typ typ typ const wchar_t*_Str1,typ typ typ const wchar_t*_Str2,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*"winnt.h"935*/ typedef struct _OBJECTID{
/*936*/ GUID Lineage;
/*937*/ DWORD Uniquifier;
/*938*/ }OBJECTID;
/*1132*/ typedef
/*1133*/ EXCEPTION_DISPOSITION
/*1134*/ (*PEXCEPTION_ROUTINE)(
/*1135*/ typ struct _EXCEPTION_RECORD*ExceptionRecord,
/*1136*/ typ PVOID EstablisherFrame,
/*1137*/ typ typ struct _CONTEXT*ContextRecord,
/*1138*/ typ typ PVOID DispatcherContext
/*1139*/ );
/*1865*/ typedef ULONG_PTR KSPIN_LOCK;
/*1866*/ typedef KSPIN_LOCK*PKSPIN_LOCK;
/*3876*/ typedef struct _LDT_ENTRY{
/*3877*/ WORD LimitLow;
/*3878*/ WORD BaseLow;
/*3879*/ union{
/*3880*/ struct{
/*3881*/ BYTE BaseMid;
/*3882*/ BYTE Flags1;
/*3883*/ BYTE Flags2;
/*3884*/ BYTE BaseHi;
/*3885*/ }Bytes;
/*3886*/ struct{
/*3887*/ DWORD BaseMid:8;
/*3888*/ DWORD Type:5;
/*3889*/ DWORD Dpl:2;
/*3890*/ DWORD Pres:1;
/*3891*/ DWORD LimitHi:4;
/*3892*/ DWORD Sys:1;
/*3893*/ DWORD Reserved_0:1;
/*3894*/ DWORD Default_Big:1;
/*3895*/ DWORD Granularity:1;
/*3896*/ DWORD BaseHi:8;
/*3897*/ }Bits;
/*3898*/ }HighWord;
/*3899*/ }LDT_ENTRY,*PLDT_ENTRY;
/*5690*/ typedef struct _WOW64_FLOATING_SAVE_AREA{
/*5691*/ DWORD ControlWord;
/*5692*/ DWORD StatusWord;
/*5693*/ DWORD TagWord;
/*5694*/ DWORD ErrorOffset;
/*5695*/ DWORD ErrorSelector;
/*5696*/ DWORD DataOffset;
/*5697*/ DWORD DataSelector;
/*5698*/ BYTE RegisterArea[80];
/*5699*/ DWORD Cr0NpxState;
/*5700*/ }WOW64_FLOATING_SAVE_AREA;
/*5702*/ typedef WOW64_FLOATING_SAVE_AREA*PWOW64_FLOATING_SAVE_AREA;
/*5714*/ typedef struct _WOW64_CONTEXT{
/*5734*/ DWORD ContextFlags;
/*5742*/ DWORD Dr0;
/*5743*/ DWORD Dr1;
/*5744*/ DWORD Dr2;
/*5745*/ DWORD Dr3;
/*5746*/ DWORD Dr6;
/*5747*/ DWORD Dr7;
/*5754*/ WOW64_FLOATING_SAVE_AREA FloatSave;
/*5761*/ DWORD SegGs;
/*5762*/ DWORD SegFs;
/*5763*/ DWORD SegEs;
/*5764*/ DWORD SegDs;
/*5771*/ DWORD Edi;
/*5772*/ DWORD Esi;
/*5773*/ DWORD Ebx;
/*5774*/ DWORD Edx;
/*5775*/ DWORD Ecx;
/*5776*/ DWORD Eax;
/*5783*/ DWORD Ebp;
/*5784*/ DWORD Eip;
/*5785*/ DWORD SegCs;
/*5786*/ DWORD EFlags;
/*5787*/ DWORD Esp;
/*5788*/ DWORD SegSs;
/*5796*/ BYTE ExtendedRegisters[512];
/*5798*/ }WOW64_CONTEXT;
/*5800*/ typedef WOW64_CONTEXT*PWOW64_CONTEXT;
/*5809*/ typedef struct _EXCEPTION_RECORD{
/*5810*/ DWORD ExceptionCode;
/*5811*/ DWORD ExceptionFlags;
/*5812*/ struct _EXCEPTION_RECORD*ExceptionRecord;
/*5813*/ PVOID ExceptionAddress;
/*5814*/ DWORD NumberParameters;
/*5815*/ ULONG_PTR ExceptionInformation[15];
/*5816*/ }EXCEPTION_RECORD;
/*5818*/ typedef EXCEPTION_RECORD*PEXCEPTION_RECORD;
/*5820*/ typedef struct _EXCEPTION_RECORD32{
/*5821*/ DWORD ExceptionCode;
/*5822*/ DWORD ExceptionFlags;
/*5823*/ DWORD ExceptionRecord;
/*5824*/ DWORD ExceptionAddress;
/*5825*/ DWORD NumberParameters;
/*5826*/ DWORD ExceptionInformation[15];
/*5827*/ }EXCEPTION_RECORD32,*PEXCEPTION_RECORD32;
/*5829*/ typedef struct _EXCEPTION_RECORD64{
/*5830*/ DWORD ExceptionCode;
/*5831*/ DWORD ExceptionFlags;
/*5832*/ DWORD64 ExceptionRecord;
/*5833*/ DWORD64 ExceptionAddress;
/*5834*/ DWORD NumberParameters;
/*5835*/ DWORD __unusedAlignment;
/*5836*/ DWORD64 ExceptionInformation[15];
/*5837*/ }EXCEPTION_RECORD64,*PEXCEPTION_RECORD64;
/*5843*/ typedef struct _EXCEPTION_POINTERS{
/*5844*/ PEXCEPTION_RECORD ExceptionRecord;
/*5845*/ PCONTEXT ContextRecord;
/*5846*/ }EXCEPTION_POINTERS,*PEXCEPTION_POINTERS;
/*5850*/ 
/*5851*/ void
/*5852*/ 
/*5853*/ RtlUnwind(
/*5854*/ typ PVOID TargetFrame typ,
/*5855*/ typ PVOID TargetIp typ,
/*5856*/ typ PEXCEPTION_RECORD ExceptionRecord typ,
/*5857*/ typ PVOID ReturnValue
/*5858*/ );
/*5875*/ typedef PVOID PACCESS_TOKEN;
/*5876*/ typedef PVOID PSECURITY_DESCRIPTOR;
/*5877*/ typedef PVOID PSID;
/*5917*/ typedef DWORD ACCESS_MASK;
/*5918*/ typedef ACCESS_MASK*PACCESS_MASK;
/*5975*/ typedef struct _GENERIC_MAPPING{
/*5976*/ ACCESS_MASK GenericRead;
/*5977*/ ACCESS_MASK GenericWrite;
/*5978*/ ACCESS_MASK GenericExecute;
/*5979*/ ACCESS_MASK GenericAll;
/*5980*/ }GENERIC_MAPPING;
/*5981*/ typedef GENERIC_MAPPING*PGENERIC_MAPPING;
/*5996*/ typedef struct _LUID_AND_ATTRIBUTES{
/*5997*/ LUID Luid;
/*5998*/ DWORD Attributes;
/*5999*/ }LUID_AND_ATTRIBUTES,*PLUID_AND_ATTRIBUTES;
/*6000*/ typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
/*6001*/ typedef LUID_AND_ATTRIBUTES_ARRAY*PLUID_AND_ATTRIBUTES_ARRAY;
/*6038*/ typedef struct _SID_IDENTIFIER_AUTHORITY{
/*6039*/ BYTE Value[6];
/*6040*/ }SID_IDENTIFIER_AUTHORITY,*PSID_IDENTIFIER_AUTHORITY;
/*6046*/ typedef struct _SID{
/*6047*/ BYTE Revision;
/*6048*/ BYTE SubAuthorityCount;
/*6049*/ SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
/*6053*/ DWORD SubAuthority[1];
/*6055*/ }SID,*PISID;
/*6069*/ typedef enum _SID_NAME_USE{
/*6070*/ SidTypeUser=1,
/*6071*/ SidTypeGroup,
/*6072*/ SidTypeDomain,
/*6073*/ SidTypeAlias,
/*6074*/ SidTypeWellKnownGroup,
/*6075*/ SidTypeDeletedAccount,
/*6076*/ SidTypeInvalid,
/*6077*/ SidTypeUnknown,
/*6078*/ SidTypeComputer,
/*6079*/ SidTypeLabel
/*6080*/ }SID_NAME_USE,*PSID_NAME_USE;
/*6082*/ typedef struct _SID_AND_ATTRIBUTES{
/*6083*/ PSID Sid;
/*6084*/ DWORD Attributes;
/*6085*/ }SID_AND_ATTRIBUTES,*PSID_AND_ATTRIBUTES;
/*6087*/ typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
/*6088*/ typedef SID_AND_ATTRIBUTES_ARRAY*PSID_AND_ATTRIBUTES_ARRAY;
/*6091*/ typedef ULONG_PTR SID_HASH_ENTRY,*PSID_HASH_ENTRY;
/*6093*/ typedef struct _SID_AND_ATTRIBUTES_HASH{
/*6094*/ DWORD SidCount;
/*6095*/ PSID_AND_ATTRIBUTES SidAttr;
/*6096*/ SID_HASH_ENTRY Hash[32];
/*6097*/ }SID_AND_ATTRIBUTES_HASH,*PSID_AND_ATTRIBUTES_HASH;
/*6333*/ typedef enum{
/*6335*/ WinNullSid=0,
/*6336*/ WinWorldSid=1,
/*6337*/ WinLocalSid=2,
/*6338*/ WinCreatorOwnerSid=3,
/*6339*/ WinCreatorGroupSid=4,
/*6340*/ WinCreatorOwnerServerSid=5,
/*6341*/ WinCreatorGroupServerSid=6,
/*6342*/ WinNtAuthoritySid=7,
/*6343*/ WinDialupSid=8,
/*6344*/ WinNetworkSid=9,
/*6345*/ WinBatchSid=10,
/*6346*/ WinInteractiveSid=11,
/*6347*/ WinServiceSid=12,
/*6348*/ WinAnonymousSid=13,
/*6349*/ WinProxySid=14,
/*6350*/ WinEnterpriseControllersSid=15,
/*6351*/ WinSelfSid=16,
/*6352*/ WinAuthenticatedUserSid=17,
/*6353*/ WinRestrictedCodeSid=18,
/*6354*/ WinTerminalServerSid=19,
/*6355*/ WinRemoteLogonIdSid=20,
/*6356*/ WinLogonIdsSid=21,
/*6357*/ WinLocalSystemSid=22,
/*6358*/ WinLocalServiceSid=23,
/*6359*/ WinNetworkServiceSid=24,
/*6360*/ WinBuiltinDomainSid=25,
/*6361*/ WinBuiltinAdministratorsSid=26,
/*6362*/ WinBuiltinUsersSid=27,
/*6363*/ WinBuiltinGuestsSid=28,
/*6364*/ WinBuiltinPowerUsersSid=29,
/*6365*/ WinBuiltinAccountOperatorsSid=30,
/*6366*/ WinBuiltinSystemOperatorsSid=31,
/*6367*/ WinBuiltinPrintOperatorsSid=32,
/*6368*/ WinBuiltinBackupOperatorsSid=33,
/*6369*/ WinBuiltinReplicatorSid=34,
/*6370*/ WinBuiltinPreWindows2000CompatibleAccessSid=35,
/*6371*/ WinBuiltinRemoteDesktopUsersSid=36,
/*6372*/ WinBuiltinNetworkConfigurationOperatorsSid=37,
/*6373*/ WinAccountAdministratorSid=38,
/*6374*/ WinAccountGuestSid=39,
/*6375*/ WinAccountKrbtgtSid=40,
/*6376*/ WinAccountDomainAdminsSid=41,
/*6377*/ WinAccountDomainUsersSid=42,
/*6378*/ WinAccountDomainGuestsSid=43,
/*6379*/ WinAccountComputersSid=44,
/*6380*/ WinAccountControllersSid=45,
/*6381*/ WinAccountCertAdminsSid=46,
/*6382*/ WinAccountSchemaAdminsSid=47,
/*6383*/ WinAccountEnterpriseAdminsSid=48,
/*6384*/ WinAccountPolicyAdminsSid=49,
/*6385*/ WinAccountRasAndIasServersSid=50,
/*6386*/ WinNTLMAuthenticationSid=51,
/*6387*/ WinDigestAuthenticationSid=52,
/*6388*/ WinSChannelAuthenticationSid=53,
/*6389*/ WinThisOrganizationSid=54,
/*6390*/ WinOtherOrganizationSid=55,
/*6391*/ WinBuiltinIncomingForestTrustBuildersSid=56,
/*6392*/ WinBuiltinPerfMonitoringUsersSid=57,
/*6393*/ WinBuiltinPerfLoggingUsersSid=58,
/*6394*/ WinBuiltinAuthorizationAccessSid=59,
/*6395*/ WinBuiltinTerminalServerLicenseServersSid=60,
/*6396*/ WinBuiltinDCOMUsersSid=61,
/*6397*/ WinBuiltinIUsersSid=62,
/*6398*/ WinIUserSid=63,
/*6399*/ WinBuiltinCryptoOperatorsSid=64,
/*6400*/ WinUntrustedLabelSid=65,
/*6401*/ WinLowLabelSid=66,
/*6402*/ WinMediumLabelSid=67,
/*6403*/ WinHighLabelSid=68,
/*6404*/ WinSystemLabelSid=69,
/*6405*/ WinWriteRestrictedCodeSid=70,
/*6406*/ WinCreatorOwnerRightsSid=71,
/*6407*/ WinCacheablePrincipalsGroupSid=72,
/*6408*/ WinNonCacheablePrincipalsGroupSid=73,
/*6409*/ WinEnterpriseReadonlyControllersSid=74,
/*6410*/ WinAccountReadonlyControllersSid=75,
/*6411*/ WinBuiltinEventLogReadersGroup=76,
/*6412*/ WinNewEnterpriseReadonlyControllersSid=77,
/*6413*/ WinBuiltinCertSvcDComAccessGroup=78,
/*6414*/ }WELL_KNOWN_SID_TYPE;
/*6511*/ typedef struct _ACL{
/*6512*/ BYTE AclRevision;
/*6513*/ BYTE Sbz1;
/*6514*/ WORD AclSize;
/*6515*/ WORD AceCount;
/*6516*/ WORD Sbz2;
/*6517*/ }ACL;
/*6518*/ typedef ACL*PACL;
/*6541*/ typedef struct _ACE_HEADER{
/*6542*/ BYTE AceType;
/*6543*/ BYTE AceFlags;
/*6544*/ WORD AceSize;
/*6545*/ }ACE_HEADER;
/*6546*/ typedef ACE_HEADER*PACE_HEADER;
/*6652*/ typedef struct _ACCESS_ALLOWED_ACE{
/*6653*/ ACE_HEADER Header;
/*6654*/ ACCESS_MASK Mask;
/*6655*/ DWORD SidStart;
/*6656*/ }ACCESS_ALLOWED_ACE;
/*6658*/ typedef ACCESS_ALLOWED_ACE*PACCESS_ALLOWED_ACE;
/*6660*/ typedef struct _ACCESS_DENIED_ACE{
/*6661*/ ACE_HEADER Header;
/*6662*/ ACCESS_MASK Mask;
/*6663*/ DWORD SidStart;
/*6664*/ }ACCESS_DENIED_ACE;
/*6665*/ typedef ACCESS_DENIED_ACE*PACCESS_DENIED_ACE;
/*6667*/ typedef struct _SYSTEM_AUDIT_ACE{
/*6668*/ ACE_HEADER Header;
/*6669*/ ACCESS_MASK Mask;
/*6670*/ DWORD SidStart;
/*6671*/ }SYSTEM_AUDIT_ACE;
/*6672*/ typedef SYSTEM_AUDIT_ACE*PSYSTEM_AUDIT_ACE;
/*6674*/ typedef struct _SYSTEM_ALARM_ACE{
/*6675*/ ACE_HEADER Header;
/*6676*/ ACCESS_MASK Mask;
/*6677*/ DWORD SidStart;
/*6678*/ }SYSTEM_ALARM_ACE;
/*6679*/ typedef SYSTEM_ALARM_ACE*PSYSTEM_ALARM_ACE;
/*6681*/ typedef struct _SYSTEM_MANDATORY_LABEL_ACE{
/*6682*/ ACE_HEADER Header;
/*6683*/ ACCESS_MASK Mask;
/*6684*/ DWORD SidStart;
/*6685*/ }SYSTEM_MANDATORY_LABEL_ACE,*PSYSTEM_MANDATORY_LABEL_ACE;
/*6697*/ typedef struct _ACCESS_ALLOWED_OBJECT_ACE{
/*6698*/ ACE_HEADER Header;
/*6699*/ ACCESS_MASK Mask;
/*6700*/ DWORD Flags;
/*6701*/ GUID ObjectType;
/*6702*/ GUID InheritedObjectType;
/*6703*/ DWORD SidStart;
/*6704*/ }ACCESS_ALLOWED_OBJECT_ACE,*PACCESS_ALLOWED_OBJECT_ACE;
/*6706*/ typedef struct _ACCESS_DENIED_OBJECT_ACE{
/*6707*/ ACE_HEADER Header;
/*6708*/ ACCESS_MASK Mask;
/*6709*/ DWORD Flags;
/*6710*/ GUID ObjectType;
/*6711*/ GUID InheritedObjectType;
/*6712*/ DWORD SidStart;
/*6713*/ }ACCESS_DENIED_OBJECT_ACE,*PACCESS_DENIED_OBJECT_ACE;
/*6715*/ typedef struct _SYSTEM_AUDIT_OBJECT_ACE{
/*6716*/ ACE_HEADER Header;
/*6717*/ ACCESS_MASK Mask;
/*6718*/ DWORD Flags;
/*6719*/ GUID ObjectType;
/*6720*/ GUID InheritedObjectType;
/*6721*/ DWORD SidStart;
/*6722*/ }SYSTEM_AUDIT_OBJECT_ACE,*PSYSTEM_AUDIT_OBJECT_ACE;
/*6724*/ typedef struct _SYSTEM_ALARM_OBJECT_ACE{
/*6725*/ ACE_HEADER Header;
/*6726*/ ACCESS_MASK Mask;
/*6727*/ DWORD Flags;
/*6728*/ GUID ObjectType;
/*6729*/ GUID InheritedObjectType;
/*6730*/ DWORD SidStart;
/*6731*/ }SYSTEM_ALARM_OBJECT_ACE,*PSYSTEM_ALARM_OBJECT_ACE;
/*6738*/ typedef struct _ACCESS_ALLOWED_CALLBACK_ACE{
/*6739*/ ACE_HEADER Header;
/*6740*/ ACCESS_MASK Mask;
/*6741*/ DWORD SidStart;
/*6743*/ }ACCESS_ALLOWED_CALLBACK_ACE,*PACCESS_ALLOWED_CALLBACK_ACE;
/*6745*/ typedef struct _ACCESS_DENIED_CALLBACK_ACE{
/*6746*/ ACE_HEADER Header;
/*6747*/ ACCESS_MASK Mask;
/*6748*/ DWORD SidStart;
/*6750*/ }ACCESS_DENIED_CALLBACK_ACE,*PACCESS_DENIED_CALLBACK_ACE;
/*6752*/ typedef struct _SYSTEM_AUDIT_CALLBACK_ACE{
/*6753*/ ACE_HEADER Header;
/*6754*/ ACCESS_MASK Mask;
/*6755*/ DWORD SidStart;
/*6757*/ }SYSTEM_AUDIT_CALLBACK_ACE,*PSYSTEM_AUDIT_CALLBACK_ACE;
/*6759*/ typedef struct _SYSTEM_ALARM_CALLBACK_ACE{
/*6760*/ ACE_HEADER Header;
/*6761*/ ACCESS_MASK Mask;
/*6762*/ DWORD SidStart;
/*6764*/ }SYSTEM_ALARM_CALLBACK_ACE,*PSYSTEM_ALARM_CALLBACK_ACE;
/*6766*/ typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE{
/*6767*/ ACE_HEADER Header;
/*6768*/ ACCESS_MASK Mask;
/*6769*/ DWORD Flags;
/*6770*/ GUID ObjectType;
/*6771*/ GUID InheritedObjectType;
/*6772*/ DWORD SidStart;
/*6774*/ }ACCESS_ALLOWED_CALLBACK_OBJECT_ACE,*PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
/*6776*/ typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE{
/*6777*/ ACE_HEADER Header;
/*6778*/ ACCESS_MASK Mask;
/*6779*/ DWORD Flags;
/*6780*/ GUID ObjectType;
/*6781*/ GUID InheritedObjectType;
/*6782*/ DWORD SidStart;
/*6784*/ }ACCESS_DENIED_CALLBACK_OBJECT_ACE,*PACCESS_DENIED_CALLBACK_OBJECT_ACE;
/*6786*/ typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE{
/*6787*/ ACE_HEADER Header;
/*6788*/ ACCESS_MASK Mask;
/*6789*/ DWORD Flags;
/*6790*/ GUID ObjectType;
/*6791*/ GUID InheritedObjectType;
/*6792*/ DWORD SidStart;
/*6794*/ }SYSTEM_AUDIT_CALLBACK_OBJECT_ACE,*PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
/*6796*/ typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE{
/*6797*/ ACE_HEADER Header;
/*6798*/ ACCESS_MASK Mask;
/*6799*/ DWORD Flags;
/*6800*/ GUID ObjectType;
/*6801*/ GUID InheritedObjectType;
/*6802*/ DWORD SidStart;
/*6804*/ }SYSTEM_ALARM_CALLBACK_OBJECT_ACE,*PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
/*6820*/ typedef enum _ACL_INFORMATION_CLASS{
/*6821*/ AclRevisionInformation=1,
/*6822*/ AclSizeInformation
/*6823*/ }ACL_INFORMATION_CLASS;
/*6830*/ typedef struct _ACL_REVISION_INFORMATION{
/*6831*/ DWORD AclRevision;
/*6832*/ }ACL_REVISION_INFORMATION;
/*6833*/ typedef ACL_REVISION_INFORMATION*PACL_REVISION_INFORMATION;
/*6839*/ typedef struct _ACL_SIZE_INFORMATION{
/*6840*/ DWORD AceCount;
/*6841*/ DWORD AclBytesInUse;
/*6842*/ DWORD AclBytesFree;
/*6843*/ }ACL_SIZE_INFORMATION;
/*6844*/ typedef ACL_SIZE_INFORMATION*PACL_SIZE_INFORMATION;
/*6871*/ typedef WORD SECURITY_DESCRIPTOR_CONTROL,*PSECURITY_DESCRIPTOR_CONTROL;
/*6961*/ typedef struct _SECURITY_DESCRIPTOR_RELATIVE{
/*6962*/ BYTE Revision;
/*6963*/ BYTE Sbz1;
/*6964*/ SECURITY_DESCRIPTOR_CONTROL Control;
/*6965*/ DWORD Owner;
/*6966*/ DWORD Group;
/*6967*/ DWORD Sacl;
/*6968*/ DWORD Dacl;
/*6969*/ }SECURITY_DESCRIPTOR_RELATIVE,*PISECURITY_DESCRIPTOR_RELATIVE;
/*6971*/ typedef struct _SECURITY_DESCRIPTOR{
/*6972*/ BYTE Revision;
/*6973*/ BYTE Sbz1;
/*6974*/ SECURITY_DESCRIPTOR_CONTROL Control;
/*6975*/ PSID Owner;
/*6976*/ PSID Group;
/*6977*/ PACL Sacl;
/*6978*/ PACL Dacl;
/*6980*/ }SECURITY_DESCRIPTOR,*PISECURITY_DESCRIPTOR;
/*7031*/ typedef struct _OBJECT_TYPE_LIST{
/*7032*/ WORD Level;
/*7033*/ WORD Sbz;
/*7034*/ GUID*ObjectType;
/*7035*/ }OBJECT_TYPE_LIST,*POBJECT_TYPE_LIST;
/*7051*/ typedef enum _AUDIT_EVENT_TYPE{
/*7052*/ AuditEventObjectAccess,
/*7053*/ AuditEventDirectoryServiceAccess
/*7054*/ }AUDIT_EVENT_TYPE,*PAUDIT_EVENT_TYPE;
/*7106*/ typedef struct _PRIVILEGE_SET{
/*7107*/ DWORD PrivilegeCount;
/*7108*/ DWORD Control;
/*7109*/ LUID_AND_ATTRIBUTES Privilege[1];
/*7110*/ }PRIVILEGE_SET,*PPRIVILEGE_SET;
/*7173*/ typedef enum _SECURITY_IMPERSONATION_LEVEL{
/*7174*/ SecurityAnonymous,
/*7175*/ SecurityIdentification,
/*7176*/ SecurityImpersonation,
/*7177*/ SecurityDelegation
/*7178*/ }SECURITY_IMPERSONATION_LEVEL,*PSECURITY_IMPERSONATION_LEVEL;
/*7240*/ typedef enum _TOKEN_TYPE{
/*7241*/ TokenPrimary=1,
/*7242*/ TokenImpersonation
/*7243*/ }TOKEN_TYPE;
/*7244*/ typedef TOKEN_TYPE*PTOKEN_TYPE;
/*7252*/ typedef enum _TOKEN_ELEVATION_TYPE{
/*7253*/ TokenElevationTypeDefault=1,
/*7254*/ TokenElevationTypeFull,
/*7255*/ TokenElevationTypeLimited,
/*7256*/ }TOKEN_ELEVATION_TYPE,*PTOKEN_ELEVATION_TYPE;
/*7263*/ typedef enum _TOKEN_INFORMATION_CLASS{
/*7264*/ TokenUser=1,
/*7265*/ TokenGroups,
/*7266*/ TokenPrivileges,
/*7267*/ TokenOwner,
/*7268*/ TokenPrimaryGroup,
/*7269*/ TokenDefaultDacl,
/*7270*/ TokenSource,
/*7271*/ TokenType,
/*7272*/ TokenImpersonationLevel,
/*7273*/ TokenStatistics,
/*7274*/ TokenRestrictedSids,
/*7275*/ TokenSessionId,
/*7276*/ TokenGroupsAndPrivileges,
/*7277*/ TokenSessionReference,
/*7278*/ TokenSandBoxInert,
/*7279*/ TokenAuditPolicy,
/*7280*/ TokenOrigin,
/*7281*/ TokenElevationType,
/*7282*/ TokenLinkedToken,
/*7283*/ TokenElevation,
/*7284*/ TokenHasRestrictions,
/*7285*/ TokenAccessInformation,
/*7286*/ TokenVirtualizationAllowed,
/*7287*/ TokenVirtualizationEnabled,
/*7288*/ TokenIntegrityLevel,
/*7289*/ TokenUIAccess,
/*7290*/ TokenMandatoryPolicy,
/*7291*/ TokenLogonSid,
/*7292*/ MaxTokenInfoClass
/*7293*/ }TOKEN_INFORMATION_CLASS,*PTOKEN_INFORMATION_CLASS;
/*7300*/ typedef struct _TOKEN_USER{
/*7301*/ SID_AND_ATTRIBUTES User;
/*7302*/ }TOKEN_USER,*PTOKEN_USER;
/*7304*/ typedef struct _TOKEN_GROUPS{
/*7305*/ DWORD GroupCount;
/*7306*/ SID_AND_ATTRIBUTES Groups[1];
/*7307*/ }TOKEN_GROUPS,*PTOKEN_GROUPS;
/*7310*/ typedef struct _TOKEN_PRIVILEGES{
/*7311*/ DWORD PrivilegeCount;
/*7312*/ LUID_AND_ATTRIBUTES Privileges[1];
/*7313*/ }TOKEN_PRIVILEGES,*PTOKEN_PRIVILEGES;
/*7316*/ typedef struct _TOKEN_OWNER{
/*7317*/ PSID Owner;
/*7318*/ }TOKEN_OWNER,*PTOKEN_OWNER;
/*7321*/ typedef struct _TOKEN_PRIMARY_GROUP{
/*7322*/ PSID PrimaryGroup;
/*7323*/ }TOKEN_PRIMARY_GROUP,*PTOKEN_PRIMARY_GROUP;
/*7326*/ typedef struct _TOKEN_DEFAULT_DACL{
/*7327*/ PACL DefaultDacl;
/*7328*/ }TOKEN_DEFAULT_DACL,*PTOKEN_DEFAULT_DACL;
/*7330*/ typedef struct _TOKEN_GROUPS_AND_PRIVILEGES{
/*7331*/ DWORD SidCount;
/*7332*/ DWORD SidLength;
/*7333*/ PSID_AND_ATTRIBUTES Sids;
/*7334*/ DWORD RestrictedSidCount;
/*7335*/ DWORD RestrictedSidLength;
/*7336*/ PSID_AND_ATTRIBUTES RestrictedSids;
/*7337*/ DWORD PrivilegeCount;
/*7338*/ DWORD PrivilegeLength;
/*7339*/ PLUID_AND_ATTRIBUTES Privileges;
/*7340*/ LUID AuthenticationId;
/*7341*/ }TOKEN_GROUPS_AND_PRIVILEGES,*PTOKEN_GROUPS_AND_PRIVILEGES;
/*7343*/ typedef struct _TOKEN_LINKED_TOKEN{
/*7344*/ HANDLE LinkedToken;
/*7345*/ }TOKEN_LINKED_TOKEN,*PTOKEN_LINKED_TOKEN;
/*7347*/ typedef struct _TOKEN_ELEVATION{
/*7348*/ DWORD TokenIsElevated;
/*7349*/ }TOKEN_ELEVATION,*PTOKEN_ELEVATION;
/*7351*/ typedef struct _TOKEN_MANDATORY_LABEL{
/*7352*/ SID_AND_ATTRIBUTES Label;
/*7353*/ }TOKEN_MANDATORY_LABEL,*PTOKEN_MANDATORY_LABEL;
/*7362*/ typedef struct _TOKEN_MANDATORY_POLICY{
/*7363*/ DWORD Policy;
/*7364*/ }TOKEN_MANDATORY_POLICY,*PTOKEN_MANDATORY_POLICY;
/*7366*/ typedef struct _TOKEN_ACCESS_INFORMATION{
/*7367*/ PSID_AND_ATTRIBUTES_HASH SidHash;
/*7368*/ PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
/*7369*/ PTOKEN_PRIVILEGES Privileges;
/*7370*/ LUID AuthenticationId;
/*7371*/ TOKEN_TYPE TokenType;
/*7372*/ SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
/*7373*/ TOKEN_MANDATORY_POLICY MandatoryPolicy;
/*7374*/ DWORD Flags;
/*7375*/ }TOKEN_ACCESS_INFORMATION,*PTOKEN_ACCESS_INFORMATION;
/*7383*/ typedef struct _TOKEN_AUDIT_POLICY{
/*7384*/ BYTE PerUserPolicy[(((52))>>1)+1];
/*7385*/ }TOKEN_AUDIT_POLICY,*PTOKEN_AUDIT_POLICY;
/*7389*/ typedef struct _TOKEN_SOURCE{
/*7390*/ CHAR SourceName[8];
/*7391*/ LUID SourceIdentifier;
/*7392*/ }TOKEN_SOURCE,*PTOKEN_SOURCE;
/*7395*/ typedef struct _TOKEN_STATISTICS{
/*7396*/ LUID TokenId;
/*7397*/ LUID AuthenticationId;
/*7398*/ LARGE_INTEGER ExpirationTime;
/*7399*/ TOKEN_TYPE TokenType;
/*7400*/ SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
/*7401*/ DWORD DynamicCharged;
/*7402*/ DWORD DynamicAvailable;
/*7403*/ DWORD GroupCount;
/*7404*/ DWORD PrivilegeCount;
/*7405*/ LUID ModifiedId;
/*7406*/ }TOKEN_STATISTICS,*PTOKEN_STATISTICS;
/*7410*/ typedef struct _TOKEN_CONTROL{
/*7411*/ LUID TokenId;
/*7412*/ LUID AuthenticationId;
/*7413*/ LUID ModifiedId;
/*7414*/ TOKEN_SOURCE TokenSource;
/*7415*/ }TOKEN_CONTROL,*PTOKEN_CONTROL;
/*7417*/ typedef struct _TOKEN_ORIGIN{
/*7418*/ LUID OriginatingLogonSession;
/*7419*/ }TOKEN_ORIGIN,*PTOKEN_ORIGIN;
/*7421*/ typedef enum _MANDATORY_LEVEL{
/*7422*/ MandatoryLevelUntrusted=0,
/*7423*/ MandatoryLevelLow,
/*7424*/ MandatoryLevelMedium,
/*7425*/ MandatoryLevelHigh,
/*7426*/ MandatoryLevelSystem,
/*7427*/ MandatoryLevelSecureProcess,
/*7428*/ MandatoryLevelCount
/*7429*/ }MANDATORY_LEVEL,*PMANDATORY_LEVEL;
/*7438*/ typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
/*7439*/ *PSECURITY_CONTEXT_TRACKING_MODE;
/*7447*/ typedef struct _SECURITY_QUALITY_OF_SERVICE{
/*7448*/ DWORD Length;
/*7449*/ SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
/*7450*/ SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
/*7451*/ BOOLEAN EffectiveOnly;
/*7452*/ }SECURITY_QUALITY_OF_SERVICE,*PSECURITY_QUALITY_OF_SERVICE;
/*7459*/ typedef struct _SE_IMPERSONATION_STATE{
/*7460*/ PACCESS_TOKEN Token;
/*7461*/ BOOLEAN CopyOnOpen;
/*7462*/ BOOLEAN EffectiveOnly;
/*7463*/ SECURITY_IMPERSONATION_LEVEL Level;
/*7464*/ }SE_IMPERSONATION_STATE,*PSE_IMPERSONATION_STATE;
/*7471*/ typedef DWORD SECURITY_INFORMATION,*PSECURITY_INFORMATION;
/*7542*/ typedef struct _JOB_SET_ARRAY{
/*7543*/ HANDLE JobHandle;
/*7544*/ DWORD MemberLevel;
/*7545*/ DWORD Flags;
/*7546*/ }JOB_SET_ARRAY,*PJOB_SET_ARRAY;
/*7551*/ typedef struct _NT_TIB{
/*7552*/ struct _EXCEPTION_REGISTRATION_RECORD*ExceptionList;
/*7553*/ PVOID StackBase;
/*7554*/ PVOID StackLimit;
/*7555*/ PVOID SubSystemTib;
/*7562*/ PVOID FiberData;
/*7564*/ PVOID ArbitraryUserPointer;
/*7565*/ struct _NT_TIB*Self;
/*7566*/ }NT_TIB;
/*7567*/ typedef NT_TIB*PNT_TIB;
/*7572*/ typedef struct _NT_TIB32{
/*7573*/ DWORD ExceptionList;
/*7574*/ DWORD StackBase;
/*7575*/ DWORD StackLimit;
/*7576*/ DWORD SubSystemTib;
/*7583*/ DWORD FiberData;
/*7585*/ DWORD ArbitraryUserPointer;
/*7586*/ DWORD Self;
/*7587*/ }NT_TIB32,*PNT_TIB32;
/*7589*/ typedef struct _NT_TIB64{
/*7590*/ DWORD64 ExceptionList;
/*7591*/ DWORD64 StackBase;
/*7592*/ DWORD64 StackLimit;
/*7593*/ DWORD64 SubSystemTib;
/*7600*/ DWORD64 FiberData;
/*7602*/ DWORD64 ArbitraryUserPointer;
/*7603*/ DWORD64 Self;
/*7604*/ }NT_TIB64,*PNT_TIB64;
/*7614*/ typedef struct _QUOTA_LIMITS{
/*7615*/ SIZE_T PagedPoolLimit;
/*7616*/ SIZE_T NonPagedPoolLimit;
/*7617*/ SIZE_T MinimumWorkingSetSize;
/*7618*/ SIZE_T MaximumWorkingSetSize;
/*7619*/ SIZE_T PagefileLimit;
/*7620*/ LARGE_INTEGER TimeLimit;
/*7621*/ }QUOTA_LIMITS,*PQUOTA_LIMITS;
/*7629*/ typedef union _RATE_QUOTA_LIMIT{
/*7630*/ DWORD RateData;
/*7631*/ struct{
/*7632*/ DWORD RatePercent:7;
/*7633*/ DWORD Reserved0:25;
/*7634*/ }s;
/*7635*/ }RATE_QUOTA_LIMIT,*PRATE_QUOTA_LIMIT;
/*7637*/ typedef struct _QUOTA_LIMITS_EX{
/*7638*/ SIZE_T PagedPoolLimit;
/*7639*/ SIZE_T NonPagedPoolLimit;
/*7640*/ SIZE_T MinimumWorkingSetSize;
/*7641*/ SIZE_T MaximumWorkingSetSize;
/*7642*/ SIZE_T PagefileLimit;
/*7643*/ LARGE_INTEGER TimeLimit;
/*7644*/ SIZE_T WorkingSetLimit;
/*7645*/ SIZE_T Reserved2;
/*7646*/ SIZE_T Reserved3;
/*7647*/ SIZE_T Reserved4;
/*7648*/ DWORD Flags;
/*7649*/ RATE_QUOTA_LIMIT CpuRateLimit;
/*7650*/ }QUOTA_LIMITS_EX,*PQUOTA_LIMITS_EX;
/*7652*/ typedef struct _IO_COUNTERS{
/*7653*/ ULONGLONG ReadOperationCount;
/*7654*/ ULONGLONG WriteOperationCount;
/*7655*/ ULONGLONG OtherOperationCount;
/*7656*/ ULONGLONG ReadTransferCount;
/*7657*/ ULONGLONG WriteTransferCount;
/*7658*/ ULONGLONG OtherTransferCount;
/*7659*/ }IO_COUNTERS;
/*7660*/ typedef IO_COUNTERS*PIO_COUNTERS;
/*7663*/ typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION{
/*7664*/ LARGE_INTEGER TotalUserTime;
/*7665*/ LARGE_INTEGER TotalKernelTime;
/*7666*/ LARGE_INTEGER ThisPeriodTotalUserTime;
/*7667*/ LARGE_INTEGER ThisPeriodTotalKernelTime;
/*7668*/ DWORD TotalPageFaultCount;
/*7669*/ DWORD TotalProcesses;
/*7670*/ DWORD ActiveProcesses;
/*7671*/ DWORD TotalTerminatedProcesses;
/*7672*/ }JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
/*7674*/ typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION{
/*7675*/ LARGE_INTEGER PerProcessUserTimeLimit;
/*7676*/ LARGE_INTEGER PerJobUserTimeLimit;
/*7677*/ DWORD LimitFlags;
/*7678*/ SIZE_T MinimumWorkingSetSize;
/*7679*/ SIZE_T MaximumWorkingSetSize;
/*7680*/ DWORD ActiveProcessLimit;
/*7681*/ ULONG_PTR Affinity;
/*7682*/ DWORD PriorityClass;
/*7683*/ DWORD SchedulingClass;
/*7684*/ }JOBOBJECT_BASIC_LIMIT_INFORMATION,*PJOBOBJECT_BASIC_LIMIT_INFORMATION;
/*7686*/ typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION{
/*7687*/ JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
/*7688*/ IO_COUNTERS IoInfo;
/*7689*/ SIZE_T ProcessMemoryLimit;
/*7690*/ SIZE_T JobMemoryLimit;
/*7691*/ SIZE_T PeakProcessMemoryUsed;
/*7692*/ SIZE_T PeakJobMemoryUsed;
/*7693*/ }JOBOBJECT_EXTENDED_LIMIT_INFORMATION,*PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
/*7695*/ typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST{
/*7696*/ DWORD NumberOfAssignedProcesses;
/*7697*/ DWORD NumberOfProcessIdsInList;
/*7698*/ ULONG_PTR ProcessIdList[1];
/*7699*/ }JOBOBJECT_BASIC_PROCESS_ID_LIST,*PJOBOBJECT_BASIC_PROCESS_ID_LIST;
/*7701*/ typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS{
/*7702*/ DWORD UIRestrictionsClass;
/*7703*/ }JOBOBJECT_BASIC_UI_RESTRICTIONS,*PJOBOBJECT_BASIC_UI_RESTRICTIONS;
/*7709*/ typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION{
/*7710*/ DWORD SecurityLimitFlags;
/*7711*/ HANDLE JobToken;
/*7712*/ PTOKEN_GROUPS SidsToDisable;
/*7713*/ PTOKEN_PRIVILEGES PrivilegesToDelete;
/*7714*/ PTOKEN_GROUPS RestrictedSids;
/*7715*/ }JOBOBJECT_SECURITY_LIMIT_INFORMATION,*PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
/*7717*/ typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION{
/*7718*/ DWORD EndOfJobTimeAction;
/*7719*/ }JOBOBJECT_END_OF_JOB_TIME_INFORMATION,*PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
/*7721*/ typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT{
/*7722*/ PVOID CompletionKey;
/*7723*/ HANDLE CompletionPort;
/*7724*/ }JOBOBJECT_ASSOCIATE_COMPLETION_PORT,*PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
/*7726*/ typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION{
/*7727*/ JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
/*7728*/ IO_COUNTERS IoInfo;
/*7729*/ }JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
/*7731*/ typedef struct _JOBOBJECT_JOBSET_INFORMATION{
/*7732*/ DWORD MemberLevel;
/*7733*/ }JOBOBJECT_JOBSET_INFORMATION,*PJOBOBJECT_JOBSET_INFORMATION;
/*7815*/ typedef enum _JOBOBJECTINFOCLASS{
/*7816*/ JobObjectBasicAccountingInformation=1,
/*7817*/ JobObjectBasicLimitInformation,
/*7818*/ JobObjectBasicProcessIdList,
/*7819*/ JobObjectBasicUIRestrictions,
/*7820*/ JobObjectSecurityLimitInformation,
/*7821*/ JobObjectEndOfJobTimeInformation,
/*7822*/ JobObjectAssociateCompletionPortInformation,
/*7823*/ JobObjectBasicAndIoAccountingInformation,
/*7824*/ JobObjectExtendedLimitInformation,
/*7825*/ JobObjectJobSetInformation,
/*7826*/ MaxJobObjectInfoClass
/*7827*/ }JOBOBJECTINFOCLASS;
/*7851*/ typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP{
/*7852*/ RelationProcessorCore,
/*7853*/ RelationNumaNode,
/*7854*/ RelationCache,
/*7855*/ RelationProcessorPackage
/*7856*/ }LOGICAL_PROCESSOR_RELATIONSHIP;
/*7860*/ typedef enum _PROCESSOR_CACHE_TYPE{
/*7861*/ CacheUnified,
/*7862*/ CacheInstruction,
/*7863*/ CacheData,
/*7864*/ CacheTrace
/*7865*/ }PROCESSOR_CACHE_TYPE;
/*7869*/ typedef struct _CACHE_DESCRIPTOR{
/*7870*/ BYTE Level;
/*7871*/ BYTE Associativity;
/*7872*/ WORD LineSize;
/*7873*/ DWORD Size;
/*7874*/ PROCESSOR_CACHE_TYPE Type;
/*7875*/ }CACHE_DESCRIPTOR,*PCACHE_DESCRIPTOR;
/*7877*/ typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION{
/*7878*/ ULONG_PTR ProcessorMask;
/*7879*/ LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
/*7880*/ union{
/*7881*/ struct{
/*7882*/ BYTE Flags;
/*7883*/ }ProcessorCore;
/*7884*/ struct{
/*7885*/ DWORD NodeNumber;
/*7886*/ }NumaNode;
/*7887*/ CACHE_DESCRIPTOR Cache;
/*7888*/ ULONGLONG Reserved[2];
/*7889*/ }u;
/*7890*/ }SYSTEM_LOGICAL_PROCESSOR_INFORMATION,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
/*7949*/ typedef struct _MEMORY_BASIC_INFORMATION{
/*7950*/ PVOID BaseAddress;
/*7951*/ PVOID AllocationBase;
/*7952*/ DWORD AllocationProtect;
/*7953*/ SIZE_T RegionSize;
/*7954*/ DWORD State;
/*7955*/ DWORD Protect;
/*7956*/ DWORD Type;
/*7957*/ }MEMORY_BASIC_INFORMATION,*PMEMORY_BASIC_INFORMATION;
/*7959*/ typedef struct _MEMORY_BASIC_INFORMATION32{
/*7960*/ DWORD BaseAddress;
/*7961*/ DWORD AllocationBase;
/*7962*/ DWORD AllocationProtect;
/*7963*/ DWORD RegionSize;
/*7964*/ DWORD State;
/*7965*/ DWORD Protect;
/*7966*/ DWORD Type;
/*7967*/ }MEMORY_BASIC_INFORMATION32,*PMEMORY_BASIC_INFORMATION32;
/*7969*/ typedef struct _MEMORY_BASIC_INFORMATION64{
/*7970*/ ULONGLONG BaseAddress;
/*7971*/ ULONGLONG AllocationBase;
/*7972*/ DWORD AllocationProtect;
/*7973*/ DWORD __alignment1;
/*7974*/ ULONGLONG RegionSize;
/*7975*/ DWORD State;
/*7976*/ DWORD Protect;
/*7977*/ DWORD Type;
/*7978*/ DWORD __alignment2;
/*7979*/ }MEMORY_BASIC_INFORMATION64,*PMEMORY_BASIC_INFORMATION64;
/*8149*/ typedef struct _FILE_NOTIFY_INFORMATION{
/*8150*/ DWORD NextEntryOffset;
/*8151*/ DWORD Action;
/*8152*/ DWORD FileNameLength;
/*8153*/ WCHAR FileName[1];
/*8154*/ }FILE_NOTIFY_INFORMATION,*PFILE_NOTIFY_INFORMATION;
/*8161*/ typedef union _FILE_SEGMENT_ELEMENT{
/*8162*/ PVOID64 Buffer;
/*8163*/ ULONGLONG Alignment;
/*8164*/ }FILE_SEGMENT_ELEMENT,*PFILE_SEGMENT_ELEMENT;
/*8174*/ typedef struct _REPARSE_GUID_DATA_BUFFER{
/*8175*/ DWORD ReparseTag;
/*8176*/ WORD ReparseDataLength;
/*8177*/ WORD Reserved;
/*8178*/ GUID ReparseGuid;
/*8179*/ struct{
/*8180*/ BYTE DataBuffer[1];
/*8181*/ }GenericReparseBuffer;
/*8182*/ }REPARSE_GUID_DATA_BUFFER,*PREPARSE_GUID_DATA_BUFFER;
/*8284*/ extern const GUID typ GUID_MAX_POWER_SAVINGS;
/*8291*/ extern const GUID typ GUID_MIN_POWER_SAVINGS;
/*8298*/ extern const GUID typ GUID_TYPICAL_POWER_SAVINGS;
/*8306*/ extern const GUID typ NO_SUBGROUP_GUID;
/*8314*/ extern const GUID typ ALL_POWERSCHEMES_GUID;
/*8351*/ extern const GUID typ GUID_POWERSCHEME_PERSONALITY;
/*8360*/ extern const GUID typ GUID_ACTIVE_POWERSCHEME;
/*8374*/ extern const GUID typ GUID_VIDEO_SUBGROUP;
/*8380*/ extern const GUID typ GUID_VIDEO_POWERDOWN_TIMEOUT;
/*8386*/ extern const GUID typ GUID_VIDEO_ADAPTIVE_POWERDOWN;
/*8392*/ extern const GUID typ GUID_MONITOR_POWER_ON;
/*8400*/ extern const GUID typ GUID_DISK_SUBGROUP;
/*8406*/ extern const GUID typ GUID_DISK_POWERDOWN_TIMEOUT;
/*8415*/ extern const GUID typ GUID_DISK_BURST_IGNORE_THRESHOLD;
/*8421*/ extern const GUID typ GUID_DISK_ADAPTIVE_POWERDOWN;
/*8430*/ extern const GUID typ GUID_SLEEP_SUBGROUP;
/*8436*/ extern const GUID typ GUID_SLEEP_IDLE_THRESHOLD;
/*8442*/ extern const GUID typ GUID_STANDBY_TIMEOUT;
/*8451*/ extern const GUID typ GUID_UNATTEND_SLEEP_TIMEOUT;
/*8457*/ extern const GUID typ GUID_HIBERNATE_TIMEOUT;
/*8463*/ extern const GUID typ GUID_HIBERNATE_FASTS4_POLICY;
/*8472*/ extern const GUID typ GUID_CRITICAL_POWER_TRANSITION;
/*8478*/ extern const GUID typ GUID_SYSTEM_AWAYMODE;
/*8484*/ extern const GUID typ GUID_ALLOW_AWAYMODE;
/*8492*/ extern const GUID typ GUID_ALLOW_STANDBY_STATES;
/*8499*/ extern const GUID typ GUID_ALLOW_RTC_WAKE;
/*8508*/ extern const GUID typ GUID_SYSTEM_BUTTON_SUBGROUP;
/*8513*/ extern const GUID typ GUID_POWERBUTTON_ACTION;
/*8514*/ extern const GUID typ GUID_POWERBUTTON_ACTION_FLAGS;
/*8520*/ extern const GUID typ GUID_SLEEPBUTTON_ACTION;
/*8521*/ extern const GUID typ GUID_SLEEPBUTTON_ACTION_FLAGS;
/*8528*/ extern const GUID typ GUID_USERINTERFACEBUTTON_ACTION;
/*8534*/ extern const GUID typ GUID_LIDCLOSE_ACTION;
/*8535*/ extern const GUID typ GUID_LIDCLOSE_ACTION_FLAGS;
/*8536*/ extern const GUID typ GUID_LIDOPEN_POWERSTATE;
/*8545*/ extern const GUID typ GUID_BATTERY_SUBGROUP;
/*8557*/ extern const GUID typ GUID_BATTERY_DISCHARGE_ACTION_0;
/*8558*/ extern const GUID typ GUID_BATTERY_DISCHARGE_LEVEL_0;
/*8559*/ extern const GUID typ GUID_BATTERY_DISCHARGE_FLAGS_0;
/*8561*/ extern const GUID typ GUID_BATTERY_DISCHARGE_ACTION_1;
/*8562*/ extern const GUID typ GUID_BATTERY_DISCHARGE_LEVEL_1;
/*8563*/ extern const GUID typ GUID_BATTERY_DISCHARGE_FLAGS_1;
/*8565*/ extern const GUID typ GUID_BATTERY_DISCHARGE_ACTION_2;
/*8566*/ extern const GUID typ GUID_BATTERY_DISCHARGE_LEVEL_2;
/*8567*/ extern const GUID typ GUID_BATTERY_DISCHARGE_FLAGS_2;
/*8569*/ extern const GUID typ GUID_BATTERY_DISCHARGE_ACTION_3;
/*8570*/ extern const GUID typ GUID_BATTERY_DISCHARGE_LEVEL_3;
/*8571*/ extern const GUID typ GUID_BATTERY_DISCHARGE_FLAGS_3;
/*8580*/ extern const GUID typ GUID_PROCESSOR_SETTINGS_SUBGROUP;
/*8583*/ extern const GUID typ GUID_PROCESSOR_THROTTLE_POLICY;
/*8591*/ extern const GUID typ GUID_PROCESSOR_THROTTLE_MAXIMUM;
/*8599*/ extern const GUID typ GUID_PROCESSOR_THROTTLE_MINIMUM;
/*8607*/ extern const GUID typ GUID_PROCESSOR_ALLOW_THROTTLING;
/*8613*/ extern const GUID typ GUID_PROCESSOR_IDLESTATE_POLICY;
/*8619*/ extern const GUID typ GUID_PROCESSOR_PERFSTATE_POLICY;
/*8627*/ extern const GUID typ GUID_SYSTEM_COOLING_POLICY;
/*8637*/ extern const GUID typ GUID_LOCK_CONSOLE_ON_WAKE;
/*8647*/ extern const GUID typ GUID_DEVICE_IDLE_POLICY;
/*8668*/ extern const GUID typ GUID_ACDC_POWER_SOURCE;
/*8684*/ extern const GUID typ GUID_LIDSWITCH_STATE_CHANGE;
/*8701*/ extern const GUID typ GUID_BATTERY_PERCENTAGE_REMAINING;
/*8708*/ extern const GUID typ GUID_IDLE_BACKGROUND_TASK;
/*8715*/ extern const GUID typ GUID_BACKGROUND_TASK_NOTIFICATION;
/*8723*/ extern const GUID typ GUID_APPLAUNCH_BUTTON;
/*8734*/ extern const GUID typ GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
/*8740*/ extern const GUID typ GUID_PCIEXPRESS_ASPM_POLICY;
/*8743*/ typedef enum _SYSTEM_POWER_STATE{
/*8744*/ PowerSystemUnspecified=0,
/*8745*/ PowerSystemWorking=1,
/*8746*/ PowerSystemSleeping1=2,
/*8747*/ PowerSystemSleeping2=3,
/*8748*/ PowerSystemSleeping3=4,
/*8749*/ PowerSystemHibernate=5,
/*8750*/ PowerSystemShutdown=6,
/*8751*/ PowerSystemMaximum=7
/*8752*/ }SYSTEM_POWER_STATE,*PSYSTEM_POWER_STATE;
/*8756*/ typedef enum{
/*8757*/ PowerActionNone=0,
/*8758*/ PowerActionReserved,
/*8759*/ PowerActionSleep,
/*8760*/ PowerActionHibernate,
/*8761*/ PowerActionShutdown,
/*8762*/ PowerActionShutdownReset,
/*8763*/ PowerActionShutdownOff,
/*8764*/ PowerActionWarmEject
/*8765*/ }POWER_ACTION,*PPOWER_ACTION;
/*8767*/ typedef enum _DEVICE_POWER_STATE{
/*8768*/ PowerDeviceUnspecified=0,
/*8769*/ PowerDeviceD0,
/*8770*/ PowerDeviceD1,
/*8771*/ PowerDeviceD2,
/*8772*/ PowerDeviceD3,
/*8773*/ PowerDeviceMaximum
/*8774*/ }DEVICE_POWER_STATE,*PDEVICE_POWER_STATE;
/*8784*/ typedef DWORD EXECUTION_STATE;
/*8786*/ typedef enum{
/*8787*/ LT_DONT_CARE,
/*8788*/ LT_LOWEST_LATENCY
/*8789*/ }LATENCY_TIME;
/*8810*/ typedef struct CM_Power_Data_s{
/*8811*/ DWORD PD_Size;
/*8812*/ DEVICE_POWER_STATE PD_MostRecentPowerState;
/*8813*/ DWORD PD_Capabilities;
/*8814*/ DWORD PD_D1Latency;
/*8815*/ DWORD PD_D2Latency;
/*8816*/ DWORD PD_D3Latency;
/*8817*/ DEVICE_POWER_STATE PD_PowerStateMapping[7];
/*8818*/ SYSTEM_POWER_STATE PD_DeepestSystemWake;
/*8819*/ }CM_POWER_DATA,*PCM_POWER_DATA;
/*8825*/ typedef enum{
/*8826*/ SystemPowerPolicyAc,
/*8827*/ SystemPowerPolicyDc,
/*8828*/ VerifySystemPolicyAc,
/*8829*/ VerifySystemPolicyDc,
/*8830*/ SystemPowerCapabilities,
/*8831*/ SystemBatteryState,
/*8832*/ SystemPowerStateHandler,
/*8833*/ ProcessorStateHandler,
/*8834*/ SystemPowerPolicyCurrent,
/*8835*/ AdministratorPowerPolicy,
/*8836*/ SystemReserveHiberFile,
/*8837*/ ProcessorInformation,
/*8838*/ SystemPowerInformation,
/*8839*/ ProcessorStateHandler2,
/*8840*/ LastWakeTime,
/*8841*/ LastSleepTime,
/*8842*/ SystemExecutionState,
/*8843*/ SystemPowerStateNotifyHandler,
/*8844*/ ProcessorPowerPolicyAc,
/*8845*/ ProcessorPowerPolicyDc,
/*8846*/ VerifyProcessorPowerPolicyAc,
/*8847*/ VerifyProcessorPowerPolicyDc,
/*8848*/ ProcessorPowerPolicyCurrent,
/*8849*/ SystemPowerStateLogging,
/*8850*/ SystemPowerLoggingEntry,
/*8851*/ SetPowerSettingValue,
/*8852*/ NotifyUserPowerSetting,
/*8853*/ GetPowerTransitionVetoes,
/*8854*/ SetPowerTransitionVeto,
/*8855*/ SystemVideoState,
/*8856*/ TraceApplicationPowerMessage,
/*8857*/ TraceApplicationPowerMessageEnd,
/*8858*/ ProcessorPerfStates,
/*8859*/ ProcessorIdleStates,
/*8860*/ ProcessorThrottleStates,
/*8861*/ SystemWakeSource,
/*8862*/ SystemHiberFileInformation,
/*8863*/ TraceServicePowerMessage,
/*8864*/ ProcessorLoad,
/*8865*/ PowerShutdownNotification,
/*8866*/ MonitorCapabilities
/*8867*/ }POWER_INFORMATION_LEVEL;
/*8880*/ typedef struct _PO_TRANSITION_VETO_REASON{
/*8881*/ DWORD ResourceId;
/*8882*/ DWORD ModuleNameOffset;
/*8883*/ }PO_TRANSITION_VETO_REASON,*PPO_TRANSITION_VETO_REASON;
/*8885*/ typedef struct _PO_TRANSITION_VETO_WINDOW{
/*8886*/ HANDLE Handle;
/*8887*/ }PO_TRANSITION_VETO_WINDOW,*PPO_TRANSITION_VETO_WINDOW;
/*8889*/ typedef struct _PO_TRANSITION_VETO_SERVICE{
/*8890*/ DWORD ServiceNameOffset;
/*8891*/ }PO_TRANSITION_VETO_SERVICE,*PPO_TRANSITION_VETO_SERVICE;
/*8902*/ typedef struct _PO_TRANSITION_VETO{
/*8903*/ DWORD Type;
/*8904*/ PO_TRANSITION_VETO_REASON Reason;
/*8905*/ DWORD ProcessId;
/*8907*/ union{
/*8908*/ PO_TRANSITION_VETO_WINDOW Window;
/*8909*/ PO_TRANSITION_VETO_SERVICE Service;
/*8911*/ }u;
/*8912*/ }PO_TRANSITION_VETO,*PPO_TRANSITION_VETO;
/*8914*/ typedef struct _PO_TRANSITION_VETOES{
/*8915*/ DWORD Count;
/*8916*/ PO_TRANSITION_VETO Vetoes[1];
/*8917*/ }PO_TRANSITION_VETOES,*PPO_TRANSITION_VETOES;
/*8923*/ typedef enum{
/*8924*/ PoAc,
/*8925*/ PoDc,
/*8926*/ PoHot,
/*8927*/ PoConditionMaximum
/*8928*/ }SYSTEM_POWER_CONDITION;
/*8930*/ typedef struct{
/*8936*/ DWORD Version;
/*8942*/ GUID Guid;
/*8949*/ SYSTEM_POWER_CONDITION PowerCondition;
/*8954*/ DWORD DataLength;
/*8959*/ BYTE Data[1];
/*8960*/ }SET_POWER_SETTING_VALUE,*PSET_POWER_SETTING_VALUE;
/*8964*/ typedef struct{
/*8965*/ GUID Guid;
/*8966*/ }NOTIFY_USER_POWER_SETTING,*PNOTIFY_USER_POWER_SETTING;
/*8973*/ typedef struct _APPLICATIONLAUNCH_SETTING_VALUE{
/*8979*/ LARGE_INTEGER ActivationTime;
/*8984*/ DWORD Flags;
/*8989*/ DWORD ButtonInstanceID;
/*8992*/ }APPLICATIONLAUNCH_SETTING_VALUE,*PAPPLICATIONLAUNCH_SETTING_VALUE;
/*8998*/ typedef enum{
/*8999*/ PlatformRoleUnspecified=0,
/*9000*/ PlatformRoleDesktop,
/*9001*/ PlatformRoleMobile,
/*9002*/ PlatformRoleWorkstation,
/*9003*/ PlatformRoleEnterpriseServer,
/*9004*/ PlatformRoleSOHOServer,
/*9005*/ PlatformRoleAppliancePC,
/*9006*/ PlatformRolePerformanceServer,
/*9007*/ PlatformRoleMaximum
/*9008*/ }POWER_PLATFORM_ROLE;
/*9014*/ typedef enum{
/*9015*/ DeviceWakeSourceType,
/*9016*/ FixedWakeSourceType
/*9017*/ }PO_WAKE_SOURCE_TYPE,*PPO_WAKE_SOURCE_TYPE;
/*9019*/ typedef enum{
/*9020*/ FixedWakeSourcePowerButton,
/*9021*/ FixedWakeSourceSleepButton,
/*9022*/ FixedWakeSourceRtc
/*9023*/ }PO_FIXED_WAKE_SOURCE_TYPE,*PPO_FIXED_WAKE_SOURCE_TYPE;
/*9025*/ typedef struct _PO_WAKE_SOURCE_HEADER{
/*9026*/ PO_WAKE_SOURCE_TYPE Type;
/*9027*/ DWORD Size;
/*9028*/ }PO_WAKE_SOURCE_HEADER,*PPO_WAKE_SOURCE_HEADER;
/*9030*/ typedef struct _PO_WAKE_SOURCE_DEVICE{
/*9031*/ PO_WAKE_SOURCE_HEADER Header;
/*9032*/ WCHAR InstancePath[1];
/*9033*/ }PO_WAKE_SOURCE_DEVICE,*PPO_WAKE_SOURCE_DEVICE;
/*9035*/ typedef struct _PO_WAKE_SOURCE_FIXED{
/*9036*/ PO_WAKE_SOURCE_HEADER Header;
/*9037*/ PO_FIXED_WAKE_SOURCE_TYPE FixedWakeSourceType;
/*9038*/ }PO_WAKE_SOURCE_FIXED,*PPO_WAKE_SOURCE_FIXED;
/*9040*/ typedef struct _PO_WAKE_SOURCE_INFO{
/*9041*/ DWORD Count;
/*9042*/ DWORD Offsets[1];
/*9043*/ }PO_WAKE_SOURCE_INFO,*PPO_WAKE_SOURCE_INFO;
/*9045*/ typedef struct _PO_WAKE_SOURCE_HISTORY{
/*9046*/ DWORD Count;
/*9047*/ DWORD Offsets[1];
/*9048*/ }PO_WAKE_SOURCE_HISTORY,*PPO_WAKE_SOURCE_HISTORY;
/*9055*/ typedef struct{
/*9056*/ DWORD Granularity;
/*9057*/ DWORD Capacity;
/*9058*/ }BATTERY_REPORTING_SCALE,*PBATTERY_REPORTING_SCALE;
/*9063*/ typedef struct{
/*9064*/ BOOLEAN Enabled;
/*9065*/ BYTE PercentBusy[32];
/*9066*/ }PPM_SIMULATED_PROCESSOR_LOAD,*PPPM_SIMULATED_PROCESSOR_LOAD;
/*9068*/ typedef struct{
/*9069*/ DWORD Frequency;
/*9070*/ DWORD Flags;
/*9071*/ DWORD PercentFrequency;
/*9072*/ }PPM_WMI_LEGACY_PERFSTATE,*PPPM_WMI_LEGACY_PERFSTATE;
/*9074*/ typedef struct{
/*9075*/ DWORD Latency;
/*9076*/ DWORD Power;
/*9077*/ DWORD TimeCheck;
/*9078*/ BYTE PromotePercent;
/*9079*/ BYTE DemotePercent;
/*9080*/ BYTE StateType;
/*9081*/ BYTE Reserved;
/*9082*/ DWORD StateFlags;
/*9083*/ DWORD Context;
/*9084*/ DWORD IdleHandler;
/*9085*/ DWORD Reserved1;
/*9086*/ }PPM_WMI_IDLE_STATE,*PPPM_WMI_IDLE_STATE;
/*9088*/ typedef struct{
/*9089*/ DWORD Type;
/*9090*/ DWORD Count;
/*9091*/ DWORD TargetState;
/*9092*/ DWORD OldState;
/*9093*/ DWORD64 TargetProcessors;
/*9094*/ PPM_WMI_IDLE_STATE State[1];
/*9095*/ }PPM_WMI_IDLE_STATES,*PPPM_WMI_IDLE_STATES;
/*9097*/ typedef struct{
/*9098*/ DWORD Frequency;
/*9099*/ DWORD Power;
/*9100*/ BYTE PercentFrequency;
/*9101*/ BYTE IncreaseLevel;
/*9102*/ BYTE DecreaseLevel;
/*9103*/ BYTE Type;
/*9104*/ DWORD IncreaseTime;
/*9105*/ DWORD DecreaseTime;
/*9106*/ DWORD64 Control;
/*9107*/ DWORD64 Status;
/*9108*/ DWORD HitCount;
/*9109*/ DWORD Reserved1;
/*9110*/ DWORD64 Reserved2;
/*9111*/ DWORD64 Reserved3;
/*9112*/ }PPM_WMI_PERF_STATE,*PPPM_WMI_PERF_STATE;
/*9114*/ typedef struct{
/*9115*/ DWORD Count;
/*9116*/ DWORD MaxFrequency;
/*9117*/ DWORD CurrentState;
/*9118*/ DWORD MaxPerfState;
/*9119*/ DWORD MinPerfState;
/*9120*/ DWORD LowestPerfState;
/*9121*/ DWORD ThermalConstraint;
/*9122*/ BYTE BusyAdjThreshold;
/*9123*/ BYTE PolicyType;
/*9124*/ BYTE Type;
/*9125*/ BYTE Reserved;
/*9126*/ DWORD TimerInterval;
/*9127*/ DWORD64 TargetProcessors;
/*9128*/ DWORD PStateHandler;
/*9129*/ DWORD PStateContext;
/*9130*/ DWORD TStateHandler;
/*9131*/ DWORD TStateContext;
/*9132*/ DWORD FeedbackHandler;
/*9133*/ DWORD Reserved1;
/*9134*/ DWORD64 Reserved2;
/*9135*/ PPM_WMI_PERF_STATE State[1];
/*9136*/ }PPM_WMI_PERF_STATES,*PPPM_WMI_PERF_STATES;
/*9144*/ typedef struct{
/*9145*/ DWORD IdleTransitions;
/*9146*/ DWORD FailedTransitions;
/*9147*/ DWORD InvalidBucketIndex;
/*9148*/ DWORD64 TotalTime;
/*9149*/ DWORD IdleTimeBuckets[6];
/*9150*/ }PPM_IDLE_STATE_ACCOUNTING,*PPPM_IDLE_STATE_ACCOUNTING;
/*9152*/ typedef struct{
/*9153*/ DWORD StateCount;
/*9154*/ DWORD TotalTransitions;
/*9155*/ DWORD ResetCount;
/*9156*/ DWORD64 StartTime;
/*9157*/ PPM_IDLE_STATE_ACCOUNTING State[1];
/*9158*/ }PPM_IDLE_ACCOUNTING,*PPPM_IDLE_ACCOUNTING;
/*9182*/ DEFINE_GUID(PPM_PERFSTATE_CHANGE_GUID,
/*9183*/ 0xa5b32ddd,0x7f39,0x4abc,0xb8,0x92,0x90,0xe,0x43,0xb5,0x9e,0xbb);
/*9186*/ DEFINE_GUID(PPM_PERFSTATE_DOMAIN_CHANGE_GUID,
/*9187*/ 0x995e6b7f,0xd653,0x497a,0xb9,0x78,0x36,0xa3,0xc,0x29,0xbf,0x1);
/*9190*/ DEFINE_GUID(PPM_IDLESTATE_CHANGE_GUID,
/*9191*/ 0x4838fe4f,0xf71c,0x4e51,0x9e,0xcc,0x84,0x30,0xa7,0xac,0x4c,0x6c);
/*9194*/ DEFINE_GUID(PPM_PERFSTATES_DATA_GUID,
/*9195*/ 0x5708cc20,0x7d40,0x4bf4,0xb4,0xaa,0x2b,0x01,0x33,0x8d,0x01,0x26);
/*9198*/ DEFINE_GUID(PPM_IDLESTATES_DATA_GUID,
/*9199*/ 0xba138e10,0xe250,0x4ad7,0x86,0x16,0xcf,0x1a,0x7a,0xd4,0x10,0xe7);
/*9202*/ DEFINE_GUID(PPM_IDLE_ACCOUNTING_GUID,
/*9203*/ 0xe2a26f78,0xae07,0x4ee0,0xa3,0x0f,0xce,0x54,0xf5,0x5a,0x94,0xcd);
/*9206*/ DEFINE_GUID(PPM_THERMALCONSTRAINT_GUID,
/*9207*/ 0xa852c2c8,0x1a4c,0x423b,0x8c,0x2c,0xf3,0x0d,0x82,0x93,0x1a,0x88);
/*9210*/ DEFINE_GUID(PPM_PERFMON_PERFSTATE_GUID,
/*9211*/ 0x7fd18652,0xcfe,0x40d2,0xb0,0xa1,0xb,0x6,0x6a,0x87,0x75,0x9e);
/*9214*/ DEFINE_GUID(PPM_THERMAL_POLICY_CHANGE_GUID,
/*9215*/ 0x48f377b8,0x6880,0x4c7b,0x8b,0xdc,0x38,0x1,0x76,0xc6,0x65,0x4d);
/*9218*/ typedef struct{
/*9219*/ DWORD State;
/*9220*/ DWORD Status;
/*9221*/ DWORD Latency;
/*9222*/ DWORD Speed;
/*9223*/ DWORD Processor;
/*9224*/ }PPM_PERFSTATE_EVENT,*PPPM_PERFSTATE_EVENT;
/*9226*/ typedef struct{
/*9227*/ DWORD State;
/*9228*/ DWORD Latency;
/*9229*/ DWORD Speed;
/*9230*/ DWORD64 Processors;
/*9231*/ }PPM_PERFSTATE_DOMAIN_EVENT,*PPPM_PERFSTATE_DOMAIN_EVENT;
/*9233*/ typedef struct{
/*9234*/ DWORD NewState;
/*9235*/ DWORD OldState;
/*9236*/ DWORD64 Processors;
/*9237*/ }PPM_IDLESTATE_EVENT,*PPPM_IDLESTATE_EVENT;
/*9239*/ typedef struct{
/*9240*/ DWORD ThermalConstraint;
/*9241*/ DWORD64 Processors;
/*9242*/ }PPM_THERMALCHANGE_EVENT,*PPPM_THERMALCHANGE_EVENT;
/*9247*/ typedef struct{
/*9248*/ BYTE Mode;
/*9249*/ DWORD64 Processors;
/*9250*/ }PPM_THERMAL_POLICY_EVENT,*PPPM_THERMAL_POLICY_EVENT;
/*9257*/ typedef struct{
/*9258*/ POWER_ACTION Action;
/*9259*/ DWORD Flags;
/*9260*/ DWORD EventCode;
/*9261*/ }POWER_ACTION_POLICY,*PPOWER_ACTION_POLICY;
/*9292*/ typedef struct{
/*9293*/ BOOLEAN Enable;
/*9294*/ BYTE Spare[3];
/*9295*/ DWORD BatteryLevel;
/*9296*/ POWER_ACTION_POLICY PowerPolicy;
/*9297*/ SYSTEM_POWER_STATE MinSystemState;
/*9298*/ }SYSTEM_POWER_LEVEL,*PSYSTEM_POWER_LEVEL;
/*9307*/ typedef struct _SYSTEM_POWER_POLICY{
/*9308*/ DWORD Revision;
/*9311*/ POWER_ACTION_POLICY PowerButton;
/*9312*/ POWER_ACTION_POLICY SleepButton;
/*9313*/ POWER_ACTION_POLICY LidClose;
/*9314*/ SYSTEM_POWER_STATE LidOpenWake;
/*9315*/ DWORD Reserved;
/*9318*/ POWER_ACTION_POLICY Idle;
/*9319*/ DWORD IdleTimeout;
/*9320*/ BYTE IdleSensitivity;
/*9322*/ BYTE DynamicThrottle;
/*9323*/ BYTE Spare2[2];
/*9326*/ SYSTEM_POWER_STATE MinSleep;
/*9327*/ SYSTEM_POWER_STATE MaxSleep;
/*9328*/ SYSTEM_POWER_STATE ReducedLatencySleep;
/*9329*/ DWORD WinLogonFlags;
/*9331*/ DWORD Spare3;
/*9335*/ DWORD DozeS4Timeout;
/*9338*/ DWORD BroadcastCapacityResolution;
/*9339*/ SYSTEM_POWER_LEVEL DischargePolicy[4];
/*9342*/ DWORD VideoTimeout;
/*9343*/ BOOLEAN VideoDimDisplay;
/*9344*/ DWORD VideoReserved[3];
/*9347*/ DWORD SpindownTimeout;
/*9350*/ BOOLEAN OptimizeForPower;
/*9351*/ BYTE FanThrottleTolerance;
/*9352*/ BYTE ForcedThrottle;
/*9353*/ BYTE MinThrottle;
/*9354*/ POWER_ACTION_POLICY OverThrottled;
/*9356*/ }SYSTEM_POWER_POLICY,*PSYSTEM_POWER_POLICY;
/*9367*/ typedef struct{
/*9368*/ DWORD TimeCheck;
/*9369*/ BYTE DemotePercent;
/*9370*/ BYTE PromotePercent;
/*9371*/ BYTE Spare[2];
/*9372*/ }PROCESSOR_IDLESTATE_INFO,*PPROCESSOR_IDLESTATE_INFO;
/*9374*/ typedef struct{
/*9375*/ WORD Revision;
/*9376*/ union{
/*9377*/ WORD AsWORD;
/*9378*/ struct{
/*9379*/ WORD AllowScaling:1;
/*9380*/ WORD Disabled:1;
/*9381*/ WORD Reserved:14;
/*9382*/ }s;
/*9383*/ }Flags;
/*9385*/ DWORD PolicyCount;
/*9386*/ PROCESSOR_IDLESTATE_INFO Policy[0x3];
/*9387*/ }PROCESSOR_IDLESTATE_POLICY,*PPROCESSOR_IDLESTATE_POLICY;
/*9402*/ typedef struct _PROCESSOR_POWER_POLICY_INFO{
/*9405*/ DWORD TimeCheck;
/*9406*/ DWORD DemoteLimit;
/*9407*/ DWORD PromoteLimit;
/*9410*/ BYTE DemotePercent;
/*9411*/ BYTE PromotePercent;
/*9412*/ BYTE Spare[2];
/*9415*/ DWORD AllowDemotion:1;
/*9416*/ DWORD AllowPromotion:1;
/*9417*/ DWORD Reserved:30;
/*9419*/ }PROCESSOR_POWER_POLICY_INFO,*PPROCESSOR_POWER_POLICY_INFO;
/*9422*/ typedef struct _PROCESSOR_POWER_POLICY{
/*9423*/ DWORD Revision;
/*9426*/ BYTE DynamicThrottle;
/*9427*/ BYTE Spare[3];
/*9430*/ DWORD DisableCStates:1;
/*9431*/ DWORD Reserved:31;
/*9436*/ DWORD PolicyCount;
/*9437*/ PROCESSOR_POWER_POLICY_INFO Policy[3];
/*9439*/ }PROCESSOR_POWER_POLICY,*PPROCESSOR_POWER_POLICY;
/*9450*/ typedef struct{
/*9451*/ DWORD Revision;
/*9452*/ BYTE MaxThrottle;
/*9453*/ BYTE MinThrottle;
/*9454*/ BYTE BusyAdjThreshold;
/*9455*/ union{
/*9456*/ BYTE Spare;
/*9457*/ union{
/*9458*/ BYTE AsBYTE;
/*9459*/ struct{
/*9460*/ BYTE NoDomainAccounting:1;
/*9461*/ BYTE IncreasePolicy:2;
/*9462*/ BYTE DecreasePolicy:2;
/*9463*/ BYTE Reserved:3;
/*9464*/ }s;
/*9465*/ }Flags;
/*9466*/ }u;
/*9468*/ DWORD TimeCheck;
/*9469*/ DWORD IncreaseTime;
/*9470*/ DWORD DecreaseTime;
/*9471*/ DWORD IncreasePercent;
/*9472*/ DWORD DecreasePercent;
/*9473*/ }PROCESSOR_PERFSTATE_POLICY,*PPROCESSOR_PERFSTATE_POLICY;
/*9476*/ typedef struct _ADMINISTRATOR_POWER_POLICY{
/*9479*/ SYSTEM_POWER_STATE MinSleep;
/*9480*/ SYSTEM_POWER_STATE MaxSleep;
/*9483*/ DWORD MinVideoTimeout;
/*9484*/ DWORD MaxVideoTimeout;
/*9487*/ DWORD MinSpindownTimeout;
/*9488*/ DWORD MaxSpindownTimeout;
/*9489*/ }ADMINISTRATOR_POWER_POLICY,*PADMINISTRATOR_POWER_POLICY;
/*9494*/ typedef struct{
/*9496*/ BOOLEAN PowerButtonPresent;
/*9497*/ BOOLEAN SleepButtonPresent;
/*9498*/ BOOLEAN LidPresent;
/*9499*/ BOOLEAN SystemS1;
/*9500*/ BOOLEAN SystemS2;
/*9501*/ BOOLEAN SystemS3;
/*9502*/ BOOLEAN SystemS4;
/*9503*/ BOOLEAN SystemS5;
/*9504*/ BOOLEAN HiberFilePresent;
/*9505*/ BOOLEAN FullWake;
/*9506*/ BOOLEAN VideoDimPresent;
/*9507*/ BOOLEAN ApmPresent;
/*9508*/ BOOLEAN UpsPresent;
/*9511*/ BOOLEAN ThermalControl;
/*9512*/ BOOLEAN ProcessorThrottle;
/*9513*/ BYTE ProcessorMinThrottle;
/*9519*/ BYTE ProcessorMaxThrottle;
/*9520*/ BOOLEAN FastSystemS4;
/*9521*/ BYTE spare2[3];
/*9525*/ BOOLEAN DiskSpinDown;
/*9526*/ BYTE spare3[8];
/*9529*/ BOOLEAN SystemBatteriesPresent;
/*9530*/ BOOLEAN BatteriesAreShortTerm;
/*9531*/ BATTERY_REPORTING_SCALE BatteryScale[3];
/*9534*/ SYSTEM_POWER_STATE AcOnLineWake;
/*9535*/ SYSTEM_POWER_STATE SoftLidWake;
/*9536*/ SYSTEM_POWER_STATE RtcWake;
/*9537*/ SYSTEM_POWER_STATE MinDeviceWakeState;
/*9538*/ SYSTEM_POWER_STATE DefaultLowLatencyWake;
/*9539*/ }SYSTEM_POWER_CAPABILITIES,*PSYSTEM_POWER_CAPABILITIES;
/*9541*/ typedef struct{
/*9542*/ BOOLEAN AcOnLine;
/*9543*/ BOOLEAN BatteryPresent;
/*9544*/ BOOLEAN Charging;
/*9545*/ BOOLEAN Discharging;
/*9546*/ BOOLEAN Spare1[4];
/*9548*/ DWORD MaxCapacity;
/*9549*/ DWORD RemainingCapacity;
/*9550*/ DWORD Rate;
/*9551*/ DWORD EstimatedTime;
/*9553*/ DWORD DefaultAlert1;
/*9554*/ DWORD DefaultAlert2;
/*9555*/ }SYSTEM_BATTERY_STATE,*PSYSTEM_BATTERY_STATE;
/*9586*/ typedef struct _IMAGE_DOS_HEADER{
/*9587*/ WORD e_magic;
/*9588*/ WORD e_cblp;
/*9589*/ WORD e_cp;
/*9590*/ WORD e_crlc;
/*9591*/ WORD e_cparhdr;
/*9592*/ WORD e_minalloc;
/*9593*/ WORD e_maxalloc;
/*9594*/ WORD e_ss;
/*9595*/ WORD e_sp;
/*9596*/ WORD e_csum;
/*9597*/ WORD e_ip;
/*9598*/ WORD e_cs;
/*9599*/ WORD e_lfarlc;
/*9600*/ WORD e_ovno;
/*9601*/ WORD e_res[4];
/*9602*/ WORD e_oemid;
/*9603*/ WORD e_oeminfo;
/*9604*/ WORD e_res2[10];
/*9605*/ LONG e_lfanew;
/*9606*/ }IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;
/*9608*/ typedef struct _IMAGE_OS2_HEADER{
/*9609*/ WORD ne_magic;
/*9610*/ CHAR ne_ver;
/*9611*/ CHAR ne_rev;
/*9612*/ WORD ne_enttab;
/*9613*/ WORD ne_cbenttab;
/*9614*/ LONG ne_crc;
/*9615*/ WORD ne_flags;
/*9616*/ WORD ne_autodata;
/*9617*/ WORD ne_heap;
/*9618*/ WORD ne_stack;
/*9619*/ LONG ne_csip;
/*9620*/ LONG ne_sssp;
/*9621*/ WORD ne_cseg;
/*9622*/ WORD ne_cmod;
/*9623*/ WORD ne_cbnrestab;
/*9624*/ WORD ne_segtab;
/*9625*/ WORD ne_rsrctab;
/*9626*/ WORD ne_restab;
/*9627*/ WORD ne_modtab;
/*9628*/ WORD ne_imptab;
/*9629*/ LONG ne_nrestab;
/*9630*/ WORD ne_cmovent;
/*9631*/ WORD ne_align;
/*9632*/ WORD ne_cres;
/*9633*/ BYTE ne_exetyp;
/*9634*/ BYTE ne_flagsothers;
/*9635*/ WORD ne_pretthunks;
/*9636*/ WORD ne_psegrefbytes;
/*9637*/ WORD ne_swaparea;
/*9638*/ WORD ne_expver;
/*9639*/ }IMAGE_OS2_HEADER,*PIMAGE_OS2_HEADER;
/*9641*/ typedef struct _IMAGE_VXD_HEADER{
/*9642*/ WORD e32_magic;
/*9643*/ BYTE e32_border;
/*9644*/ BYTE e32_worder;
/*9645*/ DWORD e32_level;
/*9646*/ WORD e32_cpu;
/*9647*/ WORD e32_os;
/*9648*/ DWORD e32_ver;
/*9649*/ DWORD e32_mflags;
/*9650*/ DWORD e32_mpages;
/*9651*/ DWORD e32_startobj;
/*9652*/ DWORD e32_eip;
/*9653*/ DWORD e32_stackobj;
/*9654*/ DWORD e32_esp;
/*9655*/ DWORD e32_pagesize;
/*9656*/ DWORD e32_lastpagesize;
/*9657*/ DWORD e32_fixupsize;
/*9658*/ DWORD e32_fixupsum;
/*9659*/ DWORD e32_ldrsize;
/*9660*/ DWORD e32_ldrsum;
/*9661*/ DWORD e32_objtab;
/*9662*/ DWORD e32_objcnt;
/*9663*/ DWORD e32_objmap;
/*9664*/ DWORD e32_itermap;
/*9665*/ DWORD e32_rsrctab;
/*9666*/ DWORD e32_rsrccnt;
/*9667*/ DWORD e32_restab;
/*9668*/ DWORD e32_enttab;
/*9669*/ DWORD e32_dirtab;
/*9670*/ DWORD e32_dircnt;
/*9671*/ DWORD e32_fpagetab;
/*9672*/ DWORD e32_frectab;
/*9673*/ DWORD e32_impmod;
/*9674*/ DWORD e32_impmodcnt;
/*9675*/ DWORD e32_impproc;
/*9676*/ DWORD e32_pagesum;
/*9677*/ DWORD e32_datapage;
/*9678*/ DWORD e32_preload;
/*9679*/ DWORD e32_nrestab;
/*9680*/ DWORD e32_cbnrestab;
/*9681*/ DWORD e32_nressum;
/*9682*/ DWORD e32_autodata;
/*9683*/ DWORD e32_debuginfo;
/*9684*/ DWORD e32_debuglen;
/*9685*/ DWORD e32_instpreload;
/*9686*/ DWORD e32_instdemand;
/*9687*/ DWORD e32_heapsize;
/*9688*/ BYTE e32_res3[12];
/*9689*/ DWORD e32_winresoff;
/*9690*/ DWORD e32_winreslen;
/*9691*/ WORD e32_devid;
/*9692*/ WORD e32_ddkver;
/*9693*/ }IMAGE_VXD_HEADER,*PIMAGE_VXD_HEADER;
/*9703*/ typedef struct _IMAGE_FILE_HEADER{
/*9704*/ WORD Machine;
/*9705*/ WORD NumberOfSections;
/*9706*/ DWORD TimeDateStamp;
/*9707*/ DWORD PointerToSymbolTable;
/*9708*/ DWORD NumberOfSymbols;
/*9709*/ WORD SizeOfOptionalHeader;
/*9710*/ WORD Characteristics;
/*9711*/ }IMAGE_FILE_HEADER,*PIMAGE_FILE_HEADER;
/*9765*/ typedef struct _IMAGE_DATA_DIRECTORY{
/*9766*/ DWORD VirtualAddress;
/*9767*/ DWORD Size;
/*9768*/ }IMAGE_DATA_DIRECTORY,*PIMAGE_DATA_DIRECTORY;
/*9776*/ typedef struct _IMAGE_OPTIONAL_HEADER{
/*9781*/ WORD Magic;
/*9782*/ BYTE MajorLinkerVersion;
/*9783*/ BYTE MinorLinkerVersion;
/*9784*/ DWORD SizeOfCode;
/*9785*/ DWORD SizeOfInitializedData;
/*9786*/ DWORD SizeOfUninitializedData;
/*9787*/ DWORD AddressOfEntryPoint;
/*9788*/ DWORD BaseOfCode;
/*9789*/ DWORD BaseOfData;
/*9795*/ DWORD ImageBase;
/*9796*/ DWORD SectionAlignment;
/*9797*/ DWORD FileAlignment;
/*9798*/ WORD MajorOperatingSystemVersion;
/*9799*/ WORD MinorOperatingSystemVersion;
/*9800*/ WORD MajorImageVersion;
/*9801*/ WORD MinorImageVersion;
/*9802*/ WORD MajorSubsystemVersion;
/*9803*/ WORD MinorSubsystemVersion;
/*9804*/ DWORD Win32VersionValue;
/*9805*/ DWORD SizeOfImage;
/*9806*/ DWORD SizeOfHeaders;
/*9807*/ DWORD CheckSum;
/*9808*/ WORD Subsystem;
/*9809*/ WORD DllCharacteristics;
/*9810*/ DWORD SizeOfStackReserve;
/*9811*/ DWORD SizeOfStackCommit;
/*9812*/ DWORD SizeOfHeapReserve;
/*9813*/ DWORD SizeOfHeapCommit;
/*9814*/ DWORD LoaderFlags;
/*9815*/ DWORD NumberOfRvaAndSizes;
/*9816*/ IMAGE_DATA_DIRECTORY DataDirectory[16];
/*9817*/ }IMAGE_OPTIONAL_HEADER32,*PIMAGE_OPTIONAL_HEADER32;
/*9819*/ typedef struct _IMAGE_ROM_OPTIONAL_HEADER{
/*9820*/ WORD Magic;
/*9821*/ BYTE MajorLinkerVersion;
/*9822*/ BYTE MinorLinkerVersion;
/*9823*/ DWORD SizeOfCode;
/*9824*/ DWORD SizeOfInitializedData;
/*9825*/ DWORD SizeOfUninitializedData;
/*9826*/ DWORD AddressOfEntryPoint;
/*9827*/ DWORD BaseOfCode;
/*9828*/ DWORD BaseOfData;
/*9829*/ DWORD BaseOfBss;
/*9830*/ DWORD GprMask;
/*9831*/ DWORD CprMask[4];
/*9832*/ DWORD GpValue;
/*9833*/ }IMAGE_ROM_OPTIONAL_HEADER,*PIMAGE_ROM_OPTIONAL_HEADER;
/*9835*/ typedef struct _IMAGE_OPTIONAL_HEADER64{
/*9836*/ WORD Magic;
/*9837*/ BYTE MajorLinkerVersion;
/*9838*/ BYTE MinorLinkerVersion;
/*9839*/ DWORD SizeOfCode;
/*9840*/ DWORD SizeOfInitializedData;
/*9841*/ DWORD SizeOfUninitializedData;
/*9842*/ DWORD AddressOfEntryPoint;
/*9843*/ DWORD BaseOfCode;
/*9844*/ ULONGLONG ImageBase;
/*9845*/ DWORD SectionAlignment;
/*9846*/ DWORD FileAlignment;
/*9847*/ WORD MajorOperatingSystemVersion;
/*9848*/ WORD MinorOperatingSystemVersion;
/*9849*/ WORD MajorImageVersion;
/*9850*/ WORD MinorImageVersion;
/*9851*/ WORD MajorSubsystemVersion;
/*9852*/ WORD MinorSubsystemVersion;
/*9853*/ DWORD Win32VersionValue;
/*9854*/ DWORD SizeOfImage;
/*9855*/ DWORD SizeOfHeaders;
/*9856*/ DWORD CheckSum;
/*9857*/ WORD Subsystem;
/*9858*/ WORD DllCharacteristics;
/*9859*/ ULONGLONG SizeOfStackReserve;
/*9860*/ ULONGLONG SizeOfStackCommit;
/*9861*/ ULONGLONG SizeOfHeapReserve;
/*9862*/ ULONGLONG SizeOfHeapCommit;
/*9863*/ DWORD LoaderFlags;
/*9864*/ DWORD NumberOfRvaAndSizes;
/*9865*/ IMAGE_DATA_DIRECTORY DataDirectory[16];
/*9866*/ }IMAGE_OPTIONAL_HEADER64,*PIMAGE_OPTIONAL_HEADER64;
/*9877*/ typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
/*9878*/ typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;
/*9882*/ typedef struct _IMAGE_NT_HEADERS64{
/*9883*/ DWORD Signature;
/*9884*/ IMAGE_FILE_HEADER FileHeader;
/*9885*/ IMAGE_OPTIONAL_HEADER64 OptionalHeader;
/*9886*/ }IMAGE_NT_HEADERS64,*PIMAGE_NT_HEADERS64;
/*9888*/ typedef struct _IMAGE_NT_HEADERS{
/*9889*/ DWORD Signature;
/*9890*/ IMAGE_FILE_HEADER FileHeader;
/*9891*/ IMAGE_OPTIONAL_HEADER32 OptionalHeader;
/*9892*/ }IMAGE_NT_HEADERS32,*PIMAGE_NT_HEADERS32;
/*9894*/ typedef struct _IMAGE_ROM_HEADERS{
/*9895*/ IMAGE_FILE_HEADER FileHeader;
/*9896*/ IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
/*9897*/ }IMAGE_ROM_HEADERS,*PIMAGE_ROM_HEADERS;
/*9903*/ typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
/*9904*/ typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
/*9972*/ typedef struct ANON_OBJECT_HEADER{
/*9973*/ WORD Sig1;
/*9974*/ WORD Sig2;
/*9975*/ WORD Version;
/*9976*/ WORD Machine;
/*9977*/ DWORD TimeDateStamp;
/*9978*/ CLSID ClassID;
/*9979*/ DWORD SizeOfData;
/*9980*/ }ANON_OBJECT_HEADER;
/*9982*/ typedef struct ANON_OBJECT_HEADER_V2{
/*9983*/ WORD Sig1;
/*9984*/ WORD Sig2;
/*9985*/ WORD Version;
/*9986*/ WORD Machine;
/*9987*/ DWORD TimeDateStamp;
/*9988*/ CLSID ClassID;
/*9989*/ DWORD SizeOfData;
/*9990*/ DWORD Flags;
/*9991*/ DWORD MetaDataSize;
/*9992*/ DWORD MetaDataOffset;
/*9993*/ }ANON_OBJECT_HEADER_V2;
/*10000*/ typedef struct _IMAGE_SECTION_HEADER{
/*10001*/ BYTE Name[8];
/*10002*/ union{
/*10003*/ DWORD PhysicalAddress;
/*10004*/ DWORD VirtualSize;
/*10005*/ }Misc;
/*10006*/ DWORD VirtualAddress;
/*10007*/ DWORD SizeOfRawData;
/*10008*/ DWORD PointerToRawData;
/*10009*/ DWORD PointerToRelocations;
/*10010*/ DWORD PointerToLinenumbers;
/*10011*/ WORD NumberOfRelocations;
/*10012*/ WORD NumberOfLinenumbers;
/*10013*/ DWORD Characteristics;
/*10014*/ }IMAGE_SECTION_HEADER,*PIMAGE_SECTION_HEADER;
/*10087*/ typedef struct _IMAGE_SYMBOL{
/*10088*/ union{
/*10089*/ BYTE ShortName[8];
/*10090*/ struct{
/*10091*/ DWORD Short;
/*10092*/ DWORD Long;
/*10093*/ }Name;
/*10094*/ DWORD LongName[2];
/*10095*/ }N;
/*10096*/ DWORD Value;
/*10097*/ SHORT SectionNumber;
/*10098*/ WORD Type;
/*10099*/ BYTE StorageClass;
/*10100*/ BYTE NumberOfAuxSymbols;
/*10101*/ }IMAGE_SYMBOL;
/*10102*/ typedef IMAGE_SYMBOL*PIMAGE_SYMBOL;
/*10230*/ typedef union _IMAGE_AUX_SYMBOL{
/*10231*/ struct{
/*10232*/ DWORD TagIndex;
/*10233*/ union{
/*10234*/ struct{
/*10235*/ WORD Linenumber;
/*10236*/ WORD Size;
/*10237*/ }LnSz;
/*10238*/ DWORD TotalSize;
/*10239*/ }Misc;
/*10240*/ union{
/*10241*/ struct{
/*10242*/ DWORD PointerToLinenumber;
/*10243*/ DWORD PointerToNextFunction;
/*10244*/ }Function;
/*10245*/ struct{
/*10246*/ WORD Dimension[4];
/*10247*/ }Array;
/*10248*/ }FcnAry;
/*10249*/ WORD TvIndex;
/*10250*/ }Sym;
/*10251*/ struct{
/*10252*/ BYTE Name[18];
/*10253*/ }File;
/*10254*/ struct{
/*10255*/ DWORD Length;
/*10256*/ WORD NumberOfRelocations;
/*10257*/ WORD NumberOfLinenumbers;
/*10258*/ DWORD CheckSum;
/*10259*/ SHORT Number;
/*10260*/ BYTE Selection;
/*10261*/ }Section;
/*10262*/ }IMAGE_AUX_SYMBOL;
/*10263*/ typedef IMAGE_AUX_SYMBOL*PIMAGE_AUX_SYMBOL;
/*10265*/ typedef enum IMAGE_AUX_SYMBOL_TYPE{
/*10266*/ IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF=1,
/*10267*/ }IMAGE_AUX_SYMBOL_TYPE;
/*10271*/ typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF{
/*10272*/ BYTE bAuxType;
/*10273*/ BYTE bReserved;
/*10274*/ DWORD SymbolTableIndex;
/*10275*/ BYTE rgbReserved[12];
/*10276*/ }IMAGE_AUX_SYMBOL_TOKEN_DEF;
/*10278*/ typedef IMAGE_AUX_SYMBOL_TOKEN_DEF*PIMAGE_AUX_SYMBOL_TOKEN_DEF;
/*10302*/ typedef struct _IMAGE_RELOCATION{
/*10303*/ union{
/*10304*/ DWORD VirtualAddress;
/*10305*/ DWORD RelocCount;
/*10306*/ }u;
/*10307*/ DWORD SymbolTableIndex;
/*10308*/ WORD Type;
/*10309*/ }IMAGE_RELOCATION;
/*10310*/ typedef IMAGE_RELOCATION*PIMAGE_RELOCATION;
/*10673*/ typedef struct _IMAGE_LINENUMBER{
/*10674*/ union{
/*10675*/ DWORD SymbolTableIndex;
/*10676*/ DWORD VirtualAddress;
/*10677*/ }Type;
/*10678*/ WORD Linenumber;
/*10679*/ }IMAGE_LINENUMBER;
/*10680*/ typedef IMAGE_LINENUMBER*PIMAGE_LINENUMBER;
/*10690*/ typedef struct _IMAGE_BASE_RELOCATION{
/*10691*/ DWORD VirtualAddress;
/*10692*/ DWORD SizeOfBlock;
/*10694*/ }IMAGE_BASE_RELOCATION;
/*10695*/ typedef IMAGE_BASE_RELOCATION*PIMAGE_BASE_RELOCATION;
/*10723*/ typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER{
/*10724*/ BYTE Name[16];
/*10725*/ BYTE Date[12];
/*10726*/ BYTE UserID[6];
/*10727*/ BYTE GroupID[6];
/*10728*/ BYTE Mode[8];
/*10729*/ BYTE Size[10];
/*10730*/ BYTE EndHeader[2];
/*10731*/ }IMAGE_ARCHIVE_MEMBER_HEADER,*PIMAGE_ARCHIVE_MEMBER_HEADER;
/*10743*/ typedef struct _IMAGE_EXPORT_DIRECTORY{
/*10744*/ DWORD Characteristics;
/*10745*/ DWORD TimeDateStamp;
/*10746*/ WORD MajorVersion;
/*10747*/ WORD MinorVersion;
/*10748*/ DWORD Name;
/*10749*/ DWORD Base;
/*10750*/ DWORD NumberOfFunctions;
/*10751*/ DWORD NumberOfNames;
/*10752*/ DWORD AddressOfFunctions;
/*10753*/ DWORD AddressOfNames;
/*10754*/ DWORD AddressOfNameOrdinals;
/*10755*/ }IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;
/*10761*/ typedef struct _IMAGE_IMPORT_BY_NAME{
/*10762*/ WORD Hint;
/*10763*/ BYTE Name[1];
/*10764*/ }IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;
/*10768*/ typedef struct _IMAGE_THUNK_DATA64{
/*10769*/ union{
/*10770*/ ULONGLONG ForwarderString;
/*10771*/ ULONGLONG Function;
/*10772*/ ULONGLONG Ordinal;
/*10773*/ ULONGLONG AddressOfData;
/*10774*/ }u1;
/*10775*/ }IMAGE_THUNK_DATA64;
/*10776*/ typedef IMAGE_THUNK_DATA64*PIMAGE_THUNK_DATA64;
/*10780*/ typedef struct _IMAGE_THUNK_DATA32{
/*10781*/ union{
/*10782*/ DWORD ForwarderString;
/*10783*/ DWORD Function;
/*10784*/ DWORD Ordinal;
/*10785*/ DWORD AddressOfData;
/*10786*/ }u1;
/*10787*/ }IMAGE_THUNK_DATA32;
/*10788*/ typedef IMAGE_THUNK_DATA32*PIMAGE_THUNK_DATA32;
/*10801*/ typedef void
/*10802*/ (*PIMAGE_TLS_CALLBACK)(
/*10803*/ PVOID DllHandle,
/*10804*/ DWORD Reason,
/*10805*/ PVOID Reserved
/*10806*/ );
/*10808*/ typedef struct _IMAGE_TLS_DIRECTORY64{
/*10809*/ ULONGLONG StartAddressOfRawData;
/*10810*/ ULONGLONG EndAddressOfRawData;
/*10811*/ ULONGLONG AddressOfIndex;
/*10812*/ ULONGLONG AddressOfCallBacks;
/*10813*/ DWORD SizeOfZeroFill;
/*10814*/ DWORD Characteristics;
/*10815*/ }IMAGE_TLS_DIRECTORY64;
/*10816*/ typedef IMAGE_TLS_DIRECTORY64*PIMAGE_TLS_DIRECTORY64;
/*10818*/ typedef struct _IMAGE_TLS_DIRECTORY32{
/*10819*/ DWORD StartAddressOfRawData;
/*10820*/ DWORD EndAddressOfRawData;
/*10821*/ DWORD AddressOfIndex;
/*10822*/ DWORD AddressOfCallBacks;
/*10823*/ DWORD SizeOfZeroFill;
/*10824*/ DWORD Characteristics;
/*10825*/ }IMAGE_TLS_DIRECTORY32;
/*10826*/ typedef IMAGE_TLS_DIRECTORY32*PIMAGE_TLS_DIRECTORY32;
/*10839*/ typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
/*10840*/ typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;
/*10842*/ typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
/*10843*/ typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;
/*10846*/ typedef struct _IMAGE_IMPORT_DESCRIPTOR{
/*10847*/ union{
/*10848*/ DWORD Characteristics;
/*10849*/ DWORD OriginalFirstThunk;
/*10850*/ }u;
/*10851*/ DWORD TimeDateStamp;
/*10856*/ DWORD ForwarderChain;
/*10857*/ DWORD Name;
/*10858*/ DWORD FirstThunk;
/*10859*/ }IMAGE_IMPORT_DESCRIPTOR;
/*10860*/ typedef IMAGE_IMPORT_DESCRIPTOR*PIMAGE_IMPORT_DESCRIPTOR;
/*10866*/ typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR{
/*10867*/ DWORD TimeDateStamp;
/*10868*/ WORD OffsetModuleName;
/*10869*/ WORD NumberOfModuleForwarderRefs;
/*10871*/ }IMAGE_BOUND_IMPORT_DESCRIPTOR,*PIMAGE_BOUND_IMPORT_DESCRIPTOR;
/*10873*/ typedef struct _IMAGE_BOUND_FORWARDER_REF{
/*10874*/ DWORD TimeDateStamp;
/*10875*/ WORD OffsetModuleName;
/*10876*/ WORD Reserved;
/*10877*/ }IMAGE_BOUND_FORWARDER_REF,*PIMAGE_BOUND_FORWARDER_REF;
/*10897*/ typedef struct _IMAGE_RESOURCE_DIRECTORY{
/*10898*/ DWORD Characteristics;
/*10899*/ DWORD TimeDateStamp;
/*10900*/ WORD MajorVersion;
/*10901*/ WORD MinorVersion;
/*10902*/ WORD NumberOfNamedEntries;
/*10903*/ WORD NumberOfIdEntries;
/*10905*/ }IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;
/*10924*/ typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY{
/*10925*/ union{
/*10926*/ struct{
/*10927*/ DWORD NameOffset:31;
/*10928*/ DWORD NameIsString:1;
/*10929*/ }s;
/*10930*/ DWORD Name;
/*10931*/ WORD Id;
/*10932*/ }u;
/*10933*/ union{
/*10934*/ DWORD OffsetToData;
/*10935*/ struct{
/*10936*/ DWORD OffsetToDirectory:31;
/*10937*/ DWORD DataIsDirectory:1;
/*10938*/ }s2;
/*10939*/ }u2;
/*10940*/ }IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;
/*10951*/ typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING{
/*10952*/ WORD Length;
/*10953*/ CHAR NameString[1];
/*10954*/ }IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;
/*10957*/ typedef struct _IMAGE_RESOURCE_DIR_STRING_U{
/*10958*/ WORD Length;
/*10959*/ WCHAR NameString[1];
/*10960*/ }IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;
/*10972*/ typedef struct _IMAGE_RESOURCE_DATA_ENTRY{
/*10973*/ DWORD OffsetToData;
/*10974*/ DWORD Size;
/*10975*/ DWORD CodePage;
/*10976*/ DWORD Reserved;
/*10977*/ }IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;
/*10983*/ typedef struct{
/*10984*/ DWORD Size;
/*10985*/ DWORD TimeDateStamp;
/*10986*/ WORD MajorVersion;
/*10987*/ WORD MinorVersion;
/*10988*/ DWORD GlobalFlagsClear;
/*10989*/ DWORD GlobalFlagsSet;
/*10990*/ DWORD CriticalSectionDefaultTimeout;
/*10991*/ DWORD DeCommitFreeBlockThreshold;
/*10992*/ DWORD DeCommitTotalFreeThreshold;
/*10993*/ DWORD LockPrefixTable;
/*10994*/ DWORD MaximumAllocationSize;
/*10995*/ DWORD VirtualMemoryThreshold;
/*10996*/ DWORD ProcessHeapFlags;
/*10997*/ DWORD ProcessAffinityMask;
/*10998*/ WORD CSDVersion;
/*10999*/ WORD Reserved1;
/*11000*/ DWORD EditList;
/*11001*/ DWORD SecurityCookie;
/*11002*/ DWORD SEHandlerTable;
/*11003*/ DWORD SEHandlerCount;
/*11004*/ }IMAGE_LOAD_CONFIG_DIRECTORY32,*PIMAGE_LOAD_CONFIG_DIRECTORY32;
/*11006*/ typedef struct{
/*11007*/ DWORD Size;
/*11008*/ DWORD TimeDateStamp;
/*11009*/ WORD MajorVersion;
/*11010*/ WORD MinorVersion;
/*11011*/ DWORD GlobalFlagsClear;
/*11012*/ DWORD GlobalFlagsSet;
/*11013*/ DWORD CriticalSectionDefaultTimeout;
/*11014*/ ULONGLONG DeCommitFreeBlockThreshold;
/*11015*/ ULONGLONG DeCommitTotalFreeThreshold;
/*11016*/ ULONGLONG LockPrefixTable;
/*11017*/ ULONGLONG MaximumAllocationSize;
/*11018*/ ULONGLONG VirtualMemoryThreshold;
/*11019*/ ULONGLONG ProcessAffinityMask;
/*11020*/ DWORD ProcessHeapFlags;
/*11021*/ WORD CSDVersion;
/*11022*/ WORD Reserved1;
/*11023*/ ULONGLONG EditList;
/*11024*/ ULONGLONG SecurityCookie;
/*11025*/ ULONGLONG SEHandlerTable;
/*11026*/ ULONGLONG SEHandlerCount;
/*11027*/ }IMAGE_LOAD_CONFIG_DIRECTORY64,*PIMAGE_LOAD_CONFIG_DIRECTORY64;
/*11033*/ typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
/*11034*/ typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
/*11046*/ typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY{
/*11047*/ DWORD FuncStart;
/*11048*/ DWORD PrologLen:8;
/*11049*/ DWORD FuncLen:22;
/*11050*/ DWORD ThirtyTwoBit:1;
/*11051*/ DWORD ExceptionFlag:1;
/*11052*/ }IMAGE_CE_RUNTIME_FUNCTION_ENTRY,*PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
/*11054*/ typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY{
/*11055*/ ULONGLONG BeginAddress;
/*11056*/ ULONGLONG EndAddress;
/*11057*/ ULONGLONG ExceptionHandler;
/*11058*/ ULONGLONG HandlerData;
/*11059*/ ULONGLONG PrologEndAddress;
/*11060*/ }IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
/*11062*/ typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY{
/*11063*/ DWORD BeginAddress;
/*11064*/ DWORD EndAddress;
/*11065*/ DWORD ExceptionHandler;
/*11066*/ DWORD HandlerData;
/*11067*/ DWORD PrologEndAddress;
/*11068*/ }IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
/*11070*/ typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY{
/*11071*/ DWORD BeginAddress;
/*11072*/ DWORD EndAddress;
/*11073*/ DWORD UnwindInfoAddress;
/*11074*/ }_IMAGE_RUNTIME_FUNCTION_ENTRY,*_PIMAGE_RUNTIME_FUNCTION_ENTRY;
/*11076*/ typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
/*11077*/ typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
/*11093*/ typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
/*11094*/ typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
/*11102*/ typedef struct _IMAGE_DEBUG_DIRECTORY{
/*11103*/ DWORD Characteristics;
/*11104*/ DWORD TimeDateStamp;
/*11105*/ WORD MajorVersion;
/*11106*/ WORD MinorVersion;
/*11107*/ DWORD Type;
/*11108*/ DWORD SizeOfData;
/*11109*/ DWORD AddressOfRawData;
/*11110*/ DWORD PointerToRawData;
/*11111*/ }IMAGE_DEBUG_DIRECTORY,*PIMAGE_DEBUG_DIRECTORY;
/*11127*/ typedef struct _IMAGE_COFF_SYMBOLS_HEADER{
/*11128*/ DWORD NumberOfSymbols;
/*11129*/ DWORD LvaToFirstSymbol;
/*11130*/ DWORD NumberOfLinenumbers;
/*11131*/ DWORD LvaToFirstLinenumber;
/*11132*/ DWORD RvaToFirstByteOfCode;
/*11133*/ DWORD RvaToLastByteOfCode;
/*11134*/ DWORD RvaToFirstByteOfData;
/*11135*/ DWORD RvaToLastByteOfData;
/*11136*/ }IMAGE_COFF_SYMBOLS_HEADER,*PIMAGE_COFF_SYMBOLS_HEADER;
/*11143*/ typedef struct _FPO_DATA{
/*11144*/ DWORD ulOffStart;
/*11145*/ DWORD cbProcSize;
/*11146*/ DWORD cdwLocals;
/*11147*/ WORD cdwParams;
/*11148*/ WORD cbProlog:8;
/*11149*/ WORD cbRegs:3;
/*11150*/ WORD fHasSEH:1;
/*11151*/ WORD fUseBP:1;
/*11152*/ WORD reserved:1;
/*11153*/ WORD cbFrame:2;
/*11154*/ }FPO_DATA,*PFPO_DATA;
/*11160*/ typedef struct _IMAGE_DEBUG_MISC{
/*11161*/ DWORD DataType;
/*11162*/ DWORD Length;
/*11164*/ BOOLEAN Unicode;
/*11165*/ BYTE Reserved[3];
/*11166*/ BYTE Data[1];
/*11167*/ }IMAGE_DEBUG_MISC,*PIMAGE_DEBUG_MISC;
/*11176*/ typedef struct _IMAGE_FUNCTION_ENTRY{
/*11177*/ DWORD StartingAddress;
/*11178*/ DWORD EndingAddress;
/*11179*/ DWORD EndOfPrologue;
/*11180*/ }IMAGE_FUNCTION_ENTRY,*PIMAGE_FUNCTION_ENTRY;
/*11182*/ typedef struct _IMAGE_FUNCTION_ENTRY64{
/*11183*/ ULONGLONG StartingAddress;
/*11184*/ ULONGLONG EndingAddress;
/*11185*/ union{
/*11186*/ ULONGLONG EndOfPrologue;
/*11187*/ ULONGLONG UnwindInfoAddress;
/*11188*/ }u;
/*11189*/ }IMAGE_FUNCTION_ENTRY64,*PIMAGE_FUNCTION_ENTRY64;
/*11211*/ typedef struct _IMAGE_SEPARATE_DEBUG_HEADER{
/*11212*/ WORD Signature;
/*11213*/ WORD Flags;
/*11214*/ WORD Machine;
/*11215*/ WORD Characteristics;
/*11216*/ DWORD TimeDateStamp;
/*11217*/ DWORD CheckSum;
/*11218*/ DWORD ImageBase;
/*11219*/ DWORD SizeOfImage;
/*11220*/ DWORD NumberOfSections;
/*11221*/ DWORD ExportedNamesSize;
/*11222*/ DWORD DebugDirectorySize;
/*11223*/ DWORD SectionAlignment;
/*11224*/ DWORD Reserved[2];
/*11225*/ }IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;
/*11227*/ typedef struct _NON_PAGED_DEBUG_INFO{
/*11228*/ WORD Signature;
/*11229*/ WORD Flags;
/*11230*/ DWORD Size;
/*11231*/ WORD Machine;
/*11232*/ WORD Characteristics;
/*11233*/ DWORD TimeDateStamp;
/*11234*/ DWORD CheckSum;
/*11235*/ DWORD SizeOfImage;
/*11236*/ ULONGLONG ImageBase;
/*11239*/ }NON_PAGED_DEBUG_INFO,*PNON_PAGED_DEBUG_INFO;
/*11261*/ typedef struct _ImageArchitectureHeader{
/*11262*/ unsigned int AmaskValue:1;
/*11264*/ int:7;
/*11265*/ unsigned int AmaskShift:8;
/*11266*/ int:16;
/*11267*/ DWORD FirstEntryRVA;
/*11268*/ }IMAGE_ARCHITECTURE_HEADER,*PIMAGE_ARCHITECTURE_HEADER;
/*11270*/ typedef struct _ImageArchitectureEntry{
/*11271*/ DWORD FixupInstRVA;
/*11272*/ DWORD NewInst;
/*11273*/ }IMAGE_ARCHITECTURE_ENTRY,*PIMAGE_ARCHITECTURE_ENTRY;
/*11284*/ typedef struct IMPORT_OBJECT_HEADER{
/*11285*/ WORD Sig1;
/*11286*/ WORD Sig2;
/*11287*/ WORD Version;
/*11288*/ WORD Machine;
/*11289*/ DWORD TimeDateStamp;
/*11290*/ DWORD SizeOfData;
/*11292*/ union{
/*11293*/ WORD Ordinal;
/*11294*/ WORD Hint;
/*11295*/ }u;
/*11297*/ WORD Type:2;
/*11298*/ WORD NameType:3;
/*11299*/ WORD Reserved:11;
/*11300*/ }IMPORT_OBJECT_HEADER;
/*11302*/ typedef enum IMPORT_OBJECT_TYPE
/*11303*/ {
/*11304*/ IMPORT_OBJECT_CODE=0,
/*11305*/ IMPORT_OBJECT_DATA=1,
/*11306*/ IMPORT_OBJECT_CONST=2,
/*11307*/ }IMPORT_OBJECT_TYPE;
/*11309*/ typedef enum IMPORT_OBJECT_NAME_TYPE
/*11310*/ {
/*11311*/ IMPORT_OBJECT_ORDINAL=0,
/*11312*/ IMPORT_OBJECT_NAME=1,
/*11313*/ IMPORT_OBJECT_NAME_NO_PREFIX=2,
/*11314*/ IMPORT_OBJECT_NAME_UNDECORATE=3,
/*11316*/ }IMPORT_OBJECT_NAME_TYPE;
/*11322*/ typedef enum ReplacesCorHdrNumericDefines
/*11323*/ {
/*11325*/ COMIMAGE_FLAGS_ILONLY=0x00000001,
/*11326*/ COMIMAGE_FLAGS_32BITREQUIRED=0x00000002,
/*11327*/ COMIMAGE_FLAGS_IL_LIBRARY=0x00000004,
/*11328*/ COMIMAGE_FLAGS_STRONGNAMESIGNED=0x00000008,
/*11329*/ COMIMAGE_FLAGS_NATIVE_ENTRYPOINT=0x00000010,
/*11330*/ COMIMAGE_FLAGS_TRACKDEBUGDATA=0x00010000,
/*11333*/ COR_VERSION_MAJOR_V2=2,
/*11334*/ COR_VERSION_MAJOR=COR_VERSION_MAJOR_V2,
/*11335*/ COR_VERSION_MINOR=0,
/*11336*/ COR_DELETED_NAME_LENGTH=8,
/*11337*/ COR_VTABLEGAP_NAME_LENGTH=8,
/*11340*/ NATIVE_TYPE_MAX_CB=1,
/*11341*/ COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,
/*11344*/ IMAGE_COR_MIH_METHODRVA=0x01,
/*11345*/ IMAGE_COR_MIH_EHRVA=0x02,
/*11346*/ IMAGE_COR_MIH_BASICBLOCK=0x08,
/*11349*/ COR_VTABLE_32BIT=0x01,
/*11350*/ COR_VTABLE_64BIT=0x02,
/*11351*/ COR_VTABLE_FROM_UNMANAGED=0x04,
/*11352*/ COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN=0x08,
/*11353*/ COR_VTABLE_CALL_MOST_DERIVED=0x10,
/*11356*/ IMAGE_COR_EATJ_THUNK_SIZE=32,
/*11360*/ MAX_CLASS_NAME=1024,
/*11361*/ MAX_PACKAGE_NAME=1024,
/*11362*/ }ReplacesCorHdrNumericDefines;
/*11365*/ typedef struct IMAGE_COR20_HEADER
/*11366*/ {
/*11368*/ DWORD cb;
/*11369*/ WORD MajorRuntimeVersion;
/*11370*/ WORD MinorRuntimeVersion;
/*11373*/ IMAGE_DATA_DIRECTORY MetaData;
/*11374*/ DWORD Flags;
/*11378*/ union{
/*11379*/ DWORD EntryPointToken;
/*11380*/ DWORD EntryPointRVA;
/*11381*/ }u;
/*11384*/ IMAGE_DATA_DIRECTORY Resources;
/*11385*/ IMAGE_DATA_DIRECTORY StrongNameSignature;
/*11388*/ IMAGE_DATA_DIRECTORY CodeManagerTable;
/*11389*/ IMAGE_DATA_DIRECTORY VTableFixups;
/*11390*/ IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
/*11393*/ IMAGE_DATA_DIRECTORY ManagedNativeHeader;
/*11395*/ }IMAGE_COR20_HEADER,*PIMAGE_COR20_HEADER;
/*11473*/ typedef union _SLIST_HEADER{
/*11474*/ ULONGLONG Alignment;
/*11475*/ struct{
/*11476*/ SINGLE_LIST_ENTRY Next;
/*11477*/ WORD Depth;
/*11478*/ WORD Sequence;
/*11479*/ }s;
/*11480*/ }SLIST_HEADER,*PSLIST_HEADER;
/*11487*/ 
/*11488*/ void
/*11489*/ 
/*11490*/ RtlInitializeSListHead(
/*11491*/ typ PSLIST_HEADER ListHead
/*11492*/ );
/*11494*/ 
/*11495*/ PSINGLE_LIST_ENTRY
/*11496*/ 
/*11497*/ RtlFirstEntrySList(
/*11498*/ typ const SLIST_HEADER*ListHead
/*11499*/ );
/*11501*/ 
/*11502*/ PSINGLE_LIST_ENTRY
/*11503*/ 
/*11504*/ RtlInterlockedPopEntrySList(
/*11505*/ typ PSLIST_HEADER ListHead
/*11506*/ );
/*11508*/ 
/*11509*/ PSINGLE_LIST_ENTRY
/*11510*/ 
/*11511*/ RtlInterlockedPushEntrySList(
/*11512*/ typ PSLIST_HEADER ListHead,
/*11513*/ typ PSINGLE_LIST_ENTRY ListEntry
/*11514*/ );
/*11516*/ 
/*11517*/ PSINGLE_LIST_ENTRY
/*11518*/ 
/*11519*/ RtlInterlockedFlushSList(
/*11520*/ typ PSLIST_HEADER ListHead
/*11521*/ );
/*11523*/ 
/*11524*/ WORD
/*11525*/ 
/*11526*/ RtlQueryDepthSList(
/*11527*/ typ PSLIST_HEADER ListHead
/*11528*/ );
/*11556*/ typedef union _RTL_RUN_ONCE{
/*11557*/ PVOID Ptr;
/*11558*/ }RTL_RUN_ONCE,*PRTL_RUN_ONCE;
/*11560*/ typedef
/*11561*/ DWORD
/*11562*/ (*PRTL_RUN_ONCE_INIT_FN)(
/*11563*/ typ typ typ typ typ PRTL_RUN_ONCE RunOnce,
/*11564*/ typ typ typ typ typ typ typ PVOID Parameter,
/*11565*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*Context
/*11566*/ );
/*11572*/ 
/*11573*/ void
/*11574*/ 
/*11575*/ RtlRunOnceInitialize(
/*11576*/ typ typ typ typ typ PRTL_RUN_ONCE RunOnce
/*11577*/ );
/*11579*/ 
/*11580*/ DWORD
/*11581*/ 
/*11582*/ RtlRunOnceExecuteOnce(
/*11583*/ typ typ typ typ typ PRTL_RUN_ONCE RunOnce,
/*11584*/ typ typ typ typ typ typ PRTL_RUN_ONCE_INIT_FN InitFn,
/*11585*/ typ typ typ typ typ typ typ PVOID Parameter,
/*11586*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*Context
/*11587*/ );
/*11589*/ 
/*11590*/ DWORD
/*11591*/ 
/*11592*/ RtlRunOnceBeginInitialize(
/*11593*/ typ typ typ typ typ PRTL_RUN_ONCE RunOnce,
/*11594*/ typ typ typ typ typ DWORD Flags,
/*11595*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*Context
/*11596*/ );
/*11598*/ 
/*11599*/ DWORD
/*11600*/ 
/*11601*/ RtlRunOnceComplete(
/*11602*/ typ typ typ typ typ PRTL_RUN_ONCE RunOnce,
/*11603*/ typ typ typ typ typ DWORD Flags,
/*11604*/ typ typ typ typ typ typ typ PVOID Context
/*11605*/ );
/*11624*/ __inline
/*11625*/ DWORD
/*11626*/ HEAP_MAKE_TAG_FLAGS(
/*11627*/ typ DWORD TagBase,
/*11628*/ typ DWORD Tag
/*11629*/ )
/*11631*/ {
/*11632*/ typ;
/*11633*/ return((DWORD)((TagBase)+((Tag)<<18)));
/*11634*/ }
/*11713*/ 
/*11714*/ SIZE_T
/*11715*/ 
/*11716*/ RtlCompareMemory(
/*11717*/ const void*Source1,
/*11718*/ const void*Source2,
/*11719*/ SIZE_T Length
/*11720*/ );
/*11733*/ __inline
/*11734*/ PVOID
/*11735*/ RtlSecureZeroMemory(
/*11736*/ typ typ typ typ typ typ typ PVOID ptr,
/*11737*/ typ typ typ typ typ SIZE_T cnt
/*11738*/ )
/*11739*/ {
/*11740*/ volatile char*vptr=(volatile char*)ptr;
/*11748*/ while(cnt){
/*11749*/ *vptr=0;
/*11750*/ vptr++;
/*11751*/ cnt--;
/*11752*/ }
/*11756*/ return ptr;
/*11757*/ }
/*11779*/ typedef struct _MESSAGE_RESOURCE_ENTRY{
/*11780*/ WORD Length;
/*11781*/ WORD Flags;
/*11782*/ BYTE Text[1];
/*11783*/ }MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;
/*11787*/ typedef struct _MESSAGE_RESOURCE_BLOCK{
/*11788*/ DWORD LowId;
/*11789*/ DWORD HighId;
/*11790*/ DWORD OffsetToEntries;
/*11791*/ }MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;
/*11793*/ typedef struct _MESSAGE_RESOURCE_DATA{
/*11794*/ DWORD NumberOfBlocks;
/*11795*/ MESSAGE_RESOURCE_BLOCK Blocks[1];
/*11796*/ }MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;
/*11799*/ 
/*11800*/ PVOID
/*11801*/ 
/*11802*/ RtlPcToFileHeader(
/*11803*/ PVOID PcValue,
/*11804*/ PVOID*BaseOfImage
/*11805*/ );
/*11807*/ typedef struct _OSVERSIONINFOA{
/*11808*/ DWORD dwOSVersionInfoSize;
/*11809*/ DWORD dwMajorVersion;
/*11810*/ DWORD dwMinorVersion;
/*11811*/ DWORD dwBuildNumber;
/*11812*/ DWORD dwPlatformId;
/*11813*/ CHAR szCSDVersion[128];
/*11814*/ }OSVERSIONINFOA,*POSVERSIONINFOA,*LPOSVERSIONINFOA;
/*11816*/ typedef struct _OSVERSIONINFOW{
/*11817*/ DWORD dwOSVersionInfoSize;
/*11818*/ DWORD dwMajorVersion;
/*11819*/ DWORD dwMinorVersion;
/*11820*/ DWORD dwBuildNumber;
/*11821*/ DWORD dwPlatformId;
/*11822*/ WCHAR szCSDVersion[128];
/*11823*/ }OSVERSIONINFOW,*POSVERSIONINFOW,*LPOSVERSIONINFOW,RTL_OSVERSIONINFOW,*PRTL_OSVERSIONINFOW;
/*11829*/ typedef OSVERSIONINFOA OSVERSIONINFO;
/*11830*/ typedef POSVERSIONINFOA POSVERSIONINFO;
/*11831*/ typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
/*11834*/ typedef struct _OSVERSIONINFOEXA{
/*11835*/ DWORD dwOSVersionInfoSize;
/*11836*/ DWORD dwMajorVersion;
/*11837*/ DWORD dwMinorVersion;
/*11838*/ DWORD dwBuildNumber;
/*11839*/ DWORD dwPlatformId;
/*11840*/ CHAR szCSDVersion[128];
/*11841*/ WORD wServicePackMajor;
/*11842*/ WORD wServicePackMinor;
/*11843*/ WORD wSuiteMask;
/*11844*/ BYTE wProductType;
/*11845*/ BYTE wReserved;
/*11846*/ }OSVERSIONINFOEXA,*POSVERSIONINFOEXA,*LPOSVERSIONINFOEXA;
/*11847*/ typedef struct _OSVERSIONINFOEXW{
/*11848*/ DWORD dwOSVersionInfoSize;
/*11849*/ DWORD dwMajorVersion;
/*11850*/ DWORD dwMinorVersion;
/*11851*/ DWORD dwBuildNumber;
/*11852*/ DWORD dwPlatformId;
/*11853*/ WCHAR szCSDVersion[128];
/*11854*/ WORD wServicePackMajor;
/*11855*/ WORD wServicePackMinor;
/*11856*/ WORD wSuiteMask;
/*11857*/ BYTE wProductType;
/*11858*/ BYTE wReserved;
/*11859*/ }OSVERSIONINFOEXW,*POSVERSIONINFOEXW,*LPOSVERSIONINFOEXW,RTL_OSVERSIONINFOEXW,*PRTL_OSVERSIONINFOEXW;
/*11865*/ typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
/*11866*/ typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
/*11867*/ typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
/*11928*/ 
/*11929*/ ULONGLONG
/*11930*/ 
/*11931*/ VerSetConditionMask(
/*11932*/ typ ULONGLONG ConditionMask,
/*11933*/ typ DWORD TypeMask,
/*11934*/ typ BYTE Condition
/*11935*/ );
/*11942*/ 
/*11943*/ BOOLEAN
/*11944*/ 
/*11945*/ RtlGetProductInfo(
/*11946*/ typ typ typ typ typ DWORD OSMajorVersion,
/*11947*/ typ typ typ typ typ DWORD OSMinorVersion,
/*11948*/ typ typ typ typ typ DWORD SpMajorVersion,
/*11949*/ typ typ typ typ typ DWORD SpMinorVersion,
/*11950*/ typ typ typ typ typ PDWORD ReturnedProductType
/*11951*/ );
/*11956*/ typedef struct _RTL_CRITICAL_SECTION_DEBUG{
/*11957*/ WORD Type;
/*11958*/ WORD CreatorBackTraceIndex;
/*11959*/ struct _RTL_CRITICAL_SECTION*CriticalSection;
/*11960*/ LIST_ENTRY ProcessLocksList;
/*11961*/ DWORD EntryCount;
/*11962*/ DWORD ContentionCount;
/*11963*/ DWORD Flags;
/*11964*/ WORD CreatorBackTraceIndexHigh;
/*11965*/ WORD SpareWORD;
/*11966*/ }RTL_CRITICAL_SECTION_DEBUG,*PRTL_CRITICAL_SECTION_DEBUG,RTL_RESOURCE_DEBUG,*PRTL_RESOURCE_DEBUG;
/*11987*/ typedef struct _RTL_CRITICAL_SECTION{
/*11988*/ PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
/*11995*/ LONG LockCount;
/*11996*/ LONG RecursionCount;
/*11997*/ HANDLE OwningThread;
/*11998*/ HANDLE LockSemaphore;
/*11999*/ ULONG_PTR SpinCount;
/*12000*/ }RTL_CRITICAL_SECTION,*PRTL_CRITICAL_SECTION;
/*12004*/ typedef struct _RTL_SRWLOCK{
/*12005*/ PVOID Ptr;
/*12006*/ }RTL_SRWLOCK,*PRTL_SRWLOCK;
/*12008*/ typedef struct _RTL_CONDITION_VARIABLE{
/*12009*/ PVOID Ptr;
/*12010*/ }RTL_CONDITION_VARIABLE,*PRTL_CONDITION_VARIABLE;
/*12013*/ typedef LONG(*PVECTORED_EXCEPTION_HANDLER)(
/*12014*/ struct _EXCEPTION_POINTERS*ExceptionInfo
/*12015*/ );
/*12017*/ typedef enum _HEAP_INFORMATION_CLASS{
/*12019*/ HeapCompatibilityInformation,
/*12020*/ HeapEnableTerminationOnCorruption
/*12023*/ }HEAP_INFORMATION_CLASS;
/*12037*/ typedef void(*WAITORTIMERCALLBACKFUNC)(PVOID,BOOLEAN);
/*12038*/ typedef void(*WORKERCALLBACKFUNC)(PVOID);
/*12039*/ typedef void(*APC_CALLBACK_FUNCTION)(DWORD,PVOID,PVOID);
/*12040*/ typedef
/*12041*/ void
/*12042*/ (*PFLS_CALLBACK_FUNCTION)(
/*12043*/ typ PVOID lpFlsData
/*12044*/ );
/*12046*/ typedef
/*12047*/ BOOLEAN
/*12048*/ (*PSECURE_MEMORY_CACHE_CALLBACK)(
/*12049*/ typ typ typ typ typ typ typ PVOID Addr,
/*12050*/ typ typ typ typ typ SIZE_T Range
/*12051*/ );
/*12056*/ typedef enum _ACTIVATION_CONTEXT_INFO_CLASS{
/*12057*/ ActivationContextBasicInformation=1,
/*12058*/ ActivationContextDetailedInformation=2,
/*12059*/ AssemblyDetailedInformationInActivationContext=3,
/*12060*/ FileInformationInAssemblyOfAssemblyInActivationContext=4,
/*12061*/ RunlevelInformationInActivationContext=5,
/*12062*/ MaxActivationContextInfoClass,
/*12067*/ AssemblyDetailedInformationInActivationContxt=3,
/*12068*/ FileInformationInAssemblyOfAssemblyInActivationContxt=4
/*12069*/ }ACTIVATION_CONTEXT_INFO_CLASS;
/*12074*/ typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX{
/*12075*/ DWORD ulAssemblyIndex;
/*12076*/ DWORD ulFileIndexInAssembly;
/*12077*/ }ACTIVATION_CONTEXT_QUERY_INDEX,*PACTIVATION_CONTEXT_QUERY_INDEX;
/*12079*/ typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX*PCACTIVATION_CONTEXT_QUERY_INDEX;
/*12087*/ typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION{
/*12088*/ DWORD ulFlags;
/*12089*/ DWORD ulFilenameLength;
/*12090*/ DWORD ulPathLength;
/*12092*/ PCWSTR lpFileName;
/*12093*/ PCWSTR lpFilePath;
/*12094*/ }ASSEMBLY_FILE_DETAILED_INFORMATION,*PASSEMBLY_FILE_DETAILED_INFORMATION;
/*12095*/ typedef const ASSEMBLY_FILE_DETAILED_INFORMATION*PCASSEMBLY_FILE_DETAILED_INFORMATION;
/*12106*/ typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION{
/*12107*/ DWORD ulFlags;
/*12108*/ DWORD ulEncodedAssemblyIdentityLength;
/*12109*/ DWORD ulManifestPathType;
/*12110*/ DWORD ulManifestPathLength;
/*12111*/ LARGE_INTEGER liManifestLastWriteTime;
/*12112*/ DWORD ulPolicyPathType;
/*12113*/ DWORD ulPolicyPathLength;
/*12114*/ LARGE_INTEGER liPolicyLastWriteTime;
/*12115*/ DWORD ulMetadataSatelliteRosterIndex;
/*12117*/ DWORD ulManifestVersionMajor;
/*12118*/ DWORD ulManifestVersionMinor;
/*12119*/ DWORD ulPolicyVersionMajor;
/*12120*/ DWORD ulPolicyVersionMinor;
/*12121*/ DWORD ulAssemblyDirectoryNameLength;
/*12123*/ PCWSTR lpAssemblyEncodedAssemblyIdentity;
/*12124*/ PCWSTR lpAssemblyManifestPath;
/*12125*/ PCWSTR lpAssemblyPolicyPath;
/*12126*/ PCWSTR lpAssemblyDirectoryName;
/*12128*/ DWORD ulFileCount;
/*12129*/ }ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
/*12131*/ typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION*PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
/*12133*/ typedef enum
/*12134*/ {
/*12135*/ ACTCTX_RUN_LEVEL_UNSPECIFIED=0,
/*12136*/ ACTCTX_RUN_LEVEL_AS_INVOKER,
/*12137*/ ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
/*12138*/ ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
/*12139*/ ACTCTX_RUN_LEVEL_NUMBERS
/*12140*/ }ACTCTX_REQUESTED_RUN_LEVEL;
/*12142*/ typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION{
/*12143*/ DWORD ulFlags;
/*12144*/ ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
/*12145*/ DWORD UiAccess;
/*12146*/ }ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION,*PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
/*12148*/ typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION*PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
/*12150*/ typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION{
/*12151*/ DWORD dwFlags;
/*12152*/ DWORD ulFormatVersion;
/*12153*/ DWORD ulAssemblyCount;
/*12154*/ DWORD ulRootManifestPathType;
/*12155*/ DWORD ulRootManifestPathChars;
/*12156*/ DWORD ulRootConfigurationPathType;
/*12157*/ DWORD ulRootConfigurationPathChars;
/*12158*/ DWORD ulAppDirPathType;
/*12159*/ DWORD ulAppDirPathChars;
/*12160*/ PCWSTR lpRootManifestPath;
/*12161*/ PCWSTR lpRootConfigurationPath;
/*12162*/ PCWSTR lpAppDirPath;
/*12163*/ }ACTIVATION_CONTEXT_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_DETAILED_INFORMATION;
/*12165*/ typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION*PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
/*12210*/ typedef struct _EVENTLOGRECORD{
/*12211*/ DWORD Length;
/*12212*/ DWORD Reserved;
/*12213*/ DWORD RecordNumber;
/*12214*/ DWORD TimeGenerated;
/*12215*/ DWORD TimeWritten;
/*12216*/ DWORD EventID;
/*12217*/ WORD EventType;
/*12218*/ WORD NumStrings;
/*12219*/ WORD EventCategory;
/*12220*/ WORD ReservedFlags;
/*12221*/ DWORD ClosingRecordNumber;
/*12222*/ DWORD StringOffset;
/*12223*/ DWORD UserSidLength;
/*12224*/ DWORD UserSidOffset;
/*12225*/ DWORD DataLength;
/*12226*/ DWORD DataOffset;
/*12238*/ }EVENTLOGRECORD,*PEVENTLOGRECORD;
/*12249*/ struct _EVENTSFORLOGFILE;
/*12250*/ typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE,*PEVENTSFORLOGFILE;
/*12252*/ struct _PACKEDEVENTINFO;
/*12253*/ typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO,*PPACKEDEVENTINFO;
/*12476*/ typedef enum _CM_SERVICE_NODE_TYPE{
/*12477*/ DriverType=0x00000001,
/*12478*/ FileSystemType=0x00000002,
/*12479*/ Win32ServiceOwnProcess=0x00000010,
/*12480*/ Win32ServiceShareProcess=0x00000020,
/*12481*/ AdapterType=0x00000004,
/*12482*/ RecognizerType=0x00000008
/*12483*/ }SERVICE_NODE_TYPE;
/*12485*/ typedef enum _CM_SERVICE_LOAD_TYPE{
/*12486*/ BootLoad=0x00000000,
/*12487*/ SystemLoad=0x00000001,
/*12488*/ AutoLoad=0x00000002,
/*12489*/ DemandLoad=0x00000003,
/*12490*/ DisableLoad=0x00000004
/*12491*/ }SERVICE_LOAD_TYPE;
/*12493*/ typedef enum _CM_ERROR_CONTROL_TYPE{
/*12494*/ IgnoreError=0x00000000,
/*12495*/ NormalError=0x00000001,
/*12496*/ SevereError=0x00000002,
/*12497*/ CriticalError=0x00000003
/*12498*/ }SERVICE_ERROR_TYPE;
/*12520*/ typedef struct _TAPE_ERASE{
/*12521*/ DWORD Type;
/*12522*/ BOOLEAN Immediate;
/*12523*/ }TAPE_ERASE,*PTAPE_ERASE;
/*12536*/ typedef struct _TAPE_PREPARE{
/*12537*/ DWORD Operation;
/*12538*/ BOOLEAN Immediate;
/*12539*/ }TAPE_PREPARE,*PTAPE_PREPARE;
/*12550*/ typedef struct _TAPE_WRITE_MARKS{
/*12551*/ DWORD Type;
/*12552*/ DWORD Count;
/*12553*/ BOOLEAN Immediate;
/*12554*/ }TAPE_WRITE_MARKS,*PTAPE_WRITE_MARKS;
/*12564*/ typedef struct _TAPE_GET_POSITION{
/*12565*/ DWORD Type;
/*12566*/ DWORD Partition;
/*12567*/ LARGE_INTEGER Offset;
/*12568*/ }TAPE_GET_POSITION,*PTAPE_GET_POSITION;
/*12585*/ typedef struct _TAPE_SET_POSITION{
/*12586*/ DWORD Method;
/*12587*/ DWORD Partition;
/*12588*/ LARGE_INTEGER Offset;
/*12589*/ BOOLEAN Immediate;
/*12590*/ }TAPE_SET_POSITION,*PTAPE_SET_POSITION;
/*12678*/ typedef struct _TAPE_GET_DRIVE_PARAMETERS{
/*12679*/ BOOLEAN ECC;
/*12680*/ BOOLEAN Compression;
/*12681*/ BOOLEAN DataPadding;
/*12682*/ BOOLEAN ReportSetmarks;
/*12683*/ DWORD DefaultBlockSize;
/*12684*/ DWORD MaximumBlockSize;
/*12685*/ DWORD MinimumBlockSize;
/*12686*/ DWORD MaximumPartitionCount;
/*12687*/ DWORD FeaturesLow;
/*12688*/ DWORD FeaturesHigh;
/*12689*/ DWORD EOTWarningZoneSize;
/*12690*/ }TAPE_GET_DRIVE_PARAMETERS,*PTAPE_GET_DRIVE_PARAMETERS;
/*12696*/ typedef struct _TAPE_SET_DRIVE_PARAMETERS{
/*12697*/ BOOLEAN ECC;
/*12698*/ BOOLEAN Compression;
/*12699*/ BOOLEAN DataPadding;
/*12700*/ BOOLEAN ReportSetmarks;
/*12701*/ DWORD EOTWarningZoneSize;
/*12702*/ }TAPE_SET_DRIVE_PARAMETERS,*PTAPE_SET_DRIVE_PARAMETERS;
/*12708*/ typedef struct _TAPE_GET_MEDIA_PARAMETERS{
/*12709*/ LARGE_INTEGER Capacity;
/*12710*/ LARGE_INTEGER Remaining;
/*12711*/ DWORD BlockSize;
/*12712*/ DWORD PartitionCount;
/*12713*/ BOOLEAN WriteProtected;
/*12714*/ }TAPE_GET_MEDIA_PARAMETERS,*PTAPE_GET_MEDIA_PARAMETERS;
/*12720*/ typedef struct _TAPE_SET_MEDIA_PARAMETERS{
/*12721*/ DWORD BlockSize;
/*12722*/ }TAPE_SET_MEDIA_PARAMETERS,*PTAPE_SET_MEDIA_PARAMETERS;
/*12732*/ typedef struct _TAPE_CREATE_PARTITION{
/*12733*/ DWORD Method;
/*12734*/ DWORD Count;
/*12735*/ DWORD Size;
/*12736*/ }TAPE_CREATE_PARTITION,*PTAPE_CREATE_PARTITION;
/*12748*/ typedef struct _TAPE_WMI_OPERATIONS{
/*12749*/ DWORD Method;
/*12750*/ DWORD DataBufferSize;
/*12751*/ PVOID DataBuffer;
/*12752*/ }TAPE_WMI_OPERATIONS,*PTAPE_WMI_OPERATIONS;
/*12757*/ typedef enum _TAPE_DRIVE_PROBLEM_TYPE{
/*12758*/ TapeDriveProblemNone,TapeDriveReadWriteWarning,
/*12759*/ TapeDriveReadWriteError,TapeDriveReadWarning,
/*12760*/ TapeDriveWriteWarning,TapeDriveReadError,
/*12761*/ TapeDriveWriteError,TapeDriveHardwareError,
/*12762*/ TapeDriveUnsupportedMedia,TapeDriveScsiConnectionError,
/*12763*/ TapeDriveTimetoClean,TapeDriveCleanDriveNow,
/*12764*/ TapeDriveMediaLifeExpired,TapeDriveSnappedTape
/*12765*/ }TAPE_DRIVE_PROBLEM_TYPE;
/*"ktmtypes.h"27*/ typedef GUID UOW,*PUOW;
/*28*/ typedef GUID CRM_PROTOCOL_ID,*PCRM_PROTOCOL_ID;
/*78*/ typedef ULONG NOTIFICATION_MASK;
/*133*/ typedef struct _TRANSACTION_NOTIFICATION{
/*134*/ PVOID TransactionKey;
/*135*/ ULONG TransactionNotification;
/*136*/ LARGE_INTEGER TmVirtualClock;
/*137*/ ULONG ArgumentLength;
/*138*/ }TRANSACTION_NOTIFICATION,*PTRANSACTION_NOTIFICATION;
/*140*/ typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT{
/*141*/ GUID EnlistmentId;
/*142*/ UOW UOW;
/*143*/ }TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT,*PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
/*147*/ typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT{
/*148*/ GUID TmIdentity;
/*149*/ ULONG Flags;
/*150*/ }TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT,*PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
/*152*/ typedef ULONG SAVEPOINT_ID,*PSAVEPOINT_ID;
/*154*/ typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT{
/*155*/ SAVEPOINT_ID SavepointId;
/*156*/ }TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT,*PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
/*158*/ typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT{
/*159*/ ULONG PropagationCookie;
/*160*/ GUID UOW;
/*161*/ GUID TmIdentity;
/*162*/ ULONG BufferLength;
/*164*/ }TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
/*166*/ typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT{
/*167*/ ULONG MarshalCookie;
/*168*/ GUID UOW;
/*169*/ }TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT,*PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
/*171*/ typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
/*179*/ typedef struct _KCRM_MARSHAL_HEADER{
/*180*/ ULONG VersionMajor;
/*181*/ ULONG VersionMinor;
/*182*/ ULONG NumProtocols;
/*183*/ ULONG Unused;
/*184*/ }KCRM_MARSHAL_HEADER,*PKCRM_MARSHAL_HEADER,*PRKCRM_MARSHAL_HEADER;
/*186*/ typedef struct _KCRM_TRANSACTION_BLOB{
/*187*/ UOW UOW;
/*188*/ GUID TmIdentity;
/*189*/ ULONG IsolationLevel;
/*190*/ ULONG IsolationFlags;
/*191*/ ULONG Timeout;
/*192*/ WCHAR Description[64];
/*193*/ }KCRM_TRANSACTION_BLOB,*PKCRM_TRANSACTION_BLOB,*PRKCRM_TRANSACTION_BLOB;
/*195*/ typedef struct _KCRM_PROTOCOL_BLOB{
/*196*/ CRM_PROTOCOL_ID ProtocolId;
/*197*/ __in_range(0,ULONG_MAX/2)ULONG StaticInfoLength;
/*198*/ ULONG TransactionIdInfoLength;
/*199*/ ULONG Unused1;
/*200*/ ULONG Unused2;
/*201*/ }KCRM_PROTOCOL_BLOB,*PKCRM_PROTOCOL_BLOB,*PRKCRM_PROTOCOL_BLOB;
/*"winnt.h"12945*/ typedef enum _TRANSACTION_OUTCOME{
/*12946*/ TransactionOutcomeUndetermined=1,
/*12947*/ TransactionOutcomeCommitted,
/*12948*/ TransactionOutcomeAborted,
/*12949*/ }TRANSACTION_OUTCOME;
/*12952*/ typedef enum _TRANSACTION_STATE{
/*12953*/ TransactionStateNormal=1,
/*12954*/ TransactionStateIndoubt,
/*12955*/ TransactionStateCommittedNotify,
/*12956*/ }TRANSACTION_STATE;
/*12959*/ typedef struct _TRANSACTION_BASIC_INFORMATION{
/*12960*/ GUID TransactionId;
/*12961*/ DWORD State;
/*12962*/ DWORD Outcome;
/*12963*/ }TRANSACTION_BASIC_INFORMATION,*PTRANSACTION_BASIC_INFORMATION;
/*12965*/ typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION{
/*12966*/ GUID TmIdentity;
/*12967*/ LARGE_INTEGER VirtualClock;
/*12968*/ }TRANSACTIONMANAGER_BASIC_INFORMATION,*PTRANSACTIONMANAGER_BASIC_INFORMATION;
/*12970*/ typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION{
/*12971*/ GUID LogIdentity;
/*12972*/ }TRANSACTIONMANAGER_LOG_INFORMATION,*PTRANSACTIONMANAGER_LOG_INFORMATION;
/*12974*/ typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION{
/*12975*/ DWORD LogPathLength;
/*12976*/ typ typ WCHAR LogPath[1];
/*12978*/ }TRANSACTIONMANAGER_LOGPATH_INFORMATION,*PTRANSACTIONMANAGER_LOGPATH_INFORMATION;
/*12980*/ typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION{
/*12981*/ ULONGLONG LastRecoveredLsn;
/*12982*/ }TRANSACTIONMANAGER_RECOVERY_INFORMATION,*PTRANSACTIONMANAGER_RECOVERY_INFORMATION;
/*12986*/ typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION{
/*12987*/ GUID OldestTransactionGuid;
/*12988*/ }TRANSACTIONMANAGER_OLDEST_INFORMATION,*PTRANSACTIONMANAGER_OLDEST_INFORMATION;
/*12992*/ typedef struct _TRANSACTION_PROPERTIES_INFORMATION{
/*12993*/ DWORD IsolationLevel;
/*12994*/ DWORD IsolationFlags;
/*12995*/ LARGE_INTEGER Timeout;
/*12996*/ DWORD Outcome;
/*12997*/ DWORD DescriptionLength;
/*12998*/ WCHAR Description[1];
/*13000*/ }TRANSACTION_PROPERTIES_INFORMATION,*PTRANSACTION_PROPERTIES_INFORMATION;
/*13004*/ typedef struct _TRANSACTION_BIND_INFORMATION{
/*13005*/ HANDLE TmHandle;
/*13006*/ }TRANSACTION_BIND_INFORMATION,*PTRANSACTION_BIND_INFORMATION;
/*13008*/ typedef struct _TRANSACTION_ENLISTMENT_PAIR{
/*13009*/ GUID EnlistmentId;
/*13010*/ GUID ResourceManagerId;
/*13011*/ }TRANSACTION_ENLISTMENT_PAIR,*PTRANSACTION_ENLISTMENT_PAIR;
/*13013*/ typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION{
/*13014*/ DWORD NumberOfEnlistments;
/*13015*/ TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
/*13016*/ }TRANSACTION_ENLISTMENTS_INFORMATION,*PTRANSACTION_ENLISTMENTS_INFORMATION;
/*13018*/ typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION{
/*13019*/ TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
/*13020*/ }TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION,*PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
/*13023*/ typedef struct _RESOURCEMANAGER_BASIC_INFORMATION{
/*13024*/ GUID ResourceManagerId;
/*13025*/ DWORD DescriptionLength;
/*13026*/ WCHAR Description[1];
/*13027*/ }RESOURCEMANAGER_BASIC_INFORMATION,*PRESOURCEMANAGER_BASIC_INFORMATION;
/*13029*/ typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION{
/*13030*/ HANDLE IoCompletionPortHandle;
/*13031*/ ULONG_PTR CompletionKey;
/*13032*/ }RESOURCEMANAGER_COMPLETION_INFORMATION,*PRESOURCEMANAGER_COMPLETION_INFORMATION;
/*13037*/ typedef enum _TRANSACTION_INFORMATION_CLASS{
/*13038*/ TransactionBasicInformation,
/*13039*/ TransactionPropertiesInformation,
/*13040*/ TransactionEnlistmentInformation,
/*13041*/ TransactionSuperiorEnlistmentInformation
/*13043*/ ,
/*13046*/ TransactionBindInformation,
/*13047*/ TransactionDTCPrivateInformation
/*13048*/ ,
/*13050*/ }TRANSACTION_INFORMATION_CLASS;
/*13053*/ typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS{
/*13054*/ TransactionManagerBasicInformation,
/*13055*/ TransactionManagerLogInformation,
/*13056*/ TransactionManagerLogPathInformation,
/*13057*/ TransactionManagerRecoveryInformation=4
/*13059*/ ,
/*13063*/ TransactionManagerOnlineProbeInformation=3,
/*13064*/ TransactionManagerOldestTransactionInformation=5
/*13068*/ }TRANSACTIONMANAGER_INFORMATION_CLASS;
/*13072*/ typedef enum _RESOURCEMANAGER_INFORMATION_CLASS{
/*13073*/ ResourceManagerBasicInformation,
/*13074*/ ResourceManagerCompletionInformation,
/*13075*/ }RESOURCEMANAGER_INFORMATION_CLASS;
/*13078*/ typedef struct _ENLISTMENT_BASIC_INFORMATION{
/*13079*/ GUID EnlistmentId;
/*13080*/ GUID TransactionId;
/*13081*/ GUID ResourceManagerId;
/*13082*/ }ENLISTMENT_BASIC_INFORMATION,*PENLISTMENT_BASIC_INFORMATION;
/*13084*/ typedef struct _ENLISTMENT_CRM_INFORMATION{
/*13085*/ GUID CrmTransactionManagerId;
/*13086*/ GUID CrmResourceManagerId;
/*13087*/ GUID CrmEnlistmentId;
/*13088*/ }ENLISTMENT_CRM_INFORMATION,*PENLISTMENT_CRM_INFORMATION;
/*13092*/ typedef enum _ENLISTMENT_INFORMATION_CLASS{
/*13093*/ EnlistmentBasicInformation,
/*13094*/ EnlistmentRecoveryInformation,
/*13095*/ EnlistmentCrmInformation
/*13096*/ }ENLISTMENT_INFORMATION_CLASS;
/*13098*/ typedef struct _TRANSACTION_LIST_ENTRY{
/*13099*/ UOW UOW;
/*13100*/ }TRANSACTION_LIST_ENTRY,*PTRANSACTION_LIST_ENTRY;
/*13102*/ typedef struct _TRANSACTION_LIST_INFORMATION{
/*13103*/ DWORD NumberOfTransactions;
/*13104*/ TRANSACTION_LIST_ENTRY TransactionInformation[1];
/*13105*/ }TRANSACTION_LIST_INFORMATION,*PTRANSACTION_LIST_INFORMATION;
/*13112*/ typedef enum _KTMOBJECT_TYPE{
/*13114*/ KTMOBJECT_TRANSACTION,
/*13115*/ KTMOBJECT_TRANSACTION_MANAGER,
/*13116*/ KTMOBJECT_RESOURCE_MANAGER,
/*13117*/ KTMOBJECT_ENLISTMENT,
/*13118*/ KTMOBJECT_INVALID
/*13120*/ }KTMOBJECT_TYPE,*PKTMOBJECT_TYPE;
/*13130*/ typedef struct _KTMOBJECT_CURSOR{
/*13136*/ GUID LastQuery;
/*13142*/ DWORD ObjectIdCount;
/*13148*/ GUID ObjectIds[1];
/*13150*/ }KTMOBJECT_CURSOR,*PKTMOBJECT_CURSOR;
/*13159*/ typedef DWORD TP_VERSION,*PTP_VERSION;
/*13161*/ typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE,*PTP_CALLBACK_INSTANCE;
/*13163*/ typedef void(*PTP_SIMPLE_CALLBACK)(
/*13164*/ typ typ typ typ typ PTP_CALLBACK_INSTANCE Instance,
/*13165*/ typ typ typ typ typ typ typ PVOID Context
/*13166*/ );
/*13168*/ typedef struct _TP_POOL TP_POOL,*PTP_POOL;
/*13169*/ typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP,*PTP_CLEANUP_GROUP;
/*13171*/ typedef void(*PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
/*13172*/ typ typ typ typ typ typ typ PVOID ObjectContext,
/*13173*/ typ typ typ typ typ typ typ PVOID CleanupContext
/*13174*/ );
/*13181*/ typedef struct _TP_CALLBACK_ENVIRON{
/*13182*/ TP_VERSION Version;
/*13183*/ PTP_POOL Pool;
/*13184*/ PTP_CLEANUP_GROUP CleanupGroup;
/*13185*/ PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
/*13186*/ PVOID RaceDll;
/*13187*/ struct _ACTIVATION_CONTEXT*ActivationContext;
/*13188*/ PTP_SIMPLE_CALLBACK FinalizationCallback;
/*13189*/ union{
/*13190*/ DWORD Flags;
/*13191*/ struct{
/*13192*/ DWORD LongFunction:1;
/*13193*/ DWORD Private:31;
/*13194*/ }s;
/*13195*/ }u;
/*13196*/ }TP_CALLBACK_ENVIRON,*PTP_CALLBACK_ENVIRON;
/*13200*/ __inline
/*13201*/ void
/*13202*/ TpInitializeCallbackEnviron(
/*13203*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron
/*13204*/ )
/*13205*/ {
/*13206*/ CallbackEnviron->Version=1;
/*13207*/ CallbackEnviron->Pool=((void*)0);
/*13208*/ CallbackEnviron->CleanupGroup=((void*)0);
/*13209*/ CallbackEnviron->CleanupGroupCancelCallback=((void*)0);
/*13210*/ CallbackEnviron->RaceDll=((void*)0);
/*13211*/ CallbackEnviron->ActivationContext=((void*)0);
/*13212*/ CallbackEnviron->FinalizationCallback=((void*)0);
/*13213*/ CallbackEnviron->u.Flags=0;
/*13214*/ }
/*13216*/ __inline
/*13217*/ void
/*13218*/ TpSetCallbackThreadpool(
/*13219*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron,
/*13220*/ typ typ typ typ typ PTP_POOL Pool
/*13221*/ )
/*13222*/ {
/*13223*/ CallbackEnviron->Pool=Pool;
/*13224*/ }
/*13226*/ __inline
/*13227*/ void
/*13228*/ TpSetCallbackCleanupGroup(
/*13229*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron,
/*13230*/ typ typ typ typ typ PTP_CLEANUP_GROUP CleanupGroup,
/*13231*/ typ typ typ typ typ typ typ PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
/*13232*/ )
/*13233*/ {
/*13234*/ CallbackEnviron->CleanupGroup=CleanupGroup;
/*13235*/ CallbackEnviron->CleanupGroupCancelCallback=CleanupGroupCancelCallback;
/*13236*/ }
/*13238*/ __inline
/*13239*/ void
/*13240*/ TpSetCallbackActivationContext(
/*13241*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron,
/*13242*/ typ typ typ typ typ typ typ struct _ACTIVATION_CONTEXT*ActivationContext
/*13243*/ )
/*13244*/ {
/*13245*/ CallbackEnviron->ActivationContext=ActivationContext;
/*13246*/ }
/*13248*/ __inline
/*13249*/ void
/*13250*/ TpSetCallbackNoActivationContext(
/*13251*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron
/*13252*/ )
/*13253*/ {
/*13254*/ CallbackEnviron->ActivationContext=(struct _ACTIVATION_CONTEXT*)(LONG_PTR)-1;
/*13255*/ }
/*13257*/ __inline
/*13258*/ void
/*13259*/ TpSetCallbackLongFunction(
/*13260*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron
/*13261*/ )
/*13262*/ {
/*13263*/ CallbackEnviron->u.s.LongFunction=1;
/*13264*/ }
/*13266*/ __inline
/*13267*/ void
/*13268*/ TpSetCallbackRaceWithDll(
/*13269*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron,
/*13270*/ typ typ typ typ typ PVOID DllHandle
/*13271*/ )
/*13272*/ {
/*13273*/ CallbackEnviron->RaceDll=DllHandle;
/*13274*/ }
/*13276*/ __inline
/*13277*/ void
/*13278*/ TpSetCallbackFinalizationCallback(
/*13279*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron,
/*13280*/ typ typ typ typ typ PTP_SIMPLE_CALLBACK FinalizationCallback
/*13281*/ )
/*13282*/ {
/*13283*/ CallbackEnviron->FinalizationCallback=FinalizationCallback;
/*13284*/ }
/*13286*/ __inline
/*13287*/ void
/*13288*/ TpDestroyCallbackEnviron(
/*13289*/ typ typ typ typ typ PTP_CALLBACK_ENVIRON CallbackEnviron
/*13290*/ )
/*13291*/ {
/*13298*/ (CallbackEnviron);
/*13299*/ }
/*13304*/ typedef struct _TP_WORK TP_WORK,*PTP_WORK;
/*13306*/ typedef void(*PTP_WORK_CALLBACK)(
/*13307*/ typ typ typ typ typ PTP_CALLBACK_INSTANCE Instance,
/*13308*/ typ typ typ typ typ typ typ PVOID Context,
/*13309*/ typ typ typ typ typ PTP_WORK Work
/*13310*/ );
/*13312*/ typedef struct _TP_TIMER TP_TIMER,*PTP_TIMER;
/*13314*/ typedef void(*PTP_TIMER_CALLBACK)(
/*13315*/ typ typ typ typ typ PTP_CALLBACK_INSTANCE Instance,
/*13316*/ typ typ typ typ typ typ typ PVOID Context,
/*13317*/ typ typ typ typ typ PTP_TIMER Timer
/*13318*/ );
/*13320*/ typedef DWORD TP_WAIT_RESULT;
/*13322*/ typedef struct _TP_WAIT TP_WAIT,*PTP_WAIT;
/*13324*/ typedef void(*PTP_WAIT_CALLBACK)(
/*13325*/ typ typ typ typ typ PTP_CALLBACK_INSTANCE Instance,
/*13326*/ typ typ typ typ typ typ typ PVOID Context,
/*13327*/ typ typ typ typ typ PTP_WAIT Wait,
/*13328*/ typ typ typ typ typ TP_WAIT_RESULT WaitResult
/*13329*/ );
/*13331*/ typedef struct _TP_IO TP_IO,*PTP_IO;
/*"windef.h"183*/ typedef UINT_PTR WPARAM;
/*184*/ typedef LONG_PTR LPARAM;
/*185*/ typedef LONG_PTR LRESULT;
/*208*/ DECLARE_HANDLE(HWND);
/*209*/ DECLARE_HANDLE(HHOOK);
/*215*/ typedef WORD ATOM;
/*217*/ typedef HANDLE typ*SPHANDLE;
/*218*/ typedef HANDLE typ*LPHANDLE;
/*219*/ typedef HANDLE HGLOBAL;
/*220*/ typedef HANDLE HLOCAL;
/*221*/ typedef HANDLE GLOBALHANDLE;
/*222*/ typedef HANDLE LOCALHANDLE;
/*230*/ typedef int(typ typ*FARPROC)();
/*231*/ typedef int(typ typ*NEARPROC)();
/*232*/ typedef int(typ*PROC)();
/*247*/ typedef void typ*HGDIOBJ;
/*253*/ struct HKEY__{int unused;};typedef struct HKEY__*HKEY;
/*254*/ typedef HKEY*PHKEY;
/*257*/ struct HACCEL__{int unused;};typedef struct HACCEL__*HACCEL;
/*260*/ struct HBITMAP__{int unused;};typedef struct HBITMAP__*HBITMAP;
/*261*/ struct HBRUSH__{int unused;};typedef struct HBRUSH__*HBRUSH;
/*264*/ struct HCOLORSPACE__{int unused;};typedef struct HCOLORSPACE__*HCOLORSPACE;
/*267*/ struct HDC__{int unused;};typedef struct HDC__*HDC;
/*269*/ struct HGLRC__{int unused;};typedef struct HGLRC__*HGLRC;
/*270*/ struct HDESK__{int unused;};typedef struct HDESK__*HDESK;
/*271*/ struct HENHMETAFILE__{int unused;};typedef struct HENHMETAFILE__*HENHMETAFILE;
/*273*/ struct HFONT__{int unused;};typedef struct HFONT__*HFONT;
/*275*/ struct HICON__{int unused;};typedef struct HICON__*HICON;
/*277*/ struct HMENU__{int unused;};typedef struct HMENU__*HMENU;
/*279*/ struct HMETAFILE__{int unused;};typedef struct HMETAFILE__*HMETAFILE;
/*280*/ struct HINSTANCE__{int unused;};typedef struct HINSTANCE__*HINSTANCE;
/*281*/ typedef HINSTANCE HMODULE;
/*283*/ struct HPALETTE__{int unused;};typedef struct HPALETTE__*HPALETTE;
/*284*/ struct HPEN__{int unused;};typedef struct HPEN__*HPEN;
/*286*/ struct HRGN__{int unused;};typedef struct HRGN__*HRGN;
/*287*/ struct HRSRC__{int unused;};typedef struct HRSRC__*HRSRC;
/*288*/ struct HSPRITE__{int unused;};typedef struct HSPRITE__*HSPRITE;
/*289*/ struct HSTR__{int unused;};typedef struct HSTR__*HSTR;
/*290*/ struct HTASK__{int unused;};typedef struct HTASK__*HTASK;
/*291*/ struct HWINSTA__{int unused;};typedef struct HWINSTA__*HWINSTA;
/*292*/ struct HKL__{int unused;};typedef struct HKL__*HKL;
/*295*/ struct HWINEVENTHOOK__{int unused;};typedef struct HWINEVENTHOOK__*HWINEVENTHOOK;
/*300*/ struct HMONITOR__{int unused;};typedef struct HMONITOR__*HMONITOR;
/*302*/ struct HUMPD__{int unused;};typedef struct HUMPD__*HUMPD;
/*306*/ typedef int HFILE;
/*307*/ typedef HICON HCURSOR;
/*313*/ typedef DWORD COLORREF;
/*314*/ typedef DWORD*LPCOLORREF;
/*318*/ typedef struct tagRECT
/*319*/ {
/*320*/ LONG left;
/*321*/ LONG top;
/*322*/ LONG right;
/*323*/ LONG bottom;
/*324*/ }RECT,*PRECT,typ*NPRECT,typ*LPRECT;
/*326*/ typedef const RECT typ*LPCRECT;
/*328*/ typedef struct _RECTL
/*329*/ {
/*330*/ LONG left;
/*331*/ LONG top;
/*332*/ LONG right;
/*333*/ LONG bottom;
/*334*/ }RECTL,*PRECTL,*LPRECTL;
/*336*/ typedef const RECTL typ*LPCRECTL;
/*338*/ typedef struct tagPOINT
/*339*/ {
/*340*/ LONG x;
/*341*/ LONG y;
/*342*/ }POINT,*PPOINT,typ*NPPOINT,typ*LPPOINT;
/*344*/ typedef struct _POINTL
/*345*/ {
/*346*/ LONG x;
/*347*/ LONG y;
/*348*/ }POINTL,*PPOINTL;
/*350*/ typedef struct tagSIZE
/*351*/ {
/*352*/ LONG cx;
/*353*/ LONG cy;
/*354*/ }SIZE,*PSIZE,*LPSIZE;
/*356*/ typedef SIZE SIZEL;
/*357*/ typedef SIZE*PSIZEL,*LPSIZEL;
/*359*/ typedef struct tagPOINTS
/*360*/ {
/*362*/ SHORT x;
/*363*/ SHORT y;
/*368*/ }POINTS,*PPOINTS,*LPPOINTS;
/*374*/ typedef struct _FILETIME{
/*375*/ DWORD dwLowDateTime;
/*376*/ DWORD dwHighDateTime;
/*377*/ }FILETIME,*PFILETIME,*LPFILETIME;
/*240*/ typedef struct _OVERLAPPED{
/*241*/ ULONG_PTR Internal;
/*242*/ ULONG_PTR InternalHigh;
/*243*/ union{
/*244*/ struct{
/*245*/ DWORD Offset;
/*246*/ DWORD OffsetHigh;
/*247*/ }s;
/*248*/ PVOID Pointer;
/*249*/ }u;
/*251*/ HANDLE hEvent;
/*252*/ }OVERLAPPED,*LPOVERLAPPED;
/*254*/ typedef struct _OVERLAPPED_ENTRY{
/*255*/ ULONG_PTR lpCompletionKey;
/*256*/ LPOVERLAPPED lpOverlapped;
/*257*/ ULONG_PTR Internal;
/*258*/ DWORD dwNumberOfBytesTransferred;
/*259*/ }OVERLAPPED_ENTRY,*LPOVERLAPPED_ENTRY;
/*261*/ typedef struct _SECURITY_ATTRIBUTES{
/*262*/ DWORD nLength;
/*263*/ LPVOID lpSecurityDescriptor;
/*264*/ BOOL bInheritHandle;
/*265*/ }SECURITY_ATTRIBUTES,*PSECURITY_ATTRIBUTES,*LPSECURITY_ATTRIBUTES;
/*267*/ typedef struct _PROCESS_INFORMATION{
/*268*/ HANDLE hProcess;
/*269*/ HANDLE hThread;
/*270*/ DWORD dwProcessId;
/*271*/ DWORD dwThreadId;
/*272*/ }PROCESS_INFORMATION,*PPROCESS_INFORMATION,*LPPROCESS_INFORMATION;
/*292*/ typedef struct _SYSTEMTIME{
/*293*/ WORD wYear;
/*294*/ WORD wMonth;
/*295*/ WORD wDayOfWeek;
/*296*/ WORD wDay;
/*297*/ WORD wHour;
/*298*/ WORD wMinute;
/*299*/ WORD wSecond;
/*300*/ WORD wMilliseconds;
/*301*/ }SYSTEMTIME,*PSYSTEMTIME,*LPSYSTEMTIME;
/*304*/ typedef DWORD(typ*PTHREAD_START_ROUTINE)(
/*305*/ LPVOID lpThreadParameter
/*306*/ );
/*307*/ typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
/*316*/ typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
/*317*/ typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
/*318*/ typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
/*320*/ typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
/*321*/ typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
/*322*/ typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
/*401*/ typedef RTL_SRWLOCK SRWLOCK,*PSRWLOCK;
/*405*/ 
/*406*/ void
/*407*/ typ
/*408*/ InitializeSRWLock(
/*409*/ typ typ typ typ typ PSRWLOCK SRWLock
/*410*/ );
/*412*/ 
/*413*/ void
/*414*/ typ
/*415*/ ReleaseSRWLockExclusive(
/*416*/ typ typ typ typ typ PSRWLOCK SRWLock
/*417*/ );
/*419*/ 
/*420*/ void
/*421*/ typ
/*422*/ ReleaseSRWLockShared(
/*423*/ typ typ typ typ typ PSRWLOCK SRWLock
/*424*/ );
/*426*/ 
/*427*/ void
/*428*/ typ
/*429*/ AcquireSRWLockExclusive(
/*430*/ typ typ typ typ typ PSRWLOCK SRWLock
/*431*/ );
/*433*/ 
/*434*/ void
/*435*/ typ
/*436*/ AcquireSRWLockShared(
/*437*/ typ typ typ typ typ PSRWLOCK SRWLock
/*438*/ );
/*444*/ typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE,*PCONDITION_VARIABLE;
/*446*/ 
/*447*/ void
/*448*/ typ
/*449*/ InitializeConditionVariable(
/*450*/ typ typ typ typ typ PCONDITION_VARIABLE ConditionVariable
/*451*/ );
/*453*/ 
/*454*/ void
/*455*/ typ
/*456*/ WakeConditionVariable(
/*457*/ typ typ typ typ typ PCONDITION_VARIABLE ConditionVariable
/*458*/ );
/*460*/ 
/*461*/ void
/*462*/ typ
/*463*/ WakeAllConditionVariable(
/*464*/ typ typ typ typ typ PCONDITION_VARIABLE ConditionVariable
/*465*/ );
/*467*/ 
/*468*/ BOOL
/*469*/ typ
/*470*/ SleepConditionVariableCS(
/*471*/ typ typ typ typ typ PCONDITION_VARIABLE ConditionVariable,
/*472*/ typ typ typ typ typ PCRITICAL_SECTION CriticalSection,
/*473*/ typ typ typ typ typ DWORD dwMilliseconds
/*474*/ );
/*476*/ 
/*477*/ BOOL
/*478*/ typ
/*479*/ SleepConditionVariableSRW(
/*480*/ typ typ typ typ typ PCONDITION_VARIABLE ConditionVariable,
/*481*/ typ typ typ typ typ PSRWLOCK SRWLock,
/*482*/ typ typ typ typ typ DWORD dwMilliseconds,
/*483*/ typ typ typ typ typ ULONG Flags
/*484*/ );
/*498*/ 
/*499*/ typ typ typ typ typ typ typ
/*500*/ PVOID
/*501*/ typ
/*502*/ EncodePointer(
/*503*/ typ typ typ typ typ typ typ PVOID Ptr
/*504*/ );
/*506*/ 
/*507*/ typ typ typ typ typ typ typ
/*508*/ PVOID
/*509*/ typ
/*510*/ DecodePointer(
/*511*/ typ typ typ typ typ typ typ PVOID Ptr
/*512*/ );
/*514*/ 
/*515*/ typ typ typ typ typ typ typ
/*516*/ PVOID
/*517*/ typ
/*518*/ EncodeSystemPointer(
/*519*/ typ typ typ typ typ typ typ PVOID Ptr
/*520*/ );
/*522*/ 
/*523*/ typ typ typ typ typ typ typ
/*524*/ PVOID
/*525*/ typ
/*526*/ DecodeSystemPointer(
/*527*/ typ typ typ typ typ typ typ PVOID Ptr
/*528*/ );
/*533*/ typedef LPVOID LPLDT_ENTRY;
/*640*/ typedef struct _COMMPROP{
/*641*/ WORD wPacketLength;
/*642*/ WORD wPacketVersion;
/*643*/ DWORD dwServiceMask;
/*644*/ DWORD dwReserved1;
/*645*/ DWORD dwMaxTxQueue;
/*646*/ DWORD dwMaxRxQueue;
/*647*/ DWORD dwMaxBaud;
/*648*/ DWORD dwProvSubType;
/*649*/ DWORD dwProvCapabilities;
/*650*/ DWORD dwSettableParams;
/*651*/ DWORD dwSettableBaud;
/*652*/ WORD wSettableData;
/*653*/ WORD wSettableStopParity;
/*654*/ DWORD dwCurrentTxQueue;
/*655*/ DWORD dwCurrentRxQueue;
/*656*/ DWORD dwProvSpec1;
/*657*/ DWORD dwProvSpec2;
/*658*/ WCHAR wcProvChar[1];
/*659*/ }COMMPROP,*LPCOMMPROP;
/*667*/ typedef struct _COMSTAT{
/*668*/ DWORD fCtsHold:1;
/*669*/ DWORD fDsrHold:1;
/*670*/ DWORD fRlsdHold:1;
/*671*/ DWORD fXoffHold:1;
/*672*/ DWORD fXoffSent:1;
/*673*/ DWORD fEof:1;
/*674*/ DWORD fTxim:1;
/*675*/ DWORD fReserved:25;
/*676*/ DWORD cbInQue;
/*677*/ DWORD cbOutQue;
/*678*/ }COMSTAT,*LPCOMSTAT;
/*695*/ typedef struct _DCB{
/*696*/ DWORD DCBlength;
/*697*/ DWORD BaudRate;
/*698*/ DWORD fBinary:1;
/*699*/ DWORD fParity:1;
/*700*/ DWORD fOutxCtsFlow:1;
/*701*/ DWORD fOutxDsrFlow:1;
/*702*/ DWORD fDtrControl:2;
/*703*/ DWORD fDsrSensitivity:1;
/*704*/ DWORD fTXContinueOnXoff:1;
/*705*/ DWORD fOutX:1;
/*706*/ DWORD fInX:1;
/*707*/ DWORD fErrorChar:1;
/*708*/ DWORD fNull:1;
/*709*/ DWORD fRtsControl:2;
/*710*/ DWORD fAbortOnError:1;
/*711*/ DWORD fDummy2:17;
/*712*/ WORD wReserved;
/*713*/ WORD XonLim;
/*714*/ WORD XoffLim;
/*715*/ BYTE ByteSize;
/*716*/ BYTE Parity;
/*717*/ BYTE StopBits;
/*718*/ char XonChar;
/*719*/ char XoffChar;
/*720*/ char ErrorChar;
/*721*/ char EofChar;
/*722*/ char EvtChar;
/*723*/ WORD wReserved1;
/*724*/ }DCB,*LPDCB;
/*726*/ typedef struct _COMMTIMEOUTS{
/*727*/ DWORD ReadIntervalTimeout;
/*728*/ DWORD ReadTotalTimeoutMultiplier;
/*729*/ DWORD ReadTotalTimeoutConstant;
/*730*/ DWORD WriteTotalTimeoutMultiplier;
/*731*/ DWORD WriteTotalTimeoutConstant;
/*732*/ }COMMTIMEOUTS,*LPCOMMTIMEOUTS;
/*734*/ typedef struct _COMMCONFIG{
/*735*/ DWORD dwSize;
/*736*/ WORD wVersion;
/*737*/ WORD wReserved;
/*738*/ DCB dcb;
/*739*/ DWORD dwProviderSubType;
/*741*/ DWORD dwProviderOffset;
/*743*/ DWORD dwProviderSize;
/*744*/ WCHAR wcProviderData[1];
/*745*/ }COMMCONFIG,*LPCOMMCONFIG;
/*747*/ typedef struct _SYSTEM_INFO{
/*748*/ union{
/*749*/ DWORD dwOemId;
/*750*/ struct{
/*751*/ WORD wProcessorArchitecture;
/*752*/ WORD wReserved;
/*753*/ }s;
/*754*/ }u;
/*755*/ DWORD dwPageSize;
/*756*/ LPVOID lpMinimumApplicationAddress;
/*757*/ LPVOID lpMaximumApplicationAddress;
/*758*/ DWORD_PTR dwActiveProcessorMask;
/*759*/ DWORD dwNumberOfProcessors;
/*760*/ DWORD dwProcessorType;
/*761*/ DWORD dwAllocationGranularity;
/*762*/ WORD wProcessorLevel;
/*763*/ WORD wProcessorRevision;
/*764*/ }SYSTEM_INFO,*LPSYSTEM_INFO;
/*801*/ typedef struct _MEMORYSTATUS{
/*802*/ DWORD dwLength;
/*803*/ DWORD dwMemoryLoad;
/*804*/ SIZE_T dwTotalPhys;
/*805*/ SIZE_T dwAvailPhys;
/*806*/ SIZE_T dwTotalPageFile;
/*807*/ SIZE_T dwAvailPageFile;
/*808*/ SIZE_T dwTotalVirtual;
/*809*/ SIZE_T dwAvailVirtual;
/*810*/ }MEMORYSTATUS,*LPMEMORYSTATUS;
/*928*/ typedef struct _EXCEPTION_DEBUG_INFO{
/*929*/ EXCEPTION_RECORD ExceptionRecord;
/*930*/ DWORD dwFirstChance;
/*931*/ }EXCEPTION_DEBUG_INFO,*LPEXCEPTION_DEBUG_INFO;
/*933*/ typedef struct _CREATE_THREAD_DEBUG_INFO{
/*934*/ HANDLE hThread;
/*935*/ LPVOID lpThreadLocalBase;
/*936*/ LPTHREAD_START_ROUTINE lpStartAddress;
/*937*/ }CREATE_THREAD_DEBUG_INFO,*LPCREATE_THREAD_DEBUG_INFO;
/*939*/ typedef struct _CREATE_PROCESS_DEBUG_INFO{
/*940*/ HANDLE hFile;
/*941*/ HANDLE hProcess;
/*942*/ HANDLE hThread;
/*943*/ LPVOID lpBaseOfImage;
/*944*/ DWORD dwDebugInfoFileOffset;
/*945*/ DWORD nDebugInfoSize;
/*946*/ LPVOID lpThreadLocalBase;
/*947*/ LPTHREAD_START_ROUTINE lpStartAddress;
/*948*/ LPVOID lpImageName;
/*949*/ WORD fUnicode;
/*950*/ }CREATE_PROCESS_DEBUG_INFO,*LPCREATE_PROCESS_DEBUG_INFO;
/*952*/ typedef struct _EXIT_THREAD_DEBUG_INFO{
/*953*/ DWORD dwExitCode;
/*954*/ }EXIT_THREAD_DEBUG_INFO,*LPEXIT_THREAD_DEBUG_INFO;
/*956*/ typedef struct _EXIT_PROCESS_DEBUG_INFO{
/*957*/ DWORD dwExitCode;
/*958*/ }EXIT_PROCESS_DEBUG_INFO,*LPEXIT_PROCESS_DEBUG_INFO;
/*960*/ typedef struct _LOAD_DLL_DEBUG_INFO{
/*961*/ HANDLE hFile;
/*962*/ LPVOID lpBaseOfDll;
/*963*/ DWORD dwDebugInfoFileOffset;
/*964*/ DWORD nDebugInfoSize;
/*965*/ LPVOID lpImageName;
/*966*/ WORD fUnicode;
/*967*/ }LOAD_DLL_DEBUG_INFO,*LPLOAD_DLL_DEBUG_INFO;
/*969*/ typedef struct _UNLOAD_DLL_DEBUG_INFO{
/*970*/ LPVOID lpBaseOfDll;
/*971*/ }UNLOAD_DLL_DEBUG_INFO,*LPUNLOAD_DLL_DEBUG_INFO;
/*973*/ typedef struct _OUTPUT_DEBUG_STRING_INFO{
/*974*/ LPSTR lpDebugStringData;
/*975*/ WORD fUnicode;
/*976*/ WORD nDebugStringLength;
/*977*/ }OUTPUT_DEBUG_STRING_INFO,*LPOUTPUT_DEBUG_STRING_INFO;
/*979*/ typedef struct _RIP_INFO{
/*980*/ DWORD dwError;
/*981*/ DWORD dwType;
/*982*/ }RIP_INFO,*LPRIP_INFO;
/*985*/ typedef struct _DEBUG_EVENT{
/*986*/ DWORD dwDebugEventCode;
/*987*/ DWORD dwProcessId;
/*988*/ DWORD dwThreadId;
/*989*/ union{
/*990*/ EXCEPTION_DEBUG_INFO Exception;
/*991*/ CREATE_THREAD_DEBUG_INFO CreateThread;
/*992*/ CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
/*993*/ EXIT_THREAD_DEBUG_INFO ExitThread;
/*994*/ EXIT_PROCESS_DEBUG_INFO ExitProcess;
/*995*/ LOAD_DLL_DEBUG_INFO LoadDll;
/*996*/ UNLOAD_DLL_DEBUG_INFO UnloadDll;
/*997*/ OUTPUT_DEBUG_STRING_INFO DebugString;
/*998*/ RIP_INFO RipInfo;
/*999*/ }u;
/*1000*/ }DEBUG_EVENT,*LPDEBUG_EVENT;
/*1007*/ typedef struct _JIT_DEBUG_INFO{
/*1008*/ DWORD dwSize;
/*1009*/ DWORD dwProcessorArchitecture;
/*1010*/ DWORD dwThreadID;
/*1011*/ DWORD dwReserved0;
/*1012*/ ULONG64 lpExceptionAddress;
/*1013*/ ULONG64 lpExceptionRecord;
/*1014*/ ULONG64 lpContextRecord;
/*1015*/ }JIT_DEBUG_INFO,*LPJIT_DEBUG_INFO;
/*1017*/ typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32,*LPJIT_DEBUG_INFO32;
/*1018*/ typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64,*LPJIT_DEBUG_INFO64;
/*1021*/ typedef PCONTEXT LPCONTEXT;
/*1022*/ typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
/*1023*/ typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
/*1243*/ typedef struct _OFSTRUCT{
/*1244*/ BYTE cBytes;
/*1245*/ BYTE fFixedDisk;
/*1246*/ WORD nErrCode;
/*1247*/ WORD Reserved1;
/*1248*/ WORD Reserved2;
/*1249*/ CHAR szPathName[128];
/*1250*/ }OFSTRUCT,*LPOFSTRUCT,*POFSTRUCT;
/*2256*/ 
/*2257*/ LONG
/*2258*/ typ
/*2259*/ InterlockedIncrement(
/*2260*/ typ typ typ typ typ LONG volatile*lpAddend
/*2261*/ );
/*2263*/ 
/*2264*/ LONG
/*2265*/ typ
/*2266*/ InterlockedDecrement(
/*2267*/ typ typ typ typ typ LONG volatile*lpAddend
/*2268*/ );
/*2270*/ 
/*2271*/ LONG
/*2272*/ typ
/*2273*/ InterlockedExchange(
/*2274*/ typ typ typ typ typ LONG volatile*Target,
/*2275*/ typ typ typ typ typ LONG Value
/*2276*/ );
/*2281*/ 
/*2282*/ LONG
/*2283*/ typ
/*2284*/ InterlockedExchangeAdd(
/*2285*/ typ typ typ typ typ LONG volatile*Addend,
/*2286*/ typ typ typ typ typ LONG Value
/*2287*/ );
/*2289*/ 
/*2290*/ LONG
/*2291*/ typ
/*2292*/ InterlockedCompareExchange(
/*2293*/ typ typ typ typ typ LONG volatile*Destination,
/*2294*/ typ typ typ typ typ LONG Exchange,
/*2295*/ typ typ typ typ typ LONG Comperand
/*2296*/ );
/*2532*/ 
/*2533*/ BOOL
/*2534*/ typ
/*2535*/ FreeResource(
/*2536*/ typ typ typ typ typ HGLOBAL hResData
/*2537*/ );
/*2539*/ 
/*2540*/ LPVOID
/*2541*/ typ
/*2542*/ LockResource(
/*2543*/ typ typ typ typ typ HGLOBAL hResData
/*2544*/ );
/*2551*/ int
/*2556*/ typ
/*2561*/ WinMain(
/*2562*/ typ typ typ typ typ HINSTANCE hInstance,
/*2563*/ typ typ typ typ typ typ typ HINSTANCE hPrevInstance,
/*2564*/ typ typ typ typ typ LPSTR lpCmdLine,
/*2565*/ typ typ typ typ typ int nShowCmd
/*2566*/ );
/*2568*/ int
/*2572*/ typ
/*2574*/ wWinMain(
/*2575*/ typ typ typ typ typ HINSTANCE hInstance,
/*2576*/ typ typ typ typ typ typ typ HINSTANCE hPrevInstance,
/*2577*/ typ typ typ typ typ LPWSTR lpCmdLine,
/*2578*/ typ typ typ typ typ int nShowCmd
/*2579*/ );
/*2581*/ 
/*2582*/ BOOL
/*2583*/ typ
/*2584*/ FreeLibrary(
/*2585*/ typ typ typ typ typ HMODULE hLibModule
/*2586*/ );
/*2589*/ 
/*2590*/ 
/*2591*/ void
/*2592*/ typ
/*2593*/ FreeLibraryAndExitThread(
/*2594*/ typ typ typ typ typ HMODULE hLibModule,
/*2595*/ typ typ typ typ typ DWORD dwExitCode
/*2596*/ );
/*2598*/ 
/*2599*/ BOOL
/*2600*/ typ
/*2601*/ DisableThreadLibraryCalls(
/*2602*/ typ typ typ typ typ HMODULE hLibModule
/*2603*/ );
/*2605*/ 
/*2606*/ FARPROC
/*2607*/ typ
/*2608*/ GetProcAddress(
/*2609*/ typ typ typ typ typ HMODULE hModule,
/*2610*/ typ typ typ typ typ LPCSTR lpProcName
/*2611*/ );
/*2613*/ 
/*2614*/ DWORD
/*2615*/ typ
/*2616*/ GetVersion(
/*2617*/ void
/*2618*/ );
/*2620*/ 
/*2621*/ typ typ typ typ typ typ typ
/*2622*/ HGLOBAL
/*2623*/ typ
/*2624*/ GlobalAlloc(
/*2625*/ typ typ typ typ typ UINT uFlags,
/*2626*/ typ typ typ typ typ SIZE_T dwBytes
/*2627*/ );
/*2629*/ 
/*2630*/ typ typ typ typ typ typ typ
/*2631*/ HGLOBAL
/*2632*/ typ
/*2633*/ GlobalReAlloc(
/*2634*/ typ typ typ typ typ HGLOBAL hMem,
/*2635*/ typ typ typ typ typ SIZE_T dwBytes,
/*2636*/ typ typ typ typ typ UINT uFlags
/*2637*/ );
/*2639*/ 
/*2640*/ SIZE_T
/*2641*/ typ
/*2642*/ GlobalSize(
/*2643*/ typ typ typ typ typ HGLOBAL hMem
/*2644*/ );
/*2646*/ 
/*2647*/ UINT
/*2648*/ typ
/*2649*/ GlobalFlags(
/*2650*/ typ typ typ typ typ HGLOBAL hMem
/*2651*/ );
/*2653*/ 
/*2654*/ typ typ typ typ typ typ typ
/*2655*/ LPVOID
/*2656*/ typ
/*2657*/ GlobalLock(
/*2658*/ typ typ typ typ typ HGLOBAL hMem
/*2659*/ );
/*2661*/ 
/*2662*/ typ typ typ typ typ typ typ
/*2663*/ HGLOBAL
/*2664*/ typ
/*2665*/ GlobalHandle(
/*2666*/ typ typ typ typ typ LPCVOID pMem
/*2667*/ );
/*2669*/ 
/*2670*/ BOOL
/*2671*/ typ
/*2672*/ GlobalUnlock(
/*2673*/ typ typ typ typ typ HGLOBAL hMem
/*2674*/ );
/*2676*/ 
/*2677*/ typ typ typ typ typ typ typ
/*2678*/ HGLOBAL
/*2679*/ typ
/*2680*/ GlobalFree(
/*2681*/ typ HGLOBAL hMem
/*2682*/ );
/*2684*/ 
/*2685*/ SIZE_T
/*2686*/ typ
/*2687*/ GlobalCompact(
/*2688*/ typ typ typ typ typ DWORD dwMinFree
/*2689*/ );
/*2691*/ 
/*2692*/ void
/*2693*/ typ
/*2694*/ GlobalFix(
/*2695*/ typ typ typ typ typ HGLOBAL hMem
/*2696*/ );
/*2698*/ 
/*2699*/ void
/*2700*/ typ
/*2701*/ GlobalUnfix(
/*2702*/ typ typ typ typ typ HGLOBAL hMem
/*2703*/ );
/*2705*/ 
/*2706*/ typ typ typ typ typ
/*2707*/ LPVOID
/*2708*/ typ
/*2709*/ GlobalWire(
/*2710*/ typ typ typ typ typ HGLOBAL hMem
/*2711*/ );
/*2713*/ 
/*2714*/ BOOL
/*2715*/ typ
/*2716*/ GlobalUnWire(
/*2717*/ typ typ typ typ typ HGLOBAL hMem
/*2718*/ );
/*2720*/ 
/*2721*/ void
/*2722*/ typ
/*2723*/ GlobalMemoryStatus(
/*2724*/ typ typ typ typ typ LPMEMORYSTATUS lpBuffer
/*2725*/ );
/*2727*/ typedef struct _MEMORYSTATUSEX{
/*2728*/ DWORD dwLength;
/*2729*/ DWORD dwMemoryLoad;
/*2730*/ DWORDLONG ullTotalPhys;
/*2731*/ DWORDLONG ullAvailPhys;
/*2732*/ DWORDLONG ullTotalPageFile;
/*2733*/ DWORDLONG ullAvailPageFile;
/*2734*/ DWORDLONG ullTotalVirtual;
/*2735*/ DWORDLONG ullAvailVirtual;
/*2736*/ DWORDLONG ullAvailExtendedVirtual;
/*2737*/ }MEMORYSTATUSEX,*LPMEMORYSTATUSEX;
/*2739*/ 
/*2740*/ BOOL
/*2741*/ typ
/*2742*/ GlobalMemoryStatusEx(
/*2743*/ typ typ typ typ typ LPMEMORYSTATUSEX lpBuffer
/*2744*/ );
/*2746*/ 
/*2747*/ typ typ typ typ typ typ typ
/*2748*/ HLOCAL
/*2749*/ typ
/*2750*/ LocalAlloc(
/*2751*/ typ typ typ typ typ UINT uFlags,
/*2752*/ typ typ typ typ typ SIZE_T uBytes
/*2753*/ );
/*2755*/ 
/*2756*/ typ typ typ typ typ typ typ
/*2757*/ HLOCAL
/*2758*/ typ
/*2759*/ LocalReAlloc(
/*2760*/ typ typ typ typ typ HLOCAL hMem,
/*2761*/ typ typ typ typ typ SIZE_T uBytes,
/*2762*/ typ typ typ typ typ UINT uFlags
/*2763*/ );
/*2765*/ 
/*2766*/ typ typ typ typ typ typ typ
/*2767*/ LPVOID
/*2768*/ typ
/*2769*/ LocalLock(
/*2770*/ typ typ typ typ typ HLOCAL hMem
/*2771*/ );
/*2773*/ 
/*2774*/ typ typ typ typ typ typ typ
/*2775*/ HLOCAL
/*2776*/ typ
/*2777*/ LocalHandle(
/*2778*/ typ typ typ typ typ LPCVOID pMem
/*2779*/ );
/*2781*/ 
/*2782*/ BOOL
/*2783*/ typ
/*2784*/ LocalUnlock(
/*2785*/ typ typ typ typ typ HLOCAL hMem
/*2786*/ );
/*2788*/ 
/*2789*/ SIZE_T
/*2790*/ typ
/*2791*/ LocalSize(
/*2792*/ typ typ typ typ typ HLOCAL hMem
/*2793*/ );
/*2795*/ 
/*2796*/ UINT
/*2797*/ typ
/*2798*/ LocalFlags(
/*2799*/ typ typ typ typ typ HLOCAL hMem
/*2800*/ );
/*2802*/ 
/*2803*/ HLOCAL
/*2804*/ typ
/*2805*/ LocalFree(
/*2806*/ typ HLOCAL hMem
/*2807*/ );
/*2809*/ 
/*2810*/ SIZE_T
/*2811*/ typ
/*2812*/ LocalShrink(
/*2813*/ typ typ typ typ typ HLOCAL hMem,
/*2814*/ typ typ typ typ typ UINT cbNewSize
/*2815*/ );
/*2817*/ 
/*2818*/ SIZE_T
/*2819*/ typ
/*2820*/ LocalCompact(
/*2821*/ typ typ typ typ typ UINT uMinFree
/*2822*/ );
/*2824*/ 
/*2825*/ BOOL
/*2826*/ typ
/*2827*/ FlushInstructionCache(
/*2828*/ typ typ typ typ typ HANDLE hProcess,
/*2829*/ typ typ typ typ typ typ typ typ typ LPCVOID lpBaseAddress,
/*2830*/ typ typ typ typ typ SIZE_T dwSize
/*2831*/ );
/*2868*/ 
/*2869*/ typ typ typ typ
/*2870*/ LPVOID
/*2871*/ typ
/*2872*/ VirtualAlloc(
/*2873*/ typ typ typ typ typ typ typ LPVOID lpAddress,
/*2874*/ typ typ typ typ typ SIZE_T dwSize,
/*2875*/ typ typ typ typ typ DWORD flAllocationType,
/*2876*/ typ typ typ typ typ DWORD flProtect
/*2877*/ );
/*2879*/ 
/*2880*/ BOOL
/*2881*/ typ
/*2882*/ VirtualFree(
/*2883*/ typ typ typ typ typ LPVOID lpAddress,
/*2884*/ typ typ typ typ typ SIZE_T dwSize,
/*2885*/ typ typ typ typ typ DWORD dwFreeType
/*2886*/ );
/*2888*/ 
/*2889*/ BOOL
/*2890*/ typ
/*2891*/ VirtualProtect(
/*2892*/ typ typ typ typ typ LPVOID lpAddress,
/*2893*/ typ typ typ typ typ SIZE_T dwSize,
/*2894*/ typ typ typ typ typ DWORD flNewProtect,
/*2895*/ typ typ typ typ typ PDWORD lpflOldProtect
/*2896*/ );
/*2898*/ 
/*2899*/ SIZE_T
/*2900*/ typ
/*2901*/ VirtualQuery(
/*2902*/ typ typ typ typ typ typ typ LPCVOID lpAddress,
/*2903*/ typ typ typ typ typ typ typ PMEMORY_BASIC_INFORMATION lpBuffer,
/*2904*/ typ typ typ typ typ SIZE_T dwLength
/*2905*/ );
/*2907*/ 
/*2908*/ typ typ typ typ
/*2909*/ LPVOID
/*2910*/ typ
/*2911*/ VirtualAllocEx(
/*2912*/ typ typ typ typ typ HANDLE hProcess,
/*2913*/ typ typ typ typ typ typ typ LPVOID lpAddress,
/*2914*/ typ typ typ typ typ SIZE_T dwSize,
/*2915*/ typ typ typ typ typ DWORD flAllocationType,
/*2916*/ typ typ typ typ typ DWORD flProtect
/*2917*/ );
/*2936*/ 
/*2937*/ UINT
/*2938*/ typ
/*2939*/ GetWriteWatch(
/*2940*/ typ typ typ typ typ DWORD dwFlags,
/*2941*/ typ typ typ typ typ PVOID lpBaseAddress,
/*2942*/ typ typ typ typ typ SIZE_T dwRegionSize,
/*2943*/ typ typ typ typ typ typ typ PVOID*lpAddresses,
/*2944*/ typ typ typ typ typ ULONG_PTR*lpdwCount,
/*2945*/ typ typ typ typ typ PULONG lpdwGranularity
/*2946*/ );
/*2948*/ 
/*2949*/ UINT
/*2950*/ typ
/*2951*/ ResetWriteWatch(
/*2952*/ typ typ typ typ typ LPVOID lpBaseAddress,
/*2953*/ typ typ typ typ typ SIZE_T dwRegionSize
/*2954*/ );
/*2956*/ 
/*2957*/ SIZE_T
/*2958*/ typ
/*2959*/ GetLargePageMinimum(
/*2960*/ void
/*2961*/ );
/*2963*/ 
/*2964*/ UINT
/*2965*/ typ
/*2966*/ EnumSystemFirmwareTables(
/*2967*/ typ typ typ typ typ DWORD FirmwareTableProviderSignature,
/*2968*/ typ typ typ typ typ typ typ typ typ PVOID pFirmwareTableEnumBuffer,
/*2969*/ typ typ typ typ typ DWORD BufferSize
/*2970*/ );
/*2972*/ 
/*2973*/ UINT
/*2974*/ typ
/*2975*/ GetSystemFirmwareTable(
/*2976*/ typ typ typ typ typ DWORD FirmwareTableProviderSignature,
/*2977*/ typ typ typ typ typ DWORD FirmwareTableID,
/*2978*/ typ typ typ typ typ typ typ typ typ PVOID pFirmwareTableBuffer,
/*2979*/ typ typ typ typ typ DWORD BufferSize
/*2980*/ );
/*2982*/ 
/*2983*/ BOOL
/*2984*/ typ
/*2985*/ GetPhysicallyInstalledSystemMemory(
/*2986*/ typ typ typ typ typ PULONGLONG TotalMemoryInKilobytes
/*2987*/ );
/*2989*/ 
/*2990*/ BOOL
/*2991*/ typ
/*2992*/ VirtualFreeEx(
/*2993*/ typ typ typ typ typ HANDLE hProcess,
/*2994*/ typ typ typ typ typ LPVOID lpAddress,
/*2995*/ typ typ typ typ typ SIZE_T dwSize,
/*2996*/ typ typ typ typ typ DWORD dwFreeType
/*2997*/ );
/*2999*/ 
/*3000*/ BOOL
/*3001*/ typ
/*3002*/ VirtualProtectEx(
/*3003*/ typ typ typ typ typ HANDLE hProcess,
/*3004*/ typ typ typ typ typ LPVOID lpAddress,
/*3005*/ typ typ typ typ typ SIZE_T dwSize,
/*3006*/ typ typ typ typ typ DWORD flNewProtect,
/*3007*/ typ typ typ typ typ PDWORD lpflOldProtect
/*3008*/ );
/*3010*/ 
/*3011*/ SIZE_T
/*3012*/ typ
/*3013*/ VirtualQueryEx(
/*3014*/ typ typ typ typ typ HANDLE hProcess,
/*3015*/ typ typ typ typ typ typ typ LPCVOID lpAddress,
/*3016*/ typ typ typ typ typ typ typ PMEMORY_BASIC_INFORMATION lpBuffer,
/*3017*/ typ typ typ typ typ SIZE_T dwLength
/*3018*/ );
/*3020*/ 
/*3021*/ typ typ typ typ typ typ typ
/*3022*/ HANDLE
/*3023*/ typ
/*3024*/ HeapCreate(
/*3025*/ typ typ typ typ typ DWORD flOptions,
/*3026*/ typ typ typ typ typ SIZE_T dwInitialSize,
/*3027*/ typ typ typ typ typ SIZE_T dwMaximumSize
/*3028*/ );
/*3030*/ 
/*3031*/ BOOL
/*3032*/ typ
/*3033*/ HeapDestroy(
/*3034*/ typ typ typ typ typ HANDLE hHeap
/*3035*/ );
/*3037*/ 
/*3038*/ typ typ
/*3039*/ LPVOID
/*3040*/ typ
/*3041*/ HeapAlloc(
/*3042*/ typ typ typ typ typ HANDLE hHeap,
/*3043*/ typ typ typ typ typ DWORD dwFlags,
/*3044*/ typ typ typ typ typ SIZE_T dwBytes
/*3045*/ );
/*3047*/ 
/*3048*/ typ typ
/*3049*/ LPVOID
/*3050*/ typ
/*3051*/ HeapReAlloc(
/*3052*/ typ typ typ typ typ HANDLE hHeap,
/*3053*/ typ typ typ typ typ DWORD dwFlags,
/*3054*/ typ LPVOID lpMem,
/*3055*/ typ typ typ typ typ SIZE_T dwBytes
/*3056*/ );
/*3058*/ 
/*3059*/ BOOL
/*3060*/ typ
/*3061*/ HeapFree(
/*3062*/ typ typ typ typ typ HANDLE hHeap,
/*3063*/ typ typ typ typ typ DWORD dwFlags,
/*3064*/ typ LPVOID lpMem
/*3065*/ );
/*3067*/ 
/*3068*/ SIZE_T
/*3069*/ typ
/*3070*/ HeapSize(
/*3071*/ typ typ typ typ typ HANDLE hHeap,
/*3072*/ typ typ typ typ typ DWORD dwFlags,
/*3073*/ typ typ typ typ typ LPCVOID lpMem
/*3074*/ );
/*3076*/ 
/*3077*/ BOOL
/*3078*/ typ
/*3079*/ HeapValidate(
/*3080*/ typ typ typ typ typ HANDLE hHeap,
/*3081*/ typ typ typ typ typ DWORD dwFlags,
/*3082*/ typ typ typ typ typ typ typ LPCVOID lpMem
/*3083*/ );
/*3085*/ 
/*3086*/ SIZE_T
/*3087*/ typ
/*3088*/ HeapCompact(
/*3089*/ typ typ typ typ typ HANDLE hHeap,
/*3090*/ typ typ typ typ typ DWORD dwFlags
/*3091*/ );
/*3093*/ 
/*3094*/ typ typ typ typ typ
/*3095*/ HANDLE
/*3096*/ typ
/*3097*/ GetProcessHeap(void);
/*3099*/ 
/*3100*/ DWORD
/*3101*/ typ
/*3102*/ GetProcessHeaps(
/*3103*/ typ typ typ typ typ DWORD NumberOfHeaps,
/*3104*/ typ typ typ typ typ typ typ PHANDLE ProcessHeaps
/*3105*/ );
/*3107*/ typedef struct _PROCESS_HEAP_ENTRY{
/*3108*/ PVOID lpData;
/*3109*/ DWORD cbData;
/*3110*/ BYTE cbOverhead;
/*3111*/ BYTE iRegionIndex;
/*3112*/ WORD wFlags;
/*3113*/ union{
/*3114*/ struct{
/*3115*/ HANDLE hMem;
/*3116*/ DWORD dwReserved[3];
/*3117*/ }Block;
/*3118*/ struct{
/*3119*/ DWORD dwCommittedSize;
/*3120*/ DWORD dwUnCommittedSize;
/*3121*/ LPVOID lpFirstBlock;
/*3122*/ LPVOID lpLastBlock;
/*3123*/ }Region;
/*3124*/ }u;
/*3125*/ }PROCESS_HEAP_ENTRY,*LPPROCESS_HEAP_ENTRY,*PPROCESS_HEAP_ENTRY;
/*3133*/ 
/*3134*/ BOOL
/*3135*/ typ
/*3136*/ HeapLock(
/*3137*/ typ typ typ typ typ HANDLE hHeap
/*3138*/ );
/*3140*/ 
/*3141*/ BOOL
/*3142*/ typ
/*3143*/ HeapUnlock(
/*3144*/ typ typ typ typ typ HANDLE hHeap
/*3145*/ );
/*3148*/ 
/*3149*/ BOOL
/*3150*/ typ
/*3151*/ HeapWalk(
/*3152*/ typ typ typ typ typ HANDLE hHeap,
/*3153*/ typ typ typ typ typ LPPROCESS_HEAP_ENTRY lpEntry
/*3154*/ );
/*3156*/ 
/*3157*/ BOOL
/*3158*/ typ
/*3159*/ HeapSetInformation(
/*3160*/ typ typ typ typ typ typ typ HANDLE HeapHandle,
/*3161*/ typ typ typ typ typ HEAP_INFORMATION_CLASS HeapInformationClass,
/*3162*/ typ typ typ typ typ typ typ typ typ PVOID HeapInformation,
/*3163*/ typ typ typ typ typ SIZE_T HeapInformationLength
/*3164*/ );
/*3166*/ 
/*3167*/ BOOL
/*3168*/ typ
/*3169*/ HeapQueryInformation(
/*3170*/ typ typ typ typ typ typ typ HANDLE HeapHandle,
/*3171*/ typ typ typ typ typ HEAP_INFORMATION_CLASS HeapInformationClass,
/*3172*/ typ typ typ typ typ typ typ typ typ PVOID HeapInformation,
/*3173*/ typ typ typ typ typ SIZE_T HeapInformationLength,
/*3174*/ typ typ typ typ typ typ typ PSIZE_T ReturnLength
/*3175*/ );
/*3193*/ 
/*3194*/ BOOL
/*3195*/ typ
/*3196*/ GetBinaryTypeA(
/*3197*/ typ typ typ typ typ LPCSTR lpApplicationName,
/*3198*/ typ typ typ typ typ LPDWORD lpBinaryType
/*3199*/ );
/*3200*/ 
/*3201*/ BOOL
/*3202*/ typ
/*3203*/ GetBinaryTypeW(
/*3204*/ typ typ typ typ typ LPCWSTR lpApplicationName,
/*3205*/ typ typ typ typ typ LPDWORD lpBinaryType
/*3206*/ );
/*3213*/ 
/*3214*/ DWORD
/*3215*/ typ
/*3216*/ GetShortPathNameA(
/*3217*/ typ typ typ typ typ LPCSTR lpszLongPath,
/*3218*/ typ typ typ typ typ typ typ typ typ LPSTR lpszShortPath,
/*3219*/ typ typ typ typ typ DWORD cchBuffer
/*3220*/ );
/*3221*/ 
/*3222*/ DWORD
/*3223*/ typ
/*3224*/ GetShortPathNameW(
/*3225*/ typ typ typ typ typ LPCWSTR lpszLongPath,
/*3226*/ typ typ typ typ typ typ typ typ typ LPWSTR lpszShortPath,
/*3227*/ typ typ typ typ typ DWORD cchBuffer
/*3228*/ );
/*3235*/ 
/*3236*/ DWORD
/*3237*/ typ
/*3238*/ GetLongPathNameA(
/*3239*/ typ typ typ typ typ LPCSTR lpszShortPath,
/*3240*/ typ typ typ typ typ typ typ typ typ LPSTR lpszLongPath,
/*3241*/ typ typ typ typ typ DWORD cchBuffer
/*3242*/ );
/*3243*/ 
/*3244*/ DWORD
/*3245*/ typ
/*3246*/ GetLongPathNameW(
/*3247*/ typ typ typ typ typ LPCWSTR lpszShortPath,
/*3248*/ typ typ typ typ typ typ typ typ typ LPWSTR lpszLongPath,
/*3249*/ typ typ typ typ typ DWORD cchBuffer
/*3250*/ );
/*3285*/ 
/*3286*/ BOOL
/*3287*/ typ
/*3288*/ GetProcessAffinityMask(
/*3289*/ typ typ typ typ typ HANDLE hProcess,
/*3290*/ typ typ typ typ typ PDWORD_PTR lpProcessAffinityMask,
/*3291*/ typ typ typ typ typ PDWORD_PTR lpSystemAffinityMask
/*3292*/ );
/*3294*/ 
/*3295*/ BOOL
/*3296*/ typ
/*3297*/ SetProcessAffinityMask(
/*3298*/ typ typ typ typ typ HANDLE hProcess,
/*3299*/ typ typ typ typ typ DWORD_PTR dwProcessAffinityMask
/*3300*/ );
/*3314*/ 
/*3315*/ BOOL
/*3316*/ typ
/*3317*/ GetProcessTimes(
/*3318*/ typ typ typ typ typ HANDLE hProcess,
/*3319*/ typ typ typ typ typ LPFILETIME lpCreationTime,
/*3320*/ typ typ typ typ typ LPFILETIME lpExitTime,
/*3321*/ typ typ typ typ typ LPFILETIME lpKernelTime,
/*3322*/ typ typ typ typ typ LPFILETIME lpUserTime
/*3323*/ );
/*3325*/ 
/*3326*/ BOOL
/*3327*/ typ
/*3328*/ GetProcessIoCounters(
/*3329*/ typ typ typ typ typ HANDLE hProcess,
/*3330*/ typ typ typ typ typ PIO_COUNTERS lpIoCounters
/*3331*/ );
/*3333*/ 
/*3334*/ BOOL
/*3335*/ typ
/*3336*/ GetProcessWorkingSetSize(
/*3337*/ typ typ typ typ typ HANDLE hProcess,
/*3338*/ typ typ typ typ typ PSIZE_T lpMinimumWorkingSetSize,
/*3339*/ typ typ typ typ typ PSIZE_T lpMaximumWorkingSetSize
/*3340*/ );
/*3342*/ 
/*3343*/ BOOL
/*3344*/ typ
/*3345*/ GetProcessWorkingSetSizeEx(
/*3346*/ typ typ typ typ typ HANDLE hProcess,
/*3347*/ typ typ typ typ typ PSIZE_T lpMinimumWorkingSetSize,
/*3348*/ typ typ typ typ typ PSIZE_T lpMaximumWorkingSetSize,
/*3349*/ typ typ typ typ typ PDWORD Flags
/*3350*/ );
/*3352*/ 
/*3353*/ BOOL
/*3354*/ typ
/*3355*/ SetProcessWorkingSetSize(
/*3356*/ typ typ typ typ typ HANDLE hProcess,
/*3357*/ typ typ typ typ typ SIZE_T dwMinimumWorkingSetSize,
/*3358*/ typ typ typ typ typ SIZE_T dwMaximumWorkingSetSize
/*3359*/ );
/*3361*/ 
/*3362*/ BOOL
/*3363*/ typ
/*3364*/ SetProcessWorkingSetSizeEx(
/*3365*/ typ typ typ typ typ HANDLE hProcess,
/*3366*/ typ typ typ typ typ SIZE_T dwMinimumWorkingSetSize,
/*3367*/ typ typ typ typ typ SIZE_T dwMaximumWorkingSetSize,
/*3368*/ typ typ typ typ typ DWORD Flags
/*3369*/ );
/*3393*/ 
/*3394*/ HANDLE
/*3395*/ typ
/*3396*/ OpenProcess(
/*3397*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*3398*/ typ typ typ typ typ BOOL bInheritHandle,
/*3399*/ typ typ typ typ typ DWORD dwProcessId
/*3400*/ );
/*3402*/ 
/*3403*/ typ typ typ typ typ
/*3404*/ HANDLE
/*3405*/ typ
/*3406*/ GetCurrentProcess(
/*3407*/ void
/*3408*/ );
/*3410*/ 
/*3411*/ DWORD
/*3412*/ typ
/*3413*/ GetCurrentProcessId(
/*3414*/ void
/*3415*/ );
/*3417*/ 
/*3418*/ 
/*3419*/ void
/*3420*/ typ
/*3421*/ ExitProcess(
/*3422*/ typ typ typ typ typ UINT uExitCode
/*3423*/ );
/*3425*/ 
/*3426*/ BOOL
/*3427*/ typ
/*3428*/ TerminateProcess(
/*3429*/ typ typ typ typ typ HANDLE hProcess,
/*3430*/ typ typ typ typ typ UINT uExitCode
/*3431*/ );
/*3433*/ 
/*3434*/ BOOL
/*3435*/ typ
/*3436*/ GetExitCodeProcess(
/*3437*/ typ typ typ typ typ HANDLE hProcess,
/*3438*/ typ typ typ typ typ LPDWORD lpExitCode
/*3439*/ );
/*3441*/ 
/*3442*/ void
/*3443*/ typ
/*3444*/ FatalExit(
/*3445*/ typ typ typ typ typ int ExitCode
/*3446*/ );
/*3448*/ 
/*3449*/ typ typ typ typ typ
/*3450*/ typ typ
/*3451*/ LPCH
/*3452*/ typ
/*3453*/ GetEnvironmentStrings(
/*3454*/ void
/*3455*/ );
/*3457*/ 
/*3458*/ typ typ typ typ typ
/*3459*/ typ typ
/*3460*/ LPWCH
/*3461*/ typ
/*3462*/ GetEnvironmentStringsW(
/*3463*/ void
/*3464*/ );
/*3472*/ 
/*3473*/ BOOL
/*3474*/ typ
/*3475*/ SetEnvironmentStringsA(
/*3476*/ typ typ typ typ typ typ typ LPCH NewEnvironment
/*3477*/ );
/*3478*/ 
/*3479*/ BOOL
/*3480*/ typ
/*3481*/ SetEnvironmentStringsW(
/*3482*/ typ typ typ typ typ typ typ LPWCH NewEnvironment
/*3483*/ );
/*3490*/ 
/*3491*/ BOOL
/*3492*/ typ
/*3493*/ FreeEnvironmentStringsA(
/*3494*/ typ typ typ typ typ typ typ LPCH
/*3495*/ );
/*3496*/ 
/*3497*/ BOOL
/*3498*/ typ
/*3499*/ FreeEnvironmentStringsW(
/*3500*/ typ typ typ typ typ typ typ LPWCH
/*3501*/ );
/*3508*/ 
/*3509*/ void
/*3510*/ typ
/*3511*/ RaiseException(
/*3512*/ typ typ typ typ typ DWORD dwExceptionCode,
/*3513*/ typ typ typ typ typ DWORD dwExceptionFlags,
/*3514*/ typ typ typ typ typ DWORD nNumberOfArguments,
/*3515*/ typ typ typ typ typ typ typ typ typ const ULONG_PTR*lpArguments
/*3516*/ );
/*3518*/ typ
/*3519*/ 
/*3520*/ LONG
/*3521*/ typ
/*3522*/ UnhandledExceptionFilter(
/*3523*/ typ typ typ typ typ struct _EXCEPTION_POINTERS*ExceptionInfo
/*3524*/ );
/*3526*/ typedef LONG(typ*PTOP_LEVEL_EXCEPTION_FILTER)(
/*3527*/ typ typ typ typ typ struct _EXCEPTION_POINTERS*ExceptionInfo
/*3528*/ );
/*3529*/ typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
/*3531*/ 
/*3532*/ LPTOP_LEVEL_EXCEPTION_FILTER
/*3533*/ typ
/*3534*/ SetUnhandledExceptionFilter(
/*3535*/ typ typ typ typ typ LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
/*3536*/ );
/*3630*/ 
/*3631*/ typ typ typ typ typ typ typ
/*3632*/ HANDLE
/*3633*/ typ
/*3634*/ CreateThread(
/*3635*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpThreadAttributes,
/*3636*/ typ typ typ typ typ SIZE_T dwStackSize,
/*3637*/ typ typ typ typ typ LPTHREAD_START_ROUTINE lpStartAddress,
/*3638*/ typ typ typ typ typ typ typ LPVOID lpParameter,
/*3639*/ typ typ typ typ typ DWORD dwCreationFlags,
/*3640*/ typ typ typ typ typ typ typ LPDWORD lpThreadId
/*3641*/ );
/*3643*/ 
/*3644*/ typ typ typ typ typ typ typ
/*3645*/ HANDLE
/*3646*/ typ
/*3647*/ CreateRemoteThread(
/*3648*/ typ typ typ typ typ HANDLE hProcess,
/*3649*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpThreadAttributes,
/*3650*/ typ typ typ typ typ SIZE_T dwStackSize,
/*3651*/ typ typ typ typ typ LPTHREAD_START_ROUTINE lpStartAddress,
/*3652*/ typ typ typ typ typ typ typ LPVOID lpParameter,
/*3653*/ typ typ typ typ typ DWORD dwCreationFlags,
/*3654*/ typ typ typ typ typ typ typ LPDWORD lpThreadId
/*3655*/ );
/*3657*/ 
/*3658*/ typ typ typ typ typ
/*3659*/ HANDLE
/*3660*/ typ
/*3661*/ GetCurrentThread(
/*3662*/ void
/*3663*/ );
/*3665*/ 
/*3666*/ DWORD
/*3667*/ typ
/*3668*/ GetCurrentThreadId(
/*3669*/ void
/*3670*/ );
/*3672*/ 
/*3673*/ BOOL
/*3674*/ typ
/*3675*/ SetThreadStackGuarantee(
/*3676*/ typ typ typ typ typ PULONG StackSizeInBytes
/*3677*/ );
/*3679*/ 
/*3680*/ DWORD
/*3681*/ typ
/*3682*/ GetProcessIdOfThread(
/*3683*/ typ typ typ typ typ HANDLE Thread
/*3684*/ );
/*3697*/ 
/*3698*/ DWORD
/*3699*/ typ
/*3700*/ GetProcessId(
/*3701*/ typ typ typ typ typ HANDLE Process
/*3702*/ );
/*3704*/ 
/*3705*/ DWORD
/*3706*/ typ
/*3707*/ GetCurrentProcessorNumber(
/*3708*/ void
/*3709*/ );
/*3711*/ 
/*3712*/ DWORD_PTR
/*3713*/ typ
/*3714*/ SetThreadAffinityMask(
/*3715*/ typ typ typ typ typ HANDLE hThread,
/*3716*/ typ typ typ typ typ DWORD_PTR dwThreadAffinityMask
/*3717*/ );
/*3752*/ 
/*3753*/ BOOL
/*3754*/ typ
/*3755*/ SetProcessPriorityBoost(
/*3756*/ typ typ typ typ typ HANDLE hProcess,
/*3757*/ typ typ typ typ typ BOOL bDisablePriorityBoost
/*3758*/ );
/*3760*/ 
/*3761*/ BOOL
/*3762*/ typ
/*3763*/ GetProcessPriorityBoost(
/*3764*/ typ typ typ typ typ HANDLE hProcess,
/*3765*/ typ typ typ typ typ PBOOL pDisablePriorityBoost
/*3766*/ );
/*3768*/ 
/*3769*/ BOOL
/*3770*/ typ
/*3771*/ RequestWakeupLatency(
/*3772*/ typ typ typ typ typ LATENCY_TIME latency
/*3773*/ );
/*3775*/ 
/*3776*/ BOOL
/*3777*/ typ
/*3778*/ IsSystemResumeAutomatic(
/*3779*/ void
/*3780*/ );
/*3782*/ 
/*3783*/ typ typ typ typ typ typ typ
/*3784*/ HANDLE
/*3785*/ typ
/*3786*/ OpenThread(
/*3787*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*3788*/ typ typ typ typ typ BOOL bInheritHandle,
/*3789*/ typ typ typ typ typ DWORD dwThreadId
/*3790*/ );
/*3792*/ 
/*3793*/ BOOL
/*3794*/ typ
/*3795*/ SetThreadPriority(
/*3796*/ typ typ typ typ typ HANDLE hThread,
/*3797*/ typ typ typ typ typ int nPriority
/*3798*/ );
/*3800*/ 
/*3801*/ BOOL
/*3802*/ typ
/*3803*/ SetThreadPriorityBoost(
/*3804*/ typ typ typ typ typ HANDLE hThread,
/*3805*/ typ typ typ typ typ BOOL bDisablePriorityBoost
/*3806*/ );
/*3808*/ 
/*3809*/ BOOL
/*3810*/ typ
/*3811*/ GetThreadPriorityBoost(
/*3812*/ typ typ typ typ typ HANDLE hThread,
/*3813*/ typ typ typ typ typ PBOOL pDisablePriorityBoost
/*3814*/ );
/*3816*/ 
/*3817*/ int
/*3818*/ typ
/*3819*/ GetThreadPriority(
/*3820*/ typ typ typ typ typ HANDLE hThread
/*3821*/ );
/*3823*/ 
/*3824*/ BOOL
/*3825*/ typ
/*3826*/ GetThreadTimes(
/*3827*/ typ typ typ typ typ HANDLE hThread,
/*3828*/ typ typ typ typ typ LPFILETIME lpCreationTime,
/*3829*/ typ typ typ typ typ LPFILETIME lpExitTime,
/*3830*/ typ typ typ typ typ LPFILETIME lpKernelTime,
/*3831*/ typ typ typ typ typ LPFILETIME lpUserTime
/*3832*/ );
/*3846*/ 
/*3847*/ 
/*3848*/ void
/*3849*/ typ
/*3850*/ ExitThread(
/*3851*/ typ typ typ typ typ DWORD dwExitCode
/*3852*/ );
/*3854*/ 
/*3855*/ BOOL
/*3856*/ typ
/*3857*/ TerminateThread(
/*3858*/ typ typ typ typ typ HANDLE hThread,
/*3859*/ typ typ typ typ typ DWORD dwExitCode
/*3860*/ );
/*3862*/ 
/*3863*/ BOOL
/*3864*/ typ
/*3865*/ GetExitCodeThread(
/*3866*/ typ typ typ typ typ HANDLE hThread,
/*3867*/ typ typ typ typ typ LPDWORD lpExitCode
/*3868*/ );
/*3870*/ 
/*3871*/ BOOL
/*3872*/ typ
/*3873*/ GetThreadSelectorEntry(
/*3874*/ typ typ typ typ typ HANDLE hThread,
/*3875*/ typ typ typ typ typ DWORD dwSelector,
/*3876*/ typ typ typ typ typ LPLDT_ENTRY lpSelectorEntry
/*3877*/ );
/*3879*/ 
/*3880*/ EXECUTION_STATE
/*3881*/ typ
/*3882*/ SetThreadExecutionState(
/*3883*/ typ typ typ typ typ EXECUTION_STATE esFlags
/*3884*/ );
/*3889*/ 
/*3890*/ typ __inner_checkReturn
/*3891*/ DWORD
/*3892*/ typ
/*3893*/ GetLastError(
/*3894*/ void
/*3895*/ );
/*3898*/ 
/*3899*/ void
/*3900*/ typ
/*3901*/ SetLastError(
/*3902*/ typ typ typ typ typ DWORD dwErrCode
/*3903*/ );
/*3926*/ 
/*3927*/ BOOL
/*3928*/ typ
/*3929*/ GetOverlappedResult(
/*3930*/ typ typ typ typ typ HANDLE hFile,
/*3931*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped,
/*3932*/ typ typ typ typ typ LPDWORD lpNumberOfBytesTransferred,
/*3933*/ typ typ typ typ typ BOOL bWait
/*3934*/ );
/*3936*/ 
/*3937*/ typ typ typ typ typ typ typ
/*3938*/ HANDLE
/*3939*/ typ
/*3940*/ CreateIoCompletionPort(
/*3941*/ typ typ typ typ typ HANDLE FileHandle,
/*3942*/ typ typ typ typ typ typ typ HANDLE ExistingCompletionPort,
/*3943*/ typ typ typ typ typ ULONG_PTR CompletionKey,
/*3944*/ typ typ typ typ typ DWORD NumberOfConcurrentThreads
/*3945*/ );
/*3947*/ 
/*3948*/ BOOL
/*3949*/ typ
/*3950*/ GetQueuedCompletionStatus(
/*3951*/ typ typ typ typ typ HANDLE CompletionPort,
/*3952*/ typ typ typ typ typ LPDWORD lpNumberOfBytesTransferred,
/*3953*/ typ typ typ typ typ PULONG_PTR lpCompletionKey,
/*3954*/ typ typ typ typ typ LPOVERLAPPED*lpOverlapped,
/*3955*/ typ typ typ typ typ DWORD dwMilliseconds
/*3956*/ );
/*3974*/ 
/*3975*/ BOOL
/*3976*/ typ
/*3977*/ PostQueuedCompletionStatus(
/*3978*/ typ typ typ typ typ HANDLE CompletionPort,
/*3979*/ typ typ typ typ typ DWORD dwNumberOfBytesTransferred,
/*3980*/ typ typ typ typ typ ULONG_PTR dwCompletionKey,
/*3981*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*3982*/ );
/*4026*/ 
/*4027*/ UINT
/*4028*/ typ
/*4029*/ GetErrorMode(
/*4030*/ void
/*4031*/ );
/*4033*/ 
/*4034*/ UINT
/*4035*/ typ
/*4036*/ SetErrorMode(
/*4037*/ typ typ typ typ typ UINT uMode
/*4038*/ );
/*4040*/ 
/*4041*/ BOOL
/*4042*/ typ
/*4043*/ ReadProcessMemory(
/*4044*/ typ typ typ typ typ HANDLE hProcess,
/*4045*/ typ typ typ typ typ LPCVOID lpBaseAddress,
/*4046*/ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*4047*/ typ typ typ typ typ SIZE_T nSize,
/*4048*/ typ typ typ typ typ typ typ SIZE_T*lpNumberOfBytesRead
/*4049*/ );
/*4051*/ 
/*4052*/ BOOL
/*4053*/ typ
/*4054*/ WriteProcessMemory(
/*4055*/ typ typ typ typ typ HANDLE hProcess,
/*4056*/ typ typ typ typ typ LPVOID lpBaseAddress,
/*4057*/ typ typ typ typ typ typ typ LPCVOID lpBuffer,
/*4058*/ typ typ typ typ typ SIZE_T nSize,
/*4059*/ typ typ typ typ typ typ typ SIZE_T*lpNumberOfBytesWritten
/*4060*/ );
/*4063*/ 
/*4064*/ BOOL
/*4065*/ typ
/*4066*/ GetThreadContext(
/*4067*/ typ typ typ typ typ HANDLE hThread,
/*4068*/ typ typ typ typ typ LPCONTEXT lpContext
/*4069*/ );
/*4071*/ 
/*4072*/ BOOL
/*4073*/ typ
/*4074*/ SetThreadContext(
/*4075*/ typ typ typ typ typ HANDLE hThread,
/*4076*/ typ typ typ typ typ const CONTEXT*lpContext
/*4077*/ );
/*4079*/ 
/*4080*/ BOOL
/*4081*/ typ
/*4082*/ Wow64GetThreadContext(
/*4083*/ typ typ typ typ typ HANDLE hThread,
/*4084*/ typ typ typ typ typ PWOW64_CONTEXT lpContext
/*4085*/ );
/*4087*/ 
/*4088*/ BOOL
/*4089*/ typ
/*4090*/ Wow64SetThreadContext(
/*4091*/ typ typ typ typ typ HANDLE hThread,
/*4092*/ typ typ typ typ typ const WOW64_CONTEXT*lpContext
/*4093*/ );
/*4097*/ 
/*4098*/ DWORD
/*4099*/ typ
/*4100*/ SuspendThread(
/*4101*/ typ typ typ typ typ HANDLE hThread
/*4102*/ );
/*4104*/ 
/*4105*/ DWORD
/*4106*/ typ
/*4107*/ Wow64SuspendThread(
/*4108*/ typ typ typ typ typ HANDLE hThread
/*4109*/ );
/*4111*/ 
/*4112*/ DWORD
/*4113*/ typ
/*4114*/ ResumeThread(
/*4115*/ typ typ typ typ typ HANDLE hThread
/*4116*/ );
/*4159*/ 
/*4160*/ void
/*4161*/ typ
/*4162*/ DebugBreak(
/*4163*/ void
/*4164*/ );
/*4166*/ 
/*4167*/ BOOL
/*4168*/ typ
/*4169*/ WaitForDebugEvent(
/*4170*/ typ typ typ typ typ LPDEBUG_EVENT lpDebugEvent,
/*4171*/ typ typ typ typ typ DWORD dwMilliseconds
/*4172*/ );
/*4174*/ 
/*4175*/ BOOL
/*4176*/ typ
/*4177*/ ContinueDebugEvent(
/*4178*/ typ typ typ typ typ DWORD dwProcessId,
/*4179*/ typ typ typ typ typ DWORD dwThreadId,
/*4180*/ typ typ typ typ typ DWORD dwContinueStatus
/*4181*/ );
/*4183*/ 
/*4184*/ BOOL
/*4185*/ typ
/*4186*/ DebugActiveProcess(
/*4187*/ typ typ typ typ typ DWORD dwProcessId
/*4188*/ );
/*4190*/ 
/*4191*/ BOOL
/*4192*/ typ
/*4193*/ DebugActiveProcessStop(
/*4194*/ typ typ typ typ typ DWORD dwProcessId
/*4195*/ );
/*4197*/ 
/*4198*/ BOOL
/*4199*/ typ
/*4200*/ DebugSetProcessKillOnExit(
/*4201*/ typ typ typ typ typ BOOL KillOnExit
/*4202*/ );
/*4204*/ 
/*4205*/ BOOL
/*4206*/ typ
/*4207*/ DebugBreakProcess(
/*4208*/ typ typ typ typ typ HANDLE Process
/*4209*/ );
/*4211*/ 
/*4212*/ void
/*4213*/ typ
/*4214*/ InitializeCriticalSection(
/*4215*/ typ typ typ typ typ LPCRITICAL_SECTION lpCriticalSection
/*4216*/ );
/*4218*/ 
/*4219*/ void
/*4220*/ typ
/*4221*/ EnterCriticalSection(
/*4222*/ typ typ typ typ typ LPCRITICAL_SECTION lpCriticalSection
/*4223*/ );
/*4225*/ 
/*4226*/ void
/*4227*/ typ
/*4228*/ LeaveCriticalSection(
/*4229*/ typ typ typ typ typ LPCRITICAL_SECTION lpCriticalSection
/*4230*/ );
/*4270*/ 
/*4271*/ void
/*4272*/ typ
/*4273*/ DeleteCriticalSection(
/*4274*/ typ typ typ typ typ LPCRITICAL_SECTION lpCriticalSection
/*4275*/ );
/*4277*/ 
/*4278*/ BOOL
/*4279*/ typ
/*4280*/ SetEvent(
/*4281*/ typ typ typ typ typ HANDLE hEvent
/*4282*/ );
/*4284*/ 
/*4285*/ BOOL
/*4286*/ typ
/*4287*/ ResetEvent(
/*4288*/ typ typ typ typ typ HANDLE hEvent
/*4289*/ );
/*4291*/ 
/*4292*/ BOOL
/*4293*/ typ
/*4294*/ PulseEvent(
/*4295*/ typ typ typ typ typ HANDLE hEvent
/*4296*/ );
/*4298*/ 
/*4299*/ BOOL
/*4300*/ typ
/*4301*/ ReleaseSemaphore(
/*4302*/ typ typ typ typ typ HANDLE hSemaphore,
/*4303*/ typ typ typ typ typ LONG lReleaseCount,
/*4304*/ typ typ typ typ typ typ typ LPLONG lpPreviousCount
/*4305*/ );
/*4307*/ 
/*4308*/ BOOL
/*4309*/ typ
/*4310*/ ReleaseMutex(
/*4311*/ typ typ typ typ typ HANDLE hMutex
/*4312*/ );
/*4314*/ 
/*4315*/ DWORD
/*4316*/ typ
/*4317*/ WaitForSingleObject(
/*4318*/ typ typ typ typ typ HANDLE hHandle,
/*4319*/ typ typ typ typ typ DWORD dwMilliseconds
/*4320*/ );
/*4322*/ 
/*4323*/ DWORD
/*4324*/ typ
/*4325*/ WaitForMultipleObjects(
/*4326*/ typ typ typ typ typ DWORD nCount,
/*4327*/ typ typ typ typ typ typ typ const HANDLE*lpHandles,
/*4328*/ typ typ typ typ typ BOOL bWaitAll,
/*4329*/ typ typ typ typ typ DWORD dwMilliseconds
/*4330*/ );
/*4332*/ 
/*4333*/ void
/*4334*/ typ
/*4335*/ Sleep(
/*4336*/ typ typ typ typ typ DWORD dwMilliseconds
/*4337*/ );
/*4339*/ 
/*4340*/ typ typ typ typ typ typ typ
/*4341*/ HGLOBAL
/*4342*/ typ
/*4343*/ LoadResource(
/*4344*/ typ typ typ typ typ typ typ HMODULE hModule,
/*4345*/ typ typ typ typ typ HRSRC hResInfo
/*4346*/ );
/*4348*/ 
/*4349*/ DWORD
/*4350*/ typ
/*4351*/ SizeofResource(
/*4352*/ typ typ typ typ typ typ typ HMODULE hModule,
/*4353*/ typ typ typ typ typ HRSRC hResInfo
/*4354*/ );
/*4357*/ 
/*4358*/ ATOM
/*4359*/ typ
/*4360*/ GlobalDeleteAtom(
/*4361*/ typ typ typ typ typ ATOM nAtom
/*4362*/ );
/*4364*/ 
/*4365*/ BOOL
/*4366*/ typ
/*4367*/ InitAtomTable(
/*4368*/ typ typ typ typ typ DWORD nSize
/*4369*/ );
/*4371*/ 
/*4372*/ ATOM
/*4373*/ typ
/*4374*/ DeleteAtom(
/*4375*/ typ typ typ typ typ ATOM nAtom
/*4376*/ );
/*4378*/ 
/*4379*/ UINT
/*4380*/ typ
/*4381*/ SetHandleCount(
/*4382*/ typ typ typ typ typ UINT uNumber
/*4383*/ );
/*4385*/ 
/*4386*/ DWORD
/*4387*/ typ
/*4388*/ GetLogicalDrives(
/*4389*/ void
/*4390*/ );
/*4392*/ 
/*4393*/ BOOL
/*4394*/ typ
/*4395*/ LockFile(
/*4396*/ typ typ typ typ typ HANDLE hFile,
/*4397*/ typ typ typ typ typ DWORD dwFileOffsetLow,
/*4398*/ typ typ typ typ typ DWORD dwFileOffsetHigh,
/*4399*/ typ typ typ typ typ DWORD nNumberOfBytesToLockLow,
/*4400*/ typ typ typ typ typ DWORD nNumberOfBytesToLockHigh
/*4401*/ );
/*4403*/ 
/*4404*/ BOOL
/*4405*/ typ
/*4406*/ UnlockFile(
/*4407*/ typ typ typ typ typ HANDLE hFile,
/*4408*/ typ typ typ typ typ DWORD dwFileOffsetLow,
/*4409*/ typ typ typ typ typ DWORD dwFileOffsetHigh,
/*4410*/ typ typ typ typ typ DWORD nNumberOfBytesToUnlockLow,
/*4411*/ typ typ typ typ typ DWORD nNumberOfBytesToUnlockHigh
/*4412*/ );
/*4414*/ 
/*4415*/ BOOL
/*4416*/ typ
/*4417*/ LockFileEx(
/*4418*/ typ typ typ typ typ HANDLE hFile,
/*4419*/ typ typ typ typ typ DWORD dwFlags,
/*4420*/ typ typ DWORD dwReserved,
/*4421*/ typ typ typ typ typ DWORD nNumberOfBytesToLockLow,
/*4422*/ typ typ typ typ typ DWORD nNumberOfBytesToLockHigh,
/*4423*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*4424*/ );
/*4429*/ 
/*4430*/ BOOL
/*4431*/ typ
/*4432*/ UnlockFileEx(
/*4433*/ typ typ typ typ typ HANDLE hFile,
/*4434*/ typ typ DWORD dwReserved,
/*4435*/ typ typ typ typ typ DWORD nNumberOfBytesToUnlockLow,
/*4436*/ typ typ typ typ typ DWORD nNumberOfBytesToUnlockHigh,
/*4437*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*4438*/ );
/*4440*/ typedef struct _BY_HANDLE_FILE_INFORMATION{
/*4441*/ DWORD dwFileAttributes;
/*4442*/ FILETIME ftCreationTime;
/*4443*/ FILETIME ftLastAccessTime;
/*4444*/ FILETIME ftLastWriteTime;
/*4445*/ DWORD dwVolumeSerialNumber;
/*4446*/ DWORD nFileSizeHigh;
/*4447*/ DWORD nFileSizeLow;
/*4448*/ DWORD nNumberOfLinks;
/*4449*/ DWORD nFileIndexHigh;
/*4450*/ DWORD nFileIndexLow;
/*4451*/ }BY_HANDLE_FILE_INFORMATION,*PBY_HANDLE_FILE_INFORMATION,*LPBY_HANDLE_FILE_INFORMATION;
/*4453*/ 
/*4454*/ BOOL
/*4455*/ typ
/*4456*/ GetFileInformationByHandle(
/*4457*/ typ typ typ typ typ HANDLE hFile,
/*4458*/ typ typ typ typ typ LPBY_HANDLE_FILE_INFORMATION lpFileInformation
/*4459*/ );
/*4461*/ 
/*4462*/ DWORD
/*4463*/ typ
/*4464*/ GetFileType(
/*4465*/ typ typ typ typ typ HANDLE hFile
/*4466*/ );
/*4468*/ 
/*4469*/ DWORD
/*4470*/ typ
/*4471*/ GetFileSize(
/*4472*/ typ typ typ typ typ HANDLE hFile,
/*4473*/ typ typ typ typ typ typ typ LPDWORD lpFileSizeHigh
/*4474*/ );
/*4476*/ 
/*4477*/ BOOL
/*4478*/ typ
/*4479*/ GetFileSizeEx(
/*4480*/ typ typ typ typ typ HANDLE hFile,
/*4481*/ typ typ typ typ typ PLARGE_INTEGER lpFileSize
/*4482*/ );
/*4485*/ 
/*4486*/ HANDLE
/*4487*/ typ
/*4488*/ GetStdHandle(
/*4489*/ typ typ typ typ typ DWORD nStdHandle
/*4490*/ );
/*4492*/ 
/*4493*/ BOOL
/*4494*/ typ
/*4495*/ SetStdHandle(
/*4496*/ typ typ typ typ typ DWORD nStdHandle,
/*4497*/ typ typ typ typ typ HANDLE hHandle
/*4498*/ );
/*4513*/ 
/*4514*/ BOOL
/*4515*/ typ
/*4516*/ WriteFile(
/*4517*/ typ typ typ typ typ HANDLE hFile,
/*4518*/ typ typ typ typ typ typ typ typ typ LPCVOID lpBuffer,
/*4519*/ typ typ typ typ typ DWORD nNumberOfBytesToWrite,
/*4520*/ typ typ typ typ typ typ typ LPDWORD lpNumberOfBytesWritten,
/*4521*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*4522*/ );
/*4524*/ 
/*4525*/ BOOL
/*4526*/ typ
/*4527*/ ReadFile(
/*4528*/ typ typ typ typ typ HANDLE hFile,
/*4529*/ typ typ typ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*4530*/ typ typ typ typ typ DWORD nNumberOfBytesToRead,
/*4531*/ typ typ typ typ typ typ typ LPDWORD lpNumberOfBytesRead,
/*4532*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*4533*/ );
/*4535*/ 
/*4536*/ BOOL
/*4537*/ typ
/*4538*/ FlushFileBuffers(
/*4539*/ typ typ typ typ typ HANDLE hFile
/*4540*/ );
/*4542*/ 
/*4543*/ BOOL
/*4544*/ typ
/*4545*/ DeviceIoControl(
/*4546*/ typ typ typ typ typ HANDLE hDevice,
/*4547*/ typ typ typ typ typ DWORD dwIoControlCode,
/*4548*/ typ typ typ typ typ typ typ typ typ LPVOID lpInBuffer,
/*4549*/ typ typ typ typ typ DWORD nInBufferSize,
/*4550*/ typ typ typ typ typ typ typ typ typ LPVOID lpOutBuffer,
/*4551*/ typ typ typ typ typ DWORD nOutBufferSize,
/*4552*/ typ typ typ typ typ typ typ LPDWORD lpBytesReturned,
/*4553*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*4554*/ );
/*4556*/ 
/*4557*/ BOOL
/*4558*/ typ
/*4559*/ RequestDeviceWakeup(
/*4560*/ typ typ typ typ typ HANDLE hDevice
/*4561*/ );
/*4563*/ 
/*4564*/ BOOL
/*4565*/ typ
/*4566*/ CancelDeviceWakeupRequest(
/*4567*/ typ typ typ typ typ HANDLE hDevice
/*4568*/ );
/*4570*/ 
/*4571*/ BOOL
/*4572*/ typ
/*4573*/ GetDevicePowerState(
/*4574*/ typ typ typ typ typ HANDLE hDevice,
/*4575*/ typ typ typ typ typ BOOL*pfOn
/*4576*/ );
/*4578*/ 
/*4579*/ BOOL
/*4580*/ typ
/*4581*/ SetMessageWaitingIndicator(
/*4582*/ typ typ typ typ typ HANDLE hMsgIndicator,
/*4583*/ typ typ typ typ typ ULONG ulMsgCount
/*4584*/ );
/*4586*/ 
/*4587*/ BOOL
/*4588*/ typ
/*4589*/ SetEndOfFile(
/*4590*/ typ typ typ typ typ HANDLE hFile
/*4591*/ );
/*4593*/ 
/*4594*/ DWORD
/*4595*/ typ
/*4596*/ SetFilePointer(
/*4597*/ typ typ typ typ typ HANDLE hFile,
/*4598*/ typ typ typ typ typ LONG lDistanceToMove,
/*4599*/ typ typ typ typ typ typ typ PLONG lpDistanceToMoveHigh,
/*4600*/ typ typ typ typ typ DWORD dwMoveMethod
/*4601*/ );
/*4603*/ 
/*4604*/ BOOL
/*4605*/ typ
/*4606*/ SetFilePointerEx(
/*4607*/ typ typ typ typ typ HANDLE hFile,
/*4608*/ typ typ typ typ typ LARGE_INTEGER liDistanceToMove,
/*4609*/ typ typ typ typ typ typ typ PLARGE_INTEGER lpNewFilePointer,
/*4610*/ typ typ typ typ typ DWORD dwMoveMethod
/*4611*/ );
/*4613*/ 
/*4614*/ BOOL
/*4615*/ typ
/*4616*/ FindClose(
/*4617*/ typ typ typ typ typ HANDLE hFindFile
/*4618*/ );
/*4620*/ 
/*4621*/ BOOL
/*4622*/ typ
/*4623*/ GetFileTime(
/*4624*/ typ typ typ typ typ HANDLE hFile,
/*4625*/ typ typ typ typ typ typ typ LPFILETIME lpCreationTime,
/*4626*/ typ typ typ typ typ typ typ LPFILETIME lpLastAccessTime,
/*4627*/ typ typ typ typ typ typ typ LPFILETIME lpLastWriteTime
/*4628*/ );
/*4630*/ 
/*4631*/ BOOL
/*4632*/ typ
/*4633*/ SetFileTime(
/*4634*/ typ typ typ typ typ HANDLE hFile,
/*4635*/ typ typ typ typ typ typ typ const FILETIME*lpCreationTime,
/*4636*/ typ typ typ typ typ typ typ const FILETIME*lpLastAccessTime,
/*4637*/ typ typ typ typ typ typ typ const FILETIME*lpLastWriteTime
/*4638*/ );
/*4654*/ 
/*4655*/ BOOL
/*4656*/ typ
/*4657*/ SetFileShortNameA(
/*4658*/ typ typ typ typ typ HANDLE hFile,
/*4659*/ typ typ typ typ typ LPCSTR lpShortName
/*4660*/ );
/*4661*/ 
/*4662*/ BOOL
/*4663*/ typ
/*4664*/ SetFileShortNameW(
/*4665*/ typ typ typ typ typ HANDLE hFile,
/*4666*/ typ typ typ typ typ LPCWSTR lpShortName
/*4667*/ );
/*4674*/ 
/*4675*/ BOOL
/*4676*/ typ
/*4677*/ CloseHandle(
/*4678*/ typ typ typ typ typ HANDLE hObject
/*4679*/ );
/*4681*/ 
/*4682*/ BOOL
/*4683*/ typ
/*4684*/ DuplicateHandle(
/*4685*/ typ typ typ typ typ HANDLE hSourceProcessHandle,
/*4686*/ typ typ typ typ typ HANDLE hSourceHandle,
/*4687*/ typ typ typ typ typ HANDLE hTargetProcessHandle,
/*4688*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPHANDLE lpTargetHandle,
/*4689*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*4690*/ typ typ typ typ typ BOOL bInheritHandle,
/*4691*/ typ typ typ typ typ DWORD dwOptions
/*4692*/ );
/*4694*/ 
/*4695*/ BOOL
/*4696*/ typ
/*4697*/ GetHandleInformation(
/*4698*/ typ typ typ typ typ HANDLE hObject,
/*4699*/ typ typ typ typ typ LPDWORD lpdwFlags
/*4700*/ );
/*4702*/ 
/*4703*/ BOOL
/*4704*/ typ
/*4705*/ SetHandleInformation(
/*4706*/ typ typ typ typ typ HANDLE hObject,
/*4707*/ typ typ typ typ typ DWORD dwMask,
/*4708*/ typ typ typ typ typ DWORD dwFlags
/*4709*/ );
/*4716*/ 
/*4717*/ DWORD
/*4718*/ typ
/*4719*/ LoadModule(
/*4720*/ typ typ typ typ typ LPCSTR lpModuleName,
/*4721*/ typ typ typ typ typ LPVOID lpParameterBlock
/*4722*/ );
/*4725*/ 
/*4726*/ UINT
/*4727*/ typ
/*4728*/ WinExec(
/*4729*/ typ typ typ typ typ LPCSTR lpCmdLine,
/*4730*/ typ typ typ typ typ UINT uCmdShow
/*4731*/ );
/*4733*/ 
/*4734*/ BOOL
/*4735*/ typ
/*4736*/ ClearCommBreak(
/*4737*/ typ typ typ typ typ HANDLE hFile
/*4738*/ );
/*4740*/ 
/*4741*/ BOOL
/*4742*/ typ
/*4743*/ ClearCommError(
/*4744*/ typ typ typ typ typ HANDLE hFile,
/*4745*/ typ typ typ typ typ typ typ LPDWORD lpErrors,
/*4746*/ typ typ typ typ typ typ typ LPCOMSTAT lpStat
/*4747*/ );
/*4749*/ 
/*4750*/ BOOL
/*4751*/ typ
/*4752*/ SetupComm(
/*4753*/ typ typ typ typ typ HANDLE hFile,
/*4754*/ typ typ typ typ typ DWORD dwInQueue,
/*4755*/ typ typ typ typ typ DWORD dwOutQueue
/*4756*/ );
/*4758*/ 
/*4759*/ BOOL
/*4760*/ typ
/*4761*/ EscapeCommFunction(
/*4762*/ typ typ typ typ typ HANDLE hFile,
/*4763*/ typ typ typ typ typ DWORD dwFunc
/*4764*/ );
/*4766*/ 
/*4767*/ typ
/*4768*/ BOOL
/*4769*/ typ
/*4770*/ GetCommConfig(
/*4771*/ typ typ typ typ typ HANDLE hCommDev,
/*4772*/ typ typ typ typ typ typ typ LPCOMMCONFIG lpCC,
/*4773*/ typ typ typ typ typ LPDWORD lpdwSize
/*4774*/ );
/*4776*/ 
/*4777*/ BOOL
/*4778*/ typ
/*4779*/ GetCommMask(
/*4780*/ typ typ typ typ typ HANDLE hFile,
/*4781*/ typ typ typ typ typ LPDWORD lpEvtMask
/*4782*/ );
/*4784*/ 
/*4785*/ BOOL
/*4786*/ typ
/*4787*/ GetCommProperties(
/*4788*/ typ typ typ typ typ HANDLE hFile,
/*4789*/ typ typ typ typ typ LPCOMMPROP lpCommProp
/*4790*/ );
/*4792*/ 
/*4793*/ BOOL
/*4794*/ typ
/*4795*/ GetCommModemStatus(
/*4796*/ typ typ typ typ typ HANDLE hFile,
/*4797*/ typ typ typ typ typ LPDWORD lpModemStat
/*4798*/ );
/*4800*/ 
/*4801*/ BOOL
/*4802*/ typ
/*4803*/ GetCommState(
/*4804*/ typ typ typ typ typ HANDLE hFile,
/*4805*/ typ typ typ typ typ LPDCB lpDCB
/*4806*/ );
/*4808*/ 
/*4809*/ BOOL
/*4810*/ typ
/*4811*/ GetCommTimeouts(
/*4812*/ typ typ typ typ typ HANDLE hFile,
/*4813*/ typ typ typ typ typ LPCOMMTIMEOUTS lpCommTimeouts
/*4814*/ );
/*4816*/ 
/*4817*/ BOOL
/*4818*/ typ
/*4819*/ PurgeComm(
/*4820*/ typ typ typ typ typ HANDLE hFile,
/*4821*/ typ typ typ typ typ DWORD dwFlags
/*4822*/ );
/*4824*/ 
/*4825*/ BOOL
/*4826*/ typ
/*4827*/ SetCommBreak(
/*4828*/ typ typ typ typ typ HANDLE hFile
/*4829*/ );
/*4831*/ 
/*4832*/ BOOL
/*4833*/ typ
/*4834*/ SetCommConfig(
/*4835*/ typ typ typ typ typ HANDLE hCommDev,
/*4836*/ typ typ typ typ typ typ typ LPCOMMCONFIG lpCC,
/*4837*/ typ typ typ typ typ DWORD dwSize
/*4838*/ );
/*4840*/ 
/*4841*/ BOOL
/*4842*/ typ
/*4843*/ SetCommMask(
/*4844*/ typ typ typ typ typ HANDLE hFile,
/*4845*/ typ typ typ typ typ DWORD dwEvtMask
/*4846*/ );
/*4848*/ 
/*4849*/ BOOL
/*4850*/ typ
/*4851*/ SetCommState(
/*4852*/ typ typ typ typ typ HANDLE hFile,
/*4853*/ typ typ typ typ typ LPDCB lpDCB
/*4854*/ );
/*4856*/ 
/*4857*/ BOOL
/*4858*/ typ
/*4859*/ SetCommTimeouts(
/*4860*/ typ typ typ typ typ HANDLE hFile,
/*4861*/ typ typ typ typ typ LPCOMMTIMEOUTS lpCommTimeouts
/*4862*/ );
/*4864*/ 
/*4865*/ BOOL
/*4866*/ typ
/*4867*/ TransmitCommChar(
/*4868*/ typ typ typ typ typ HANDLE hFile,
/*4869*/ typ typ typ typ typ char cChar
/*4870*/ );
/*4872*/ 
/*4873*/ BOOL
/*4874*/ typ
/*4875*/ WaitCommEvent(
/*4876*/ typ typ typ typ typ HANDLE hFile,
/*4877*/ typ typ typ typ typ LPDWORD lpEvtMask,
/*4878*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*4879*/ );
/*4882*/ 
/*4883*/ DWORD
/*4884*/ typ
/*4885*/ SetTapePosition(
/*4886*/ typ typ typ typ typ HANDLE hDevice,
/*4887*/ typ typ typ typ typ DWORD dwPositionMethod,
/*4888*/ typ typ typ typ typ DWORD dwPartition,
/*4889*/ typ typ typ typ typ DWORD dwOffsetLow,
/*4890*/ typ typ typ typ typ DWORD dwOffsetHigh,
/*4891*/ typ typ typ typ typ BOOL bImmediate
/*4892*/ );
/*4894*/ 
/*4895*/ DWORD
/*4896*/ typ
/*4897*/ GetTapePosition(
/*4898*/ typ typ typ typ typ HANDLE hDevice,
/*4899*/ typ typ typ typ typ DWORD dwPositionType,
/*4900*/ typ typ typ typ typ LPDWORD lpdwPartition,
/*4901*/ typ typ typ typ typ LPDWORD lpdwOffsetLow,
/*4902*/ typ typ typ typ typ LPDWORD lpdwOffsetHigh
/*4903*/ );
/*4905*/ 
/*4906*/ DWORD
/*4907*/ typ
/*4908*/ PrepareTape(
/*4909*/ typ typ typ typ typ HANDLE hDevice,
/*4910*/ typ typ typ typ typ DWORD dwOperation,
/*4911*/ typ typ typ typ typ BOOL bImmediate
/*4912*/ );
/*4914*/ 
/*4915*/ DWORD
/*4916*/ typ
/*4917*/ EraseTape(
/*4918*/ typ typ typ typ typ HANDLE hDevice,
/*4919*/ typ typ typ typ typ DWORD dwEraseType,
/*4920*/ typ typ typ typ typ BOOL bImmediate
/*4921*/ );
/*4923*/ 
/*4924*/ DWORD
/*4925*/ typ
/*4926*/ CreateTapePartition(
/*4927*/ typ typ typ typ typ HANDLE hDevice,
/*4928*/ typ typ typ typ typ DWORD dwPartitionMethod,
/*4929*/ typ typ typ typ typ DWORD dwCount,
/*4930*/ typ typ typ typ typ DWORD dwSize
/*4931*/ );
/*4933*/ 
/*4934*/ DWORD
/*4935*/ typ
/*4936*/ WriteTapemark(
/*4937*/ typ typ typ typ typ HANDLE hDevice,
/*4938*/ typ typ typ typ typ DWORD dwTapemarkType,
/*4939*/ typ typ typ typ typ DWORD dwTapemarkCount,
/*4940*/ typ typ typ typ typ BOOL bImmediate
/*4941*/ );
/*4943*/ 
/*4944*/ DWORD
/*4945*/ typ
/*4946*/ GetTapeStatus(
/*4947*/ typ typ typ typ typ HANDLE hDevice
/*4948*/ );
/*4950*/ 
/*4951*/ DWORD
/*4952*/ typ
/*4953*/ GetTapeParameters(
/*4954*/ typ typ typ typ typ HANDLE hDevice,
/*4955*/ typ typ typ typ typ DWORD dwOperation,
/*4956*/ typ typ typ typ typ LPDWORD lpdwSize,
/*4957*/ typ typ typ typ typ LPVOID lpTapeInformation
/*4958*/ );
/*4963*/ 
/*4964*/ DWORD
/*4965*/ typ
/*4966*/ SetTapeParameters(
/*4967*/ typ typ typ typ typ HANDLE hDevice,
/*4968*/ typ typ typ typ typ DWORD dwOperation,
/*4969*/ typ typ typ typ typ LPVOID lpTapeInformation
/*4970*/ );
/*4975*/ 
/*4976*/ BOOL
/*4977*/ typ
/*4978*/ Beep(
/*4979*/ typ typ typ typ typ DWORD dwFreq,
/*4980*/ typ typ typ typ typ DWORD dwDuration
/*4981*/ );
/*4983*/ 
/*4984*/ int
/*4985*/ typ
/*4986*/ MulDiv(
/*4987*/ typ typ typ typ typ int nNumber,
/*4988*/ typ typ typ typ typ int nNumerator,
/*4989*/ typ typ typ typ typ int nDenominator
/*4990*/ );
/*4992*/ 
/*4993*/ void
/*4994*/ typ
/*4995*/ GetSystemTime(
/*4996*/ typ typ typ typ typ LPSYSTEMTIME lpSystemTime
/*4997*/ );
/*4999*/ 
/*5000*/ void
/*5001*/ typ
/*5002*/ GetSystemTimeAsFileTime(
/*5003*/ typ typ typ typ typ LPFILETIME lpSystemTimeAsFileTime
/*5004*/ );
/*5006*/ 
/*5007*/ BOOL
/*5008*/ typ
/*5009*/ SetSystemTime(
/*5010*/ typ typ typ typ typ const SYSTEMTIME*lpSystemTime
/*5011*/ );
/*5013*/ 
/*5014*/ void
/*5015*/ typ
/*5016*/ GetLocalTime(
/*5017*/ typ typ typ typ typ LPSYSTEMTIME lpSystemTime
/*5018*/ );
/*5020*/ 
/*5021*/ BOOL
/*5022*/ typ
/*5023*/ SetLocalTime(
/*5024*/ typ typ typ typ typ const SYSTEMTIME*lpSystemTime
/*5025*/ );
/*5027*/ 
/*5028*/ void
/*5029*/ typ
/*5030*/ GetSystemInfo(
/*5031*/ typ typ typ typ typ LPSYSTEM_INFO lpSystemInfo
/*5032*/ );
/*5034*/ typedef enum _DEP_SYSTEM_POLICY_TYPE{
/*5035*/ DEPPolicyAlwaysOff=0,
/*5036*/ DEPPolicyAlwaysOn,
/*5037*/ DEPPolicyOptIn,
/*5038*/ DEPPolicyOptOut,
/*5039*/ DEPTotalPolicyCount
/*5040*/ }DEP_SYSTEM_POLICY_TYPE;
/*5042*/ 
/*5043*/ DEP_SYSTEM_POLICY_TYPE
/*5044*/ typ
/*5045*/ GetSystemDEPPolicy(
/*5046*/ void
/*5047*/ );
/*5107*/ 
/*5108*/ BOOL
/*5109*/ typ
/*5110*/ IsProcessorFeaturePresent(
/*5111*/ typ typ typ typ typ DWORD ProcessorFeature
/*5112*/ );
/*5114*/ typedef struct _TIME_ZONE_INFORMATION{
/*5115*/ LONG Bias;
/*5116*/ WCHAR StandardName[32];
/*5117*/ SYSTEMTIME StandardDate;
/*5118*/ LONG StandardBias;
/*5119*/ WCHAR DaylightName[32];
/*5120*/ SYSTEMTIME DaylightDate;
/*5121*/ LONG DaylightBias;
/*5122*/ }TIME_ZONE_INFORMATION,*PTIME_ZONE_INFORMATION,*LPTIME_ZONE_INFORMATION;
/*5124*/ typedef struct _TIME_DYNAMIC_ZONE_INFORMATION{
/*5125*/ LONG Bias;
/*5126*/ WCHAR StandardName[32];
/*5127*/ SYSTEMTIME StandardDate;
/*5128*/ LONG StandardBias;
/*5129*/ WCHAR DaylightName[32];
/*5130*/ SYSTEMTIME DaylightDate;
/*5131*/ LONG DaylightBias;
/*5132*/ WCHAR TimeZoneKeyName[128];
/*5133*/ BOOLEAN DynamicDaylightTimeDisabled;
/*5134*/ }DYNAMIC_TIME_ZONE_INFORMATION,*PDYNAMIC_TIME_ZONE_INFORMATION;
/*5137*/ 
/*5138*/ BOOL
/*5139*/ typ
/*5140*/ SystemTimeToTzSpecificLocalTime(
/*5141*/ typ typ typ typ typ typ typ const TIME_ZONE_INFORMATION*lpTimeZoneInformation,
/*5142*/ typ typ typ typ typ const SYSTEMTIME*lpUniversalTime,
/*5143*/ typ typ typ typ typ LPSYSTEMTIME lpLocalTime
/*5144*/ );
/*5146*/ 
/*5147*/ BOOL
/*5148*/ typ
/*5149*/ TzSpecificLocalTimeToSystemTime(
/*5150*/ typ typ typ typ typ typ typ const TIME_ZONE_INFORMATION*lpTimeZoneInformation,
/*5151*/ typ typ typ typ typ const SYSTEMTIME*lpLocalTime,
/*5152*/ typ typ typ typ typ LPSYSTEMTIME lpUniversalTime
/*5153*/ );
/*5155*/ BOOL
/*5156*/ typ
/*5157*/ GetTimeZoneInformationForYear(
/*5158*/ typ typ typ typ typ USHORT wYear,
/*5159*/ typ typ typ typ typ typ typ PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
/*5160*/ typ typ typ typ typ LPTIME_ZONE_INFORMATION ptzi
/*5161*/ );
/*5163*/ 
/*5164*/ DWORD
/*5165*/ typ
/*5166*/ GetTimeZoneInformation(
/*5167*/ typ typ typ typ typ LPTIME_ZONE_INFORMATION lpTimeZoneInformation
/*5168*/ );
/*5170*/ 
/*5171*/ BOOL
/*5172*/ typ
/*5173*/ SetTimeZoneInformation(
/*5174*/ typ typ typ typ typ const TIME_ZONE_INFORMATION*lpTimeZoneInformation
/*5175*/ );
/*5177*/ 
/*5178*/ DWORD
/*5179*/ typ
/*5180*/ GetDynamicTimeZoneInformation(
/*5181*/ typ typ typ typ typ PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
/*5182*/ );
/*5184*/ 
/*5185*/ BOOL
/*5186*/ typ
/*5187*/ SetDynamicTimeZoneInformation(
/*5188*/ typ typ typ typ typ const DYNAMIC_TIME_ZONE_INFORMATION*lpTimeZoneInformation
/*5189*/ );
/*5197*/ 
/*5198*/ BOOL
/*5199*/ typ
/*5200*/ SystemTimeToFileTime(
/*5201*/ typ typ typ typ typ const SYSTEMTIME*lpSystemTime,
/*5202*/ typ typ typ typ typ LPFILETIME lpFileTime
/*5203*/ );
/*5205*/ 
/*5206*/ BOOL
/*5207*/ typ
/*5208*/ FileTimeToLocalFileTime(
/*5209*/ typ typ typ typ typ const FILETIME*lpFileTime,
/*5210*/ typ typ typ typ typ LPFILETIME lpLocalFileTime
/*5211*/ );
/*5213*/ 
/*5214*/ BOOL
/*5215*/ typ
/*5216*/ LocalFileTimeToFileTime(
/*5217*/ typ typ typ typ typ const FILETIME*lpLocalFileTime,
/*5218*/ typ typ typ typ typ LPFILETIME lpFileTime
/*5219*/ );
/*5221*/ 
/*5222*/ BOOL
/*5223*/ typ
/*5224*/ FileTimeToSystemTime(
/*5225*/ typ typ typ typ typ const FILETIME*lpFileTime,
/*5226*/ typ typ typ typ typ LPSYSTEMTIME lpSystemTime
/*5227*/ );
/*5229*/ 
/*5230*/ LONG
/*5231*/ typ
/*5232*/ CompareFileTime(
/*5233*/ typ typ typ typ typ const FILETIME*lpFileTime1,
/*5234*/ typ typ typ typ typ const FILETIME*lpFileTime2
/*5235*/ );
/*5237*/ 
/*5238*/ BOOL
/*5239*/ typ
/*5240*/ FileTimeToDosDateTime(
/*5241*/ typ typ typ typ typ const FILETIME*lpFileTime,
/*5242*/ typ typ typ typ typ LPWORD lpFatDate,
/*5243*/ typ typ typ typ typ LPWORD lpFatTime
/*5244*/ );
/*5246*/ 
/*5247*/ BOOL
/*5248*/ typ
/*5249*/ DosDateTimeToFileTime(
/*5250*/ typ typ typ typ typ WORD wFatDate,
/*5251*/ typ typ typ typ typ WORD wFatTime,
/*5252*/ typ typ typ typ typ LPFILETIME lpFileTime
/*5253*/ );
/*5255*/ 
/*5256*/ DWORD
/*5257*/ typ
/*5258*/ GetTickCount(
/*5259*/ void
/*5260*/ );
/*5273*/ 
/*5274*/ BOOL
/*5275*/ typ
/*5276*/ SetSystemTimeAdjustment(
/*5277*/ typ typ typ typ typ DWORD dwTimeAdjustment,
/*5278*/ typ typ typ typ typ BOOL bTimeAdjustmentDisabled
/*5279*/ );
/*5281*/ 
/*5282*/ BOOL
/*5283*/ typ
/*5284*/ GetSystemTimeAdjustment(
/*5285*/ typ typ typ typ typ PDWORD lpTimeAdjustment,
/*5286*/ typ typ typ typ typ PDWORD lpTimeIncrement,
/*5287*/ typ typ typ typ typ PBOOL lpTimeAdjustmentDisabled
/*5288*/ );
/*5291*/ 
/*5292*/ DWORD
/*5293*/ typ
/*5294*/ FormatMessageA(
/*5295*/ typ typ typ typ typ DWORD dwFlags,
/*5296*/ typ typ typ typ typ typ typ LPCVOID lpSource,
/*5297*/ typ typ typ typ typ DWORD dwMessageId,
/*5298*/ typ typ typ typ typ DWORD dwLanguageId,
/*5299*/ typ typ typ typ typ LPSTR lpBuffer,
/*5300*/ typ typ typ typ typ DWORD nSize,
/*5301*/ typ typ typ typ typ typ typ va_list*Arguments
/*5302*/ );
/*5303*/ 
/*5304*/ DWORD
/*5305*/ typ
/*5306*/ FormatMessageW(
/*5307*/ typ typ typ typ typ DWORD dwFlags,
/*5308*/ typ typ typ typ typ typ typ LPCVOID lpSource,
/*5309*/ typ typ typ typ typ DWORD dwMessageId,
/*5310*/ typ typ typ typ typ DWORD dwLanguageId,
/*5311*/ typ typ typ typ typ LPWSTR lpBuffer,
/*5312*/ typ typ typ typ typ DWORD nSize,
/*5313*/ typ typ typ typ typ typ typ va_list*Arguments
/*5314*/ );
/*5362*/ 
/*5363*/ BOOL
/*5364*/ typ
/*5365*/ CreatePipe(
/*5366*/ typ typ typ typ typ typ typ PHANDLE hReadPipe,
/*5367*/ typ typ typ typ typ typ typ PHANDLE hWritePipe,
/*5368*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpPipeAttributes,
/*5369*/ typ typ typ typ typ DWORD nSize
/*5370*/ );
/*5372*/ 
/*5373*/ BOOL
/*5374*/ typ
/*5375*/ ConnectNamedPipe(
/*5376*/ typ typ typ typ typ HANDLE hNamedPipe,
/*5377*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*5378*/ );
/*5380*/ 
/*5381*/ BOOL
/*5382*/ typ
/*5383*/ DisconnectNamedPipe(
/*5384*/ typ typ typ typ typ HANDLE hNamedPipe
/*5385*/ );
/*5387*/ 
/*5388*/ BOOL
/*5389*/ typ
/*5390*/ SetNamedPipeHandleState(
/*5391*/ typ typ typ typ typ HANDLE hNamedPipe,
/*5392*/ typ typ typ typ typ typ typ LPDWORD lpMode,
/*5393*/ typ typ typ typ typ typ typ LPDWORD lpMaxCollectionCount,
/*5394*/ typ typ typ typ typ typ typ LPDWORD lpCollectDataTimeout
/*5395*/ );
/*5397*/ 
/*5398*/ BOOL
/*5399*/ typ
/*5400*/ GetNamedPipeInfo(
/*5401*/ typ typ typ typ typ HANDLE hNamedPipe,
/*5402*/ typ typ typ typ typ typ typ LPDWORD lpFlags,
/*5403*/ typ typ typ typ typ typ typ LPDWORD lpOutBufferSize,
/*5404*/ typ typ typ typ typ typ typ LPDWORD lpInBufferSize,
/*5405*/ typ typ typ typ typ typ typ LPDWORD lpMaxInstances
/*5406*/ );
/*5408*/ 
/*5409*/ BOOL
/*5410*/ typ
/*5411*/ PeekNamedPipe(
/*5412*/ typ typ typ typ typ HANDLE hNamedPipe,
/*5413*/ typ typ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*5414*/ typ typ typ typ typ DWORD nBufferSize,
/*5415*/ typ typ typ typ typ typ typ LPDWORD lpBytesRead,
/*5416*/ typ typ typ typ typ typ typ LPDWORD lpTotalBytesAvail,
/*5417*/ typ typ typ typ typ typ typ LPDWORD lpBytesLeftThisMessage
/*5418*/ );
/*5420*/ 
/*5421*/ BOOL
/*5422*/ typ
/*5423*/ TransactNamedPipe(
/*5424*/ typ typ typ typ typ HANDLE hNamedPipe,
/*5425*/ typ typ typ typ typ typ typ typ typ LPVOID lpInBuffer,
/*5426*/ typ typ typ typ typ DWORD nInBufferSize,
/*5427*/ typ typ typ typ typ typ typ typ typ LPVOID lpOutBuffer,
/*5428*/ typ typ typ typ typ DWORD nOutBufferSize,
/*5429*/ typ typ typ typ typ LPDWORD lpBytesRead,
/*5430*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*5431*/ );
/*5433*/ 
/*5434*/ typ typ typ typ typ
/*5435*/ HANDLE
/*5436*/ typ
/*5437*/ CreateMailslotA(
/*5438*/ typ typ typ typ typ LPCSTR lpName,
/*5439*/ typ typ typ typ typ DWORD nMaxMessageSize,
/*5440*/ typ typ typ typ typ DWORD lReadTimeout,
/*5441*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*5442*/ );
/*5443*/ 
/*5444*/ typ typ typ typ typ
/*5445*/ HANDLE
/*5446*/ typ
/*5447*/ CreateMailslotW(
/*5448*/ typ typ typ typ typ LPCWSTR lpName,
/*5449*/ typ typ typ typ typ DWORD nMaxMessageSize,
/*5450*/ typ typ typ typ typ DWORD lReadTimeout,
/*5451*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*5452*/ );
/*5459*/ 
/*5460*/ BOOL
/*5461*/ typ
/*5462*/ GetMailslotInfo(
/*5463*/ typ typ typ typ typ HANDLE hMailslot,
/*5464*/ typ typ typ typ typ typ typ LPDWORD lpMaxMessageSize,
/*5465*/ typ typ typ typ typ typ typ LPDWORD lpNextSize,
/*5466*/ typ typ typ typ typ typ typ LPDWORD lpMessageCount,
/*5467*/ typ typ typ typ typ typ typ LPDWORD lpReadTimeout
/*5468*/ );
/*5470*/ 
/*5471*/ BOOL
/*5472*/ typ
/*5473*/ SetMailslotInfo(
/*5474*/ typ typ typ typ typ HANDLE hMailslot,
/*5475*/ typ typ typ typ typ DWORD lReadTimeout
/*5476*/ );
/*5478*/ 
/*5479*/ typ typ typ typ typ typ typ typ
/*5480*/ LPVOID
/*5481*/ typ
/*5482*/ MapViewOfFile(
/*5483*/ typ typ typ typ typ HANDLE hFileMappingObject,
/*5484*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*5485*/ typ typ typ typ typ DWORD dwFileOffsetHigh,
/*5486*/ typ typ typ typ typ DWORD dwFileOffsetLow,
/*5487*/ typ typ typ typ typ SIZE_T dwNumberOfBytesToMap
/*5488*/ );
/*5490*/ 
/*5491*/ BOOL
/*5492*/ typ
/*5493*/ FlushViewOfFile(
/*5494*/ typ typ typ typ typ LPCVOID lpBaseAddress,
/*5495*/ typ typ typ typ typ SIZE_T dwNumberOfBytesToFlush
/*5496*/ );
/*5498*/ 
/*5499*/ BOOL
/*5500*/ typ
/*5501*/ UnmapViewOfFile(
/*5502*/ typ typ typ typ typ LPCVOID lpBaseAddress
/*5503*/ );
/*5509*/ 
/*5510*/ BOOL
/*5511*/ typ
/*5512*/ EncryptFileA(
/*5513*/ typ typ typ typ typ LPCSTR lpFileName
/*5514*/ );
/*5515*/ 
/*5516*/ BOOL
/*5517*/ typ
/*5518*/ EncryptFileW(
/*5519*/ typ typ typ typ typ LPCWSTR lpFileName
/*5520*/ );
/*5527*/ 
/*5528*/ BOOL
/*5529*/ typ
/*5530*/ DecryptFileA(
/*5531*/ typ typ typ typ typ LPCSTR lpFileName,
/*5532*/ typ typ DWORD dwReserved
/*5533*/ );
/*5534*/ 
/*5535*/ BOOL
/*5536*/ typ
/*5537*/ DecryptFileW(
/*5538*/ typ typ typ typ typ LPCWSTR lpFileName,
/*5539*/ typ typ DWORD dwReserved
/*5540*/ );
/*5562*/ 
/*5563*/ BOOL
/*5564*/ typ
/*5565*/ FileEncryptionStatusA(
/*5566*/ typ typ typ typ typ LPCSTR lpFileName,
/*5567*/ typ typ typ typ typ LPDWORD lpStatus
/*5568*/ );
/*5569*/ 
/*5570*/ BOOL
/*5571*/ typ
/*5572*/ FileEncryptionStatusW(
/*5573*/ typ typ typ typ typ LPCWSTR lpFileName,
/*5574*/ typ typ typ typ typ LPDWORD lpStatus
/*5575*/ );
/*5588*/ typedef
/*5589*/ DWORD
/*5590*/ (typ*PFE_EXPORT_FUNC)(
/*5591*/ typ typ typ typ typ typ typ PBYTE pbData,
/*5592*/ typ typ typ typ typ typ typ PVOID pvCallbackContext,
/*5593*/ typ typ typ typ typ ULONG ulLength
/*5594*/ );
/*5596*/ typedef
/*5597*/ DWORD
/*5598*/ (typ*PFE_IMPORT_FUNC)(
/*5599*/ typ typ typ typ typ typ typ PBYTE pbData,
/*5600*/ typ typ typ typ typ typ typ PVOID pvCallbackContext,
/*5601*/ typ typ typ typ typ PULONG ulLength
/*5602*/ );
/*5615*/ 
/*5616*/ DWORD
/*5617*/ typ
/*5618*/ OpenEncryptedFileRawA(
/*5619*/ typ typ typ typ typ LPCSTR lpFileName,
/*5620*/ typ typ typ typ typ ULONG ulFlags,
/*5621*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*pvContext
/*5622*/ );
/*5623*/ 
/*5624*/ DWORD
/*5625*/ typ
/*5626*/ OpenEncryptedFileRawW(
/*5627*/ typ typ typ typ typ LPCWSTR lpFileName,
/*5628*/ typ typ typ typ typ ULONG ulFlags,
/*5629*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*pvContext
/*5630*/ );
/*5637*/ 
/*5638*/ DWORD
/*5639*/ typ
/*5640*/ ReadEncryptedFileRaw(
/*5641*/ typ typ typ typ typ PFE_EXPORT_FUNC pfExportCallback,
/*5642*/ typ typ typ typ typ typ typ PVOID pvCallbackContext,
/*5643*/ typ typ typ typ typ PVOID pvContext
/*5644*/ );
/*5646*/ 
/*5647*/ DWORD
/*5648*/ typ
/*5649*/ WriteEncryptedFileRaw(
/*5650*/ typ typ typ typ typ PFE_IMPORT_FUNC pfImportCallback,
/*5651*/ typ typ typ typ typ typ typ PVOID pvCallbackContext,
/*5652*/ typ typ typ typ typ PVOID pvContext
/*5653*/ );
/*5655*/ 
/*5656*/ void
/*5657*/ typ
/*5658*/ CloseEncryptedFileRaw(
/*5659*/ typ typ typ typ typ PVOID pvContext
/*5660*/ );
/*5666*/ 
/*5667*/ int
/*5668*/ typ
/*5669*/ lstrcmpA(
/*5670*/ typ typ typ typ typ LPCSTR lpString1,
/*5671*/ typ typ typ typ typ LPCSTR lpString2
/*5672*/ );
/*5673*/ 
/*5674*/ int
/*5675*/ typ
/*5676*/ lstrcmpW(
/*5677*/ typ typ typ typ typ LPCWSTR lpString1,
/*5678*/ typ typ typ typ typ LPCWSTR lpString2
/*5679*/ );
/*5686*/ 
/*5687*/ int
/*5688*/ typ
/*5689*/ lstrcmpiA(
/*5690*/ typ typ typ typ typ LPCSTR lpString1,
/*5691*/ typ typ typ typ typ LPCSTR lpString2
/*5692*/ );
/*5693*/ 
/*5694*/ int
/*5695*/ typ
/*5696*/ lstrcmpiW(
/*5697*/ typ typ typ typ typ LPCWSTR lpString1,
/*5698*/ typ typ typ typ typ LPCWSTR lpString2
/*5699*/ );
/*5706*/ 
/*5707*/ typ typ typ typ typ
/*5708*/ LPSTR
/*5709*/ typ
/*5710*/ lstrcpynA(
/*5711*/ typ typ typ typ typ LPSTR lpString1,
/*5712*/ typ typ typ typ typ LPCSTR lpString2,
/*5713*/ typ typ typ typ typ int iMaxLength
/*5714*/ );
/*5715*/ 
/*5716*/ typ typ typ typ typ
/*5717*/ LPWSTR
/*5718*/ typ
/*5719*/ lstrcpynW(
/*5720*/ typ typ typ typ typ LPWSTR lpString1,
/*5721*/ typ typ typ typ typ LPCWSTR lpString2,
/*5722*/ typ typ typ typ typ int iMaxLength
/*5723*/ );
/*5735*/ 
/*5736*/ typ typ typ typ typ
/*5737*/ LPSTR
/*5738*/ typ
/*5739*/ lstrcpyA(
/*5740*/ typ typ typ typ typ LPSTR lpString1,
/*5741*/ typ typ typ typ typ LPCSTR lpString2
/*5742*/ );
/*5743*/ 
/*5744*/ typ typ typ typ typ
/*5745*/ LPWSTR
/*5746*/ typ
/*5747*/ lstrcpyW(
/*5748*/ typ typ typ typ typ LPWSTR lpString1,
/*5749*/ typ typ typ typ typ LPCWSTR lpString2
/*5750*/ );
/*5757*/ 
/*5758*/ typ typ typ typ typ
/*5759*/ LPSTR
/*5760*/ typ
/*5761*/ lstrcatA(
/*5762*/ typ typ typ typ typ LPSTR lpString1,
/*5763*/ typ typ typ typ typ LPCSTR lpString2
/*5764*/ );
/*5765*/ 
/*5766*/ typ typ typ typ typ
/*5767*/ LPWSTR
/*5768*/ typ
/*5769*/ lstrcatW(
/*5770*/ typ typ typ typ typ LPWSTR lpString1,
/*5771*/ typ typ typ typ typ LPCWSTR lpString2
/*5772*/ );
/*5783*/ 
/*5784*/ int
/*5785*/ typ
/*5786*/ lstrlenA(
/*5787*/ typ typ typ typ typ LPCSTR lpString
/*5788*/ );
/*5789*/ 
/*5790*/ int
/*5791*/ typ
/*5792*/ lstrlenW(
/*5793*/ typ typ typ typ typ LPCWSTR lpString
/*5794*/ );
/*5801*/ 
/*5802*/ HFILE
/*5803*/ typ
/*5804*/ OpenFile(
/*5805*/ typ typ typ typ typ LPCSTR lpFileName,
/*5806*/ typ typ typ typ typ LPOFSTRUCT lpReOpenBuff,
/*5807*/ typ typ typ typ typ UINT uStyle
/*5808*/ );
/*5810*/ 
/*5811*/ HFILE
/*5812*/ typ
/*5813*/ _lopen(
/*5814*/ typ typ typ typ typ LPCSTR lpPathName,
/*5815*/ typ typ typ typ typ int iReadWrite
/*5816*/ );
/*5818*/ 
/*5819*/ HFILE
/*5820*/ typ
/*5821*/ _lcreat(
/*5822*/ typ typ typ typ typ LPCSTR lpPathName,
/*5823*/ typ typ typ typ typ int iAttribute
/*5824*/ );
/*5826*/ 
/*5827*/ UINT
/*5828*/ typ
/*5829*/ _lread(
/*5830*/ typ typ typ typ typ HFILE hFile,
/*5831*/ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*5832*/ typ typ typ typ typ UINT uBytes
/*5833*/ );
/*5835*/ 
/*5836*/ UINT
/*5837*/ typ
/*5838*/ _lwrite(
/*5839*/ typ typ typ typ typ HFILE hFile,
/*5840*/ typ typ typ typ typ typ typ LPCCH lpBuffer,
/*5841*/ typ typ typ typ typ UINT uBytes
/*5842*/ );
/*5844*/ 
/*5845*/ long
/*5846*/ typ
/*5847*/ _hread(
/*5848*/ typ typ typ typ typ HFILE hFile,
/*5849*/ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*5850*/ typ typ typ typ typ long lBytes
/*5851*/ );
/*5853*/ 
/*5854*/ long
/*5855*/ typ
/*5856*/ _hwrite(
/*5857*/ typ typ typ typ typ HFILE hFile,
/*5858*/ typ typ typ typ typ typ typ LPCCH lpBuffer,
/*5859*/ typ typ typ typ typ long lBytes
/*5860*/ );
/*5862*/ 
/*5863*/ HFILE
/*5864*/ typ
/*5865*/ _lclose(
/*5866*/ typ typ typ typ typ HFILE hFile
/*5867*/ );
/*5869*/ 
/*5870*/ LONG
/*5871*/ typ
/*5872*/ _llseek(
/*5873*/ typ typ typ typ typ HFILE hFile,
/*5874*/ typ typ typ typ typ LONG lOffset,
/*5875*/ typ typ typ typ typ int iOrigin
/*5876*/ );
/*5878*/ 
/*5879*/ BOOL
/*5880*/ typ
/*5881*/ IsTextUnicode(
/*5882*/ typ typ typ typ typ typ typ const void*lpv,
/*5883*/ typ typ typ typ typ int iSize,
/*5884*/ typ typ typ typ typ typ typ LPINT lpiResult
/*5885*/ );
/*5889*/ 
/*5890*/ DWORD
/*5891*/ typ
/*5892*/ FlsAlloc(
/*5893*/ typ typ typ typ typ typ typ PFLS_CALLBACK_FUNCTION lpCallback
/*5894*/ );
/*5896*/ 
/*5897*/ PVOID
/*5898*/ typ
/*5899*/ FlsGetValue(
/*5900*/ typ typ typ typ typ DWORD dwFlsIndex
/*5901*/ );
/*5903*/ 
/*5904*/ BOOL
/*5905*/ typ
/*5906*/ FlsSetValue(
/*5907*/ typ typ typ typ typ DWORD dwFlsIndex,
/*5908*/ typ typ typ typ typ typ typ PVOID lpFlsData
/*5909*/ );
/*5911*/ 
/*5912*/ BOOL
/*5913*/ typ
/*5914*/ FlsFree(
/*5915*/ typ typ typ typ typ DWORD dwFlsIndex
/*5916*/ );
/*5920*/ 
/*5921*/ DWORD
/*5922*/ typ
/*5923*/ TlsAlloc(
/*5924*/ void
/*5925*/ );
/*5927*/ 
/*5928*/ LPVOID
/*5929*/ typ
/*5930*/ TlsGetValue(
/*5931*/ typ typ typ typ typ DWORD dwTlsIndex
/*5932*/ );
/*5934*/ 
/*5935*/ BOOL
/*5936*/ typ
/*5937*/ TlsSetValue(
/*5938*/ typ typ typ typ typ DWORD dwTlsIndex,
/*5939*/ typ typ typ typ typ typ typ LPVOID lpTlsValue
/*5940*/ );
/*5942*/ 
/*5943*/ BOOL
/*5944*/ typ
/*5945*/ TlsFree(
/*5946*/ typ typ typ typ typ DWORD dwTlsIndex
/*5947*/ );
/*5949*/ typedef
/*5950*/ void
/*5951*/ (typ*LPOVERLAPPED_COMPLETION_ROUTINE)(
/*5952*/ typ typ typ typ typ DWORD dwErrorCode,
/*5953*/ typ typ typ typ typ DWORD dwNumberOfBytesTransfered,
/*5954*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*5955*/ );
/*5957*/ 
/*5958*/ DWORD
/*5959*/ typ
/*5960*/ SleepEx(
/*5961*/ typ typ typ typ typ DWORD dwMilliseconds,
/*5962*/ typ typ typ typ typ BOOL bAlertable
/*5963*/ );
/*5965*/ 
/*5966*/ DWORD
/*5967*/ typ
/*5968*/ WaitForSingleObjectEx(
/*5969*/ typ typ typ typ typ HANDLE hHandle,
/*5970*/ typ typ typ typ typ DWORD dwMilliseconds,
/*5971*/ typ typ typ typ typ BOOL bAlertable
/*5972*/ );
/*5974*/ 
/*5975*/ DWORD
/*5976*/ typ
/*5977*/ WaitForMultipleObjectsEx(
/*5978*/ typ typ typ typ typ DWORD nCount,
/*5979*/ typ typ typ typ typ typ typ const HANDLE*lpHandles,
/*5980*/ typ typ typ typ typ BOOL bWaitAll,
/*5981*/ typ typ typ typ typ DWORD dwMilliseconds,
/*5982*/ typ typ typ typ typ BOOL bAlertable
/*5983*/ );
/*5997*/ 
/*5998*/ BOOL
/*5999*/ typ
/*6000*/ ReadFileEx(
/*6001*/ typ typ typ typ typ HANDLE hFile,
/*6002*/ typ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*6003*/ typ typ typ typ typ DWORD nNumberOfBytesToRead,
/*6004*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped,
/*6005*/ typ typ typ typ typ typ typ LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
/*6006*/ );
/*6008*/ 
/*6009*/ BOOL
/*6010*/ typ
/*6011*/ WriteFileEx(
/*6012*/ typ typ typ typ typ HANDLE hFile,
/*6013*/ typ typ typ typ typ typ typ typ typ LPCVOID lpBuffer,
/*6014*/ typ typ typ typ typ DWORD nNumberOfBytesToWrite,
/*6015*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped,
/*6016*/ typ typ typ typ typ typ typ LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
/*6017*/ );
/*6019*/ 
/*6020*/ BOOL
/*6021*/ typ
/*6022*/ BackupRead(
/*6023*/ typ typ typ typ typ HANDLE hFile,
/*6024*/ typ typ typ typ typ typ typ LPBYTE lpBuffer,
/*6025*/ typ typ typ typ typ DWORD nNumberOfBytesToRead,
/*6026*/ typ typ typ typ typ LPDWORD lpNumberOfBytesRead,
/*6027*/ typ typ typ typ typ BOOL bAbort,
/*6028*/ typ typ typ typ typ BOOL bProcessSecurity,
/*6029*/ typ typ typ typ typ LPVOID*lpContext
/*6030*/ );
/*6032*/ 
/*6033*/ BOOL
/*6034*/ typ
/*6035*/ BackupSeek(
/*6036*/ typ typ typ typ typ HANDLE hFile,
/*6037*/ typ typ typ typ typ DWORD dwLowBytesToSeek,
/*6038*/ typ typ typ typ typ DWORD dwHighBytesToSeek,
/*6039*/ typ typ typ typ typ LPDWORD lpdwLowByteSeeked,
/*6040*/ typ typ typ typ typ LPDWORD lpdwHighByteSeeked,
/*6041*/ typ typ typ typ typ LPVOID*lpContext
/*6042*/ );
/*6044*/ 
/*6045*/ BOOL
/*6046*/ typ
/*6047*/ BackupWrite(
/*6048*/ typ typ typ typ typ HANDLE hFile,
/*6049*/ typ typ typ typ typ typ typ LPBYTE lpBuffer,
/*6050*/ typ typ typ typ typ DWORD nNumberOfBytesToWrite,
/*6051*/ typ typ typ typ typ LPDWORD lpNumberOfBytesWritten,
/*6052*/ typ typ typ typ typ BOOL bAbort,
/*6053*/ typ typ typ typ typ BOOL bProcessSecurity,
/*6054*/ typ typ typ typ typ LPVOID*lpContext
/*6055*/ );
/*6060*/ typedef struct _WIN32_STREAM_ID{
/*6061*/ DWORD dwStreamId;
/*6062*/ DWORD dwStreamAttributes;
/*6063*/ LARGE_INTEGER Size;
/*6064*/ DWORD dwStreamNameSize;
/*6065*/ WCHAR cStreamName[1];
/*6066*/ }WIN32_STREAM_ID,*LPWIN32_STREAM_ID;
/*6095*/ 
/*6096*/ BOOL
/*6097*/ typ
/*6098*/ ReadFileScatter(
/*6099*/ typ typ typ typ typ HANDLE hFile,
/*6100*/ typ typ typ typ typ FILE_SEGMENT_ELEMENT aSegmentArray[],
/*6101*/ typ typ typ typ typ DWORD nNumberOfBytesToRead,
/*6102*/ typ typ LPDWORD lpReserved,
/*6103*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*6104*/ );
/*6106*/ 
/*6107*/ BOOL
/*6108*/ typ
/*6109*/ WriteFileGather(
/*6110*/ typ typ typ typ typ HANDLE hFile,
/*6111*/ typ typ typ typ typ FILE_SEGMENT_ELEMENT aSegmentArray[],
/*6112*/ typ typ typ typ typ DWORD nNumberOfBytesToWrite,
/*6113*/ typ typ LPDWORD lpReserved,
/*6114*/ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*6115*/ );
/*6136*/ typedef struct _STARTUPINFOA{
/*6137*/ DWORD cb;
/*6138*/ LPSTR lpReserved;
/*6139*/ LPSTR lpDesktop;
/*6140*/ LPSTR lpTitle;
/*6141*/ DWORD dwX;
/*6142*/ DWORD dwY;
/*6143*/ DWORD dwXSize;
/*6144*/ DWORD dwYSize;
/*6145*/ DWORD dwXCountChars;
/*6146*/ DWORD dwYCountChars;
/*6147*/ DWORD dwFillAttribute;
/*6148*/ DWORD dwFlags;
/*6149*/ WORD wShowWindow;
/*6150*/ WORD cbReserved2;
/*6151*/ LPBYTE lpReserved2;
/*6152*/ HANDLE hStdInput;
/*6153*/ HANDLE hStdOutput;
/*6154*/ HANDLE hStdError;
/*6155*/ }STARTUPINFOA,*LPSTARTUPINFOA;
/*6156*/ typedef struct _STARTUPINFOW{
/*6157*/ DWORD cb;
/*6158*/ LPWSTR lpReserved;
/*6159*/ LPWSTR lpDesktop;
/*6160*/ LPWSTR lpTitle;
/*6161*/ DWORD dwX;
/*6162*/ DWORD dwY;
/*6163*/ DWORD dwXSize;
/*6164*/ DWORD dwYSize;
/*6165*/ DWORD dwXCountChars;
/*6166*/ DWORD dwYCountChars;
/*6167*/ DWORD dwFillAttribute;
/*6168*/ DWORD dwFlags;
/*6169*/ WORD wShowWindow;
/*6170*/ WORD cbReserved2;
/*6171*/ LPBYTE lpReserved2;
/*6172*/ HANDLE hStdInput;
/*6173*/ HANDLE hStdOutput;
/*6174*/ HANDLE hStdError;
/*6175*/ }STARTUPINFOW,*LPSTARTUPINFOW;
/*6180*/ typedef STARTUPINFOA STARTUPINFO;
/*6181*/ typedef LPSTARTUPINFOA LPSTARTUPINFO;
/*6184*/ typedef struct _STARTUPINFOEXA{
/*6185*/ STARTUPINFOA StartupInfo;
/*6186*/ struct _PROC_THREAD_ATTRIBUTE_LIST*lpAttributeList;
/*6187*/ }STARTUPINFOEXA,*LPSTARTUPINFOEXA;
/*6188*/ typedef struct _STARTUPINFOEXW{
/*6189*/ STARTUPINFOW StartupInfo;
/*6190*/ struct _PROC_THREAD_ATTRIBUTE_LIST*lpAttributeList;
/*6191*/ }STARTUPINFOEXW,*LPSTARTUPINFOEXW;
/*6196*/ typedef STARTUPINFOEXA STARTUPINFOEX;
/*6197*/ typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;
/*6202*/ typedef struct _WIN32_FIND_DATAA{
/*6203*/ DWORD dwFileAttributes;
/*6204*/ FILETIME ftCreationTime;
/*6205*/ FILETIME ftLastAccessTime;
/*6206*/ FILETIME ftLastWriteTime;
/*6207*/ DWORD nFileSizeHigh;
/*6208*/ DWORD nFileSizeLow;
/*6209*/ DWORD dwReserved0;
/*6210*/ DWORD dwReserved1;
/*6211*/ CHAR cFileName[260];
/*6212*/ CHAR cAlternateFileName[14];
/*6218*/ }WIN32_FIND_DATAA,*PWIN32_FIND_DATAA,*LPWIN32_FIND_DATAA;
/*6219*/ typedef struct _WIN32_FIND_DATAW{
/*6220*/ DWORD dwFileAttributes;
/*6221*/ FILETIME ftCreationTime;
/*6222*/ FILETIME ftLastAccessTime;
/*6223*/ FILETIME ftLastWriteTime;
/*6224*/ DWORD nFileSizeHigh;
/*6225*/ DWORD nFileSizeLow;
/*6226*/ DWORD dwReserved0;
/*6227*/ DWORD dwReserved1;
/*6228*/ WCHAR cFileName[260];
/*6229*/ WCHAR cAlternateFileName[14];
/*6235*/ }WIN32_FIND_DATAW,*PWIN32_FIND_DATAW,*LPWIN32_FIND_DATAW;
/*6241*/ typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
/*6242*/ typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
/*6243*/ typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
/*6246*/ typedef struct _WIN32_FILE_ATTRIBUTE_DATA{
/*6247*/ DWORD dwFileAttributes;
/*6248*/ FILETIME ftCreationTime;
/*6249*/ FILETIME ftLastAccessTime;
/*6250*/ FILETIME ftLastWriteTime;
/*6251*/ DWORD nFileSizeHigh;
/*6252*/ DWORD nFileSizeLow;
/*6253*/ }WIN32_FILE_ATTRIBUTE_DATA,*LPWIN32_FILE_ATTRIBUTE_DATA;
/*6259*/ 
/*6260*/ typ typ typ typ typ typ typ
/*6261*/ HANDLE
/*6262*/ typ
/*6263*/ CreateMutexA(
/*6264*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpMutexAttributes,
/*6265*/ typ typ typ typ typ BOOL bInitialOwner,
/*6266*/ typ typ typ typ typ typ typ LPCSTR lpName
/*6267*/ );
/*6268*/ 
/*6269*/ typ typ typ typ typ typ typ
/*6270*/ HANDLE
/*6271*/ typ
/*6272*/ CreateMutexW(
/*6273*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpMutexAttributes,
/*6274*/ typ typ typ typ typ BOOL bInitialOwner,
/*6275*/ typ typ typ typ typ typ typ LPCWSTR lpName
/*6276*/ );
/*6283*/ 
/*6284*/ typ typ typ typ typ typ typ
/*6285*/ HANDLE
/*6286*/ typ
/*6287*/ OpenMutexA(
/*6288*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6289*/ typ typ typ typ typ BOOL bInheritHandle,
/*6290*/ typ typ typ typ typ LPCSTR lpName
/*6291*/ );
/*6292*/ 
/*6293*/ typ typ typ typ typ typ typ
/*6294*/ HANDLE
/*6295*/ typ
/*6296*/ OpenMutexW(
/*6297*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6298*/ typ typ typ typ typ BOOL bInheritHandle,
/*6299*/ typ typ typ typ typ LPCWSTR lpName
/*6300*/ );
/*6307*/ 
/*6308*/ typ typ typ typ typ typ typ
/*6309*/ HANDLE
/*6310*/ typ
/*6311*/ CreateEventA(
/*6312*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpEventAttributes,
/*6313*/ typ typ typ typ typ BOOL bManualReset,
/*6314*/ typ typ typ typ typ BOOL bInitialState,
/*6315*/ typ typ typ typ typ typ typ LPCSTR lpName
/*6316*/ );
/*6317*/ 
/*6318*/ typ typ typ typ typ typ typ
/*6319*/ HANDLE
/*6320*/ typ
/*6321*/ CreateEventW(
/*6322*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpEventAttributes,
/*6323*/ typ typ typ typ typ BOOL bManualReset,
/*6324*/ typ typ typ typ typ BOOL bInitialState,
/*6325*/ typ typ typ typ typ typ typ LPCWSTR lpName
/*6326*/ );
/*6333*/ 
/*6334*/ typ typ typ typ typ typ typ
/*6335*/ HANDLE
/*6336*/ typ
/*6337*/ OpenEventA(
/*6338*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6339*/ typ typ typ typ typ BOOL bInheritHandle,
/*6340*/ typ typ typ typ typ LPCSTR lpName
/*6341*/ );
/*6342*/ 
/*6343*/ typ typ typ typ typ typ typ
/*6344*/ HANDLE
/*6345*/ typ
/*6346*/ OpenEventW(
/*6347*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6348*/ typ typ typ typ typ BOOL bInheritHandle,
/*6349*/ typ typ typ typ typ LPCWSTR lpName
/*6350*/ );
/*6357*/ 
/*6358*/ typ typ typ typ typ typ typ
/*6359*/ HANDLE
/*6360*/ typ
/*6361*/ CreateSemaphoreA(
/*6362*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
/*6363*/ typ typ typ typ typ LONG lInitialCount,
/*6364*/ typ typ typ typ typ LONG lMaximumCount,
/*6365*/ typ typ typ typ typ typ typ LPCSTR lpName
/*6366*/ );
/*6367*/ 
/*6368*/ typ typ typ typ typ typ typ
/*6369*/ HANDLE
/*6370*/ typ
/*6371*/ CreateSemaphoreW(
/*6372*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
/*6373*/ typ typ typ typ typ LONG lInitialCount,
/*6374*/ typ typ typ typ typ LONG lMaximumCount,
/*6375*/ typ typ typ typ typ typ typ LPCWSTR lpName
/*6376*/ );
/*6383*/ 
/*6384*/ typ typ typ typ typ typ typ
/*6385*/ HANDLE
/*6386*/ typ
/*6387*/ OpenSemaphoreA(
/*6388*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6389*/ typ typ typ typ typ BOOL bInheritHandle,
/*6390*/ typ typ typ typ typ LPCSTR lpName
/*6391*/ );
/*6392*/ 
/*6393*/ typ typ typ typ typ typ typ
/*6394*/ HANDLE
/*6395*/ typ
/*6396*/ OpenSemaphoreW(
/*6397*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6398*/ typ typ typ typ typ BOOL bInheritHandle,
/*6399*/ typ typ typ typ typ LPCWSTR lpName
/*6400*/ );
/*6604*/ 
/*6605*/ typ typ typ typ typ typ typ
/*6606*/ HANDLE
/*6607*/ typ
/*6608*/ CreateFileMappingA(
/*6609*/ typ typ typ typ typ HANDLE hFile,
/*6610*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
/*6611*/ typ typ typ typ typ DWORD flProtect,
/*6612*/ typ typ typ typ typ DWORD dwMaximumSizeHigh,
/*6613*/ typ typ typ typ typ DWORD dwMaximumSizeLow,
/*6614*/ typ typ typ typ typ typ typ LPCSTR lpName
/*6615*/ );
/*6616*/ 
/*6617*/ typ typ typ typ typ typ typ
/*6618*/ HANDLE
/*6619*/ typ
/*6620*/ CreateFileMappingW(
/*6621*/ typ typ typ typ typ HANDLE hFile,
/*6622*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
/*6623*/ typ typ typ typ typ DWORD flProtect,
/*6624*/ typ typ typ typ typ DWORD dwMaximumSizeHigh,
/*6625*/ typ typ typ typ typ DWORD dwMaximumSizeLow,
/*6626*/ typ typ typ typ typ typ typ LPCWSTR lpName
/*6627*/ );
/*6670*/ 
/*6671*/ typ typ typ typ typ
/*6672*/ HANDLE
/*6673*/ typ
/*6674*/ OpenFileMappingA(
/*6675*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6676*/ typ typ typ typ typ BOOL bInheritHandle,
/*6677*/ typ typ typ typ typ LPCSTR lpName
/*6678*/ );
/*6679*/ 
/*6680*/ typ typ typ typ typ
/*6681*/ HANDLE
/*6682*/ typ
/*6683*/ OpenFileMappingW(
/*6684*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*6685*/ typ typ typ typ typ BOOL bInheritHandle,
/*6686*/ typ typ typ typ typ LPCWSTR lpName
/*6687*/ );
/*6694*/ 
/*6695*/ DWORD
/*6696*/ typ
/*6697*/ GetLogicalDriveStringsA(
/*6698*/ typ typ typ typ typ DWORD nBufferLength,
/*6699*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer
/*6700*/ );
/*6701*/ 
/*6702*/ DWORD
/*6703*/ typ
/*6704*/ GetLogicalDriveStringsW(
/*6705*/ typ typ typ typ typ DWORD nBufferLength,
/*6706*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer
/*6707*/ );
/*6740*/ 
/*6741*/ typ typ typ typ typ typ typ
/*6742*/ HMODULE
/*6743*/ typ
/*6744*/ LoadLibraryA(
/*6745*/ typ typ typ typ typ LPCSTR lpLibFileName
/*6746*/ );
/*6747*/ 
/*6748*/ typ typ typ typ typ typ typ
/*6749*/ HMODULE
/*6750*/ typ
/*6751*/ LoadLibraryW(
/*6752*/ typ typ typ typ typ LPCWSTR lpLibFileName
/*6753*/ );
/*6760*/ 
/*6761*/ typ typ typ typ typ typ typ
/*6762*/ HMODULE
/*6763*/ typ
/*6764*/ LoadLibraryExA(
/*6765*/ typ typ typ typ typ LPCSTR lpLibFileName,
/*6766*/ typ typ HANDLE hFile,
/*6767*/ typ typ typ typ typ DWORD dwFlags
/*6768*/ );
/*6769*/ 
/*6770*/ typ typ typ typ typ typ typ
/*6771*/ HMODULE
/*6772*/ typ
/*6773*/ LoadLibraryExW(
/*6774*/ typ typ typ typ typ LPCWSTR lpLibFileName,
/*6775*/ typ typ HANDLE hFile,
/*6776*/ typ typ typ typ typ DWORD dwFlags
/*6777*/ );
/*6792*/ 
/*6793*/ DWORD
/*6794*/ typ
/*6795*/ GetModuleFileNameA(
/*6796*/ typ typ typ typ typ typ typ HMODULE hModule,
/*6797*/ typ typ typ typ typ typ typ LPCH lpFilename,
/*6798*/ typ typ typ typ typ DWORD nSize
/*6799*/ );
/*6800*/ 
/*6801*/ DWORD
/*6802*/ typ
/*6803*/ GetModuleFileNameW(
/*6804*/ typ typ typ typ typ typ typ HMODULE hModule,
/*6805*/ typ typ typ typ typ typ typ LPWCH lpFilename,
/*6806*/ typ typ typ typ typ DWORD nSize
/*6807*/ );
/*6814*/ 
/*6815*/ typ typ typ typ typ typ typ
/*6816*/ HMODULE
/*6817*/ typ
/*6818*/ GetModuleHandleA(
/*6819*/ typ typ typ typ typ typ typ LPCSTR lpModuleName
/*6820*/ );
/*6821*/ 
/*6822*/ typ typ typ typ typ typ typ
/*6823*/ HMODULE
/*6824*/ typ
/*6825*/ GetModuleHandleW(
/*6826*/ typ typ typ typ typ typ typ LPCWSTR lpModuleName
/*6827*/ );
/*6949*/ typedef enum _PROC_THREAD_ATTRIBUTE_NUM{
/*6950*/ ProcThreadAttributeParentProcess=0,
/*6951*/ ProcThreadAttributeExtendedFlags,
/*6952*/ ProcThreadAttributeHandleList,
/*6953*/ ProcThreadAttributeMax
/*6954*/ }PROC_THREAD_ATTRIBUTE_NUM;
/*6969*/ typedef struct _PROC_THREAD_ATTRIBUTE_LIST*PPROC_THREAD_ATTRIBUTE_LIST,*LPPROC_THREAD_ATTRIBUTE_LIST;
/*6972*/ 
/*6973*/ BOOL
/*6974*/ typ
/*6975*/ InitializeProcThreadAttributeList(
/*6976*/ typ typ typ typ typ typ typ LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
/*6977*/ typ typ typ typ typ DWORD dwAttributeCount,
/*6978*/ typ typ typ typ typ typ typ DWORD dwFlags,
/*6979*/ typ typ typ typ typ PSIZE_T lpSize
/*6980*/ );
/*6982*/ 
/*6983*/ void
/*6984*/ typ
/*6985*/ DeleteProcThreadAttributeList(
/*6986*/ typ typ typ typ typ LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
/*6987*/ );
/*6991*/ 
/*6992*/ BOOL
/*6993*/ typ
/*6994*/ UpdateProcThreadAttribute(
/*6995*/ typ typ typ typ typ LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
/*6996*/ typ typ typ typ typ DWORD dwFlags,
/*6997*/ typ typ typ typ typ DWORD_PTR Attribute,
/*6998*/ typ typ typ typ typ typ typ typ typ PVOID lpValue,
/*6999*/ typ typ typ typ typ SIZE_T cbSize,
/*7000*/ typ typ typ typ typ typ typ PVOID lpPreviousValue,
/*7001*/ typ typ typ typ typ typ typ PSIZE_T lpReturnSize
/*7002*/ );
/*7005*/ 
/*7006*/ BOOL
/*7007*/ typ
/*7008*/ CreateProcessA(
/*7009*/ typ typ typ typ typ typ typ LPCSTR lpApplicationName,
/*7010*/ typ typ typ typ typ typ typ LPSTR lpCommandLine,
/*7011*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpProcessAttributes,
/*7012*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpThreadAttributes,
/*7013*/ typ typ typ typ typ BOOL bInheritHandles,
/*7014*/ typ typ typ typ typ DWORD dwCreationFlags,
/*7015*/ typ typ typ typ typ typ typ LPVOID lpEnvironment,
/*7016*/ typ typ typ typ typ typ typ LPCSTR lpCurrentDirectory,
/*7017*/ typ typ typ typ typ LPSTARTUPINFOA lpStartupInfo,
/*7018*/ typ typ typ typ typ LPPROCESS_INFORMATION lpProcessInformation
/*7019*/ );
/*7020*/ 
/*7021*/ BOOL
/*7022*/ typ
/*7023*/ CreateProcessW(
/*7024*/ typ typ typ typ typ typ typ LPCWSTR lpApplicationName,
/*7025*/ typ typ typ typ typ typ typ LPWSTR lpCommandLine,
/*7026*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpProcessAttributes,
/*7027*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpThreadAttributes,
/*7028*/ typ typ typ typ typ BOOL bInheritHandles,
/*7029*/ typ typ typ typ typ DWORD dwCreationFlags,
/*7030*/ typ typ typ typ typ typ typ LPVOID lpEnvironment,
/*7031*/ typ typ typ typ typ typ typ LPCWSTR lpCurrentDirectory,
/*7032*/ typ typ typ typ typ LPSTARTUPINFOW lpStartupInfo,
/*7033*/ typ typ typ typ typ LPPROCESS_INFORMATION lpProcessInformation
/*7034*/ );
/*7043*/ 
/*7044*/ BOOL
/*7045*/ typ
/*7046*/ SetProcessShutdownParameters(
/*7047*/ typ typ typ typ typ DWORD dwLevel,
/*7048*/ typ typ typ typ typ DWORD dwFlags
/*7049*/ );
/*7051*/ 
/*7052*/ BOOL
/*7053*/ typ
/*7054*/ GetProcessShutdownParameters(
/*7055*/ typ typ typ typ typ LPDWORD lpdwLevel,
/*7056*/ typ typ typ typ typ LPDWORD lpdwFlags
/*7057*/ );
/*7059*/ 
/*7060*/ DWORD
/*7061*/ typ
/*7062*/ GetProcessVersion(
/*7063*/ typ typ typ typ typ DWORD ProcessId
/*7064*/ );
/*7066*/ 
/*7067*/ void
/*7068*/ typ
/*7069*/ FatalAppExitA(
/*7070*/ typ typ typ typ typ UINT uAction,
/*7071*/ typ typ typ typ typ LPCSTR lpMessageText
/*7072*/ );
/*7073*/ 
/*7074*/ void
/*7075*/ typ
/*7076*/ FatalAppExitW(
/*7077*/ typ typ typ typ typ UINT uAction,
/*7078*/ typ typ typ typ typ LPCWSTR lpMessageText
/*7079*/ );
/*7086*/ 
/*7087*/ void
/*7088*/ typ
/*7089*/ GetStartupInfoA(
/*7090*/ typ typ typ typ typ LPSTARTUPINFOA lpStartupInfo
/*7091*/ );
/*7092*/ 
/*7093*/ void
/*7094*/ typ
/*7095*/ GetStartupInfoW(
/*7096*/ typ typ typ typ typ LPSTARTUPINFOW lpStartupInfo
/*7097*/ );
/*7104*/ 
/*7105*/ typ typ typ typ typ
/*7106*/ LPSTR
/*7107*/ typ
/*7108*/ GetCommandLineA(
/*7109*/ void
/*7110*/ );
/*7111*/ 
/*7112*/ typ typ typ typ typ
/*7113*/ LPWSTR
/*7114*/ typ
/*7115*/ GetCommandLineW(
/*7116*/ void
/*7117*/ );
/*7124*/ 
/*7125*/ typ
/*7126*/ typ
/*7127*/ DWORD
/*7128*/ typ
/*7129*/ GetEnvironmentVariableA(
/*7130*/ typ typ typ typ typ typ typ LPCSTR lpName,
/*7131*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*7132*/ typ typ typ typ typ DWORD nSize
/*7133*/ );
/*7134*/ 
/*7135*/ typ
/*7136*/ typ
/*7137*/ DWORD
/*7138*/ typ
/*7139*/ GetEnvironmentVariableW(
/*7140*/ typ typ typ typ typ typ typ LPCWSTR lpName,
/*7141*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*7142*/ typ typ typ typ typ DWORD nSize
/*7143*/ );
/*7172*/ 
/*7173*/ BOOL
/*7174*/ typ
/*7175*/ SetEnvironmentVariableA(
/*7176*/ typ typ typ typ typ LPCSTR lpName,
/*7177*/ typ typ typ typ typ typ typ LPCSTR lpValue
/*7178*/ );
/*7179*/ 
/*7180*/ BOOL
/*7181*/ typ
/*7182*/ SetEnvironmentVariableW(
/*7183*/ typ typ typ typ typ LPCWSTR lpName,
/*7184*/ typ typ typ typ typ typ typ LPCWSTR lpValue
/*7185*/ );
/*7212*/ 
/*7213*/ typ
/*7214*/ typ
/*7215*/ DWORD
/*7216*/ typ
/*7217*/ ExpandEnvironmentStringsA(
/*7218*/ typ typ typ typ typ LPCSTR lpSrc,
/*7219*/ typ typ typ typ typ typ typ typ typ LPSTR lpDst,
/*7220*/ typ typ typ typ typ DWORD nSize
/*7221*/ );
/*7222*/ 
/*7223*/ typ
/*7224*/ typ
/*7225*/ DWORD
/*7226*/ typ
/*7227*/ ExpandEnvironmentStringsW(
/*7228*/ typ typ typ typ typ LPCWSTR lpSrc,
/*7229*/ typ typ typ typ typ typ typ typ typ LPWSTR lpDst,
/*7230*/ typ typ typ typ typ DWORD nSize
/*7231*/ );
/*7238*/ 
/*7239*/ DWORD
/*7240*/ typ
/*7241*/ GetFirmwareEnvironmentVariableA(
/*7242*/ typ typ typ typ typ LPCSTR lpName,
/*7243*/ typ typ typ typ typ LPCSTR lpGuid,
/*7244*/ typ typ typ typ typ typ typ typ typ PVOID pBuffer,
/*7245*/ typ typ typ typ typ DWORD nSize
/*7246*/ );
/*7247*/ 
/*7248*/ DWORD
/*7249*/ typ
/*7250*/ GetFirmwareEnvironmentVariableW(
/*7251*/ typ typ typ typ typ LPCWSTR lpName,
/*7252*/ typ typ typ typ typ LPCWSTR lpGuid,
/*7253*/ typ typ typ typ typ typ typ typ typ PVOID pBuffer,
/*7254*/ typ typ typ typ typ DWORD nSize
/*7255*/ );
/*7262*/ 
/*7263*/ BOOL
/*7264*/ typ
/*7265*/ SetFirmwareEnvironmentVariableA(
/*7266*/ typ typ typ typ typ LPCSTR lpName,
/*7267*/ typ typ typ typ typ LPCSTR lpGuid,
/*7268*/ typ typ typ typ typ typ typ typ typ PVOID pValue,
/*7269*/ typ typ typ typ typ DWORD nSize
/*7270*/ );
/*7271*/ 
/*7272*/ BOOL
/*7273*/ typ
/*7274*/ SetFirmwareEnvironmentVariableW(
/*7275*/ typ typ typ typ typ LPCWSTR lpName,
/*7276*/ typ typ typ typ typ LPCWSTR lpGuid,
/*7277*/ typ typ typ typ typ typ typ typ typ PVOID pValue,
/*7278*/ typ typ typ typ typ DWORD nSize
/*7279*/ );
/*7287*/ 
/*7288*/ void
/*7289*/ typ
/*7290*/ OutputDebugStringA(
/*7291*/ typ typ typ typ typ typ typ LPCSTR lpOutputString
/*7292*/ );
/*7293*/ 
/*7294*/ void
/*7295*/ typ
/*7296*/ OutputDebugStringW(
/*7297*/ typ typ typ typ typ typ typ LPCWSTR lpOutputString
/*7298*/ );
/*7305*/ 
/*7306*/ typ typ typ typ typ typ typ
/*7307*/ HRSRC
/*7308*/ typ
/*7309*/ FindResourceA(
/*7310*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7311*/ typ typ typ typ typ LPCSTR lpName,
/*7312*/ typ typ typ typ typ LPCSTR lpType
/*7313*/ );
/*7314*/ 
/*7315*/ typ typ typ typ typ typ typ
/*7316*/ HRSRC
/*7317*/ typ
/*7318*/ FindResourceW(
/*7319*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7320*/ typ typ typ typ typ LPCWSTR lpName,
/*7321*/ typ typ typ typ typ LPCWSTR lpType
/*7322*/ );
/*7329*/ 
/*7330*/ typ typ typ typ typ typ typ
/*7331*/ HRSRC
/*7332*/ typ
/*7333*/ FindResourceExA(
/*7334*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7335*/ typ typ typ typ typ LPCSTR lpType,
/*7336*/ typ typ typ typ typ LPCSTR lpName,
/*7337*/ typ typ typ typ typ WORD wLanguage
/*7338*/ );
/*7339*/ 
/*7340*/ typ typ typ typ typ typ typ
/*7341*/ HRSRC
/*7342*/ typ
/*7343*/ FindResourceExW(
/*7344*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7345*/ typ typ typ typ typ LPCWSTR lpType,
/*7346*/ typ typ typ typ typ LPCWSTR lpName,
/*7347*/ typ typ typ typ typ WORD wLanguage
/*7348*/ );
/*7356*/ typedef BOOL(typ*ENUMRESTYPEPROCA)(typ typ typ typ typ typ typ HMODULE hModule,typ typ typ typ typ LPSTR lpType,
/*7357*/ typ typ typ typ typ LONG_PTR lParam);
/*7358*/ typedef BOOL(typ*ENUMRESTYPEPROCW)(typ typ typ typ typ typ typ HMODULE hModule,typ typ typ typ typ LPWSTR lpType,
/*7359*/ typ typ typ typ typ LONG_PTR lParam);
/*7365*/ typedef BOOL(typ*ENUMRESNAMEPROCA)(typ typ typ typ typ typ typ HMODULE hModule,typ typ typ typ typ LPCSTR lpType,
/*7366*/ typ typ typ typ typ LPSTR lpName,typ typ typ typ typ LONG_PTR lParam);
/*7367*/ typedef BOOL(typ*ENUMRESNAMEPROCW)(typ typ typ typ typ typ typ HMODULE hModule,typ typ typ typ typ LPCWSTR lpType,
/*7368*/ typ typ typ typ typ LPWSTR lpName,typ typ typ typ typ LONG_PTR lParam);
/*7374*/ typedef BOOL(typ*ENUMRESLANGPROCA)(typ typ typ typ typ typ typ HMODULE hModule,typ typ typ typ typ LPCSTR lpType,
/*7375*/ typ typ typ typ typ LPCSTR lpName,typ typ typ typ typ WORD wLanguage,typ typ typ typ typ LONG_PTR lParam);
/*7376*/ typedef BOOL(typ*ENUMRESLANGPROCW)(typ typ typ typ typ typ typ HMODULE hModule,typ typ typ typ typ LPCWSTR lpType,
/*7377*/ typ typ typ typ typ LPCWSTR lpName,typ typ typ typ typ WORD wLanguage,typ typ typ typ typ LONG_PTR lParam);
/*7407*/ 
/*7408*/ BOOL
/*7409*/ typ
/*7410*/ EnumResourceTypesA(
/*7411*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7412*/ typ typ typ typ typ ENUMRESTYPEPROCA lpEnumFunc,
/*7413*/ typ typ typ typ typ LONG_PTR lParam
/*7414*/ );
/*7415*/ 
/*7416*/ BOOL
/*7417*/ typ
/*7418*/ EnumResourceTypesW(
/*7419*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7420*/ typ typ typ typ typ ENUMRESTYPEPROCW lpEnumFunc,
/*7421*/ typ typ typ typ typ LONG_PTR lParam
/*7422*/ );
/*7429*/ 
/*7430*/ BOOL
/*7431*/ typ
/*7432*/ EnumResourceNamesA(
/*7433*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7434*/ typ typ typ typ typ LPCSTR lpType,
/*7435*/ typ typ typ typ typ ENUMRESNAMEPROCA lpEnumFunc,
/*7436*/ typ typ typ typ typ LONG_PTR lParam
/*7437*/ );
/*7438*/ 
/*7439*/ BOOL
/*7440*/ typ
/*7441*/ EnumResourceNamesW(
/*7442*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7443*/ typ typ typ typ typ LPCWSTR lpType,
/*7444*/ typ typ typ typ typ ENUMRESNAMEPROCW lpEnumFunc,
/*7445*/ typ typ typ typ typ LONG_PTR lParam
/*7446*/ );
/*7453*/ 
/*7454*/ BOOL
/*7455*/ typ
/*7456*/ EnumResourceLanguagesA(
/*7457*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7458*/ typ typ typ typ typ LPCSTR lpType,
/*7459*/ typ typ typ typ typ LPCSTR lpName,
/*7460*/ typ typ typ typ typ ENUMRESLANGPROCA lpEnumFunc,
/*7461*/ typ typ typ typ typ LONG_PTR lParam
/*7462*/ );
/*7463*/ 
/*7464*/ BOOL
/*7465*/ typ
/*7466*/ EnumResourceLanguagesW(
/*7467*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7468*/ typ typ typ typ typ LPCWSTR lpType,
/*7469*/ typ typ typ typ typ LPCWSTR lpName,
/*7470*/ typ typ typ typ typ ENUMRESLANGPROCW lpEnumFunc,
/*7471*/ typ typ typ typ typ LONG_PTR lParam
/*7472*/ );
/*7486*/ 
/*7487*/ BOOL
/*7488*/ typ
/*7489*/ EnumResourceTypesExA(
/*7490*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7491*/ typ typ typ typ typ ENUMRESTYPEPROCA lpEnumFunc,
/*7492*/ typ typ typ typ typ LONG_PTR lParam,
/*7493*/ DWORD dwFlags,
/*7494*/ LANGID LangId
/*7495*/ );
/*7496*/ 
/*7497*/ BOOL
/*7498*/ typ
/*7499*/ EnumResourceTypesExW(
/*7500*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7501*/ typ typ typ typ typ ENUMRESTYPEPROCW lpEnumFunc,
/*7502*/ typ typ typ typ typ LONG_PTR lParam,
/*7503*/ DWORD dwFlags,
/*7504*/ LANGID LangId
/*7505*/ );
/*7513*/ 
/*7514*/ BOOL
/*7515*/ typ
/*7516*/ EnumResourceNamesExA(
/*7517*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7518*/ typ typ typ typ typ LPCSTR lpType,
/*7519*/ typ typ typ typ typ ENUMRESNAMEPROCA lpEnumFunc,
/*7520*/ typ typ typ typ typ LONG_PTR lParam,
/*7521*/ DWORD dwFlags,
/*7522*/ LANGID LangId
/*7523*/ );
/*7524*/ 
/*7525*/ BOOL
/*7526*/ typ
/*7527*/ EnumResourceNamesExW(
/*7528*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7529*/ typ typ typ typ typ LPCWSTR lpType,
/*7530*/ typ typ typ typ typ ENUMRESNAMEPROCW lpEnumFunc,
/*7531*/ typ typ typ typ typ LONG_PTR lParam,
/*7532*/ DWORD dwFlags,
/*7533*/ LANGID LangId
/*7534*/ );
/*7541*/ 
/*7542*/ BOOL
/*7543*/ typ
/*7544*/ EnumResourceLanguagesExA(
/*7545*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7546*/ typ typ typ typ typ LPCSTR lpType,
/*7547*/ typ typ typ typ typ LPCSTR lpName,
/*7548*/ typ typ typ typ typ ENUMRESLANGPROCA lpEnumFunc,
/*7549*/ typ typ typ typ typ LONG_PTR lParam,
/*7550*/ DWORD dwFlags,
/*7551*/ LANGID LangId
/*7552*/ );
/*7553*/ 
/*7554*/ BOOL
/*7555*/ typ
/*7556*/ EnumResourceLanguagesExW(
/*7557*/ typ typ typ typ typ typ typ HMODULE hModule,
/*7558*/ typ typ typ typ typ LPCWSTR lpType,
/*7559*/ typ typ typ typ typ LPCWSTR lpName,
/*7560*/ typ typ typ typ typ ENUMRESLANGPROCW lpEnumFunc,
/*7561*/ typ typ typ typ typ LONG_PTR lParam,
/*7562*/ DWORD dwFlags,
/*7563*/ LANGID LangId
/*7564*/ );
/*7571*/ 
/*7572*/ HANDLE
/*7573*/ typ
/*7574*/ BeginUpdateResourceA(
/*7575*/ typ typ typ typ typ LPCSTR pFileName,
/*7576*/ typ typ typ typ typ BOOL bDeleteExistingResources
/*7577*/ );
/*7578*/ 
/*7579*/ HANDLE
/*7580*/ typ
/*7581*/ BeginUpdateResourceW(
/*7582*/ typ typ typ typ typ LPCWSTR pFileName,
/*7583*/ typ typ typ typ typ BOOL bDeleteExistingResources
/*7584*/ );
/*7591*/ 
/*7592*/ BOOL
/*7593*/ typ
/*7594*/ UpdateResourceA(
/*7595*/ typ typ typ typ typ HANDLE hUpdate,
/*7596*/ typ typ typ typ typ LPCSTR lpType,
/*7597*/ typ typ typ typ typ LPCSTR lpName,
/*7598*/ typ typ typ typ typ WORD wLanguage,
/*7599*/ typ typ typ typ typ typ typ typ typ LPVOID lpData,
/*7600*/ typ typ typ typ typ DWORD cb
/*7601*/ );
/*7602*/ 
/*7603*/ BOOL
/*7604*/ typ
/*7605*/ UpdateResourceW(
/*7606*/ typ typ typ typ typ HANDLE hUpdate,
/*7607*/ typ typ typ typ typ LPCWSTR lpType,
/*7608*/ typ typ typ typ typ LPCWSTR lpName,
/*7609*/ typ typ typ typ typ WORD wLanguage,
/*7610*/ typ typ typ typ typ typ typ typ typ LPVOID lpData,
/*7611*/ typ typ typ typ typ DWORD cb
/*7612*/ );
/*7619*/ 
/*7620*/ BOOL
/*7621*/ typ
/*7622*/ EndUpdateResourceA(
/*7623*/ typ typ typ typ typ HANDLE hUpdate,
/*7624*/ typ typ typ typ typ BOOL fDiscard
/*7625*/ );
/*7626*/ 
/*7627*/ BOOL
/*7628*/ typ
/*7629*/ EndUpdateResourceW(
/*7630*/ typ typ typ typ typ HANDLE hUpdate,
/*7631*/ typ typ typ typ typ BOOL fDiscard
/*7632*/ );
/*7640*/ 
/*7641*/ ATOM
/*7642*/ typ
/*7643*/ GlobalAddAtomA(
/*7644*/ typ typ typ typ typ typ typ LPCSTR lpString
/*7645*/ );
/*7646*/ 
/*7647*/ ATOM
/*7648*/ typ
/*7649*/ GlobalAddAtomW(
/*7650*/ typ typ typ typ typ typ typ LPCWSTR lpString
/*7651*/ );
/*7658*/ 
/*7659*/ ATOM
/*7660*/ typ
/*7661*/ GlobalFindAtomA(
/*7662*/ typ typ typ typ typ typ typ LPCSTR lpString
/*7663*/ );
/*7664*/ 
/*7665*/ ATOM
/*7666*/ typ
/*7667*/ GlobalFindAtomW(
/*7668*/ typ typ typ typ typ typ typ LPCWSTR lpString
/*7669*/ );
/*7676*/ 
/*7677*/ UINT
/*7678*/ typ
/*7679*/ GlobalGetAtomNameA(
/*7680*/ typ typ typ typ typ ATOM nAtom,
/*7681*/ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*7682*/ typ typ typ typ typ int nSize
/*7683*/ );
/*7684*/ 
/*7685*/ UINT
/*7686*/ typ
/*7687*/ GlobalGetAtomNameW(
/*7688*/ typ typ typ typ typ ATOM nAtom,
/*7689*/ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*7690*/ typ typ typ typ typ int nSize
/*7691*/ );
/*7698*/ 
/*7699*/ ATOM
/*7700*/ typ
/*7701*/ AddAtomA(
/*7702*/ typ typ typ typ typ typ typ LPCSTR lpString
/*7703*/ );
/*7704*/ 
/*7705*/ ATOM
/*7706*/ typ
/*7707*/ AddAtomW(
/*7708*/ typ typ typ typ typ typ typ LPCWSTR lpString
/*7709*/ );
/*7716*/ 
/*7717*/ ATOM
/*7718*/ typ
/*7719*/ FindAtomA(
/*7720*/ typ typ typ typ typ typ typ LPCSTR lpString
/*7721*/ );
/*7722*/ 
/*7723*/ ATOM
/*7724*/ typ
/*7725*/ FindAtomW(
/*7726*/ typ typ typ typ typ typ typ LPCWSTR lpString
/*7727*/ );
/*7734*/ 
/*7735*/ UINT
/*7736*/ typ
/*7737*/ GetAtomNameA(
/*7738*/ typ typ typ typ typ ATOM nAtom,
/*7739*/ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*7740*/ typ typ typ typ typ int nSize
/*7741*/ );
/*7742*/ 
/*7743*/ UINT
/*7744*/ typ
/*7745*/ GetAtomNameW(
/*7746*/ typ typ typ typ typ ATOM nAtom,
/*7747*/ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*7748*/ typ typ typ typ typ int nSize
/*7749*/ );
/*7756*/ 
/*7757*/ UINT
/*7758*/ typ
/*7759*/ GetProfileIntA(
/*7760*/ typ typ typ typ typ LPCSTR lpAppName,
/*7761*/ typ typ typ typ typ LPCSTR lpKeyName,
/*7762*/ typ typ typ typ typ INT nDefault
/*7763*/ );
/*7764*/ 
/*7765*/ UINT
/*7766*/ typ
/*7767*/ GetProfileIntW(
/*7768*/ typ typ typ typ typ LPCWSTR lpAppName,
/*7769*/ typ typ typ typ typ LPCWSTR lpKeyName,
/*7770*/ typ typ typ typ typ INT nDefault
/*7771*/ );
/*7778*/ 
/*7779*/ DWORD
/*7780*/ typ
/*7781*/ GetProfileStringA(
/*7782*/ typ typ typ typ typ typ typ LPCSTR lpAppName,
/*7783*/ typ typ typ typ typ typ typ LPCSTR lpKeyName,
/*7784*/ typ typ typ typ typ typ typ LPCSTR lpDefault,
/*7785*/ typ typ typ typ typ typ typ typ typ LPSTR lpReturnedString,
/*7786*/ typ typ typ typ typ DWORD nSize
/*7787*/ );
/*7788*/ 
/*7789*/ DWORD
/*7790*/ typ
/*7791*/ GetProfileStringW(
/*7792*/ typ typ typ typ typ typ typ LPCWSTR lpAppName,
/*7793*/ typ typ typ typ typ typ typ LPCWSTR lpKeyName,
/*7794*/ typ typ typ typ typ typ typ LPCWSTR lpDefault,
/*7795*/ typ typ typ typ typ typ typ typ typ LPWSTR lpReturnedString,
/*7796*/ typ typ typ typ typ DWORD nSize
/*7797*/ );
/*7804*/ 
/*7805*/ BOOL
/*7806*/ typ
/*7807*/ WriteProfileStringA(
/*7808*/ typ typ typ typ typ typ typ LPCSTR lpAppName,
/*7809*/ typ typ typ typ typ typ typ LPCSTR lpKeyName,
/*7810*/ typ typ typ typ typ typ typ LPCSTR lpString
/*7811*/ );
/*7812*/ 
/*7813*/ BOOL
/*7814*/ typ
/*7815*/ WriteProfileStringW(
/*7816*/ typ typ typ typ typ typ typ LPCWSTR lpAppName,
/*7817*/ typ typ typ typ typ typ typ LPCWSTR lpKeyName,
/*7818*/ typ typ typ typ typ typ typ LPCWSTR lpString
/*7819*/ );
/*7826*/ 
/*7827*/ DWORD
/*7828*/ typ
/*7829*/ GetProfileSectionA(
/*7830*/ typ typ typ typ typ LPCSTR lpAppName,
/*7831*/ typ typ typ typ typ typ typ typ typ LPSTR lpReturnedString,
/*7832*/ typ typ typ typ typ DWORD nSize
/*7833*/ );
/*7834*/ 
/*7835*/ DWORD
/*7836*/ typ
/*7837*/ GetProfileSectionW(
/*7838*/ typ typ typ typ typ LPCWSTR lpAppName,
/*7839*/ typ typ typ typ typ typ typ typ typ LPWSTR lpReturnedString,
/*7840*/ typ typ typ typ typ DWORD nSize
/*7841*/ );
/*7848*/ 
/*7849*/ BOOL
/*7850*/ typ
/*7851*/ WriteProfileSectionA(
/*7852*/ typ typ typ typ typ LPCSTR lpAppName,
/*7853*/ typ typ typ typ typ LPCSTR lpString
/*7854*/ );
/*7855*/ 
/*7856*/ BOOL
/*7857*/ typ
/*7858*/ WriteProfileSectionW(
/*7859*/ typ typ typ typ typ LPCWSTR lpAppName,
/*7860*/ typ typ typ typ typ LPCWSTR lpString
/*7861*/ );
/*7868*/ 
/*7869*/ UINT
/*7870*/ typ
/*7871*/ GetPrivateProfileIntA(
/*7872*/ typ typ typ typ typ LPCSTR lpAppName,
/*7873*/ typ typ typ typ typ LPCSTR lpKeyName,
/*7874*/ typ typ typ typ typ INT nDefault,
/*7875*/ typ typ typ typ typ typ typ LPCSTR lpFileName
/*7876*/ );
/*7877*/ 
/*7878*/ UINT
/*7879*/ typ
/*7880*/ GetPrivateProfileIntW(
/*7881*/ typ typ typ typ typ LPCWSTR lpAppName,
/*7882*/ typ typ typ typ typ LPCWSTR lpKeyName,
/*7883*/ typ typ typ typ typ INT nDefault,
/*7884*/ typ typ typ typ typ typ typ LPCWSTR lpFileName
/*7885*/ );
/*7892*/ 
/*7893*/ DWORD
/*7894*/ typ
/*7895*/ GetPrivateProfileStringA(
/*7896*/ typ typ typ typ typ typ typ LPCSTR lpAppName,
/*7897*/ typ typ typ typ typ typ typ LPCSTR lpKeyName,
/*7898*/ typ typ typ typ typ typ typ LPCSTR lpDefault,
/*7899*/ typ typ typ typ typ typ typ typ typ LPSTR lpReturnedString,
/*7900*/ typ typ typ typ typ DWORD nSize,
/*7901*/ typ typ typ typ typ typ typ LPCSTR lpFileName
/*7902*/ );
/*7903*/ 
/*7904*/ DWORD
/*7905*/ typ
/*7906*/ GetPrivateProfileStringW(
/*7907*/ typ typ typ typ typ typ typ LPCWSTR lpAppName,
/*7908*/ typ typ typ typ typ typ typ LPCWSTR lpKeyName,
/*7909*/ typ typ typ typ typ typ typ LPCWSTR lpDefault,
/*7910*/ typ typ typ typ typ typ typ typ typ LPWSTR lpReturnedString,
/*7911*/ typ typ typ typ typ DWORD nSize,
/*7912*/ typ typ typ typ typ typ typ LPCWSTR lpFileName
/*7913*/ );
/*7920*/ 
/*7921*/ BOOL
/*7922*/ typ
/*7923*/ WritePrivateProfileStringA(
/*7924*/ typ typ typ typ typ typ typ LPCSTR lpAppName,
/*7925*/ typ typ typ typ typ typ typ LPCSTR lpKeyName,
/*7926*/ typ typ typ typ typ typ typ LPCSTR lpString,
/*7927*/ typ typ typ typ typ typ typ LPCSTR lpFileName
/*7928*/ );
/*7929*/ 
/*7930*/ BOOL
/*7931*/ typ
/*7932*/ WritePrivateProfileStringW(
/*7933*/ typ typ typ typ typ typ typ LPCWSTR lpAppName,
/*7934*/ typ typ typ typ typ typ typ LPCWSTR lpKeyName,
/*7935*/ typ typ typ typ typ typ typ LPCWSTR lpString,
/*7936*/ typ typ typ typ typ typ typ LPCWSTR lpFileName
/*7937*/ );
/*7944*/ 
/*7945*/ DWORD
/*7946*/ typ
/*7947*/ GetPrivateProfileSectionA(
/*7948*/ typ typ typ typ typ LPCSTR lpAppName,
/*7949*/ typ typ typ typ typ typ typ typ typ LPSTR lpReturnedString,
/*7950*/ typ typ typ typ typ DWORD nSize,
/*7951*/ typ typ typ typ typ typ typ LPCSTR lpFileName
/*7952*/ );
/*7953*/ 
/*7954*/ DWORD
/*7955*/ typ
/*7956*/ GetPrivateProfileSectionW(
/*7957*/ typ typ typ typ typ LPCWSTR lpAppName,
/*7958*/ typ typ typ typ typ typ typ typ typ LPWSTR lpReturnedString,
/*7959*/ typ typ typ typ typ DWORD nSize,
/*7960*/ typ typ typ typ typ typ typ LPCWSTR lpFileName
/*7961*/ );
/*7968*/ 
/*7969*/ BOOL
/*7970*/ typ
/*7971*/ WritePrivateProfileSectionA(
/*7972*/ typ typ typ typ typ LPCSTR lpAppName,
/*7973*/ typ typ typ typ typ LPCSTR lpString,
/*7974*/ typ typ typ typ typ typ typ LPCSTR lpFileName
/*7975*/ );
/*7976*/ 
/*7977*/ BOOL
/*7978*/ typ
/*7979*/ WritePrivateProfileSectionW(
/*7980*/ typ typ typ typ typ LPCWSTR lpAppName,
/*7981*/ typ typ typ typ typ LPCWSTR lpString,
/*7982*/ typ typ typ typ typ typ typ LPCWSTR lpFileName
/*7983*/ );
/*7991*/ 
/*7992*/ DWORD
/*7993*/ typ
/*7994*/ GetPrivateProfileSectionNamesA(
/*7995*/ typ typ typ typ typ typ typ typ typ LPSTR lpszReturnBuffer,
/*7996*/ typ typ typ typ typ DWORD nSize,
/*7997*/ typ typ typ typ typ typ typ LPCSTR lpFileName
/*7998*/ );
/*7999*/ 
/*8000*/ DWORD
/*8001*/ typ
/*8002*/ GetPrivateProfileSectionNamesW(
/*8003*/ typ typ typ typ typ typ typ typ typ LPWSTR lpszReturnBuffer,
/*8004*/ typ typ typ typ typ DWORD nSize,
/*8005*/ typ typ typ typ typ typ typ LPCWSTR lpFileName
/*8006*/ );
/*8013*/ 
/*8014*/ BOOL
/*8015*/ typ
/*8016*/ GetPrivateProfileStructA(
/*8017*/ typ typ typ typ typ LPCSTR lpszSection,
/*8018*/ typ typ typ typ typ LPCSTR lpszKey,
/*8019*/ typ typ typ typ typ typ typ LPVOID lpStruct,
/*8020*/ typ typ typ typ typ UINT uSizeStruct,
/*8021*/ typ typ typ typ typ typ typ LPCSTR szFile
/*8022*/ );
/*8023*/ 
/*8024*/ BOOL
/*8025*/ typ
/*8026*/ GetPrivateProfileStructW(
/*8027*/ typ typ typ typ typ LPCWSTR lpszSection,
/*8028*/ typ typ typ typ typ LPCWSTR lpszKey,
/*8029*/ typ typ typ typ typ typ typ LPVOID lpStruct,
/*8030*/ typ typ typ typ typ UINT uSizeStruct,
/*8031*/ typ typ typ typ typ typ typ LPCWSTR szFile
/*8032*/ );
/*8039*/ 
/*8040*/ BOOL
/*8041*/ typ
/*8042*/ WritePrivateProfileStructA(
/*8043*/ typ typ typ typ typ LPCSTR lpszSection,
/*8044*/ typ typ typ typ typ LPCSTR lpszKey,
/*8045*/ typ typ typ typ typ typ typ typ typ LPVOID lpStruct,
/*8046*/ typ typ typ typ typ UINT uSizeStruct,
/*8047*/ typ typ typ typ typ typ typ LPCSTR szFile
/*8048*/ );
/*8049*/ 
/*8050*/ BOOL
/*8051*/ typ
/*8052*/ WritePrivateProfileStructW(
/*8053*/ typ typ typ typ typ LPCWSTR lpszSection,
/*8054*/ typ typ typ typ typ LPCWSTR lpszKey,
/*8055*/ typ typ typ typ typ typ typ typ typ LPVOID lpStruct,
/*8056*/ typ typ typ typ typ UINT uSizeStruct,
/*8057*/ typ typ typ typ typ typ typ LPCWSTR szFile
/*8058*/ );
/*8066*/ 
/*8067*/ UINT
/*8068*/ typ
/*8069*/ GetDriveTypeA(
/*8070*/ typ typ typ typ typ typ typ LPCSTR lpRootPathName
/*8071*/ );
/*8072*/ 
/*8073*/ UINT
/*8074*/ typ
/*8075*/ GetDriveTypeW(
/*8076*/ typ typ typ typ typ typ typ LPCWSTR lpRootPathName
/*8077*/ );
/*8084*/ 
/*8085*/ UINT
/*8086*/ typ
/*8087*/ GetSystemDirectoryA(
/*8088*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*8089*/ typ typ typ typ typ UINT uSize
/*8090*/ );
/*8091*/ 
/*8092*/ UINT
/*8093*/ typ
/*8094*/ GetSystemDirectoryW(
/*8095*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*8096*/ typ typ typ typ typ UINT uSize
/*8097*/ );
/*8104*/ 
/*8105*/ DWORD
/*8106*/ typ
/*8107*/ GetTempPathA(
/*8108*/ typ typ typ typ typ DWORD nBufferLength,
/*8109*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer
/*8110*/ );
/*8111*/ 
/*8112*/ DWORD
/*8113*/ typ
/*8114*/ GetTempPathW(
/*8115*/ typ typ typ typ typ DWORD nBufferLength,
/*8116*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer
/*8117*/ );
/*8124*/ 
/*8125*/ UINT
/*8126*/ typ
/*8127*/ GetTempFileNameA(
/*8128*/ typ typ typ typ typ LPCSTR lpPathName,
/*8129*/ typ typ typ typ typ LPCSTR lpPrefixString,
/*8130*/ typ typ typ typ typ UINT uUnique,
/*8131*/ typ typ typ typ typ LPSTR lpTempFileName
/*8132*/ );
/*8133*/ 
/*8134*/ UINT
/*8135*/ typ
/*8136*/ GetTempFileNameW(
/*8137*/ typ typ typ typ typ LPCWSTR lpPathName,
/*8138*/ typ typ typ typ typ LPCWSTR lpPrefixString,
/*8139*/ typ typ typ typ typ UINT uUnique,
/*8140*/ typ typ typ typ typ LPWSTR lpTempFileName
/*8141*/ );
/*8172*/ 
/*8173*/ UINT
/*8174*/ typ
/*8175*/ GetWindowsDirectoryA(
/*8176*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*8177*/ typ typ typ typ typ UINT uSize
/*8178*/ );
/*8179*/ 
/*8180*/ UINT
/*8181*/ typ
/*8182*/ GetWindowsDirectoryW(
/*8183*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*8184*/ typ typ typ typ typ UINT uSize
/*8185*/ );
/*8192*/ 
/*8193*/ UINT
/*8194*/ typ
/*8195*/ GetSystemWindowsDirectoryA(
/*8196*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*8197*/ typ typ typ typ typ UINT uSize
/*8198*/ );
/*8199*/ 
/*8200*/ UINT
/*8201*/ typ
/*8202*/ GetSystemWindowsDirectoryW(
/*8203*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*8204*/ typ typ typ typ typ UINT uSize
/*8205*/ );
/*8288*/ 
/*8289*/ BOOL
/*8290*/ typ
/*8291*/ SetCurrentDirectoryA(
/*8292*/ typ typ typ typ typ LPCSTR lpPathName
/*8293*/ );
/*8294*/ 
/*8295*/ BOOL
/*8296*/ typ
/*8297*/ SetCurrentDirectoryW(
/*8298*/ typ typ typ typ typ LPCWSTR lpPathName
/*8299*/ );
/*8324*/ 
/*8325*/ DWORD
/*8326*/ typ
/*8327*/ GetCurrentDirectoryA(
/*8328*/ typ typ typ typ typ DWORD nBufferLength,
/*8329*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer
/*8330*/ );
/*8331*/ 
/*8332*/ DWORD
/*8333*/ typ
/*8334*/ GetCurrentDirectoryW(
/*8335*/ typ typ typ typ typ DWORD nBufferLength,
/*8336*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer
/*8337*/ );
/*8386*/ 
/*8387*/ BOOL
/*8388*/ typ
/*8389*/ GetDiskFreeSpaceA(
/*8390*/ typ typ typ typ typ typ typ LPCSTR lpRootPathName,
/*8391*/ typ typ typ typ typ typ typ LPDWORD lpSectorsPerCluster,
/*8392*/ typ typ typ typ typ typ typ LPDWORD lpBytesPerSector,
/*8393*/ typ typ typ typ typ typ typ LPDWORD lpNumberOfFreeClusters,
/*8394*/ typ typ typ typ typ typ typ LPDWORD lpTotalNumberOfClusters
/*8395*/ );
/*8396*/ 
/*8397*/ BOOL
/*8398*/ typ
/*8399*/ GetDiskFreeSpaceW(
/*8400*/ typ typ typ typ typ typ typ LPCWSTR lpRootPathName,
/*8401*/ typ typ typ typ typ typ typ LPDWORD lpSectorsPerCluster,
/*8402*/ typ typ typ typ typ typ typ LPDWORD lpBytesPerSector,
/*8403*/ typ typ typ typ typ typ typ LPDWORD lpNumberOfFreeClusters,
/*8404*/ typ typ typ typ typ typ typ LPDWORD lpTotalNumberOfClusters
/*8405*/ );
/*8412*/ 
/*8413*/ BOOL
/*8414*/ typ
/*8415*/ GetDiskFreeSpaceExA(
/*8416*/ typ typ typ typ typ typ typ LPCSTR lpDirectoryName,
/*8417*/ typ typ typ typ typ typ typ PULARGE_INTEGER lpFreeBytesAvailableToCaller,
/*8418*/ typ typ typ typ typ typ typ PULARGE_INTEGER lpTotalNumberOfBytes,
/*8419*/ typ typ typ typ typ typ typ PULARGE_INTEGER lpTotalNumberOfFreeBytes
/*8420*/ );
/*8421*/ 
/*8422*/ BOOL
/*8423*/ typ
/*8424*/ GetDiskFreeSpaceExW(
/*8425*/ typ typ typ typ typ typ typ LPCWSTR lpDirectoryName,
/*8426*/ typ typ typ typ typ typ typ PULARGE_INTEGER lpFreeBytesAvailableToCaller,
/*8427*/ typ typ typ typ typ typ typ PULARGE_INTEGER lpTotalNumberOfBytes,
/*8428*/ typ typ typ typ typ typ typ PULARGE_INTEGER lpTotalNumberOfFreeBytes
/*8429*/ );
/*8436*/ 
/*8437*/ BOOL
/*8438*/ typ
/*8439*/ CreateDirectoryA(
/*8440*/ typ typ typ typ typ LPCSTR lpPathName,
/*8441*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*8442*/ );
/*8443*/ 
/*8444*/ BOOL
/*8445*/ typ
/*8446*/ CreateDirectoryW(
/*8447*/ typ typ typ typ typ LPCWSTR lpPathName,
/*8448*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*8449*/ );
/*8476*/ 
/*8477*/ BOOL
/*8478*/ typ
/*8479*/ CreateDirectoryExA(
/*8480*/ typ typ typ typ typ LPCSTR lpTemplateDirectory,
/*8481*/ typ typ typ typ typ LPCSTR lpNewDirectory,
/*8482*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*8483*/ );
/*8484*/ 
/*8485*/ BOOL
/*8486*/ typ
/*8487*/ CreateDirectoryExW(
/*8488*/ typ typ typ typ typ LPCWSTR lpTemplateDirectory,
/*8489*/ typ typ typ typ typ LPCWSTR lpNewDirectory,
/*8490*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*8491*/ );
/*8526*/ 
/*8527*/ BOOL
/*8528*/ typ
/*8529*/ RemoveDirectoryA(
/*8530*/ typ typ typ typ typ LPCSTR lpPathName
/*8531*/ );
/*8532*/ 
/*8533*/ BOOL
/*8534*/ typ
/*8535*/ RemoveDirectoryW(
/*8536*/ typ typ typ typ typ LPCWSTR lpPathName
/*8537*/ );
/*8568*/ 
/*8569*/ DWORD
/*8570*/ typ
/*8571*/ GetFullPathNameA(
/*8572*/ typ typ typ typ typ LPCSTR lpFileName,
/*8573*/ typ typ typ typ typ DWORD nBufferLength,
/*8574*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*8575*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPSTR*lpFilePart
/*8576*/ );
/*8577*/ 
/*8578*/ DWORD
/*8579*/ typ
/*8580*/ GetFullPathNameW(
/*8581*/ typ typ typ typ typ LPCWSTR lpFileName,
/*8582*/ typ typ typ typ typ DWORD nBufferLength,
/*8583*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*8584*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPWSTR*lpFilePart
/*8585*/ );
/*8627*/ 
/*8628*/ BOOL
/*8629*/ typ
/*8630*/ DefineDosDeviceA(
/*8631*/ typ typ typ typ typ DWORD dwFlags,
/*8632*/ typ typ typ typ typ LPCSTR lpDeviceName,
/*8633*/ typ typ typ typ typ typ typ LPCSTR lpTargetPath
/*8634*/ );
/*8635*/ 
/*8636*/ BOOL
/*8637*/ typ
/*8638*/ DefineDosDeviceW(
/*8639*/ typ typ typ typ typ DWORD dwFlags,
/*8640*/ typ typ typ typ typ LPCWSTR lpDeviceName,
/*8641*/ typ typ typ typ typ typ typ LPCWSTR lpTargetPath
/*8642*/ );
/*8649*/ 
/*8650*/ DWORD
/*8651*/ typ
/*8652*/ QueryDosDeviceA(
/*8653*/ typ typ typ typ typ typ typ LPCSTR lpDeviceName,
/*8654*/ typ typ typ typ typ typ typ typ typ LPSTR lpTargetPath,
/*8655*/ typ typ typ typ typ DWORD ucchMax
/*8656*/ );
/*8657*/ 
/*8658*/ DWORD
/*8659*/ typ
/*8660*/ QueryDosDeviceW(
/*8661*/ typ typ typ typ typ typ typ LPCWSTR lpDeviceName,
/*8662*/ typ typ typ typ typ typ typ typ typ LPWSTR lpTargetPath,
/*8663*/ typ typ typ typ typ DWORD ucchMax
/*8664*/ );
/*8673*/ 
/*8674*/ typ typ typ typ typ
/*8675*/ HANDLE
/*8676*/ typ
/*8677*/ CreateFileA(
/*8678*/ typ typ typ typ typ LPCSTR lpFileName,
/*8679*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*8680*/ typ typ typ typ typ DWORD dwShareMode,
/*8681*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*8682*/ typ typ typ typ typ DWORD dwCreationDisposition,
/*8683*/ typ typ typ typ typ DWORD dwFlagsAndAttributes,
/*8684*/ typ typ typ typ typ typ typ HANDLE hTemplateFile
/*8685*/ );
/*8686*/ 
/*8687*/ typ typ typ typ typ
/*8688*/ HANDLE
/*8689*/ typ
/*8690*/ CreateFileW(
/*8691*/ typ typ typ typ typ LPCWSTR lpFileName,
/*8692*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*8693*/ typ typ typ typ typ DWORD dwShareMode,
/*8694*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*8695*/ typ typ typ typ typ DWORD dwCreationDisposition,
/*8696*/ typ typ typ typ typ DWORD dwFlagsAndAttributes,
/*8697*/ typ typ typ typ typ typ typ HANDLE hTemplateFile
/*8698*/ );
/*8763*/ 
/*8764*/ BOOL
/*8765*/ typ
/*8766*/ SetFileAttributesA(
/*8767*/ typ typ typ typ typ LPCSTR lpFileName,
/*8768*/ typ typ typ typ typ DWORD dwFileAttributes
/*8769*/ );
/*8770*/ 
/*8771*/ BOOL
/*8772*/ typ
/*8773*/ SetFileAttributesW(
/*8774*/ typ typ typ typ typ LPCWSTR lpFileName,
/*8775*/ typ typ typ typ typ DWORD dwFileAttributes
/*8776*/ );
/*8783*/ 
/*8784*/ DWORD
/*8785*/ typ
/*8786*/ GetFileAttributesA(
/*8787*/ typ typ typ typ typ LPCSTR lpFileName
/*8788*/ );
/*8789*/ 
/*8790*/ DWORD
/*8791*/ typ
/*8792*/ GetFileAttributesW(
/*8793*/ typ typ typ typ typ LPCWSTR lpFileName
/*8794*/ );
/*8827*/ typedef enum _GET_FILEEX_INFO_LEVELS{
/*8828*/ GetFileExInfoStandard,
/*8829*/ GetFileExMaxInfoLevel
/*8830*/ }GET_FILEEX_INFO_LEVELS;
/*8860*/ 
/*8861*/ BOOL
/*8862*/ typ
/*8863*/ GetFileAttributesExA(
/*8864*/ typ typ typ typ typ LPCSTR lpFileName,
/*8865*/ typ typ typ typ typ GET_FILEEX_INFO_LEVELS fInfoLevelId,
/*8866*/ typ typ typ typ typ LPVOID lpFileInformation
/*8867*/ );
/*8868*/ 
/*8869*/ BOOL
/*8870*/ typ
/*8871*/ GetFileAttributesExW(
/*8872*/ typ typ typ typ typ LPCWSTR lpFileName,
/*8873*/ typ typ typ typ typ GET_FILEEX_INFO_LEVELS fInfoLevelId,
/*8874*/ typ typ typ typ typ LPVOID lpFileInformation
/*8875*/ );
/*8882*/ 
/*8883*/ DWORD
/*8884*/ typ
/*8885*/ GetCompressedFileSizeA(
/*8886*/ typ typ typ typ typ LPCSTR lpFileName,
/*8887*/ typ typ typ typ typ typ typ LPDWORD lpFileSizeHigh
/*8888*/ );
/*8889*/ 
/*8890*/ DWORD
/*8891*/ typ
/*8892*/ GetCompressedFileSizeW(
/*8893*/ typ typ typ typ typ LPCWSTR lpFileName,
/*8894*/ typ typ typ typ typ typ typ LPDWORD lpFileSizeHigh
/*8895*/ );
/*8928*/ 
/*8929*/ BOOL
/*8930*/ typ
/*8931*/ DeleteFileA(
/*8932*/ typ typ typ typ typ LPCSTR lpFileName
/*8933*/ );
/*8934*/ 
/*8935*/ BOOL
/*8936*/ typ
/*8937*/ DeleteFileW(
/*8938*/ typ typ typ typ typ LPCWSTR lpFileName
/*8939*/ );
/*9102*/ 
/*9103*/ typ typ typ typ typ
/*9104*/ HANDLE
/*9105*/ typ
/*9106*/ FindFirstFileA(
/*9107*/ typ typ typ typ typ LPCSTR lpFileName,
/*9108*/ typ typ typ typ typ LPWIN32_FIND_DATAA lpFindFileData
/*9109*/ );
/*9110*/ 
/*9111*/ typ typ typ typ typ
/*9112*/ HANDLE
/*9113*/ typ
/*9114*/ FindFirstFileW(
/*9115*/ typ typ typ typ typ LPCWSTR lpFileName,
/*9116*/ typ typ typ typ typ LPWIN32_FIND_DATAW lpFindFileData
/*9117*/ );
/*9124*/ 
/*9125*/ BOOL
/*9126*/ typ
/*9127*/ FindNextFileA(
/*9128*/ typ typ typ typ typ HANDLE hFindFile,
/*9129*/ typ typ typ typ typ LPWIN32_FIND_DATAA lpFindFileData
/*9130*/ );
/*9131*/ 
/*9132*/ BOOL
/*9133*/ typ
/*9134*/ FindNextFileW(
/*9135*/ typ typ typ typ typ HANDLE hFindFile,
/*9136*/ typ typ typ typ typ LPWIN32_FIND_DATAW lpFindFileData
/*9137*/ );
/*9145*/ 
/*9146*/ DWORD
/*9147*/ typ
/*9148*/ SearchPathA(
/*9149*/ typ typ typ typ typ typ typ LPCSTR lpPath,
/*9150*/ typ typ typ typ typ LPCSTR lpFileName,
/*9151*/ typ typ typ typ typ typ typ LPCSTR lpExtension,
/*9152*/ typ typ typ typ typ DWORD nBufferLength,
/*9153*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*9154*/ typ typ typ typ typ typ typ LPSTR*lpFilePart
/*9155*/ );
/*9156*/ 
/*9157*/ DWORD
/*9158*/ typ
/*9159*/ SearchPathW(
/*9160*/ typ typ typ typ typ typ typ LPCWSTR lpPath,
/*9161*/ typ typ typ typ typ LPCWSTR lpFileName,
/*9162*/ typ typ typ typ typ typ typ LPCWSTR lpExtension,
/*9163*/ typ typ typ typ typ DWORD nBufferLength,
/*9164*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*9165*/ typ typ typ typ typ typ typ LPWSTR*lpFilePart
/*9166*/ );
/*9173*/ 
/*9174*/ BOOL
/*9175*/ typ
/*9176*/ CopyFileA(
/*9177*/ typ typ typ typ typ LPCSTR lpExistingFileName,
/*9178*/ typ typ typ typ typ LPCSTR lpNewFileName,
/*9179*/ typ typ typ typ typ BOOL bFailIfExists
/*9180*/ );
/*9181*/ 
/*9182*/ BOOL
/*9183*/ typ
/*9184*/ CopyFileW(
/*9185*/ typ typ typ typ typ LPCWSTR lpExistingFileName,
/*9186*/ typ typ typ typ typ LPCWSTR lpNewFileName,
/*9187*/ typ typ typ typ typ BOOL bFailIfExists
/*9188*/ );
/*9295*/ 
/*9296*/ BOOL
/*9297*/ typ
/*9298*/ MoveFileA(
/*9299*/ typ typ typ typ typ LPCSTR lpExistingFileName,
/*9300*/ typ typ typ typ typ LPCSTR lpNewFileName
/*9301*/ );
/*9302*/ 
/*9303*/ BOOL
/*9304*/ typ
/*9305*/ MoveFileW(
/*9306*/ typ typ typ typ typ LPCWSTR lpExistingFileName,
/*9307*/ typ typ typ typ typ LPCWSTR lpNewFileName
/*9308*/ );
/*9335*/ 
/*9336*/ BOOL
/*9337*/ typ
/*9338*/ MoveFileExA(
/*9339*/ typ typ typ typ typ LPCSTR lpExistingFileName,
/*9340*/ typ typ typ typ typ typ typ LPCSTR lpNewFileName,
/*9341*/ typ typ typ typ typ DWORD dwFlags
/*9342*/ );
/*9343*/ 
/*9344*/ BOOL
/*9345*/ typ
/*9346*/ MoveFileExW(
/*9347*/ typ typ typ typ typ LPCWSTR lpExistingFileName,
/*9348*/ typ typ typ typ typ typ typ LPCWSTR lpNewFileName,
/*9349*/ typ typ typ typ typ DWORD dwFlags
/*9350*/ );
/*9600*/ 
/*9601*/ typ typ typ typ typ
/*9602*/ HANDLE
/*9603*/ typ
/*9604*/ CreateNamedPipeA(
/*9605*/ typ typ typ typ typ LPCSTR lpName,
/*9606*/ typ typ typ typ typ DWORD dwOpenMode,
/*9607*/ typ typ typ typ typ DWORD dwPipeMode,
/*9608*/ typ typ typ typ typ DWORD nMaxInstances,
/*9609*/ typ typ typ typ typ DWORD nOutBufferSize,
/*9610*/ typ typ typ typ typ DWORD nInBufferSize,
/*9611*/ typ typ typ typ typ DWORD nDefaultTimeOut,
/*9612*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*9613*/ );
/*9614*/ 
/*9615*/ typ typ typ typ typ
/*9616*/ HANDLE
/*9617*/ typ
/*9618*/ CreateNamedPipeW(
/*9619*/ typ typ typ typ typ LPCWSTR lpName,
/*9620*/ typ typ typ typ typ DWORD dwOpenMode,
/*9621*/ typ typ typ typ typ DWORD dwPipeMode,
/*9622*/ typ typ typ typ typ DWORD nMaxInstances,
/*9623*/ typ typ typ typ typ DWORD nOutBufferSize,
/*9624*/ typ typ typ typ typ DWORD nInBufferSize,
/*9625*/ typ typ typ typ typ DWORD nDefaultTimeOut,
/*9626*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*9627*/ );
/*9634*/ 
/*9635*/ BOOL
/*9636*/ typ
/*9637*/ GetNamedPipeHandleStateA(
/*9638*/ typ typ typ typ typ HANDLE hNamedPipe,
/*9639*/ typ typ typ typ typ typ typ LPDWORD lpState,
/*9640*/ typ typ typ typ typ typ typ LPDWORD lpCurInstances,
/*9641*/ typ typ typ typ typ typ typ LPDWORD lpMaxCollectionCount,
/*9642*/ typ typ typ typ typ typ typ LPDWORD lpCollectDataTimeout,
/*9643*/ typ typ typ typ typ typ typ LPSTR lpUserName,
/*9644*/ typ typ typ typ typ DWORD nMaxUserNameSize
/*9645*/ );
/*9646*/ 
/*9647*/ BOOL
/*9648*/ typ
/*9649*/ GetNamedPipeHandleStateW(
/*9650*/ typ typ typ typ typ HANDLE hNamedPipe,
/*9651*/ typ typ typ typ typ typ typ LPDWORD lpState,
/*9652*/ typ typ typ typ typ typ typ LPDWORD lpCurInstances,
/*9653*/ typ typ typ typ typ typ typ LPDWORD lpMaxCollectionCount,
/*9654*/ typ typ typ typ typ typ typ LPDWORD lpCollectDataTimeout,
/*9655*/ typ typ typ typ typ typ typ LPWSTR lpUserName,
/*9656*/ typ typ typ typ typ DWORD nMaxUserNameSize
/*9657*/ );
/*9664*/ 
/*9665*/ BOOL
/*9666*/ typ
/*9667*/ CallNamedPipeA(
/*9668*/ typ typ typ typ typ LPCSTR lpNamedPipeName,
/*9669*/ typ typ typ typ typ typ typ typ typ LPVOID lpInBuffer,
/*9670*/ typ typ typ typ typ DWORD nInBufferSize,
/*9671*/ typ typ typ typ typ typ typ typ typ LPVOID lpOutBuffer,
/*9672*/ typ typ typ typ typ DWORD nOutBufferSize,
/*9673*/ typ typ typ typ typ LPDWORD lpBytesRead,
/*9674*/ typ typ typ typ typ DWORD nTimeOut
/*9675*/ );
/*9676*/ 
/*9677*/ BOOL
/*9678*/ typ
/*9679*/ CallNamedPipeW(
/*9680*/ typ typ typ typ typ LPCWSTR lpNamedPipeName,
/*9681*/ typ typ typ typ typ typ typ typ typ LPVOID lpInBuffer,
/*9682*/ typ typ typ typ typ DWORD nInBufferSize,
/*9683*/ typ typ typ typ typ typ typ typ typ LPVOID lpOutBuffer,
/*9684*/ typ typ typ typ typ DWORD nOutBufferSize,
/*9685*/ typ typ typ typ typ LPDWORD lpBytesRead,
/*9686*/ typ typ typ typ typ DWORD nTimeOut
/*9687*/ );
/*9694*/ 
/*9695*/ BOOL
/*9696*/ typ
/*9697*/ WaitNamedPipeA(
/*9698*/ typ typ typ typ typ LPCSTR lpNamedPipeName,
/*9699*/ typ typ typ typ typ DWORD nTimeOut
/*9700*/ );
/*9701*/ 
/*9702*/ BOOL
/*9703*/ typ
/*9704*/ WaitNamedPipeW(
/*9705*/ typ typ typ typ typ LPCWSTR lpNamedPipeName,
/*9706*/ typ typ typ typ typ DWORD nTimeOut
/*9707*/ );
/*9714*/ typedef enum{
/*9715*/ PipeAttribute,
/*9716*/ PipeConnectionAttribute,
/*9717*/ PipeHandleAttribute
/*9718*/ }PIPE_ATTRIBUTE_TYPE;
/*9720*/ 
/*9721*/ BOOL
/*9722*/ typ
/*9723*/ GetNamedPipeAttribute(
/*9724*/ typ typ typ typ typ HANDLE Pipe,
/*9725*/ typ typ typ typ typ PIPE_ATTRIBUTE_TYPE AttributeType,
/*9726*/ typ typ typ typ typ PSTR AttributeName,
/*9727*/ typ typ typ typ typ PVOID AttributeValue,
/*9728*/ typ typ typ typ typ PSIZE_T AttributeValueLength
/*9729*/ );
/*9731*/ 
/*9732*/ BOOL
/*9733*/ typ
/*9734*/ SetNamedPipeAttribute(
/*9735*/ typ typ typ typ typ HANDLE Pipe,
/*9736*/ typ typ typ typ typ PIPE_ATTRIBUTE_TYPE AttributeType,
/*9737*/ typ typ typ typ typ PSTR AttributeName,
/*9738*/ typ typ typ typ typ PVOID AttributeValue,
/*9739*/ typ typ typ typ typ SIZE_T AttributeValueLength
/*9740*/ );
/*9742*/ 
/*9743*/ BOOL
/*9744*/ typ
/*9745*/ GetNamedPipeClientComputerNameA(
/*9746*/ typ typ typ typ typ HANDLE Pipe,
/*9747*/ typ typ typ typ typ LPSTR ClientComputerName,
/*9748*/ typ typ typ typ typ ULONG ClientComputerNameLength
/*9749*/ );
/*9750*/ 
/*9751*/ BOOL
/*9752*/ typ
/*9753*/ GetNamedPipeClientComputerNameW(
/*9754*/ typ typ typ typ typ HANDLE Pipe,
/*9755*/ typ typ typ typ typ LPWSTR ClientComputerName,
/*9756*/ typ typ typ typ typ ULONG ClientComputerNameLength
/*9757*/ );
/*9764*/ 
/*9765*/ BOOL
/*9766*/ typ
/*9767*/ GetNamedPipeClientProcessId(
/*9768*/ typ typ typ typ typ HANDLE Pipe,
/*9769*/ typ typ typ typ typ PULONG ClientProcessId
/*9770*/ );
/*9772*/ 
/*9773*/ BOOL
/*9774*/ typ
/*9775*/ GetNamedPipeClientSessionId(
/*9776*/ typ typ typ typ typ HANDLE Pipe,
/*9777*/ typ typ typ typ typ PULONG ClientSessionId
/*9778*/ );
/*9780*/ 
/*9781*/ BOOL
/*9782*/ typ
/*9783*/ GetNamedPipeServerProcessId(
/*9784*/ typ typ typ typ typ HANDLE Pipe,
/*9785*/ typ typ typ typ typ PULONG ServerProcessId
/*9786*/ );
/*9788*/ 
/*9789*/ BOOL
/*9790*/ typ
/*9791*/ GetNamedPipeServerSessionId(
/*9792*/ typ typ typ typ typ HANDLE Pipe,
/*9793*/ typ typ typ typ typ PULONG ServerSessionId
/*9794*/ );
/*9796*/ 
/*9797*/ BOOL
/*9798*/ typ
/*9799*/ SetVolumeLabelA(
/*9800*/ typ typ typ typ typ typ typ LPCSTR lpRootPathName,
/*9801*/ typ typ typ typ typ typ typ LPCSTR lpVolumeName
/*9802*/ );
/*9803*/ 
/*9804*/ BOOL
/*9805*/ typ
/*9806*/ SetVolumeLabelW(
/*9807*/ typ typ typ typ typ typ typ LPCWSTR lpRootPathName,
/*9808*/ typ typ typ typ typ typ typ LPCWSTR lpVolumeName
/*9809*/ );
/*9816*/ 
/*9817*/ void
/*9818*/ typ
/*9819*/ SetFileApisToOEM(void);
/*9821*/ 
/*9822*/ void
/*9823*/ typ
/*9824*/ SetFileApisToANSI(void);
/*9826*/ 
/*9827*/ BOOL
/*9828*/ typ
/*9829*/ AreFileApisANSI(void);
/*9831*/ 
/*9832*/ BOOL
/*9833*/ typ
/*9834*/ GetVolumeInformationA(
/*9835*/ typ typ typ typ typ typ typ LPCSTR lpRootPathName,
/*9836*/ typ typ typ typ typ typ typ LPSTR lpVolumeNameBuffer,
/*9837*/ typ typ typ typ typ DWORD nVolumeNameSize,
/*9838*/ typ typ typ typ typ typ typ LPDWORD lpVolumeSerialNumber,
/*9839*/ typ typ typ typ typ typ typ LPDWORD lpMaximumComponentLength,
/*9840*/ typ typ typ typ typ typ typ LPDWORD lpFileSystemFlags,
/*9841*/ typ typ typ typ typ typ typ LPSTR lpFileSystemNameBuffer,
/*9842*/ typ typ typ typ typ DWORD nFileSystemNameSize
/*9843*/ );
/*9844*/ 
/*9845*/ BOOL
/*9846*/ typ
/*9847*/ GetVolumeInformationW(
/*9848*/ typ typ typ typ typ typ typ LPCWSTR lpRootPathName,
/*9849*/ typ typ typ typ typ typ typ LPWSTR lpVolumeNameBuffer,
/*9850*/ typ typ typ typ typ DWORD nVolumeNameSize,
/*9851*/ typ typ typ typ typ typ typ LPDWORD lpVolumeSerialNumber,
/*9852*/ typ typ typ typ typ typ typ LPDWORD lpMaximumComponentLength,
/*9853*/ typ typ typ typ typ typ typ LPDWORD lpFileSystemFlags,
/*9854*/ typ typ typ typ typ typ typ LPWSTR lpFileSystemNameBuffer,
/*9855*/ typ typ typ typ typ DWORD nFileSystemNameSize
/*9856*/ );
/*9879*/ 
/*9880*/ BOOL
/*9881*/ typ
/*9882*/ CancelSynchronousIo(
/*9883*/ typ typ typ typ typ HANDLE hThread
/*9884*/ );
/*9886*/ 
/*9887*/ BOOL
/*9888*/ typ
/*9889*/ CancelIoEx(
/*9890*/ typ typ typ typ typ HANDLE hFile,
/*9891*/ typ typ typ typ typ typ typ LPOVERLAPPED lpOverlapped
/*9892*/ );
/*9894*/ 
/*9895*/ BOOL
/*9896*/ typ
/*9897*/ CancelIo(
/*9898*/ typ typ typ typ typ HANDLE hFile
/*9899*/ );
/*9901*/ 
/*9902*/ BOOL
/*9903*/ typ
/*9904*/ SetFileBandwidthReservation(
/*9905*/ typ typ typ typ typ HANDLE hFile,
/*9906*/ typ typ typ typ typ DWORD nPeriodMilliseconds,
/*9907*/ typ typ typ typ typ DWORD nBytesPerPeriod,
/*9908*/ typ typ typ typ typ BOOL bDiscardable,
/*9909*/ typ typ typ typ typ LPDWORD lpTransferSize,
/*9910*/ typ typ typ typ typ LPDWORD lpNumOutstandingRequests
/*9911*/ );
/*9913*/ 
/*9914*/ BOOL
/*9915*/ typ
/*9916*/ GetFileBandwidthReservation(
/*9917*/ typ typ typ typ typ HANDLE hFile,
/*9918*/ typ typ typ typ typ LPDWORD lpPeriodMilliseconds,
/*9919*/ typ typ typ typ typ LPDWORD lpBytesPerPeriod,
/*9920*/ typ typ typ typ typ LPBOOL pDiscardable,
/*9921*/ typ typ typ typ typ LPDWORD lpTransferSize,
/*9922*/ typ typ typ typ typ LPDWORD lpNumOutstandingRequests
/*9923*/ );
/*9929*/ 
/*9930*/ BOOL
/*9931*/ typ
/*9932*/ ClearEventLogA(
/*9933*/ typ typ typ typ typ HANDLE hEventLog,
/*9934*/ typ typ typ typ typ typ typ LPCSTR lpBackupFileName
/*9935*/ );
/*9936*/ 
/*9937*/ BOOL
/*9938*/ typ
/*9939*/ ClearEventLogW(
/*9940*/ typ typ typ typ typ HANDLE hEventLog,
/*9941*/ typ typ typ typ typ typ typ LPCWSTR lpBackupFileName
/*9942*/ );
/*9949*/ 
/*9950*/ BOOL
/*9951*/ typ
/*9952*/ BackupEventLogA(
/*9953*/ typ typ typ typ typ HANDLE hEventLog,
/*9954*/ typ typ typ typ typ LPCSTR lpBackupFileName
/*9955*/ );
/*9956*/ 
/*9957*/ BOOL
/*9958*/ typ
/*9959*/ BackupEventLogW(
/*9960*/ typ typ typ typ typ HANDLE hEventLog,
/*9961*/ typ typ typ typ typ LPCWSTR lpBackupFileName
/*9962*/ );
/*9969*/ 
/*9970*/ BOOL
/*9971*/ typ
/*9972*/ CloseEventLog(
/*9973*/ typ typ typ typ typ HANDLE hEventLog
/*9974*/ );
/*9976*/ 
/*9977*/ BOOL
/*9978*/ typ
/*9979*/ DeregisterEventSource(
/*9980*/ typ typ typ typ typ HANDLE hEventLog
/*9981*/ );
/*9983*/ 
/*9984*/ BOOL
/*9985*/ typ
/*9986*/ NotifyChangeEventLog(
/*9987*/ typ typ typ typ typ HANDLE hEventLog,
/*9988*/ typ typ typ typ typ HANDLE hEvent
/*9989*/ );
/*9991*/ 
/*9992*/ BOOL
/*9993*/ typ
/*9994*/ GetNumberOfEventLogRecords(
/*9995*/ typ typ typ typ typ HANDLE hEventLog,
/*9996*/ typ typ typ typ typ PDWORD NumberOfRecords
/*9997*/ );
/*9999*/ 
/*10000*/ BOOL
/*10001*/ typ
/*10002*/ GetOldestEventLogRecord(
/*10003*/ typ typ typ typ typ HANDLE hEventLog,
/*10004*/ typ typ typ typ typ PDWORD OldestRecord
/*10005*/ );
/*10007*/ 
/*10008*/ typ typ typ typ typ
/*10009*/ HANDLE
/*10010*/ typ
/*10011*/ OpenEventLogA(
/*10012*/ typ typ typ typ typ typ typ LPCSTR lpUNCServerName,
/*10013*/ typ typ typ typ typ LPCSTR lpSourceName
/*10014*/ );
/*10015*/ 
/*10016*/ typ typ typ typ typ
/*10017*/ HANDLE
/*10018*/ typ
/*10019*/ OpenEventLogW(
/*10020*/ typ typ typ typ typ typ typ LPCWSTR lpUNCServerName,
/*10021*/ typ typ typ typ typ LPCWSTR lpSourceName
/*10022*/ );
/*10029*/ 
/*10030*/ typ typ typ typ typ
/*10031*/ HANDLE
/*10032*/ typ
/*10033*/ RegisterEventSourceA(
/*10034*/ typ typ typ typ typ typ typ LPCSTR lpUNCServerName,
/*10035*/ typ typ typ typ typ LPCSTR lpSourceName
/*10036*/ );
/*10037*/ 
/*10038*/ typ typ typ typ typ
/*10039*/ HANDLE
/*10040*/ typ
/*10041*/ RegisterEventSourceW(
/*10042*/ typ typ typ typ typ typ typ LPCWSTR lpUNCServerName,
/*10043*/ typ typ typ typ typ LPCWSTR lpSourceName
/*10044*/ );
/*10051*/ 
/*10052*/ typ typ typ typ typ
/*10053*/ HANDLE
/*10054*/ typ
/*10055*/ OpenBackupEventLogA(
/*10056*/ typ typ typ typ typ typ typ LPCSTR lpUNCServerName,
/*10057*/ typ typ typ typ typ LPCSTR lpFileName
/*10058*/ );
/*10059*/ 
/*10060*/ typ typ typ typ typ
/*10061*/ HANDLE
/*10062*/ typ
/*10063*/ OpenBackupEventLogW(
/*10064*/ typ typ typ typ typ typ typ LPCWSTR lpUNCServerName,
/*10065*/ typ typ typ typ typ LPCWSTR lpFileName
/*10066*/ );
/*10073*/ 
/*10074*/ BOOL
/*10075*/ typ
/*10076*/ ReadEventLogA(
/*10077*/ typ typ typ typ typ HANDLE hEventLog,
/*10078*/ typ typ typ typ typ DWORD dwReadFlags,
/*10079*/ typ typ typ typ typ DWORD dwRecordOffset,
/*10080*/ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*10081*/ typ typ typ typ typ DWORD nNumberOfBytesToRead,
/*10082*/ typ typ typ typ typ DWORD*pnBytesRead,
/*10083*/ typ typ typ typ typ DWORD*pnMinNumberOfBytesNeeded
/*10084*/ );
/*10085*/ 
/*10086*/ BOOL
/*10087*/ typ
/*10088*/ ReadEventLogW(
/*10089*/ typ typ typ typ typ HANDLE hEventLog,
/*10090*/ typ typ typ typ typ DWORD dwReadFlags,
/*10091*/ typ typ typ typ typ DWORD dwRecordOffset,
/*10092*/ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*10093*/ typ typ typ typ typ DWORD nNumberOfBytesToRead,
/*10094*/ typ typ typ typ typ DWORD*pnBytesRead,
/*10095*/ typ typ typ typ typ DWORD*pnMinNumberOfBytesNeeded
/*10096*/ );
/*10103*/ 
/*10104*/ BOOL
/*10105*/ typ
/*10106*/ ReportEventA(
/*10107*/ typ typ typ typ typ HANDLE hEventLog,
/*10108*/ typ typ typ typ typ WORD wType,
/*10109*/ typ typ typ typ typ WORD wCategory,
/*10110*/ typ typ typ typ typ DWORD dwEventID,
/*10111*/ typ typ typ typ typ typ typ PSID lpUserSid,
/*10112*/ typ typ typ typ typ WORD wNumStrings,
/*10113*/ typ typ typ typ typ DWORD dwDataSize,
/*10114*/ typ typ typ typ typ typ typ typ typ LPCSTR*lpStrings,
/*10115*/ typ typ typ typ typ typ typ typ typ LPVOID lpRawData
/*10116*/ );
/*10117*/ 
/*10118*/ BOOL
/*10119*/ typ
/*10120*/ ReportEventW(
/*10121*/ typ typ typ typ typ HANDLE hEventLog,
/*10122*/ typ typ typ typ typ WORD wType,
/*10123*/ typ typ typ typ typ WORD wCategory,
/*10124*/ typ typ typ typ typ DWORD dwEventID,
/*10125*/ typ typ typ typ typ typ typ PSID lpUserSid,
/*10126*/ typ typ typ typ typ WORD wNumStrings,
/*10127*/ typ typ typ typ typ DWORD dwDataSize,
/*10128*/ typ typ typ typ typ typ typ typ typ LPCWSTR*lpStrings,
/*10129*/ typ typ typ typ typ typ typ typ typ LPVOID lpRawData
/*10130*/ );
/*10140*/ typedef struct _EVENTLOG_FULL_INFORMATION
/*10141*/ {
/*10142*/ DWORD dwFull;
/*10143*/ }
/*10144*/ EVENTLOG_FULL_INFORMATION,*LPEVENTLOG_FULL_INFORMATION;
/*10146*/ 
/*10147*/ BOOL
/*10148*/ typ
/*10149*/ GetEventLogInformation(
/*10150*/ typ typ typ typ typ HANDLE hEventLog,
/*10151*/ typ typ typ typ typ DWORD dwInfoLevel,
/*10152*/ typ typ typ typ typ typ typ LPVOID lpBuffer,
/*10153*/ typ typ typ typ typ DWORD cbBufSize,
/*10154*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*10155*/ );
/*10163*/ 
/*10164*/ BOOL
/*10165*/ typ
/*10166*/ DuplicateToken(
/*10167*/ typ typ typ typ typ HANDLE ExistingTokenHandle,
/*10168*/ typ typ typ typ typ SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
/*10169*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE DuplicateTokenHandle
/*10170*/ );
/*10172*/ 
/*10173*/ BOOL
/*10174*/ typ
/*10175*/ GetKernelObjectSecurity(
/*10176*/ typ typ typ typ typ HANDLE Handle,
/*10177*/ typ typ typ typ typ SECURITY_INFORMATION RequestedInformation,
/*10178*/ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*10179*/ typ typ typ typ typ DWORD nLength,
/*10180*/ typ typ typ typ typ LPDWORD lpnLengthNeeded
/*10181*/ );
/*10183*/ 
/*10184*/ BOOL
/*10185*/ typ
/*10186*/ ImpersonateNamedPipeClient(
/*10187*/ typ typ typ typ typ HANDLE hNamedPipe
/*10188*/ );
/*10190*/ 
/*10191*/ BOOL
/*10192*/ typ
/*10193*/ ImpersonateSelf(
/*10194*/ typ typ typ typ typ SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
/*10195*/ );
/*10198*/ 
/*10199*/ BOOL
/*10200*/ typ
/*10201*/ RevertToSelf(
/*10202*/ void
/*10203*/ );
/*10205*/ 
/*10206*/ BOOL
/*10207*/ typ
/*10208*/ SetThreadToken(
/*10209*/ typ typ typ typ typ typ typ PHANDLE Thread,
/*10210*/ typ typ typ typ typ typ typ HANDLE Token
/*10211*/ );
/*10213*/ 
/*10214*/ BOOL
/*10215*/ typ
/*10216*/ AccessCheck(
/*10217*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*10218*/ typ typ typ typ typ HANDLE ClientToken,
/*10219*/ typ typ typ typ typ DWORD DesiredAccess,
/*10220*/ typ typ typ typ typ PGENERIC_MAPPING GenericMapping,
/*10221*/ typ typ typ typ typ typ typ typ typ PPRIVILEGE_SET PrivilegeSet,
/*10222*/ typ typ typ typ typ LPDWORD PrivilegeSetLength,
/*10223*/ typ typ typ typ typ LPDWORD GrantedAccess,
/*10224*/ typ typ typ typ typ LPBOOL AccessStatus
/*10225*/ );
/*10264*/ 
/*10265*/ BOOL
/*10266*/ typ
/*10267*/ OpenProcessToken(
/*10268*/ typ typ typ typ typ HANDLE ProcessHandle,
/*10269*/ typ typ typ typ typ DWORD DesiredAccess,
/*10270*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE TokenHandle
/*10271*/ );
/*10274*/ 
/*10275*/ BOOL
/*10276*/ typ
/*10277*/ OpenThreadToken(
/*10278*/ typ typ typ typ typ HANDLE ThreadHandle,
/*10279*/ typ typ typ typ typ DWORD DesiredAccess,
/*10280*/ typ typ typ typ typ BOOL OpenAsSelf,
/*10281*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE TokenHandle
/*10282*/ );
/*10285*/ 
/*10286*/ BOOL
/*10287*/ typ
/*10288*/ GetTokenInformation(
/*10289*/ typ typ typ typ typ HANDLE TokenHandle,
/*10290*/ typ typ typ typ typ TOKEN_INFORMATION_CLASS TokenInformationClass,
/*10291*/ typ typ typ typ typ typ typ typ typ LPVOID TokenInformation,
/*10292*/ typ typ typ typ typ DWORD TokenInformationLength,
/*10293*/ typ typ typ typ typ PDWORD ReturnLength
/*10294*/ );
/*10297*/ 
/*10298*/ BOOL
/*10299*/ typ
/*10300*/ SetTokenInformation(
/*10301*/ typ typ typ typ typ HANDLE TokenHandle,
/*10302*/ typ typ typ typ typ TOKEN_INFORMATION_CLASS TokenInformationClass,
/*10303*/ typ typ typ typ typ typ typ LPVOID TokenInformation,
/*10304*/ typ typ typ typ typ DWORD TokenInformationLength
/*10305*/ );
/*10308*/ 
/*10309*/ BOOL
/*10310*/ typ
/*10311*/ AdjustTokenPrivileges(
/*10312*/ typ typ typ typ typ HANDLE TokenHandle,
/*10313*/ typ typ typ typ typ BOOL DisableAllPrivileges,
/*10314*/ typ typ typ typ typ typ typ PTOKEN_PRIVILEGES NewState,
/*10315*/ typ typ typ typ typ DWORD BufferLength,
/*10316*/ typ typ typ typ typ typ typ typ typ PTOKEN_PRIVILEGES PreviousState,
/*10317*/ typ typ typ typ typ typ typ PDWORD ReturnLength
/*10318*/ );
/*10321*/ 
/*10322*/ BOOL
/*10323*/ typ
/*10324*/ AdjustTokenGroups(
/*10325*/ typ typ typ typ typ HANDLE TokenHandle,
/*10326*/ typ typ typ typ typ BOOL ResetToDefault,
/*10327*/ typ typ typ typ typ typ typ PTOKEN_GROUPS NewState,
/*10328*/ typ typ typ typ typ DWORD BufferLength,
/*10329*/ typ typ typ typ typ typ typ typ typ PTOKEN_GROUPS PreviousState,
/*10330*/ typ typ typ typ typ typ typ PDWORD ReturnLength
/*10331*/ );
/*10334*/ 
/*10335*/ BOOL
/*10336*/ typ
/*10337*/ PrivilegeCheck(
/*10338*/ typ typ typ typ typ HANDLE ClientToken,
/*10339*/ typ typ typ typ typ PPRIVILEGE_SET RequiredPrivileges,
/*10340*/ typ typ typ typ typ LPBOOL pfResult
/*10341*/ );
/*10344*/ 
/*10345*/ BOOL
/*10346*/ typ
/*10347*/ AccessCheckAndAuditAlarmA(
/*10348*/ typ typ typ typ typ LPCSTR SubsystemName,
/*10349*/ typ typ typ typ typ typ typ LPVOID HandleId,
/*10350*/ typ typ typ typ typ LPSTR ObjectTypeName,
/*10351*/ typ typ typ typ typ typ typ LPSTR ObjectName,
/*10352*/ typ typ typ typ typ PSECURITY_DESCRIPTOR SecurityDescriptor,
/*10353*/ typ typ typ typ typ DWORD DesiredAccess,
/*10354*/ typ typ typ typ typ PGENERIC_MAPPING GenericMapping,
/*10355*/ typ typ typ typ typ BOOL ObjectCreation,
/*10356*/ typ typ typ typ typ LPDWORD GrantedAccess,
/*10357*/ typ typ typ typ typ LPBOOL AccessStatus,
/*10358*/ typ typ typ typ typ LPBOOL pfGenerateOnClose
/*10359*/ );
/*10360*/ 
/*10361*/ BOOL
/*10362*/ typ
/*10363*/ AccessCheckAndAuditAlarmW(
/*10364*/ typ typ typ typ typ LPCWSTR SubsystemName,
/*10365*/ typ typ typ typ typ typ typ LPVOID HandleId,
/*10366*/ typ typ typ typ typ LPWSTR ObjectTypeName,
/*10367*/ typ typ typ typ typ typ typ LPWSTR ObjectName,
/*10368*/ typ typ typ typ typ PSECURITY_DESCRIPTOR SecurityDescriptor,
/*10369*/ typ typ typ typ typ DWORD DesiredAccess,
/*10370*/ typ typ typ typ typ PGENERIC_MAPPING GenericMapping,
/*10371*/ typ typ typ typ typ BOOL ObjectCreation,
/*10372*/ typ typ typ typ typ LPDWORD GrantedAccess,
/*10373*/ typ typ typ typ typ LPBOOL AccessStatus,
/*10374*/ typ typ typ typ typ LPBOOL pfGenerateOnClose
/*10375*/ );
/*10532*/ 
/*10533*/ BOOL
/*10534*/ typ
/*10535*/ ObjectOpenAuditAlarmA(
/*10536*/ typ typ typ typ typ LPCSTR SubsystemName,
/*10537*/ typ typ typ typ typ LPVOID HandleId,
/*10538*/ typ typ typ typ typ LPSTR ObjectTypeName,
/*10539*/ typ typ typ typ typ typ typ LPSTR ObjectName,
/*10540*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*10541*/ typ typ typ typ typ HANDLE ClientToken,
/*10542*/ typ typ typ typ typ DWORD DesiredAccess,
/*10543*/ typ typ typ typ typ DWORD GrantedAccess,
/*10544*/ typ typ typ typ typ typ typ PPRIVILEGE_SET Privileges,
/*10545*/ typ typ typ typ typ BOOL ObjectCreation,
/*10546*/ typ typ typ typ typ BOOL AccessGranted,
/*10547*/ typ typ typ typ typ LPBOOL GenerateOnClose
/*10548*/ );
/*10549*/ 
/*10550*/ BOOL
/*10551*/ typ
/*10552*/ ObjectOpenAuditAlarmW(
/*10553*/ typ typ typ typ typ LPCWSTR SubsystemName,
/*10554*/ typ typ typ typ typ LPVOID HandleId,
/*10555*/ typ typ typ typ typ LPWSTR ObjectTypeName,
/*10556*/ typ typ typ typ typ typ typ LPWSTR ObjectName,
/*10557*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*10558*/ typ typ typ typ typ HANDLE ClientToken,
/*10559*/ typ typ typ typ typ DWORD DesiredAccess,
/*10560*/ typ typ typ typ typ DWORD GrantedAccess,
/*10561*/ typ typ typ typ typ typ typ PPRIVILEGE_SET Privileges,
/*10562*/ typ typ typ typ typ BOOL ObjectCreation,
/*10563*/ typ typ typ typ typ BOOL AccessGranted,
/*10564*/ typ typ typ typ typ LPBOOL GenerateOnClose
/*10565*/ );
/*10573*/ 
/*10574*/ BOOL
/*10575*/ typ
/*10576*/ ObjectPrivilegeAuditAlarmA(
/*10577*/ typ typ typ typ typ LPCSTR SubsystemName,
/*10578*/ typ typ typ typ typ LPVOID HandleId,
/*10579*/ typ typ typ typ typ HANDLE ClientToken,
/*10580*/ typ typ typ typ typ DWORD DesiredAccess,
/*10581*/ typ typ typ typ typ PPRIVILEGE_SET Privileges,
/*10582*/ typ typ typ typ typ BOOL AccessGranted
/*10583*/ );
/*10584*/ 
/*10585*/ BOOL
/*10586*/ typ
/*10587*/ ObjectPrivilegeAuditAlarmW(
/*10588*/ typ typ typ typ typ LPCWSTR SubsystemName,
/*10589*/ typ typ typ typ typ LPVOID HandleId,
/*10590*/ typ typ typ typ typ HANDLE ClientToken,
/*10591*/ typ typ typ typ typ DWORD DesiredAccess,
/*10592*/ typ typ typ typ typ PPRIVILEGE_SET Privileges,
/*10593*/ typ typ typ typ typ BOOL AccessGranted
/*10594*/ );
/*10602*/ 
/*10603*/ BOOL
/*10604*/ typ
/*10605*/ ObjectCloseAuditAlarmA(
/*10606*/ typ typ typ typ typ LPCSTR SubsystemName,
/*10607*/ typ typ typ typ typ LPVOID HandleId,
/*10608*/ typ typ typ typ typ BOOL GenerateOnClose
/*10609*/ );
/*10610*/ 
/*10611*/ BOOL
/*10612*/ typ
/*10613*/ ObjectCloseAuditAlarmW(
/*10614*/ typ typ typ typ typ LPCWSTR SubsystemName,
/*10615*/ typ typ typ typ typ LPVOID HandleId,
/*10616*/ typ typ typ typ typ BOOL GenerateOnClose
/*10617*/ );
/*10625*/ 
/*10626*/ BOOL
/*10627*/ typ
/*10628*/ ObjectDeleteAuditAlarmA(
/*10629*/ typ typ typ typ typ LPCSTR SubsystemName,
/*10630*/ typ typ typ typ typ LPVOID HandleId,
/*10631*/ typ typ typ typ typ BOOL GenerateOnClose
/*10632*/ );
/*10633*/ 
/*10634*/ BOOL
/*10635*/ typ
/*10636*/ ObjectDeleteAuditAlarmW(
/*10637*/ typ typ typ typ typ LPCWSTR SubsystemName,
/*10638*/ typ typ typ typ typ LPVOID HandleId,
/*10639*/ typ typ typ typ typ BOOL GenerateOnClose
/*10640*/ );
/*10648*/ 
/*10649*/ BOOL
/*10650*/ typ
/*10651*/ PrivilegedServiceAuditAlarmA(
/*10652*/ typ typ typ typ typ LPCSTR SubsystemName,
/*10653*/ typ typ typ typ typ LPCSTR ServiceName,
/*10654*/ typ typ typ typ typ HANDLE ClientToken,
/*10655*/ typ typ typ typ typ PPRIVILEGE_SET Privileges,
/*10656*/ typ typ typ typ typ BOOL AccessGranted
/*10657*/ );
/*10658*/ 
/*10659*/ BOOL
/*10660*/ typ
/*10661*/ PrivilegedServiceAuditAlarmW(
/*10662*/ typ typ typ typ typ LPCWSTR SubsystemName,
/*10663*/ typ typ typ typ typ LPCWSTR ServiceName,
/*10664*/ typ typ typ typ typ HANDLE ClientToken,
/*10665*/ typ typ typ typ typ PPRIVILEGE_SET Privileges,
/*10666*/ typ typ typ typ typ BOOL AccessGranted
/*10667*/ );
/*10717*/ 
/*10718*/ BOOL
/*10719*/ typ
/*10720*/ IsValidSid(
/*10721*/ typ typ typ typ typ PSID pSid
/*10722*/ );
/*10725*/ 
/*10726*/ BOOL
/*10727*/ typ
/*10728*/ EqualSid(
/*10729*/ typ typ typ typ typ PSID pSid1,
/*10730*/ typ typ typ typ typ PSID pSid2
/*10731*/ );
/*10734*/ 
/*10735*/ BOOL
/*10736*/ typ
/*10737*/ EqualPrefixSid(
/*10738*/ typ typ typ typ typ PSID pSid1,
/*10739*/ typ typ typ typ typ PSID pSid2
/*10740*/ );
/*10743*/ 
/*10744*/ DWORD
/*10745*/ typ
/*10746*/ GetSidLengthRequired(
/*10747*/ typ typ typ typ typ UCHAR nSubAuthorityCount
/*10748*/ );
/*10751*/ 
/*10752*/ BOOL
/*10753*/ typ
/*10754*/ AllocateAndInitializeSid(
/*10755*/ typ typ typ typ typ PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
/*10756*/ typ typ typ typ typ BYTE nSubAuthorityCount,
/*10757*/ typ typ typ typ typ DWORD nSubAuthority0,
/*10758*/ typ typ typ typ typ DWORD nSubAuthority1,
/*10759*/ typ typ typ typ typ DWORD nSubAuthority2,
/*10760*/ typ typ typ typ typ DWORD nSubAuthority3,
/*10761*/ typ typ typ typ typ DWORD nSubAuthority4,
/*10762*/ typ typ typ typ typ DWORD nSubAuthority5,
/*10763*/ typ typ typ typ typ DWORD nSubAuthority6,
/*10764*/ typ typ typ typ typ DWORD nSubAuthority7,
/*10765*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PSID*pSid
/*10766*/ );
/*10768*/ 
/*10769*/ PVOID
/*10770*/ typ
/*10771*/ FreeSid(
/*10772*/ typ typ typ typ typ PSID pSid
/*10773*/ );
/*10775*/ 
/*10776*/ BOOL
/*10777*/ typ
/*10778*/ InitializeSid(
/*10779*/ typ typ typ typ typ PSID Sid,
/*10780*/ typ typ typ typ typ PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
/*10781*/ typ typ typ typ typ BYTE nSubAuthorityCount
/*10782*/ );
/*10785*/ 
/*10786*/ typ typ typ typ typ
/*10787*/ PSID_IDENTIFIER_AUTHORITY
/*10788*/ typ
/*10789*/ GetSidIdentifierAuthority(
/*10790*/ typ typ typ typ typ PSID pSid
/*10791*/ );
/*10794*/ 
/*10795*/ typ typ typ typ typ
/*10796*/ PDWORD
/*10797*/ typ
/*10798*/ GetSidSubAuthority(
/*10799*/ typ typ typ typ typ PSID pSid,
/*10800*/ typ typ typ typ typ DWORD nSubAuthority
/*10801*/ );
/*10804*/ 
/*10805*/ typ typ typ typ typ
/*10806*/ PUCHAR
/*10807*/ typ
/*10808*/ GetSidSubAuthorityCount(
/*10809*/ typ typ typ typ typ PSID pSid
/*10810*/ );
/*10813*/ 
/*10814*/ DWORD
/*10815*/ typ
/*10816*/ GetLengthSid(
/*10817*/ typ typ typ typ typ PSID pSid
/*10818*/ );
/*10821*/ 
/*10822*/ BOOL
/*10823*/ typ
/*10824*/ CopySid(
/*10825*/ typ typ typ typ typ DWORD nDestinationSidLength,
/*10826*/ typ typ typ typ typ PSID pDestinationSid,
/*10827*/ typ typ typ typ typ PSID pSourceSid
/*10828*/ );
/*10831*/ 
/*10832*/ BOOL
/*10833*/ typ
/*10834*/ AreAllAccessesGranted(
/*10835*/ typ typ typ typ typ DWORD GrantedAccess,
/*10836*/ typ typ typ typ typ DWORD DesiredAccess
/*10837*/ );
/*10840*/ 
/*10841*/ BOOL
/*10842*/ typ
/*10843*/ AreAnyAccessesGranted(
/*10844*/ typ typ typ typ typ DWORD GrantedAccess,
/*10845*/ typ typ typ typ typ DWORD DesiredAccess
/*10846*/ );
/*10849*/ 
/*10850*/ void
/*10851*/ typ
/*10852*/ MapGenericMask(
/*10853*/ typ typ typ typ typ PDWORD AccessMask,
/*10854*/ typ typ typ typ typ PGENERIC_MAPPING GenericMapping
/*10855*/ );
/*10858*/ 
/*10859*/ BOOL
/*10860*/ typ
/*10861*/ IsValidAcl(
/*10862*/ typ typ typ typ typ PACL pAcl
/*10863*/ );
/*10866*/ 
/*10867*/ BOOL
/*10868*/ typ
/*10869*/ InitializeAcl(
/*10870*/ typ typ typ typ typ PACL pAcl,
/*10871*/ typ typ typ typ typ DWORD nAclLength,
/*10872*/ typ typ typ typ typ DWORD dwAclRevision
/*10873*/ );
/*10876*/ 
/*10877*/ BOOL
/*10878*/ typ
/*10879*/ GetAclInformation(
/*10880*/ typ typ typ typ typ PACL pAcl,
/*10881*/ typ typ typ typ typ LPVOID pAclInformation,
/*10882*/ typ typ typ typ typ DWORD nAclInformationLength,
/*10883*/ typ typ typ typ typ ACL_INFORMATION_CLASS dwAclInformationClass
/*10884*/ );
/*10887*/ 
/*10888*/ BOOL
/*10889*/ typ
/*10890*/ SetAclInformation(
/*10891*/ typ typ typ typ typ PACL pAcl,
/*10892*/ typ typ typ typ typ typ typ LPVOID pAclInformation,
/*10893*/ typ typ typ typ typ DWORD nAclInformationLength,
/*10894*/ typ typ typ typ typ ACL_INFORMATION_CLASS dwAclInformationClass
/*10895*/ );
/*10898*/ 
/*10899*/ BOOL
/*10900*/ typ
/*10901*/ AddAce(
/*10902*/ typ typ typ typ typ PACL pAcl,
/*10903*/ typ typ typ typ typ DWORD dwAceRevision,
/*10904*/ typ typ typ typ typ DWORD dwStartingAceIndex,
/*10905*/ typ typ typ typ typ typ typ LPVOID pAceList,
/*10906*/ typ typ typ typ typ DWORD nAceListLength
/*10907*/ );
/*10910*/ 
/*10911*/ BOOL
/*10912*/ typ
/*10913*/ DeleteAce(
/*10914*/ typ typ typ typ typ PACL pAcl,
/*10915*/ typ typ typ typ typ DWORD dwAceIndex
/*10916*/ );
/*10919*/ 
/*10920*/ BOOL
/*10921*/ typ
/*10922*/ GetAce(
/*10923*/ typ typ typ typ typ PACL pAcl,
/*10924*/ typ typ typ typ typ DWORD dwAceIndex,
/*10925*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*pAce
/*10926*/ );
/*10929*/ 
/*10930*/ BOOL
/*10931*/ typ
/*10932*/ AddAccessAllowedAce(
/*10933*/ typ typ typ typ typ PACL pAcl,
/*10934*/ typ typ typ typ typ DWORD dwAceRevision,
/*10935*/ typ typ typ typ typ DWORD AccessMask,
/*10936*/ typ typ typ typ typ PSID pSid
/*10937*/ );
/*10965*/ 
/*10966*/ BOOL
/*10967*/ typ
/*10968*/ AddAccessDeniedAce(
/*10969*/ typ typ typ typ typ PACL pAcl,
/*10970*/ typ typ typ typ typ DWORD dwAceRevision,
/*10971*/ typ typ typ typ typ DWORD AccessMask,
/*10972*/ typ typ typ typ typ PSID pSid
/*10973*/ );
/*10988*/ 
/*10989*/ BOOL
/*10990*/ typ
/*10991*/ AddAuditAccessAce(
/*10992*/ typ typ typ typ typ PACL pAcl,
/*10993*/ typ typ typ typ typ DWORD dwAceRevision,
/*10994*/ typ typ typ typ typ DWORD dwAccessMask,
/*10995*/ typ typ typ typ typ PSID pSid,
/*10996*/ typ typ typ typ typ BOOL bAuditSuccess,
/*10997*/ typ typ typ typ typ BOOL bAuditFailure
/*10998*/ );
/*11056*/ 
/*11057*/ BOOL
/*11058*/ typ
/*11059*/ FindFirstFreeAce(
/*11060*/ typ typ typ typ typ PACL pAcl,
/*11061*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*pAce
/*11062*/ );
/*11065*/ 
/*11066*/ BOOL
/*11067*/ typ
/*11068*/ InitializeSecurityDescriptor(
/*11069*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11070*/ typ typ typ typ typ DWORD dwRevision
/*11071*/ );
/*11074*/ 
/*11075*/ BOOL
/*11076*/ typ
/*11077*/ IsValidSecurityDescriptor(
/*11078*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor
/*11079*/ );
/*11081*/ 
/*11082*/ BOOL
/*11083*/ typ
/*11084*/ IsValidRelativeSecurityDescriptor(
/*11085*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11086*/ typ typ typ typ typ ULONG SecurityDescriptorLength,
/*11087*/ typ typ typ typ typ SECURITY_INFORMATION RequiredInformation
/*11088*/ );
/*11090*/ 
/*11091*/ DWORD
/*11092*/ typ
/*11093*/ GetSecurityDescriptorLength(
/*11094*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor
/*11095*/ );
/*11098*/ 
/*11099*/ BOOL
/*11100*/ typ
/*11101*/ GetSecurityDescriptorControl(
/*11102*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11103*/ typ typ typ typ typ PSECURITY_DESCRIPTOR_CONTROL pControl,
/*11104*/ typ typ typ typ typ LPDWORD lpdwRevision
/*11105*/ );
/*11118*/ 
/*11119*/ BOOL
/*11120*/ typ
/*11121*/ SetSecurityDescriptorDacl(
/*11122*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11123*/ typ typ typ typ typ BOOL bDaclPresent,
/*11124*/ typ typ typ typ typ typ typ PACL pDacl,
/*11125*/ typ typ typ typ typ BOOL bDaclDefaulted
/*11126*/ );
/*11129*/ 
/*11130*/ BOOL
/*11131*/ typ
/*11132*/ GetSecurityDescriptorDacl(
/*11133*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11134*/ typ typ typ typ typ LPBOOL lpbDaclPresent,
/*11135*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PACL*pDacl,
/*11136*/ typ typ typ typ typ LPBOOL lpbDaclDefaulted
/*11137*/ );
/*11140*/ 
/*11141*/ BOOL
/*11142*/ typ
/*11143*/ SetSecurityDescriptorSacl(
/*11144*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11145*/ typ typ typ typ typ BOOL bSaclPresent,
/*11146*/ typ typ typ typ typ typ typ PACL pSacl,
/*11147*/ typ typ typ typ typ BOOL bSaclDefaulted
/*11148*/ );
/*11151*/ 
/*11152*/ BOOL
/*11153*/ typ
/*11154*/ GetSecurityDescriptorSacl(
/*11155*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11156*/ typ typ typ typ typ LPBOOL lpbSaclPresent,
/*11157*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PACL*pSacl,
/*11158*/ typ typ typ typ typ LPBOOL lpbSaclDefaulted
/*11159*/ );
/*11162*/ 
/*11163*/ BOOL
/*11164*/ typ
/*11165*/ SetSecurityDescriptorOwner(
/*11166*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11167*/ typ typ typ typ typ typ typ PSID pOwner,
/*11168*/ typ typ typ typ typ BOOL bOwnerDefaulted
/*11169*/ );
/*11172*/ 
/*11173*/ BOOL
/*11174*/ typ
/*11175*/ GetSecurityDescriptorOwner(
/*11176*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11177*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PSID*pOwner,
/*11178*/ typ typ typ typ typ LPBOOL lpbOwnerDefaulted
/*11179*/ );
/*11182*/ 
/*11183*/ BOOL
/*11184*/ typ
/*11185*/ SetSecurityDescriptorGroup(
/*11186*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11187*/ typ typ typ typ typ typ typ PSID pGroup,
/*11188*/ typ typ typ typ typ BOOL bGroupDefaulted
/*11189*/ );
/*11192*/ 
/*11193*/ BOOL
/*11194*/ typ
/*11195*/ GetSecurityDescriptorGroup(
/*11196*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11197*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PSID*pGroup,
/*11198*/ typ typ typ typ typ LPBOOL lpbGroupDefaulted
/*11199*/ );
/*11202*/ 
/*11203*/ DWORD
/*11204*/ typ
/*11205*/ SetSecurityDescriptorRMControl(
/*11206*/ typ typ typ typ typ PSECURITY_DESCRIPTOR SecurityDescriptor,
/*11207*/ typ typ typ typ typ typ typ PUCHAR RMControl
/*11208*/ );
/*11210*/ 
/*11211*/ DWORD
/*11212*/ typ
/*11213*/ GetSecurityDescriptorRMControl(
/*11214*/ typ typ typ typ typ PSECURITY_DESCRIPTOR SecurityDescriptor,
/*11215*/ typ typ typ typ typ PUCHAR RMControl
/*11216*/ );
/*11218*/ 
/*11219*/ BOOL
/*11220*/ typ
/*11221*/ CreatePrivateObjectSecurity(
/*11222*/ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR ParentDescriptor,
/*11223*/ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR CreatorDescriptor,
/*11224*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR*NewDescriptor,
/*11225*/ typ typ typ typ typ BOOL IsDirectoryObject,
/*11226*/ typ typ typ typ typ typ typ HANDLE Token,
/*11227*/ typ typ typ typ typ PGENERIC_MAPPING GenericMapping
/*11228*/ );
/*11273*/ 
/*11274*/ BOOL
/*11275*/ typ
/*11276*/ SetPrivateObjectSecurity(
/*11277*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*11278*/ typ typ typ typ typ PSECURITY_DESCRIPTOR ModificationDescriptor,
/*11279*/ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR*ObjectsSecurityDescriptor,
/*11280*/ typ typ typ typ typ PGENERIC_MAPPING GenericMapping,
/*11281*/ typ typ typ typ typ typ typ HANDLE Token
/*11282*/ );
/*11298*/ 
/*11299*/ BOOL
/*11300*/ typ
/*11301*/ GetPrivateObjectSecurity(
/*11302*/ typ typ typ typ typ PSECURITY_DESCRIPTOR ObjectDescriptor,
/*11303*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*11304*/ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR ResultantDescriptor,
/*11305*/ typ typ typ typ typ DWORD DescriptorLength,
/*11306*/ typ typ typ typ typ PDWORD ReturnLength
/*11307*/ );
/*11310*/ 
/*11311*/ BOOL
/*11312*/ typ
/*11313*/ DestroyPrivateObjectSecurity(
/*11314*/ typ PSECURITY_DESCRIPTOR*ObjectDescriptor
/*11315*/ );
/*11318*/ 
/*11319*/ BOOL
/*11320*/ typ
/*11321*/ MakeSelfRelativeSD(
/*11322*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
/*11323*/ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
/*11324*/ typ typ typ typ typ LPDWORD lpdwBufferLength
/*11325*/ );
/*11328*/ 
/*11329*/ BOOL
/*11330*/ typ
/*11331*/ MakeAbsoluteSD(
/*11332*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
/*11333*/ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
/*11334*/ typ typ typ typ typ LPDWORD lpdwAbsoluteSecurityDescriptorSize,
/*11335*/ typ typ typ typ typ typ typ typ typ PACL pDacl,
/*11336*/ typ typ typ typ typ LPDWORD lpdwDaclSize,
/*11337*/ typ typ typ typ typ typ typ typ typ PACL pSacl,
/*11338*/ typ typ typ typ typ LPDWORD lpdwSaclSize,
/*11339*/ typ typ typ typ typ typ typ typ typ PSID pOwner,
/*11340*/ typ typ typ typ typ LPDWORD lpdwOwnerSize,
/*11341*/ typ typ typ typ typ typ typ typ typ PSID pPrimaryGroup,
/*11342*/ typ typ typ typ typ LPDWORD lpdwPrimaryGroupSize
/*11343*/ );
/*11346*/ 
/*11347*/ BOOL
/*11348*/ typ
/*11349*/ MakeAbsoluteSD2(
/*11350*/ typ typ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
/*11351*/ typ typ typ typ typ LPDWORD lpdwBufferSize
/*11352*/ );
/*11354*/ 
/*11355*/ void
/*11356*/ typ
/*11357*/ QuerySecurityAccessMask(
/*11358*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*11359*/ typ typ typ typ typ LPDWORD DesiredAccess
/*11360*/ );
/*11362*/ 
/*11363*/ void
/*11364*/ typ
/*11365*/ SetSecurityAccessMask(
/*11366*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*11367*/ typ typ typ typ typ LPDWORD DesiredAccess
/*11368*/ );
/*11370*/ 
/*11371*/ BOOL
/*11372*/ typ
/*11373*/ SetFileSecurityA(
/*11374*/ typ typ typ typ typ LPCSTR lpFileName,
/*11375*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*11376*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor
/*11377*/ );
/*11378*/ 
/*11379*/ BOOL
/*11380*/ typ
/*11381*/ SetFileSecurityW(
/*11382*/ typ typ typ typ typ LPCWSTR lpFileName,
/*11383*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*11384*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor
/*11385*/ );
/*11393*/ 
/*11394*/ BOOL
/*11395*/ typ
/*11396*/ GetFileSecurityA(
/*11397*/ typ typ typ typ typ LPCSTR lpFileName,
/*11398*/ typ typ typ typ typ SECURITY_INFORMATION RequestedInformation,
/*11399*/ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11400*/ typ typ typ typ typ DWORD nLength,
/*11401*/ typ typ typ typ typ LPDWORD lpnLengthNeeded
/*11402*/ );
/*11403*/ 
/*11404*/ BOOL
/*11405*/ typ
/*11406*/ GetFileSecurityW(
/*11407*/ typ typ typ typ typ LPCWSTR lpFileName,
/*11408*/ typ typ typ typ typ SECURITY_INFORMATION RequestedInformation,
/*11409*/ typ typ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*11410*/ typ typ typ typ typ DWORD nLength,
/*11411*/ typ typ typ typ typ LPDWORD lpnLengthNeeded
/*11412*/ );
/*11420*/ 
/*11421*/ BOOL
/*11422*/ typ
/*11423*/ SetKernelObjectSecurity(
/*11424*/ typ typ typ typ typ HANDLE Handle,
/*11425*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*11426*/ typ typ typ typ typ PSECURITY_DESCRIPTOR SecurityDescriptor
/*11427*/ );
/*11429*/ 
/*11430*/ typ typ typ typ typ
/*11431*/ HANDLE
/*11432*/ typ
/*11433*/ FindFirstChangeNotificationA(
/*11434*/ typ typ typ typ typ LPCSTR lpPathName,
/*11435*/ typ typ typ typ typ BOOL bWatchSubtree,
/*11436*/ typ typ typ typ typ DWORD dwNotifyFilter
/*11437*/ );
/*11438*/ 
/*11439*/ typ typ typ typ typ
/*11440*/ HANDLE
/*11441*/ typ
/*11442*/ FindFirstChangeNotificationW(
/*11443*/ typ typ typ typ typ LPCWSTR lpPathName,
/*11444*/ typ typ typ typ typ BOOL bWatchSubtree,
/*11445*/ typ typ typ typ typ DWORD dwNotifyFilter
/*11446*/ );
/*11453*/ 
/*11454*/ BOOL
/*11455*/ typ
/*11456*/ FindNextChangeNotification(
/*11457*/ typ typ typ typ typ HANDLE hChangeHandle
/*11458*/ );
/*11460*/ 
/*11461*/ BOOL
/*11462*/ typ
/*11463*/ FindCloseChangeNotification(
/*11464*/ typ typ typ typ typ HANDLE hChangeHandle
/*11465*/ );
/*11483*/ 
/*11484*/ BOOL
/*11485*/ typ
/*11486*/ VirtualLock(
/*11487*/ typ typ typ typ typ LPVOID lpAddress,
/*11488*/ typ typ typ typ typ SIZE_T dwSize
/*11489*/ );
/*11491*/ 
/*11492*/ BOOL
/*11493*/ typ
/*11494*/ VirtualUnlock(
/*11495*/ typ typ typ typ typ LPVOID lpAddress,
/*11496*/ typ typ typ typ typ SIZE_T dwSize
/*11497*/ );
/*11499*/ 
/*11500*/ typ typ typ typ typ typ typ typ
/*11501*/ LPVOID
/*11502*/ typ
/*11503*/ MapViewOfFileEx(
/*11504*/ typ typ typ typ typ HANDLE hFileMappingObject,
/*11505*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*11506*/ typ typ typ typ typ DWORD dwFileOffsetHigh,
/*11507*/ typ typ typ typ typ DWORD dwFileOffsetLow,
/*11508*/ typ typ typ typ typ SIZE_T dwNumberOfBytesToMap,
/*11509*/ typ typ typ typ typ typ typ LPVOID lpBaseAddress
/*11510*/ );
/*11530*/ 
/*11531*/ BOOL
/*11532*/ typ
/*11533*/ SetPriorityClass(
/*11534*/ typ typ typ typ typ HANDLE hProcess,
/*11535*/ typ typ typ typ typ DWORD dwPriorityClass
/*11536*/ );
/*11538*/ 
/*11539*/ DWORD
/*11540*/ typ
/*11541*/ GetPriorityClass(
/*11542*/ typ typ typ typ typ HANDLE hProcess
/*11543*/ );
/*11545*/ 
/*11546*/ BOOL
/*11547*/ typ
/*11548*/ IsBadReadPtr(
/*11549*/ typ typ typ typ typ typ typ const void*lp,
/*11550*/ typ typ typ typ typ UINT_PTR ucb
/*11551*/ );
/*11553*/ 
/*11554*/ BOOL
/*11555*/ typ
/*11556*/ IsBadWritePtr(
/*11557*/ typ typ typ typ typ typ typ LPVOID lp,
/*11558*/ typ typ typ typ typ UINT_PTR ucb
/*11559*/ );
/*11561*/ 
/*11562*/ BOOL
/*11563*/ typ
/*11564*/ IsBadHugeReadPtr(
/*11565*/ typ typ typ typ typ typ typ const void*lp,
/*11566*/ typ typ typ typ typ UINT_PTR ucb
/*11567*/ );
/*11569*/ 
/*11570*/ BOOL
/*11571*/ typ
/*11572*/ IsBadHugeWritePtr(
/*11573*/ typ typ typ typ typ typ typ LPVOID lp,
/*11574*/ typ typ typ typ typ UINT_PTR ucb
/*11575*/ );
/*11577*/ 
/*11578*/ BOOL
/*11579*/ typ
/*11580*/ IsBadCodePtr(
/*11581*/ typ typ typ typ typ typ typ FARPROC lpfn
/*11582*/ );
/*11584*/ 
/*11585*/ BOOL
/*11586*/ typ
/*11587*/ IsBadStringPtrA(
/*11588*/ typ typ typ typ typ typ typ LPCSTR lpsz,
/*11589*/ typ typ typ typ typ UINT_PTR ucchMax
/*11590*/ );
/*11591*/ 
/*11592*/ BOOL
/*11593*/ typ
/*11594*/ IsBadStringPtrW(
/*11595*/ typ typ typ typ typ typ typ LPCWSTR lpsz,
/*11596*/ typ typ typ typ typ UINT_PTR ucchMax
/*11597*/ );
/*11604*/ 
/*11605*/ BOOL
/*11606*/ typ
/*11607*/ LookupAccountSidA(
/*11608*/ typ typ typ typ typ typ typ LPCSTR lpSystemName,
/*11609*/ typ typ typ typ typ PSID Sid,
/*11610*/ typ typ typ typ typ typ typ typ typ LPSTR Name,
/*11611*/ typ typ typ typ typ LPDWORD cchName,
/*11612*/ typ typ typ typ typ typ typ typ typ LPSTR ReferencedDomainName,
/*11613*/ typ typ typ typ typ LPDWORD cchReferencedDomainName,
/*11614*/ typ typ typ typ typ PSID_NAME_USE peUse
/*11615*/ );
/*11616*/ 
/*11617*/ BOOL
/*11618*/ typ
/*11619*/ LookupAccountSidW(
/*11620*/ typ typ typ typ typ typ typ LPCWSTR lpSystemName,
/*11621*/ typ typ typ typ typ PSID Sid,
/*11622*/ typ typ typ typ typ typ typ typ typ LPWSTR Name,
/*11623*/ typ typ typ typ typ LPDWORD cchName,
/*11624*/ typ typ typ typ typ typ typ typ typ LPWSTR ReferencedDomainName,
/*11625*/ typ typ typ typ typ LPDWORD cchReferencedDomainName,
/*11626*/ typ typ typ typ typ PSID_NAME_USE peUse
/*11627*/ );
/*11634*/ 
/*11635*/ BOOL
/*11636*/ typ
/*11637*/ LookupAccountNameA(
/*11638*/ typ typ typ typ typ typ typ LPCSTR lpSystemName,
/*11639*/ typ typ typ typ typ LPCSTR lpAccountName,
/*11640*/ typ typ typ typ typ typ typ typ typ PSID Sid,
/*11641*/ typ typ typ typ typ LPDWORD cbSid,
/*11642*/ typ typ typ typ typ typ typ typ typ LPSTR ReferencedDomainName,
/*11643*/ typ typ typ typ typ LPDWORD cchReferencedDomainName,
/*11644*/ typ typ typ typ typ PSID_NAME_USE peUse
/*11645*/ );
/*11646*/ 
/*11647*/ BOOL
/*11648*/ typ
/*11649*/ LookupAccountNameW(
/*11650*/ typ typ typ typ typ typ typ LPCWSTR lpSystemName,
/*11651*/ typ typ typ typ typ LPCWSTR lpAccountName,
/*11652*/ typ typ typ typ typ typ typ typ typ PSID Sid,
/*11653*/ typ typ typ typ typ LPDWORD cbSid,
/*11654*/ typ typ typ typ typ typ typ typ typ LPWSTR ReferencedDomainName,
/*11655*/ typ typ typ typ typ LPDWORD cchReferencedDomainName,
/*11656*/ typ typ typ typ typ PSID_NAME_USE peUse
/*11657*/ );
/*11664*/ 
/*11665*/ BOOL
/*11666*/ typ
/*11667*/ LookupPrivilegeValueA(
/*11668*/ typ typ typ typ typ typ typ LPCSTR lpSystemName,
/*11669*/ typ typ typ typ typ LPCSTR lpName,
/*11670*/ typ typ typ typ typ PLUID lpLuid
/*11671*/ );
/*11672*/ 
/*11673*/ BOOL
/*11674*/ typ
/*11675*/ LookupPrivilegeValueW(
/*11676*/ typ typ typ typ typ typ typ LPCWSTR lpSystemName,
/*11677*/ typ typ typ typ typ LPCWSTR lpName,
/*11678*/ typ typ typ typ typ PLUID lpLuid
/*11679*/ );
/*11686*/ 
/*11687*/ BOOL
/*11688*/ typ
/*11689*/ LookupPrivilegeNameA(
/*11690*/ typ typ typ typ typ typ typ LPCSTR lpSystemName,
/*11691*/ typ typ typ typ typ PLUID lpLuid,
/*11692*/ typ typ typ typ typ typ typ typ typ LPSTR lpName,
/*11693*/ typ typ typ typ typ LPDWORD cchName
/*11694*/ );
/*11695*/ 
/*11696*/ BOOL
/*11697*/ typ
/*11698*/ LookupPrivilegeNameW(
/*11699*/ typ typ typ typ typ typ typ LPCWSTR lpSystemName,
/*11700*/ typ typ typ typ typ PLUID lpLuid,
/*11701*/ typ typ typ typ typ typ typ typ typ LPWSTR lpName,
/*11702*/ typ typ typ typ typ LPDWORD cchName
/*11703*/ );
/*11710*/ 
/*11711*/ BOOL
/*11712*/ typ
/*11713*/ LookupPrivilegeDisplayNameA(
/*11714*/ typ typ typ typ typ typ typ LPCSTR lpSystemName,
/*11715*/ typ typ typ typ typ LPCSTR lpName,
/*11716*/ typ typ typ typ typ typ typ typ typ LPSTR lpDisplayName,
/*11717*/ typ typ typ typ typ LPDWORD cchDisplayName,
/*11718*/ typ typ typ typ typ LPDWORD lpLanguageId
/*11719*/ );
/*11720*/ 
/*11721*/ BOOL
/*11722*/ typ
/*11723*/ LookupPrivilegeDisplayNameW(
/*11724*/ typ typ typ typ typ typ typ LPCWSTR lpSystemName,
/*11725*/ typ typ typ typ typ LPCWSTR lpName,
/*11726*/ typ typ typ typ typ typ typ typ typ LPWSTR lpDisplayName,
/*11727*/ typ typ typ typ typ LPDWORD cchDisplayName,
/*11728*/ typ typ typ typ typ LPDWORD lpLanguageId
/*11729*/ );
/*11736*/ 
/*11737*/ BOOL
/*11738*/ typ
/*11739*/ AllocateLocallyUniqueId(
/*11740*/ typ typ typ typ typ PLUID Luid
/*11741*/ );
/*11743*/ 
/*11744*/ BOOL
/*11745*/ typ
/*11746*/ BuildCommDCBA(
/*11747*/ typ typ typ typ typ LPCSTR lpDef,
/*11748*/ typ typ typ typ typ LPDCB lpDCB
/*11749*/ );
/*11750*/ 
/*11751*/ BOOL
/*11752*/ typ
/*11753*/ BuildCommDCBW(
/*11754*/ typ typ typ typ typ LPCWSTR lpDef,
/*11755*/ typ typ typ typ typ LPDCB lpDCB
/*11756*/ );
/*11763*/ 
/*11764*/ BOOL
/*11765*/ typ
/*11766*/ BuildCommDCBAndTimeoutsA(
/*11767*/ typ typ typ typ typ LPCSTR lpDef,
/*11768*/ typ typ typ typ typ LPDCB lpDCB,
/*11769*/ typ typ typ typ typ LPCOMMTIMEOUTS lpCommTimeouts
/*11770*/ );
/*11771*/ 
/*11772*/ BOOL
/*11773*/ typ
/*11774*/ BuildCommDCBAndTimeoutsW(
/*11775*/ typ typ typ typ typ LPCWSTR lpDef,
/*11776*/ typ typ typ typ typ LPDCB lpDCB,
/*11777*/ typ typ typ typ typ LPCOMMTIMEOUTS lpCommTimeouts
/*11778*/ );
/*11785*/ 
/*11786*/ BOOL
/*11787*/ typ
/*11788*/ CommConfigDialogA(
/*11789*/ typ typ typ typ typ LPCSTR lpszName,
/*11790*/ typ typ typ typ typ typ typ HWND hWnd,
/*11791*/ typ typ typ typ typ LPCOMMCONFIG lpCC
/*11792*/ );
/*11793*/ 
/*11794*/ BOOL
/*11795*/ typ
/*11796*/ CommConfigDialogW(
/*11797*/ typ typ typ typ typ LPCWSTR lpszName,
/*11798*/ typ typ typ typ typ typ typ HWND hWnd,
/*11799*/ typ typ typ typ typ LPCOMMCONFIG lpCC
/*11800*/ );
/*11807*/ 
/*11808*/ BOOL
/*11809*/ typ
/*11810*/ GetDefaultCommConfigA(
/*11811*/ typ typ typ typ typ LPCSTR lpszName,
/*11812*/ typ typ typ typ typ typ typ LPCOMMCONFIG lpCC,
/*11813*/ typ typ typ typ typ LPDWORD lpdwSize
/*11814*/ );
/*11815*/ 
/*11816*/ BOOL
/*11817*/ typ
/*11818*/ GetDefaultCommConfigW(
/*11819*/ typ typ typ typ typ LPCWSTR lpszName,
/*11820*/ typ typ typ typ typ typ typ LPCOMMCONFIG lpCC,
/*11821*/ typ typ typ typ typ LPDWORD lpdwSize
/*11822*/ );
/*11829*/ 
/*11830*/ BOOL
/*11831*/ typ
/*11832*/ SetDefaultCommConfigA(
/*11833*/ typ typ typ typ typ LPCSTR lpszName,
/*11834*/ typ typ typ typ typ typ typ LPCOMMCONFIG lpCC,
/*11835*/ typ typ typ typ typ DWORD dwSize
/*11836*/ );
/*11837*/ 
/*11838*/ BOOL
/*11839*/ typ
/*11840*/ SetDefaultCommConfigW(
/*11841*/ typ typ typ typ typ LPCWSTR lpszName,
/*11842*/ typ typ typ typ typ typ typ LPCOMMCONFIG lpCC,
/*11843*/ typ typ typ typ typ DWORD dwSize
/*11844*/ );
/*11857*/ 
/*11858*/ typ
/*11859*/ BOOL
/*11860*/ typ
/*11861*/ GetComputerNameA(
/*11862*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*11863*/ typ typ typ typ typ LPDWORD nSize
/*11864*/ );
/*11865*/ 
/*11866*/ typ
/*11867*/ BOOL
/*11868*/ typ
/*11869*/ GetComputerNameW(
/*11870*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*11871*/ typ typ typ typ typ LPDWORD nSize
/*11872*/ );
/*11879*/ 
/*11880*/ BOOL
/*11881*/ typ
/*11882*/ SetComputerNameA(
/*11883*/ typ typ typ typ typ LPCSTR lpComputerName
/*11884*/ );
/*11885*/ 
/*11886*/ BOOL
/*11887*/ typ
/*11888*/ SetComputerNameW(
/*11889*/ typ typ typ typ typ LPCWSTR lpComputerName
/*11890*/ );
/*11983*/ 
/*11984*/ BOOL
/*11985*/ typ
/*11986*/ GetUserNameA(
/*11987*/ typ typ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*11988*/ typ typ typ typ typ LPDWORD pcbBuffer
/*11989*/ );
/*11990*/ 
/*11991*/ BOOL
/*11992*/ typ
/*11993*/ GetUserNameW(
/*11994*/ typ typ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*11995*/ typ typ typ typ typ LPDWORD pcbBuffer
/*11996*/ );
/*12028*/ 
/*12029*/ BOOL
/*12030*/ typ
/*12031*/ LogonUserA(
/*12032*/ typ typ typ typ typ LPCSTR lpszUsername,
/*12033*/ typ typ typ typ typ typ typ LPCSTR lpszDomain,
/*12034*/ typ typ typ typ typ LPCSTR lpszPassword,
/*12035*/ typ typ typ typ typ DWORD dwLogonType,
/*12036*/ typ typ typ typ typ DWORD dwLogonProvider,
/*12037*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE phToken
/*12038*/ );
/*12039*/ 
/*12040*/ BOOL
/*12041*/ typ
/*12042*/ LogonUserW(
/*12043*/ typ typ typ typ typ LPCWSTR lpszUsername,
/*12044*/ typ typ typ typ typ typ typ LPCWSTR lpszDomain,
/*12045*/ typ typ typ typ typ LPCWSTR lpszPassword,
/*12046*/ typ typ typ typ typ DWORD dwLogonType,
/*12047*/ typ typ typ typ typ DWORD dwLogonProvider,
/*12048*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE phToken
/*12049*/ );
/*12056*/ 
/*12057*/ BOOL
/*12058*/ typ
/*12059*/ LogonUserExA(
/*12060*/ typ typ typ typ typ LPCSTR lpszUsername,
/*12061*/ typ typ typ typ typ typ typ LPCSTR lpszDomain,
/*12062*/ typ typ typ typ typ LPCSTR lpszPassword,
/*12063*/ typ typ typ typ typ DWORD dwLogonType,
/*12064*/ typ typ typ typ typ DWORD dwLogonProvider,
/*12065*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE phToken,
/*12066*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PSID*ppLogonSid,
/*12067*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*ppProfileBuffer,
/*12068*/ typ typ typ typ typ typ typ LPDWORD pdwProfileLength,
/*12069*/ typ typ typ typ typ typ typ PQUOTA_LIMITS pQuotaLimits
/*12070*/ );
/*12071*/ 
/*12072*/ BOOL
/*12073*/ typ
/*12074*/ LogonUserExW(
/*12075*/ typ typ typ typ typ LPCWSTR lpszUsername,
/*12076*/ typ typ typ typ typ typ typ LPCWSTR lpszDomain,
/*12077*/ typ typ typ typ typ LPCWSTR lpszPassword,
/*12078*/ typ typ typ typ typ DWORD dwLogonType,
/*12079*/ typ typ typ typ typ DWORD dwLogonProvider,
/*12080*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE phToken,
/*12081*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PSID*ppLogonSid,
/*12082*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*ppProfileBuffer,
/*12083*/ typ typ typ typ typ typ typ LPDWORD pdwProfileLength,
/*12084*/ typ typ typ typ typ typ typ PQUOTA_LIMITS pQuotaLimits
/*12085*/ );
/*12098*/ 
/*12099*/ BOOL
/*12100*/ typ
/*12101*/ ImpersonateLoggedOnUser(
/*12102*/ typ typ typ typ typ HANDLE hToken
/*12103*/ );
/*12105*/ 
/*12106*/ BOOL
/*12107*/ typ
/*12108*/ CreateProcessAsUserA(
/*12109*/ typ typ typ typ typ typ typ HANDLE hToken,
/*12110*/ typ typ typ typ typ typ typ LPCSTR lpApplicationName,
/*12111*/ typ typ typ typ typ typ typ LPSTR lpCommandLine,
/*12112*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpProcessAttributes,
/*12113*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpThreadAttributes,
/*12114*/ typ typ typ typ typ BOOL bInheritHandles,
/*12115*/ typ typ typ typ typ DWORD dwCreationFlags,
/*12116*/ typ typ typ typ typ typ typ LPVOID lpEnvironment,
/*12117*/ typ typ typ typ typ typ typ LPCSTR lpCurrentDirectory,
/*12118*/ typ typ typ typ typ LPSTARTUPINFOA lpStartupInfo,
/*12119*/ typ typ typ typ typ LPPROCESS_INFORMATION lpProcessInformation
/*12120*/ );
/*12121*/ 
/*12122*/ BOOL
/*12123*/ typ
/*12124*/ CreateProcessAsUserW(
/*12125*/ typ typ typ typ typ typ typ HANDLE hToken,
/*12126*/ typ typ typ typ typ typ typ LPCWSTR lpApplicationName,
/*12127*/ typ typ typ typ typ typ typ LPWSTR lpCommandLine,
/*12128*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpProcessAttributes,
/*12129*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpThreadAttributes,
/*12130*/ typ typ typ typ typ BOOL bInheritHandles,
/*12131*/ typ typ typ typ typ DWORD dwCreationFlags,
/*12132*/ typ typ typ typ typ typ typ LPVOID lpEnvironment,
/*12133*/ typ typ typ typ typ typ typ LPCWSTR lpCurrentDirectory,
/*12134*/ typ typ typ typ typ LPSTARTUPINFOW lpStartupInfo,
/*12135*/ typ typ typ typ typ LPPROCESS_INFORMATION lpProcessInformation
/*12136*/ );
/*12187*/ 
/*12188*/ BOOL
/*12189*/ typ
/*12190*/ ImpersonateAnonymousToken(
/*12191*/ typ typ typ typ typ HANDLE ThreadHandle
/*12192*/ );
/*12194*/ 
/*12195*/ BOOL
/*12196*/ typ
/*12197*/ DuplicateTokenEx(
/*12198*/ typ typ typ typ typ HANDLE hExistingToken,
/*12199*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*12200*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpTokenAttributes,
/*12201*/ typ typ typ typ typ SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
/*12202*/ typ typ typ typ typ TOKEN_TYPE TokenType,
/*12203*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE phNewToken);
/*12205*/ 
/*12206*/ BOOL
/*12207*/ typ
/*12208*/ CreateRestrictedToken(
/*12209*/ typ typ typ typ typ HANDLE ExistingTokenHandle,
/*12210*/ typ typ typ typ typ DWORD Flags,
/*12211*/ typ typ typ typ typ DWORD DisableSidCount,
/*12212*/ typ typ typ typ typ typ typ typ typ PSID_AND_ATTRIBUTES SidsToDisable,
/*12213*/ typ typ typ typ typ DWORD DeletePrivilegeCount,
/*12214*/ typ typ typ typ typ typ typ typ typ PLUID_AND_ATTRIBUTES PrivilegesToDelete,
/*12215*/ typ typ typ typ typ DWORD RestrictedSidCount,
/*12216*/ typ typ typ typ typ typ typ typ typ PSID_AND_ATTRIBUTES SidsToRestrict,
/*12217*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PHANDLE NewTokenHandle
/*12218*/ );
/*12221*/ 
/*12222*/ BOOL
/*12223*/ typ
/*12224*/ IsTokenRestricted(
/*12225*/ typ typ typ typ typ HANDLE TokenHandle
/*12226*/ );
/*12228*/ 
/*12229*/ BOOL
/*12230*/ typ
/*12231*/ IsTokenUntrusted(
/*12232*/ typ typ typ typ typ HANDLE TokenHandle
/*12233*/ );
/*12235*/ 
/*12236*/ BOOL
/*12237*/ typ
/*12238*/ CheckTokenMembership(
/*12239*/ typ typ typ typ typ typ typ HANDLE TokenHandle,
/*12240*/ typ typ typ typ typ PSID SidToCheck,
/*12241*/ typ typ typ typ typ PBOOL IsMember
/*12242*/ );
/*12901*/ 
/*12902*/ BOOL
/*12903*/ typ
/*12904*/ QueryPerformanceCounter(
/*12905*/ typ typ typ typ typ LARGE_INTEGER*lpPerformanceCount
/*12906*/ );
/*12908*/ 
/*12909*/ BOOL
/*12910*/ typ
/*12911*/ QueryPerformanceFrequency(
/*12912*/ typ typ typ typ typ LARGE_INTEGER*lpFrequency
/*12913*/ );
/*12917*/ 
/*12918*/ BOOL
/*12919*/ typ
/*12920*/ GetVersionExA(
/*12921*/ typ typ typ typ typ LPOSVERSIONINFOA lpVersionInformation
/*12922*/ );
/*12923*/ 
/*12924*/ BOOL
/*12925*/ typ
/*12926*/ GetVersionExW(
/*12927*/ typ typ typ typ typ LPOSVERSIONINFOW lpVersionInformation
/*12928*/ );
/*12937*/ 
/*12938*/ BOOL
/*12939*/ typ
/*12940*/ VerifyVersionInfoA(
/*12941*/ typ typ typ typ typ LPOSVERSIONINFOEXA lpVersionInformation,
/*12942*/ typ typ typ typ typ DWORD dwTypeMask,
/*12943*/ typ typ typ typ typ DWORDLONG dwlConditionMask
/*12944*/ );
/*12945*/ 
/*12946*/ BOOL
/*12947*/ typ
/*12948*/ VerifyVersionInfoW(
/*12949*/ typ typ typ typ typ LPOSVERSIONINFOEXW lpVersionInformation,
/*12950*/ typ typ typ typ typ DWORD dwTypeMask,
/*12951*/ typ typ typ typ typ DWORDLONG dwlConditionMask
/*12952*/ );
/*"winerror.h"23072*/ __inline HRESULT HRESULT_FROM_WIN32(unsigned long x){return(HRESULT)(x)<=0?(HRESULT)(x):(HRESULT)(((x)&0x0000FFFF)|(7<<16)|0x80000000);}
/*"winbase.h"13008*/ typedef struct _SYSTEM_POWER_STATUS{
/*13009*/ BYTE ACLineStatus;
/*13010*/ BYTE BatteryFlag;
/*13011*/ BYTE BatteryLifePercent;
/*13012*/ BYTE Reserved1;
/*13013*/ DWORD BatteryLifeTime;
/*13014*/ DWORD BatteryFullLifeTime;
/*13015*/ }SYSTEM_POWER_STATUS,*LPSYSTEM_POWER_STATUS;
/*13017*/ BOOL
/*13018*/ typ
/*13019*/ GetSystemPowerStatus(
/*13020*/ typ typ typ typ typ LPSYSTEM_POWER_STATUS lpSystemPowerStatus
/*13021*/ );
/*13023*/ BOOL
/*13024*/ typ
/*13025*/ SetSystemPowerState(
/*13026*/ typ typ typ typ typ BOOL fSuspend,
/*13027*/ typ typ typ typ typ BOOL fForce
/*13028*/ );
/*13719*/ 
/*13720*/ BOOL
/*13721*/ typ
/*13722*/ ProcessIdToSessionId(
/*13723*/ typ typ typ typ typ DWORD dwProcessId,
/*13724*/ typ typ typ typ typ DWORD*pSessionId
/*13725*/ );
/*13746*/ 
/*13747*/ BOOL
/*13748*/ typ
/*13749*/ GetLogicalProcessorInformation(
/*13750*/ typ typ typ typ typ typ typ PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
/*13751*/ typ typ typ typ typ PDWORD ReturnedLength
/*13752*/ );
/*13758*/ 
/*13759*/ BOOL
/*13760*/ typ
/*13761*/ GetNumaHighestNodeNumber(
/*13762*/ typ typ typ typ typ PULONG HighestNodeNumber
/*13763*/ );
/*13765*/ 
/*13766*/ BOOL
/*13767*/ typ
/*13768*/ GetNumaProcessorNode(
/*13769*/ typ typ typ typ typ UCHAR Processor,
/*13770*/ typ typ typ typ typ PUCHAR NodeNumber
/*13771*/ );
/*13773*/ 
/*13774*/ BOOL
/*13775*/ typ
/*13776*/ GetNumaNodeProcessorMask(
/*13777*/ typ typ typ typ typ UCHAR Node,
/*13778*/ typ typ typ typ typ PULONGLONG ProcessorMask
/*13779*/ );
/*13781*/ 
/*13782*/ BOOL
/*13783*/ typ
/*13784*/ GetNumaAvailableMemoryNode(
/*13785*/ typ typ typ typ typ UCHAR Node,
/*13786*/ typ typ typ typ typ PULONGLONG AvailableBytes
/*13787*/ );
/*13804*/ typedef DWORD(typ*APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
/*13832*/ 
/*13833*/ HRESULT
/*13834*/ typ
/*13835*/ RegisterApplicationRecoveryCallback(
/*13836*/ typ typ typ typ typ APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
/*13837*/ typ typ typ typ typ typ typ PVOID pvParameter,
/*13838*/ typ typ typ typ typ DWORD dwPingInterval,
/*13839*/ typ typ typ typ typ DWORD dwFlags
/*13840*/ );
/*13842*/ 
/*13843*/ HRESULT
/*13844*/ typ
/*13845*/ UnregisterApplicationRecoveryCallback(void);
/*13847*/ 
/*13848*/ HRESULT
/*13849*/ typ
/*13850*/ RegisterApplicationRestart(
/*13851*/ typ typ typ typ typ typ typ PCWSTR pwzCommandline,
/*13852*/ typ typ typ typ typ DWORD dwFlags
/*13853*/ );
/*13855*/ 
/*13856*/ HRESULT
/*13857*/ typ
/*13858*/ UnregisterApplicationRestart(void);
/*13864*/ 
/*13865*/ HRESULT
/*13866*/ typ
/*13867*/ GetApplicationRecoveryCallback(
/*13868*/ typ typ typ typ typ HANDLE hProcess,
/*13869*/ typ typ typ typ typ APPLICATION_RECOVERY_CALLBACK*pRecoveryCallback,
/*13870*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PVOID*ppvParameter,
/*13871*/ typ typ typ typ typ typ typ PDWORD pdwPingInterval,
/*13872*/ typ typ typ typ typ typ typ PDWORD pdwFlags
/*13873*/ );
/*13875*/ 
/*13876*/ HRESULT
/*13877*/ typ
/*13878*/ GetApplicationRestartSettings(
/*13879*/ typ typ typ typ typ HANDLE hProcess,
/*13880*/ typ typ typ typ typ typ typ PWSTR pwzCommandline,
/*13881*/ typ typ typ typ typ PDWORD pcchSize,
/*13882*/ typ typ typ typ typ typ typ PDWORD pdwFlags
/*13883*/ );
/*13885*/ 
/*13886*/ HRESULT
/*13887*/ typ
/*13888*/ ApplicationRecoveryInProgress(
/*13889*/ typ typ typ typ typ PBOOL pbCancelled
/*13890*/ );
/*13892*/ 
/*13893*/ void
/*13894*/ typ
/*13895*/ ApplicationRecoveryFinished(
/*13896*/ typ typ typ typ typ BOOL bSuccess
/*13897*/ );
/*276*/ typedef struct _DRAWPATRECT{
/*277*/ POINT ptPosition;
/*278*/ POINT ptSize;
/*279*/ WORD wStyle;
/*280*/ WORD wPattern;
/*281*/ }DRAWPATRECT,*PDRAWPATRECT;
/*401*/ typedef struct _PSINJECTDATA{
/*403*/ DWORD DataBytes;
/*404*/ WORD InjectionPoint;
/*405*/ WORD PageNumber;
/*409*/ }PSINJECTDATA,*PPSINJECTDATA;
/*477*/ typedef struct _PSFEATURE_OUTPUT{
/*479*/ BOOL bPageIndependent;
/*480*/ BOOL bSetPageDevice;
/*482*/ }PSFEATURE_OUTPUT,*PPSFEATURE_OUTPUT;
/*488*/ typedef struct _PSFEATURE_CUSTPAPER{
/*490*/ LONG lOrientation;
/*491*/ LONG lWidth;
/*492*/ LONG lHeight;
/*493*/ LONG lWidthOffset;
/*494*/ LONG lHeightOffset;
/*496*/ }PSFEATURE_CUSTPAPER,*PPSFEATURE_CUSTPAPER;
/*547*/ typedef struct tagXFORM
/*548*/ {
/*549*/ FLOAT eM11;
/*550*/ FLOAT eM12;
/*551*/ FLOAT eM21;
/*552*/ FLOAT eM22;
/*553*/ FLOAT eDx;
/*554*/ FLOAT eDy;
/*555*/ }XFORM,*PXFORM,typ*LPXFORM;
/*558*/ typedef struct tagBITMAP
/*559*/ {
/*560*/ LONG bmType;
/*561*/ LONG bmWidth;
/*562*/ LONG bmHeight;
/*563*/ LONG bmWidthBytes;
/*564*/ WORD bmPlanes;
/*565*/ WORD bmBitsPixel;
/*566*/ LPVOID bmBits;
/*567*/ }BITMAP,*PBITMAP,typ*NPBITMAP,typ*LPBITMAP;
/*570*/ typedef struct tagRGBTRIPLE{
/*571*/ BYTE rgbtBlue;
/*572*/ BYTE rgbtGreen;
/*573*/ BYTE rgbtRed;
/*574*/ }RGBTRIPLE,*PRGBTRIPLE,typ*NPRGBTRIPLE,typ*LPRGBTRIPLE;
/*577*/ typedef struct tagRGBQUAD{
/*578*/ BYTE rgbBlue;
/*579*/ BYTE rgbGreen;
/*580*/ BYTE rgbRed;
/*581*/ BYTE rgbReserved;
/*582*/ }RGBQUAD;
/*583*/ typedef RGBQUAD typ*LPRGBQUAD;
/*602*/ typedef LONG LCSCSTYPE;
/*605*/ typedef LONG LCSGAMUTMATCH;
/*632*/ typedef long FXPT16DOT16,typ*LPFXPT16DOT16;
/*633*/ typedef long FXPT2DOT30,typ*LPFXPT2DOT30;
/*638*/ typedef struct tagCIEXYZ
/*639*/ {
/*640*/ FXPT2DOT30 ciexyzX;
/*641*/ FXPT2DOT30 ciexyzY;
/*642*/ FXPT2DOT30 ciexyzZ;
/*643*/ }CIEXYZ;
/*644*/ typedef CIEXYZ typ*LPCIEXYZ;
/*646*/ typedef struct tagICEXYZTRIPLE
/*647*/ {
/*648*/ CIEXYZ ciexyzRed;
/*649*/ CIEXYZ ciexyzGreen;
/*650*/ CIEXYZ ciexyzBlue;
/*651*/ }CIEXYZTRIPLE;
/*652*/ typedef CIEXYZTRIPLE typ*LPCIEXYZTRIPLE;
/*659*/ typedef struct tagLOGCOLORSPACEA{
/*660*/ DWORD lcsSignature;
/*661*/ DWORD lcsVersion;
/*662*/ DWORD lcsSize;
/*663*/ LCSCSTYPE lcsCSType;
/*664*/ LCSGAMUTMATCH lcsIntent;
/*665*/ CIEXYZTRIPLE lcsEndpoints;
/*666*/ DWORD lcsGammaRed;
/*667*/ DWORD lcsGammaGreen;
/*668*/ DWORD lcsGammaBlue;
/*669*/ CHAR lcsFilename[260];
/*670*/ }LOGCOLORSPACEA,*LPLOGCOLORSPACEA;
/*671*/ typedef struct tagLOGCOLORSPACEW{
/*672*/ DWORD lcsSignature;
/*673*/ DWORD lcsVersion;
/*674*/ DWORD lcsSize;
/*675*/ LCSCSTYPE lcsCSType;
/*676*/ LCSGAMUTMATCH lcsIntent;
/*677*/ CIEXYZTRIPLE lcsEndpoints;
/*678*/ DWORD lcsGammaRed;
/*679*/ DWORD lcsGammaGreen;
/*680*/ DWORD lcsGammaBlue;
/*681*/ WCHAR lcsFilename[260];
/*682*/ }LOGCOLORSPACEW,*LPLOGCOLORSPACEW;
/*687*/ typedef LOGCOLORSPACEA LOGCOLORSPACE;
/*688*/ typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
/*694*/ typedef struct tagBITMAPCOREHEADER{
/*695*/ DWORD bcSize;
/*696*/ WORD bcWidth;
/*697*/ WORD bcHeight;
/*698*/ WORD bcPlanes;
/*699*/ WORD bcBitCount;
/*700*/ }BITMAPCOREHEADER,typ*LPBITMAPCOREHEADER,*PBITMAPCOREHEADER;
/*702*/ typedef struct tagBITMAPINFOHEADER{
/*703*/ DWORD biSize;
/*704*/ LONG biWidth;
/*705*/ LONG biHeight;
/*706*/ WORD biPlanes;
/*707*/ WORD biBitCount;
/*708*/ DWORD biCompression;
/*709*/ DWORD biSizeImage;
/*710*/ LONG biXPelsPerMeter;
/*711*/ LONG biYPelsPerMeter;
/*712*/ DWORD biClrUsed;
/*713*/ DWORD biClrImportant;
/*714*/ }BITMAPINFOHEADER,typ*LPBITMAPINFOHEADER,*PBITMAPINFOHEADER;
/*717*/ typedef struct{
/*718*/ DWORD bV4Size;
/*719*/ LONG bV4Width;
/*720*/ LONG bV4Height;
/*721*/ WORD bV4Planes;
/*722*/ WORD bV4BitCount;
/*723*/ DWORD bV4V4Compression;
/*724*/ DWORD bV4SizeImage;
/*725*/ LONG bV4XPelsPerMeter;
/*726*/ LONG bV4YPelsPerMeter;
/*727*/ DWORD bV4ClrUsed;
/*728*/ DWORD bV4ClrImportant;
/*729*/ DWORD bV4RedMask;
/*730*/ DWORD bV4GreenMask;
/*731*/ DWORD bV4BlueMask;
/*732*/ DWORD bV4AlphaMask;
/*733*/ DWORD bV4CSType;
/*734*/ CIEXYZTRIPLE bV4Endpoints;
/*735*/ DWORD bV4GammaRed;
/*736*/ DWORD bV4GammaGreen;
/*737*/ DWORD bV4GammaBlue;
/*738*/ }BITMAPV4HEADER,typ*LPBITMAPV4HEADER,*PBITMAPV4HEADER;
/*742*/ typedef struct{
/*743*/ DWORD bV5Size;
/*744*/ LONG bV5Width;
/*745*/ LONG bV5Height;
/*746*/ WORD bV5Planes;
/*747*/ WORD bV5BitCount;
/*748*/ DWORD bV5Compression;
/*749*/ DWORD bV5SizeImage;
/*750*/ LONG bV5XPelsPerMeter;
/*751*/ LONG bV5YPelsPerMeter;
/*752*/ DWORD bV5ClrUsed;
/*753*/ DWORD bV5ClrImportant;
/*754*/ DWORD bV5RedMask;
/*755*/ DWORD bV5GreenMask;
/*756*/ DWORD bV5BlueMask;
/*757*/ DWORD bV5AlphaMask;
/*758*/ DWORD bV5CSType;
/*759*/ CIEXYZTRIPLE bV5Endpoints;
/*760*/ DWORD bV5GammaRed;
/*761*/ DWORD bV5GammaGreen;
/*762*/ DWORD bV5GammaBlue;
/*763*/ DWORD bV5Intent;
/*764*/ DWORD bV5ProfileData;
/*765*/ DWORD bV5ProfileSize;
/*766*/ DWORD bV5Reserved;
/*767*/ }BITMAPV5HEADER,typ*LPBITMAPV5HEADER,*PBITMAPV5HEADER;
/*784*/ typedef struct tagBITMAPINFO{
/*785*/ BITMAPINFOHEADER bmiHeader;
/*786*/ RGBQUAD bmiColors[1];
/*787*/ }BITMAPINFO,typ*LPBITMAPINFO,*PBITMAPINFO;
/*789*/ typedef struct tagBITMAPCOREINFO{
/*790*/ BITMAPCOREHEADER bmciHeader;
/*791*/ RGBTRIPLE bmciColors[1];
/*792*/ }BITMAPCOREINFO,typ*LPBITMAPCOREINFO,*PBITMAPCOREINFO;
/*795*/ typedef struct tagBITMAPFILEHEADER{
/*796*/ WORD bfType;
/*797*/ DWORD bfSize;
/*798*/ WORD bfReserved1;
/*799*/ WORD bfReserved2;
/*800*/ DWORD bfOffBits;
/*801*/ }BITMAPFILEHEADER,typ*LPBITMAPFILEHEADER,*PBITMAPFILEHEADER;
/*808*/ typedef struct tagFONTSIGNATURE
/*809*/ {
/*810*/ DWORD fsUsb[4];
/*811*/ DWORD fsCsb[2];
/*812*/ }FONTSIGNATURE,*PFONTSIGNATURE,typ*LPFONTSIGNATURE;
/*814*/ typedef struct tagCHARSETINFO
/*815*/ {
/*816*/ UINT ciCharset;
/*817*/ UINT ciACP;
/*818*/ FONTSIGNATURE fs;
/*819*/ }CHARSETINFO,*PCHARSETINFO,typ*NPCHARSETINFO,typ*LPCHARSETINFO;
/*828*/ typedef struct tagLOCALESIGNATURE
/*829*/ {
/*830*/ DWORD lsUsb[4];
/*831*/ DWORD lsCsbDefault[2];
/*832*/ DWORD lsCsbSupported[2];
/*833*/ }LOCALESIGNATURE,*PLOCALESIGNATURE,typ*LPLOCALESIGNATURE;
/*842*/ typedef struct tagHANDLETABLE
/*843*/ {
/*844*/ HGDIOBJ objectHandle[1];
/*845*/ }HANDLETABLE,*PHANDLETABLE,typ*LPHANDLETABLE;
/*847*/ typedef struct tagMETARECORD
/*848*/ {
/*849*/ DWORD rdSize;
/*850*/ WORD rdFunction;
/*851*/ WORD rdParm[1];
/*852*/ }METARECORD;
/*853*/ typedef struct tagMETARECORD*PMETARECORD;
/*854*/ typedef struct tagMETARECORD typ*LPMETARECORD;
/*856*/ typedef struct tagMETAFILEPICT
/*857*/ {
/*858*/ LONG mm;
/*859*/ LONG xExt;
/*860*/ LONG yExt;
/*861*/ HMETAFILE hMF;
/*862*/ }METAFILEPICT,typ*LPMETAFILEPICT;
/*865*/ typedef struct tagMETAHEADER
/*866*/ {
/*867*/ WORD mtType;
/*868*/ WORD mtHeaderSize;
/*869*/ WORD mtVersion;
/*870*/ DWORD mtSize;
/*871*/ WORD mtNoObjects;
/*872*/ DWORD mtMaxRecord;
/*873*/ WORD mtNoParameters;
/*874*/ }METAHEADER;
/*875*/ typedef struct tagMETAHEADER*PMETAHEADER;
/*876*/ typedef struct tagMETAHEADER typ*LPMETAHEADER;
/*881*/ typedef struct tagENHMETARECORD
/*882*/ {
/*883*/ DWORD iType;
/*884*/ DWORD nSize;
/*885*/ DWORD dParm[1];
/*886*/ }ENHMETARECORD,*PENHMETARECORD,*LPENHMETARECORD;
/*888*/ typedef struct tagENHMETAHEADER
/*889*/ {
/*890*/ DWORD iType;
/*891*/ DWORD nSize;
/*893*/ RECTL rclBounds;
/*894*/ RECTL rclFrame;
/*895*/ DWORD dSignature;
/*896*/ DWORD nVersion;
/*897*/ DWORD nBytes;
/*898*/ DWORD nRecords;
/*899*/ WORD nHandles;
/*901*/ WORD sReserved;
/*902*/ DWORD nDescription;
/*904*/ DWORD offDescription;
/*906*/ DWORD nPalEntries;
/*907*/ SIZEL szlDevice;
/*908*/ SIZEL szlMillimeters;
/*910*/ DWORD cbPixelFormat;
/*912*/ DWORD offPixelFormat;
/*914*/ DWORD bOpenGL;
/*918*/ SIZEL szlMicrometers;
/*921*/ }ENHMETAHEADER,*PENHMETAHEADER,*LPENHMETAHEADER;
/*939*/ typedef BYTE BCHAR;
/*945*/ typedef struct tagTEXTMETRICA
/*946*/ {
/*947*/ LONG tmHeight;
/*948*/ LONG tmAscent;
/*949*/ LONG tmDescent;
/*950*/ LONG tmInternalLeading;
/*951*/ LONG tmExternalLeading;
/*952*/ LONG tmAveCharWidth;
/*953*/ LONG tmMaxCharWidth;
/*954*/ LONG tmWeight;
/*955*/ LONG tmOverhang;
/*956*/ LONG tmDigitizedAspectX;
/*957*/ LONG tmDigitizedAspectY;
/*958*/ BYTE tmFirstChar;
/*959*/ BYTE tmLastChar;
/*960*/ BYTE tmDefaultChar;
/*961*/ BYTE tmBreakChar;
/*962*/ BYTE tmItalic;
/*963*/ BYTE tmUnderlined;
/*964*/ BYTE tmStruckOut;
/*965*/ BYTE tmPitchAndFamily;
/*966*/ BYTE tmCharSet;
/*967*/ }TEXTMETRICA,*PTEXTMETRICA,typ*NPTEXTMETRICA,typ*LPTEXTMETRICA;
/*968*/ typedef struct tagTEXTMETRICW
/*969*/ {
/*970*/ LONG tmHeight;
/*971*/ LONG tmAscent;
/*972*/ LONG tmDescent;
/*973*/ LONG tmInternalLeading;
/*974*/ LONG tmExternalLeading;
/*975*/ LONG tmAveCharWidth;
/*976*/ LONG tmMaxCharWidth;
/*977*/ LONG tmWeight;
/*978*/ LONG tmOverhang;
/*979*/ LONG tmDigitizedAspectX;
/*980*/ LONG tmDigitizedAspectY;
/*981*/ WCHAR tmFirstChar;
/*982*/ WCHAR tmLastChar;
/*983*/ WCHAR tmDefaultChar;
/*984*/ WCHAR tmBreakChar;
/*985*/ BYTE tmItalic;
/*986*/ BYTE tmUnderlined;
/*987*/ BYTE tmStruckOut;
/*988*/ BYTE tmPitchAndFamily;
/*989*/ BYTE tmCharSet;
/*990*/ }TEXTMETRICW,*PTEXTMETRICW,typ*NPTEXTMETRICW,typ*LPTEXTMETRICW;
/*997*/ typedef TEXTMETRICA TEXTMETRIC;
/*998*/ typedef PTEXTMETRICA PTEXTMETRIC;
/*999*/ typedef NPTEXTMETRICA NPTEXTMETRIC;
/*1000*/ typedef LPTEXTMETRICA LPTEXTMETRIC;
/*1020*/ typedef struct tagNEWTEXTMETRICA
/*1021*/ {
/*1022*/ LONG tmHeight;
/*1023*/ LONG tmAscent;
/*1024*/ LONG tmDescent;
/*1025*/ LONG tmInternalLeading;
/*1026*/ LONG tmExternalLeading;
/*1027*/ LONG tmAveCharWidth;
/*1028*/ LONG tmMaxCharWidth;
/*1029*/ LONG tmWeight;
/*1030*/ LONG tmOverhang;
/*1031*/ LONG tmDigitizedAspectX;
/*1032*/ LONG tmDigitizedAspectY;
/*1033*/ BYTE tmFirstChar;
/*1034*/ BYTE tmLastChar;
/*1035*/ BYTE tmDefaultChar;
/*1036*/ BYTE tmBreakChar;
/*1037*/ BYTE tmItalic;
/*1038*/ BYTE tmUnderlined;
/*1039*/ BYTE tmStruckOut;
/*1040*/ BYTE tmPitchAndFamily;
/*1041*/ BYTE tmCharSet;
/*1042*/ DWORD ntmFlags;
/*1043*/ UINT ntmSizeEM;
/*1044*/ UINT ntmCellHeight;
/*1045*/ UINT ntmAvgWidth;
/*1046*/ }NEWTEXTMETRICA,*PNEWTEXTMETRICA,typ*NPNEWTEXTMETRICA,typ*LPNEWTEXTMETRICA;
/*1047*/ typedef struct tagNEWTEXTMETRICW
/*1048*/ {
/*1049*/ LONG tmHeight;
/*1050*/ LONG tmAscent;
/*1051*/ LONG tmDescent;
/*1052*/ LONG tmInternalLeading;
/*1053*/ LONG tmExternalLeading;
/*1054*/ LONG tmAveCharWidth;
/*1055*/ LONG tmMaxCharWidth;
/*1056*/ LONG tmWeight;
/*1057*/ LONG tmOverhang;
/*1058*/ LONG tmDigitizedAspectX;
/*1059*/ LONG tmDigitizedAspectY;
/*1060*/ WCHAR tmFirstChar;
/*1061*/ WCHAR tmLastChar;
/*1062*/ WCHAR tmDefaultChar;
/*1063*/ WCHAR tmBreakChar;
/*1064*/ BYTE tmItalic;
/*1065*/ BYTE tmUnderlined;
/*1066*/ BYTE tmStruckOut;
/*1067*/ BYTE tmPitchAndFamily;
/*1068*/ BYTE tmCharSet;
/*1069*/ DWORD ntmFlags;
/*1070*/ UINT ntmSizeEM;
/*1071*/ UINT ntmCellHeight;
/*1072*/ UINT ntmAvgWidth;
/*1073*/ }NEWTEXTMETRICW,*PNEWTEXTMETRICW,typ*NPNEWTEXTMETRICW,typ*LPNEWTEXTMETRICW;
/*1080*/ typedef NEWTEXTMETRICA NEWTEXTMETRIC;
/*1081*/ typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
/*1082*/ typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
/*1083*/ typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
/*1088*/ typedef struct tagNEWTEXTMETRICEXA
/*1089*/ {
/*1090*/ NEWTEXTMETRICA ntmTm;
/*1091*/ FONTSIGNATURE ntmFontSig;
/*1092*/ }NEWTEXTMETRICEXA;
/*1093*/ typedef struct tagNEWTEXTMETRICEXW
/*1094*/ {
/*1095*/ NEWTEXTMETRICW ntmTm;
/*1096*/ FONTSIGNATURE ntmFontSig;
/*1097*/ }NEWTEXTMETRICEXW;
/*1101*/ typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
/*1109*/ typedef struct tagPELARRAY
/*1110*/ {
/*1111*/ LONG paXCount;
/*1112*/ LONG paYCount;
/*1113*/ LONG paXExt;
/*1114*/ LONG paYExt;
/*1115*/ BYTE paRGBs;
/*1116*/ }PELARRAY,*PPELARRAY,typ*NPPELARRAY,typ*LPPELARRAY;
/*1119*/ typedef struct tagLOGBRUSH
/*1120*/ {
/*1121*/ UINT lbStyle;
/*1122*/ COLORREF lbColor;
/*1123*/ ULONG_PTR lbHatch;
/*1124*/ }LOGBRUSH,*PLOGBRUSH,typ*NPLOGBRUSH,typ*LPLOGBRUSH;
/*1126*/ typedef struct tagLOGBRUSH32
/*1127*/ {
/*1128*/ UINT lbStyle;
/*1129*/ COLORREF lbColor;
/*1130*/ ULONG lbHatch;
/*1131*/ }LOGBRUSH32,*PLOGBRUSH32,typ*NPLOGBRUSH32,typ*LPLOGBRUSH32;
/*1133*/ typedef LOGBRUSH PATTERN;
/*1134*/ typedef PATTERN*PPATTERN;
/*1135*/ typedef PATTERN typ*NPPATTERN;
/*1136*/ typedef PATTERN typ*LPPATTERN;
/*1139*/ typedef struct tagLOGPEN
/*1140*/ {
/*1141*/ UINT lopnStyle;
/*1142*/ POINT lopnWidth;
/*1143*/ COLORREF lopnColor;
/*1144*/ }LOGPEN,*PLOGPEN,typ*NPLOGPEN,typ*LPLOGPEN;
/*1146*/ typedef struct tagEXTLOGPEN{
/*1147*/ DWORD elpPenStyle;
/*1148*/ DWORD elpWidth;
/*1149*/ UINT elpBrushStyle;
/*1150*/ COLORREF elpColor;
/*1151*/ ULONG_PTR elpHatch;
/*1152*/ DWORD elpNumEntries;
/*1153*/ DWORD elpStyleEntry[1];
/*1154*/ }EXTLOGPEN,*PEXTLOGPEN,typ*NPEXTLOGPEN,typ*LPEXTLOGPEN;
/*1158*/ typedef struct tagPALETTEENTRY{
/*1159*/ BYTE peRed;
/*1160*/ BYTE peGreen;
/*1161*/ BYTE peBlue;
/*1162*/ BYTE peFlags;
/*1163*/ }PALETTEENTRY,*PPALETTEENTRY,typ*LPPALETTEENTRY;
/*1169*/ typedef struct tagLOGPALETTE{
/*1170*/ WORD palVersion;
/*1171*/ WORD palNumEntries;
/*1172*/ typ typ PALETTEENTRY palPalEntry[1];
/*1173*/ }LOGPALETTE,*PLOGPALETTE,typ*NPLOGPALETTE,typ*LPLOGPALETTE;
/*1180*/ typedef struct tagLOGFONTA
/*1181*/ {
/*1182*/ LONG lfHeight;
/*1183*/ LONG lfWidth;
/*1184*/ LONG lfEscapement;
/*1185*/ LONG lfOrientation;
/*1186*/ LONG lfWeight;
/*1187*/ BYTE lfItalic;
/*1188*/ BYTE lfUnderline;
/*1189*/ BYTE lfStrikeOut;
/*1190*/ BYTE lfCharSet;
/*1191*/ BYTE lfOutPrecision;
/*1192*/ BYTE lfClipPrecision;
/*1193*/ BYTE lfQuality;
/*1194*/ BYTE lfPitchAndFamily;
/*1195*/ CHAR lfFaceName[32];
/*1196*/ }LOGFONTA,*PLOGFONTA,typ*NPLOGFONTA,typ*LPLOGFONTA;
/*1197*/ typedef struct tagLOGFONTW
/*1198*/ {
/*1199*/ LONG lfHeight;
/*1200*/ LONG lfWidth;
/*1201*/ LONG lfEscapement;
/*1202*/ LONG lfOrientation;
/*1203*/ LONG lfWeight;
/*1204*/ BYTE lfItalic;
/*1205*/ BYTE lfUnderline;
/*1206*/ BYTE lfStrikeOut;
/*1207*/ BYTE lfCharSet;
/*1208*/ BYTE lfOutPrecision;
/*1209*/ BYTE lfClipPrecision;
/*1210*/ BYTE lfQuality;
/*1211*/ BYTE lfPitchAndFamily;
/*1212*/ WCHAR lfFaceName[32];
/*1213*/ }LOGFONTW,*PLOGFONTW,typ*NPLOGFONTW,typ*LPLOGFONTW;
/*1220*/ typedef LOGFONTA LOGFONT;
/*1221*/ typedef PLOGFONTA PLOGFONT;
/*1222*/ typedef NPLOGFONTA NPLOGFONT;
/*1223*/ typedef LPLOGFONTA LPLOGFONT;
/*1229*/ typedef struct tagENUMLOGFONTA
/*1230*/ {
/*1231*/ LOGFONTA elfLogFont;
/*1232*/ BYTE elfFullName[64];
/*1233*/ BYTE elfStyle[32];
/*1234*/ }ENUMLOGFONTA,typ*LPENUMLOGFONTA;
/*1236*/ typedef struct tagENUMLOGFONTW
/*1237*/ {
/*1238*/ LOGFONTW elfLogFont;
/*1239*/ WCHAR elfFullName[64];
/*1240*/ WCHAR elfStyle[32];
/*1241*/ }ENUMLOGFONTW,typ*LPENUMLOGFONTW;
/*1246*/ typedef ENUMLOGFONTA ENUMLOGFONT;
/*1247*/ typedef LPENUMLOGFONTA LPENUMLOGFONT;
/*1251*/ typedef struct tagENUMLOGFONTEXA
/*1252*/ {
/*1253*/ LOGFONTA elfLogFont;
/*1254*/ BYTE elfFullName[64];
/*1255*/ BYTE elfStyle[32];
/*1256*/ BYTE elfScript[32];
/*1257*/ }ENUMLOGFONTEXA,typ*LPENUMLOGFONTEXA;
/*1258*/ typedef struct tagENUMLOGFONTEXW
/*1259*/ {
/*1260*/ LOGFONTW elfLogFont;
/*1261*/ WCHAR elfFullName[64];
/*1262*/ WCHAR elfStyle[32];
/*1263*/ WCHAR elfScript[32];
/*1264*/ }ENUMLOGFONTEXW,typ*LPENUMLOGFONTEXW;
/*1269*/ typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
/*1270*/ typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
/*1401*/ typedef struct tagPANOSE
/*1402*/ {
/*1403*/ BYTE bFamilyType;
/*1404*/ BYTE bSerifStyle;
/*1405*/ BYTE bWeight;
/*1406*/ BYTE bProportion;
/*1407*/ BYTE bContrast;
/*1408*/ BYTE bStrokeVariation;
/*1409*/ BYTE bArmStyle;
/*1410*/ BYTE bLetterform;
/*1411*/ BYTE bMidline;
/*1412*/ BYTE bXHeight;
/*1413*/ }PANOSE,*LPPANOSE;
/*1527*/ typedef struct tagEXTLOGFONTA{
/*1528*/ LOGFONTA elfLogFont;
/*1529*/ BYTE elfFullName[64];
/*1530*/ BYTE elfStyle[32];
/*1531*/ DWORD elfVersion;
/*1532*/ DWORD elfStyleSize;
/*1533*/ DWORD elfMatch;
/*1534*/ DWORD elfReserved;
/*1535*/ BYTE elfVendorId[4];
/*1536*/ DWORD elfCulture;
/*1537*/ PANOSE elfPanose;
/*1538*/ }EXTLOGFONTA,*PEXTLOGFONTA,typ*NPEXTLOGFONTA,typ*LPEXTLOGFONTA;
/*1539*/ typedef struct tagEXTLOGFONTW{
/*1540*/ LOGFONTW elfLogFont;
/*1541*/ WCHAR elfFullName[64];
/*1542*/ WCHAR elfStyle[32];
/*1543*/ DWORD elfVersion;
/*1544*/ DWORD elfStyleSize;
/*1545*/ DWORD elfMatch;
/*1546*/ DWORD elfReserved;
/*1547*/ BYTE elfVendorId[4];
/*1548*/ DWORD elfCulture;
/*1549*/ PANOSE elfPanose;
/*1550*/ }EXTLOGFONTW,*PEXTLOGFONTW,typ*NPEXTLOGFONTW,typ*LPEXTLOGFONTW;
/*1557*/ typedef EXTLOGFONTA EXTLOGFONT;
/*1558*/ typedef PEXTLOGFONTA PEXTLOGFONT;
/*1559*/ typedef NPEXTLOGFONTA NPEXTLOGFONT;
/*1560*/ typedef LPEXTLOGFONTA LPEXTLOGFONT;
/*2025*/ typedef struct _devicemodeA{
/*2026*/ BYTE dmDeviceName[32];
/*2027*/ WORD dmSpecVersion;
/*2028*/ WORD dmDriverVersion;
/*2029*/ WORD dmSize;
/*2030*/ WORD dmDriverExtra;
/*2031*/ DWORD dmFields;
/*2032*/ union{
/*2033*/ struct{
/*2034*/ short dmOrientation;
/*2035*/ short dmPaperSize;
/*2036*/ short dmPaperLength;
/*2037*/ short dmPaperWidth;
/*2038*/ }s;
/*2039*/ POINTL dmPosition;
/*2040*/ }u;
/*2041*/ short dmScale;
/*2042*/ short dmCopies;
/*2043*/ short dmDefaultSource;
/*2044*/ short dmPrintQuality;
/*2045*/ short dmColor;
/*2046*/ short dmDuplex;
/*2047*/ short dmYResolution;
/*2048*/ short dmTTOption;
/*2049*/ short dmCollate;
/*2050*/ BYTE dmFormName[32];
/*2051*/ WORD dmLogPixels;
/*2052*/ DWORD dmBitsPerPel;
/*2053*/ DWORD dmPelsWidth;
/*2054*/ DWORD dmPelsHeight;
/*2055*/ union{
/*2056*/ DWORD dmDisplayFlags;
/*2057*/ DWORD dmNup;
/*2058*/ }u2;
/*2059*/ DWORD dmDisplayFrequency;
/*2061*/ DWORD dmICMMethod;
/*2062*/ DWORD dmICMIntent;
/*2063*/ DWORD dmMediaType;
/*2064*/ DWORD dmDitherType;
/*2065*/ DWORD dmReserved1;
/*2066*/ DWORD dmReserved2;
/*2068*/ DWORD dmPanningWidth;
/*2069*/ DWORD dmPanningHeight;
/*2072*/ }DEVMODEA,*PDEVMODEA,*NPDEVMODEA,*LPDEVMODEA;
/*2073*/ typedef struct _devicemodeW{
/*2074*/ WCHAR dmDeviceName[32];
/*2075*/ WORD dmSpecVersion;
/*2076*/ WORD dmDriverVersion;
/*2077*/ WORD dmSize;
/*2078*/ WORD dmDriverExtra;
/*2079*/ DWORD dmFields;
/*2080*/ union{
/*2081*/ struct{
/*2082*/ short dmOrientation;
/*2083*/ short dmPaperSize;
/*2084*/ short dmPaperLength;
/*2085*/ short dmPaperWidth;
/*2086*/ }s;
/*2087*/ POINTL dmPosition;
/*2088*/ }u;
/*2089*/ short dmScale;
/*2090*/ short dmCopies;
/*2091*/ short dmDefaultSource;
/*2092*/ short dmPrintQuality;
/*2093*/ short dmColor;
/*2094*/ short dmDuplex;
/*2095*/ short dmYResolution;
/*2096*/ short dmTTOption;
/*2097*/ short dmCollate;
/*2098*/ WCHAR dmFormName[32];
/*2099*/ WORD dmLogPixels;
/*2100*/ DWORD dmBitsPerPel;
/*2101*/ DWORD dmPelsWidth;
/*2102*/ DWORD dmPelsHeight;
/*2103*/ union{
/*2104*/ DWORD dmDisplayFlags;
/*2105*/ DWORD dmNup;
/*2106*/ }u2;
/*2107*/ DWORD dmDisplayFrequency;
/*2109*/ DWORD dmICMMethod;
/*2110*/ DWORD dmICMIntent;
/*2111*/ DWORD dmMediaType;
/*2112*/ DWORD dmDitherType;
/*2113*/ DWORD dmReserved1;
/*2114*/ DWORD dmReserved2;
/*2116*/ DWORD dmPanningWidth;
/*2117*/ DWORD dmPanningHeight;
/*2120*/ }DEVMODEW,*PDEVMODEW,*NPDEVMODEW,*LPDEVMODEW;
/*2127*/ typedef DEVMODEA DEVMODE;
/*2128*/ typedef PDEVMODEA PDEVMODE;
/*2129*/ typedef NPDEVMODEA NPDEVMODE;
/*2130*/ typedef LPDEVMODEA LPDEVMODE;
/*2432*/ typedef struct _DISPLAY_DEVICEA{
/*2433*/ DWORD cb;
/*2434*/ CHAR DeviceName[32];
/*2435*/ CHAR DeviceString[128];
/*2436*/ DWORD StateFlags;
/*2437*/ CHAR DeviceID[128];
/*2438*/ CHAR DeviceKey[128];
/*2439*/ }DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;
/*2440*/ typedef struct _DISPLAY_DEVICEW{
/*2441*/ DWORD cb;
/*2442*/ WCHAR DeviceName[32];
/*2443*/ WCHAR DeviceString[128];
/*2444*/ DWORD StateFlags;
/*2445*/ WCHAR DeviceID[128];
/*2446*/ WCHAR DeviceKey[128];
/*2447*/ }DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;
/*2453*/ typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
/*2454*/ typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
/*2455*/ typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
/*2486*/ typedef struct _RGNDATAHEADER{
/*2487*/ DWORD dwSize;
/*2488*/ DWORD iType;
/*2489*/ DWORD nCount;
/*2490*/ DWORD nRgnSize;
/*2491*/ RECT rcBound;
/*2492*/ }RGNDATAHEADER,*PRGNDATAHEADER;
/*2494*/ typedef struct _RGNDATA{
/*2495*/ RGNDATAHEADER rdh;
/*2496*/ char Buffer[1];
/*2497*/ }RGNDATA,*PRGNDATA,typ*NPRGNDATA,typ*LPRGNDATA;
/*2503*/ typedef struct _ABC{
/*2504*/ int abcA;
/*2505*/ UINT abcB;
/*2506*/ int abcC;
/*2507*/ }ABC,*PABC,typ*NPABC,typ*LPABC;
/*2509*/ typedef struct _ABCFLOAT{
/*2510*/ FLOAT abcfA;
/*2511*/ FLOAT abcfB;
/*2512*/ FLOAT abcfC;
/*2513*/ }ABCFLOAT,*PABCFLOAT,typ*NPABCFLOAT,typ*LPABCFLOAT;
/*2520*/ typedef struct _OUTLINETEXTMETRICA{
/*2521*/ UINT otmSize;
/*2522*/ TEXTMETRICA otmTextMetrics;
/*2523*/ BYTE otmFiller;
/*2524*/ PANOSE otmPanoseNumber;
/*2525*/ UINT otmfsSelection;
/*2526*/ UINT otmfsType;
/*2527*/ int otmsCharSlopeRise;
/*2528*/ int otmsCharSlopeRun;
/*2529*/ int otmItalicAngle;
/*2530*/ UINT otmEMSquare;
/*2531*/ int otmAscent;
/*2532*/ int otmDescent;
/*2533*/ UINT otmLineGap;
/*2534*/ UINT otmsCapEmHeight;
/*2535*/ UINT otmsXHeight;
/*2536*/ RECT otmrcFontBox;
/*2537*/ int otmMacAscent;
/*2538*/ int otmMacDescent;
/*2539*/ UINT otmMacLineGap;
/*2540*/ UINT otmusMinimumPPEM;
/*2541*/ POINT otmptSubscriptSize;
/*2542*/ POINT otmptSubscriptOffset;
/*2543*/ POINT otmptSuperscriptSize;
/*2544*/ POINT otmptSuperscriptOffset;
/*2545*/ UINT otmsStrikeoutSize;
/*2546*/ int otmsStrikeoutPosition;
/*2547*/ int otmsUnderscoreSize;
/*2548*/ int otmsUnderscorePosition;
/*2549*/ PSTR otmpFamilyName;
/*2550*/ PSTR otmpFaceName;
/*2551*/ PSTR otmpStyleName;
/*2552*/ PSTR otmpFullName;
/*2553*/ }OUTLINETEXTMETRICA,*POUTLINETEXTMETRICA,typ*NPOUTLINETEXTMETRICA,typ*LPOUTLINETEXTMETRICA;
/*2554*/ typedef struct _OUTLINETEXTMETRICW{
/*2555*/ UINT otmSize;
/*2556*/ TEXTMETRICW otmTextMetrics;
/*2557*/ BYTE otmFiller;
/*2558*/ PANOSE otmPanoseNumber;
/*2559*/ UINT otmfsSelection;
/*2560*/ UINT otmfsType;
/*2561*/ int otmsCharSlopeRise;
/*2562*/ int otmsCharSlopeRun;
/*2563*/ int otmItalicAngle;
/*2564*/ UINT otmEMSquare;
/*2565*/ int otmAscent;
/*2566*/ int otmDescent;
/*2567*/ UINT otmLineGap;
/*2568*/ UINT otmsCapEmHeight;
/*2569*/ UINT otmsXHeight;
/*2570*/ RECT otmrcFontBox;
/*2571*/ int otmMacAscent;
/*2572*/ int otmMacDescent;
/*2573*/ UINT otmMacLineGap;
/*2574*/ UINT otmusMinimumPPEM;
/*2575*/ POINT otmptSubscriptSize;
/*2576*/ POINT otmptSubscriptOffset;
/*2577*/ POINT otmptSuperscriptSize;
/*2578*/ POINT otmptSuperscriptOffset;
/*2579*/ UINT otmsStrikeoutSize;
/*2580*/ int otmsStrikeoutPosition;
/*2581*/ int otmsUnderscoreSize;
/*2582*/ int otmsUnderscorePosition;
/*2583*/ PSTR otmpFamilyName;
/*2584*/ PSTR otmpFaceName;
/*2585*/ PSTR otmpStyleName;
/*2586*/ PSTR otmpFullName;
/*2587*/ }OUTLINETEXTMETRICW,*POUTLINETEXTMETRICW,typ*NPOUTLINETEXTMETRICW,typ*LPOUTLINETEXTMETRICW;
/*2594*/ typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
/*2595*/ typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
/*2596*/ typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
/*2597*/ typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
/*2607*/ typedef struct tagPOLYTEXTA
/*2608*/ {
/*2609*/ int x;
/*2610*/ int y;
/*2611*/ UINT n;
/*2612*/ LPCSTR lpstr;
/*2613*/ UINT uiFlags;
/*2614*/ RECT rcl;
/*2615*/ int*pdx;
/*2616*/ }POLYTEXTA,*PPOLYTEXTA,typ*NPPOLYTEXTA,typ*LPPOLYTEXTA;
/*2617*/ typedef struct tagPOLYTEXTW
/*2618*/ {
/*2619*/ int x;
/*2620*/ int y;
/*2621*/ UINT n;
/*2622*/ LPCWSTR lpstr;
/*2623*/ UINT uiFlags;
/*2624*/ RECT rcl;
/*2625*/ int*pdx;
/*2626*/ }POLYTEXTW,*PPOLYTEXTW,typ*NPPOLYTEXTW,typ*LPPOLYTEXTW;
/*2633*/ typedef POLYTEXTA POLYTEXT;
/*2634*/ typedef PPOLYTEXTA PPOLYTEXT;
/*2635*/ typedef NPPOLYTEXTA NPPOLYTEXT;
/*2636*/ typedef LPPOLYTEXTA LPPOLYTEXT;
/*2639*/ typedef struct _FIXED{
/*2641*/ WORD fract;
/*2642*/ short value;
/*2647*/ }FIXED;
/*2650*/ typedef struct _MAT2{
/*2651*/ FIXED eM11;
/*2652*/ FIXED eM12;
/*2653*/ FIXED eM21;
/*2654*/ FIXED eM22;
/*2655*/ }MAT2,typ*LPMAT2;
/*2659*/ typedef struct _GLYPHMETRICS{
/*2660*/ UINT gmBlackBoxX;
/*2661*/ UINT gmBlackBoxY;
/*2662*/ POINT gmptGlyphOrigin;
/*2663*/ short gmCellIncX;
/*2664*/ short gmCellIncY;
/*2665*/ }GLYPHMETRICS,typ*LPGLYPHMETRICS;
/*2691*/ typedef struct tagPOINTFX
/*2692*/ {
/*2693*/ FIXED x;
/*2694*/ FIXED y;
/*2695*/ }POINTFX,typ*LPPOINTFX;
/*2697*/ typedef struct tagTTPOLYCURVE
/*2698*/ {
/*2699*/ WORD wType;
/*2700*/ WORD cpfx;
/*2701*/ POINTFX apfx[1];
/*2702*/ }TTPOLYCURVE,typ*LPTTPOLYCURVE;
/*2704*/ typedef struct tagTTPOLYGONHEADER
/*2705*/ {
/*2706*/ DWORD cb;
/*2707*/ DWORD dwType;
/*2708*/ POINTFX pfxStart;
/*2709*/ }TTPOLYGONHEADER,typ*LPTTPOLYGONHEADER;
/*2755*/ typedef struct tagGCP_RESULTSA
/*2756*/ {
/*2757*/ DWORD lStructSize;
/*2758*/ LPSTR lpOutString;
/*2759*/ UINT typ*lpOrder;
/*2760*/ int typ*lpDx;
/*2761*/ int typ*lpCaretPos;
/*2762*/ LPSTR lpClass;
/*2763*/ LPWSTR lpGlyphs;
/*2764*/ UINT nGlyphs;
/*2765*/ int nMaxFit;
/*2766*/ }GCP_RESULTSA,typ*LPGCP_RESULTSA;
/*2767*/ typedef struct tagGCP_RESULTSW
/*2768*/ {
/*2769*/ DWORD lStructSize;
/*2770*/ LPWSTR lpOutString;
/*2771*/ UINT typ*lpOrder;
/*2772*/ int typ*lpDx;
/*2773*/ int typ*lpCaretPos;
/*2774*/ LPSTR lpClass;
/*2775*/ LPWSTR lpGlyphs;
/*2776*/ UINT nGlyphs;
/*2777*/ int nMaxFit;
/*2778*/ }GCP_RESULTSW,typ*LPGCP_RESULTSW;
/*2783*/ typedef GCP_RESULTSA GCP_RESULTS;
/*2784*/ typedef LPGCP_RESULTSA LPGCP_RESULTS;
/*2788*/ typedef struct _RASTERIZER_STATUS{
/*2789*/ short nSize;
/*2790*/ short wFlags;
/*2791*/ short nLanguageID;
/*2792*/ }RASTERIZER_STATUS,typ*LPRASTERIZER_STATUS;
/*2799*/ typedef struct tagPIXELFORMATDESCRIPTOR
/*2800*/ {
/*2801*/ WORD nSize;
/*2802*/ WORD nVersion;
/*2803*/ DWORD dwFlags;
/*2804*/ BYTE iPixelType;
/*2805*/ BYTE cColorBits;
/*2806*/ BYTE cRedBits;
/*2807*/ BYTE cRedShift;
/*2808*/ BYTE cGreenBits;
/*2809*/ BYTE cGreenShift;
/*2810*/ BYTE cBlueBits;
/*2811*/ BYTE cBlueShift;
/*2812*/ BYTE cAlphaBits;
/*2813*/ BYTE cAlphaShift;
/*2814*/ BYTE cAccumBits;
/*2815*/ BYTE cAccumRedBits;
/*2816*/ BYTE cAccumGreenBits;
/*2817*/ BYTE cAccumBlueBits;
/*2818*/ BYTE cAccumAlphaBits;
/*2819*/ BYTE cDepthBits;
/*2820*/ BYTE cStencilBits;
/*2821*/ BYTE cAuxBuffers;
/*2822*/ BYTE iLayerType;
/*2823*/ BYTE bReserved;
/*2824*/ DWORD dwLayerMask;
/*2825*/ DWORD dwVisibleMask;
/*2826*/ DWORD dwDamageMask;
/*2827*/ }PIXELFORMATDESCRIPTOR,*PPIXELFORMATDESCRIPTOR,typ*LPPIXELFORMATDESCRIPTOR;
/*2863*/ typedef int(typ*OLDFONTENUMPROCA)(const LOGFONTA*,const TEXTMETRICA*,DWORD,LPARAM);
/*2864*/ typedef int(typ*OLDFONTENUMPROCW)(const LOGFONTW*,const TEXTMETRICW*,DWORD,LPARAM);
/*2880*/ typedef OLDFONTENUMPROCA FONTENUMPROCA;
/*2881*/ typedef OLDFONTENUMPROCW FONTENUMPROCW;
/*2885*/ typedef FONTENUMPROCA FONTENUMPROC;
/*2888*/ typedef int(typ*GOBJENUMPROC)(LPVOID,LPARAM);
/*2889*/ typedef void(typ*LINEDDAPROC)(int,int,LPARAM);
/*2905*/ int typ AddFontResourceA(typ typ typ typ typ LPCSTR);
/*2906*/ int typ AddFontResourceW(typ typ typ typ typ LPCWSTR);
/*2913*/ typ BOOL typ AnimatePalette(typ typ typ typ typ HPALETTE hPal,typ typ typ typ typ UINT iStartIndex,typ typ typ typ typ UINT cEntries,typ typ typ typ typ typ typ const PALETTEENTRY*ppe);
/*2914*/ typ BOOL typ Arc(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x1,typ typ typ typ typ int y1,typ typ typ typ typ int x2,typ typ typ typ typ int y2,typ typ typ typ typ int x3,typ typ typ typ typ int y3,typ typ typ typ typ int x4,typ typ typ typ typ int y4);
/*2915*/ typ BOOL typ BitBlt(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ int cx,typ typ typ typ typ int cy,typ typ typ typ typ typ typ HDC hdcSrc,typ typ typ typ typ int x1,typ typ typ typ typ int y1,typ typ typ typ typ DWORD rop);
/*2916*/ BOOL typ CancelDC(typ typ typ typ typ HDC hdc);
/*2917*/ typ BOOL typ Chord(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x1,typ typ typ typ typ int y1,typ typ typ typ typ int x2,typ typ typ typ typ int y2,typ typ typ typ typ int x3,typ typ typ typ typ int y3,typ typ typ typ typ int x4,typ typ typ typ typ int y4);
/*2918*/ int typ ChoosePixelFormat(typ typ typ typ typ HDC hdc,typ typ typ typ typ const PIXELFORMATDESCRIPTOR*ppfd);
/*2919*/ HMETAFILE typ CloseMetaFile(typ typ typ typ typ HDC hdc);
/*2920*/ int typ CombineRgn(typ typ typ typ typ typ typ HRGN hrgnDst,typ typ typ typ typ typ typ HRGN hrgnSrc1,typ typ typ typ typ typ typ HRGN hrgnSrc2,typ typ typ typ typ int iMode);
/*2921*/ HMETAFILE typ CopyMetaFileA(typ typ typ typ typ HMETAFILE,typ typ typ typ typ typ typ LPCSTR);
/*2922*/ HMETAFILE typ CopyMetaFileW(typ typ typ typ typ HMETAFILE,typ typ typ typ typ typ typ LPCWSTR);
/*2928*/ typ HBITMAP typ CreateBitmap(typ typ typ typ typ int nWidth,typ typ typ typ typ int nHeight,typ typ typ typ typ UINT nPlanes,typ typ typ typ typ UINT nBitCount,typ typ typ typ typ typ typ const void*lpBits);
/*2929*/ typ HBITMAP typ CreateBitmapIndirect(typ typ typ typ typ const BITMAP*pbm);
/*2930*/ typ HBRUSH typ CreateBrushIndirect(typ typ typ typ typ const LOGBRUSH*plbrush);
/*2931*/ HBITMAP typ CreateCompatibleBitmap(typ typ typ typ typ HDC hdc,typ typ typ typ typ int cx,typ typ typ typ typ int cy);
/*2932*/ HBITMAP typ CreateDiscardableBitmap(typ typ typ typ typ HDC hdc,typ typ typ typ typ int cx,typ typ typ typ typ int cy);
/*2933*/ HDC typ CreateCompatibleDC(typ typ typ typ typ typ typ HDC hdc);
/*2934*/ HDC typ CreateDCA(typ typ typ typ typ typ typ LPCSTR pwszDriver,typ typ typ typ typ typ typ LPCSTR pwszDevice,typ typ typ typ typ typ typ LPCSTR pszPort,typ typ typ typ typ typ typ const DEVMODEA*pdm);
/*2935*/ HDC typ CreateDCW(typ typ typ typ typ typ typ LPCWSTR pwszDriver,typ typ typ typ typ typ typ LPCWSTR pwszDevice,typ typ typ typ typ typ typ LPCWSTR pszPort,typ typ typ typ typ typ typ const DEVMODEW*pdm);
/*2941*/ HBITMAP typ CreateDIBitmap(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const BITMAPINFOHEADER*pbmih,typ typ typ typ typ DWORD flInit,typ typ typ typ typ typ typ const void*pjBits,typ typ typ typ typ typ typ const BITMAPINFO*pbmi,typ typ typ typ typ UINT iUsage);
/*2942*/ HBRUSH typ CreateDIBPatternBrush(typ typ typ typ typ HGLOBAL h,typ typ typ typ typ UINT iUsage);
/*2943*/ typ HBRUSH typ CreateDIBPatternBrushPt(typ typ typ typ typ const void*lpPackedDIB,typ typ typ typ typ UINT iUsage);
/*2944*/ HRGN typ CreateEllipticRgn(typ typ typ typ typ int x1,typ typ typ typ typ int y1,typ typ typ typ typ int x2,typ typ typ typ typ int y2);
/*2945*/ HRGN typ CreateEllipticRgnIndirect(typ typ typ typ typ const RECT*lprect);
/*2946*/ typ HFONT typ CreateFontIndirectA(typ typ typ typ typ const LOGFONTA*lplf);
/*2947*/ typ HFONT typ CreateFontIndirectW(typ typ typ typ typ const LOGFONTW*lplf);
/*2953*/ HFONT typ CreateFontA(typ typ typ typ typ int cHeight,typ typ typ typ typ int cWidth,typ typ typ typ typ int cEscapement,typ typ typ typ typ int cOrientation,typ typ typ typ typ int cWeight,typ typ typ typ typ DWORD bItalic,
/*2954*/ typ typ typ typ typ DWORD bUnderline,typ typ typ typ typ DWORD bStrikeOut,typ typ typ typ typ DWORD iCharSet,typ typ typ typ typ DWORD iOutPrecision,typ typ typ typ typ DWORD iClipPrecision,
/*2955*/ typ typ typ typ typ DWORD iQuality,typ typ typ typ typ DWORD iPitchAndFamily,typ typ typ typ typ typ typ LPCSTR pszFaceName);
/*2956*/ HFONT typ CreateFontW(typ typ typ typ typ int cHeight,typ typ typ typ typ int cWidth,typ typ typ typ typ int cEscapement,typ typ typ typ typ int cOrientation,typ typ typ typ typ int cWeight,typ typ typ typ typ DWORD bItalic,
/*2957*/ typ typ typ typ typ DWORD bUnderline,typ typ typ typ typ DWORD bStrikeOut,typ typ typ typ typ DWORD iCharSet,typ typ typ typ typ DWORD iOutPrecision,typ typ typ typ typ DWORD iClipPrecision,
/*2958*/ typ typ typ typ typ DWORD iQuality,typ typ typ typ typ DWORD iPitchAndFamily,typ typ typ typ typ typ typ LPCWSTR pszFaceName);
/*2965*/ HBRUSH typ CreateHatchBrush(typ typ typ typ typ int iHatch,typ typ typ typ typ COLORREF color);
/*2966*/ HDC typ CreateICA(typ typ typ typ typ typ typ LPCSTR pszDriver,typ typ typ typ typ typ typ LPCSTR pszDevice,typ typ typ typ typ typ typ LPCSTR pszPort,typ typ typ typ typ typ typ const DEVMODEA*pdm);
/*2967*/ HDC typ CreateICW(typ typ typ typ typ typ typ LPCWSTR pszDriver,typ typ typ typ typ typ typ LPCWSTR pszDevice,typ typ typ typ typ typ typ LPCWSTR pszPort,typ typ typ typ typ typ typ const DEVMODEW*pdm);
/*2973*/ HDC typ CreateMetaFileA(typ typ typ typ typ typ typ LPCSTR pszFile);
/*2974*/ HDC typ CreateMetaFileW(typ typ typ typ typ typ typ LPCWSTR pszFile);
/*2980*/ typ HPALETTE typ CreatePalette(typ typ typ typ typ typ typ const LOGPALETTE*plpal);
/*2981*/ HPEN typ CreatePen(typ typ typ typ typ int iStyle,typ typ typ typ typ int cWidth,typ typ typ typ typ COLORREF color);
/*2982*/ typ HPEN typ CreatePenIndirect(typ typ typ typ typ const LOGPEN*plpen);
/*2983*/ HRGN typ CreatePolyPolygonRgn(typ typ typ typ typ const POINT*pptl,
/*2984*/ typ typ typ typ typ const INT*pc,
/*2985*/ typ typ typ typ typ int cPoly,
/*2986*/ typ typ typ typ typ int iMode);
/*2987*/ typ HBRUSH typ CreatePatternBrush(typ typ typ typ typ HBITMAP hbm);
/*2988*/ HRGN typ CreateRectRgn(typ typ typ typ typ int x1,typ typ typ typ typ int y1,typ typ typ typ typ int x2,typ typ typ typ typ int y2);
/*2989*/ HRGN typ CreateRectRgnIndirect(typ typ typ typ typ const RECT*lprect);
/*2990*/ HRGN typ CreateRoundRectRgn(typ typ typ typ typ int x1,typ typ typ typ typ int y1,typ typ typ typ typ int x2,typ typ typ typ typ int y2,typ typ typ typ typ int w,typ typ typ typ typ int h);
/*2991*/ BOOL typ CreateScalableFontResourceA(typ typ typ typ typ DWORD fdwHidden,typ typ typ typ typ LPCSTR lpszFont,typ typ typ typ typ LPCSTR lpszFile,typ typ typ typ typ typ typ LPCSTR lpszPath);
/*2992*/ BOOL typ CreateScalableFontResourceW(typ typ typ typ typ DWORD fdwHidden,typ typ typ typ typ LPCWSTR lpszFont,typ typ typ typ typ LPCWSTR lpszFile,typ typ typ typ typ typ typ LPCWSTR lpszPath);
/*2998*/ HBRUSH typ CreateSolidBrush(typ typ typ typ typ COLORREF color);
/*3000*/ BOOL typ DeleteDC(typ typ typ typ typ HDC hdc);
/*3001*/ BOOL typ DeleteMetaFile(typ typ typ typ typ HMETAFILE hmf);
/*3002*/ typ BOOL typ DeleteObject(typ typ typ typ typ HGDIOBJ ho);
/*3003*/ int typ DescribePixelFormat(typ typ typ typ typ HDC hdc,
/*3004*/ typ typ typ typ typ int iPixelFormat,
/*3005*/ typ typ typ typ typ UINT nBytes,
/*3006*/ typ typ typ typ typ typ typ LPPIXELFORMATDESCRIPTOR ppfd);
/*3012*/ typedef UINT(typ*LPFNDEVMODE)(HWND,HMODULE,LPDEVMODE,LPSTR,LPSTR,LPDEVMODE,LPSTR,UINT);
/*3014*/ typedef DWORD(typ*LPFNDEVCAPS)(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODE);
/*3093*/ 
/*3094*/ int
/*3095*/ typ
/*3096*/ DeviceCapabilitiesA(
/*3097*/ typ typ typ typ typ LPCSTR pDevice,
/*3098*/ typ typ typ typ typ typ typ LPCSTR pPort,
/*3099*/ typ typ typ typ typ WORD fwCapability,
/*3100*/ typ typ typ typ typ typ typ LPSTR pOutput,
/*3101*/ typ typ typ typ typ typ typ const DEVMODEA*pDevMode
/*3102*/ );
/*3103*/ 
/*3104*/ int
/*3105*/ typ
/*3106*/ DeviceCapabilitiesW(
/*3107*/ typ typ typ typ typ LPCWSTR pDevice,
/*3108*/ typ typ typ typ typ typ typ LPCWSTR pPort,
/*3109*/ typ typ typ typ typ WORD fwCapability,
/*3110*/ typ typ typ typ typ typ typ LPWSTR pOutput,
/*3111*/ typ typ typ typ typ typ typ const DEVMODEW*pDevMode
/*3112*/ );
/*3119*/ int typ DrawEscape(typ typ typ typ typ HDC hdc,
/*3120*/ typ typ typ typ typ int iEscape,
/*3121*/ typ typ typ typ typ int cjIn,
/*3122*/ typ typ typ typ typ typ typ typ typ LPCSTR lpIn);
/*3124*/ typ BOOL typ Ellipse(typ typ typ typ typ HDC hdc,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom);
/*3127*/ int typ EnumFontFamiliesExA(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPLOGFONTA lpLogfont,typ typ typ typ typ FONTENUMPROCA lpProc,typ typ typ typ typ LPARAM lParam,typ typ typ typ typ DWORD dwFlags);
/*3128*/ int typ EnumFontFamiliesExW(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPLOGFONTW lpLogfont,typ typ typ typ typ FONTENUMPROCW lpProc,typ typ typ typ typ LPARAM lParam,typ typ typ typ typ DWORD dwFlags);
/*3136*/ int typ EnumFontFamiliesA(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCSTR lpLogfont,typ typ typ typ typ FONTENUMPROCA lpProc,typ typ typ typ typ LPARAM lParam);
/*3137*/ int typ EnumFontFamiliesW(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCWSTR lpLogfont,typ typ typ typ typ FONTENUMPROCW lpProc,typ typ typ typ typ LPARAM lParam);
/*3143*/ int typ EnumFontsA(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCSTR lpLogfont,typ typ typ typ typ FONTENUMPROCA lpProc,typ typ typ typ typ LPARAM lParam);
/*3144*/ int typ EnumFontsW(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCWSTR lpLogfont,typ typ typ typ typ FONTENUMPROCW lpProc,typ typ typ typ typ LPARAM lParam);
/*3152*/ int typ EnumObjects(typ typ typ typ typ HDC hdc,typ typ typ typ typ int nType,typ typ typ typ typ GOBJENUMPROC lpFunc,typ typ typ typ typ LPARAM lParam);
/*3158*/ BOOL typ EqualRgn(typ typ typ typ typ HRGN hrgn1,typ typ typ typ typ HRGN hrgn2);
/*3159*/ typ int typ Escape(typ typ typ typ typ HDC hdc,
/*3160*/ typ typ typ typ typ int iEscape,
/*3161*/ typ typ typ typ typ int cjIn,
/*3162*/ typ typ typ typ typ typ typ typ typ LPCSTR pvIn,
/*3163*/ typ typ typ typ typ typ typ LPVOID pvOut);
/*3164*/ int typ ExtEscape(typ typ typ typ typ HDC hdc,
/*3165*/ typ typ typ typ typ int iEscape,
/*3166*/ typ typ typ typ typ int cjInput,
/*3167*/ typ typ typ typ typ typ typ typ typ LPCSTR lpInData,
/*3168*/ typ typ typ typ typ int cjOutput,
/*3169*/ typ typ typ typ typ typ typ LPSTR lpOutData);
/*3170*/ typ int typ ExcludeClipRect(typ typ typ typ typ HDC hdc,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom);
/*3171*/ typ HRGN typ ExtCreateRegion(typ typ typ typ typ typ typ const XFORM*lpx,typ typ typ typ typ DWORD nCount,typ typ typ typ typ typ typ const RGNDATA*lpData);
/*3172*/ typ BOOL typ ExtFloodFill(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ COLORREF color,typ typ typ typ typ UINT type);
/*3173*/ typ BOOL typ FillRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ HRGN hrgn,typ typ typ typ typ HBRUSH hbr);
/*3174*/ typ BOOL typ FloodFill(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ COLORREF color);
/*3175*/ typ BOOL typ FrameRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ HRGN hrgn,typ typ typ typ typ HBRUSH hbr,typ typ typ typ typ int w,typ typ typ typ typ int h);
/*3176*/ int typ GetROP2(typ typ typ typ typ HDC hdc);
/*3177*/ BOOL typ GetAspectRatioFilterEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPSIZE lpsize);
/*3178*/ COLORREF typ GetBkColor(typ typ typ typ typ HDC hdc);
/*3185*/ 
/*3186*/ int
/*3187*/ typ
/*3188*/ GetBkMode(
/*3189*/ typ typ typ typ typ HDC hdc
/*3190*/ );
/*3192*/ 
/*3193*/ LONG
/*3194*/ typ
/*3195*/ GetBitmapBits(
/*3196*/ typ typ typ typ typ HBITMAP hbit,
/*3197*/ typ typ typ typ typ LONG cb,
/*3198*/ typ typ typ typ typ LPVOID lpvBits
/*3199*/ );
/*3201*/ BOOL typ GetBitmapDimensionEx(typ typ typ typ typ HBITMAP hbit,typ typ typ typ typ LPSIZE lpsize);
/*3202*/ UINT typ GetBoundsRect(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPRECT lprect,typ typ typ typ typ UINT flags);
/*3204*/ BOOL typ GetBrushOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPPOINT lppt);
/*3206*/ BOOL typ GetCharWidthA(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ LPINT lpBuffer);
/*3207*/ BOOL typ GetCharWidthW(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ LPINT lpBuffer);
/*3213*/ BOOL typ GetCharWidth32A(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ LPINT lpBuffer);
/*3214*/ BOOL typ GetCharWidth32W(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ LPINT lpBuffer);
/*3220*/ BOOL typ GetCharWidthFloatA(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ PFLOAT lpBuffer);
/*3221*/ BOOL typ GetCharWidthFloatW(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ PFLOAT lpBuffer);
/*3228*/ BOOL typ GetCharABCWidthsA(typ typ typ typ typ HDC hdc,
/*3229*/ typ typ typ typ typ UINT wFirst,
/*3230*/ typ typ typ typ typ UINT wLast,
/*3231*/ typ typ typ typ typ LPABC lpABC);
/*3232*/ BOOL typ GetCharABCWidthsW(typ typ typ typ typ HDC hdc,
/*3233*/ typ typ typ typ typ UINT wFirst,
/*3234*/ typ typ typ typ typ UINT wLast,
/*3235*/ typ typ typ typ typ LPABC lpABC);
/*3242*/ BOOL typ GetCharABCWidthsFloatA(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ LPABCFLOAT lpABC);
/*3243*/ BOOL typ GetCharABCWidthsFloatW(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT iFirst,typ typ typ typ typ UINT iLast,typ typ typ typ typ LPABCFLOAT lpABC);
/*3249*/ int typ GetClipBox(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPRECT lprect);
/*3250*/ int typ GetClipRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ HRGN hrgn);
/*3251*/ int typ GetMetaRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ HRGN hrgn);
/*3252*/ HGDIOBJ typ GetCurrentObject(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT type);
/*3253*/ BOOL typ GetCurrentPositionEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPPOINT lppt);
/*3254*/ int typ GetDeviceCaps(typ typ typ typ typ typ typ HDC hdc,typ typ typ typ typ int index);
/*3255*/ int typ GetDIBits(typ typ typ typ typ HDC hdc,typ typ typ typ typ HBITMAP hbm,typ typ typ typ typ UINT start,typ typ typ typ typ UINT cLines,typ typ typ typ typ typ typ LPVOID lpvBits,typ typ typ typ typ typ typ LPBITMAPINFO lpbmi,typ typ typ typ typ UINT usage);
/*3257*/ typ
/*3258*/ DWORD typ GetFontData(typ typ typ typ typ HDC hdc,
/*3259*/ typ typ typ typ typ DWORD dwTable,
/*3260*/ typ typ typ typ typ DWORD dwOffset,
/*3261*/ typ typ typ typ typ typ typ typ typ PVOID pvBuffer,
/*3262*/ typ typ typ typ typ DWORD cjBuffer
/*3263*/ );
/*3265*/ DWORD typ GetGlyphOutlineA(typ typ typ typ typ HDC hdc,
/*3266*/ typ typ typ typ typ UINT uChar,
/*3267*/ typ typ typ typ typ UINT fuFormat,
/*3268*/ typ typ typ typ typ LPGLYPHMETRICS lpgm,
/*3269*/ typ typ typ typ typ DWORD cjBuffer,
/*3270*/ typ typ typ typ typ typ typ LPVOID pvBuffer,
/*3271*/ typ typ typ typ typ const MAT2*lpmat2
/*3272*/ );
/*3273*/ DWORD typ GetGlyphOutlineW(typ typ typ typ typ HDC hdc,
/*3274*/ typ typ typ typ typ UINT uChar,
/*3275*/ typ typ typ typ typ UINT fuFormat,
/*3276*/ typ typ typ typ typ LPGLYPHMETRICS lpgm,
/*3277*/ typ typ typ typ typ DWORD cjBuffer,
/*3278*/ typ typ typ typ typ typ typ LPVOID pvBuffer,
/*3279*/ typ typ typ typ typ const MAT2*lpmat2
/*3280*/ );
/*3287*/ int typ GetGraphicsMode(typ typ typ typ typ HDC hdc);
/*3288*/ int typ GetMapMode(typ typ typ typ typ HDC hdc);
/*3289*/ UINT typ GetMetaFileBitsEx(typ typ typ typ typ HMETAFILE hMF,typ typ typ typ typ UINT cbBuffer,typ typ typ typ typ typ typ LPVOID lpData);
/*3290*/ HMETAFILE typ GetMetaFileA(typ typ typ typ typ LPCSTR lpName);
/*3291*/ HMETAFILE typ GetMetaFileW(typ typ typ typ typ LPCWSTR lpName);
/*3297*/ COLORREF typ GetNearestColor(typ typ typ typ typ HDC hdc,typ typ typ typ typ COLORREF color);
/*3298*/ UINT typ GetNearestPaletteIndex(typ typ typ typ typ HPALETTE h,typ typ typ typ typ COLORREF color);
/*3299*/ DWORD typ GetObjectType(typ typ typ typ typ HGDIOBJ h);
/*3303*/ UINT typ GetOutlineTextMetricsA(typ typ typ typ typ HDC hdc,
/*3304*/ typ typ typ typ typ UINT cjCopy,
/*3305*/ typ typ typ typ typ typ typ LPOUTLINETEXTMETRICA potm);
/*3306*/ UINT typ GetOutlineTextMetricsW(typ typ typ typ typ HDC hdc,
/*3307*/ typ typ typ typ typ UINT cjCopy,
/*3308*/ typ typ typ typ typ typ typ LPOUTLINETEXTMETRICW potm);
/*3317*/ UINT typ GetPaletteEntries(typ typ typ typ typ HPALETTE hpal,
/*3318*/ typ typ typ typ typ UINT iStart,
/*3319*/ typ typ typ typ typ UINT cEntries,
/*3320*/ typ typ typ typ typ typ typ LPPALETTEENTRY pPalEntries);
/*3321*/ COLORREF typ GetPixel(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y);
/*3322*/ int typ GetPixelFormat(typ typ typ typ typ HDC hdc);
/*3323*/ int typ GetPolyFillMode(typ typ typ typ typ HDC hdc);
/*3324*/ BOOL typ GetRasterizerCaps(typ typ typ typ typ LPRASTERIZER_STATUS lpraststat,
/*3325*/ typ typ typ typ typ UINT cjBytes);
/*3327*/ int typ GetRandomRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ HRGN hrgn,typ typ typ typ typ INT i);
/*3328*/ DWORD typ GetRegionData(typ typ typ typ typ HRGN hrgn,
/*3329*/ typ typ typ typ typ DWORD nCount,
/*3330*/ typ typ typ typ typ typ typ typ typ LPRGNDATA lpRgnData);
/*3331*/ int typ GetRgnBox(typ typ typ typ typ HRGN hrgn,typ typ typ typ typ LPRECT lprc);
/*3332*/ HGDIOBJ typ GetStockObject(typ typ typ typ typ int i);
/*3333*/ int typ GetStretchBltMode(typ typ typ typ typ HDC hdc);
/*3334*/ 
/*3335*/ UINT
/*3336*/ typ
/*3337*/ GetSystemPaletteEntries(
/*3338*/ typ typ typ typ typ HDC hdc,
/*3339*/ typ typ typ typ typ UINT iStart,
/*3340*/ typ typ typ typ typ UINT cEntries,
/*3341*/ typ typ typ typ typ typ typ LPPALETTEENTRY pPalEntries
/*3342*/ );
/*3344*/ UINT typ GetSystemPaletteUse(typ typ typ typ typ HDC hdc);
/*3345*/ int typ GetTextCharacterExtra(typ typ typ typ typ HDC hdc);
/*3346*/ UINT typ GetTextAlign(typ typ typ typ typ HDC hdc);
/*3347*/ COLORREF typ GetTextColor(typ typ typ typ typ HDC hdc);
/*3349*/ 
/*3350*/ BOOL
/*3351*/ typ
/*3352*/ GetTextExtentPointA(
/*3353*/ typ typ typ typ typ HDC hdc,
/*3354*/ typ typ typ typ typ typ typ LPCSTR lpString,
/*3355*/ typ typ typ typ typ int c,
/*3356*/ typ typ typ typ typ LPSIZE lpsz
/*3357*/ );
/*3358*/ 
/*3359*/ BOOL
/*3360*/ typ
/*3361*/ GetTextExtentPointW(
/*3362*/ typ typ typ typ typ HDC hdc,
/*3363*/ typ typ typ typ typ typ typ LPCWSTR lpString,
/*3364*/ typ typ typ typ typ int c,
/*3365*/ typ typ typ typ typ LPSIZE lpsz
/*3366*/ );
/*3373*/ 
/*3374*/ BOOL
/*3375*/ typ
/*3376*/ GetTextExtentPoint32A(
/*3377*/ typ typ typ typ typ HDC hdc,
/*3378*/ typ typ typ typ typ typ typ LPCSTR lpString,
/*3379*/ typ typ typ typ typ int c,
/*3380*/ typ typ typ typ typ LPSIZE psizl
/*3381*/ );
/*3382*/ 
/*3383*/ BOOL
/*3384*/ typ
/*3385*/ GetTextExtentPoint32W(
/*3386*/ typ typ typ typ typ HDC hdc,
/*3387*/ typ typ typ typ typ typ typ LPCWSTR lpString,
/*3388*/ typ typ typ typ typ int c,
/*3389*/ typ typ typ typ typ LPSIZE psizl
/*3390*/ );
/*3397*/ 
/*3398*/ BOOL
/*3399*/ typ
/*3400*/ GetTextExtentExPointA(
/*3401*/ typ typ typ typ typ HDC hdc,
/*3402*/ typ typ typ typ typ typ typ LPCSTR lpszString,
/*3403*/ typ typ typ typ typ int cchString,
/*3404*/ typ typ typ typ typ int nMaxExtent,
/*3405*/ typ typ typ typ typ typ typ LPINT lpnFit,
/*3406*/ __out_ecount_part_opt(cchString,*lpnFit)LPINT lpnDx,
/*3407*/ typ typ typ typ typ LPSIZE lpSize
/*3408*/ );
/*3409*/ 
/*3410*/ BOOL
/*3411*/ typ
/*3412*/ GetTextExtentExPointW(
/*3413*/ typ typ typ typ typ HDC hdc,
/*3414*/ typ typ typ typ typ typ typ LPCWSTR lpszString,
/*3415*/ typ typ typ typ typ int cchString,
/*3416*/ typ typ typ typ typ int nMaxExtent,
/*3417*/ typ typ typ typ typ typ typ LPINT lpnFit,
/*3418*/ __out_ecount_part_opt(cchString,*lpnFit)LPINT lpnDx,
/*3419*/ typ typ typ typ typ LPSIZE lpSize
/*3420*/ );
/*3428*/ int typ GetTextCharset(typ typ typ typ typ HDC hdc);
/*3429*/ int typ GetTextCharsetInfo(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPFONTSIGNATURE lpSig,typ typ typ typ typ DWORD dwFlags);
/*3430*/ BOOL typ TranslateCharsetInfo(typ typ typ typ typ DWORD typ*lpSrc,typ typ typ typ typ LPCHARSETINFO lpCs,typ typ typ typ typ DWORD dwFlags);
/*3431*/ DWORD typ GetFontLanguageInfo(typ typ typ typ typ HDC hdc);
/*3432*/ DWORD typ GetCharacterPlacementA(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCSTR lpString,typ typ typ typ typ int nCount,typ typ typ typ typ int nMexExtent,typ typ typ typ typ LPGCP_RESULTSA lpResults,typ typ typ typ typ DWORD dwFlags);
/*3433*/ DWORD typ GetCharacterPlacementW(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCWSTR lpString,typ typ typ typ typ int nCount,typ typ typ typ typ int nMexExtent,typ typ typ typ typ LPGCP_RESULTSW lpResults,typ typ typ typ typ DWORD dwFlags);
/*3642*/ BOOL typ GetViewportExtEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPSIZE lpsize);
/*3643*/ BOOL typ GetViewportOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPPOINT lppoint);
/*3644*/ BOOL typ GetWindowExtEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPSIZE lpsize);
/*3645*/ BOOL typ GetWindowOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPPOINT lppoint);
/*3647*/ typ int typ IntersectClipRect(typ typ typ typ typ HDC hdc,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom);
/*3648*/ typ BOOL typ InvertRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ HRGN hrgn);
/*3649*/ BOOL typ LineDDA(typ typ typ typ typ int xStart,typ typ typ typ typ int yStart,typ typ typ typ typ int xEnd,typ typ typ typ typ int yEnd,typ typ typ typ typ LINEDDAPROC lpProc,typ typ typ typ typ typ typ LPARAM data);
/*3650*/ typ BOOL typ LineTo(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y);
/*3651*/ BOOL typ MaskBlt(typ typ typ typ typ HDC hdcDest,typ typ typ typ typ int xDest,typ typ typ typ typ int yDest,typ typ typ typ typ int width,typ typ typ typ typ int height,
/*3652*/ typ typ typ typ typ HDC hdcSrc,typ typ typ typ typ int xSrc,typ typ typ typ typ int ySrc,typ typ typ typ typ HBITMAP hbmMask,typ typ typ typ typ int xMask,typ typ typ typ typ int yMask,typ typ typ typ typ DWORD rop);
/*3653*/ BOOL typ PlgBlt(typ typ typ typ typ HDC hdcDest,typ typ typ typ typ typ typ const POINT*lpPoint,typ typ typ typ typ HDC hdcSrc,typ typ typ typ typ int xSrc,typ typ typ typ typ int ySrc,typ typ typ typ typ int width,
/*3654*/ typ typ typ typ typ int height,typ typ typ typ typ typ typ HBITMAP hbmMask,typ typ typ typ typ int xMask,typ typ typ typ typ int yMask);
/*3656*/ typ int typ OffsetClipRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y);
/*3657*/ int typ OffsetRgn(typ typ typ typ typ HRGN hrgn,typ typ typ typ typ int x,typ typ typ typ typ int y);
/*3658*/ typ BOOL typ PatBlt(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ int w,typ typ typ typ typ int h,typ typ typ typ typ DWORD rop);
/*3659*/ typ BOOL typ Pie(typ typ typ typ typ HDC hdc,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom,typ typ typ typ typ int xr1,typ typ typ typ typ int yr1,typ typ typ typ typ int xr2,typ typ typ typ typ int yr2);
/*3660*/ BOOL typ PlayMetaFile(typ typ typ typ typ HDC hdc,typ typ typ typ typ HMETAFILE hmf);
/*3661*/ typ BOOL typ PaintRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ HRGN hrgn);
/*3662*/ typ BOOL typ PolyPolygon(typ typ typ typ typ HDC hdc,typ typ typ typ typ const POINT*apt,typ typ typ typ typ typ typ const INT*asz,typ typ typ typ typ int csz);
/*3663*/ BOOL typ PtInRegion(typ typ typ typ typ HRGN hrgn,typ typ typ typ typ int x,typ typ typ typ typ int y);
/*3664*/ BOOL typ PtVisible(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y);
/*3665*/ BOOL typ RectInRegion(typ typ typ typ typ HRGN hrgn,typ typ typ typ typ const RECT*lprect);
/*3666*/ BOOL typ RectVisible(typ typ typ typ typ HDC hdc,typ typ typ typ typ const RECT*lprect);
/*3667*/ typ BOOL typ Rectangle(typ typ typ typ typ HDC hdc,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom);
/*3668*/ typ BOOL typ RestoreDC(typ typ typ typ typ HDC hdc,typ typ typ typ typ int nSavedDC);
/*3669*/ typ HDC typ ResetDCA(typ typ typ typ typ HDC hdc,typ typ typ typ typ const DEVMODEA*lpdm);
/*3670*/ typ HDC typ ResetDCW(typ typ typ typ typ HDC hdc,typ typ typ typ typ const DEVMODEW*lpdm);
/*3676*/ typ UINT typ RealizePalette(typ typ typ typ typ HDC hdc);
/*3677*/ BOOL typ RemoveFontResourceA(typ typ typ typ typ LPCSTR lpFileName);
/*3678*/ BOOL typ RemoveFontResourceW(typ typ typ typ typ LPCWSTR lpFileName);
/*3684*/ typ BOOL typ RoundRect(typ typ typ typ typ HDC hdc,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom,typ typ typ typ typ int width,typ typ typ typ typ int height);
/*3685*/ typ BOOL typ ResizePalette(typ typ typ typ typ HPALETTE hpal,typ typ typ typ typ UINT n);
/*3687*/ typ int typ SaveDC(typ typ typ typ typ HDC hdc);
/*3688*/ typ int typ SelectClipRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ HRGN hrgn);
/*3689*/ int typ ExtSelectClipRgn(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ HRGN hrgn,typ typ typ typ typ int mode);
/*3690*/ int typ SetMetaRgn(typ typ typ typ typ HDC hdc);
/*3691*/ typ HGDIOBJ typ SelectObject(typ typ typ typ typ HDC hdc,typ typ typ typ typ HGDIOBJ h);
/*3692*/ typ HPALETTE typ SelectPalette(typ typ typ typ typ HDC hdc,typ typ typ typ typ HPALETTE hPal,typ typ typ typ typ BOOL bForceBkgd);
/*3693*/ typ COLORREF typ SetBkColor(typ typ typ typ typ HDC hdc,typ typ typ typ typ COLORREF color);
/*3700*/ typ int typ SetBkMode(typ typ typ typ typ HDC hdc,typ typ typ typ typ int mode);
/*3702*/ 
/*3703*/ LONG typ
/*3704*/ SetBitmapBits(
/*3705*/ typ typ typ typ typ HBITMAP hbm,
/*3706*/ typ typ typ typ typ DWORD cb,
/*3707*/ typ typ typ typ typ typ typ const void*pvBits);
/*3709*/ UINT typ SetBoundsRect(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const RECT*lprect,typ typ typ typ typ UINT flags);
/*3710*/ int typ SetDIBits(typ typ typ typ typ typ typ HDC hdc,typ typ typ typ typ HBITMAP hbm,typ typ typ typ typ UINT start,typ typ typ typ typ UINT cLines,typ typ typ typ typ const void*lpBits,typ typ typ typ typ const BITMAPINFO*lpbmi,typ typ typ typ typ UINT ColorUse);
/*3711*/ typ int typ SetDIBitsToDevice(typ typ typ typ typ HDC hdc,typ typ typ typ typ int xDest,typ typ typ typ typ int yDest,typ typ typ typ typ DWORD w,typ typ typ typ typ DWORD h,typ typ typ typ typ int xSrc,
/*3712*/ typ typ typ typ typ int ySrc,typ typ typ typ typ UINT StartScan,typ typ typ typ typ UINT cLines,typ typ typ typ typ const void*lpvBits,typ typ typ typ typ const BITMAPINFO*lpbmi,typ typ typ typ typ UINT ColorUse);
/*3713*/ typ DWORD typ SetMapperFlags(typ typ typ typ typ HDC hdc,typ typ typ typ typ DWORD flags);
/*3714*/ int typ SetGraphicsMode(typ typ typ typ typ HDC hdc,typ typ typ typ typ int iMode);
/*3715*/ typ int typ SetMapMode(typ typ typ typ typ HDC hdc,typ typ typ typ typ int iMode);
/*3718*/ typ DWORD typ SetLayout(typ typ typ typ typ HDC hdc,typ typ typ typ typ DWORD l);
/*3719*/ DWORD typ GetLayout(typ typ typ typ typ HDC hdc);
/*3722*/ HMETAFILE typ SetMetaFileBitsEx(typ typ typ typ typ UINT cbBuffer,typ typ typ typ typ typ typ const BYTE*lpData);
/*3723*/ typ UINT typ SetPaletteEntries(typ typ typ typ typ HPALETTE hpal,
/*3724*/ typ typ typ typ typ UINT iStart,
/*3725*/ typ typ typ typ typ UINT cEntries,
/*3726*/ typ typ typ typ typ typ typ const PALETTEENTRY*pPalEntries);
/*3727*/ typ COLORREF typ SetPixel(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ COLORREF color);
/*3728*/ BOOL typ SetPixelV(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ COLORREF color);
/*3729*/ BOOL typ SetPixelFormat(typ typ typ typ typ HDC hdc,typ typ typ typ typ int format,typ typ typ typ typ const PIXELFORMATDESCRIPTOR*ppfd);
/*3730*/ typ int typ SetPolyFillMode(typ typ typ typ typ HDC hdc,typ typ typ typ typ int mode);
/*3731*/ typ BOOL typ StretchBlt(typ typ typ typ typ HDC hdcDest,typ typ typ typ typ int xDest,typ typ typ typ typ int yDest,typ typ typ typ typ int wDest,typ typ typ typ typ int hDest,typ typ typ typ typ typ typ HDC hdcSrc,typ typ typ typ typ int xSrc,typ typ typ typ typ int ySrc,typ typ typ typ typ int wSrc,typ typ typ typ typ int hSrc,typ typ typ typ typ DWORD rop);
/*3732*/ BOOL typ SetRectRgn(typ typ typ typ typ HRGN hrgn,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom);
/*3733*/ typ int typ StretchDIBits(typ typ typ typ typ HDC hdc,typ typ typ typ typ int xDest,typ typ typ typ typ int yDest,typ typ typ typ typ int DestWidth,typ typ typ typ typ int DestHeight,typ typ typ typ typ int xSrc,typ typ typ typ typ int ySrc,typ typ typ typ typ int SrcWidth,typ typ typ typ typ int SrcHeight,
/*3734*/ typ typ typ typ typ typ typ const void*lpBits,typ typ typ typ typ const BITMAPINFO*lpbmi,typ typ typ typ typ UINT iUsage,typ typ typ typ typ DWORD rop);
/*3735*/ typ int typ SetROP2(typ typ typ typ typ HDC hdc,typ typ typ typ typ int rop2);
/*3736*/ typ int typ SetStretchBltMode(typ typ typ typ typ HDC hdc,typ typ typ typ typ int mode);
/*3737*/ UINT typ SetSystemPaletteUse(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT use);
/*3738*/ typ int typ SetTextCharacterExtra(typ typ typ typ typ HDC hdc,typ typ typ typ typ int extra);
/*3739*/ typ COLORREF typ SetTextColor(typ typ typ typ typ HDC hdc,typ typ typ typ typ COLORREF color);
/*3740*/ typ UINT typ SetTextAlign(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT align);
/*3741*/ typ BOOL typ SetTextJustification(typ typ typ typ typ HDC hdc,typ typ typ typ typ int extra,typ typ typ typ typ int count);
/*3742*/ BOOL typ UpdateColors(typ typ typ typ typ HDC hdc);
/*3780*/ typedef USHORT COLOR16;
/*3782*/ typedef struct _TRIVERTEX
/*3783*/ {
/*3784*/ LONG x;
/*3785*/ LONG y;
/*3786*/ COLOR16 Red;
/*3787*/ COLOR16 Green;
/*3788*/ COLOR16 Blue;
/*3789*/ COLOR16 Alpha;
/*3790*/ }TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;
/*3792*/ typedef struct _GRADIENT_TRIANGLE
/*3793*/ {
/*3794*/ ULONG Vertex1;
/*3795*/ ULONG Vertex2;
/*3796*/ ULONG Vertex3;
/*3797*/ }GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;
/*3799*/ typedef struct _GRADIENT_RECT
/*3800*/ {
/*3801*/ ULONG UpperLeft;
/*3802*/ ULONG LowerRight;
/*3803*/ }GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;
/*3805*/ typedef struct _BLENDFUNCTION
/*3806*/ {
/*3807*/ BYTE BlendOp;
/*3808*/ BYTE BlendFlags;
/*3809*/ BYTE SourceConstantAlpha;
/*3810*/ BYTE AlphaFormat;
/*3811*/ }BLENDFUNCTION,*PBLENDFUNCTION;
/*3826*/ BOOL typ AlphaBlend(typ typ typ typ typ HDC hdcDest,typ typ typ typ typ int xoriginDest,typ typ typ typ typ int yoriginDest,typ typ typ typ typ int wDest,typ typ typ typ typ int hDest,typ typ typ typ typ HDC hdcSrc,typ typ typ typ typ int xoriginSrc,typ typ typ typ typ int yoriginSrc,typ typ typ typ typ int wSrc,typ typ typ typ typ int hSrc,typ typ typ typ typ BLENDFUNCTION ftn);
/*3828*/ BOOL typ TransparentBlt(typ typ typ typ typ HDC hdcDest,typ typ typ typ typ int xoriginDest,typ typ typ typ typ int yoriginDest,typ typ typ typ typ int wDest,typ typ typ typ typ int hDest,typ typ typ typ typ HDC hdcSrc,
/*3829*/ typ typ typ typ typ int xoriginSrc,typ typ typ typ typ int yoriginSrc,typ typ typ typ typ int wSrc,typ typ typ typ typ int hSrc,typ typ typ typ typ UINT crTransparent);
/*3841*/ 
/*3842*/ BOOL
/*3843*/ typ
/*3844*/ GradientFill(
/*3845*/ typ typ typ typ typ HDC hdc,
/*3846*/ typ typ typ typ typ typ typ PTRIVERTEX pVertex,
/*3847*/ typ typ typ typ typ ULONG nVertex,
/*3848*/ typ typ typ typ typ PVOID pMesh,
/*3849*/ typ typ typ typ typ ULONG nMesh,
/*3850*/ typ typ typ typ typ ULONG ulMode
/*3851*/ );
/*3875*/ BOOL typ PlayMetaFileRecord(typ typ typ typ typ HDC hdc,
/*3876*/ typ typ typ typ typ typ typ LPHANDLETABLE lpHandleTable,
/*3877*/ typ typ typ typ typ LPMETARECORD lpMR,
/*3878*/ typ typ typ typ typ UINT noObjs);
/*3880*/ typedef int(typ*MFENUMPROC)(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ HANDLETABLE typ*lpht,typ typ typ typ typ METARECORD typ*lpMR,typ typ typ typ typ int nObj,typ typ typ typ typ typ typ LPARAM param);
/*3881*/ BOOL typ EnumMetaFile(typ typ typ typ typ HDC hdc,typ typ typ typ typ HMETAFILE hmf,typ typ typ typ typ MFENUMPROC proc,typ typ typ typ typ typ typ LPARAM param);
/*3883*/ typedef int(typ*ENHMFENUMPROC)(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ HANDLETABLE typ*lpht,typ typ typ typ typ const ENHMETARECORD*lpmr,typ typ typ typ typ int hHandles,typ typ typ typ typ typ typ LPARAM data);
/*3887*/ HENHMETAFILE typ CloseEnhMetaFile(typ typ typ typ typ HDC hdc);
/*3888*/ HENHMETAFILE typ CopyEnhMetaFileA(typ typ typ typ typ HENHMETAFILE hEnh,typ typ typ typ typ typ typ LPCSTR lpFileName);
/*3889*/ HENHMETAFILE typ CopyEnhMetaFileW(typ typ typ typ typ HENHMETAFILE hEnh,typ typ typ typ typ typ typ LPCWSTR lpFileName);
/*3895*/ HDC typ CreateEnhMetaFileA(typ typ typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCSTR lpFilename,typ typ typ typ typ typ typ const RECT*lprc,typ typ typ typ typ typ typ LPCSTR lpDesc);
/*3896*/ HDC typ CreateEnhMetaFileW(typ typ typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPCWSTR lpFilename,typ typ typ typ typ typ typ const RECT*lprc,typ typ typ typ typ typ typ LPCWSTR lpDesc);
/*3902*/ BOOL typ DeleteEnhMetaFile(typ typ typ typ typ typ typ HENHMETAFILE hmf);
/*3903*/ BOOL typ EnumEnhMetaFile(typ typ typ typ typ typ typ HDC hdc,typ typ typ typ typ HENHMETAFILE hmf,typ typ typ typ typ ENHMFENUMPROC proc,
/*3904*/ typ typ typ typ typ typ typ LPVOID param,typ typ typ typ typ typ typ const RECT*lpRect);
/*3905*/ HENHMETAFILE typ GetEnhMetaFileA(typ typ typ typ typ LPCSTR lpName);
/*3906*/ HENHMETAFILE typ GetEnhMetaFileW(typ typ typ typ typ LPCWSTR lpName);
/*3912*/ UINT typ GetEnhMetaFileBits(typ typ typ typ typ HENHMETAFILE hEMF,
/*3913*/ typ typ typ typ typ UINT nSize,
/*3914*/ typ typ typ typ typ typ typ LPBYTE lpData);
/*3915*/ UINT typ GetEnhMetaFileDescriptionA(typ typ typ typ typ HENHMETAFILE hemf,
/*3916*/ typ typ typ typ typ UINT cchBuffer,
/*3917*/ typ typ typ typ typ typ typ LPSTR lpDescription);
/*3918*/ UINT typ GetEnhMetaFileDescriptionW(typ typ typ typ typ HENHMETAFILE hemf,
/*3919*/ typ typ typ typ typ UINT cchBuffer,
/*3920*/ typ typ typ typ typ typ typ LPWSTR lpDescription);
/*3926*/ UINT typ GetEnhMetaFileHeader(typ typ typ typ typ HENHMETAFILE hemf,
/*3927*/ typ typ typ typ typ UINT nSize,
/*3928*/ typ typ typ typ typ typ typ LPENHMETAHEADER lpEnhMetaHeader);
/*3929*/ UINT typ GetEnhMetaFilePaletteEntries(typ typ typ typ typ HENHMETAFILE hemf,
/*3930*/ typ typ typ typ typ UINT nNumEntries,
/*3931*/ typ typ typ typ typ typ typ LPPALETTEENTRY lpPaletteEntries);
/*3933*/ UINT typ GetEnhMetaFilePixelFormat(typ typ typ typ typ HENHMETAFILE hemf,
/*3934*/ typ typ typ typ typ UINT cbBuffer,
/*3935*/ typ typ typ typ typ typ typ PIXELFORMATDESCRIPTOR*ppfd);
/*3936*/ UINT typ GetWinMetaFileBits(typ typ typ typ typ HENHMETAFILE hemf,
/*3937*/ typ typ typ typ typ UINT cbData16,
/*3938*/ typ typ typ typ typ typ typ LPBYTE pData16,
/*3939*/ typ typ typ typ typ INT iMapMode,
/*3940*/ typ typ typ typ typ HDC hdcRef);
/*3941*/ BOOL typ PlayEnhMetaFile(typ typ typ typ typ HDC hdc,typ typ typ typ typ HENHMETAFILE hmf,typ typ typ typ typ const RECT*lprect);
/*3942*/ BOOL typ PlayEnhMetaFileRecord(typ typ typ typ typ HDC hdc,
/*3943*/ typ typ typ typ typ typ typ LPHANDLETABLE pht,
/*3944*/ typ typ typ typ typ const ENHMETARECORD*pmr,
/*3945*/ typ typ typ typ typ UINT cht);
/*3947*/ HENHMETAFILE typ SetEnhMetaFileBits(typ typ typ typ typ UINT nSize,
/*3948*/ typ typ typ typ typ typ typ const BYTE*pb);
/*3950*/ HENHMETAFILE typ SetWinMetaFileBits(typ typ typ typ typ UINT nSize,
/*3951*/ typ typ typ typ typ typ typ const BYTE*lpMeta16Data,
/*3952*/ typ typ typ typ typ typ typ HDC hdcRef,
/*3953*/ typ typ typ typ typ typ typ const METAFILEPICT*lpMFP);
/*3954*/ BOOL typ GdiComment(typ typ typ typ typ HDC hdc,typ typ typ typ typ UINT nSize,typ typ typ typ typ typ typ const BYTE*lpData);
/*3960*/ BOOL typ GetTextMetricsA(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPTEXTMETRICA lptm);
/*3961*/ BOOL typ GetTextMetricsW(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPTEXTMETRICW lptm);
/*3992*/ typedef struct tagDIBSECTION{
/*3993*/ BITMAP dsBm;
/*3994*/ BITMAPINFOHEADER dsBmih;
/*3995*/ DWORD dsBitfields[3];
/*3996*/ HANDLE dshSection;
/*3997*/ DWORD dsOffset;
/*3998*/ }DIBSECTION,typ*LPDIBSECTION,*PDIBSECTION;
/*4001*/ BOOL typ AngleArc(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ DWORD r,typ typ typ typ typ FLOAT StartAngle,typ typ typ typ typ FLOAT SweepAngle);
/*4002*/ BOOL typ PolyPolyline(typ typ typ typ typ HDC hdc,typ typ typ typ typ const POINT*apt,typ typ typ typ typ typ typ const DWORD*asz,typ typ typ typ typ DWORD csz);
/*4003*/ BOOL typ GetWorldTransform(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPXFORM lpxf);
/*4004*/ BOOL typ SetWorldTransform(typ typ typ typ typ HDC hdc,typ typ typ typ typ const XFORM*lpxf);
/*4005*/ BOOL typ ModifyWorldTransform(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const XFORM*lpxf,typ typ typ typ typ DWORD mode);
/*4006*/ BOOL typ CombineTransform(typ typ typ typ typ LPXFORM lpxfOut,typ typ typ typ typ const XFORM*lpxf1,typ typ typ typ typ const XFORM*lpxf2);
/*4007*/ HBITMAP typ CreateDIBSection(typ typ typ typ typ typ typ HDC hdc,typ typ typ typ typ const BITMAPINFO*lpbmi,typ typ typ typ typ UINT usage,typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppvBits,typ typ typ typ typ typ typ HANDLE hSection,typ typ typ typ typ DWORD offset);
/*4008*/ UINT typ GetDIBColorTable(typ typ typ typ typ HDC hdc,
/*4009*/ typ typ typ typ typ UINT iStart,
/*4010*/ typ typ typ typ typ UINT cEntries,
/*4011*/ typ typ typ typ typ RGBQUAD*prgbq);
/*4012*/ UINT typ SetDIBColorTable(typ typ typ typ typ HDC hdc,
/*4013*/ typ typ typ typ typ UINT iStart,
/*4014*/ typ typ typ typ typ UINT cEntries,
/*4015*/ typ typ typ typ typ typ typ const RGBQUAD*prgbq);
/*4052*/ typedef struct tagCOLORADJUSTMENT{
/*4053*/ WORD caSize;
/*4054*/ WORD caFlags;
/*4055*/ WORD caIlluminantIndex;
/*4056*/ WORD caRedGamma;
/*4057*/ WORD caGreenGamma;
/*4058*/ WORD caBlueGamma;
/*4059*/ WORD caReferenceBlack;
/*4060*/ WORD caReferenceWhite;
/*4061*/ SHORT caContrast;
/*4062*/ SHORT caBrightness;
/*4063*/ SHORT caColorfulness;
/*4064*/ SHORT caRedGreenTint;
/*4065*/ }COLORADJUSTMENT,*PCOLORADJUSTMENT,typ*LPCOLORADJUSTMENT;
/*4067*/ BOOL typ SetColorAdjustment(typ typ typ typ typ HDC hdc,typ typ typ typ typ const COLORADJUSTMENT*lpca);
/*4068*/ BOOL typ GetColorAdjustment(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPCOLORADJUSTMENT lpca);
/*4069*/ HPALETTE typ CreateHalftonePalette(typ typ typ typ typ typ typ HDC hdc);
/*4072*/ typedef BOOL(typ*ABORTPROC)(typ typ typ typ typ HDC,typ typ typ typ typ int);
/*4077*/ typedef struct _DOCINFOA{
/*4078*/ int cbSize;
/*4079*/ LPCSTR lpszDocName;
/*4080*/ LPCSTR lpszOutput;
/*4082*/ LPCSTR lpszDatatype;
/*4083*/ DWORD fwType;
/*4085*/ }DOCINFOA,*LPDOCINFOA;
/*4086*/ typedef struct _DOCINFOW{
/*4087*/ int cbSize;
/*4088*/ LPCWSTR lpszDocName;
/*4089*/ LPCWSTR lpszOutput;
/*4091*/ LPCWSTR lpszDatatype;
/*4092*/ DWORD fwType;
/*4094*/ }DOCINFOW,*LPDOCINFOW;
/*4099*/ typedef DOCINFOA DOCINFO;
/*4100*/ typedef LPDOCINFOA LPDOCINFO;
/*4108*/ typ int typ StartDocA(typ typ typ typ typ HDC hdc,typ typ typ typ typ const DOCINFOA*lpdi);
/*4109*/ typ int typ StartDocW(typ typ typ typ typ HDC hdc,typ typ typ typ typ const DOCINFOW*lpdi);
/*4115*/ typ int typ EndDoc(typ typ typ typ typ HDC hdc);
/*4116*/ typ int typ StartPage(typ typ typ typ typ HDC hdc);
/*4117*/ typ int typ EndPage(typ typ typ typ typ HDC hdc);
/*4118*/ typ int typ AbortDoc(typ typ typ typ typ HDC hdc);
/*4119*/ int typ SetAbortProc(typ typ typ typ typ HDC hdc,typ typ typ typ typ ABORTPROC proc);
/*4121*/ BOOL typ AbortPath(typ typ typ typ typ HDC hdc);
/*4122*/ BOOL typ ArcTo(typ typ typ typ typ HDC hdc,typ typ typ typ typ int left,typ typ typ typ typ int top,typ typ typ typ typ int right,typ typ typ typ typ int bottom,typ typ typ typ typ int xr1,typ typ typ typ typ int yr1,typ typ typ typ typ int xr2,typ typ typ typ typ int yr2);
/*4123*/ BOOL typ BeginPath(typ typ typ typ typ HDC hdc);
/*4124*/ BOOL typ CloseFigure(typ typ typ typ typ HDC hdc);
/*4125*/ BOOL typ EndPath(typ typ typ typ typ HDC hdc);
/*4126*/ BOOL typ FillPath(typ typ typ typ typ HDC hdc);
/*4127*/ BOOL typ FlattenPath(typ typ typ typ typ HDC hdc);
/*4128*/ int typ GetPath(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPPOINT apt,typ typ typ typ typ LPBYTE aj,int cpt);
/*4129*/ HRGN typ PathToRegion(typ typ typ typ typ HDC hdc);
/*4130*/ BOOL typ PolyDraw(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POINT*apt,typ typ typ typ typ typ typ const BYTE*aj,typ typ typ typ typ int cpt);
/*4131*/ BOOL typ SelectClipPath(typ typ typ typ typ HDC hdc,typ typ typ typ typ int mode);
/*4132*/ int typ SetArcDirection(typ typ typ typ typ HDC hdc,typ typ typ typ typ int dir);
/*4133*/ BOOL typ SetMiterLimit(typ typ typ typ typ HDC hdc,typ typ typ typ typ FLOAT limit,typ typ typ typ typ typ typ PFLOAT old);
/*4134*/ BOOL typ StrokeAndFillPath(typ typ typ typ typ HDC hdc);
/*4135*/ BOOL typ StrokePath(typ typ typ typ typ HDC hdc);
/*4136*/ BOOL typ WidenPath(typ typ typ typ typ HDC hdc);
/*4137*/ HPEN typ ExtCreatePen(typ typ typ typ typ DWORD iPenStyle,
/*4138*/ typ typ typ typ typ DWORD cWidth,
/*4139*/ typ typ typ typ typ const LOGBRUSH*plbrush,
/*4140*/ typ typ typ typ typ DWORD cStyle,
/*4141*/ typ typ typ typ typ typ typ typ typ const DWORD*pstyle);
/*4142*/ BOOL typ GetMiterLimit(typ typ typ typ typ HDC hdc,typ typ typ typ typ PFLOAT plimit);
/*4143*/ int typ GetArcDirection(typ typ typ typ typ HDC hdc);
/*4145*/ int typ GetObjectA(typ typ typ typ typ HANDLE h,typ typ typ typ typ int c,typ typ typ typ typ typ typ LPVOID pv);
/*4146*/ int typ GetObjectW(typ typ typ typ typ HANDLE h,typ typ typ typ typ int c,typ typ typ typ typ typ typ LPVOID pv);
/*4175*/ typ BOOL typ MoveToEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPPOINT lppt);
/*4176*/ typ BOOL typ TextOutA(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPCSTR lpString,typ typ typ typ typ int c);
/*4177*/ typ BOOL typ TextOutW(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPCWSTR lpString,typ typ typ typ typ int c);
/*4183*/ typ BOOL typ ExtTextOutA(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ UINT options,typ typ typ typ typ typ typ const RECT*lprect,typ typ typ typ typ typ typ typ typ LPCSTR lpString,typ typ typ typ typ UINT c,typ typ typ typ typ typ typ typ typ const INT*lpDx);
/*4184*/ typ BOOL typ ExtTextOutW(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ UINT options,typ typ typ typ typ typ typ const RECT*lprect,typ typ typ typ typ typ typ typ typ LPCWSTR lpString,typ typ typ typ typ UINT c,typ typ typ typ typ typ typ typ typ const INT*lpDx);
/*4190*/ BOOL typ PolyTextOutA(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POLYTEXTA*ppt,typ typ typ typ typ int nstrings);
/*4191*/ BOOL typ PolyTextOutW(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POLYTEXTW*ppt,typ typ typ typ typ int nstrings);
/*4198*/ HRGN typ CreatePolygonRgn(typ typ typ typ typ typ typ const POINT*pptl,
/*4199*/ typ typ typ typ typ int cPoint,
/*4200*/ typ typ typ typ typ int iMode);
/*4201*/ BOOL typ DPtoLP(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPPOINT lppt,typ typ typ typ typ int c);
/*4202*/ BOOL typ LPtoDP(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPPOINT lppt,typ typ typ typ typ int c);
/*4203*/ typ BOOL typ Polygon(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POINT*apt,typ typ typ typ typ int cpt);
/*4204*/ typ BOOL typ Polyline(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POINT*apt,typ typ typ typ typ int cpt);
/*4206*/ BOOL typ PolyBezier(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POINT*apt,typ typ typ typ typ DWORD cpt);
/*4207*/ BOOL typ PolyBezierTo(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POINT*apt,typ typ typ typ typ DWORD cpt);
/*4208*/ BOOL typ PolylineTo(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ const POINT*apt,typ typ typ typ typ DWORD cpt);
/*4210*/ typ BOOL typ SetViewportExtEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPSIZE lpsz);
/*4211*/ typ BOOL typ SetViewportOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPPOINT lppt);
/*4212*/ typ BOOL typ SetWindowExtEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPSIZE lpsz);
/*4213*/ typ BOOL typ SetWindowOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPPOINT lppt);
/*4215*/ typ BOOL typ OffsetViewportOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPPOINT lppt);
/*4216*/ typ BOOL typ OffsetWindowOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPPOINT lppt);
/*4217*/ typ BOOL typ ScaleViewportExtEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int xn,typ typ typ typ typ int dx,typ typ typ typ typ int yn,typ typ typ typ typ int yd,typ typ typ typ typ typ typ LPSIZE lpsz);
/*4218*/ typ BOOL typ ScaleWindowExtEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int xn,typ typ typ typ typ int xd,typ typ typ typ typ int yn,typ typ typ typ typ int yd,typ typ typ typ typ typ typ LPSIZE lpsz);
/*4219*/ BOOL typ SetBitmapDimensionEx(typ typ typ typ typ HBITMAP hbm,typ typ typ typ typ int w,typ typ typ typ typ int h,typ typ typ typ typ typ typ LPSIZE lpsz);
/*4220*/ BOOL typ SetBrushOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPPOINT lppt);
/*4222*/ int typ GetTextFaceA(typ typ typ typ typ HDC hdc,typ typ typ typ typ int c,typ typ typ typ typ typ typ typ typ LPSTR lpName);
/*4223*/ int typ GetTextFaceW(typ typ typ typ typ HDC hdc,typ typ typ typ typ int c,typ typ typ typ typ typ typ typ typ LPWSTR lpName);
/*4232*/ typedef struct tagKERNINGPAIR{
/*4233*/ WORD wFirst;
/*4234*/ WORD wSecond;
/*4235*/ int iKernAmount;
/*4236*/ }KERNINGPAIR,*LPKERNINGPAIR;
/*4238*/ DWORD typ GetKerningPairsA(typ typ typ typ typ HDC hdc,
/*4239*/ typ typ typ typ typ DWORD nPairs,
/*4240*/ typ typ typ typ typ typ typ typ typ LPKERNINGPAIR lpKernPair);
/*4241*/ DWORD typ GetKerningPairsW(typ typ typ typ typ HDC hdc,
/*4242*/ typ typ typ typ typ DWORD nPairs,
/*4243*/ typ typ typ typ typ typ typ typ typ LPKERNINGPAIR lpKernPair);
/*4251*/ BOOL typ GetDCOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPPOINT lppt);
/*4252*/ BOOL typ FixBrushOrgEx(typ typ typ typ typ HDC hdc,typ typ typ typ typ int x,typ typ typ typ typ int y,typ typ typ typ typ typ typ LPPOINT ptl);
/*4253*/ BOOL typ UnrealizeObject(typ typ typ typ typ HGDIOBJ h);
/*4255*/ BOOL typ GdiFlush(void);
/*4256*/ DWORD typ GdiSetBatchLimit(typ typ typ typ typ DWORD dw);
/*4257*/ DWORD typ GdiGetBatchLimit(void);
/*4266*/ typedef int(typ*ICMENUMPROCA)(LPSTR,LPARAM);
/*4267*/ typedef int(typ*ICMENUMPROCW)(LPWSTR,LPARAM);
/*4274*/ int typ SetICMMode(typ typ typ typ typ HDC hdc,typ typ typ typ typ int mode);
/*4275*/ BOOL typ CheckColorsInGamut(typ typ typ typ typ HDC hdc,
/*4276*/ typ typ typ typ typ typ typ LPRGBTRIPLE lpRGBTriple,
/*4277*/ typ typ typ typ typ LPVOID dlpBuffer,
/*4278*/ typ typ typ typ typ DWORD nCount);
/*4280*/ HCOLORSPACE typ GetColorSpace(typ typ typ typ typ HDC hdc);
/*4281*/ BOOL typ GetLogColorSpaceA(typ typ typ typ typ HCOLORSPACE hColorSpace,
/*4282*/ typ typ typ typ typ LPLOGCOLORSPACEA lpBuffer,
/*4283*/ typ typ typ typ typ DWORD nSize);
/*4284*/ BOOL typ GetLogColorSpaceW(typ typ typ typ typ HCOLORSPACE hColorSpace,
/*4285*/ typ typ typ typ typ LPLOGCOLORSPACEW lpBuffer,
/*4286*/ typ typ typ typ typ DWORD nSize);
/*4293*/ HCOLORSPACE typ CreateColorSpaceA(typ typ typ typ typ LPLOGCOLORSPACEA lplcs);
/*4294*/ HCOLORSPACE typ CreateColorSpaceW(typ typ typ typ typ LPLOGCOLORSPACEW lplcs);
/*4300*/ HCOLORSPACE typ SetColorSpace(typ typ typ typ typ HDC hdc,typ typ typ typ typ HCOLORSPACE hcs);
/*4301*/ BOOL typ DeleteColorSpace(typ typ typ typ typ HCOLORSPACE hcs);
/*4302*/ BOOL typ GetICMProfileA(typ typ typ typ typ HDC hdc,
/*4303*/ typ typ typ typ typ LPDWORD pBufSize,
/*4304*/ typ typ typ typ typ typ typ LPSTR pszFilename);
/*4305*/ BOOL typ GetICMProfileW(typ typ typ typ typ HDC hdc,
/*4306*/ typ typ typ typ typ LPDWORD pBufSize,
/*4307*/ typ typ typ typ typ typ typ LPWSTR pszFilename);
/*4314*/ BOOL typ SetICMProfileA(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPSTR lpFileName);
/*4315*/ BOOL typ SetICMProfileW(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPWSTR lpFileName);
/*4321*/ BOOL typ GetDeviceGammaRamp(typ typ typ typ typ HDC hdc,typ typ typ typ typ LPVOID lpRamp);
/*4322*/ BOOL typ SetDeviceGammaRamp(typ typ typ typ typ HDC hdc,typ typ typ typ typ typ typ LPVOID lpRamp);
/*4323*/ BOOL typ ColorMatchToTarget(typ typ typ typ typ HDC hdc,typ typ typ typ typ HDC hdcTarget,typ typ typ typ typ DWORD action);
/*4324*/ int typ EnumICMProfilesA(typ typ typ typ typ HDC hdc,typ typ typ typ typ ICMENUMPROCA proc,typ typ typ typ typ typ typ LPARAM param);
/*4325*/ int typ EnumICMProfilesW(typ typ typ typ typ HDC hdc,typ typ typ typ typ ICMENUMPROCW proc,typ typ typ typ typ typ typ LPARAM param);
/*4332*/ BOOL typ UpdateICMRegKeyA(typ typ DWORD reserved,typ typ typ typ typ LPSTR lpszCMID,typ typ typ typ typ LPSTR lpszFileName,typ typ typ typ typ UINT command);
/*4334*/ BOOL typ UpdateICMRegKeyW(typ typ DWORD reserved,typ typ typ typ typ LPWSTR lpszCMID,typ typ typ typ typ LPWSTR lpszFileName,typ typ typ typ typ UINT command);
/*4346*/ BOOL typ ColorCorrectPalette(typ typ typ typ typ HDC hdc,typ typ typ typ typ HPALETTE hPal,typ typ typ typ typ DWORD deFirst,typ typ typ typ typ DWORD num);
/*4511*/ typedef struct tagEMR
/*4512*/ {
/*4513*/ DWORD iType;
/*4514*/ DWORD nSize;
/*4516*/ }EMR,*PEMR;
/*4520*/ typedef struct tagEMRTEXT
/*4521*/ {
/*4522*/ POINTL ptlReference;
/*4523*/ DWORD nChars;
/*4524*/ DWORD offString;
/*4525*/ DWORD fOptions;
/*4526*/ RECTL rcl;
/*4527*/ DWORD offDx;
/*4529*/ }EMRTEXT,*PEMRTEXT;
/*4533*/ typedef struct tagABORTPATH
/*4534*/ {
/*4535*/ EMR emr;
/*4536*/ }EMRABORTPATH,*PEMRABORTPATH,
/*4537*/ EMRBEGINPATH,*PEMRBEGINPATH,
/*4538*/ EMRENDPATH,*PEMRENDPATH,
/*4539*/ EMRCLOSEFIGURE,*PEMRCLOSEFIGURE,
/*4540*/ EMRFLATTENPATH,*PEMRFLATTENPATH,
/*4541*/ EMRWIDENPATH,*PEMRWIDENPATH,
/*4542*/ EMRSETMETARGN,*PEMRSETMETARGN,
/*4543*/ EMRSAVEDC,*PEMRSAVEDC,
/*4544*/ EMRREALIZEPALETTE,*PEMRREALIZEPALETTE;
/*4546*/ typedef struct tagEMRSELECTCLIPPATH
/*4547*/ {
/*4548*/ EMR emr;
/*4549*/ DWORD iMode;
/*4550*/ }EMRSELECTCLIPPATH,*PEMRSELECTCLIPPATH,
/*4551*/ EMRSETBKMODE,*PEMRSETBKMODE,
/*4552*/ EMRSETMAPMODE,*PEMRSETMAPMODE,
/*4554*/ EMRSETLAYOUT,*PEMRSETLAYOUT,
/*4556*/ EMRSETPOLYFILLMODE,*PEMRSETPOLYFILLMODE,
/*4557*/ EMRSETROP2,*PEMRSETROP2,
/*4558*/ EMRSETSTRETCHBLTMODE,*PEMRSETSTRETCHBLTMODE,
/*4559*/ EMRSETICMMODE,*PEMRSETICMMODE,
/*4560*/ EMRSETTEXTALIGN,*PEMRSETTEXTALIGN;
/*4562*/ typedef struct tagEMRSETMITERLIMIT
/*4563*/ {
/*4564*/ EMR emr;
/*4565*/ FLOAT eMiterLimit;
/*4566*/ }EMRSETMITERLIMIT,*PEMRSETMITERLIMIT;
/*4568*/ typedef struct tagEMRRESTOREDC
/*4569*/ {
/*4570*/ EMR emr;
/*4571*/ LONG iRelative;
/*4572*/ }EMRRESTOREDC,*PEMRRESTOREDC;
/*4574*/ typedef struct tagEMRSETARCDIRECTION
/*4575*/ {
/*4576*/ EMR emr;
/*4577*/ DWORD iArcDirection;
/*4579*/ }EMRSETARCDIRECTION,*PEMRSETARCDIRECTION;
/*4581*/ typedef struct tagEMRSETMAPPERFLAGS
/*4582*/ {
/*4583*/ EMR emr;
/*4584*/ DWORD dwFlags;
/*4585*/ }EMRSETMAPPERFLAGS,*PEMRSETMAPPERFLAGS;
/*4587*/ typedef struct tagEMRSETTEXTCOLOR
/*4588*/ {
/*4589*/ EMR emr;
/*4590*/ COLORREF crColor;
/*4591*/ }EMRSETBKCOLOR,*PEMRSETBKCOLOR,
/*4592*/ EMRSETTEXTCOLOR,*PEMRSETTEXTCOLOR;
/*4594*/ typedef struct tagEMRSELECTOBJECT
/*4595*/ {
/*4596*/ EMR emr;
/*4597*/ DWORD ihObject;
/*4598*/ }EMRSELECTOBJECT,*PEMRSELECTOBJECT,
/*4599*/ EMRDELETEOBJECT,*PEMRDELETEOBJECT;
/*4601*/ typedef struct tagEMRSELECTPALETTE
/*4602*/ {
/*4603*/ EMR emr;
/*4604*/ DWORD ihPal;
/*4605*/ }EMRSELECTPALETTE,*PEMRSELECTPALETTE;
/*4607*/ typedef struct tagEMRRESIZEPALETTE
/*4608*/ {
/*4609*/ EMR emr;
/*4610*/ DWORD ihPal;
/*4611*/ DWORD cEntries;
/*4612*/ }EMRRESIZEPALETTE,*PEMRRESIZEPALETTE;
/*4614*/ typedef struct tagEMRSETPALETTEENTRIES
/*4615*/ {
/*4616*/ EMR emr;
/*4617*/ DWORD ihPal;
/*4618*/ DWORD iStart;
/*4619*/ DWORD cEntries;
/*4620*/ PALETTEENTRY aPalEntries[1];
/*4621*/ }EMRSETPALETTEENTRIES,*PEMRSETPALETTEENTRIES;
/*4623*/ typedef struct tagEMRSETCOLORADJUSTMENT
/*4624*/ {
/*4625*/ EMR emr;
/*4626*/ COLORADJUSTMENT ColorAdjustment;
/*4627*/ }EMRSETCOLORADJUSTMENT,*PEMRSETCOLORADJUSTMENT;
/*4629*/ typedef struct tagEMRGDICOMMENT
/*4630*/ {
/*4631*/ EMR emr;
/*4632*/ DWORD cbData;
/*4633*/ BYTE Data[1];
/*4634*/ }EMRGDICOMMENT,*PEMRGDICOMMENT;
/*4636*/ typedef struct tagEMREOF
/*4637*/ {
/*4638*/ EMR emr;
/*4639*/ DWORD nPalEntries;
/*4640*/ DWORD offPalEntries;
/*4641*/ DWORD nSizeLast;
/*4644*/ }EMREOF,*PEMREOF;
/*4646*/ typedef struct tagEMRLINETO
/*4647*/ {
/*4648*/ EMR emr;
/*4649*/ POINTL ptl;
/*4650*/ }EMRLINETO,*PEMRLINETO,
/*4651*/ EMRMOVETOEX,*PEMRMOVETOEX;
/*4653*/ typedef struct tagEMROFFSETCLIPRGN
/*4654*/ {
/*4655*/ EMR emr;
/*4656*/ POINTL ptlOffset;
/*4657*/ }EMROFFSETCLIPRGN,*PEMROFFSETCLIPRGN;
/*4659*/ typedef struct tagEMRFILLPATH
/*4660*/ {
/*4661*/ EMR emr;
/*4662*/ RECTL rclBounds;
/*4663*/ }EMRFILLPATH,*PEMRFILLPATH,
/*4664*/ EMRSTROKEANDFILLPATH,*PEMRSTROKEANDFILLPATH,
/*4665*/ EMRSTROKEPATH,*PEMRSTROKEPATH;
/*4667*/ typedef struct tagEMREXCLUDECLIPRECT
/*4668*/ {
/*4669*/ EMR emr;
/*4670*/ RECTL rclClip;
/*4671*/ }EMREXCLUDECLIPRECT,*PEMREXCLUDECLIPRECT,
/*4672*/ EMRINTERSECTCLIPRECT,*PEMRINTERSECTCLIPRECT;
/*4674*/ typedef struct tagEMRSETVIEWPORTORGEX
/*4675*/ {
/*4676*/ EMR emr;
/*4677*/ POINTL ptlOrigin;
/*4678*/ }EMRSETVIEWPORTORGEX,*PEMRSETVIEWPORTORGEX,
/*4679*/ EMRSETWINDOWORGEX,*PEMRSETWINDOWORGEX,
/*4680*/ EMRSETBRUSHORGEX,*PEMRSETBRUSHORGEX;
/*4682*/ typedef struct tagEMRSETVIEWPORTEXTEX
/*4683*/ {
/*4684*/ EMR emr;
/*4685*/ SIZEL szlExtent;
/*4686*/ }EMRSETVIEWPORTEXTEX,*PEMRSETVIEWPORTEXTEX,
/*4687*/ EMRSETWINDOWEXTEX,*PEMRSETWINDOWEXTEX;
/*4689*/ typedef struct tagEMRSCALEVIEWPORTEXTEX
/*4690*/ {
/*4691*/ EMR emr;
/*4692*/ LONG xNum;
/*4693*/ LONG xDenom;
/*4694*/ LONG yNum;
/*4695*/ LONG yDenom;
/*4696*/ }EMRSCALEVIEWPORTEXTEX,*PEMRSCALEVIEWPORTEXTEX,
/*4697*/ EMRSCALEWINDOWEXTEX,*PEMRSCALEWINDOWEXTEX;
/*4699*/ typedef struct tagEMRSETWORLDTRANSFORM
/*4700*/ {
/*4701*/ EMR emr;
/*4702*/ XFORM xform;
/*4703*/ }EMRSETWORLDTRANSFORM,*PEMRSETWORLDTRANSFORM;
/*4705*/ typedef struct tagEMRMODIFYWORLDTRANSFORM
/*4706*/ {
/*4707*/ EMR emr;
/*4708*/ XFORM xform;
/*4709*/ DWORD iMode;
/*4710*/ }EMRMODIFYWORLDTRANSFORM,*PEMRMODIFYWORLDTRANSFORM;
/*4712*/ typedef struct tagEMRSETPIXELV
/*4713*/ {
/*4714*/ EMR emr;
/*4715*/ POINTL ptlPixel;
/*4716*/ COLORREF crColor;
/*4717*/ }EMRSETPIXELV,*PEMRSETPIXELV;
/*4719*/ typedef struct tagEMREXTFLOODFILL
/*4720*/ {
/*4721*/ EMR emr;
/*4722*/ POINTL ptlStart;
/*4723*/ COLORREF crColor;
/*4724*/ DWORD iMode;
/*4725*/ }EMREXTFLOODFILL,*PEMREXTFLOODFILL;
/*4727*/ typedef struct tagEMRELLIPSE
/*4728*/ {
/*4729*/ EMR emr;
/*4730*/ RECTL rclBox;
/*4731*/ }EMRELLIPSE,*PEMRELLIPSE,
/*4732*/ EMRRECTANGLE,*PEMRRECTANGLE;
/*4735*/ typedef struct tagEMRROUNDRECT
/*4736*/ {
/*4737*/ EMR emr;
/*4738*/ RECTL rclBox;
/*4739*/ SIZEL szlCorner;
/*4740*/ }EMRROUNDRECT,*PEMRROUNDRECT;
/*4742*/ typedef struct tagEMRARC
/*4743*/ {
/*4744*/ EMR emr;
/*4745*/ RECTL rclBox;
/*4746*/ POINTL ptlStart;
/*4747*/ POINTL ptlEnd;
/*4748*/ }EMRARC,*PEMRARC,
/*4749*/ EMRARCTO,*PEMRARCTO,
/*4750*/ EMRCHORD,*PEMRCHORD,
/*4751*/ EMRPIE,*PEMRPIE;
/*4753*/ typedef struct tagEMRANGLEARC
/*4754*/ {
/*4755*/ EMR emr;
/*4756*/ POINTL ptlCenter;
/*4757*/ DWORD nRadius;
/*4758*/ FLOAT eStartAngle;
/*4759*/ FLOAT eSweepAngle;
/*4760*/ }EMRANGLEARC,*PEMRANGLEARC;
/*4762*/ typedef struct tagEMRPOLYLINE
/*4763*/ {
/*4764*/ EMR emr;
/*4765*/ RECTL rclBounds;
/*4766*/ DWORD cptl;
/*4767*/ POINTL aptl[1];
/*4768*/ }EMRPOLYLINE,*PEMRPOLYLINE,
/*4769*/ EMRPOLYBEZIER,*PEMRPOLYBEZIER,
/*4770*/ EMRPOLYGON,*PEMRPOLYGON,
/*4771*/ EMRPOLYBEZIERTO,*PEMRPOLYBEZIERTO,
/*4772*/ EMRPOLYLINETO,*PEMRPOLYLINETO;
/*4774*/ typedef struct tagEMRPOLYLINE16
/*4775*/ {
/*4776*/ EMR emr;
/*4777*/ RECTL rclBounds;
/*4778*/ DWORD cpts;
/*4779*/ POINTS apts[1];
/*4780*/ }EMRPOLYLINE16,*PEMRPOLYLINE16,
/*4781*/ EMRPOLYBEZIER16,*PEMRPOLYBEZIER16,
/*4782*/ EMRPOLYGON16,*PEMRPOLYGON16,
/*4783*/ EMRPOLYBEZIERTO16,*PEMRPOLYBEZIERTO16,
/*4784*/ EMRPOLYLINETO16,*PEMRPOLYLINETO16;
/*4786*/ typedef struct tagEMRPOLYDRAW
/*4787*/ {
/*4788*/ EMR emr;
/*4789*/ RECTL rclBounds;
/*4790*/ DWORD cptl;
/*4791*/ POINTL aptl[1];
/*4792*/ BYTE abTypes[1];
/*4793*/ }EMRPOLYDRAW,*PEMRPOLYDRAW;
/*4795*/ typedef struct tagEMRPOLYDRAW16
/*4796*/ {
/*4797*/ EMR emr;
/*4798*/ RECTL rclBounds;
/*4799*/ DWORD cpts;
/*4800*/ POINTS apts[1];
/*4801*/ BYTE abTypes[1];
/*4802*/ }EMRPOLYDRAW16,*PEMRPOLYDRAW16;
/*4804*/ typedef struct tagEMRPOLYPOLYLINE
/*4805*/ {
/*4806*/ EMR emr;
/*4807*/ RECTL rclBounds;
/*4808*/ DWORD nPolys;
/*4809*/ DWORD cptl;
/*4810*/ DWORD aPolyCounts[1];
/*4811*/ POINTL aptl[1];
/*4812*/ }EMRPOLYPOLYLINE,*PEMRPOLYPOLYLINE,
/*4813*/ EMRPOLYPOLYGON,*PEMRPOLYPOLYGON;
/*4815*/ typedef struct tagEMRPOLYPOLYLINE16
/*4816*/ {
/*4817*/ EMR emr;
/*4818*/ RECTL rclBounds;
/*4819*/ DWORD nPolys;
/*4820*/ DWORD cpts;
/*4821*/ DWORD aPolyCounts[1];
/*4822*/ POINTS apts[1];
/*4823*/ }EMRPOLYPOLYLINE16,*PEMRPOLYPOLYLINE16,
/*4824*/ EMRPOLYPOLYGON16,*PEMRPOLYPOLYGON16;
/*4826*/ typedef struct tagEMRINVERTRGN
/*4827*/ {
/*4828*/ EMR emr;
/*4829*/ RECTL rclBounds;
/*4830*/ DWORD cbRgnData;
/*4831*/ BYTE RgnData[1];
/*4832*/ }EMRINVERTRGN,*PEMRINVERTRGN,
/*4833*/ EMRPAINTRGN,*PEMRPAINTRGN;
/*4835*/ typedef struct tagEMRFILLRGN
/*4836*/ {
/*4837*/ EMR emr;
/*4838*/ RECTL rclBounds;
/*4839*/ DWORD cbRgnData;
/*4840*/ DWORD ihBrush;
/*4841*/ BYTE RgnData[1];
/*4842*/ }EMRFILLRGN,*PEMRFILLRGN;
/*4844*/ typedef struct tagEMRFRAMERGN
/*4845*/ {
/*4846*/ EMR emr;
/*4847*/ RECTL rclBounds;
/*4848*/ DWORD cbRgnData;
/*4849*/ DWORD ihBrush;
/*4850*/ SIZEL szlStroke;
/*4851*/ BYTE RgnData[1];
/*4852*/ }EMRFRAMERGN,*PEMRFRAMERGN;
/*4854*/ typedef struct tagEMREXTSELECTCLIPRGN
/*4855*/ {
/*4856*/ EMR emr;
/*4857*/ DWORD cbRgnData;
/*4858*/ DWORD iMode;
/*4859*/ BYTE RgnData[1];
/*4860*/ }EMREXTSELECTCLIPRGN,*PEMREXTSELECTCLIPRGN;
/*4862*/ typedef struct tagEMREXTTEXTOUTA
/*4863*/ {
/*4864*/ EMR emr;
/*4865*/ RECTL rclBounds;
/*4866*/ DWORD iGraphicsMode;
/*4867*/ FLOAT exScale;
/*4868*/ FLOAT eyScale;
/*4869*/ EMRTEXT emrtext;
/*4871*/ }EMREXTTEXTOUTA,*PEMREXTTEXTOUTA,
/*4872*/ EMREXTTEXTOUTW,*PEMREXTTEXTOUTW;
/*4874*/ typedef struct tagEMRPOLYTEXTOUTA
/*4875*/ {
/*4876*/ EMR emr;
/*4877*/ RECTL rclBounds;
/*4878*/ DWORD iGraphicsMode;
/*4879*/ FLOAT exScale;
/*4880*/ FLOAT eyScale;
/*4881*/ LONG cStrings;
/*4882*/ EMRTEXT aemrtext[1];
/*4884*/ }EMRPOLYTEXTOUTA,*PEMRPOLYTEXTOUTA,
/*4885*/ EMRPOLYTEXTOUTW,*PEMRPOLYTEXTOUTW;
/*4887*/ typedef struct tagEMRBITBLT
/*4888*/ {
/*4889*/ EMR emr;
/*4890*/ RECTL rclBounds;
/*4891*/ LONG xDest;
/*4892*/ LONG yDest;
/*4893*/ LONG cxDest;
/*4894*/ LONG cyDest;
/*4895*/ DWORD dwRop;
/*4896*/ LONG xSrc;
/*4897*/ LONG ySrc;
/*4898*/ XFORM xformSrc;
/*4899*/ COLORREF crBkColorSrc;
/*4900*/ DWORD iUsageSrc;
/*4902*/ DWORD offBmiSrc;
/*4903*/ DWORD cbBmiSrc;
/*4904*/ DWORD offBitsSrc;
/*4905*/ DWORD cbBitsSrc;
/*4906*/ }EMRBITBLT,*PEMRBITBLT;
/*4908*/ typedef struct tagEMRSTRETCHBLT
/*4909*/ {
/*4910*/ EMR emr;
/*4911*/ RECTL rclBounds;
/*4912*/ LONG xDest;
/*4913*/ LONG yDest;
/*4914*/ LONG cxDest;
/*4915*/ LONG cyDest;
/*4916*/ DWORD dwRop;
/*4917*/ LONG xSrc;
/*4918*/ LONG ySrc;
/*4919*/ XFORM xformSrc;
/*4920*/ COLORREF crBkColorSrc;
/*4921*/ DWORD iUsageSrc;
/*4923*/ DWORD offBmiSrc;
/*4924*/ DWORD cbBmiSrc;
/*4925*/ DWORD offBitsSrc;
/*4926*/ DWORD cbBitsSrc;
/*4927*/ LONG cxSrc;
/*4928*/ LONG cySrc;
/*4929*/ }EMRSTRETCHBLT,*PEMRSTRETCHBLT;
/*4931*/ typedef struct tagEMRMASKBLT
/*4932*/ {
/*4933*/ EMR emr;
/*4934*/ RECTL rclBounds;
/*4935*/ LONG xDest;
/*4936*/ LONG yDest;
/*4937*/ LONG cxDest;
/*4938*/ LONG cyDest;
/*4939*/ DWORD dwRop;
/*4940*/ LONG xSrc;
/*4941*/ LONG ySrc;
/*4942*/ XFORM xformSrc;
/*4943*/ COLORREF crBkColorSrc;
/*4944*/ DWORD iUsageSrc;
/*4946*/ DWORD offBmiSrc;
/*4947*/ DWORD cbBmiSrc;
/*4948*/ DWORD offBitsSrc;
/*4949*/ DWORD cbBitsSrc;
/*4950*/ LONG xMask;
/*4951*/ LONG yMask;
/*4952*/ DWORD iUsageMask;
/*4953*/ DWORD offBmiMask;
/*4954*/ DWORD cbBmiMask;
/*4955*/ DWORD offBitsMask;
/*4956*/ DWORD cbBitsMask;
/*4957*/ }EMRMASKBLT,*PEMRMASKBLT;
/*4959*/ typedef struct tagEMRPLGBLT
/*4960*/ {
/*4961*/ EMR emr;
/*4962*/ RECTL rclBounds;
/*4963*/ POINTL aptlDest[3];
/*4964*/ LONG xSrc;
/*4965*/ LONG ySrc;
/*4966*/ LONG cxSrc;
/*4967*/ LONG cySrc;
/*4968*/ XFORM xformSrc;
/*4969*/ COLORREF crBkColorSrc;
/*4970*/ DWORD iUsageSrc;
/*4972*/ DWORD offBmiSrc;
/*4973*/ DWORD cbBmiSrc;
/*4974*/ DWORD offBitsSrc;
/*4975*/ DWORD cbBitsSrc;
/*4976*/ LONG xMask;
/*4977*/ LONG yMask;
/*4978*/ DWORD iUsageMask;
/*4979*/ DWORD offBmiMask;
/*4980*/ DWORD cbBmiMask;
/*4981*/ DWORD offBitsMask;
/*4982*/ DWORD cbBitsMask;
/*4983*/ }EMRPLGBLT,*PEMRPLGBLT;
/*4985*/ typedef struct tagEMRSETDIBITSTODEVICE
/*4986*/ {
/*4987*/ EMR emr;
/*4988*/ RECTL rclBounds;
/*4989*/ LONG xDest;
/*4990*/ LONG yDest;
/*4991*/ LONG xSrc;
/*4992*/ LONG ySrc;
/*4993*/ LONG cxSrc;
/*4994*/ LONG cySrc;
/*4995*/ DWORD offBmiSrc;
/*4996*/ DWORD cbBmiSrc;
/*4997*/ DWORD offBitsSrc;
/*4998*/ DWORD cbBitsSrc;
/*4999*/ DWORD iUsageSrc;
/*5000*/ DWORD iStartScan;
/*5001*/ DWORD cScans;
/*5002*/ }EMRSETDIBITSTODEVICE,*PEMRSETDIBITSTODEVICE;
/*5004*/ typedef struct tagEMRSTRETCHDIBITS
/*5005*/ {
/*5006*/ EMR emr;
/*5007*/ RECTL rclBounds;
/*5008*/ LONG xDest;
/*5009*/ LONG yDest;
/*5010*/ LONG xSrc;
/*5011*/ LONG ySrc;
/*5012*/ LONG cxSrc;
/*5013*/ LONG cySrc;
/*5014*/ DWORD offBmiSrc;
/*5015*/ DWORD cbBmiSrc;
/*5016*/ DWORD offBitsSrc;
/*5017*/ DWORD cbBitsSrc;
/*5018*/ DWORD iUsageSrc;
/*5019*/ DWORD dwRop;
/*5020*/ LONG cxDest;
/*5021*/ LONG cyDest;
/*5022*/ }EMRSTRETCHDIBITS,*PEMRSTRETCHDIBITS;
/*5024*/ typedef struct tagEMREXTCREATEFONTINDIRECTW
/*5025*/ {
/*5026*/ EMR emr;
/*5027*/ DWORD ihFont;
/*5028*/ EXTLOGFONTW elfw;
/*5029*/ }EMREXTCREATEFONTINDIRECTW,*PEMREXTCREATEFONTINDIRECTW;
/*5031*/ typedef struct tagEMRCREATEPALETTE
/*5032*/ {
/*5033*/ EMR emr;
/*5034*/ DWORD ihPal;
/*5035*/ LOGPALETTE lgpl;
/*5037*/ }EMRCREATEPALETTE,*PEMRCREATEPALETTE;
/*5039*/ typedef struct tagEMRCREATEPEN
/*5040*/ {
/*5041*/ EMR emr;
/*5042*/ DWORD ihPen;
/*5043*/ LOGPEN lopn;
/*5044*/ }EMRCREATEPEN,*PEMRCREATEPEN;
/*5046*/ typedef struct tagEMREXTCREATEPEN
/*5047*/ {
/*5048*/ EMR emr;
/*5049*/ DWORD ihPen;
/*5050*/ DWORD offBmi;
/*5051*/ DWORD cbBmi;
/*5054*/ DWORD offBits;
/*5055*/ DWORD cbBits;
/*5056*/ EXTLOGPEN elp;
/*5057*/ }EMREXTCREATEPEN,*PEMREXTCREATEPEN;
/*5059*/ typedef struct tagEMRCREATEBRUSHINDIRECT
/*5060*/ {
/*5061*/ EMR emr;
/*5062*/ DWORD ihBrush;
/*5063*/ LOGBRUSH32 lb;
/*5065*/ }EMRCREATEBRUSHINDIRECT,*PEMRCREATEBRUSHINDIRECT;
/*5067*/ typedef struct tagEMRCREATEMONOBRUSH
/*5068*/ {
/*5069*/ EMR emr;
/*5070*/ DWORD ihBrush;
/*5071*/ DWORD iUsage;
/*5072*/ DWORD offBmi;
/*5073*/ DWORD cbBmi;
/*5074*/ DWORD offBits;
/*5075*/ DWORD cbBits;
/*5076*/ }EMRCREATEMONOBRUSH,*PEMRCREATEMONOBRUSH;
/*5078*/ typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
/*5079*/ {
/*5080*/ EMR emr;
/*5081*/ DWORD ihBrush;
/*5082*/ DWORD iUsage;
/*5083*/ DWORD offBmi;
/*5084*/ DWORD cbBmi;
/*5087*/ DWORD offBits;
/*5088*/ DWORD cbBits;
/*5089*/ }EMRCREATEDIBPATTERNBRUSHPT,*PEMRCREATEDIBPATTERNBRUSHPT;
/*5091*/ typedef struct tagEMRFORMAT
/*5092*/ {
/*5093*/ DWORD dSignature;
/*5094*/ DWORD nVersion;
/*5095*/ DWORD cbData;
/*5096*/ DWORD offData;
/*5098*/ }EMRFORMAT,*PEMRFORMAT;
/*5102*/ typedef struct tagEMRGLSRECORD
/*5103*/ {
/*5104*/ EMR emr;
/*5105*/ DWORD cbData;
/*5106*/ BYTE Data[1];
/*5107*/ }EMRGLSRECORD,*PEMRGLSRECORD;
/*5109*/ typedef struct tagEMRGLSBOUNDEDRECORD
/*5110*/ {
/*5111*/ EMR emr;
/*5112*/ RECTL rclBounds;
/*5113*/ DWORD cbData;
/*5114*/ BYTE Data[1];
/*5115*/ }EMRGLSBOUNDEDRECORD,*PEMRGLSBOUNDEDRECORD;
/*5117*/ typedef struct tagEMRPIXELFORMAT
/*5118*/ {
/*5119*/ EMR emr;
/*5120*/ PIXELFORMATDESCRIPTOR pfd;
/*5121*/ }EMRPIXELFORMAT,*PEMRPIXELFORMAT;
/*5123*/ typedef struct tagEMRCREATECOLORSPACE
/*5124*/ {
/*5125*/ EMR emr;
/*5126*/ DWORD ihCS;
/*5127*/ LOGCOLORSPACEA lcs;
/*5128*/ }EMRCREATECOLORSPACE,*PEMRCREATECOLORSPACE;
/*5130*/ typedef struct tagEMRSETCOLORSPACE
/*5131*/ {
/*5132*/ EMR emr;
/*5133*/ DWORD ihCS;
/*5134*/ }EMRSETCOLORSPACE,*PEMRSETCOLORSPACE,
/*5135*/ EMRSELECTCOLORSPACE,*PEMRSELECTCOLORSPACE,
/*5136*/ EMRDELETECOLORSPACE,*PEMRDELETECOLORSPACE;
/*5142*/ typedef struct tagEMREXTESCAPE
/*5143*/ {
/*5144*/ EMR emr;
/*5145*/ INT iEscape;
/*5146*/ INT cbEscData;
/*5147*/ BYTE EscData[1];
/*5148*/ }EMREXTESCAPE,*PEMREXTESCAPE,
/*5149*/ EMRDRAWESCAPE,*PEMRDRAWESCAPE;
/*5151*/ typedef struct tagEMRNAMEDESCAPE
/*5152*/ {
/*5153*/ EMR emr;
/*5154*/ INT iEscape;
/*5155*/ INT cbDriver;
/*5156*/ INT cbEscData;
/*5157*/ BYTE EscData[1];
/*5158*/ }EMRNAMEDESCAPE,*PEMRNAMEDESCAPE;
/*5162*/ typedef struct tagEMRSETICMPROFILE
/*5163*/ {
/*5164*/ EMR emr;
/*5165*/ DWORD dwFlags;
/*5166*/ DWORD cbName;
/*5167*/ DWORD cbData;
/*5168*/ BYTE Data[1];
/*5169*/ }EMRSETICMPROFILE,*PEMRSETICMPROFILE,
/*5170*/ EMRSETICMPROFILEA,*PEMRSETICMPROFILEA,
/*5171*/ EMRSETICMPROFILEW,*PEMRSETICMPROFILEW;
/*5175*/ typedef struct tagEMRCREATECOLORSPACEW
/*5176*/ {
/*5177*/ EMR emr;
/*5178*/ DWORD ihCS;
/*5179*/ LOGCOLORSPACEW lcs;
/*5180*/ DWORD dwFlags;
/*5181*/ DWORD cbData;
/*5182*/ BYTE Data[1];
/*5183*/ }EMRCREATECOLORSPACEW,*PEMRCREATECOLORSPACEW;
/*5187*/ typedef struct tagCOLORMATCHTOTARGET
/*5188*/ {
/*5189*/ EMR emr;
/*5190*/ DWORD dwAction;
/*5191*/ DWORD dwFlags;
/*5192*/ DWORD cbName;
/*5193*/ DWORD cbData;
/*5194*/ BYTE Data[1];
/*5195*/ }EMRCOLORMATCHTOTARGET,*PEMRCOLORMATCHTOTARGET;
/*5197*/ typedef struct tagCOLORCORRECTPALETTE
/*5198*/ {
/*5199*/ EMR emr;
/*5200*/ DWORD ihPalette;
/*5201*/ DWORD nFirstEntry;
/*5202*/ DWORD nPalEntries;
/*5203*/ DWORD nReserved;
/*5204*/ }EMRCOLORCORRECTPALETTE,*PEMRCOLORCORRECTPALETTE;
/*5206*/ typedef struct tagEMRALPHABLEND
/*5207*/ {
/*5208*/ EMR emr;
/*5209*/ RECTL rclBounds;
/*5210*/ LONG xDest;
/*5211*/ LONG yDest;
/*5212*/ LONG cxDest;
/*5213*/ LONG cyDest;
/*5214*/ DWORD dwRop;
/*5215*/ LONG xSrc;
/*5216*/ LONG ySrc;
/*5217*/ XFORM xformSrc;
/*5218*/ COLORREF crBkColorSrc;
/*5219*/ DWORD iUsageSrc;
/*5221*/ DWORD offBmiSrc;
/*5222*/ DWORD cbBmiSrc;
/*5223*/ DWORD offBitsSrc;
/*5224*/ DWORD cbBitsSrc;
/*5225*/ LONG cxSrc;
/*5226*/ LONG cySrc;
/*5227*/ }EMRALPHABLEND,*PEMRALPHABLEND;
/*5229*/ typedef struct tagEMRGRADIENTFILL
/*5230*/ {
/*5231*/ EMR emr;
/*5232*/ RECTL rclBounds;
/*5233*/ DWORD nVer;
/*5234*/ DWORD nTri;
/*5235*/ ULONG ulMode;
/*5236*/ TRIVERTEX Ver[1];
/*5237*/ }EMRGRADIENTFILL,*PEMRGRADIENTFILL;
/*5239*/ typedef struct tagEMRTRANSPARENTBLT
/*5240*/ {
/*5241*/ EMR emr;
/*5242*/ RECTL rclBounds;
/*5243*/ LONG xDest;
/*5244*/ LONG yDest;
/*5245*/ LONG cxDest;
/*5246*/ LONG cyDest;
/*5247*/ DWORD dwRop;
/*5248*/ LONG xSrc;
/*5249*/ LONG ySrc;
/*5250*/ XFORM xformSrc;
/*5251*/ COLORREF crBkColorSrc;
/*5252*/ DWORD iUsageSrc;
/*5254*/ DWORD offBmiSrc;
/*5255*/ DWORD cbBmiSrc;
/*5256*/ DWORD offBitsSrc;
/*5257*/ DWORD cbBitsSrc;
/*5258*/ LONG cxSrc;
/*5259*/ LONG cySrc;
/*5260*/ }EMRTRANSPARENTBLT,*PEMRTRANSPARENTBLT;
/*5279*/ BOOL typ wglCopyContext(HGLRC,HGLRC,UINT);
/*5280*/ HGLRC typ wglCreateContext(HDC);
/*5281*/ HGLRC typ wglCreateLayerContext(HDC,int);
/*5282*/ BOOL typ wglDeleteContext(HGLRC);
/*5283*/ HGLRC typ wglGetCurrentContext(void);
/*5284*/ HDC typ wglGetCurrentDC(void);
/*5285*/ PROC typ wglGetProcAddress(LPCSTR);
/*5286*/ BOOL typ wglMakeCurrent(HDC,HGLRC);
/*5287*/ BOOL typ wglShareLists(HGLRC,HGLRC);
/*5288*/ BOOL typ wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
/*5289*/ BOOL typ wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
/*5295*/ BOOL typ SwapBuffers(HDC);
/*5297*/ typedef struct _POINTFLOAT{
/*5298*/ FLOAT x;
/*5299*/ FLOAT y;
/*5300*/ }POINTFLOAT,*PPOINTFLOAT;
/*5302*/ typedef struct _GLYPHMETRICSFLOAT{
/*5303*/ FLOAT gmfBlackBoxX;
/*5304*/ FLOAT gmfBlackBoxY;
/*5305*/ POINTFLOAT gmfptGlyphOrigin;
/*5306*/ FLOAT gmfCellIncX;
/*5307*/ FLOAT gmfCellIncY;
/*5308*/ }GLYPHMETRICSFLOAT,*PGLYPHMETRICSFLOAT,typ*LPGLYPHMETRICSFLOAT;
/*5312*/ BOOL typ wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,
/*5313*/ FLOAT,int,LPGLYPHMETRICSFLOAT);
/*5314*/ BOOL typ wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,
/*5315*/ FLOAT,int,LPGLYPHMETRICSFLOAT);
/*5323*/ typedef struct tagLAYERPLANEDESCRIPTOR{
/*5324*/ WORD nSize;
/*5325*/ WORD nVersion;
/*5326*/ DWORD dwFlags;
/*5327*/ BYTE iPixelType;
/*5328*/ BYTE cColorBits;
/*5329*/ BYTE cRedBits;
/*5330*/ BYTE cRedShift;
/*5331*/ BYTE cGreenBits;
/*5332*/ BYTE cGreenShift;
/*5333*/ BYTE cBlueBits;
/*5334*/ BYTE cBlueShift;
/*5335*/ BYTE cAlphaBits;
/*5336*/ BYTE cAlphaShift;
/*5337*/ BYTE cAccumBits;
/*5338*/ BYTE cAccumRedBits;
/*5339*/ BYTE cAccumGreenBits;
/*5340*/ BYTE cAccumBlueBits;
/*5341*/ BYTE cAccumAlphaBits;
/*5342*/ BYTE cDepthBits;
/*5343*/ BYTE cStencilBits;
/*5344*/ BYTE cAuxBuffers;
/*5345*/ BYTE iLayerPlane;
/*5346*/ BYTE bReserved;
/*5347*/ COLORREF crTransparent;
/*5348*/ }LAYERPLANEDESCRIPTOR,*PLAYERPLANEDESCRIPTOR,typ*LPLAYERPLANEDESCRIPTOR;
/*5398*/ BOOL typ wglDescribeLayerPlane(HDC,int,int,UINT,
/*5399*/ LPLAYERPLANEDESCRIPTOR);
/*5400*/ int typ wglSetLayerPaletteEntries(HDC,int,int,int,
/*5401*/ const COLORREF*);
/*5402*/ int typ wglGetLayerPaletteEntries(HDC,int,int,int,
/*5403*/ COLORREF*);
/*5404*/ BOOL typ wglRealizeLayerPalette(HDC,int,BOOL);
/*5405*/ BOOL typ wglSwapLayerBuffers(HDC,UINT);
/*5409*/ typedef struct _WGLSWAP
/*5410*/ {
/*5411*/ HDC hdc;
/*5412*/ UINT uiFlags;
/*5413*/ }WGLSWAP,*PWGLSWAP,typ*LPWGLSWAP;
/*5417*/ DWORD typ wglSwapMultipleBuffers(UINT,const WGLSWAP*);
/*46*/ typedef HANDLE HDWP;
/*47*/ typedef void MENUTEMPLATEA;
/*48*/ typedef void MENUTEMPLATEW;
/*52*/ typedef MENUTEMPLATEA MENUTEMPLATE;
/*54*/ typedef PVOID LPMENUTEMPLATEA;
/*55*/ typedef PVOID LPMENUTEMPLATEW;
/*59*/ typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
/*62*/ typedef LRESULT(typ*WNDPROC)(HWND,UINT,WPARAM,LPARAM);
/*66*/ typedef INT_PTR(typ*DLGPROC)(HWND,UINT,WPARAM,LPARAM);
/*67*/ typedef void(typ*TIMERPROC)(HWND,UINT,UINT_PTR,DWORD);
/*68*/ typedef BOOL(typ*GRAYSTRINGPROC)(HDC,LPARAM,int);
/*69*/ typedef BOOL(typ*WNDENUMPROC)(HWND,LPARAM);
/*70*/ typedef LRESULT(typ*HOOKPROC)(int code,WPARAM wParam,LPARAM lParam);
/*71*/ typedef void(typ*SENDASYNCPROC)(HWND,UINT,ULONG_PTR,LRESULT);
/*73*/ typedef BOOL(typ*PROPENUMPROCA)(HWND,LPCSTR,HANDLE);
/*74*/ typedef BOOL(typ*PROPENUMPROCW)(HWND,LPCWSTR,HANDLE);
/*76*/ typedef BOOL(typ*PROPENUMPROCEXA)(HWND,LPSTR,HANDLE,ULONG_PTR);
/*77*/ typedef BOOL(typ*PROPENUMPROCEXW)(HWND,LPWSTR,HANDLE,ULONG_PTR);
/*79*/ typedef int(typ*EDITWORDBREAKPROCA)(LPSTR lpch,int ichCurrent,int cch,int code);
/*80*/ typedef int(typ*EDITWORDBREAKPROCW)(LPWSTR lpch,int ichCurrent,int cch,int code);
/*83*/ typedef BOOL(typ*DRAWSTATEPROC)(HDC hdc,LPARAM lData,WPARAM wData,int cx,int cy);
/*117*/ typedef PROPENUMPROCA PROPENUMPROC;
/*118*/ typedef PROPENUMPROCEXA PROPENUMPROCEX;
/*119*/ typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
/*124*/ typedef BOOL(typ*NAMEENUMPROCA)(LPSTR,LPARAM);
/*125*/ typedef BOOL(typ*NAMEENUMPROCW)(LPWSTR,LPARAM);
/*127*/ typedef NAMEENUMPROCA WINSTAENUMPROCA;
/*128*/ typedef NAMEENUMPROCA DESKTOPENUMPROCA;
/*129*/ typedef NAMEENUMPROCW WINSTAENUMPROCW;
/*130*/ typedef NAMEENUMPROCW DESKTOPENUMPROCW;
/*151*/ typedef WINSTAENUMPROCA WINSTAENUMPROC;
/*152*/ typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
/*218*/ 
/*219*/ int
/*220*/ typ
/*221*/ wvsprintfA(
/*222*/ typ typ typ typ typ LPSTR,
/*223*/ typ typ typ typ typ typ LPCSTR,
/*224*/ typ typ typ typ typ va_list arglist);
/*225*/ 
/*226*/ int
/*227*/ typ
/*228*/ wvsprintfW(
/*229*/ typ typ typ typ typ LPWSTR,
/*230*/ typ typ typ typ typ typ LPCWSTR,
/*231*/ typ typ typ typ typ va_list arglist);
/*238*/ 
/*239*/ int
/*240*/ typ
/*241*/ wsprintfA(
/*242*/ typ typ typ typ typ LPSTR,
/*243*/ typ typ typ typ typ typ LPCSTR,
/*244*/ ...);
/*245*/ 
/*246*/ int
/*247*/ typ
/*248*/ wsprintfW(
/*249*/ typ typ typ typ typ LPWSTR,
/*250*/ typ typ typ typ typ typ LPCWSTR,
/*251*/ ...);
/*712*/ typedef struct tagCBT_CREATEWNDA
/*713*/ {
/*714*/ struct tagCREATESTRUCTA*lpcs;
/*715*/ HWND hwndInsertAfter;
/*716*/ }CBT_CREATEWNDA,*LPCBT_CREATEWNDA;
/*720*/ typedef struct tagCBT_CREATEWNDW
/*721*/ {
/*722*/ struct tagCREATESTRUCTW*lpcs;
/*723*/ HWND hwndInsertAfter;
/*724*/ }CBT_CREATEWNDW,*LPCBT_CREATEWNDW;
/*729*/ typedef CBT_CREATEWNDA CBT_CREATEWND;
/*730*/ typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
/*736*/ typedef struct tagCBTACTIVATESTRUCT
/*737*/ {
/*738*/ BOOL fMouse;
/*739*/ HWND hWndActive;
/*740*/ }CBTACTIVATESTRUCT,*LPCBTACTIVATESTRUCT;
/*884*/ typedef struct
/*885*/ {
/*886*/ HWND hwnd;
/*887*/ RECT rc;
/*888*/ }SHELLHOOKINFO,*LPSHELLHOOKINFO;
/*893*/ typedef struct tagEVENTMSG{
/*894*/ UINT message;
/*895*/ UINT paramL;
/*896*/ UINT paramH;
/*897*/ DWORD time;
/*898*/ HWND hwnd;
/*899*/ }EVENTMSG,*PEVENTMSGMSG,typ*NPEVENTMSGMSG,typ*LPEVENTMSGMSG;
/*901*/ typedef struct tagEVENTMSG*PEVENTMSG,typ*NPEVENTMSG,typ*LPEVENTMSG;
/*906*/ typedef struct tagCWPSTRUCT{
/*907*/ LPARAM lParam;
/*908*/ WPARAM wParam;
/*909*/ UINT message;
/*910*/ HWND hwnd;
/*911*/ }CWPSTRUCT,*PCWPSTRUCT,typ*NPCWPSTRUCT,typ*LPCWPSTRUCT;
/*917*/ typedef struct tagCWPRETSTRUCT{
/*918*/ LRESULT lResult;
/*919*/ LPARAM lParam;
/*920*/ WPARAM wParam;
/*921*/ UINT message;
/*922*/ HWND hwnd;
/*923*/ }CWPRETSTRUCT,*PCWPRETSTRUCT,typ*NPCWPRETSTRUCT,typ*LPCWPRETSTRUCT;
/*967*/ typedef struct tagDEBUGHOOKINFO
/*968*/ {
/*969*/ DWORD idThread;
/*970*/ DWORD idThreadInstaller;
/*971*/ LPARAM lParam;
/*972*/ WPARAM wParam;
/*973*/ int code;
/*974*/ }DEBUGHOOKINFO,*PDEBUGHOOKINFO,typ*NPDEBUGHOOKINFO,typ*LPDEBUGHOOKINFO;
/*979*/ typedef struct tagMOUSEHOOKSTRUCT{
/*980*/ POINT pt;
/*981*/ HWND hwnd;
/*982*/ UINT wHitTestCode;
/*983*/ ULONG_PTR dwExtraInfo;
/*984*/ }MOUSEHOOKSTRUCT,typ*LPMOUSEHOOKSTRUCT,*PMOUSEHOOKSTRUCT;
/*1005*/ typedef struct tagHARDWAREHOOKSTRUCT{
/*1006*/ HWND hwnd;
/*1007*/ UINT message;
/*1008*/ WPARAM wParam;
/*1009*/ LPARAM lParam;
/*1010*/ }HARDWAREHOOKSTRUCT,typ*LPHARDWAREHOOKSTRUCT,*PHARDWAREHOOKSTRUCT;
/*1049*/ 
/*1050*/ HKL
/*1051*/ typ
/*1052*/ LoadKeyboardLayoutA(
/*1053*/ typ typ typ typ typ LPCSTR pwszKLID,
/*1054*/ typ typ typ typ typ UINT Flags);
/*1055*/ 
/*1056*/ HKL
/*1057*/ typ
/*1058*/ LoadKeyboardLayoutW(
/*1059*/ typ typ typ typ typ LPCWSTR pwszKLID,
/*1060*/ typ typ typ typ typ UINT Flags);
/*1069*/ 
/*1070*/ HKL
/*1071*/ typ
/*1072*/ ActivateKeyboardLayout(
/*1073*/ typ typ typ typ typ HKL hkl,
/*1074*/ typ typ typ typ typ UINT Flags);
/*1085*/ 
/*1086*/ int
/*1087*/ typ
/*1088*/ ToUnicodeEx(
/*1089*/ typ typ typ typ typ UINT wVirtKey,
/*1090*/ typ typ typ typ typ UINT wScanCode,
/*1091*/ typ typ typ typ typ typ typ const BYTE*lpKeyState,
/*1092*/ typ typ typ typ typ LPWSTR pwszBuff,
/*1093*/ typ typ typ typ typ int cchBuff,
/*1094*/ typ typ typ typ typ UINT wFlags,
/*1095*/ typ typ typ typ typ typ typ HKL dwhkl);
/*1098*/ 
/*1099*/ BOOL
/*1100*/ typ
/*1101*/ UnloadKeyboardLayout(
/*1102*/ typ typ typ typ typ HKL hkl);
/*1104*/ 
/*1105*/ BOOL
/*1106*/ typ
/*1107*/ GetKeyboardLayoutNameA(
/*1108*/ typ typ typ typ typ LPSTR pwszKLID);
/*1109*/ 
/*1110*/ BOOL
/*1111*/ typ
/*1112*/ GetKeyboardLayoutNameW(
/*1113*/ typ typ typ typ typ LPWSTR pwszKLID);
/*1121*/ 
/*1122*/ int
/*1123*/ typ
/*1124*/ GetKeyboardLayoutList(
/*1125*/ typ typ typ typ typ int nBuff,
/*1126*/ typ typ typ typ typ typ typ typ typ HKL typ*lpList);
/*1128*/ 
/*1129*/ HKL
/*1130*/ typ
/*1131*/ GetKeyboardLayout(
/*1132*/ typ typ typ typ typ DWORD idThread);
/*1138*/ typedef struct tagMOUSEMOVEPOINT{
/*1139*/ int x;
/*1140*/ int y;
/*1141*/ DWORD time;
/*1142*/ ULONG_PTR dwExtraInfo;
/*1143*/ }MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,typ*LPMOUSEMOVEPOINT;
/*1151*/ 
/*1152*/ int
/*1153*/ typ
/*1154*/ GetMouseMovePointsEx(
/*1155*/ typ typ typ typ typ UINT cbSize,
/*1156*/ typ typ typ typ typ LPMOUSEMOVEPOINT lppt,
/*1157*/ typ typ typ typ typ LPMOUSEMOVEPOINT lpptBuf,
/*1158*/ typ typ typ typ typ int nBufPoints,
/*1159*/ typ typ typ typ typ DWORD resolution);
/*1185*/ 
/*1186*/ HDESK
/*1187*/ typ
/*1188*/ CreateDesktopA(
/*1189*/ typ typ typ typ typ LPCSTR lpszDesktop,
/*1190*/ typ typ LPCSTR lpszDevice,
/*1191*/ typ typ LPDEVMODEA pDevmode,
/*1192*/ typ typ typ typ typ DWORD dwFlags,
/*1193*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess,
/*1194*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpsa);
/*1195*/ 
/*1196*/ HDESK
/*1197*/ typ
/*1198*/ CreateDesktopW(
/*1199*/ typ typ typ typ typ LPCWSTR lpszDesktop,
/*1200*/ typ typ LPCWSTR lpszDevice,
/*1201*/ typ typ LPDEVMODEW pDevmode,
/*1202*/ typ typ typ typ typ DWORD dwFlags,
/*1203*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess,
/*1204*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpsa);
/*1211*/ 
/*1212*/ HDESK
/*1213*/ typ
/*1214*/ CreateDesktopExA(
/*1215*/ typ typ typ typ typ LPCSTR lpszDesktop,
/*1216*/ typ typ LPCSTR lpszDevice,
/*1217*/ typ typ LPDEVMODEA pDevmode,
/*1218*/ typ typ typ typ typ DWORD dwFlags,
/*1219*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess,
/*1220*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpsa,
/*1221*/ typ typ typ typ typ ULONG ulHeapSize,
/*1222*/ typ typ PVOID pvoid);
/*1223*/ 
/*1224*/ HDESK
/*1225*/ typ
/*1226*/ CreateDesktopExW(
/*1227*/ typ typ typ typ typ LPCWSTR lpszDesktop,
/*1228*/ typ typ LPCWSTR lpszDevice,
/*1229*/ typ typ LPDEVMODEW pDevmode,
/*1230*/ typ typ typ typ typ DWORD dwFlags,
/*1231*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess,
/*1232*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpsa,
/*1233*/ typ typ typ typ typ ULONG ulHeapSize,
/*1234*/ typ typ PVOID pvoid);
/*1244*/ 
/*1245*/ HDESK
/*1246*/ typ
/*1247*/ OpenDesktopA(
/*1248*/ typ typ typ typ typ LPCSTR lpszDesktop,
/*1249*/ typ typ typ typ typ DWORD dwFlags,
/*1250*/ typ typ typ typ typ BOOL fInherit,
/*1251*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess);
/*1252*/ 
/*1253*/ HDESK
/*1254*/ typ
/*1255*/ OpenDesktopW(
/*1256*/ typ typ typ typ typ LPCWSTR lpszDesktop,
/*1257*/ typ typ typ typ typ DWORD dwFlags,
/*1258*/ typ typ typ typ typ BOOL fInherit,
/*1259*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess);
/*1266*/ 
/*1267*/ HDESK
/*1268*/ typ
/*1269*/ OpenInputDesktop(
/*1270*/ typ typ typ typ typ DWORD dwFlags,
/*1271*/ typ typ typ typ typ BOOL fInherit,
/*1272*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess);
/*1275*/ 
/*1276*/ BOOL
/*1277*/ typ
/*1278*/ EnumDesktopsA(
/*1279*/ typ typ typ typ typ typ typ HWINSTA hwinsta,
/*1280*/ typ typ typ typ typ DESKTOPENUMPROCA lpEnumFunc,
/*1281*/ typ typ typ typ typ LPARAM lParam);
/*1282*/ 
/*1283*/ BOOL
/*1284*/ typ
/*1285*/ EnumDesktopsW(
/*1286*/ typ typ typ typ typ typ typ HWINSTA hwinsta,
/*1287*/ typ typ typ typ typ DESKTOPENUMPROCW lpEnumFunc,
/*1288*/ typ typ typ typ typ LPARAM lParam);
/*1295*/ 
/*1296*/ BOOL
/*1297*/ typ
/*1298*/ EnumDesktopWindows(
/*1299*/ typ typ typ typ typ typ typ HDESK hDesktop,
/*1300*/ typ typ typ typ typ WNDENUMPROC lpfn,
/*1301*/ typ typ typ typ typ LPARAM lParam);
/*1303*/ 
/*1304*/ BOOL
/*1305*/ typ
/*1306*/ SwitchDesktop(
/*1307*/ typ typ typ typ typ HDESK hDesktop);
/*1310*/ 
/*1311*/ BOOL
/*1312*/ typ
/*1313*/ SetThreadDesktop(
/*1314*/ typ typ typ typ typ HDESK hDesktop);
/*1316*/ 
/*1317*/ BOOL
/*1318*/ typ
/*1319*/ CloseDesktop(
/*1320*/ typ typ typ typ typ HDESK hDesktop);
/*1322*/ 
/*1323*/ HDESK
/*1324*/ typ
/*1325*/ GetThreadDesktop(
/*1326*/ typ typ typ typ typ DWORD dwThreadId);
/*1358*/ 
/*1359*/ HWINSTA
/*1360*/ typ
/*1361*/ CreateWindowStationA(
/*1362*/ typ typ typ typ typ typ typ LPCSTR lpwinsta,
/*1363*/ typ typ typ typ typ DWORD dwFlags,
/*1364*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess,
/*1365*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpsa);
/*1366*/ 
/*1367*/ HWINSTA
/*1368*/ typ
/*1369*/ CreateWindowStationW(
/*1370*/ typ typ typ typ typ typ typ LPCWSTR lpwinsta,
/*1371*/ typ typ typ typ typ DWORD dwFlags,
/*1372*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess,
/*1373*/ typ typ typ typ typ typ typ LPSECURITY_ATTRIBUTES lpsa);
/*1380*/ 
/*1381*/ HWINSTA
/*1382*/ typ
/*1383*/ OpenWindowStationA(
/*1384*/ typ typ typ typ typ LPCSTR lpszWinSta,
/*1385*/ typ typ typ typ typ BOOL fInherit,
/*1386*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess);
/*1387*/ 
/*1388*/ HWINSTA
/*1389*/ typ
/*1390*/ OpenWindowStationW(
/*1391*/ typ typ typ typ typ LPCWSTR lpszWinSta,
/*1392*/ typ typ typ typ typ BOOL fInherit,
/*1393*/ typ typ typ typ typ ACCESS_MASK dwDesiredAccess);
/*1400*/ 
/*1401*/ BOOL
/*1402*/ typ
/*1403*/ EnumWindowStationsA(
/*1404*/ typ typ typ typ typ WINSTAENUMPROCA lpEnumFunc,
/*1405*/ typ typ typ typ typ LPARAM lParam);
/*1406*/ 
/*1407*/ BOOL
/*1408*/ typ
/*1409*/ EnumWindowStationsW(
/*1410*/ typ typ typ typ typ WINSTAENUMPROCW lpEnumFunc,
/*1411*/ typ typ typ typ typ LPARAM lParam);
/*1418*/ 
/*1419*/ BOOL
/*1420*/ typ
/*1421*/ CloseWindowStation(
/*1422*/ typ typ typ typ typ HWINSTA hWinSta);
/*1424*/ 
/*1425*/ BOOL
/*1426*/ typ
/*1427*/ SetProcessWindowStation(
/*1428*/ typ typ typ typ typ HWINSTA hWinSta);
/*1430*/ 
/*1431*/ HWINSTA
/*1432*/ typ
/*1433*/ GetProcessWindowStation(
/*1434*/ void);
/*1439*/ 
/*1440*/ BOOL
/*1441*/ typ
/*1442*/ SetUserObjectSecurity(
/*1443*/ typ typ typ typ typ HANDLE hObj,
/*1444*/ typ typ typ typ typ PSECURITY_INFORMATION pSIRequested,
/*1445*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSID);
/*1447*/ 
/*1448*/ BOOL
/*1449*/ typ
/*1450*/ GetUserObjectSecurity(
/*1451*/ typ typ typ typ typ HANDLE hObj,
/*1452*/ typ typ typ typ typ PSECURITY_INFORMATION pSIRequested,
/*1453*/ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSID,
/*1454*/ typ typ typ typ typ DWORD nLength,
/*1455*/ typ typ typ typ typ LPDWORD lpnLengthNeeded);
/*1466*/ typedef struct tagUSEROBJECTFLAGS{
/*1467*/ BOOL fInherit;
/*1468*/ BOOL fReserved;
/*1469*/ DWORD dwFlags;
/*1470*/ }USEROBJECTFLAGS,*PUSEROBJECTFLAGS;
/*1472*/ 
/*1473*/ BOOL
/*1474*/ typ
/*1475*/ GetUserObjectInformationA(
/*1476*/ typ typ typ typ typ HANDLE hObj,
/*1477*/ typ typ typ typ typ int nIndex,
/*1478*/ typ typ typ typ typ typ typ PVOID pvInfo,
/*1479*/ typ typ typ typ typ DWORD nLength,
/*1480*/ typ typ typ typ typ typ typ LPDWORD lpnLengthNeeded);
/*1481*/ 
/*1482*/ BOOL
/*1483*/ typ
/*1484*/ GetUserObjectInformationW(
/*1485*/ typ typ typ typ typ HANDLE hObj,
/*1486*/ typ typ typ typ typ int nIndex,
/*1487*/ typ typ typ typ typ typ typ PVOID pvInfo,
/*1488*/ typ typ typ typ typ DWORD nLength,
/*1489*/ typ typ typ typ typ typ typ LPDWORD lpnLengthNeeded);
/*1496*/ 
/*1497*/ BOOL
/*1498*/ typ
/*1499*/ SetUserObjectInformationA(
/*1500*/ typ typ typ typ typ HANDLE hObj,
/*1501*/ typ typ typ typ typ int nIndex,
/*1502*/ typ typ typ typ typ typ typ PVOID pvInfo,
/*1503*/ typ typ typ typ typ DWORD nLength);
/*1504*/ 
/*1505*/ BOOL
/*1506*/ typ
/*1507*/ SetUserObjectInformationW(
/*1508*/ typ typ typ typ typ HANDLE hObj,
/*1509*/ typ typ typ typ typ int nIndex,
/*1510*/ typ typ typ typ typ typ typ PVOID pvInfo,
/*1511*/ typ typ typ typ typ DWORD nLength);
/*1521*/ typedef struct tagWNDCLASSEXA{
/*1522*/ UINT cbSize;
/*1524*/ UINT style;
/*1525*/ WNDPROC lpfnWndProc;
/*1526*/ int cbClsExtra;
/*1527*/ int cbWndExtra;
/*1528*/ HINSTANCE hInstance;
/*1529*/ HICON hIcon;
/*1530*/ HCURSOR hCursor;
/*1531*/ HBRUSH hbrBackground;
/*1532*/ LPCSTR lpszMenuName;
/*1533*/ LPCSTR lpszClassName;
/*1535*/ HICON hIconSm;
/*1536*/ }WNDCLASSEXA,*PWNDCLASSEXA,typ*NPWNDCLASSEXA,typ*LPWNDCLASSEXA;
/*1537*/ typedef struct tagWNDCLASSEXW{
/*1538*/ UINT cbSize;
/*1540*/ UINT style;
/*1541*/ WNDPROC lpfnWndProc;
/*1542*/ int cbClsExtra;
/*1543*/ int cbWndExtra;
/*1544*/ HINSTANCE hInstance;
/*1545*/ HICON hIcon;
/*1546*/ HCURSOR hCursor;
/*1547*/ HBRUSH hbrBackground;
/*1548*/ LPCWSTR lpszMenuName;
/*1549*/ LPCWSTR lpszClassName;
/*1551*/ HICON hIconSm;
/*1552*/ }WNDCLASSEXW,*PWNDCLASSEXW,typ*NPWNDCLASSEXW,typ*LPWNDCLASSEXW;
/*1559*/ typedef WNDCLASSEXA WNDCLASSEX;
/*1560*/ typedef PWNDCLASSEXA PWNDCLASSEX;
/*1561*/ typedef NPWNDCLASSEXA NPWNDCLASSEX;
/*1562*/ typedef LPWNDCLASSEXA LPWNDCLASSEX;
/*1566*/ typedef struct tagWNDCLASSA{
/*1567*/ UINT style;
/*1568*/ WNDPROC lpfnWndProc;
/*1569*/ int cbClsExtra;
/*1570*/ int cbWndExtra;
/*1571*/ HINSTANCE hInstance;
/*1572*/ HICON hIcon;
/*1573*/ HCURSOR hCursor;
/*1574*/ HBRUSH hbrBackground;
/*1575*/ LPCSTR lpszMenuName;
/*1576*/ LPCSTR lpszClassName;
/*1577*/ }WNDCLASSA,*PWNDCLASSA,typ*NPWNDCLASSA,typ*LPWNDCLASSA;
/*1578*/ typedef struct tagWNDCLASSW{
/*1579*/ UINT style;
/*1580*/ WNDPROC lpfnWndProc;
/*1581*/ int cbClsExtra;
/*1582*/ int cbWndExtra;
/*1583*/ HINSTANCE hInstance;
/*1584*/ HICON hIcon;
/*1585*/ HCURSOR hCursor;
/*1586*/ HBRUSH hbrBackground;
/*1587*/ LPCWSTR lpszMenuName;
/*1588*/ LPCWSTR lpszClassName;
/*1589*/ }WNDCLASSW,*PWNDCLASSW,typ*NPWNDCLASSW,typ*LPWNDCLASSW;
/*1596*/ typedef WNDCLASSA WNDCLASS;
/*1597*/ typedef PWNDCLASSA PWNDCLASS;
/*1598*/ typedef NPWNDCLASSA NPWNDCLASS;
/*1599*/ typedef LPWNDCLASSA LPWNDCLASS;
/*1602*/ 
/*1603*/ BOOL
/*1604*/ typ
/*1605*/ IsHungAppWindow(
/*1606*/ typ typ typ typ typ HWND hwnd);
/*1610*/ 
/*1611*/ void
/*1612*/ typ
/*1613*/ DisableProcessWindowsGhosting(
/*1614*/ void);
/*1623*/ typedef struct tagMSG{
/*1624*/ HWND hwnd;
/*1625*/ UINT message;
/*1626*/ WPARAM wParam;
/*1627*/ LPARAM lParam;
/*1628*/ DWORD time;
/*1629*/ POINT pt;
/*1633*/ }MSG,*PMSG,typ*NPMSG,typ*LPMSG;
/*1774*/ typedef struct tagMINMAXINFO{
/*1775*/ POINT ptReserved;
/*1776*/ POINT ptMaxSize;
/*1777*/ POINT ptMaxPosition;
/*1778*/ POINT ptMinTrackSize;
/*1779*/ POINT ptMaxTrackSize;
/*1780*/ }MINMAXINFO,*PMINMAXINFO,*LPMINMAXINFO;
/*1824*/ typedef struct tagCOPYDATASTRUCT{
/*1825*/ ULONG_PTR dwData;
/*1826*/ DWORD cbData;
/*1827*/ typ typ PVOID lpData;
/*1828*/ }COPYDATASTRUCT,*PCOPYDATASTRUCT;
/*1831*/ typedef struct tagMDINEXTMENU
/*1832*/ {
/*1833*/ HMENU hmenuIn;
/*1834*/ HMENU hmenuNext;
/*1835*/ HWND hwndNext;
/*1836*/ }MDINEXTMENU,*PMDINEXTMENU,typ*LPMDINEXTMENU;
/*2301*/ 
/*2302*/ UINT
/*2303*/ typ
/*2304*/ RegisterWindowMessageA(
/*2305*/ typ typ typ typ typ LPCSTR lpString);
/*2306*/ 
/*2307*/ UINT
/*2308*/ typ
/*2309*/ RegisterWindowMessageW(
/*2310*/ typ typ typ typ typ LPCWSTR lpString);
/*2339*/ typedef struct tagWINDOWPOS{
/*2340*/ HWND hwnd;
/*2341*/ HWND hwndInsertAfter;
/*2342*/ int x;
/*2343*/ int y;
/*2344*/ int cx;
/*2345*/ int cy;
/*2346*/ UINT flags;
/*2347*/ }WINDOWPOS,*LPWINDOWPOS,*PWINDOWPOS;
/*2352*/ typedef struct tagNCCALCSIZE_PARAMS{
/*2353*/ RECT rgrc[3];
/*2354*/ PWINDOWPOS lppos;
/*2355*/ }NCCALCSIZE_PARAMS,*LPNCCALCSIZE_PARAMS;
/*2609*/ 
/*2610*/ BOOL
/*2611*/ typ
/*2612*/ DrawEdge(
/*2613*/ typ typ typ typ typ HDC hdc,
/*2614*/ typ typ typ typ typ LPRECT qrc,
/*2615*/ typ typ typ typ typ UINT edge,
/*2616*/ typ typ typ typ typ UINT grfFlags);
/*2666*/ 
/*2667*/ BOOL
/*2668*/ typ
/*2669*/ DrawFrameControl(
/*2670*/ typ typ typ typ typ HDC,
/*2671*/ typ typ typ typ typ LPRECT,
/*2672*/ typ typ typ typ typ UINT,
/*2673*/ typ typ typ typ typ UINT);
/*2689*/ 
/*2690*/ BOOL
/*2691*/ typ
/*2692*/ DrawCaption(
/*2693*/ typ typ typ typ typ HWND hwnd,
/*2694*/ typ typ typ typ typ HDC hdc,
/*2695*/ typ typ typ typ typ const RECT*lprect,
/*2696*/ typ typ typ typ typ UINT flags);
/*2702*/ 
/*2703*/ BOOL
/*2704*/ typ
/*2705*/ DrawAnimatedRects(
/*2706*/ typ typ typ typ typ typ typ HWND hwnd,
/*2707*/ typ typ typ typ typ int idAni,
/*2708*/ typ typ typ typ typ const RECT*lprcFrom,
/*2709*/ typ typ typ typ typ const RECT*lprcTo);
/*2779*/ typedef struct tagACCEL{
/*2781*/ BYTE fVirt;
/*2782*/ WORD key;
/*2783*/ WORD cmd;
/*2789*/ }ACCEL,*LPACCEL;
/*2791*/ typedef struct tagPAINTSTRUCT{
/*2792*/ HDC hdc;
/*2793*/ BOOL fErase;
/*2794*/ RECT rcPaint;
/*2795*/ BOOL fRestore;
/*2796*/ BOOL fIncUpdate;
/*2797*/ BYTE rgbReserved[32];
/*2798*/ }PAINTSTRUCT,*PPAINTSTRUCT,*NPPAINTSTRUCT,*LPPAINTSTRUCT;
/*2800*/ typedef struct tagCREATESTRUCTA{
/*2801*/ LPVOID lpCreateParams;
/*2802*/ HINSTANCE hInstance;
/*2803*/ HMENU hMenu;
/*2804*/ HWND hwndParent;
/*2805*/ int cy;
/*2806*/ int cx;
/*2807*/ int y;
/*2808*/ int x;
/*2809*/ LONG style;
/*2810*/ LPCSTR lpszName;
/*2811*/ LPCSTR lpszClass;
/*2812*/ DWORD dwExStyle;
/*2813*/ }CREATESTRUCTA,*LPCREATESTRUCTA;
/*2814*/ typedef struct tagCREATESTRUCTW{
/*2815*/ LPVOID lpCreateParams;
/*2816*/ HINSTANCE hInstance;
/*2817*/ HMENU hMenu;
/*2818*/ HWND hwndParent;
/*2819*/ int cy;
/*2820*/ int cx;
/*2821*/ int y;
/*2822*/ int x;
/*2823*/ LONG style;
/*2824*/ LPCWSTR lpszName;
/*2825*/ LPCWSTR lpszClass;
/*2826*/ DWORD dwExStyle;
/*2827*/ }CREATESTRUCTW,*LPCREATESTRUCTW;
/*2832*/ typedef CREATESTRUCTA CREATESTRUCT;
/*2833*/ typedef LPCREATESTRUCTA LPCREATESTRUCT;
/*2836*/ typedef struct tagWINDOWPLACEMENT{
/*2837*/ UINT length;
/*2838*/ UINT flags;
/*2839*/ UINT showCmd;
/*2840*/ POINT ptMinPosition;
/*2841*/ POINT ptMaxPosition;
/*2842*/ RECT rcNormalPosition;
/*2846*/ }WINDOWPLACEMENT;
/*2847*/ typedef WINDOWPLACEMENT*PWINDOWPLACEMENT,*LPWINDOWPLACEMENT;
/*2856*/ typedef struct tagNMHDR
/*2857*/ {
/*2858*/ HWND hwndFrom;
/*2859*/ UINT_PTR idFrom;
/*2860*/ UINT code;
/*2861*/ }NMHDR;
/*2862*/ typedef NMHDR typ*LPNMHDR;
/*2864*/ typedef struct tagSTYLESTRUCT
/*2865*/ {
/*2866*/ DWORD styleOld;
/*2867*/ DWORD styleNew;
/*2868*/ }STYLESTRUCT,*LPSTYLESTRUCT;
/*2914*/ typedef struct tagMEASUREITEMSTRUCT{
/*2915*/ UINT CtlType;
/*2916*/ UINT CtlID;
/*2917*/ UINT itemID;
/*2918*/ UINT itemWidth;
/*2919*/ UINT itemHeight;
/*2920*/ ULONG_PTR itemData;
/*2921*/ }MEASUREITEMSTRUCT,typ*PMEASUREITEMSTRUCT,typ*LPMEASUREITEMSTRUCT;
/*2926*/ typedef struct tagDRAWITEMSTRUCT{
/*2927*/ UINT CtlType;
/*2928*/ UINT CtlID;
/*2929*/ UINT itemID;
/*2930*/ UINT itemAction;
/*2931*/ UINT itemState;
/*2932*/ HWND hwndItem;
/*2933*/ HDC hDC;
/*2934*/ RECT rcItem;
/*2935*/ ULONG_PTR itemData;
/*2936*/ }DRAWITEMSTRUCT,typ*PDRAWITEMSTRUCT,typ*LPDRAWITEMSTRUCT;
/*2941*/ typedef struct tagDELETEITEMSTRUCT{
/*2942*/ UINT CtlType;
/*2943*/ UINT CtlID;
/*2944*/ UINT itemID;
/*2945*/ HWND hwndItem;
/*2946*/ ULONG_PTR itemData;
/*2947*/ }DELETEITEMSTRUCT,typ*PDELETEITEMSTRUCT,typ*LPDELETEITEMSTRUCT;
/*2952*/ typedef struct tagCOMPAREITEMSTRUCT{
/*2953*/ UINT CtlType;
/*2954*/ UINT CtlID;
/*2955*/ HWND hwndItem;
/*2956*/ UINT itemID1;
/*2957*/ ULONG_PTR itemData1;
/*2958*/ UINT itemID2;
/*2959*/ ULONG_PTR itemData2;
/*2960*/ DWORD dwLocaleId;
/*2961*/ }COMPAREITEMSTRUCT,typ*PCOMPAREITEMSTRUCT,typ*LPCOMPAREITEMSTRUCT;
/*2969*/ 
/*2970*/ BOOL
/*2971*/ typ
/*2972*/ GetMessageA(
/*2973*/ typ typ typ typ typ LPMSG lpMsg,
/*2974*/ typ typ typ typ typ typ typ HWND hWnd,
/*2975*/ typ typ typ typ typ UINT wMsgFilterMin,
/*2976*/ typ typ typ typ typ UINT wMsgFilterMax);
/*2977*/ 
/*2978*/ BOOL
/*2979*/ typ
/*2980*/ GetMessageW(
/*2981*/ typ typ typ typ typ LPMSG lpMsg,
/*2982*/ typ typ typ typ typ typ typ HWND hWnd,
/*2983*/ typ typ typ typ typ UINT wMsgFilterMin,
/*2984*/ typ typ typ typ typ UINT wMsgFilterMax);
/*3016*/ 
/*3017*/ BOOL
/*3018*/ typ
/*3019*/ TranslateMessage(
/*3020*/ typ typ typ typ typ const MSG*lpMsg);
/*3022*/ 
/*3023*/ LRESULT
/*3024*/ typ
/*3025*/ DispatchMessageA(
/*3026*/ typ typ typ typ typ const MSG*lpMsg);
/*3027*/ 
/*3028*/ LRESULT
/*3029*/ typ
/*3030*/ DispatchMessageW(
/*3031*/ typ typ typ typ typ const MSG*lpMsg);
/*3056*/ 
/*3057*/ BOOL
/*3058*/ typ
/*3059*/ SetMessageQueue(
/*3060*/ typ typ typ typ typ int cMessagesMax);
/*3062*/ 
/*3063*/ BOOL
/*3064*/ typ
/*3065*/ PeekMessageA(
/*3066*/ typ typ typ typ typ LPMSG lpMsg,
/*3067*/ typ typ typ typ typ typ typ HWND hWnd,
/*3068*/ typ typ typ typ typ UINT wMsgFilterMin,
/*3069*/ typ typ typ typ typ UINT wMsgFilterMax,
/*3070*/ typ typ typ typ typ UINT wRemoveMsg);
/*3071*/ 
/*3072*/ BOOL
/*3073*/ typ
/*3074*/ PeekMessageW(
/*3075*/ typ typ typ typ typ LPMSG lpMsg,
/*3076*/ typ typ typ typ typ typ typ HWND hWnd,
/*3077*/ typ typ typ typ typ UINT wMsgFilterMin,
/*3078*/ typ typ typ typ typ UINT wMsgFilterMax,
/*3079*/ typ typ typ typ typ UINT wRemoveMsg);
/*3103*/ 
/*3104*/ BOOL
/*3105*/ typ
/*3106*/ RegisterHotKey(
/*3107*/ typ typ typ typ typ typ typ HWND hWnd,
/*3108*/ typ typ typ typ typ int id,
/*3109*/ typ typ typ typ typ UINT fsModifiers,
/*3110*/ typ typ typ typ typ UINT vk);
/*3112*/ 
/*3113*/ BOOL
/*3114*/ typ
/*3115*/ UnregisterHotKey(
/*3116*/ typ typ typ typ typ typ typ HWND hWnd,
/*3117*/ typ typ typ typ typ int id);
/*3162*/ 
/*3163*/ BOOL
/*3164*/ typ
/*3165*/ ExitWindowsEx(
/*3166*/ typ typ typ typ typ UINT uFlags,
/*3167*/ typ typ typ typ typ DWORD dwReason);
/*3169*/ 
/*3170*/ BOOL
/*3171*/ typ
/*3172*/ SwapMouseButton(
/*3173*/ typ typ typ typ typ BOOL fSwap);
/*3175*/ 
/*3176*/ DWORD
/*3177*/ typ
/*3178*/ GetMessagePos(
/*3179*/ void);
/*3181*/ 
/*3182*/ LONG
/*3183*/ typ
/*3184*/ GetMessageTime(
/*3185*/ void);
/*3187*/ 
/*3188*/ LPARAM
/*3189*/ typ
/*3190*/ GetMessageExtraInfo(
/*3191*/ void);
/*3202*/ 
/*3203*/ LPARAM
/*3204*/ typ
/*3205*/ SetMessageExtraInfo(
/*3206*/ typ typ typ typ typ LPARAM lParam);
/*3209*/ 
/*3210*/ LRESULT
/*3211*/ typ
/*3212*/ SendMessageA(
/*3213*/ typ typ typ typ typ HWND hWnd,
/*3214*/ typ typ typ typ typ UINT Msg,
/*3215*/ typ typ typ typ typ WPARAM wParam,
/*3216*/ typ typ typ typ typ LPARAM lParam);
/*3217*/ 
/*3218*/ LRESULT
/*3219*/ typ
/*3220*/ SendMessageW(
/*3221*/ typ typ typ typ typ HWND hWnd,
/*3222*/ typ typ typ typ typ UINT Msg,
/*3223*/ typ typ typ typ typ WPARAM wParam,
/*3224*/ typ typ typ typ typ LPARAM lParam);
/*3257*/ 
/*3258*/ LRESULT
/*3259*/ typ
/*3260*/ SendMessageTimeoutA(
/*3261*/ typ typ typ typ typ HWND hWnd,
/*3262*/ typ typ typ typ typ UINT Msg,
/*3263*/ typ typ typ typ typ WPARAM wParam,
/*3264*/ typ typ typ typ typ LPARAM lParam,
/*3265*/ typ typ typ typ typ UINT fuFlags,
/*3266*/ typ typ typ typ typ UINT uTimeout,
/*3267*/ typ typ typ typ typ typ typ PDWORD_PTR lpdwResult);
/*3268*/ 
/*3269*/ LRESULT
/*3270*/ typ
/*3271*/ SendMessageTimeoutW(
/*3272*/ typ typ typ typ typ HWND hWnd,
/*3273*/ typ typ typ typ typ UINT Msg,
/*3274*/ typ typ typ typ typ WPARAM wParam,
/*3275*/ typ typ typ typ typ LPARAM lParam,
/*3276*/ typ typ typ typ typ UINT fuFlags,
/*3277*/ typ typ typ typ typ UINT uTimeout,
/*3278*/ typ typ typ typ typ typ typ PDWORD_PTR lpdwResult);
/*3285*/ 
/*3286*/ BOOL
/*3287*/ typ
/*3288*/ SendNotifyMessageA(
/*3289*/ typ typ typ typ typ HWND hWnd,
/*3290*/ typ typ typ typ typ UINT Msg,
/*3291*/ typ typ typ typ typ WPARAM wParam,
/*3292*/ typ typ typ typ typ LPARAM lParam);
/*3293*/ 
/*3294*/ BOOL
/*3295*/ typ
/*3296*/ SendNotifyMessageW(
/*3297*/ typ typ typ typ typ HWND hWnd,
/*3298*/ typ typ typ typ typ UINT Msg,
/*3299*/ typ typ typ typ typ WPARAM wParam,
/*3300*/ typ typ typ typ typ LPARAM lParam);
/*3307*/ 
/*3308*/ BOOL
/*3309*/ typ
/*3310*/ SendMessageCallbackA(
/*3311*/ typ typ typ typ typ HWND hWnd,
/*3312*/ typ typ typ typ typ UINT Msg,
/*3313*/ typ typ typ typ typ WPARAM wParam,
/*3314*/ typ typ typ typ typ LPARAM lParam,
/*3315*/ typ typ typ typ typ SENDASYNCPROC lpResultCallBack,
/*3316*/ typ typ typ typ typ ULONG_PTR dwData);
/*3317*/ 
/*3318*/ BOOL
/*3319*/ typ
/*3320*/ SendMessageCallbackW(
/*3321*/ typ typ typ typ typ HWND hWnd,
/*3322*/ typ typ typ typ typ UINT Msg,
/*3323*/ typ typ typ typ typ WPARAM wParam,
/*3324*/ typ typ typ typ typ LPARAM lParam,
/*3325*/ typ typ typ typ typ SENDASYNCPROC lpResultCallBack,
/*3326*/ typ typ typ typ typ ULONG_PTR dwData);
/*3439*/ typedef PVOID HDEVNOTIFY;
/*3440*/ typedef HDEVNOTIFY*PHDEVNOTIFY;
/*3448*/ 
/*3449*/ HDEVNOTIFY
/*3450*/ typ
/*3451*/ RegisterDeviceNotificationA(
/*3452*/ typ typ typ typ typ HANDLE hRecipient,
/*3453*/ typ typ typ typ typ LPVOID NotificationFilter,
/*3454*/ typ typ typ typ typ DWORD Flags);
/*3455*/ 
/*3456*/ HDEVNOTIFY
/*3457*/ typ
/*3458*/ RegisterDeviceNotificationW(
/*3459*/ typ typ typ typ typ HANDLE hRecipient,
/*3460*/ typ typ typ typ typ LPVOID NotificationFilter,
/*3461*/ typ typ typ typ typ DWORD Flags);
/*3468*/ 
/*3469*/ BOOL
/*3470*/ typ
/*3471*/ UnregisterDeviceNotification(
/*3472*/ typ typ typ typ typ HDEVNOTIFY Handle
/*3473*/ );
/*3498*/ 
/*3499*/ BOOL
/*3500*/ typ
/*3501*/ PostMessageA(
/*3502*/ typ typ typ typ typ typ typ HWND hWnd,
/*3503*/ typ typ typ typ typ UINT Msg,
/*3504*/ typ typ typ typ typ WPARAM wParam,
/*3505*/ typ typ typ typ typ LPARAM lParam);
/*3506*/ 
/*3507*/ BOOL
/*3508*/ typ
/*3509*/ PostMessageW(
/*3510*/ typ typ typ typ typ typ typ HWND hWnd,
/*3511*/ typ typ typ typ typ UINT Msg,
/*3512*/ typ typ typ typ typ WPARAM wParam,
/*3513*/ typ typ typ typ typ LPARAM lParam);
/*3520*/ 
/*3521*/ BOOL
/*3522*/ typ
/*3523*/ PostThreadMessageA(
/*3524*/ typ typ typ typ typ DWORD idThread,
/*3525*/ typ typ typ typ typ UINT Msg,
/*3526*/ typ typ typ typ typ WPARAM wParam,
/*3527*/ typ typ typ typ typ LPARAM lParam);
/*3528*/ 
/*3529*/ BOOL
/*3530*/ typ
/*3531*/ PostThreadMessageW(
/*3532*/ typ typ typ typ typ DWORD idThread,
/*3533*/ typ typ typ typ typ UINT Msg,
/*3534*/ typ typ typ typ typ WPARAM wParam,
/*3535*/ typ typ typ typ typ LPARAM lParam);
/*3561*/ 
/*3562*/ BOOL
/*3563*/ typ
/*3564*/ AttachThreadInput(
/*3565*/ typ typ typ typ typ DWORD idAttach,
/*3566*/ typ typ typ typ typ DWORD idAttachTo,
/*3567*/ typ typ typ typ typ BOOL fAttach);
/*3570*/ 
/*3571*/ BOOL
/*3572*/ typ
/*3573*/ ReplyMessage(
/*3574*/ typ typ typ typ typ LRESULT lResult);
/*3576*/ 
/*3577*/ BOOL
/*3578*/ typ
/*3579*/ WaitMessage(
/*3580*/ void);
/*3583*/ 
/*3584*/ DWORD
/*3585*/ typ
/*3586*/ WaitForInputIdle(
/*3587*/ typ typ typ typ typ HANDLE hProcess,
/*3588*/ typ typ typ typ typ DWORD dwMilliseconds);
/*3590*/ 
/*3592*/ LRESULT
/*3593*/ typ
/*3598*/ DefWindowProcA(
/*3599*/ typ typ typ typ typ HWND hWnd,
/*3600*/ typ typ typ typ typ UINT Msg,
/*3601*/ typ typ typ typ typ WPARAM wParam,
/*3602*/ typ typ typ typ typ LPARAM lParam);
/*3603*/ 
/*3605*/ LRESULT
/*3606*/ typ
/*3611*/ DefWindowProcW(
/*3612*/ typ typ typ typ typ HWND hWnd,
/*3613*/ typ typ typ typ typ UINT Msg,
/*3614*/ typ typ typ typ typ WPARAM wParam,
/*3615*/ typ typ typ typ typ LPARAM lParam);
/*3622*/ 
/*3623*/ void
/*3624*/ typ
/*3625*/ PostQuitMessage(
/*3626*/ typ typ typ typ typ int nExitCode);
/*3630*/ 
/*3631*/ LRESULT
/*3632*/ typ
/*3633*/ CallWindowProcA(
/*3634*/ typ typ typ typ typ WNDPROC lpPrevWndFunc,
/*3635*/ typ typ typ typ typ HWND hWnd,
/*3636*/ typ typ typ typ typ UINT Msg,
/*3637*/ typ typ typ typ typ WPARAM wParam,
/*3638*/ typ typ typ typ typ LPARAM lParam);
/*3639*/ 
/*3640*/ LRESULT
/*3641*/ typ
/*3642*/ CallWindowProcW(
/*3643*/ typ typ typ typ typ WNDPROC lpPrevWndFunc,
/*3644*/ typ typ typ typ typ HWND hWnd,
/*3645*/ typ typ typ typ typ UINT Msg,
/*3646*/ typ typ typ typ typ WPARAM wParam,
/*3647*/ typ typ typ typ typ LPARAM lParam);
/*3682*/ 
/*3683*/ BOOL
/*3684*/ typ
/*3685*/ InSendMessage(
/*3686*/ void);
/*3689*/ 
/*3690*/ DWORD
/*3691*/ typ
/*3692*/ InSendMessageEx(
/*3693*/ typ typ LPVOID lpReserved);
/*3705*/ 
/*3706*/ UINT
/*3707*/ typ
/*3708*/ GetDoubleClickTime(
/*3709*/ void);
/*3711*/ 
/*3712*/ BOOL
/*3713*/ typ
/*3714*/ SetDoubleClickTime(
/*3715*/ typ typ typ typ typ UINT);
/*3717*/ 
/*3718*/ ATOM
/*3719*/ typ
/*3720*/ RegisterClassA(
/*3721*/ typ typ typ typ typ const WNDCLASSA*lpWndClass);
/*3722*/ 
/*3723*/ ATOM
/*3724*/ typ
/*3725*/ RegisterClassW(
/*3726*/ typ typ typ typ typ const WNDCLASSW*lpWndClass);
/*3733*/ 
/*3734*/ BOOL
/*3735*/ typ
/*3736*/ UnregisterClassA(
/*3737*/ typ typ typ typ typ LPCSTR lpClassName,
/*3738*/ typ typ typ typ typ HINSTANCE hInstance);
/*3739*/ 
/*3740*/ BOOL
/*3741*/ typ
/*3742*/ UnregisterClassW(
/*3743*/ typ typ typ typ typ LPCWSTR lpClassName,
/*3744*/ typ typ typ typ typ HINSTANCE hInstance);
/*3751*/ 
/*3752*/ BOOL
/*3753*/ typ
/*3754*/ GetClassInfoA(
/*3755*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*3756*/ typ typ typ typ typ LPCSTR lpClassName,
/*3757*/ typ typ typ typ typ LPWNDCLASSA lpWndClass);
/*3758*/ 
/*3759*/ BOOL
/*3760*/ typ
/*3761*/ GetClassInfoW(
/*3762*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*3763*/ typ typ typ typ typ LPCWSTR lpClassName,
/*3764*/ typ typ typ typ typ LPWNDCLASSW lpWndClass);
/*3772*/ 
/*3773*/ ATOM
/*3774*/ typ
/*3775*/ RegisterClassExA(
/*3776*/ typ typ typ typ typ const WNDCLASSEXA*);
/*3777*/ 
/*3778*/ ATOM
/*3779*/ typ
/*3780*/ RegisterClassExW(
/*3781*/ typ typ typ typ typ const WNDCLASSEXW*);
/*3788*/ 
/*3789*/ BOOL
/*3790*/ typ
/*3791*/ GetClassInfoExA(
/*3792*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*3793*/ typ typ typ typ typ LPCSTR lpszClass,
/*3794*/ typ typ typ typ typ LPWNDCLASSEXA lpwcx);
/*3795*/ 
/*3796*/ BOOL
/*3797*/ typ
/*3798*/ GetClassInfoExW(
/*3799*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*3800*/ typ typ typ typ typ LPCWSTR lpszClass,
/*3801*/ typ typ typ typ typ LPWNDCLASSEXW lpwcx);
/*3821*/ 
/*3822*/ HWND
/*3823*/ typ
/*3824*/ CreateWindowExA(
/*3825*/ typ typ typ typ typ DWORD dwExStyle,
/*3826*/ typ typ typ typ typ typ typ LPCSTR lpClassName,
/*3827*/ typ typ typ typ typ typ typ LPCSTR lpWindowName,
/*3828*/ typ typ typ typ typ DWORD dwStyle,
/*3829*/ typ typ typ typ typ int X,
/*3830*/ typ typ typ typ typ int Y,
/*3831*/ typ typ typ typ typ int nWidth,
/*3832*/ typ typ typ typ typ int nHeight,
/*3833*/ typ typ typ typ typ typ typ HWND hWndParent,
/*3834*/ typ typ typ typ typ typ typ HMENU hMenu,
/*3835*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*3836*/ typ typ typ typ typ typ typ LPVOID lpParam);
/*3837*/ 
/*3838*/ HWND
/*3839*/ typ
/*3840*/ CreateWindowExW(
/*3841*/ typ typ typ typ typ DWORD dwExStyle,
/*3842*/ typ typ typ typ typ typ typ LPCWSTR lpClassName,
/*3843*/ typ typ typ typ typ typ typ LPCWSTR lpWindowName,
/*3844*/ typ typ typ typ typ DWORD dwStyle,
/*3845*/ typ typ typ typ typ int X,
/*3846*/ typ typ typ typ typ int Y,
/*3847*/ typ typ typ typ typ int nWidth,
/*3848*/ typ typ typ typ typ int nHeight,
/*3849*/ typ typ typ typ typ typ typ HWND hWndParent,
/*3850*/ typ typ typ typ typ typ typ HMENU hMenu,
/*3851*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*3852*/ typ typ typ typ typ typ typ LPVOID lpParam);
/*3873*/ 
/*3874*/ BOOL
/*3875*/ typ
/*3876*/ IsWindow(
/*3877*/ typ typ typ typ typ typ typ HWND hWnd);
/*3879*/ 
/*3880*/ BOOL
/*3881*/ typ
/*3882*/ IsMenu(
/*3883*/ typ typ typ typ typ HMENU hMenu);
/*3885*/ 
/*3886*/ BOOL
/*3887*/ typ
/*3888*/ IsChild(
/*3889*/ typ typ typ typ typ HWND hWndParent,
/*3890*/ typ typ typ typ typ HWND hWnd);
/*3892*/ 
/*3893*/ BOOL
/*3894*/ typ
/*3895*/ DestroyWindow(
/*3896*/ typ typ typ typ typ HWND hWnd);
/*3898*/ 
/*3899*/ BOOL
/*3900*/ typ
/*3901*/ ShowWindow(
/*3902*/ typ typ typ typ typ HWND hWnd,
/*3903*/ typ typ typ typ typ int nCmdShow);
/*3906*/ 
/*3907*/ BOOL
/*3908*/ typ
/*3909*/ AnimateWindow(
/*3910*/ typ typ typ typ typ HWND hWnd,
/*3911*/ typ typ typ typ typ DWORD dwTime,
/*3912*/ typ typ typ typ typ DWORD dwFlags);
/*4010*/ 
/*4011*/ BOOL
/*4012*/ typ
/*4013*/ ShowWindowAsync(
/*4014*/ typ typ typ typ typ HWND hWnd,
/*4015*/ typ typ typ typ typ int nCmdShow);
/*4018*/ 
/*4019*/ BOOL
/*4020*/ typ
/*4021*/ FlashWindow(
/*4022*/ typ typ typ typ typ HWND hWnd,
/*4023*/ typ typ typ typ typ BOOL bInvert);
/*4026*/ typedef struct{
/*4027*/ UINT cbSize;
/*4028*/ HWND hwnd;
/*4029*/ DWORD dwFlags;
/*4030*/ UINT uCount;
/*4031*/ DWORD dwTimeout;
/*4032*/ }FLASHWINFO,*PFLASHWINFO;
/*4034*/ 
/*4035*/ BOOL
/*4036*/ typ
/*4037*/ FlashWindowEx(
/*4038*/ typ typ typ typ typ PFLASHWINFO pfwi);
/*4049*/ 
/*4050*/ BOOL
/*4051*/ typ
/*4052*/ ShowOwnedPopups(
/*4053*/ typ typ typ typ typ HWND hWnd,
/*4054*/ typ typ typ typ typ BOOL fShow);
/*4056*/ 
/*4057*/ BOOL
/*4058*/ typ
/*4059*/ OpenIcon(
/*4060*/ typ typ typ typ typ HWND hWnd);
/*4062*/ 
/*4063*/ BOOL
/*4064*/ typ
/*4065*/ CloseWindow(
/*4066*/ typ typ typ typ typ HWND hWnd);
/*4068*/ 
/*4069*/ BOOL
/*4070*/ typ
/*4071*/ MoveWindow(
/*4072*/ typ typ typ typ typ HWND hWnd,
/*4073*/ typ typ typ typ typ int X,
/*4074*/ typ typ typ typ typ int Y,
/*4075*/ typ typ typ typ typ int nWidth,
/*4076*/ typ typ typ typ typ int nHeight,
/*4077*/ typ typ typ typ typ BOOL bRepaint);
/*4079*/ 
/*4080*/ BOOL
/*4081*/ typ
/*4082*/ SetWindowPos(
/*4083*/ typ typ typ typ typ HWND hWnd,
/*4084*/ typ typ typ typ typ typ typ HWND hWndInsertAfter,
/*4085*/ typ typ typ typ typ int X,
/*4086*/ typ typ typ typ typ int Y,
/*4087*/ typ typ typ typ typ int cx,
/*4088*/ typ typ typ typ typ int cy,
/*4089*/ typ typ typ typ typ UINT uFlags);
/*4091*/ 
/*4092*/ BOOL
/*4093*/ typ
/*4094*/ GetWindowPlacement(
/*4095*/ typ typ typ typ typ HWND hWnd,
/*4096*/ typ typ typ typ typ WINDOWPLACEMENT*lpwndpl);
/*4098*/ 
/*4099*/ BOOL
/*4100*/ typ
/*4101*/ SetWindowPlacement(
/*4102*/ typ typ typ typ typ HWND hWnd,
/*4103*/ typ typ typ typ typ const WINDOWPLACEMENT*lpwndpl);
/*4108*/ 
/*4109*/ HDWP
/*4110*/ typ
/*4111*/ BeginDeferWindowPos(
/*4112*/ typ typ typ typ typ int nNumWindows);
/*4114*/ 
/*4115*/ HDWP
/*4116*/ typ
/*4117*/ DeferWindowPos(
/*4118*/ typ typ typ typ typ HDWP hWinPosInfo,
/*4119*/ typ typ typ typ typ HWND hWnd,
/*4120*/ typ typ typ typ typ typ typ HWND hWndInsertAfter,
/*4121*/ typ typ typ typ typ int x,
/*4122*/ typ typ typ typ typ int y,
/*4123*/ typ typ typ typ typ int cx,
/*4124*/ typ typ typ typ typ int cy,
/*4125*/ typ typ typ typ typ UINT uFlags);
/*4127*/ 
/*4128*/ BOOL
/*4129*/ typ
/*4130*/ EndDeferWindowPos(
/*4131*/ typ typ typ typ typ HDWP hWinPosInfo);
/*4135*/ 
/*4136*/ BOOL
/*4137*/ typ
/*4138*/ IsWindowVisible(
/*4139*/ typ typ typ typ typ HWND hWnd);
/*4141*/ 
/*4142*/ BOOL
/*4143*/ typ
/*4144*/ IsIconic(
/*4145*/ typ typ typ typ typ HWND hWnd);
/*4147*/ 
/*4148*/ BOOL
/*4149*/ typ
/*4150*/ AnyPopup(
/*4151*/ void);
/*4153*/ 
/*4154*/ BOOL
/*4155*/ typ
/*4156*/ BringWindowToTop(
/*4157*/ typ typ typ typ typ HWND hWnd);
/*4159*/ 
/*4160*/ BOOL
/*4161*/ typ
/*4162*/ IsZoomed(
/*4163*/ typ typ typ typ typ HWND hWnd);
/*4206*/ typedef struct{
/*4207*/ DWORD style;
/*4208*/ DWORD dwExtendedStyle;
/*4209*/ WORD cdit;
/*4210*/ short x;
/*4211*/ short y;
/*4212*/ short cx;
/*4213*/ short cy;
/*4214*/ }DLGTEMPLATE;
/*4215*/ typedef DLGTEMPLATE*LPDLGTEMPLATEA;
/*4216*/ typedef DLGTEMPLATE*LPDLGTEMPLATEW;
/*4220*/ typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
/*4222*/ typedef const DLGTEMPLATE*LPCDLGTEMPLATEA;
/*4223*/ typedef const DLGTEMPLATE*LPCDLGTEMPLATEW;
/*4227*/ typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
/*4233*/ typedef struct{
/*4234*/ DWORD style;
/*4235*/ DWORD dwExtendedStyle;
/*4236*/ short x;
/*4237*/ short y;
/*4238*/ short cx;
/*4239*/ short cy;
/*4240*/ WORD id;
/*4241*/ }DLGITEMTEMPLATE;
/*4242*/ typedef DLGITEMTEMPLATE*PDLGITEMTEMPLATEA;
/*4243*/ typedef DLGITEMTEMPLATE*PDLGITEMTEMPLATEW;
/*4247*/ typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
/*4249*/ typedef DLGITEMTEMPLATE*LPDLGITEMTEMPLATEA;
/*4250*/ typedef DLGITEMTEMPLATE*LPDLGITEMTEMPLATEW;
/*4254*/ typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
/*4260*/ 
/*4261*/ HWND
/*4262*/ typ
/*4263*/ CreateDialogParamA(
/*4264*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4265*/ typ typ typ typ typ LPCSTR lpTemplateName,
/*4266*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4267*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4268*/ typ typ typ typ typ LPARAM dwInitParam);
/*4269*/ 
/*4270*/ HWND
/*4271*/ typ
/*4272*/ CreateDialogParamW(
/*4273*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4274*/ typ typ typ typ typ LPCWSTR lpTemplateName,
/*4275*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4276*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4277*/ typ typ typ typ typ LPARAM dwInitParam);
/*4284*/ 
/*4285*/ HWND
/*4286*/ typ
/*4287*/ CreateDialogIndirectParamA(
/*4288*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4289*/ typ typ typ typ typ LPCDLGTEMPLATEA lpTemplate,
/*4290*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4291*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4292*/ typ typ typ typ typ LPARAM dwInitParam);
/*4293*/ 
/*4294*/ HWND
/*4295*/ typ
/*4296*/ CreateDialogIndirectParamW(
/*4297*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4298*/ typ typ typ typ typ LPCDLGTEMPLATEW lpTemplate,
/*4299*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4300*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4301*/ typ typ typ typ typ LPARAM dwInitParam);
/*4328*/ 
/*4329*/ INT_PTR
/*4330*/ typ
/*4331*/ DialogBoxParamA(
/*4332*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4333*/ typ typ typ typ typ LPCSTR lpTemplateName,
/*4334*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4335*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4336*/ typ typ typ typ typ LPARAM dwInitParam);
/*4337*/ 
/*4338*/ INT_PTR
/*4339*/ typ
/*4340*/ DialogBoxParamW(
/*4341*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4342*/ typ typ typ typ typ LPCWSTR lpTemplateName,
/*4343*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4344*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4345*/ typ typ typ typ typ LPARAM dwInitParam);
/*4352*/ 
/*4353*/ INT_PTR
/*4354*/ typ
/*4355*/ DialogBoxIndirectParamA(
/*4356*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4357*/ typ typ typ typ typ LPCDLGTEMPLATEA hDialogTemplate,
/*4358*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4359*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4360*/ typ typ typ typ typ LPARAM dwInitParam);
/*4361*/ 
/*4362*/ INT_PTR
/*4363*/ typ
/*4364*/ DialogBoxIndirectParamW(
/*4365*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*4366*/ typ typ typ typ typ LPCDLGTEMPLATEW hDialogTemplate,
/*4367*/ typ typ typ typ typ typ typ HWND hWndParent,
/*4368*/ typ typ typ typ typ typ typ DLGPROC lpDialogFunc,
/*4369*/ typ typ typ typ typ LPARAM dwInitParam);
/*4396*/ 
/*4397*/ BOOL
/*4398*/ typ
/*4399*/ EndDialog(
/*4400*/ typ typ typ typ typ HWND hDlg,
/*4401*/ typ typ typ typ typ INT_PTR nResult);
/*4403*/ 
/*4404*/ HWND
/*4405*/ typ
/*4406*/ GetDlgItem(
/*4407*/ typ typ typ typ typ typ typ HWND hDlg,
/*4408*/ typ typ typ typ typ int nIDDlgItem);
/*4410*/ 
/*4411*/ BOOL
/*4412*/ typ
/*4413*/ SetDlgItemInt(
/*4414*/ typ typ typ typ typ HWND hDlg,
/*4415*/ typ typ typ typ typ int nIDDlgItem,
/*4416*/ typ typ typ typ typ UINT uValue,
/*4417*/ typ typ typ typ typ BOOL bSigned);
/*4419*/ 
/*4420*/ UINT
/*4421*/ typ
/*4422*/ GetDlgItemInt(
/*4423*/ typ typ typ typ typ HWND hDlg,
/*4424*/ typ typ typ typ typ int nIDDlgItem,
/*4425*/ typ typ typ typ typ typ typ BOOL*lpTranslated,
/*4426*/ typ typ typ typ typ BOOL bSigned);
/*4428*/ 
/*4429*/ BOOL
/*4430*/ typ
/*4431*/ SetDlgItemTextA(
/*4432*/ typ typ typ typ typ HWND hDlg,
/*4433*/ typ typ typ typ typ int nIDDlgItem,
/*4434*/ typ typ typ typ typ LPCSTR lpString);
/*4435*/ 
/*4436*/ BOOL
/*4437*/ typ
/*4438*/ SetDlgItemTextW(
/*4439*/ typ typ typ typ typ HWND hDlg,
/*4440*/ typ typ typ typ typ int nIDDlgItem,
/*4441*/ typ typ typ typ typ LPCWSTR lpString);
/*4448*/ 
/*4449*/ UINT
/*4450*/ typ
/*4451*/ GetDlgItemTextA(
/*4452*/ typ typ typ typ typ HWND hDlg,
/*4453*/ typ typ typ typ typ int nIDDlgItem,
/*4454*/ typ typ typ typ typ LPSTR lpString,
/*4455*/ typ typ typ typ typ int cchMax);
/*4456*/ 
/*4457*/ UINT
/*4458*/ typ
/*4459*/ GetDlgItemTextW(
/*4460*/ typ typ typ typ typ HWND hDlg,
/*4461*/ typ typ typ typ typ int nIDDlgItem,
/*4462*/ typ typ typ typ typ LPWSTR lpString,
/*4463*/ typ typ typ typ typ int cchMax);
/*4470*/ 
/*4471*/ BOOL
/*4472*/ typ
/*4473*/ CheckDlgButton(
/*4474*/ typ typ typ typ typ HWND hDlg,
/*4475*/ typ typ typ typ typ int nIDButton,
/*4476*/ typ typ typ typ typ UINT uCheck);
/*4478*/ 
/*4479*/ BOOL
/*4480*/ typ
/*4481*/ CheckRadioButton(
/*4482*/ typ typ typ typ typ HWND hDlg,
/*4483*/ typ typ typ typ typ int nIDFirstButton,
/*4484*/ typ typ typ typ typ int nIDLastButton,
/*4485*/ typ typ typ typ typ int nIDCheckButton);
/*4487*/ 
/*4488*/ UINT
/*4489*/ typ
/*4490*/ IsDlgButtonChecked(
/*4491*/ typ typ typ typ typ HWND hDlg,
/*4492*/ typ typ typ typ typ int nIDButton);
/*4494*/ 
/*4495*/ LRESULT
/*4496*/ typ
/*4497*/ SendDlgItemMessageA(
/*4498*/ typ typ typ typ typ HWND hDlg,
/*4499*/ typ typ typ typ typ int nIDDlgItem,
/*4500*/ typ typ typ typ typ UINT Msg,
/*4501*/ typ typ typ typ typ WPARAM wParam,
/*4502*/ typ typ typ typ typ LPARAM lParam);
/*4503*/ 
/*4504*/ LRESULT
/*4505*/ typ
/*4506*/ SendDlgItemMessageW(
/*4507*/ typ typ typ typ typ HWND hDlg,
/*4508*/ typ typ typ typ typ int nIDDlgItem,
/*4509*/ typ typ typ typ typ UINT Msg,
/*4510*/ typ typ typ typ typ WPARAM wParam,
/*4511*/ typ typ typ typ typ LPARAM lParam);
/*4518*/ 
/*4519*/ HWND
/*4520*/ typ
/*4521*/ GetNextDlgGroupItem(
/*4522*/ typ typ typ typ typ HWND hDlg,
/*4523*/ typ typ typ typ typ typ typ HWND hCtl,
/*4524*/ typ typ typ typ typ BOOL bPrevious);
/*4526*/ 
/*4527*/ HWND
/*4528*/ typ
/*4529*/ GetNextDlgTabItem(
/*4530*/ typ typ typ typ typ HWND hDlg,
/*4531*/ typ typ typ typ typ typ typ HWND hCtl,
/*4532*/ typ typ typ typ typ BOOL bPrevious);
/*4534*/ 
/*4535*/ int
/*4536*/ typ
/*4537*/ GetDlgCtrlID(
/*4538*/ typ typ typ typ typ HWND hWnd);
/*4540*/ 
/*4541*/ long
/*4542*/ typ
/*4543*/ GetDialogBaseUnits(void);
/*4545*/ 
/*4547*/ LRESULT
/*4548*/ typ
/*4553*/ DefDlgProcA(
/*4554*/ typ typ typ typ typ HWND hDlg,
/*4555*/ typ typ typ typ typ UINT Msg,
/*4556*/ typ typ typ typ typ WPARAM wParam,
/*4557*/ typ typ typ typ typ LPARAM lParam);
/*4558*/ 
/*4560*/ LRESULT
/*4561*/ typ
/*4566*/ DefDlgProcW(
/*4567*/ typ typ typ typ typ HWND hDlg,
/*4568*/ typ typ typ typ typ UINT Msg,
/*4569*/ typ typ typ typ typ WPARAM wParam,
/*4570*/ typ typ typ typ typ LPARAM lParam);
/*4590*/ 
/*4591*/ BOOL
/*4592*/ typ
/*4593*/ CallMsgFilterA(
/*4594*/ typ typ typ typ typ LPMSG lpMsg,
/*4595*/ typ typ typ typ typ int nCode);
/*4596*/ 
/*4597*/ BOOL
/*4598*/ typ
/*4599*/ CallMsgFilterW(
/*4600*/ typ typ typ typ typ LPMSG lpMsg,
/*4601*/ typ typ typ typ typ int nCode);
/*4616*/ 
/*4617*/ BOOL
/*4618*/ typ
/*4619*/ OpenClipboard(
/*4620*/ typ typ typ typ typ typ typ HWND hWndNewOwner);
/*4622*/ 
/*4623*/ BOOL
/*4624*/ typ
/*4625*/ CloseClipboard(
/*4626*/ void);
/*4631*/ 
/*4632*/ DWORD
/*4633*/ typ
/*4634*/ GetClipboardSequenceNumber(
/*4635*/ void);
/*4639*/ 
/*4640*/ HWND
/*4641*/ typ
/*4642*/ GetClipboardOwner(
/*4643*/ void);
/*4645*/ 
/*4646*/ HWND
/*4647*/ typ
/*4648*/ SetClipboardViewer(
/*4649*/ typ typ typ typ typ HWND hWndNewViewer);
/*4651*/ 
/*4652*/ HWND
/*4653*/ typ
/*4654*/ GetClipboardViewer(
/*4655*/ void);
/*4657*/ 
/*4658*/ BOOL
/*4659*/ typ
/*4660*/ ChangeClipboardChain(
/*4661*/ typ typ typ typ typ HWND hWndRemove,
/*4662*/ typ typ typ typ typ HWND hWndNewNext);
/*4664*/ 
/*4665*/ HANDLE
/*4666*/ typ
/*4667*/ SetClipboardData(
/*4668*/ typ typ typ typ typ UINT uFormat,
/*4669*/ typ typ typ typ typ typ typ HANDLE hMem);
/*4671*/ 
/*4672*/ HANDLE
/*4673*/ typ
/*4674*/ GetClipboardData(
/*4675*/ typ typ typ typ typ UINT uFormat);
/*4677*/ 
/*4678*/ UINT
/*4679*/ typ
/*4680*/ RegisterClipboardFormatA(
/*4681*/ typ typ typ typ typ LPCSTR lpszFormat);
/*4682*/ 
/*4683*/ UINT
/*4684*/ typ
/*4685*/ RegisterClipboardFormatW(
/*4686*/ typ typ typ typ typ LPCWSTR lpszFormat);
/*4693*/ 
/*4694*/ int
/*4695*/ typ
/*4696*/ CountClipboardFormats(
/*4697*/ void);
/*4699*/ 
/*4700*/ UINT
/*4701*/ typ
/*4702*/ EnumClipboardFormats(
/*4703*/ typ typ typ typ typ UINT format);
/*4705*/ 
/*4706*/ int
/*4707*/ typ
/*4708*/ GetClipboardFormatNameA(
/*4709*/ typ typ typ typ typ UINT format,
/*4710*/ typ typ typ typ typ LPSTR lpszFormatName,
/*4711*/ typ typ typ typ typ int cchMaxCount);
/*4712*/ 
/*4713*/ int
/*4714*/ typ
/*4715*/ GetClipboardFormatNameW(
/*4716*/ typ typ typ typ typ UINT format,
/*4717*/ typ typ typ typ typ LPWSTR lpszFormatName,
/*4718*/ typ typ typ typ typ int cchMaxCount);
/*4725*/ 
/*4726*/ BOOL
/*4727*/ typ
/*4728*/ EmptyClipboard(
/*4729*/ void);
/*4731*/ 
/*4732*/ BOOL
/*4733*/ typ
/*4734*/ IsClipboardFormatAvailable(
/*4735*/ typ typ typ typ typ UINT format);
/*4737*/ 
/*4738*/ int
/*4739*/ typ
/*4740*/ GetPriorityClipboardFormat(
/*4741*/ typ typ typ typ typ typ typ UINT*paFormatPriorityList,
/*4742*/ typ typ typ typ typ int cFormats);
/*4744*/ 
/*4745*/ HWND
/*4746*/ typ
/*4747*/ GetOpenClipboardWindow(
/*4748*/ void);
/*4751*/ 
/*4752*/ BOOL
/*4753*/ typ
/*4754*/ AddClipboardFormatListener(
/*4755*/ typ typ typ typ typ HWND hwnd);
/*4757*/ 
/*4758*/ BOOL
/*4759*/ typ
/*4760*/ RemoveClipboardFormatListener(
/*4761*/ typ typ typ typ typ HWND hwnd);
/*4763*/ 
/*4764*/ BOOL
/*4765*/ typ
/*4766*/ GetUpdatedClipboardFormats(
/*4767*/ typ typ typ typ typ typ PUINT lpuiFormats,
/*4768*/ typ typ typ typ typ UINT cFormats,
/*4769*/ typ typ typ typ typ typ PUINT pcFormatsOut);
/*4777*/ 
/*4778*/ BOOL
/*4779*/ typ
/*4780*/ CharToOemA(
/*4781*/ typ typ typ typ typ typ typ LPCSTR pSrc,
/*4782*/ typ typ typ typ typ LPSTR pDst);
/*4783*/ 
/*4784*/ BOOL
/*4785*/ typ
/*4786*/ CharToOemW(
/*4787*/ typ typ typ typ typ typ typ LPCWSTR pSrc,
/*4788*/ typ typ typ typ typ LPSTR pDst);
/*4795*/ 
/*4796*/ BOOL
/*4797*/ typ
/*4798*/ OemToCharA(
/*4799*/ typ typ typ typ typ typ typ LPCSTR pSrc,
/*4800*/ typ typ typ typ typ LPSTR pDst);
/*4801*/ 
/*4802*/ BOOL
/*4803*/ typ
/*4804*/ OemToCharW(
/*4805*/ typ typ typ typ typ typ typ LPCSTR pSrc,
/*4806*/ typ typ typ typ typ LPWSTR pDst);
/*4813*/ 
/*4814*/ BOOL
/*4815*/ typ
/*4816*/ CharToOemBuffA(
/*4817*/ typ typ typ typ typ LPCSTR lpszSrc,
/*4818*/ typ typ typ typ typ LPSTR lpszDst,
/*4819*/ typ typ typ typ typ DWORD cchDstLength);
/*4820*/ 
/*4821*/ BOOL
/*4822*/ typ
/*4823*/ CharToOemBuffW(
/*4824*/ typ typ typ typ typ LPCWSTR lpszSrc,
/*4825*/ typ typ typ typ typ LPSTR lpszDst,
/*4826*/ typ typ typ typ typ DWORD cchDstLength);
/*4833*/ 
/*4834*/ BOOL
/*4835*/ typ
/*4836*/ OemToCharBuffA(
/*4837*/ typ typ typ typ typ LPCSTR lpszSrc,
/*4838*/ typ typ typ typ typ LPSTR lpszDst,
/*4839*/ typ typ typ typ typ DWORD cchDstLength);
/*4840*/ 
/*4841*/ BOOL
/*4842*/ typ
/*4843*/ OemToCharBuffW(
/*4844*/ typ typ typ typ typ LPCSTR lpszSrc,
/*4845*/ typ typ typ typ typ LPWSTR lpszDst,
/*4846*/ typ typ typ typ typ DWORD cchDstLength);
/*4853*/ 
/*4854*/ LPSTR
/*4855*/ typ
/*4856*/ CharUpperA(
/*4857*/ typ typ typ typ typ LPSTR lpsz);
/*4858*/ 
/*4859*/ LPWSTR
/*4860*/ typ
/*4861*/ CharUpperW(
/*4862*/ typ typ typ typ typ LPWSTR lpsz);
/*4869*/ 
/*4870*/ DWORD
/*4871*/ typ
/*4872*/ CharUpperBuffA(
/*4873*/ typ typ typ typ typ typ typ LPSTR lpsz,
/*4874*/ typ typ typ typ typ DWORD cchLength);
/*4875*/ 
/*4876*/ DWORD
/*4877*/ typ
/*4878*/ CharUpperBuffW(
/*4879*/ typ typ typ typ typ typ typ LPWSTR lpsz,
/*4880*/ typ typ typ typ typ DWORD cchLength);
/*4887*/ 
/*4888*/ LPSTR
/*4889*/ typ
/*4890*/ CharLowerA(
/*4891*/ typ typ typ typ typ LPSTR lpsz);
/*4892*/ 
/*4893*/ LPWSTR
/*4894*/ typ
/*4895*/ CharLowerW(
/*4896*/ typ typ typ typ typ LPWSTR lpsz);
/*4903*/ 
/*4904*/ DWORD
/*4905*/ typ
/*4906*/ CharLowerBuffA(
/*4907*/ typ typ typ typ typ typ typ LPSTR lpsz,
/*4908*/ typ typ typ typ typ DWORD cchLength);
/*4909*/ 
/*4910*/ DWORD
/*4911*/ typ
/*4912*/ CharLowerBuffW(
/*4913*/ typ typ typ typ typ typ typ LPWSTR lpsz,
/*4914*/ typ typ typ typ typ DWORD cchLength);
/*4921*/ 
/*4922*/ LPSTR
/*4923*/ typ
/*4924*/ CharNextA(
/*4925*/ typ typ typ typ typ LPCSTR lpsz);
/*4926*/ 
/*4927*/ LPWSTR
/*4928*/ typ
/*4929*/ CharNextW(
/*4930*/ typ typ typ typ typ LPCWSTR lpsz);
/*4937*/ 
/*4938*/ LPSTR
/*4939*/ typ
/*4940*/ CharPrevA(
/*4941*/ typ typ typ typ typ LPCSTR lpszStart,
/*4942*/ typ typ typ typ typ LPCSTR lpszCurrent);
/*4943*/ 
/*4944*/ LPWSTR
/*4945*/ typ
/*4946*/ CharPrevW(
/*4947*/ typ typ typ typ typ LPCWSTR lpszStart,
/*4948*/ typ typ typ typ typ LPCWSTR lpszCurrent);
/*4956*/ 
/*4957*/ LPSTR
/*4958*/ typ
/*4959*/ CharNextExA(
/*4960*/ typ typ typ typ typ WORD CodePage,
/*4961*/ typ typ typ typ typ LPCSTR lpCurrentChar,
/*4962*/ typ typ typ typ typ DWORD dwFlags);
/*4964*/ 
/*4965*/ LPSTR
/*4966*/ typ
/*4967*/ CharPrevExA(
/*4968*/ typ typ typ typ typ WORD CodePage,
/*4969*/ typ typ typ typ typ LPCSTR lpStart,
/*4970*/ typ typ typ typ typ LPCSTR lpCurrentChar,
/*4971*/ typ typ typ typ typ DWORD dwFlags);
/*4993*/ 
/*4994*/ BOOL
/*4995*/ typ
/*4996*/ IsCharAlphaA(
/*4997*/ typ typ typ typ typ CHAR ch);
/*4998*/ 
/*4999*/ BOOL
/*5000*/ typ
/*5001*/ IsCharAlphaW(
/*5002*/ typ typ typ typ typ WCHAR ch);
/*5009*/ 
/*5010*/ BOOL
/*5011*/ typ
/*5012*/ IsCharAlphaNumericA(
/*5013*/ typ typ typ typ typ CHAR ch);
/*5014*/ 
/*5015*/ BOOL
/*5016*/ typ
/*5017*/ IsCharAlphaNumericW(
/*5018*/ typ typ typ typ typ WCHAR ch);
/*5025*/ 
/*5026*/ BOOL
/*5027*/ typ
/*5028*/ IsCharUpperA(
/*5029*/ typ typ typ typ typ CHAR ch);
/*5030*/ 
/*5031*/ BOOL
/*5032*/ typ
/*5033*/ IsCharUpperW(
/*5034*/ typ typ typ typ typ WCHAR ch);
/*5041*/ 
/*5042*/ BOOL
/*5043*/ typ
/*5044*/ IsCharLowerA(
/*5045*/ typ typ typ typ typ CHAR ch);
/*5046*/ 
/*5047*/ BOOL
/*5048*/ typ
/*5049*/ IsCharLowerW(
/*5050*/ typ typ typ typ typ WCHAR ch);
/*5059*/ 
/*5060*/ HWND
/*5061*/ typ
/*5062*/ SetFocus(
/*5063*/ typ typ typ typ typ typ typ HWND hWnd);
/*5065*/ 
/*5066*/ HWND
/*5067*/ typ
/*5068*/ GetActiveWindow(
/*5069*/ void);
/*5071*/ 
/*5072*/ HWND
/*5073*/ typ
/*5074*/ GetFocus(
/*5075*/ void);
/*5077*/ 
/*5078*/ UINT
/*5079*/ typ
/*5080*/ GetKBCodePage(
/*5081*/ void);
/*5083*/ 
/*5084*/ SHORT
/*5085*/ typ
/*5086*/ GetKeyState(
/*5087*/ typ typ typ typ typ int nVirtKey);
/*5089*/ 
/*5090*/ SHORT
/*5091*/ typ
/*5092*/ GetAsyncKeyState(
/*5093*/ typ typ typ typ typ int vKey);
/*5095*/ 
/*5096*/ BOOL
/*5097*/ typ
/*5098*/ GetKeyboardState(
/*5099*/ typ typ typ typ typ PBYTE lpKeyState);
/*5101*/ 
/*5102*/ BOOL
/*5103*/ typ
/*5104*/ SetKeyboardState(
/*5105*/ typ typ typ typ typ typ typ LPBYTE lpKeyState);
/*5107*/ 
/*5108*/ int
/*5109*/ typ
/*5110*/ GetKeyNameTextA(
/*5111*/ typ typ typ typ typ LONG lParam,
/*5112*/ typ typ typ typ typ LPSTR lpString,
/*5113*/ typ typ typ typ typ int cchSize);
/*5114*/ 
/*5115*/ int
/*5116*/ typ
/*5117*/ GetKeyNameTextW(
/*5118*/ typ typ typ typ typ LONG lParam,
/*5119*/ typ typ typ typ typ LPWSTR lpString,
/*5120*/ typ typ typ typ typ int cchSize);
/*5127*/ 
/*5128*/ int
/*5129*/ typ
/*5130*/ GetKeyboardType(
/*5131*/ typ typ typ typ typ int nTypeFlag);
/*5133*/ 
/*5134*/ int
/*5135*/ typ
/*5136*/ ToAscii(
/*5137*/ typ typ typ typ typ UINT uVirtKey,
/*5138*/ typ typ typ typ typ UINT uScanCode,
/*5139*/ typ typ typ typ typ typ typ typ typ const BYTE*lpKeyState,
/*5140*/ typ typ typ typ typ LPWORD lpChar,
/*5141*/ typ typ typ typ typ UINT uFlags);
/*5144*/ 
/*5145*/ int
/*5146*/ typ
/*5147*/ ToAsciiEx(
/*5148*/ typ typ typ typ typ UINT uVirtKey,
/*5149*/ typ typ typ typ typ UINT uScanCode,
/*5150*/ typ typ typ typ typ typ typ typ typ const BYTE*lpKeyState,
/*5151*/ typ typ typ typ typ LPWORD lpChar,
/*5152*/ typ typ typ typ typ UINT uFlags,
/*5153*/ typ typ typ typ typ typ typ HKL dwhkl);
/*5156*/ 
/*5157*/ int
/*5158*/ typ
/*5159*/ ToUnicode(
/*5160*/ typ typ typ typ typ UINT wVirtKey,
/*5161*/ typ typ typ typ typ UINT wScanCode,
/*5162*/ typ typ typ typ typ typ typ typ typ const BYTE*lpKeyState,
/*5163*/ typ typ typ typ typ LPWSTR pwszBuff,
/*5164*/ typ typ typ typ typ int cchBuff,
/*5165*/ typ typ typ typ typ UINT wFlags);
/*5167*/ 
/*5168*/ DWORD
/*5169*/ typ
/*5170*/ OemKeyScan(
/*5171*/ typ typ typ typ typ WORD wOemChar);
/*5173*/ 
/*5174*/ SHORT
/*5175*/ typ
/*5176*/ VkKeyScanA(
/*5177*/ typ typ typ typ typ CHAR ch);
/*5178*/ 
/*5179*/ SHORT
/*5180*/ typ
/*5181*/ VkKeyScanW(
/*5182*/ typ typ typ typ typ WCHAR ch);
/*5190*/ 
/*5191*/ SHORT
/*5192*/ typ
/*5193*/ VkKeyScanExA(
/*5194*/ typ typ typ typ typ CHAR ch,
/*5195*/ typ typ typ typ typ HKL dwhkl);
/*5196*/ 
/*5197*/ SHORT
/*5198*/ typ
/*5199*/ VkKeyScanExW(
/*5200*/ typ typ typ typ typ WCHAR ch,
/*5201*/ typ typ typ typ typ HKL dwhkl);
/*5215*/ 
/*5216*/ void
/*5217*/ typ
/*5218*/ keybd_event(
/*5219*/ typ typ typ typ typ BYTE bVk,
/*5220*/ typ typ typ typ typ BYTE bScan,
/*5221*/ typ typ typ typ typ DWORD dwFlags,
/*5222*/ typ typ typ typ typ ULONG_PTR dwExtraInfo);
/*5244*/ 
/*5245*/ void
/*5246*/ typ
/*5247*/ mouse_event(
/*5248*/ typ typ typ typ typ DWORD dwFlags,
/*5249*/ typ typ typ typ typ DWORD dx,
/*5250*/ typ typ typ typ typ DWORD dy,
/*5251*/ typ typ typ typ typ DWORD dwData,
/*5252*/ typ typ typ typ typ ULONG_PTR dwExtraInfo);
/*5317*/ 
/*5318*/ UINT
/*5319*/ typ
/*5320*/ MapVirtualKeyA(
/*5321*/ typ typ typ typ typ UINT uCode,
/*5322*/ typ typ typ typ typ UINT uMapType);
/*5323*/ 
/*5324*/ UINT
/*5325*/ typ
/*5326*/ MapVirtualKeyW(
/*5327*/ typ typ typ typ typ UINT uCode,
/*5328*/ typ typ typ typ typ UINT uMapType);
/*5336*/ 
/*5337*/ UINT
/*5338*/ typ
/*5339*/ MapVirtualKeyExA(
/*5340*/ typ typ typ typ typ UINT uCode,
/*5341*/ typ typ typ typ typ UINT uMapType,
/*5342*/ typ typ typ typ typ typ typ HKL dwhkl);
/*5343*/ 
/*5344*/ UINT
/*5345*/ typ
/*5346*/ MapVirtualKeyExW(
/*5347*/ typ typ typ typ typ UINT uCode,
/*5348*/ typ typ typ typ typ UINT uMapType,
/*5349*/ typ typ typ typ typ typ typ HKL dwhkl);
/*5365*/ 
/*5366*/ BOOL
/*5367*/ typ
/*5368*/ GetInputState(
/*5369*/ void);
/*5371*/ 
/*5372*/ DWORD
/*5373*/ typ
/*5374*/ GetQueueStatus(
/*5375*/ typ typ typ typ typ UINT flags);
/*5378*/ 
/*5379*/ HWND
/*5380*/ typ
/*5381*/ GetCapture(
/*5382*/ void);
/*5384*/ 
/*5385*/ HWND
/*5386*/ typ
/*5387*/ SetCapture(
/*5388*/ typ typ typ typ typ HWND hWnd);
/*5390*/ 
/*5391*/ BOOL
/*5392*/ typ
/*5393*/ ReleaseCapture(
/*5394*/ void);
/*5396*/ 
/*5397*/ DWORD
/*5398*/ typ
/*5399*/ MsgWaitForMultipleObjects(
/*5400*/ typ typ typ typ typ DWORD nCount,
/*5401*/ typ typ typ typ typ typ typ typ typ const HANDLE*pHandles,
/*5402*/ typ typ typ typ typ BOOL fWaitAll,
/*5403*/ typ typ typ typ typ DWORD dwMilliseconds,
/*5404*/ typ typ typ typ typ DWORD dwWakeMask);
/*5406*/ 
/*5407*/ DWORD
/*5408*/ typ
/*5409*/ MsgWaitForMultipleObjectsEx(
/*5410*/ typ typ typ typ typ DWORD nCount,
/*5411*/ typ typ typ typ typ typ typ typ typ const HANDLE*pHandles,
/*5412*/ typ typ typ typ typ DWORD dwMilliseconds,
/*5413*/ typ typ typ typ typ DWORD dwWakeMask,
/*5414*/ typ typ typ typ typ DWORD dwFlags);
/*5470*/ 
/*5471*/ UINT_PTR
/*5472*/ typ
/*5473*/ SetTimer(
/*5474*/ typ typ typ typ typ typ typ HWND hWnd,
/*5475*/ typ typ typ typ typ UINT_PTR nIDEvent,
/*5476*/ typ typ typ typ typ UINT uElapse,
/*5477*/ typ typ typ typ typ typ typ TIMERPROC lpTimerFunc);
/*5479*/ 
/*5480*/ BOOL
/*5481*/ typ
/*5482*/ KillTimer(
/*5483*/ typ typ typ typ typ typ typ HWND hWnd,
/*5484*/ typ typ typ typ typ UINT_PTR uIDEvent);
/*5486*/ 
/*5487*/ BOOL
/*5488*/ typ
/*5489*/ IsWindowUnicode(
/*5490*/ typ typ typ typ typ HWND hWnd);
/*5492*/ 
/*5493*/ BOOL
/*5494*/ typ
/*5495*/ EnableWindow(
/*5496*/ typ typ typ typ typ HWND hWnd,
/*5497*/ typ typ typ typ typ BOOL bEnable);
/*5499*/ 
/*5500*/ BOOL
/*5501*/ typ
/*5502*/ IsWindowEnabled(
/*5503*/ typ typ typ typ typ HWND hWnd);
/*5505*/ 
/*5506*/ HACCEL
/*5507*/ typ
/*5508*/ LoadAcceleratorsA(
/*5509*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*5510*/ typ typ typ typ typ LPCSTR lpTableName);
/*5511*/ 
/*5512*/ HACCEL
/*5513*/ typ
/*5514*/ LoadAcceleratorsW(
/*5515*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*5516*/ typ typ typ typ typ LPCWSTR lpTableName);
/*5523*/ 
/*5524*/ HACCEL
/*5525*/ typ
/*5526*/ CreateAcceleratorTableA(
/*5527*/ typ typ typ typ typ typ typ LPACCEL paccel,
/*5528*/ typ typ typ typ typ int cAccel);
/*5529*/ 
/*5530*/ HACCEL
/*5531*/ typ
/*5532*/ CreateAcceleratorTableW(
/*5533*/ typ typ typ typ typ typ typ LPACCEL paccel,
/*5534*/ typ typ typ typ typ int cAccel);
/*5541*/ 
/*5542*/ BOOL
/*5543*/ typ
/*5544*/ DestroyAcceleratorTable(
/*5545*/ typ typ typ typ typ HACCEL hAccel);
/*5547*/ 
/*5548*/ int
/*5549*/ typ
/*5550*/ CopyAcceleratorTableA(
/*5551*/ typ typ typ typ typ HACCEL hAccelSrc,
/*5552*/ typ typ typ typ typ typ typ typ typ LPACCEL lpAccelDst,
/*5553*/ typ typ typ typ typ int cAccelEntries);
/*5554*/ 
/*5555*/ int
/*5556*/ typ
/*5557*/ CopyAcceleratorTableW(
/*5558*/ typ typ typ typ typ HACCEL hAccelSrc,
/*5559*/ typ typ typ typ typ typ typ typ typ LPACCEL lpAccelDst,
/*5560*/ typ typ typ typ typ int cAccelEntries);
/*5569*/ 
/*5570*/ int
/*5571*/ typ
/*5572*/ TranslateAcceleratorA(
/*5573*/ typ typ typ typ typ HWND hWnd,
/*5574*/ typ typ typ typ typ HACCEL hAccTable,
/*5575*/ typ typ typ typ typ LPMSG lpMsg);
/*5576*/ 
/*5577*/ int
/*5578*/ typ
/*5579*/ TranslateAcceleratorW(
/*5580*/ typ typ typ typ typ HWND hWnd,
/*5581*/ typ typ typ typ typ HACCEL hAccTable,
/*5582*/ typ typ typ typ typ LPMSG lpMsg);
/*5740*/ 
/*5741*/ int
/*5742*/ typ
/*5743*/ GetSystemMetrics(
/*5744*/ typ typ typ typ typ int nIndex);
/*5751*/ 
/*5752*/ HMENU
/*5753*/ typ
/*5754*/ LoadMenuA(
/*5755*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*5756*/ typ typ typ typ typ LPCSTR lpMenuName);
/*5757*/ 
/*5758*/ HMENU
/*5759*/ typ
/*5760*/ LoadMenuW(
/*5761*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*5762*/ typ typ typ typ typ LPCWSTR lpMenuName);
/*5769*/ 
/*5770*/ HMENU
/*5771*/ typ
/*5772*/ LoadMenuIndirectA(
/*5773*/ typ typ typ typ typ const MENUTEMPLATEA*lpMenuTemplate);
/*5774*/ 
/*5775*/ HMENU
/*5776*/ typ
/*5777*/ LoadMenuIndirectW(
/*5778*/ typ typ typ typ typ const MENUTEMPLATEW*lpMenuTemplate);
/*5785*/ 
/*5786*/ HMENU
/*5787*/ typ
/*5788*/ GetMenu(
/*5789*/ typ typ typ typ typ HWND hWnd);
/*5791*/ 
/*5792*/ BOOL
/*5793*/ typ
/*5794*/ SetMenu(
/*5795*/ typ typ typ typ typ HWND hWnd,
/*5796*/ typ typ typ typ typ typ typ HMENU hMenu);
/*5798*/ 
/*5799*/ BOOL
/*5800*/ typ
/*5801*/ ChangeMenuA(
/*5802*/ typ typ typ typ typ HMENU hMenu,
/*5803*/ typ typ typ typ typ UINT cmd,
/*5804*/ typ typ typ typ typ typ typ LPCSTR lpszNewItem,
/*5805*/ typ typ typ typ typ UINT cmdInsert,
/*5806*/ typ typ typ typ typ UINT flags);
/*5807*/ 
/*5808*/ BOOL
/*5809*/ typ
/*5810*/ ChangeMenuW(
/*5811*/ typ typ typ typ typ HMENU hMenu,
/*5812*/ typ typ typ typ typ UINT cmd,
/*5813*/ typ typ typ typ typ typ typ LPCWSTR lpszNewItem,
/*5814*/ typ typ typ typ typ UINT cmdInsert,
/*5815*/ typ typ typ typ typ UINT flags);
/*5822*/ 
/*5823*/ BOOL
/*5824*/ typ
/*5825*/ HiliteMenuItem(
/*5826*/ typ typ typ typ typ HWND hWnd,
/*5827*/ typ typ typ typ typ HMENU hMenu,
/*5828*/ typ typ typ typ typ UINT uIDHiliteItem,
/*5829*/ typ typ typ typ typ UINT uHilite);
/*5831*/ 
/*5832*/ int
/*5833*/ typ
/*5834*/ GetMenuStringA(
/*5835*/ typ typ typ typ typ HMENU hMenu,
/*5836*/ typ typ typ typ typ UINT uIDItem,
/*5837*/ typ typ typ typ typ typ typ LPSTR lpString,
/*5838*/ typ typ typ typ typ int cchMax,
/*5839*/ typ typ typ typ typ UINT flags);
/*5840*/ 
/*5841*/ int
/*5842*/ typ
/*5843*/ GetMenuStringW(
/*5844*/ typ typ typ typ typ HMENU hMenu,
/*5845*/ typ typ typ typ typ UINT uIDItem,
/*5846*/ typ typ typ typ typ typ typ LPWSTR lpString,
/*5847*/ typ typ typ typ typ int cchMax,
/*5848*/ typ typ typ typ typ UINT flags);
/*5855*/ 
/*5856*/ UINT
/*5857*/ typ
/*5858*/ GetMenuState(
/*5859*/ typ typ typ typ typ HMENU hMenu,
/*5860*/ typ typ typ typ typ UINT uId,
/*5861*/ typ typ typ typ typ UINT uFlags);
/*5863*/ 
/*5864*/ BOOL
/*5865*/ typ
/*5866*/ DrawMenuBar(
/*5867*/ typ typ typ typ typ HWND hWnd);
/*5875*/ 
/*5876*/ HMENU
/*5877*/ typ
/*5878*/ GetSystemMenu(
/*5879*/ typ typ typ typ typ HWND hWnd,
/*5880*/ typ typ typ typ typ BOOL bRevert);
/*5883*/ 
/*5884*/ HMENU
/*5885*/ typ
/*5886*/ CreateMenu(
/*5887*/ void);
/*5889*/ 
/*5890*/ HMENU
/*5891*/ typ
/*5892*/ CreatePopupMenu(
/*5893*/ void);
/*5895*/ 
/*5896*/ BOOL
/*5897*/ typ
/*5898*/ DestroyMenu(
/*5899*/ typ typ typ typ typ HMENU hMenu);
/*5901*/ 
/*5902*/ DWORD
/*5903*/ typ
/*5904*/ CheckMenuItem(
/*5905*/ typ typ typ typ typ HMENU hMenu,
/*5906*/ typ typ typ typ typ UINT uIDCheckItem,
/*5907*/ typ typ typ typ typ UINT uCheck);
/*5909*/ 
/*5910*/ BOOL
/*5911*/ typ
/*5912*/ EnableMenuItem(
/*5913*/ typ typ typ typ typ HMENU hMenu,
/*5914*/ typ typ typ typ typ UINT uIDEnableItem,
/*5915*/ typ typ typ typ typ UINT uEnable);
/*5917*/ 
/*5918*/ HMENU
/*5919*/ typ
/*5920*/ GetSubMenu(
/*5921*/ typ typ typ typ typ HMENU hMenu,
/*5922*/ typ typ typ typ typ int nPos);
/*5924*/ 
/*5925*/ UINT
/*5926*/ typ
/*5927*/ GetMenuItemID(
/*5928*/ typ typ typ typ typ HMENU hMenu,
/*5929*/ typ typ typ typ typ int nPos);
/*5931*/ 
/*5932*/ int
/*5933*/ typ
/*5934*/ GetMenuItemCount(
/*5935*/ typ typ typ typ typ typ typ HMENU hMenu);
/*5937*/ 
/*5938*/ BOOL
/*5939*/ typ
/*5940*/ InsertMenuA(
/*5941*/ typ typ typ typ typ HMENU hMenu,
/*5942*/ typ typ typ typ typ UINT uPosition,
/*5943*/ typ typ typ typ typ UINT uFlags,
/*5944*/ typ typ typ typ typ UINT_PTR uIDNewItem,
/*5945*/ typ typ typ typ typ typ typ LPCSTR lpNewItem);
/*5946*/ 
/*5947*/ BOOL
/*5948*/ typ
/*5949*/ InsertMenuW(
/*5950*/ typ typ typ typ typ HMENU hMenu,
/*5951*/ typ typ typ typ typ UINT uPosition,
/*5952*/ typ typ typ typ typ UINT uFlags,
/*5953*/ typ typ typ typ typ UINT_PTR uIDNewItem,
/*5954*/ typ typ typ typ typ typ typ LPCWSTR lpNewItem);
/*5961*/ 
/*5962*/ BOOL
/*5963*/ typ
/*5964*/ AppendMenuA(
/*5965*/ typ typ typ typ typ HMENU hMenu,
/*5966*/ typ typ typ typ typ UINT uFlags,
/*5967*/ typ typ typ typ typ UINT_PTR uIDNewItem,
/*5968*/ typ typ typ typ typ typ typ LPCSTR lpNewItem);
/*5969*/ 
/*5970*/ BOOL
/*5971*/ typ
/*5972*/ AppendMenuW(
/*5973*/ typ typ typ typ typ HMENU hMenu,
/*5974*/ typ typ typ typ typ UINT uFlags,
/*5975*/ typ typ typ typ typ UINT_PTR uIDNewItem,
/*5976*/ typ typ typ typ typ typ typ LPCWSTR lpNewItem);
/*5983*/ 
/*5984*/ BOOL
/*5985*/ typ
/*5986*/ ModifyMenuA(
/*5987*/ typ typ typ typ typ HMENU hMnu,
/*5988*/ typ typ typ typ typ UINT uPosition,
/*5989*/ typ typ typ typ typ UINT uFlags,
/*5990*/ typ typ typ typ typ UINT_PTR uIDNewItem,
/*5991*/ typ typ typ typ typ typ typ LPCSTR lpNewItem);
/*5992*/ 
/*5993*/ BOOL
/*5994*/ typ
/*5995*/ ModifyMenuW(
/*5996*/ typ typ typ typ typ HMENU hMnu,
/*5997*/ typ typ typ typ typ UINT uPosition,
/*5998*/ typ typ typ typ typ UINT uFlags,
/*5999*/ typ typ typ typ typ UINT_PTR uIDNewItem,
/*6000*/ typ typ typ typ typ typ typ LPCWSTR lpNewItem);
/*6007*/ 
/*6008*/ BOOL
/*6009*/ typ RemoveMenu(
/*6010*/ typ typ typ typ typ HMENU hMenu,
/*6011*/ typ typ typ typ typ UINT uPosition,
/*6012*/ typ typ typ typ typ UINT uFlags);
/*6014*/ 
/*6015*/ BOOL
/*6016*/ typ
/*6017*/ DeleteMenu(
/*6018*/ typ typ typ typ typ HMENU hMenu,
/*6019*/ typ typ typ typ typ UINT uPosition,
/*6020*/ typ typ typ typ typ UINT uFlags);
/*6022*/ 
/*6023*/ BOOL
/*6024*/ typ
/*6025*/ SetMenuItemBitmaps(
/*6026*/ typ typ typ typ typ HMENU hMenu,
/*6027*/ typ typ typ typ typ UINT uPosition,
/*6028*/ typ typ typ typ typ UINT uFlags,
/*6029*/ typ typ typ typ typ typ typ HBITMAP hBitmapUnchecked,
/*6030*/ typ typ typ typ typ typ typ HBITMAP hBitmapChecked);
/*6032*/ 
/*6033*/ LONG
/*6034*/ typ
/*6035*/ GetMenuCheckMarkDimensions(
/*6036*/ void);
/*6038*/ 
/*6039*/ BOOL
/*6040*/ typ
/*6041*/ TrackPopupMenu(
/*6042*/ typ typ typ typ typ HMENU hMenu,
/*6043*/ typ typ typ typ typ UINT uFlags,
/*6044*/ typ typ typ typ typ int x,
/*6045*/ typ typ typ typ typ int y,
/*6046*/ typ typ typ typ typ int nReserved,
/*6047*/ typ typ typ typ typ HWND hWnd,
/*6048*/ typ typ typ typ typ typ typ const RECT*prcRect);
/*6057*/ typedef struct tagTPMPARAMS
/*6058*/ {
/*6059*/ UINT cbSize;
/*6060*/ RECT rcExclude;
/*6061*/ }TPMPARAMS;
/*6062*/ typedef TPMPARAMS typ*LPTPMPARAMS;
/*6064*/ 
/*6065*/ BOOL
/*6066*/ typ
/*6067*/ TrackPopupMenuEx(
/*6068*/ typ typ typ typ typ HMENU,
/*6069*/ typ typ typ typ typ UINT,
/*6070*/ typ typ typ typ typ int,
/*6071*/ typ typ typ typ typ int,
/*6072*/ typ typ typ typ typ HWND,
/*6073*/ typ typ typ typ typ typ typ LPTPMPARAMS);
/*6092*/ typedef struct tagMENUINFO
/*6093*/ {
/*6094*/ DWORD cbSize;
/*6095*/ DWORD fMask;
/*6096*/ DWORD dwStyle;
/*6097*/ UINT cyMax;
/*6098*/ HBRUSH hbrBack;
/*6099*/ DWORD dwContextHelpID;
/*6100*/ ULONG_PTR dwMenuData;
/*6101*/ }MENUINFO,typ*LPMENUINFO;
/*6102*/ typedef MENUINFO const typ*LPCMENUINFO;
/*6104*/ 
/*6105*/ BOOL
/*6106*/ typ
/*6107*/ GetMenuInfo(
/*6108*/ typ typ typ typ typ HMENU,
/*6109*/ typ typ typ typ typ LPMENUINFO);
/*6111*/ 
/*6112*/ BOOL
/*6113*/ typ
/*6114*/ SetMenuInfo(
/*6115*/ typ typ typ typ typ HMENU,
/*6116*/ typ typ typ typ typ LPCMENUINFO);
/*6118*/ 
/*6119*/ BOOL
/*6120*/ typ
/*6121*/ EndMenu(
/*6122*/ void);
/*6130*/ typedef struct tagMENUGETOBJECTINFO
/*6131*/ {
/*6132*/ DWORD dwFlags;
/*6133*/ UINT uPos;
/*6134*/ HMENU hmenu;
/*6135*/ PVOID riid;
/*6136*/ PVOID pvObj;
/*6137*/ }MENUGETOBJECTINFO,*PMENUGETOBJECTINFO;
/*6180*/ typedef struct tagMENUITEMINFOA
/*6181*/ {
/*6182*/ UINT cbSize;
/*6183*/ UINT fMask;
/*6184*/ UINT fType;
/*6185*/ UINT fState;
/*6186*/ UINT wID;
/*6187*/ HMENU hSubMenu;
/*6188*/ HBITMAP hbmpChecked;
/*6189*/ HBITMAP hbmpUnchecked;
/*6190*/ ULONG_PTR dwItemData;
/*6191*/ typ typ LPSTR dwTypeData;
/*6192*/ UINT cch;
/*6194*/ HBITMAP hbmpItem;
/*6196*/ }MENUITEMINFOA,typ*LPMENUITEMINFOA;
/*6197*/ typedef struct tagMENUITEMINFOW
/*6198*/ {
/*6199*/ UINT cbSize;
/*6200*/ UINT fMask;
/*6201*/ UINT fType;
/*6202*/ UINT fState;
/*6203*/ UINT wID;
/*6204*/ HMENU hSubMenu;
/*6205*/ HBITMAP hbmpChecked;
/*6206*/ HBITMAP hbmpUnchecked;
/*6207*/ ULONG_PTR dwItemData;
/*6208*/ typ typ LPWSTR dwTypeData;
/*6209*/ UINT cch;
/*6211*/ HBITMAP hbmpItem;
/*6213*/ }MENUITEMINFOW,typ*LPMENUITEMINFOW;
/*6218*/ typedef MENUITEMINFOA MENUITEMINFO;
/*6219*/ typedef LPMENUITEMINFOA LPMENUITEMINFO;
/*6221*/ typedef MENUITEMINFOA const typ*LPCMENUITEMINFOA;
/*6222*/ typedef MENUITEMINFOW const typ*LPCMENUITEMINFOW;
/*6226*/ typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
/*6230*/ 
/*6231*/ BOOL
/*6232*/ typ
/*6233*/ InsertMenuItemA(
/*6234*/ typ typ typ typ typ HMENU hmenu,
/*6235*/ typ typ typ typ typ UINT item,
/*6236*/ typ typ typ typ typ BOOL fByPosition,
/*6237*/ typ typ typ typ typ LPCMENUITEMINFOA lpmi);
/*6238*/ 
/*6239*/ BOOL
/*6240*/ typ
/*6241*/ InsertMenuItemW(
/*6242*/ typ typ typ typ typ HMENU hmenu,
/*6243*/ typ typ typ typ typ UINT item,
/*6244*/ typ typ typ typ typ BOOL fByPosition,
/*6245*/ typ typ typ typ typ LPCMENUITEMINFOW lpmi);
/*6252*/ 
/*6253*/ BOOL
/*6254*/ typ
/*6255*/ GetMenuItemInfoA(
/*6256*/ typ typ typ typ typ HMENU hmenu,
/*6257*/ typ typ typ typ typ UINT item,
/*6258*/ typ typ typ typ typ BOOL fByPosition,
/*6259*/ typ typ typ typ typ LPMENUITEMINFOA lpmii);
/*6260*/ 
/*6261*/ BOOL
/*6262*/ typ
/*6263*/ GetMenuItemInfoW(
/*6264*/ typ typ typ typ typ HMENU hmenu,
/*6265*/ typ typ typ typ typ UINT item,
/*6266*/ typ typ typ typ typ BOOL fByPosition,
/*6267*/ typ typ typ typ typ LPMENUITEMINFOW lpmii);
/*6274*/ 
/*6275*/ BOOL
/*6276*/ typ
/*6277*/ SetMenuItemInfoA(
/*6278*/ typ typ typ typ typ HMENU hmenu,
/*6279*/ typ typ typ typ typ UINT item,
/*6280*/ typ typ typ typ typ BOOL fByPositon,
/*6281*/ typ typ typ typ typ LPCMENUITEMINFOA lpmii);
/*6282*/ 
/*6283*/ BOOL
/*6284*/ typ
/*6285*/ SetMenuItemInfoW(
/*6286*/ typ typ typ typ typ HMENU hmenu,
/*6287*/ typ typ typ typ typ UINT item,
/*6288*/ typ typ typ typ typ BOOL fByPositon,
/*6289*/ typ typ typ typ typ LPCMENUITEMINFOW lpmii);
/*6300*/ 
/*6301*/ UINT
/*6302*/ typ
/*6303*/ GetMenuDefaultItem(
/*6304*/ typ typ typ typ typ HMENU hMenu,
/*6305*/ typ typ typ typ typ UINT fByPos,
/*6306*/ typ typ typ typ typ UINT gmdiFlags);
/*6308*/ 
/*6309*/ BOOL
/*6310*/ typ
/*6311*/ SetMenuDefaultItem(
/*6312*/ typ typ typ typ typ HMENU hMenu,
/*6313*/ typ typ typ typ typ UINT uItem,
/*6314*/ typ typ typ typ typ UINT fByPos);
/*6316*/ 
/*6317*/ BOOL
/*6318*/ typ
/*6319*/ GetMenuItemRect(
/*6320*/ typ typ typ typ typ typ typ HWND hWnd,
/*6321*/ typ typ typ typ typ HMENU hMenu,
/*6322*/ typ typ typ typ typ UINT uItem,
/*6323*/ typ typ typ typ typ LPRECT lprcItem);
/*6325*/ 
/*6326*/ int
/*6327*/ typ
/*6328*/ MenuItemFromPoint(
/*6329*/ typ typ typ typ typ typ typ HWND hWnd,
/*6330*/ typ typ typ typ typ HMENU hMenu,
/*6331*/ typ typ typ typ typ POINT ptScreen);
/*6375*/ typedef struct tagDROPSTRUCT
/*6376*/ {
/*6377*/ HWND hwndSource;
/*6378*/ HWND hwndSink;
/*6379*/ DWORD wFmt;
/*6380*/ ULONG_PTR dwData;
/*6381*/ POINT ptDrop;
/*6382*/ DWORD dwControlData;
/*6383*/ }DROPSTRUCT,*PDROPSTRUCT,*LPDROPSTRUCT;
/*6395*/ 
/*6396*/ DWORD
/*6397*/ typ
/*6398*/ DragObject(
/*6399*/ typ typ typ typ typ HWND hwndParent,
/*6400*/ typ typ typ typ typ HWND hwndFrom,
/*6401*/ typ typ typ typ typ UINT fmt,
/*6402*/ typ typ typ typ typ ULONG_PTR data,
/*6403*/ typ typ typ typ typ typ typ HCURSOR hcur);
/*6405*/ 
/*6406*/ BOOL
/*6407*/ typ
/*6408*/ DragDetect(
/*6409*/ typ typ typ typ typ HWND hwnd,
/*6410*/ typ typ typ typ typ POINT pt);
/*6413*/ 
/*6414*/ BOOL
/*6415*/ typ
/*6416*/ DrawIcon(
/*6417*/ typ typ typ typ typ HDC hDC,
/*6418*/ typ typ typ typ typ int X,
/*6419*/ typ typ typ typ typ int Y,
/*6420*/ typ typ typ typ typ HICON hIcon);
/*6458*/ typedef struct tagDRAWTEXTPARAMS
/*6459*/ {
/*6460*/ UINT cbSize;
/*6461*/ int iTabLength;
/*6462*/ int iLeftMargin;
/*6463*/ int iRightMargin;
/*6464*/ UINT uiLengthDrawn;
/*6465*/ }DRAWTEXTPARAMS,typ*LPDRAWTEXTPARAMS;
/*6469*/ 
/*6470*/ int
/*6471*/ typ
/*6472*/ DrawTextA(
/*6473*/ typ typ typ typ typ HDC hdc,
/*6474*/ typ typ typ typ typ typ typ typ typ LPCSTR lpchText,
/*6475*/ typ typ typ typ typ int cchText,
/*6476*/ typ typ typ typ typ LPRECT lprc,
/*6477*/ typ typ typ typ typ UINT format);
/*6478*/ 
/*6479*/ int
/*6480*/ typ
/*6481*/ DrawTextW(
/*6482*/ typ typ typ typ typ HDC hdc,
/*6483*/ typ typ typ typ typ typ typ typ typ LPCWSTR lpchText,
/*6484*/ typ typ typ typ typ int cchText,
/*6485*/ typ typ typ typ typ LPRECT lprc,
/*6486*/ typ typ typ typ typ UINT format);
/*6521*/ 
/*6522*/ int
/*6523*/ typ
/*6524*/ DrawTextExA(
/*6525*/ typ typ typ typ typ HDC hdc,
/*6526*/ typ typ typ typ typ typ typ typ typ LPSTR lpchText,
/*6527*/ typ typ typ typ typ int cchText,
/*6528*/ typ typ typ typ typ LPRECT lprc,
/*6529*/ typ typ typ typ typ UINT format,
/*6530*/ typ typ typ typ typ typ typ LPDRAWTEXTPARAMS lpdtp);
/*6531*/ 
/*6532*/ int
/*6533*/ typ
/*6534*/ DrawTextExW(
/*6535*/ typ typ typ typ typ HDC hdc,
/*6536*/ typ typ typ typ typ typ typ typ typ LPWSTR lpchText,
/*6537*/ typ typ typ typ typ int cchText,
/*6538*/ typ typ typ typ typ LPRECT lprc,
/*6539*/ typ typ typ typ typ UINT format,
/*6540*/ typ typ typ typ typ typ typ LPDRAWTEXTPARAMS lpdtp);
/*6550*/ 
/*6551*/ BOOL
/*6552*/ typ
/*6553*/ GrayStringA(
/*6554*/ typ typ typ typ typ HDC hDC,
/*6555*/ typ typ typ typ typ typ typ HBRUSH hBrush,
/*6556*/ typ typ typ typ typ typ typ GRAYSTRINGPROC lpOutputFunc,
/*6557*/ typ typ typ typ typ LPARAM lpData,
/*6558*/ typ typ typ typ typ int nCount,
/*6559*/ typ typ typ typ typ int X,
/*6560*/ typ typ typ typ typ int Y,
/*6561*/ typ typ typ typ typ int nWidth,
/*6562*/ typ typ typ typ typ int nHeight);
/*6563*/ 
/*6564*/ BOOL
/*6565*/ typ
/*6566*/ GrayStringW(
/*6567*/ typ typ typ typ typ HDC hDC,
/*6568*/ typ typ typ typ typ typ typ HBRUSH hBrush,
/*6569*/ typ typ typ typ typ typ typ GRAYSTRINGPROC lpOutputFunc,
/*6570*/ typ typ typ typ typ LPARAM lpData,
/*6571*/ typ typ typ typ typ int nCount,
/*6572*/ typ typ typ typ typ int X,
/*6573*/ typ typ typ typ typ int Y,
/*6574*/ typ typ typ typ typ int nWidth,
/*6575*/ typ typ typ typ typ int nHeight);
/*6602*/ 
/*6603*/ BOOL
/*6604*/ typ
/*6605*/ DrawStateA(
/*6606*/ typ typ typ typ typ HDC hdc,
/*6607*/ typ typ typ typ typ typ typ HBRUSH hbrFore,
/*6608*/ typ typ typ typ typ typ typ DRAWSTATEPROC qfnCallBack,
/*6609*/ typ typ typ typ typ LPARAM lData,
/*6610*/ typ typ typ typ typ WPARAM wData,
/*6611*/ typ typ typ typ typ int x,
/*6612*/ typ typ typ typ typ int y,
/*6613*/ typ typ typ typ typ int cx,
/*6614*/ typ typ typ typ typ int cy,
/*6615*/ typ typ typ typ typ UINT uFlags);
/*6616*/ 
/*6617*/ BOOL
/*6618*/ typ
/*6619*/ DrawStateW(
/*6620*/ typ typ typ typ typ HDC hdc,
/*6621*/ typ typ typ typ typ typ typ HBRUSH hbrFore,
/*6622*/ typ typ typ typ typ typ typ DRAWSTATEPROC qfnCallBack,
/*6623*/ typ typ typ typ typ LPARAM lData,
/*6624*/ typ typ typ typ typ WPARAM wData,
/*6625*/ typ typ typ typ typ int x,
/*6626*/ typ typ typ typ typ int y,
/*6627*/ typ typ typ typ typ int cx,
/*6628*/ typ typ typ typ typ int cy,
/*6629*/ typ typ typ typ typ UINT uFlags);
/*6637*/ 
/*6638*/ LONG
/*6639*/ typ
/*6640*/ TabbedTextOutA(
/*6641*/ typ typ typ typ typ HDC hdc,
/*6642*/ typ typ typ typ typ int x,
/*6643*/ typ typ typ typ typ int y,
/*6644*/ typ typ typ typ typ typ typ LPCSTR lpString,
/*6645*/ typ typ typ typ typ int chCount,
/*6646*/ typ typ typ typ typ int nTabPositions,
/*6647*/ typ typ typ typ typ typ typ typ typ const INT*lpnTabStopPositions,
/*6648*/ typ typ typ typ typ int nTabOrigin);
/*6649*/ 
/*6650*/ LONG
/*6651*/ typ
/*6652*/ TabbedTextOutW(
/*6653*/ typ typ typ typ typ HDC hdc,
/*6654*/ typ typ typ typ typ int x,
/*6655*/ typ typ typ typ typ int y,
/*6656*/ typ typ typ typ typ typ typ LPCWSTR lpString,
/*6657*/ typ typ typ typ typ int chCount,
/*6658*/ typ typ typ typ typ int nTabPositions,
/*6659*/ typ typ typ typ typ typ typ typ typ const INT*lpnTabStopPositions,
/*6660*/ typ typ typ typ typ int nTabOrigin);
/*6667*/ 
/*6668*/ DWORD
/*6669*/ typ
/*6670*/ GetTabbedTextExtentA(
/*6671*/ typ typ typ typ typ HDC hdc,
/*6672*/ typ typ typ typ typ typ typ LPCSTR lpString,
/*6673*/ typ typ typ typ typ int chCount,
/*6674*/ typ typ typ typ typ int nTabPositions,
/*6675*/ typ typ typ typ typ typ typ typ typ const INT*lpnTabStopPositions);
/*6676*/ 
/*6677*/ DWORD
/*6678*/ typ
/*6679*/ GetTabbedTextExtentW(
/*6680*/ typ typ typ typ typ HDC hdc,
/*6681*/ typ typ typ typ typ typ typ LPCWSTR lpString,
/*6682*/ typ typ typ typ typ int chCount,
/*6683*/ typ typ typ typ typ int nTabPositions,
/*6684*/ typ typ typ typ typ typ typ typ typ const INT*lpnTabStopPositions);
/*6691*/ 
/*6692*/ BOOL
/*6693*/ typ
/*6694*/ UpdateWindow(
/*6695*/ typ typ typ typ typ HWND hWnd);
/*6697*/ 
/*6698*/ HWND
/*6699*/ typ
/*6700*/ SetActiveWindow(
/*6701*/ typ typ typ typ typ HWND hWnd);
/*6703*/ 
/*6704*/ HWND
/*6705*/ typ
/*6706*/ GetForegroundWindow(
/*6707*/ void);
/*6710*/ 
/*6711*/ BOOL
/*6712*/ typ
/*6713*/ PaintDesktop(
/*6714*/ typ typ typ typ typ HDC hdc);
/*6716*/ 
/*6717*/ void
/*6718*/ typ
/*6719*/ SwitchToThisWindow(
/*6720*/ typ typ typ typ typ HWND hwnd,
/*6721*/ typ typ typ typ typ BOOL fUnknown);
/*6725*/ 
/*6726*/ BOOL
/*6727*/ typ
/*6728*/ SetForegroundWindow(
/*6729*/ typ typ typ typ typ HWND hWnd);
/*6751*/ 
/*6752*/ HWND
/*6753*/ typ
/*6754*/ WindowFromDC(
/*6755*/ typ typ typ typ typ HDC hDC);
/*6757*/ 
/*6758*/ HDC
/*6759*/ typ
/*6760*/ GetDC(
/*6761*/ typ typ typ typ typ typ typ HWND hWnd);
/*6763*/ 
/*6764*/ HDC
/*6765*/ typ
/*6766*/ GetDCEx(
/*6767*/ typ typ typ typ typ typ typ HWND hWnd,
/*6768*/ typ typ typ typ typ typ typ HRGN hrgnClip,
/*6769*/ typ typ typ typ typ DWORD flags);
/*6788*/ 
/*6789*/ HDC
/*6790*/ typ
/*6791*/ GetWindowDC(
/*6792*/ typ typ typ typ typ typ typ HWND hWnd);
/*6794*/ 
/*6795*/ int
/*6796*/ typ
/*6797*/ ReleaseDC(
/*6798*/ typ typ typ typ typ typ typ HWND hWnd,
/*6799*/ typ typ typ typ typ HDC hDC);
/*6801*/ 
/*6802*/ HDC
/*6803*/ typ
/*6804*/ BeginPaint(
/*6805*/ typ typ typ typ typ HWND hWnd,
/*6806*/ typ typ typ typ typ LPPAINTSTRUCT lpPaint);
/*6808*/ 
/*6809*/ BOOL
/*6810*/ typ
/*6811*/ EndPaint(
/*6812*/ typ typ typ typ typ HWND hWnd,
/*6813*/ typ typ typ typ typ const PAINTSTRUCT*lpPaint);
/*6815*/ 
/*6816*/ BOOL
/*6817*/ typ
/*6818*/ GetUpdateRect(
/*6819*/ typ typ typ typ typ HWND hWnd,
/*6820*/ typ typ typ typ typ typ typ LPRECT lpRect,
/*6821*/ typ typ typ typ typ BOOL bErase);
/*6823*/ 
/*6824*/ int
/*6825*/ typ
/*6826*/ GetUpdateRgn(
/*6827*/ typ typ typ typ typ HWND hWnd,
/*6828*/ typ typ typ typ typ HRGN hRgn,
/*6829*/ typ typ typ typ typ BOOL bErase);
/*6831*/ 
/*6832*/ int
/*6833*/ typ
/*6834*/ SetWindowRgn(
/*6835*/ typ typ typ typ typ HWND hWnd,
/*6836*/ typ typ typ typ typ typ typ HRGN hRgn,
/*6837*/ typ typ typ typ typ BOOL bRedraw);
/*6840*/ 
/*6841*/ int
/*6842*/ typ
/*6843*/ GetWindowRgn(
/*6844*/ typ typ typ typ typ HWND hWnd,
/*6845*/ typ typ typ typ typ HRGN hRgn);
/*6858*/ 
/*6859*/ int
/*6860*/ typ
/*6861*/ ExcludeUpdateRgn(
/*6862*/ typ typ typ typ typ HDC hDC,
/*6863*/ typ typ typ typ typ HWND hWnd);
/*6865*/ 
/*6866*/ BOOL
/*6867*/ typ
/*6868*/ InvalidateRect(
/*6869*/ typ typ typ typ typ typ typ HWND hWnd,
/*6870*/ typ typ typ typ typ typ typ const RECT*lpRect,
/*6871*/ typ typ typ typ typ BOOL bErase);
/*6873*/ 
/*6874*/ BOOL
/*6875*/ typ
/*6876*/ ValidateRect(
/*6877*/ typ typ typ typ typ typ typ HWND hWnd,
/*6878*/ typ typ typ typ typ typ typ const RECT*lpRect);
/*6880*/ 
/*6881*/ BOOL
/*6882*/ typ
/*6883*/ InvalidateRgn(
/*6884*/ typ typ typ typ typ HWND hWnd,
/*6885*/ typ typ typ typ typ typ typ HRGN hRgn,
/*6886*/ typ typ typ typ typ BOOL bErase);
/*6888*/ 
/*6889*/ BOOL
/*6890*/ typ
/*6891*/ ValidateRgn(
/*6892*/ typ typ typ typ typ HWND hWnd,
/*6893*/ typ typ typ typ typ typ typ HRGN hRgn);
/*6896*/ 
/*6897*/ BOOL
/*6898*/ typ
/*6899*/ RedrawWindow(
/*6900*/ typ typ typ typ typ typ typ HWND hWnd,
/*6901*/ typ typ typ typ typ typ typ const RECT*lprcUpdate,
/*6902*/ typ typ typ typ typ typ typ HRGN hrgnUpdate,
/*6903*/ typ typ typ typ typ UINT flags);
/*6930*/ 
/*6931*/ BOOL
/*6932*/ typ
/*6933*/ LockWindowUpdate(
/*6934*/ typ typ typ typ typ typ typ HWND hWndLock);
/*6936*/ 
/*6937*/ BOOL
/*6938*/ typ
/*6939*/ ScrollWindow(
/*6940*/ typ typ typ typ typ HWND hWnd,
/*6941*/ typ typ typ typ typ int XAmount,
/*6942*/ typ typ typ typ typ int YAmount,
/*6943*/ typ typ typ typ typ typ typ const RECT*lpRect,
/*6944*/ typ typ typ typ typ typ typ const RECT*lpClipRect);
/*6946*/ 
/*6947*/ BOOL
/*6948*/ typ
/*6949*/ ScrollDC(
/*6950*/ typ typ typ typ typ HDC hDC,
/*6951*/ typ typ typ typ typ int dx,
/*6952*/ typ typ typ typ typ int dy,
/*6953*/ typ typ typ typ typ typ typ const RECT*lprcScroll,
/*6954*/ typ typ typ typ typ typ typ const RECT*lprcClip,
/*6955*/ typ typ typ typ typ typ typ HRGN hrgnUpdate,
/*6956*/ typ typ typ typ typ typ typ LPRECT lprcUpdate);
/*6958*/ 
/*6959*/ int
/*6960*/ typ
/*6961*/ ScrollWindowEx(
/*6962*/ typ typ typ typ typ HWND hWnd,
/*6963*/ typ typ typ typ typ int dx,
/*6964*/ typ typ typ typ typ int dy,
/*6965*/ typ typ typ typ typ typ typ const RECT*prcScroll,
/*6966*/ typ typ typ typ typ typ typ const RECT*prcClip,
/*6967*/ typ typ typ typ typ typ typ HRGN hrgnUpdate,
/*6968*/ typ typ typ typ typ typ typ LPRECT prcUpdate,
/*6969*/ typ typ typ typ typ UINT flags);
/*6980*/ 
/*6981*/ int
/*6982*/ typ
/*6983*/ SetScrollPos(
/*6984*/ typ typ typ typ typ HWND hWnd,
/*6985*/ typ typ typ typ typ int nBar,
/*6986*/ typ typ typ typ typ int nPos,
/*6987*/ typ typ typ typ typ BOOL bRedraw);
/*6989*/ 
/*6990*/ int
/*6991*/ typ
/*6992*/ GetScrollPos(
/*6993*/ typ typ typ typ typ HWND hWnd,
/*6994*/ typ typ typ typ typ int nBar);
/*6996*/ 
/*6997*/ BOOL
/*6998*/ typ
/*6999*/ SetScrollRange(
/*7000*/ typ typ typ typ typ HWND hWnd,
/*7001*/ typ typ typ typ typ int nBar,
/*7002*/ typ typ typ typ typ int nMinPos,
/*7003*/ typ typ typ typ typ int nMaxPos,
/*7004*/ typ typ typ typ typ BOOL bRedraw);
/*7006*/ 
/*7007*/ BOOL
/*7008*/ typ
/*7009*/ GetScrollRange(
/*7010*/ typ typ typ typ typ HWND hWnd,
/*7011*/ typ typ typ typ typ int nBar,
/*7012*/ typ typ typ typ typ LPINT lpMinPos,
/*7013*/ typ typ typ typ typ LPINT lpMaxPos);
/*7015*/ 
/*7016*/ BOOL
/*7017*/ typ
/*7018*/ ShowScrollBar(
/*7019*/ typ typ typ typ typ HWND hWnd,
/*7020*/ typ typ typ typ typ int wBar,
/*7021*/ typ typ typ typ typ BOOL bShow);
/*7023*/ 
/*7024*/ BOOL
/*7025*/ typ
/*7026*/ EnableScrollBar(
/*7027*/ typ typ typ typ typ HWND hWnd,
/*7028*/ typ typ typ typ typ UINT wSBflags,
/*7029*/ typ typ typ typ typ UINT wArrows);
/*7050*/ 
/*7051*/ BOOL
/*7052*/ typ
/*7053*/ SetPropA(
/*7054*/ typ typ typ typ typ HWND hWnd,
/*7055*/ typ typ typ typ typ LPCSTR lpString,
/*7056*/ typ typ typ typ typ typ typ HANDLE hData);
/*7057*/ 
/*7058*/ BOOL
/*7059*/ typ
/*7060*/ SetPropW(
/*7061*/ typ typ typ typ typ HWND hWnd,
/*7062*/ typ typ typ typ typ LPCWSTR lpString,
/*7063*/ typ typ typ typ typ typ typ HANDLE hData);
/*7070*/ 
/*7071*/ HANDLE
/*7072*/ typ
/*7073*/ GetPropA(
/*7074*/ typ typ typ typ typ HWND hWnd,
/*7075*/ typ typ typ typ typ LPCSTR lpString);
/*7076*/ 
/*7077*/ HANDLE
/*7078*/ typ
/*7079*/ GetPropW(
/*7080*/ typ typ typ typ typ HWND hWnd,
/*7081*/ typ typ typ typ typ LPCWSTR lpString);
/*7088*/ 
/*7089*/ HANDLE
/*7090*/ typ
/*7091*/ RemovePropA(
/*7092*/ typ typ typ typ typ HWND hWnd,
/*7093*/ typ typ typ typ typ LPCSTR lpString);
/*7094*/ 
/*7095*/ HANDLE
/*7096*/ typ
/*7097*/ RemovePropW(
/*7098*/ typ typ typ typ typ HWND hWnd,
/*7099*/ typ typ typ typ typ LPCWSTR lpString);
/*7106*/ 
/*7107*/ int
/*7108*/ typ
/*7109*/ EnumPropsExA(
/*7110*/ typ typ typ typ typ HWND hWnd,
/*7111*/ typ typ typ typ typ PROPENUMPROCEXA lpEnumFunc,
/*7112*/ typ typ typ typ typ LPARAM lParam);
/*7113*/ 
/*7114*/ int
/*7115*/ typ
/*7116*/ EnumPropsExW(
/*7117*/ typ typ typ typ typ HWND hWnd,
/*7118*/ typ typ typ typ typ PROPENUMPROCEXW lpEnumFunc,
/*7119*/ typ typ typ typ typ LPARAM lParam);
/*7126*/ 
/*7127*/ int
/*7128*/ typ
/*7129*/ EnumPropsA(
/*7130*/ typ typ typ typ typ HWND hWnd,
/*7131*/ typ typ typ typ typ PROPENUMPROCA lpEnumFunc);
/*7132*/ 
/*7133*/ int
/*7134*/ typ
/*7135*/ EnumPropsW(
/*7136*/ typ typ typ typ typ HWND hWnd,
/*7137*/ typ typ typ typ typ PROPENUMPROCW lpEnumFunc);
/*7144*/ 
/*7145*/ BOOL
/*7146*/ typ
/*7147*/ SetWindowTextA(
/*7148*/ typ typ typ typ typ HWND hWnd,
/*7149*/ typ typ typ typ typ typ typ LPCSTR lpString);
/*7150*/ 
/*7151*/ BOOL
/*7152*/ typ
/*7153*/ SetWindowTextW(
/*7154*/ typ typ typ typ typ HWND hWnd,
/*7155*/ typ typ typ typ typ typ typ LPCWSTR lpString);
/*7162*/ 
/*7163*/ int
/*7164*/ typ
/*7165*/ GetWindowTextA(
/*7166*/ typ typ typ typ typ HWND hWnd,
/*7167*/ typ typ typ typ typ LPSTR lpString,
/*7168*/ typ typ typ typ typ int nMaxCount);
/*7169*/ 
/*7170*/ int
/*7171*/ typ
/*7172*/ GetWindowTextW(
/*7173*/ typ typ typ typ typ HWND hWnd,
/*7174*/ typ typ typ typ typ LPWSTR lpString,
/*7175*/ typ typ typ typ typ int nMaxCount);
/*7182*/ 
/*7183*/ int
/*7184*/ typ
/*7185*/ GetWindowTextLengthA(
/*7186*/ typ typ typ typ typ HWND hWnd);
/*7187*/ 
/*7188*/ int
/*7189*/ typ
/*7190*/ GetWindowTextLengthW(
/*7191*/ typ typ typ typ typ HWND hWnd);
/*7198*/ 
/*7199*/ BOOL
/*7200*/ typ
/*7201*/ GetClientRect(
/*7202*/ typ typ typ typ typ HWND hWnd,
/*7203*/ typ typ typ typ typ LPRECT lpRect);
/*7205*/ 
/*7206*/ BOOL
/*7207*/ typ
/*7208*/ GetWindowRect(
/*7209*/ typ typ typ typ typ HWND hWnd,
/*7210*/ typ typ typ typ typ LPRECT lpRect);
/*7212*/ 
/*7213*/ BOOL
/*7214*/ typ
/*7215*/ AdjustWindowRect(
/*7216*/ typ typ typ typ typ LPRECT lpRect,
/*7217*/ typ typ typ typ typ DWORD dwStyle,
/*7218*/ typ typ typ typ typ BOOL bMenu);
/*7220*/ 
/*7221*/ BOOL
/*7222*/ typ
/*7223*/ AdjustWindowRectEx(
/*7224*/ typ typ typ typ typ LPRECT lpRect,
/*7225*/ typ typ typ typ typ DWORD dwStyle,
/*7226*/ typ typ typ typ typ BOOL bMenu,
/*7227*/ typ typ typ typ typ DWORD dwExStyle);
/*7233*/ typedef struct tagHELPINFO
/*7234*/ {
/*7235*/ UINT cbSize;
/*7236*/ int iContextType;
/*7237*/ int iCtrlId;
/*7238*/ HANDLE hItemHandle;
/*7239*/ DWORD_PTR dwContextId;
/*7240*/ POINT MousePos;
/*7241*/ }HELPINFO,typ*LPHELPINFO;
/*7243*/ 
/*7244*/ BOOL
/*7245*/ typ
/*7246*/ SetWindowContextHelpId(
/*7247*/ typ typ typ typ typ HWND,
/*7248*/ typ typ typ typ typ DWORD);
/*7250*/ 
/*7251*/ DWORD
/*7252*/ typ
/*7253*/ GetWindowContextHelpId(
/*7254*/ typ typ typ typ typ HWND);
/*7256*/ 
/*7257*/ BOOL
/*7258*/ typ
/*7259*/ SetMenuContextHelpId(
/*7260*/ typ typ typ typ typ HMENU,
/*7261*/ typ typ typ typ typ DWORD);
/*7263*/ 
/*7264*/ DWORD
/*7265*/ typ
/*7266*/ GetMenuContextHelpId(
/*7267*/ typ typ typ typ typ HMENU);
/*7343*/ 
/*7344*/ int
/*7345*/ typ
/*7346*/ MessageBoxA(
/*7347*/ typ typ typ typ typ typ typ HWND hWnd,
/*7348*/ typ typ typ typ typ typ typ LPCSTR lpText,
/*7349*/ typ typ typ typ typ typ typ LPCSTR lpCaption,
/*7350*/ typ typ typ typ typ UINT uType);
/*7351*/ 
/*7352*/ int
/*7353*/ typ
/*7354*/ MessageBoxW(
/*7355*/ typ typ typ typ typ typ typ HWND hWnd,
/*7356*/ typ typ typ typ typ typ typ LPCWSTR lpText,
/*7357*/ typ typ typ typ typ typ typ LPCWSTR lpCaption,
/*7358*/ typ typ typ typ typ UINT uType);
/*7389*/ 
/*7390*/ int
/*7391*/ typ
/*7392*/ MessageBoxExA(
/*7393*/ typ typ typ typ typ typ typ HWND hWnd,
/*7394*/ typ typ typ typ typ typ typ LPCSTR lpText,
/*7395*/ typ typ typ typ typ typ typ LPCSTR lpCaption,
/*7396*/ typ typ typ typ typ UINT uType,
/*7397*/ typ typ typ typ typ WORD wLanguageId);
/*7398*/ 
/*7399*/ int
/*7400*/ typ
/*7401*/ MessageBoxExW(
/*7402*/ typ typ typ typ typ typ typ HWND hWnd,
/*7403*/ typ typ typ typ typ typ typ LPCWSTR lpText,
/*7404*/ typ typ typ typ typ typ typ LPCWSTR lpCaption,
/*7405*/ typ typ typ typ typ UINT uType,
/*7406*/ typ typ typ typ typ WORD wLanguageId);
/*7415*/ typedef void(typ*MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
/*7417*/ typedef struct tagMSGBOXPARAMSA
/*7418*/ {
/*7419*/ UINT cbSize;
/*7420*/ HWND hwndOwner;
/*7421*/ HINSTANCE hInstance;
/*7422*/ LPCSTR lpszText;
/*7423*/ LPCSTR lpszCaption;
/*7424*/ DWORD dwStyle;
/*7425*/ LPCSTR lpszIcon;
/*7426*/ DWORD_PTR dwContextHelpId;
/*7427*/ MSGBOXCALLBACK lpfnMsgBoxCallback;
/*7428*/ DWORD dwLanguageId;
/*7429*/ }MSGBOXPARAMSA,*PMSGBOXPARAMSA,*LPMSGBOXPARAMSA;
/*7430*/ typedef struct tagMSGBOXPARAMSW
/*7431*/ {
/*7432*/ UINT cbSize;
/*7433*/ HWND hwndOwner;
/*7434*/ HINSTANCE hInstance;
/*7435*/ LPCWSTR lpszText;
/*7436*/ LPCWSTR lpszCaption;
/*7437*/ DWORD dwStyle;
/*7438*/ LPCWSTR lpszIcon;
/*7439*/ DWORD_PTR dwContextHelpId;
/*7440*/ MSGBOXCALLBACK lpfnMsgBoxCallback;
/*7441*/ DWORD dwLanguageId;
/*7442*/ }MSGBOXPARAMSW,*PMSGBOXPARAMSW,*LPMSGBOXPARAMSW;
/*7448*/ typedef MSGBOXPARAMSA MSGBOXPARAMS;
/*7449*/ typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
/*7450*/ typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
/*7453*/ 
/*7454*/ int
/*7455*/ typ
/*7456*/ MessageBoxIndirectA(
/*7457*/ typ typ typ typ typ const MSGBOXPARAMSA*lpmbp);
/*7458*/ 
/*7459*/ int
/*7460*/ typ
/*7461*/ MessageBoxIndirectW(
/*7462*/ typ typ typ typ typ const MSGBOXPARAMSW*lpmbp);
/*7471*/ 
/*7472*/ BOOL
/*7473*/ typ
/*7474*/ MessageBeep(
/*7475*/ typ typ typ typ typ UINT uType);
/*7479*/ 
/*7480*/ int
/*7481*/ typ
/*7482*/ ShowCursor(
/*7483*/ typ typ typ typ typ BOOL bShow);
/*7485*/ 
/*7486*/ BOOL
/*7487*/ typ
/*7488*/ SetCursorPos(
/*7489*/ typ typ typ typ typ int X,
/*7490*/ typ typ typ typ typ int Y);
/*7493*/ 
/*7494*/ BOOL
/*7495*/ typ
/*7496*/ SetPhysicalCursorPos(
/*7497*/ typ typ typ typ typ int X,
/*7498*/ typ typ typ typ typ int Y);
/*7500*/ 
/*7501*/ HCURSOR
/*7502*/ typ
/*7503*/ SetCursor(
/*7504*/ typ typ typ typ typ typ typ HCURSOR hCursor);
/*7506*/ 
/*7507*/ BOOL
/*7508*/ typ
/*7509*/ GetCursorPos(
/*7510*/ typ typ typ typ typ LPPOINT lpPoint);
/*7512*/ 
/*7513*/ BOOL
/*7514*/ typ
/*7515*/ GetPhysicalCursorPos(
/*7516*/ typ typ typ typ typ LPPOINT lpPoint);
/*7518*/ 
/*7519*/ BOOL
/*7520*/ typ
/*7521*/ ClipCursor(
/*7522*/ typ typ typ typ typ typ typ const RECT*lpRect);
/*7524*/ 
/*7525*/ BOOL
/*7526*/ typ
/*7527*/ GetClipCursor(
/*7528*/ typ typ typ typ typ LPRECT lpRect);
/*7530*/ 
/*7531*/ HCURSOR
/*7532*/ typ
/*7533*/ GetCursor(
/*7534*/ void);
/*7536*/ 
/*7537*/ BOOL
/*7538*/ typ
/*7539*/ CreateCaret(
/*7540*/ typ typ typ typ typ HWND hWnd,
/*7541*/ typ typ typ typ typ typ typ HBITMAP hBitmap,
/*7542*/ typ typ typ typ typ int nWidth,
/*7543*/ typ typ typ typ typ int nHeight);
/*7545*/ 
/*7546*/ UINT
/*7547*/ typ
/*7548*/ GetCaretBlinkTime(
/*7549*/ void);
/*7551*/ 
/*7552*/ BOOL
/*7553*/ typ
/*7554*/ SetCaretBlinkTime(
/*7555*/ typ typ typ typ typ UINT uMSeconds);
/*7557*/ 
/*7558*/ BOOL
/*7559*/ typ
/*7560*/ DestroyCaret(
/*7561*/ void);
/*7563*/ 
/*7564*/ BOOL
/*7565*/ typ
/*7566*/ HideCaret(
/*7567*/ typ typ typ typ typ typ typ HWND hWnd);
/*7569*/ 
/*7570*/ BOOL
/*7571*/ typ
/*7572*/ ShowCaret(
/*7573*/ typ typ typ typ typ typ typ HWND hWnd);
/*7575*/ 
/*7576*/ BOOL
/*7577*/ typ
/*7578*/ SetCaretPos(
/*7579*/ typ typ typ typ typ int X,
/*7580*/ typ typ typ typ typ int Y);
/*7582*/ 
/*7583*/ BOOL
/*7584*/ typ
/*7585*/ GetCaretPos(
/*7586*/ typ typ typ typ typ LPPOINT lpPoint);
/*7588*/ 
/*7589*/ BOOL
/*7590*/ typ
/*7591*/ ClientToScreen(
/*7592*/ typ typ typ typ typ HWND hWnd,
/*7593*/ typ typ typ typ typ LPPOINT lpPoint);
/*7595*/ 
/*7596*/ BOOL
/*7597*/ typ
/*7598*/ ScreenToClient(
/*7599*/ typ typ typ typ typ HWND hWnd,
/*7600*/ typ typ typ typ typ LPPOINT lpPoint);
/*7603*/ 
/*7604*/ BOOL
/*7605*/ typ
/*7606*/ LogicalToPhysicalPoint(
/*7607*/ typ typ typ typ typ HWND hWnd,
/*7608*/ typ typ typ typ typ LPPOINT lpPoint);
/*7610*/ 
/*7611*/ BOOL
/*7612*/ typ
/*7613*/ PhysicalToLogicalPoint(
/*7614*/ typ typ typ typ typ HWND hWnd,
/*7615*/ typ typ typ typ typ LPPOINT lpPoint);
/*7619*/ 
/*7620*/ int
/*7621*/ typ
/*7622*/ MapWindowPoints(
/*7623*/ typ typ typ typ typ typ typ HWND hWndFrom,
/*7624*/ typ typ typ typ typ typ typ HWND hWndTo,
/*7625*/ typ typ typ typ typ typ typ LPPOINT lpPoints,
/*7626*/ typ typ typ typ typ UINT cPoints);
/*7628*/ 
/*7629*/ HWND
/*7630*/ typ
/*7631*/ WindowFromPoint(
/*7632*/ typ typ typ typ typ POINT Point);
/*7635*/ 
/*7636*/ HWND
/*7637*/ typ
/*7638*/ WindowFromPhysicalPoint(
/*7639*/ typ typ typ typ typ POINT Point);
/*7642*/ 
/*7643*/ HWND
/*7644*/ typ
/*7645*/ ChildWindowFromPoint(
/*7646*/ typ typ typ typ typ HWND hWndParent,
/*7647*/ typ typ typ typ typ POINT Point);
/*7655*/ 
/*7656*/ HWND
/*7657*/ typ
/*7658*/ ChildWindowFromPointEx(
/*7659*/ typ typ typ typ typ HWND hwnd,
/*7660*/ typ typ typ typ typ POINT pt,
/*7661*/ typ typ typ typ typ UINT flags);
/*7727*/ 
/*7728*/ DWORD
/*7729*/ typ
/*7730*/ GetSysColor(
/*7731*/ typ typ typ typ typ int nIndex);
/*7734*/ 
/*7735*/ HBRUSH
/*7736*/ typ
/*7737*/ GetSysColorBrush(
/*7738*/ typ typ typ typ typ int nIndex);
/*7743*/ 
/*7744*/ BOOL
/*7745*/ typ
/*7746*/ SetSysColors(
/*7747*/ typ typ typ typ typ int cElements,
/*7748*/ typ typ typ typ typ typ typ const INT*lpaElements,
/*7749*/ typ typ typ typ typ typ typ const COLORREF*lpaRgbValues);
/*7753*/ 
/*7754*/ BOOL
/*7755*/ typ
/*7756*/ DrawFocusRect(
/*7757*/ typ typ typ typ typ HDC hDC,
/*7758*/ typ typ typ typ typ const RECT*lprc);
/*7760*/ 
/*7761*/ int
/*7762*/ typ
/*7763*/ FillRect(
/*7764*/ typ typ typ typ typ HDC hDC,
/*7765*/ typ typ typ typ typ const RECT*lprc,
/*7766*/ typ typ typ typ typ HBRUSH hbr);
/*7768*/ 
/*7769*/ int
/*7770*/ typ
/*7771*/ FrameRect(
/*7772*/ typ typ typ typ typ HDC hDC,
/*7773*/ typ typ typ typ typ const RECT*lprc,
/*7774*/ typ typ typ typ typ HBRUSH hbr);
/*7776*/ 
/*7777*/ BOOL
/*7778*/ typ
/*7779*/ InvertRect(
/*7780*/ typ typ typ typ typ HDC hDC,
/*7781*/ typ typ typ typ typ const RECT*lprc);
/*7783*/ 
/*7784*/ BOOL
/*7785*/ typ
/*7786*/ SetRect(
/*7787*/ typ typ typ typ typ LPRECT lprc,
/*7788*/ typ typ typ typ typ int xLeft,
/*7789*/ typ typ typ typ typ int yTop,
/*7790*/ typ typ typ typ typ int xRight,
/*7791*/ typ typ typ typ typ int yBottom);
/*7793*/ 
/*7794*/ BOOL
/*7795*/ typ
/*7796*/ SetRectEmpty(
/*7797*/ typ typ typ typ typ LPRECT lprc);
/*7799*/ 
/*7800*/ BOOL
/*7801*/ typ
/*7802*/ CopyRect(
/*7803*/ typ typ typ typ typ LPRECT lprcDst,
/*7804*/ typ typ typ typ typ const RECT*lprcSrc);
/*7806*/ 
/*7807*/ BOOL
/*7808*/ typ
/*7809*/ InflateRect(
/*7810*/ typ typ typ typ typ LPRECT lprc,
/*7811*/ typ typ typ typ typ int dx,
/*7812*/ typ typ typ typ typ int dy);
/*7814*/ 
/*7815*/ BOOL
/*7816*/ typ
/*7817*/ IntersectRect(
/*7818*/ typ typ typ typ typ LPRECT lprcDst,
/*7819*/ typ typ typ typ typ const RECT*lprcSrc1,
/*7820*/ typ typ typ typ typ const RECT*lprcSrc2);
/*7822*/ 
/*7823*/ BOOL
/*7824*/ typ
/*7825*/ UnionRect(
/*7826*/ typ typ typ typ typ LPRECT lprcDst,
/*7827*/ typ typ typ typ typ const RECT*lprcSrc1,
/*7828*/ typ typ typ typ typ const RECT*lprcSrc2);
/*7830*/ 
/*7831*/ BOOL
/*7832*/ typ
/*7833*/ SubtractRect(
/*7834*/ typ typ typ typ typ LPRECT lprcDst,
/*7835*/ typ typ typ typ typ const RECT*lprcSrc1,
/*7836*/ typ typ typ typ typ const RECT*lprcSrc2);
/*7838*/ 
/*7839*/ BOOL
/*7840*/ typ
/*7841*/ OffsetRect(
/*7842*/ typ typ typ typ typ LPRECT lprc,
/*7843*/ typ typ typ typ typ int dx,
/*7844*/ typ typ typ typ typ int dy);
/*7846*/ 
/*7847*/ BOOL
/*7848*/ typ
/*7849*/ IsRectEmpty(
/*7850*/ typ typ typ typ typ const RECT*lprc);
/*7852*/ 
/*7853*/ BOOL
/*7854*/ typ
/*7855*/ EqualRect(
/*7856*/ typ typ typ typ typ const RECT*lprc1,
/*7857*/ typ typ typ typ typ const RECT*lprc2);
/*7859*/ 
/*7860*/ BOOL
/*7861*/ typ
/*7862*/ PtInRect(
/*7863*/ typ typ typ typ typ const RECT*lprc,
/*7864*/ typ typ typ typ typ POINT pt);
/*7868*/ 
/*7869*/ WORD
/*7870*/ typ
/*7871*/ GetWindowWord(
/*7872*/ typ typ typ typ typ HWND hWnd,
/*7873*/ typ typ typ typ typ int nIndex);
/*7875*/ 
/*7876*/ WORD
/*7877*/ typ
/*7878*/ SetWindowWord(
/*7879*/ typ typ typ typ typ HWND hWnd,
/*7880*/ typ typ typ typ typ int nIndex,
/*7881*/ typ typ typ typ typ WORD wNewWord);
/*7883*/ 
/*7884*/ LONG
/*7885*/ typ
/*7886*/ GetWindowLongA(
/*7887*/ typ typ typ typ typ HWND hWnd,
/*7888*/ typ typ typ typ typ int nIndex);
/*7889*/ 
/*7890*/ LONG
/*7891*/ typ
/*7892*/ GetWindowLongW(
/*7893*/ typ typ typ typ typ HWND hWnd,
/*7894*/ typ typ typ typ typ int nIndex);
/*7901*/ 
/*7902*/ LONG
/*7903*/ typ
/*7904*/ SetWindowLongA(
/*7905*/ typ typ typ typ typ HWND hWnd,
/*7906*/ typ typ typ typ typ int nIndex,
/*7907*/ typ typ typ typ typ LONG dwNewLong);
/*7908*/ 
/*7909*/ LONG
/*7910*/ typ
/*7911*/ SetWindowLongW(
/*7912*/ typ typ typ typ typ HWND hWnd,
/*7913*/ typ typ typ typ typ int nIndex,
/*7914*/ typ typ typ typ typ LONG dwNewLong);
/*7981*/ 
/*7982*/ WORD
/*7983*/ typ
/*7984*/ GetClassWord(
/*7985*/ typ typ typ typ typ HWND hWnd,
/*7986*/ typ typ typ typ typ int nIndex);
/*7988*/ 
/*7989*/ WORD
/*7990*/ typ
/*7991*/ SetClassWord(
/*7992*/ typ typ typ typ typ HWND hWnd,
/*7993*/ typ typ typ typ typ int nIndex,
/*7994*/ typ typ typ typ typ WORD wNewWord);
/*7996*/ 
/*7997*/ DWORD
/*7998*/ typ
/*7999*/ GetClassLongA(
/*8000*/ typ typ typ typ typ HWND hWnd,
/*8001*/ typ typ typ typ typ int nIndex);
/*8002*/ 
/*8003*/ DWORD
/*8004*/ typ
/*8005*/ GetClassLongW(
/*8006*/ typ typ typ typ typ HWND hWnd,
/*8007*/ typ typ typ typ typ int nIndex);
/*8014*/ 
/*8015*/ DWORD
/*8016*/ typ
/*8017*/ SetClassLongA(
/*8018*/ typ typ typ typ typ HWND hWnd,
/*8019*/ typ typ typ typ typ int nIndex,
/*8020*/ typ typ typ typ typ LONG dwNewLong);
/*8021*/ 
/*8022*/ DWORD
/*8023*/ typ
/*8024*/ SetClassLongW(
/*8025*/ typ typ typ typ typ HWND hWnd,
/*8026*/ typ typ typ typ typ int nIndex,
/*8027*/ typ typ typ typ typ LONG dwNewLong);
/*8097*/ 
/*8098*/ BOOL
/*8099*/ typ
/*8100*/ GetProcessDefaultLayout(
/*8101*/ typ typ typ typ typ DWORD*pdwDefaultLayout);
/*8103*/ 
/*8104*/ BOOL
/*8105*/ typ
/*8106*/ SetProcessDefaultLayout(
/*8107*/ typ typ typ typ typ DWORD dwDefaultLayout);
/*8110*/ 
/*8111*/ HWND
/*8112*/ typ
/*8113*/ GetDesktopWindow(
/*8114*/ void);
/*8117*/ 
/*8118*/ HWND
/*8119*/ typ
/*8120*/ GetParent(
/*8121*/ typ typ typ typ typ HWND hWnd);
/*8123*/ 
/*8124*/ HWND
/*8125*/ typ
/*8126*/ SetParent(
/*8127*/ typ typ typ typ typ HWND hWndChild,
/*8128*/ typ typ typ typ typ typ typ HWND hWndNewParent);
/*8130*/ 
/*8131*/ BOOL
/*8132*/ typ
/*8133*/ EnumChildWindows(
/*8134*/ typ typ typ typ typ typ typ HWND hWndParent,
/*8135*/ typ typ typ typ typ WNDENUMPROC lpEnumFunc,
/*8136*/ typ typ typ typ typ LPARAM lParam);
/*8138*/ 
/*8139*/ HWND
/*8140*/ typ
/*8141*/ FindWindowA(
/*8142*/ typ typ typ typ typ typ typ LPCSTR lpClassName,
/*8143*/ typ typ typ typ typ typ typ LPCSTR lpWindowName);
/*8144*/ 
/*8145*/ HWND
/*8146*/ typ
/*8147*/ FindWindowW(
/*8148*/ typ typ typ typ typ typ typ LPCWSTR lpClassName,
/*8149*/ typ typ typ typ typ typ typ LPCWSTR lpWindowName);
/*8157*/ 
/*8158*/ HWND
/*8159*/ typ
/*8160*/ FindWindowExA(
/*8161*/ typ typ typ typ typ typ typ HWND hWndParent,
/*8162*/ typ typ typ typ typ typ typ HWND hWndChildAfter,
/*8163*/ typ typ typ typ typ typ typ LPCSTR lpszClass,
/*8164*/ typ typ typ typ typ typ typ LPCSTR lpszWindow);
/*8165*/ 
/*8166*/ HWND
/*8167*/ typ
/*8168*/ FindWindowExW(
/*8169*/ typ typ typ typ typ typ typ HWND hWndParent,
/*8170*/ typ typ typ typ typ typ typ HWND hWndChildAfter,
/*8171*/ typ typ typ typ typ typ typ LPCWSTR lpszClass,
/*8172*/ typ typ typ typ typ typ typ LPCWSTR lpszWindow);
/*8179*/ 
/*8180*/ HWND
/*8181*/ typ
/*8182*/ GetShellWindow(
/*8183*/ void);
/*8188*/ 
/*8189*/ BOOL
/*8190*/ typ
/*8191*/ RegisterShellHookWindow(
/*8192*/ typ typ typ typ typ HWND hwnd);
/*8194*/ 
/*8195*/ BOOL
/*8196*/ typ
/*8197*/ DeregisterShellHookWindow(
/*8198*/ typ typ typ typ typ HWND hwnd);
/*8200*/ 
/*8201*/ BOOL
/*8202*/ typ
/*8203*/ EnumWindows(
/*8204*/ typ typ typ typ typ WNDENUMPROC lpEnumFunc,
/*8205*/ typ typ typ typ typ LPARAM lParam);
/*8207*/ 
/*8208*/ BOOL
/*8209*/ typ
/*8210*/ EnumThreadWindows(
/*8211*/ typ typ typ typ typ DWORD dwThreadId,
/*8212*/ typ typ typ typ typ WNDENUMPROC lpfn,
/*8213*/ typ typ typ typ typ LPARAM lParam);
/*8217*/ 
/*8218*/ int
/*8219*/ typ
/*8220*/ GetClassNameA(
/*8221*/ typ typ typ typ typ HWND hWnd,
/*8222*/ typ typ typ typ typ typ typ LPSTR lpClassName,
/*8223*/ typ typ typ typ typ int nMaxCount
/*8224*/ );
/*8225*/ 
/*8226*/ int
/*8227*/ typ
/*8228*/ GetClassNameW(
/*8229*/ typ typ typ typ typ HWND hWnd,
/*8230*/ typ typ typ typ typ typ typ LPWSTR lpClassName,
/*8231*/ typ typ typ typ typ int nMaxCount
/*8232*/ );
/*8263*/ 
/*8264*/ HWND
/*8265*/ typ
/*8266*/ GetTopWindow(
/*8267*/ typ typ typ typ typ typ typ HWND hWnd);
/*8273*/ 
/*8274*/ DWORD
/*8275*/ typ
/*8276*/ GetWindowThreadProcessId(
/*8277*/ typ typ typ typ typ HWND hWnd,
/*8278*/ typ typ typ typ typ typ typ LPDWORD lpdwProcessId);
/*8293*/ 
/*8294*/ HWND
/*8295*/ typ
/*8296*/ GetLastActivePopup(
/*8297*/ typ typ typ typ typ HWND hWnd);
/*8315*/ 
/*8316*/ HWND
/*8317*/ typ
/*8318*/ GetWindow(
/*8319*/ typ typ typ typ typ HWND hWnd,
/*8320*/ typ typ typ typ typ UINT uCmd);
/*8327*/ 
/*8328*/ HHOOK
/*8329*/ typ
/*8330*/ SetWindowsHookA(
/*8331*/ typ typ typ typ typ int nFilterType,
/*8332*/ typ typ typ typ typ HOOKPROC pfnFilterProc);
/*8333*/ 
/*8334*/ HHOOK
/*8335*/ typ
/*8336*/ SetWindowsHookW(
/*8337*/ typ typ typ typ typ int nFilterType,
/*8338*/ typ typ typ typ typ HOOKPROC pfnFilterProc);
/*8367*/ 
/*8368*/ BOOL
/*8369*/ typ
/*8370*/ UnhookWindowsHook(
/*8371*/ typ typ typ typ typ int nCode,
/*8372*/ typ typ typ typ typ HOOKPROC pfnFilterProc);
/*8374*/ 
/*8375*/ HHOOK
/*8376*/ typ
/*8377*/ SetWindowsHookExA(
/*8378*/ typ typ typ typ typ int idHook,
/*8379*/ typ typ typ typ typ HOOKPROC lpfn,
/*8380*/ typ typ typ typ typ typ typ HINSTANCE hmod,
/*8381*/ typ typ typ typ typ DWORD dwThreadId);
/*8382*/ 
/*8383*/ HHOOK
/*8384*/ typ
/*8385*/ SetWindowsHookExW(
/*8386*/ typ typ typ typ typ int idHook,
/*8387*/ typ typ typ typ typ HOOKPROC lpfn,
/*8388*/ typ typ typ typ typ typ typ HINSTANCE hmod,
/*8389*/ typ typ typ typ typ DWORD dwThreadId);
/*8396*/ 
/*8397*/ BOOL
/*8398*/ typ
/*8399*/ UnhookWindowsHookEx(
/*8400*/ typ typ typ typ typ HHOOK hhk);
/*8402*/ 
/*8403*/ LRESULT
/*8404*/ typ
/*8405*/ CallNextHookEx(
/*8406*/ typ typ typ typ typ typ typ HHOOK hhk,
/*8407*/ typ typ typ typ typ int nCode,
/*8408*/ typ typ typ typ typ WPARAM wParam,
/*8409*/ typ typ typ typ typ LPARAM lParam);
/*8500*/ 
/*8501*/ BOOL
/*8502*/ typ
/*8503*/ CheckMenuRadioItem(
/*8504*/ typ typ typ typ typ HMENU hmenu,
/*8505*/ typ typ typ typ typ UINT first,
/*8506*/ typ typ typ typ typ UINT last,
/*8507*/ typ typ typ typ typ UINT check,
/*8508*/ typ typ typ typ typ UINT flags);
/*8514*/ typedef struct{
/*8515*/ WORD versionNumber;
/*8516*/ WORD offset;
/*8517*/ }MENUITEMTEMPLATEHEADER,*PMENUITEMTEMPLATEHEADER;
/*8519*/ typedef struct{
/*8520*/ WORD mtOption;
/*8521*/ WORD mtID;
/*8522*/ WCHAR mtString[1];
/*8523*/ }MENUITEMTEMPLATE,*PMENUITEMTEMPLATE;
/*8572*/ 
/*8573*/ HBITMAP
/*8574*/ typ
/*8575*/ LoadBitmapA(
/*8576*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*8577*/ typ typ typ typ typ LPCSTR lpBitmapName);
/*8578*/ 
/*8579*/ HBITMAP
/*8580*/ typ
/*8581*/ LoadBitmapW(
/*8582*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*8583*/ typ typ typ typ typ LPCWSTR lpBitmapName);
/*8590*/ 
/*8591*/ HCURSOR
/*8592*/ typ
/*8593*/ LoadCursorA(
/*8594*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*8595*/ typ typ typ typ typ LPCSTR lpCursorName);
/*8596*/ 
/*8597*/ HCURSOR
/*8598*/ typ
/*8599*/ LoadCursorW(
/*8600*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*8601*/ typ typ typ typ typ LPCWSTR lpCursorName);
/*8608*/ 
/*8609*/ HCURSOR
/*8610*/ typ
/*8611*/ LoadCursorFromFileA(
/*8612*/ typ typ typ typ typ LPCSTR lpFileName);
/*8613*/ 
/*8614*/ HCURSOR
/*8615*/ typ
/*8616*/ LoadCursorFromFileW(
/*8617*/ typ typ typ typ typ LPCWSTR lpFileName);
/*8624*/ 
/*8625*/ HCURSOR
/*8626*/ typ
/*8627*/ CreateCursor(
/*8628*/ typ typ typ typ typ typ typ HINSTANCE hInst,
/*8629*/ typ typ typ typ typ int xHotSpot,
/*8630*/ typ typ typ typ typ int yHotSpot,
/*8631*/ typ typ typ typ typ int nWidth,
/*8632*/ typ typ typ typ typ int nHeight,
/*8633*/ typ typ typ typ typ const void*pvANDPlane,
/*8634*/ typ typ typ typ typ const void*pvXORPlane);
/*8636*/ 
/*8637*/ BOOL
/*8638*/ typ
/*8639*/ DestroyCursor(
/*8640*/ typ typ typ typ typ HCURSOR hCursor);
/*8676*/ 
/*8677*/ BOOL
/*8678*/ typ
/*8679*/ SetSystemCursor(
/*8680*/ typ typ typ typ typ HCURSOR hcur,
/*8681*/ typ typ typ typ typ DWORD id);
/*8683*/ typedef struct _ICONINFO{
/*8684*/ BOOL fIcon;
/*8685*/ DWORD xHotspot;
/*8686*/ DWORD yHotspot;
/*8687*/ HBITMAP hbmMask;
/*8688*/ HBITMAP hbmColor;
/*8689*/ }ICONINFO;
/*8690*/ typedef ICONINFO*PICONINFO;
/*8692*/ 
/*8693*/ HICON
/*8694*/ typ
/*8695*/ LoadIconA(
/*8696*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*8697*/ typ typ typ typ typ LPCSTR lpIconName);
/*8698*/ 
/*8699*/ HICON
/*8700*/ typ
/*8701*/ LoadIconW(
/*8702*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*8703*/ typ typ typ typ typ LPCWSTR lpIconName);
/*8711*/ 
/*8712*/ UINT
/*8713*/ typ
/*8714*/ PrivateExtractIconsA(
/*8715*/ typ typ typ typ typ LPCSTR szFileName,
/*8716*/ typ typ typ typ typ int nIconIndex,
/*8717*/ typ typ typ typ typ int cxIcon,
/*8718*/ typ typ typ typ typ int cyIcon,
/*8719*/ typ typ typ typ typ typ typ typ typ HICON*phicon,
/*8720*/ typ typ typ typ typ typ typ typ typ UINT*piconid,
/*8721*/ typ typ typ typ typ UINT nIcons,
/*8722*/ typ typ typ typ typ UINT flags);
/*8723*/ 
/*8724*/ UINT
/*8725*/ typ
/*8726*/ PrivateExtractIconsW(
/*8727*/ typ typ typ typ typ LPCWSTR szFileName,
/*8728*/ typ typ typ typ typ int nIconIndex,
/*8729*/ typ typ typ typ typ int cxIcon,
/*8730*/ typ typ typ typ typ int cyIcon,
/*8731*/ typ typ typ typ typ typ typ typ typ HICON*phicon,
/*8732*/ typ typ typ typ typ typ typ typ typ UINT*piconid,
/*8733*/ typ typ typ typ typ UINT nIcons,
/*8734*/ typ typ typ typ typ UINT flags);
/*8741*/ 
/*8742*/ HICON
/*8743*/ typ
/*8744*/ CreateIcon(
/*8745*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*8746*/ typ typ typ typ typ int nWidth,
/*8747*/ typ typ typ typ typ int nHeight,
/*8748*/ typ typ typ typ typ BYTE cPlanes,
/*8749*/ typ typ typ typ typ BYTE cBitsPixel,
/*8750*/ typ typ typ typ typ const BYTE*lpbANDbits,
/*8751*/ typ typ typ typ typ const BYTE*lpbXORbits);
/*8753*/ 
/*8754*/ BOOL
/*8755*/ typ
/*8756*/ DestroyIcon(
/*8757*/ typ typ typ typ typ HICON hIcon);
/*8759*/ 
/*8760*/ int
/*8761*/ typ
/*8762*/ LookupIconIdFromDirectory(
/*8763*/ typ typ typ typ typ PBYTE presbits,
/*8764*/ typ typ typ typ typ BOOL fIcon);
/*8767*/ 
/*8768*/ int
/*8769*/ typ
/*8770*/ LookupIconIdFromDirectoryEx(
/*8771*/ typ typ typ typ typ PBYTE presbits,
/*8772*/ typ typ typ typ typ BOOL fIcon,
/*8773*/ typ typ typ typ typ int cxDesired,
/*8774*/ typ typ typ typ typ int cyDesired,
/*8775*/ typ typ typ typ typ UINT Flags);
/*8778*/ 
/*8779*/ HICON
/*8780*/ typ
/*8781*/ CreateIconFromResource(
/*8782*/ typ typ typ typ typ PBYTE presbits,
/*8783*/ typ typ typ typ typ DWORD dwResSize,
/*8784*/ typ typ typ typ typ BOOL fIcon,
/*8785*/ typ typ typ typ typ DWORD dwVer);
/*8788*/ 
/*8789*/ HICON
/*8790*/ typ
/*8791*/ CreateIconFromResourceEx(
/*8792*/ typ typ typ typ typ PBYTE presbits,
/*8793*/ typ typ typ typ typ DWORD dwResSize,
/*8794*/ typ typ typ typ typ BOOL fIcon,
/*8795*/ typ typ typ typ typ DWORD dwVer,
/*8796*/ typ typ typ typ typ int cxDesired,
/*8797*/ typ typ typ typ typ int cyDesired,
/*8798*/ typ typ typ typ typ UINT Flags);
/*8801*/ typedef struct tagCURSORSHAPE
/*8802*/ {
/*8803*/ int xHotSpot;
/*8804*/ int yHotSpot;
/*8805*/ int cx;
/*8806*/ int cy;
/*8807*/ int cbWidth;
/*8808*/ BYTE Planes;
/*8809*/ BYTE BitsPixel;
/*8810*/ }CURSORSHAPE,typ*LPCURSORSHAPE;
/*8833*/ 
/*8834*/ HANDLE
/*8835*/ typ
/*8836*/ LoadImageA(
/*8837*/ typ typ typ typ typ typ typ HINSTANCE hInst,
/*8838*/ typ typ typ typ typ LPCSTR name,
/*8839*/ typ typ typ typ typ UINT type,
/*8840*/ typ typ typ typ typ int cx,
/*8841*/ typ typ typ typ typ int cy,
/*8842*/ typ typ typ typ typ UINT fuLoad);
/*8843*/ 
/*8844*/ HANDLE
/*8845*/ typ
/*8846*/ LoadImageW(
/*8847*/ typ typ typ typ typ typ typ HINSTANCE hInst,
/*8848*/ typ typ typ typ typ LPCWSTR name,
/*8849*/ typ typ typ typ typ UINT type,
/*8850*/ typ typ typ typ typ int cx,
/*8851*/ typ typ typ typ typ int cy,
/*8852*/ typ typ typ typ typ UINT fuLoad);
/*8859*/ 
/*8860*/ HANDLE
/*8861*/ typ
/*8862*/ CopyImage(
/*8863*/ typ typ typ typ typ HANDLE h,
/*8864*/ typ typ typ typ typ UINT type,
/*8865*/ typ typ typ typ typ int cx,
/*8866*/ typ typ typ typ typ int cy,
/*8867*/ typ typ typ typ typ UINT flags);
/*8878*/ BOOL typ DrawIconEx(
/*8879*/ typ typ typ typ typ HDC hdc,
/*8880*/ typ typ typ typ typ int xLeft,
/*8881*/ typ typ typ typ typ int yTop,
/*8882*/ typ typ typ typ typ HICON hIcon,
/*8883*/ typ typ typ typ typ int cxWidth,
/*8884*/ typ typ typ typ typ int cyWidth,
/*8885*/ typ typ typ typ typ UINT istepIfAniCur,
/*8886*/ typ typ typ typ typ typ typ HBRUSH hbrFlickerFreeDraw,
/*8887*/ typ typ typ typ typ UINT diFlags);
/*8891*/ 
/*8892*/ HICON
/*8893*/ typ
/*8894*/ CreateIconIndirect(
/*8895*/ typ typ typ typ typ PICONINFO piconinfo);
/*8897*/ 
/*8898*/ HICON
/*8899*/ typ
/*8900*/ CopyIcon(
/*8901*/ typ typ typ typ typ HICON hIcon);
/*8903*/ 
/*8904*/ BOOL
/*8905*/ typ
/*8906*/ GetIconInfo(
/*8907*/ typ typ typ typ typ HICON hIcon,
/*8908*/ typ typ typ typ typ PICONINFO piconinfo);
/*9094*/ 
/*9095*/ int
/*9096*/ typ
/*9097*/ LoadStringA(
/*9098*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*9099*/ typ typ typ typ typ UINT uID,
/*9100*/ typ typ typ typ typ typ typ LPSTR lpBuffer,
/*9101*/ typ typ typ typ typ int cchBufferMax);
/*9102*/ 
/*9103*/ int
/*9104*/ typ
/*9105*/ LoadStringW(
/*9106*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*9107*/ typ typ typ typ typ UINT uID,
/*9108*/ typ typ typ typ typ typ typ LPWSTR lpBuffer,
/*9109*/ typ typ typ typ typ int cchBufferMax);
/*9439*/ 
/*9440*/ BOOL
/*9441*/ typ
/*9442*/ IsDialogMessageA(
/*9443*/ typ typ typ typ typ HWND hDlg,
/*9444*/ typ typ typ typ typ LPMSG lpMsg);
/*9445*/ 
/*9446*/ BOOL
/*9447*/ typ
/*9448*/ IsDialogMessageW(
/*9449*/ typ typ typ typ typ HWND hDlg,
/*9450*/ typ typ typ typ typ LPMSG lpMsg);
/*9459*/ 
/*9460*/ BOOL
/*9461*/ typ
/*9462*/ MapDialogRect(
/*9463*/ typ typ typ typ typ HWND hDlg,
/*9464*/ typ typ typ typ typ LPRECT lpRect);
/*9466*/ 
/*9467*/ int
/*9468*/ typ
/*9469*/ DlgDirListA(
/*9470*/ typ typ typ typ typ HWND hDlg,
/*9471*/ typ typ typ typ typ LPSTR lpPathSpec,
/*9472*/ typ typ typ typ typ int nIDListBox,
/*9473*/ typ typ typ typ typ int nIDStaticPath,
/*9474*/ typ typ typ typ typ UINT uFileType);
/*9475*/ 
/*9476*/ int
/*9477*/ typ
/*9478*/ DlgDirListW(
/*9479*/ typ typ typ typ typ HWND hDlg,
/*9480*/ typ typ typ typ typ LPWSTR lpPathSpec,
/*9481*/ typ typ typ typ typ int nIDListBox,
/*9482*/ typ typ typ typ typ int nIDStaticPath,
/*9483*/ typ typ typ typ typ UINT uFileType);
/*9504*/ 
/*9505*/ BOOL
/*9506*/ typ
/*9507*/ DlgDirSelectExA(
/*9508*/ typ typ typ typ typ HWND hwndDlg,
/*9509*/ typ typ typ typ typ LPSTR lpString,
/*9510*/ typ typ typ typ typ int chCount,
/*9511*/ typ typ typ typ typ int idListBox);
/*9512*/ 
/*9513*/ BOOL
/*9514*/ typ
/*9515*/ DlgDirSelectExW(
/*9516*/ typ typ typ typ typ HWND hwndDlg,
/*9517*/ typ typ typ typ typ LPWSTR lpString,
/*9518*/ typ typ typ typ typ int chCount,
/*9519*/ typ typ typ typ typ int idListBox);
/*9526*/ 
/*9527*/ int
/*9528*/ typ
/*9529*/ DlgDirListComboBoxA(
/*9530*/ typ typ typ typ typ HWND hDlg,
/*9531*/ typ typ typ typ typ LPSTR lpPathSpec,
/*9532*/ typ typ typ typ typ int nIDComboBox,
/*9533*/ typ typ typ typ typ int nIDStaticPath,
/*9534*/ typ typ typ typ typ UINT uFiletype);
/*9535*/ 
/*9536*/ int
/*9537*/ typ
/*9538*/ DlgDirListComboBoxW(
/*9539*/ typ typ typ typ typ HWND hDlg,
/*9540*/ typ typ typ typ typ LPWSTR lpPathSpec,
/*9541*/ typ typ typ typ typ int nIDComboBox,
/*9542*/ typ typ typ typ typ int nIDStaticPath,
/*9543*/ typ typ typ typ typ UINT uFiletype);
/*9550*/ 
/*9551*/ BOOL
/*9552*/ typ
/*9553*/ DlgDirSelectComboBoxExA(
/*9554*/ typ typ typ typ typ HWND hwndDlg,
/*9555*/ typ typ typ typ typ LPSTR lpString,
/*9556*/ typ typ typ typ typ int cchOut,
/*9557*/ typ typ typ typ typ int idComboBox);
/*9558*/ 
/*9559*/ BOOL
/*9560*/ typ
/*9561*/ DlgDirSelectComboBoxExW(
/*9562*/ typ typ typ typ typ HWND hwndDlg,
/*9563*/ typ typ typ typ typ LPWSTR lpString,
/*9564*/ typ typ typ typ typ int cchOut,
/*9565*/ typ typ typ typ typ int idComboBox);
/*9914*/ typedef struct tagSCROLLINFO
/*9915*/ {
/*9916*/ UINT cbSize;
/*9917*/ UINT fMask;
/*9918*/ int nMin;
/*9919*/ int nMax;
/*9920*/ UINT nPage;
/*9921*/ int nPos;
/*9922*/ int nTrackPos;
/*9923*/ }SCROLLINFO,typ*LPSCROLLINFO;
/*9924*/ typedef SCROLLINFO const typ*LPCSCROLLINFO;
/*9926*/ 
/*9927*/ int
/*9928*/ typ
/*9929*/ SetScrollInfo(
/*9930*/ typ typ typ typ typ HWND hwnd,
/*9931*/ typ typ typ typ typ int nBar,
/*9932*/ typ typ typ typ typ LPCSCROLLINFO lpsi,
/*9933*/ typ typ typ typ typ BOOL redraw);
/*9935*/ 
/*9936*/ BOOL
/*9937*/ typ
/*9938*/ GetScrollInfo(
/*9939*/ typ typ typ typ typ HWND hwnd,
/*9940*/ typ typ typ typ typ int nBar,
/*9941*/ typ typ typ typ typ LPSCROLLINFO lpsi);
/*9964*/ typedef struct tagMDICREATESTRUCTA{
/*9965*/ LPCSTR szClass;
/*9966*/ LPCSTR szTitle;
/*9967*/ HANDLE hOwner;
/*9968*/ int x;
/*9969*/ int y;
/*9970*/ int cx;
/*9971*/ int cy;
/*9972*/ DWORD style;
/*9973*/ LPARAM lParam;
/*9974*/ }MDICREATESTRUCTA,*LPMDICREATESTRUCTA;
/*9975*/ typedef struct tagMDICREATESTRUCTW{
/*9976*/ LPCWSTR szClass;
/*9977*/ LPCWSTR szTitle;
/*9978*/ HANDLE hOwner;
/*9979*/ int x;
/*9980*/ int y;
/*9981*/ int cx;
/*9982*/ int cy;
/*9983*/ DWORD style;
/*9984*/ LPARAM lParam;
/*9985*/ }MDICREATESTRUCTW,*LPMDICREATESTRUCTW;
/*9990*/ typedef MDICREATESTRUCTA MDICREATESTRUCT;
/*9991*/ typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
/*9994*/ typedef struct tagCLIENTCREATESTRUCT{
/*9995*/ HANDLE hWindowMenu;
/*9996*/ UINT idFirstChild;
/*9997*/ }CLIENTCREATESTRUCT,*LPCLIENTCREATESTRUCT;
/*9999*/ 
/*10000*/ LRESULT
/*10001*/ typ
/*10002*/ DefFrameProcA(
/*10003*/ typ typ typ typ typ HWND hWnd,
/*10004*/ typ typ typ typ typ typ typ HWND hWndMDIClient,
/*10005*/ typ typ typ typ typ UINT uMsg,
/*10006*/ typ typ typ typ typ WPARAM wParam,
/*10007*/ typ typ typ typ typ LPARAM lParam);
/*10008*/ 
/*10009*/ LRESULT
/*10010*/ typ
/*10011*/ DefFrameProcW(
/*10012*/ typ typ typ typ typ HWND hWnd,
/*10013*/ typ typ typ typ typ typ typ HWND hWndMDIClient,
/*10014*/ typ typ typ typ typ UINT uMsg,
/*10015*/ typ typ typ typ typ WPARAM wParam,
/*10016*/ typ typ typ typ typ LPARAM lParam);
/*10023*/ 
/*10025*/ LRESULT
/*10026*/ typ
/*10031*/ DefMDIChildProcA(
/*10032*/ typ typ typ typ typ HWND hWnd,
/*10033*/ typ typ typ typ typ UINT uMsg,
/*10034*/ typ typ typ typ typ WPARAM wParam,
/*10035*/ typ typ typ typ typ LPARAM lParam);
/*10036*/ 
/*10038*/ LRESULT
/*10039*/ typ
/*10044*/ DefMDIChildProcW(
/*10045*/ typ typ typ typ typ HWND hWnd,
/*10046*/ typ typ typ typ typ UINT uMsg,
/*10047*/ typ typ typ typ typ WPARAM wParam,
/*10048*/ typ typ typ typ typ LPARAM lParam);
/*10057*/ 
/*10058*/ BOOL
/*10059*/ typ
/*10060*/ TranslateMDISysAccel(
/*10061*/ typ typ typ typ typ HWND hWndClient,
/*10062*/ typ typ typ typ typ LPMSG lpMsg);
/*10066*/ 
/*10067*/ UINT
/*10068*/ typ
/*10069*/ ArrangeIconicWindows(
/*10070*/ typ typ typ typ typ HWND hWnd);
/*10072*/ 
/*10073*/ HWND
/*10074*/ typ
/*10075*/ CreateMDIWindowA(
/*10076*/ typ typ typ typ typ LPCSTR lpClassName,
/*10077*/ typ typ typ typ typ LPCSTR lpWindowName,
/*10078*/ typ typ typ typ typ DWORD dwStyle,
/*10079*/ typ typ typ typ typ int X,
/*10080*/ typ typ typ typ typ int Y,
/*10081*/ typ typ typ typ typ int nWidth,
/*10082*/ typ typ typ typ typ int nHeight,
/*10083*/ typ typ typ typ typ typ typ HWND hWndParent,
/*10084*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*10085*/ typ typ typ typ typ LPARAM lParam);
/*10086*/ 
/*10087*/ HWND
/*10088*/ typ
/*10089*/ CreateMDIWindowW(
/*10090*/ typ typ typ typ typ LPCWSTR lpClassName,
/*10091*/ typ typ typ typ typ LPCWSTR lpWindowName,
/*10092*/ typ typ typ typ typ DWORD dwStyle,
/*10093*/ typ typ typ typ typ int X,
/*10094*/ typ typ typ typ typ int Y,
/*10095*/ typ typ typ typ typ int nWidth,
/*10096*/ typ typ typ typ typ int nHeight,
/*10097*/ typ typ typ typ typ typ typ HWND hWndParent,
/*10098*/ typ typ typ typ typ typ typ HINSTANCE hInstance,
/*10099*/ typ typ typ typ typ LPARAM lParam);
/*10107*/ 
/*10108*/ WORD
/*10109*/ typ
/*10110*/ TileWindows(
/*10111*/ typ typ typ typ typ typ typ HWND hwndParent,
/*10112*/ typ typ typ typ typ UINT wHow,
/*10113*/ typ typ typ typ typ typ typ const RECT*lpRect,
/*10114*/ typ typ typ typ typ UINT cKids,
/*10115*/ typ typ typ typ typ typ typ typ typ const HWND typ*lpKids);
/*10117*/ 
/*10118*/ WORD
/*10119*/ typ CascadeWindows(
/*10120*/ typ typ typ typ typ typ typ HWND hwndParent,
/*10121*/ typ typ typ typ typ UINT wHow,
/*10122*/ typ typ typ typ typ typ typ const RECT*lpRect,
/*10123*/ typ typ typ typ typ UINT cKids,
/*10124*/ typ typ typ typ typ typ typ typ typ const HWND typ*lpKids);
/*10135*/ typedef DWORD HELPPOLY;
/*10136*/ typedef struct tagMULTIKEYHELPA{
/*10138*/ DWORD mkSize;
/*10142*/ CHAR mkKeylist;
/*10143*/ CHAR szKeyphrase[1];
/*10144*/ }MULTIKEYHELPA,*PMULTIKEYHELPA,*LPMULTIKEYHELPA;
/*10145*/ typedef struct tagMULTIKEYHELPW{
/*10147*/ DWORD mkSize;
/*10151*/ WCHAR mkKeylist;
/*10152*/ WCHAR szKeyphrase[1];
/*10153*/ }MULTIKEYHELPW,*PMULTIKEYHELPW,*LPMULTIKEYHELPW;
/*10159*/ typedef MULTIKEYHELPA MULTIKEYHELP;
/*10160*/ typedef PMULTIKEYHELPA PMULTIKEYHELP;
/*10161*/ typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
/*10164*/ typedef struct tagHELPWININFOA{
/*10165*/ int wStructSize;
/*10166*/ int x;
/*10167*/ int y;
/*10168*/ int dx;
/*10169*/ int dy;
/*10170*/ int wMax;
/*10171*/ CHAR rgchMember[2];
/*10172*/ }HELPWININFOA,*PHELPWININFOA,*LPHELPWININFOA;
/*10173*/ typedef struct tagHELPWININFOW{
/*10174*/ int wStructSize;
/*10175*/ int x;
/*10176*/ int y;
/*10177*/ int dx;
/*10178*/ int dy;
/*10179*/ int wMax;
/*10180*/ WCHAR rgchMember[2];
/*10181*/ }HELPWININFOW,*PHELPWININFOW,*LPHELPWININFOW;
/*10187*/ typedef HELPWININFOA HELPWININFO;
/*10188*/ typedef PHELPWININFOA PHELPWININFO;
/*10189*/ typedef LPHELPWININFOA LPHELPWININFO;
/*10232*/ 
/*10233*/ BOOL
/*10234*/ typ
/*10235*/ WinHelpA(
/*10236*/ typ typ typ typ typ typ typ HWND hWndMain,
/*10237*/ typ typ typ typ typ typ typ LPCSTR lpszHelp,
/*10238*/ typ typ typ typ typ UINT uCommand,
/*10239*/ typ typ typ typ typ ULONG_PTR dwData);
/*10240*/ 
/*10241*/ BOOL
/*10242*/ typ
/*10243*/ WinHelpW(
/*10244*/ typ typ typ typ typ typ typ HWND hWndMain,
/*10245*/ typ typ typ typ typ typ typ LPCWSTR lpszHelp,
/*10246*/ typ typ typ typ typ UINT uCommand,
/*10247*/ typ typ typ typ typ ULONG_PTR dwData);
/*10261*/ 
/*10262*/ DWORD
/*10263*/ typ
/*10264*/ GetGuiResources(
/*10265*/ typ typ typ typ typ HANDLE hProcess,
/*10266*/ typ typ typ typ typ DWORD uiFlags);
/*10528*/ typedef struct tagNONCLIENTMETRICSA
/*10529*/ {
/*10530*/ UINT cbSize;
/*10531*/ int iBorderWidth;
/*10532*/ int iScrollWidth;
/*10533*/ int iScrollHeight;
/*10534*/ int iCaptionWidth;
/*10535*/ int iCaptionHeight;
/*10536*/ LOGFONTA lfCaptionFont;
/*10537*/ int iSmCaptionWidth;
/*10538*/ int iSmCaptionHeight;
/*10539*/ LOGFONTA lfSmCaptionFont;
/*10540*/ int iMenuWidth;
/*10541*/ int iMenuHeight;
/*10542*/ LOGFONTA lfMenuFont;
/*10543*/ LOGFONTA lfStatusFont;
/*10544*/ LOGFONTA lfMessageFont;
/*10546*/ int iPaddedBorderWidth;
/*10548*/ }NONCLIENTMETRICSA,*PNONCLIENTMETRICSA,typ*LPNONCLIENTMETRICSA;
/*10549*/ typedef struct tagNONCLIENTMETRICSW
/*10550*/ {
/*10551*/ UINT cbSize;
/*10552*/ int iBorderWidth;
/*10553*/ int iScrollWidth;
/*10554*/ int iScrollHeight;
/*10555*/ int iCaptionWidth;
/*10556*/ int iCaptionHeight;
/*10557*/ LOGFONTW lfCaptionFont;
/*10558*/ int iSmCaptionWidth;
/*10559*/ int iSmCaptionHeight;
/*10560*/ LOGFONTW lfSmCaptionFont;
/*10561*/ int iMenuWidth;
/*10562*/ int iMenuHeight;
/*10563*/ LOGFONTW lfMenuFont;
/*10564*/ LOGFONTW lfStatusFont;
/*10565*/ LOGFONTW lfMessageFont;
/*10567*/ int iPaddedBorderWidth;
/*10569*/ }NONCLIENTMETRICSW,*PNONCLIENTMETRICSW,typ*LPNONCLIENTMETRICSW;
/*10575*/ typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
/*10576*/ typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
/*10577*/ typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
/*10596*/ typedef struct tagMINIMIZEDMETRICS
/*10597*/ {
/*10598*/ UINT cbSize;
/*10599*/ int iWidth;
/*10600*/ int iHorzGap;
/*10601*/ int iVertGap;
/*10602*/ int iArrange;
/*10603*/ }MINIMIZEDMETRICS,*PMINIMIZEDMETRICS,*LPMINIMIZEDMETRICS;
/*10607*/ typedef struct tagICONMETRICSA
/*10608*/ {
/*10609*/ UINT cbSize;
/*10610*/ int iHorzSpacing;
/*10611*/ int iVertSpacing;
/*10612*/ int iTitleWrap;
/*10613*/ LOGFONTA lfFont;
/*10614*/ }ICONMETRICSA,*PICONMETRICSA,*LPICONMETRICSA;
/*10615*/ typedef struct tagICONMETRICSW
/*10616*/ {
/*10617*/ UINT cbSize;
/*10618*/ int iHorzSpacing;
/*10619*/ int iVertSpacing;
/*10620*/ int iTitleWrap;
/*10621*/ LOGFONTW lfFont;
/*10622*/ }ICONMETRICSW,*PICONMETRICSW,*LPICONMETRICSW;
/*10628*/ typedef ICONMETRICSA ICONMETRICS;
/*10629*/ typedef PICONMETRICSA PICONMETRICS;
/*10630*/ typedef LPICONMETRICSA LPICONMETRICS;
/*10635*/ typedef struct tagANIMATIONINFO
/*10636*/ {
/*10637*/ UINT cbSize;
/*10638*/ int iMinAnimate;
/*10639*/ }ANIMATIONINFO,*LPANIMATIONINFO;
/*10641*/ typedef struct tagSERIALKEYSA
/*10642*/ {
/*10643*/ UINT cbSize;
/*10644*/ DWORD dwFlags;
/*10645*/ LPSTR lpszActivePort;
/*10646*/ LPSTR lpszPort;
/*10647*/ UINT iBaudRate;
/*10648*/ UINT iPortState;
/*10649*/ UINT iActive;
/*10650*/ }SERIALKEYSA,*LPSERIALKEYSA;
/*10651*/ typedef struct tagSERIALKEYSW
/*10652*/ {
/*10653*/ UINT cbSize;
/*10654*/ DWORD dwFlags;
/*10655*/ LPWSTR lpszActivePort;
/*10656*/ LPWSTR lpszPort;
/*10657*/ UINT iBaudRate;
/*10658*/ UINT iPortState;
/*10659*/ UINT iActive;
/*10660*/ }SERIALKEYSW,*LPSERIALKEYSW;
/*10665*/ typedef SERIALKEYSA SERIALKEYS;
/*10666*/ typedef LPSERIALKEYSA LPSERIALKEYS;
/*10675*/ typedef struct tagHIGHCONTRASTA
/*10676*/ {
/*10677*/ UINT cbSize;
/*10678*/ DWORD dwFlags;
/*10679*/ LPSTR lpszDefaultScheme;
/*10680*/ }HIGHCONTRASTA,*LPHIGHCONTRASTA;
/*10681*/ typedef struct tagHIGHCONTRASTW
/*10682*/ {
/*10683*/ UINT cbSize;
/*10684*/ DWORD dwFlags;
/*10685*/ LPWSTR lpszDefaultScheme;
/*10686*/ }HIGHCONTRASTW,*LPHIGHCONTRASTW;
/*10691*/ typedef HIGHCONTRASTA HIGHCONTRAST;
/*10692*/ typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
/*"tvout.h"17*/ typedef struct _VIDEOPARAMETERS{
/*18*/ GUID Guid;
/*19*/ ULONG dwOffset;
/*20*/ ULONG dwCommand;
/*21*/ ULONG dwFlags;
/*22*/ ULONG dwMode;
/*23*/ ULONG dwTVStandard;
/*24*/ ULONG dwAvailableModes;
/*25*/ ULONG dwAvailableTVStandard;
/*26*/ ULONG dwFlickerFilter;
/*27*/ ULONG dwOverScanX;
/*28*/ ULONG dwOverScanY;
/*29*/ ULONG dwMaxUnscaledX;
/*30*/ ULONG dwMaxUnscaledY;
/*31*/ ULONG dwPositionX;
/*32*/ ULONG dwPositionY;
/*33*/ ULONG dwBrightness;
/*34*/ ULONG dwContrast;
/*35*/ ULONG dwCPType;
/*36*/ ULONG dwCPCommand;
/*37*/ ULONG dwCPStandard;
/*38*/ ULONG dwCPKey;
/*39*/ ULONG bCP_APSTriggerBits;
/*40*/ UCHAR bOEMCopyProtection[256];
/*41*/ }VIDEOPARAMETERS,*PVIDEOPARAMETERS,*LPVIDEOPARAMETERS;
/*"winuser.h"10737*/ 
/*10738*/ LONG
/*10739*/ typ
/*10740*/ ChangeDisplaySettingsA(
/*10741*/ typ typ typ typ typ typ typ LPDEVMODEA lpDevMode,
/*10742*/ typ typ typ typ typ DWORD dwFlags);
/*10743*/ 
/*10744*/ LONG
/*10745*/ typ
/*10746*/ ChangeDisplaySettingsW(
/*10747*/ typ typ typ typ typ typ typ LPDEVMODEW lpDevMode,
/*10748*/ typ typ typ typ typ DWORD dwFlags);
/*10755*/ 
/*10756*/ LONG
/*10757*/ typ
/*10758*/ ChangeDisplaySettingsExA(
/*10759*/ typ typ typ typ typ typ typ LPCSTR lpszDeviceName,
/*10760*/ typ typ typ typ typ typ typ LPDEVMODEA lpDevMode,
/*10761*/ typ typ HWND hwnd,
/*10762*/ typ typ typ typ typ DWORD dwflags,
/*10763*/ typ typ typ typ typ typ typ LPVOID lParam);
/*10764*/ 
/*10765*/ LONG
/*10766*/ typ
/*10767*/ ChangeDisplaySettingsExW(
/*10768*/ typ typ typ typ typ typ typ LPCWSTR lpszDeviceName,
/*10769*/ typ typ typ typ typ typ typ LPDEVMODEW lpDevMode,
/*10770*/ typ typ HWND hwnd,
/*10771*/ typ typ typ typ typ DWORD dwflags,
/*10772*/ typ typ typ typ typ typ typ LPVOID lParam);
/*10782*/ 
/*10783*/ BOOL
/*10784*/ typ
/*10785*/ EnumDisplaySettingsA(
/*10786*/ typ typ typ typ typ typ typ LPCSTR lpszDeviceName,
/*10787*/ typ typ typ typ typ DWORD iModeNum,
/*10788*/ typ typ typ typ typ LPDEVMODEA lpDevMode);
/*10789*/ 
/*10790*/ BOOL
/*10791*/ typ
/*10792*/ EnumDisplaySettingsW(
/*10793*/ typ typ typ typ typ typ typ LPCWSTR lpszDeviceName,
/*10794*/ typ typ typ typ typ DWORD iModeNum,
/*10795*/ typ typ typ typ typ LPDEVMODEW lpDevMode);
/*10804*/ 
/*10805*/ BOOL
/*10806*/ typ
/*10807*/ EnumDisplaySettingsExA(
/*10808*/ typ typ typ typ typ typ typ LPCSTR lpszDeviceName,
/*10809*/ typ typ typ typ typ DWORD iModeNum,
/*10810*/ typ typ typ typ typ LPDEVMODEA lpDevMode,
/*10811*/ typ typ typ typ typ DWORD dwFlags);
/*10812*/ 
/*10813*/ BOOL
/*10814*/ typ
/*10815*/ EnumDisplaySettingsExW(
/*10816*/ typ typ typ typ typ typ typ LPCWSTR lpszDeviceName,
/*10817*/ typ typ typ typ typ DWORD iModeNum,
/*10818*/ typ typ typ typ typ LPDEVMODEW lpDevMode,
/*10819*/ typ typ typ typ typ DWORD dwFlags);
/*10830*/ 
/*10831*/ BOOL
/*10832*/ typ
/*10833*/ EnumDisplayDevicesA(
/*10834*/ typ typ typ typ typ typ typ LPCSTR lpDevice,
/*10835*/ typ typ typ typ typ DWORD iDevNum,
/*10836*/ typ typ typ typ typ PDISPLAY_DEVICEA lpDisplayDevice,
/*10837*/ typ typ typ typ typ DWORD dwFlags);
/*10838*/ 
/*10839*/ BOOL
/*10840*/ typ
/*10841*/ EnumDisplayDevicesW(
/*10842*/ typ typ typ typ typ typ typ LPCWSTR lpDevice,
/*10843*/ typ typ typ typ typ DWORD iDevNum,
/*10844*/ typ typ typ typ typ PDISPLAY_DEVICEW lpDisplayDevice,
/*10845*/ typ typ typ typ typ DWORD dwFlags);
/*10860*/ 
/*10861*/ BOOL
/*10862*/ typ
/*10863*/ SystemParametersInfoA(
/*10864*/ typ typ typ typ typ UINT uiAction,
/*10865*/ typ typ typ typ typ UINT uiParam,
/*10866*/ typ typ typ typ typ typ typ PVOID pvParam,
/*10867*/ typ typ typ typ typ UINT fWinIni);
/*10868*/ 
/*10869*/ BOOL
/*10870*/ typ
/*10871*/ SystemParametersInfoW(
/*10872*/ typ typ typ typ typ UINT uiAction,
/*10873*/ typ typ typ typ typ UINT uiParam,
/*10874*/ typ typ typ typ typ typ typ PVOID pvParam,
/*10875*/ typ typ typ typ typ UINT fWinIni);
/*10888*/ typedef struct tagFILTERKEYS
/*10889*/ {
/*10890*/ UINT cbSize;
/*10891*/ DWORD dwFlags;
/*10892*/ DWORD iWaitMSec;
/*10893*/ DWORD iDelayMSec;
/*10894*/ DWORD iRepeatMSec;
/*10895*/ DWORD iBounceMSec;
/*10896*/ }FILTERKEYS,*LPFILTERKEYS;
/*10909*/ typedef struct tagSTICKYKEYS
/*10910*/ {
/*10911*/ UINT cbSize;
/*10912*/ DWORD dwFlags;
/*10913*/ }STICKYKEYS,*LPSTICKYKEYS;
/*10946*/ typedef struct tagMOUSEKEYS
/*10947*/ {
/*10948*/ UINT cbSize;
/*10949*/ DWORD dwFlags;
/*10950*/ DWORD iMaxSpeed;
/*10951*/ DWORD iTimeToMaxSpeed;
/*10952*/ DWORD iCtrlSpeed;
/*10953*/ DWORD dwReserved1;
/*10954*/ DWORD dwReserved2;
/*10955*/ }MOUSEKEYS,*LPMOUSEKEYS;
/*10976*/ typedef struct tagACCESSTIMEOUT
/*10977*/ {
/*10978*/ UINT cbSize;
/*10979*/ DWORD dwFlags;
/*10980*/ DWORD iTimeOutMSec;
/*10981*/ }ACCESSTIMEOUT,*LPACCESSTIMEOUT;
/*11006*/ typedef struct tagSOUNDSENTRYA
/*11007*/ {
/*11008*/ UINT cbSize;
/*11009*/ DWORD dwFlags;
/*11010*/ DWORD iFSTextEffect;
/*11011*/ DWORD iFSTextEffectMSec;
/*11012*/ DWORD iFSTextEffectColorBits;
/*11013*/ DWORD iFSGrafEffect;
/*11014*/ DWORD iFSGrafEffectMSec;
/*11015*/ DWORD iFSGrafEffectColor;
/*11016*/ DWORD iWindowsEffect;
/*11017*/ DWORD iWindowsEffectMSec;
/*11018*/ LPSTR lpszWindowsEffectDLL;
/*11019*/ DWORD iWindowsEffectOrdinal;
/*11020*/ }SOUNDSENTRYA,*LPSOUNDSENTRYA;
/*11021*/ typedef struct tagSOUNDSENTRYW
/*11022*/ {
/*11023*/ UINT cbSize;
/*11024*/ DWORD dwFlags;
/*11025*/ DWORD iFSTextEffect;
/*11026*/ DWORD iFSTextEffectMSec;
/*11027*/ DWORD iFSTextEffectColorBits;
/*11028*/ DWORD iFSGrafEffect;
/*11029*/ DWORD iFSGrafEffectMSec;
/*11030*/ DWORD iFSGrafEffectColor;
/*11031*/ DWORD iWindowsEffect;
/*11032*/ DWORD iWindowsEffectMSec;
/*11033*/ LPWSTR lpszWindowsEffectDLL;
/*11034*/ DWORD iWindowsEffectOrdinal;
/*11035*/ }SOUNDSENTRYW,*LPSOUNDSENTRYW;
/*11040*/ typedef SOUNDSENTRYA SOUNDSENTRY;
/*11041*/ typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
/*11058*/ typedef struct tagTOGGLEKEYS
/*11059*/ {
/*11060*/ UINT cbSize;
/*11061*/ DWORD dwFlags;
/*11062*/ }TOGGLEKEYS,*LPTOGGLEKEYS;
/*11087*/ 
/*11088*/ void
/*11089*/ typ
/*11090*/ SetDebugErrorLevel(
/*11091*/ typ typ typ typ typ DWORD dwLevel);
/*11101*/ 
/*11102*/ void
/*11103*/ typ
/*11104*/ SetLastErrorEx(
/*11105*/ typ typ typ typ typ DWORD dwErrCode,
/*11106*/ typ typ typ typ typ DWORD dwType);
/*11108*/ 
/*11109*/ int
/*11110*/ typ
/*11111*/ InternalGetWindowText(
/*11112*/ typ typ typ typ typ HWND hWnd,
/*11113*/ typ typ typ typ typ typ typ LPWSTR pString,
/*11114*/ typ typ typ typ typ int cchMaxCount);
/*11127*/ 
/*11128*/ BOOL
/*11129*/ typ
/*11130*/ CancelShutdown(
/*11131*/ void);
/*11144*/ 
/*11145*/ HMONITOR
/*11146*/ typ
/*11147*/ MonitorFromPoint(
/*11148*/ typ typ typ typ typ POINT pt,
/*11149*/ typ typ typ typ typ DWORD dwFlags);
/*11151*/ 
/*11152*/ HMONITOR
/*11153*/ typ
/*11154*/ MonitorFromRect(
/*11155*/ typ typ typ typ typ LPCRECT lprc,
/*11156*/ typ typ typ typ typ DWORD dwFlags);
/*11158*/ 
/*11159*/ HMONITOR
/*11160*/ typ
/*11161*/ MonitorFromWindow(
/*11162*/ typ typ typ typ typ HWND hwnd,
/*11163*/ typ typ typ typ typ DWORD dwFlags);
/*11171*/ typedef struct tagMONITORINFO
/*11172*/ {
/*11173*/ DWORD cbSize;
/*11174*/ RECT rcMonitor;
/*11175*/ RECT rcWork;
/*11176*/ DWORD dwFlags;
/*11177*/ }MONITORINFO,*LPMONITORINFO;
/*11196*/ typedef struct tagMONITORINFOEXA
/*11197*/ {
/*11198*/ MONITORINFO s;
/*11199*/ CHAR szDevice[32];
/*11200*/ }MONITORINFOEXA,*LPMONITORINFOEXA;
/*11201*/ typedef struct tagMONITORINFOEXW
/*11202*/ {
/*11203*/ MONITORINFO s;
/*11204*/ WCHAR szDevice[32];
/*11205*/ }MONITORINFOEXW,*LPMONITORINFOEXW;
/*11210*/ typedef MONITORINFOEXA MONITORINFOEX;
/*11211*/ typedef LPMONITORINFOEXA LPMONITORINFOEX;
/*11215*/ 
/*11216*/ BOOL
/*11217*/ typ
/*11218*/ GetMonitorInfoA(
/*11219*/ typ typ typ typ typ HMONITOR hMonitor,
/*11220*/ typ typ typ typ typ LPMONITORINFO lpmi);
/*11221*/ 
/*11222*/ BOOL
/*11223*/ typ
/*11224*/ GetMonitorInfoW(
/*11225*/ typ typ typ typ typ HMONITOR hMonitor,
/*11226*/ typ typ typ typ typ LPMONITORINFO lpmi);
/*11233*/ typedef BOOL(typ*MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);
/*11235*/ 
/*11236*/ BOOL
/*11237*/ typ
/*11238*/ EnumDisplayMonitors(
/*11239*/ typ typ typ typ typ typ typ HDC hdc,
/*11240*/ typ typ typ typ typ typ typ LPCRECT lprcClip,
/*11241*/ typ typ typ typ typ MONITORENUMPROC lpfnEnum,
/*11242*/ typ typ typ typ typ LPARAM dwData);
/*11251*/ 
/*11252*/ void
/*11253*/ typ
/*11254*/ NotifyWinEvent(
/*11255*/ typ typ typ typ typ DWORD event,
/*11256*/ typ typ typ typ typ HWND hwnd,
/*11257*/ typ typ typ typ typ LONG idObject,
/*11258*/ typ typ typ typ typ LONG idChild);
/*11260*/ typedef void(typ*WINEVENTPROC)(
/*11261*/ HWINEVENTHOOK hWinEventHook,
/*11262*/ DWORD event,
/*11263*/ HWND hwnd,
/*11264*/ LONG idObject,
/*11265*/ LONG idChild,
/*11266*/ DWORD idEventThread,
/*11267*/ DWORD dwmsEventTime);
/*11269*/ 
/*11270*/ HWINEVENTHOOK
/*11271*/ typ
/*11272*/ SetWinEventHook(
/*11273*/ typ typ typ typ typ DWORD eventMin,
/*11274*/ typ typ typ typ typ DWORD eventMax,
/*11275*/ typ typ typ typ typ typ typ HMODULE hmodWinEventProc,
/*11276*/ typ typ typ typ typ WINEVENTPROC pfnWinEventProc,
/*11277*/ typ typ typ typ typ DWORD idProcess,
/*11278*/ typ typ typ typ typ DWORD idThread,
/*11279*/ typ typ typ typ typ DWORD dwFlags);
/*11297*/ 
/*11298*/ BOOL
/*11299*/ typ
/*11300*/ UnhookWinEvent(
/*11301*/ typ typ typ typ typ HWINEVENTHOOK hWinEventHook);
/*11771*/ typedef struct tagGUITHREADINFO
/*11772*/ {
/*11773*/ DWORD cbSize;
/*11774*/ DWORD flags;
/*11775*/ HWND hwndActive;
/*11776*/ HWND hwndFocus;
/*11777*/ HWND hwndCapture;
/*11778*/ HWND hwndMenuOwner;
/*11779*/ HWND hwndMoveSize;
/*11780*/ HWND hwndCaret;
/*11781*/ RECT rcCaret;
/*11782*/ }GUITHREADINFO,*PGUITHREADINFO,typ*LPGUITHREADINFO;
/*11797*/ 
/*11798*/ BOOL
/*11799*/ typ
/*11800*/ GetGUIThreadInfo(
/*11801*/ typ typ typ typ typ DWORD idThread,
/*11802*/ typ typ typ typ typ PGUITHREADINFO pgui);
/*11804*/ 
/*11805*/ BOOL
/*11806*/ typ
/*11807*/ BlockInput(
/*11808*/ BOOL fBlockIt);
/*11827*/ 
/*11828*/ UINT
/*11829*/ typ
/*11830*/ GetWindowModuleFileNameA(
/*11831*/ typ typ typ typ typ HWND hwnd,
/*11832*/ typ typ typ typ typ typ typ LPSTR pszFileName,
/*11833*/ typ typ typ typ typ UINT cchFileNameMax);
/*11834*/ 
/*11835*/ UINT
/*11836*/ typ
/*11837*/ GetWindowModuleFileNameW(
/*11838*/ typ typ typ typ typ HWND hwnd,
/*11839*/ typ typ typ typ typ typ typ LPWSTR pszFileName,
/*11840*/ typ typ typ typ typ UINT cchFileNameMax);
/*11888*/ typedef struct tagCURSORINFO
/*11889*/ {
/*11890*/ DWORD cbSize;
/*11891*/ DWORD flags;
/*11892*/ HCURSOR hCursor;
/*11893*/ POINT ptScreenPos;
/*11894*/ }CURSORINFO,*PCURSORINFO,*LPCURSORINFO;
/*11898*/ 
/*11899*/ BOOL
/*11900*/ typ
/*11901*/ GetCursorInfo(
/*11902*/ typ typ typ typ typ PCURSORINFO pci);
/*11907*/ typedef struct tagWINDOWINFO
/*11908*/ {
/*11909*/ DWORD cbSize;
/*11910*/ RECT rcWindow;
/*11911*/ RECT rcClient;
/*11912*/ DWORD dwStyle;
/*11913*/ DWORD dwExStyle;
/*11914*/ DWORD dwWindowStatus;
/*11915*/ UINT cxWindowBorders;
/*11916*/ UINT cyWindowBorders;
/*11917*/ ATOM atomWindowType;
/*11918*/ WORD wCreatorVersion;
/*11919*/ }WINDOWINFO,*PWINDOWINFO,*LPWINDOWINFO;
/*11923*/ 
/*11924*/ BOOL
/*11925*/ typ
/*11926*/ GetWindowInfo(
/*11927*/ typ typ typ typ typ HWND hwnd,
/*11928*/ typ typ typ typ typ PWINDOWINFO pwi);
/*11933*/ typedef struct tagTITLEBARINFO
/*11934*/ {
/*11935*/ DWORD cbSize;
/*11936*/ RECT rcTitleBar;
/*11937*/ DWORD rgstate[5+1];
/*11938*/ }TITLEBARINFO,*PTITLEBARINFO,*LPTITLEBARINFO;
/*11940*/ 
/*11941*/ BOOL
/*11942*/ typ
/*11943*/ GetTitleBarInfo(
/*11944*/ typ typ typ typ typ HWND hwnd,
/*11945*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PTITLEBARINFO pti);
/*11948*/ typedef struct tagTITLEBARINFOEX
/*11949*/ {
/*11950*/ DWORD cbSize;
/*11951*/ RECT rcTitleBar;
/*11952*/ DWORD rgstate[5+1];
/*11953*/ RECT rgrect[5+1];
/*11954*/ }TITLEBARINFOEX,*PTITLEBARINFOEX,*LPTITLEBARINFOEX;
/*11960*/ typedef struct tagMENUBARINFO
/*11961*/ {
/*11962*/ DWORD cbSize;
/*11963*/ RECT rcBar;
/*11964*/ HMENU hMenu;
/*11965*/ HWND hwndMenu;
/*11966*/ BOOL fBarFocused:1;
/*11967*/ BOOL fFocused:1;
/*11968*/ }MENUBARINFO,*PMENUBARINFO,*LPMENUBARINFO;
/*11970*/ 
/*11971*/ BOOL
/*11972*/ typ
/*11973*/ GetMenuBarInfo(
/*11974*/ typ typ typ typ typ HWND hwnd,
/*11975*/ typ typ typ typ typ LONG idObject,
/*11976*/ typ typ typ typ typ LONG idItem,
/*11977*/ typ typ typ typ typ PMENUBARINFO pmbi);
/*11982*/ typedef struct tagSCROLLBARINFO
/*11983*/ {
/*11984*/ DWORD cbSize;
/*11985*/ RECT rcScrollBar;
/*11986*/ int dxyLineButton;
/*11987*/ int xyThumbTop;
/*11988*/ int xyThumbBottom;
/*11989*/ int reserved;
/*11990*/ DWORD rgstate[5+1];
/*11991*/ }SCROLLBARINFO,*PSCROLLBARINFO,*LPSCROLLBARINFO;
/*11993*/ 
/*11994*/ BOOL
/*11995*/ typ
/*11996*/ GetScrollBarInfo(
/*11997*/ typ typ typ typ typ HWND hwnd,
/*11998*/ typ typ typ typ typ LONG idObject,
/*11999*/ typ typ typ typ typ PSCROLLBARINFO psbi);
/*12004*/ typedef struct tagCOMBOBOXINFO
/*12005*/ {
/*12006*/ DWORD cbSize;
/*12007*/ RECT rcItem;
/*12008*/ RECT rcButton;
/*12009*/ DWORD stateButton;
/*12010*/ HWND hwndCombo;
/*12011*/ HWND hwndItem;
/*12012*/ HWND hwndList;
/*12013*/ }COMBOBOXINFO,*PCOMBOBOXINFO,*LPCOMBOBOXINFO;
/*12015*/ 
/*12016*/ BOOL
/*12017*/ typ
/*12018*/ GetComboBoxInfo(
/*12019*/ typ typ typ typ typ HWND hwndCombo,
/*12020*/ typ typ typ typ typ PCOMBOBOXINFO pcbi);
/*12029*/ 
/*12030*/ HWND
/*12031*/ typ
/*12032*/ GetAncestor(
/*12033*/ typ typ typ typ typ HWND hwnd,
/*12034*/ typ typ typ typ typ UINT gaFlags);
/*12043*/ 
/*12044*/ HWND
/*12045*/ typ
/*12046*/ RealChildWindowFromPoint(
/*12047*/ typ typ typ typ typ HWND hwndParent,
/*12048*/ typ typ typ typ typ POINT ptParentClientCoords);
/*12055*/ 
/*12056*/ UINT
/*12057*/ typ
/*12058*/ RealGetWindowClassA(
/*12059*/ typ typ typ typ typ HWND hwnd,
/*12060*/ typ typ typ typ typ typ typ LPSTR ptszClassName,
/*12061*/ typ typ typ typ typ UINT cchClassNameMax);
/*12066*/ 
/*12067*/ UINT
/*12068*/ typ
/*12069*/ RealGetWindowClassW(
/*12070*/ typ typ typ typ typ HWND hwnd,
/*12071*/ typ typ typ typ typ typ typ LPWSTR ptszClassName,
/*12072*/ typ typ typ typ typ UINT cchClassNameMax);
/*12082*/ typedef struct tagALTTABINFO
/*12083*/ {
/*12084*/ DWORD cbSize;
/*12085*/ int cItems;
/*12086*/ int cColumns;
/*12087*/ int cRows;
/*12088*/ int iColFocus;
/*12089*/ int iRowFocus;
/*12090*/ int cxItem;
/*12091*/ int cyItem;
/*12092*/ POINT ptStart;
/*12093*/ }ALTTABINFO,*PALTTABINFO,*LPALTTABINFO;
/*12095*/ 
/*12096*/ BOOL
/*12097*/ typ
/*12098*/ GetAltTabInfoA(
/*12099*/ typ typ typ typ typ typ typ HWND hwnd,
/*12100*/ typ typ typ typ typ int iItem,
/*12101*/ typ typ typ typ typ PALTTABINFO pati,
/*12102*/ typ typ typ typ typ typ typ LPSTR pszItemText,
/*12103*/ typ typ typ typ typ UINT cchItemText);
/*12104*/ 
/*12105*/ BOOL
/*12106*/ typ
/*12107*/ GetAltTabInfoW(
/*12108*/ typ typ typ typ typ typ typ HWND hwnd,
/*12109*/ typ typ typ typ typ int iItem,
/*12110*/ typ typ typ typ typ PALTTABINFO pati,
/*12111*/ typ typ typ typ typ typ typ LPWSTR pszItemText,
/*12112*/ typ typ typ typ typ UINT cchItemText);
/*12123*/ 
/*12124*/ DWORD
/*12125*/ typ
/*12126*/ GetListBoxInfo(
/*12127*/ typ typ typ typ typ HWND hwnd);
/*12540*/ 
/*12541*/ BOOL
/*12542*/ typ
/*12543*/ ChangeWindowMessageFilter(
/*12544*/ typ typ typ typ typ UINT message,
/*12545*/ typ typ typ typ typ DWORD dwFlag);
/*12551*/ 
/*12552*/ BOOL
/*12553*/ typ
/*12554*/ ShutdownBlockReasonCreate(
/*12555*/ typ typ typ typ typ HWND hWnd,
/*12556*/ typ typ typ typ typ LPCWSTR pwszReason);
/*12558*/ 
/*12559*/ BOOL
/*12560*/ typ
/*12561*/ ShutdownBlockReasonQuery(
/*12562*/ typ typ typ typ typ HWND hWnd,
/*12563*/ typ typ typ typ typ typ typ LPWSTR pwszBuff,
/*12564*/ typ typ typ typ typ DWORD*pcchBuff);
/*12566*/ 
/*12567*/ BOOL
/*12568*/ typ
/*12569*/ ShutdownBlockReasonDestroy(
/*12570*/ typ typ typ typ typ HWND hWnd);
/*836*/ typedef DWORD LGRPID;
/*842*/ typedef DWORD LCTYPE;
/*848*/ typedef DWORD CALTYPE;
/*854*/ typedef DWORD CALID;
/*861*/ typedef struct _cpinfo{
/*862*/ UINT MaxCharSize;
/*863*/ BYTE DefaultChar[2];
/*864*/ BYTE LeadByte[12];
/*865*/ }CPINFO,*LPCPINFO;
/*867*/ typedef struct _cpinfoexA{
/*868*/ UINT MaxCharSize;
/*869*/ BYTE DefaultChar[2];
/*870*/ BYTE LeadByte[12];
/*871*/ WCHAR UnicodeDefaultChar;
/*872*/ UINT CodePage;
/*873*/ CHAR CodePageName[260];
/*874*/ }CPINFOEXA,*LPCPINFOEXA;
/*875*/ typedef struct _cpinfoexW{
/*876*/ UINT MaxCharSize;
/*877*/ BYTE DefaultChar[2];
/*878*/ BYTE LeadByte[12];
/*879*/ WCHAR UnicodeDefaultChar;
/*880*/ UINT CodePage;
/*881*/ WCHAR CodePageName[260];
/*882*/ }CPINFOEXW,*LPCPINFOEXW;
/*887*/ typedef CPINFOEXA CPINFOEX;
/*888*/ typedef LPCPINFOEXA LPCPINFOEX;
/*896*/ typedef struct _numberfmtA{
/*897*/ UINT NumDigits;
/*898*/ UINT LeadingZero;
/*899*/ UINT Grouping;
/*900*/ LPSTR lpDecimalSep;
/*901*/ LPSTR lpThousandSep;
/*902*/ UINT NegativeOrder;
/*903*/ }NUMBERFMTA,*LPNUMBERFMTA;
/*904*/ typedef struct _numberfmtW{
/*905*/ UINT NumDigits;
/*906*/ UINT LeadingZero;
/*907*/ UINT Grouping;
/*908*/ LPWSTR lpDecimalSep;
/*909*/ LPWSTR lpThousandSep;
/*910*/ UINT NegativeOrder;
/*911*/ }NUMBERFMTW,*LPNUMBERFMTW;
/*916*/ typedef NUMBERFMTA NUMBERFMT;
/*917*/ typedef LPNUMBERFMTA LPNUMBERFMT;
/*925*/ typedef struct _currencyfmtA{
/*926*/ UINT NumDigits;
/*927*/ UINT LeadingZero;
/*928*/ UINT Grouping;
/*929*/ LPSTR lpDecimalSep;
/*930*/ LPSTR lpThousandSep;
/*931*/ UINT NegativeOrder;
/*932*/ UINT PositiveOrder;
/*933*/ LPSTR lpCurrencySymbol;
/*934*/ }CURRENCYFMTA,*LPCURRENCYFMTA;
/*935*/ typedef struct _currencyfmtW{
/*936*/ UINT NumDigits;
/*937*/ UINT LeadingZero;
/*938*/ UINT Grouping;
/*939*/ LPWSTR lpDecimalSep;
/*940*/ LPWSTR lpThousandSep;
/*941*/ UINT NegativeOrder;
/*942*/ UINT PositiveOrder;
/*943*/ LPWSTR lpCurrencySymbol;
/*944*/ }CURRENCYFMTW,*LPCURRENCYFMTW;
/*949*/ typedef CURRENCYFMTA CURRENCYFMT;
/*950*/ typedef LPCURRENCYFMTA LPCURRENCYFMT;
/*957*/ enum SYSNLS_FUNCTION{
/*958*/ COMPARE_STRING=0x0001,
/*959*/ };
/*960*/ typedef DWORD NLS_FUNCTION;
/*967*/ typedef struct _nlsversioninfo{
/*968*/ DWORD dwNLSVersionInfoSize;
/*969*/ DWORD dwNLSVersion;
/*970*/ DWORD dwDefinedVersion;
/*971*/ }NLSVERSIONINFO,*LPNLSVERSIONINFO;
/*973*/ typedef struct _nlsversioninfoex{
/*974*/ DWORD dwNLSVersionInfoSize;
/*975*/ DWORD dwNLSVersion;
/*976*/ DWORD dwDefinedVersion;
/*977*/ DWORD dwEffectiveId;
/*978*/ GUID guidCustomVersion;
/*979*/ }NLSVERSIONINFOEX,*LPNLSVERSIONINFOEX;
/*985*/ typedef LONG GEOID;
/*986*/ typedef DWORD GEOTYPE;
/*987*/ typedef DWORD GEOCLASS;
/*995*/ enum SYSGEOTYPE{
/*996*/ GEO_NATION=0x0001,
/*997*/ GEO_LATITUDE=0x0002,
/*998*/ GEO_LONGITUDE=0x0003,
/*999*/ GEO_ISO2=0x0004,
/*1000*/ GEO_ISO3=0x0005,
/*1001*/ GEO_RFC1766=0x0006,
/*1002*/ GEO_LCID=0x0007,
/*1003*/ GEO_FRIENDLYNAME=0x0008,
/*1004*/ GEO_OFFICIALNAME=0x0009,
/*1005*/ GEO_TIMEZONES=0x000A,
/*1006*/ GEO_OFFICIALLANGUAGES=0x000B,
/*1007*/ };
/*1013*/ enum SYSGEOCLASS{
/*1014*/ GEOCLASS_NATION=16,
/*1015*/ GEOCLASS_REGION=14,
/*1016*/ };
/*1023*/ typedef enum _NORM_FORM{
/*1024*/ NormalizationOther=0,
/*1025*/ NormalizationC=0x1,
/*1026*/ NormalizationD=0x2,
/*1027*/ NormalizationKC=0x5,
/*1029*/ NormalizationKD=0x6
/*1031*/ }NORM_FORM;
/*1050*/ typedef BOOL(typ*LANGUAGEGROUP_ENUMPROCA)(LGRPID,LPSTR,LPSTR,DWORD,LONG_PTR);
/*1051*/ typedef BOOL(typ*LANGGROUPLOCALE_ENUMPROCA)(LGRPID,LCID,LPSTR,LONG_PTR);
/*1052*/ typedef BOOL(typ*UILANGUAGE_ENUMPROCA)(LPSTR,LONG_PTR);
/*1053*/ typedef BOOL(typ*LOCALE_ENUMPROCA)(LPSTR);
/*1054*/ typedef BOOL(typ*CODEPAGE_ENUMPROCA)(LPSTR);
/*1055*/ typedef BOOL(typ*DATEFMT_ENUMPROCA)(LPSTR);
/*1056*/ typedef BOOL(typ*DATEFMT_ENUMPROCEXA)(LPSTR,CALID);
/*1057*/ typedef BOOL(typ*TIMEFMT_ENUMPROCA)(LPSTR);
/*1058*/ typedef BOOL(typ*CALINFO_ENUMPROCA)(LPSTR);
/*1059*/ typedef BOOL(typ*CALINFO_ENUMPROCEXA)(LPSTR,CALID);
/*1061*/ typedef BOOL(typ*LANGUAGEGROUP_ENUMPROCW)(LGRPID,LPWSTR,LPWSTR,DWORD,LONG_PTR);
/*1062*/ typedef BOOL(typ*LANGGROUPLOCALE_ENUMPROCW)(LGRPID,LCID,LPWSTR,LONG_PTR);
/*1063*/ typedef BOOL(typ*UILANGUAGE_ENUMPROCW)(LPWSTR,LONG_PTR);
/*1064*/ typedef BOOL(typ*LOCALE_ENUMPROCW)(LPWSTR);
/*1065*/ typedef BOOL(typ*CODEPAGE_ENUMPROCW)(LPWSTR);
/*1066*/ typedef BOOL(typ*DATEFMT_ENUMPROCW)(LPWSTR);
/*1067*/ typedef BOOL(typ*DATEFMT_ENUMPROCEXW)(LPWSTR,CALID);
/*1068*/ typedef BOOL(typ*TIMEFMT_ENUMPROCW)(LPWSTR);
/*1069*/ typedef BOOL(typ*CALINFO_ENUMPROCW)(LPWSTR);
/*1070*/ typedef BOOL(typ*CALINFO_ENUMPROCEXW)(LPWSTR,CALID);
/*1071*/ typedef BOOL(typ*GEO_ENUMPROC)(GEOID);
/*1133*/ typedef struct _FILEMUIINFO{
/*1134*/ DWORD dwSize;
/*1135*/ DWORD dwVersion;
/*1136*/ DWORD dwFileType;
/*1137*/ BYTE pChecksum[16];
/*1138*/ BYTE pServiceChecksum[16];
/*1139*/ DWORD dwLanguageNameOffset;
/*1140*/ DWORD dwTypeIDMainSize;
/*1141*/ DWORD dwTypeIDMainOffset;
/*1142*/ DWORD dwTypeNameMainOffset;
/*1143*/ DWORD dwTypeIDMUISize;
/*1144*/ DWORD dwTypeIDMUIOffset;
/*1145*/ DWORD dwTypeNameMUIOffset;
/*1146*/ BYTE abBuffer[8];
/*1147*/ }FILEMUIINFO,*PFILEMUIINFO;
/*1213*/ 
/*1214*/ BOOL
/*1215*/ typ
/*1216*/ IsValidCodePage(
/*1217*/ typ typ typ typ typ UINT CodePage);
/*1219*/ 
/*1220*/ UINT
/*1221*/ typ
/*1222*/ GetACP(void);
/*1224*/ 
/*1225*/ UINT
/*1226*/ typ
/*1227*/ GetOEMCP(void);
/*1229*/ 
/*1230*/ BOOL
/*1231*/ typ
/*1232*/ GetCPInfo(
/*1233*/ typ typ typ typ typ UINT CodePage,
/*1234*/ typ typ typ typ typ LPCPINFO lpCPInfo);
/*1236*/ 
/*1237*/ BOOL
/*1238*/ typ
/*1239*/ GetCPInfoExA(
/*1240*/ typ typ typ typ typ UINT CodePage,
/*1241*/ typ typ typ typ typ DWORD dwFlags,
/*1242*/ typ typ typ typ typ LPCPINFOEXA lpCPInfoEx);
/*1243*/ 
/*1244*/ BOOL
/*1245*/ typ
/*1246*/ GetCPInfoExW(
/*1247*/ typ typ typ typ typ UINT CodePage,
/*1248*/ typ typ typ typ typ DWORD dwFlags,
/*1249*/ typ typ typ typ typ LPCPINFOEXW lpCPInfoEx);
/*1256*/ 
/*1257*/ BOOL
/*1258*/ typ
/*1259*/ IsDBCSLeadByte(
/*1260*/ typ typ typ typ typ BYTE TestChar);
/*1262*/ 
/*1263*/ BOOL
/*1264*/ typ
/*1265*/ IsDBCSLeadByteEx(
/*1266*/ typ typ typ typ typ UINT CodePage,
/*1267*/ typ typ typ typ typ BYTE TestChar);
/*1269*/ 
/*1270*/ int
/*1271*/ typ
/*1272*/ MultiByteToWideChar(
/*1273*/ typ typ typ typ typ UINT CodePage,
/*1274*/ typ typ typ typ typ DWORD dwFlags,
/*1275*/ typ typ typ typ typ typ typ LPCSTR lpMultiByteStr,
/*1276*/ typ typ typ typ typ int cbMultiByte,
/*1277*/ typ typ typ typ typ typ typ typ LPWSTR lpWideCharStr,
/*1278*/ typ typ typ typ typ int cchWideChar);
/*1280*/ 
/*1281*/ int
/*1282*/ typ
/*1283*/ WideCharToMultiByte(
/*1284*/ typ typ typ typ typ UINT CodePage,
/*1285*/ typ typ typ typ typ DWORD dwFlags,
/*1286*/ typ typ typ typ typ typ typ LPCWSTR lpWideCharStr,
/*1287*/ typ typ typ typ typ int cchWideChar,
/*1288*/ typ typ typ typ typ typ typ typ LPSTR lpMultiByteStr,
/*1289*/ typ typ typ typ typ int cbMultiByte,
/*1290*/ typ typ typ typ typ typ typ LPCSTR lpDefaultChar,
/*1291*/ typ typ typ typ typ typ typ LPBOOL lpUsedDefaultChar);
/*1298*/ 
/*1299*/ int
/*1300*/ typ
/*1301*/ CompareStringA(
/*1302*/ typ typ typ typ typ LCID Locale,
/*1303*/ typ typ typ typ typ DWORD dwCmpFlags,
/*1304*/ typ typ typ typ typ typ typ LPCSTR lpString1,
/*1305*/ typ typ typ typ typ int cchCount1,
/*1306*/ typ typ typ typ typ typ typ LPCSTR lpString2,
/*1307*/ typ typ typ typ typ int cchCount2);
/*1308*/ 
/*1309*/ int
/*1310*/ typ
/*1311*/ CompareStringW(
/*1312*/ typ typ typ typ typ LCID Locale,
/*1313*/ typ typ typ typ typ DWORD dwCmpFlags,
/*1314*/ typ typ typ typ typ typ typ LPCWSTR lpString1,
/*1315*/ typ typ typ typ typ int cchCount1,
/*1316*/ typ typ typ typ typ typ typ LPCWSTR lpString2,
/*1317*/ typ typ typ typ typ int cchCount2);
/*1354*/ 
/*1355*/ int
/*1356*/ typ
/*1357*/ FindNLSString(
/*1358*/ typ typ typ typ typ LCID Locale,
/*1359*/ typ typ typ typ typ DWORD dwFindNLSStringFlags,
/*1360*/ typ typ typ typ typ typ typ LPCWSTR lpStringSource,
/*1361*/ typ typ typ typ typ int cchSource,
/*1362*/ typ typ typ typ typ typ typ LPCWSTR lpStringValue,
/*1363*/ typ typ typ typ typ int cchValue,
/*1364*/ typ typ typ typ typ typ typ LPINT pcchFound);
/*1368*/ 
/*1369*/ int
/*1370*/ typ
/*1371*/ LCMapStringA(
/*1372*/ typ typ typ typ typ LCID Locale,
/*1373*/ typ typ typ typ typ DWORD dwMapFlags,
/*1374*/ typ typ typ typ typ typ typ LPCSTR lpSrcStr,
/*1375*/ typ typ typ typ typ int cchSrc,
/*1376*/ typ typ typ typ typ typ typ LPSTR lpDestStr,
/*1377*/ typ typ typ typ typ int cchDest);
/*1378*/ 
/*1379*/ int
/*1380*/ typ
/*1381*/ LCMapStringW(
/*1382*/ typ typ typ typ typ LCID Locale,
/*1383*/ typ typ typ typ typ DWORD dwMapFlags,
/*1384*/ typ typ typ typ typ typ typ LPCWSTR lpSrcStr,
/*1385*/ typ typ typ typ typ int cchSrc,
/*1386*/ typ typ typ typ typ typ typ LPWSTR lpDestStr,
/*1387*/ typ typ typ typ typ int cchDest);
/*1394*/ 
/*1395*/ int
/*1396*/ typ
/*1397*/ GetLocaleInfoA(
/*1398*/ typ typ typ typ typ LCID Locale,
/*1399*/ typ typ typ typ typ LCTYPE LCType,
/*1400*/ typ typ typ typ typ typ typ LPSTR lpLCData,
/*1401*/ typ typ typ typ typ int cchData);
/*1402*/ 
/*1403*/ int
/*1404*/ typ
/*1405*/ GetLocaleInfoW(
/*1406*/ typ typ typ typ typ LCID Locale,
/*1407*/ typ typ typ typ typ LCTYPE LCType,
/*1408*/ typ typ typ typ typ typ typ LPWSTR lpLCData,
/*1409*/ typ typ typ typ typ int cchData);
/*1416*/ 
/*1417*/ BOOL
/*1418*/ typ
/*1419*/ SetLocaleInfoA(
/*1420*/ typ typ typ typ typ LCID Locale,
/*1421*/ typ typ typ typ typ LCTYPE LCType,
/*1422*/ typ typ typ typ typ LPCSTR lpLCData);
/*1423*/ 
/*1424*/ BOOL
/*1425*/ typ
/*1426*/ SetLocaleInfoW(
/*1427*/ typ typ typ typ typ LCID Locale,
/*1428*/ typ typ typ typ typ LCTYPE LCType,
/*1429*/ typ typ typ typ typ LPCWSTR lpLCData);
/*1437*/ 
/*1438*/ int
/*1439*/ typ
/*1440*/ GetCalendarInfoA(
/*1441*/ typ typ typ typ typ LCID Locale,
/*1442*/ typ typ typ typ typ CALID Calendar,
/*1443*/ typ typ typ typ typ CALTYPE CalType,
/*1444*/ typ typ typ typ typ typ typ LPSTR lpCalData,
/*1445*/ typ typ typ typ typ int cchData,
/*1446*/ typ typ typ typ typ typ typ LPDWORD lpValue);
/*1447*/ 
/*1448*/ int
/*1449*/ typ
/*1450*/ GetCalendarInfoW(
/*1451*/ typ typ typ typ typ LCID Locale,
/*1452*/ typ typ typ typ typ CALID Calendar,
/*1453*/ typ typ typ typ typ CALTYPE CalType,
/*1454*/ typ typ typ typ typ typ typ LPWSTR lpCalData,
/*1455*/ typ typ typ typ typ int cchData,
/*1456*/ typ typ typ typ typ typ typ LPDWORD lpValue);
/*1463*/ 
/*1464*/ BOOL
/*1465*/ typ
/*1466*/ SetCalendarInfoA(
/*1467*/ typ typ typ typ typ LCID Locale,
/*1468*/ typ typ typ typ typ CALID Calendar,
/*1469*/ typ typ typ typ typ CALTYPE CalType,
/*1470*/ typ typ typ typ typ LPCSTR lpCalData);
/*1471*/ 
/*1472*/ BOOL
/*1473*/ typ
/*1474*/ SetCalendarInfoW(
/*1475*/ typ typ typ typ typ LCID Locale,
/*1476*/ typ typ typ typ typ CALID Calendar,
/*1477*/ typ typ typ typ typ CALTYPE CalType,
/*1478*/ typ typ typ typ typ LPCWSTR lpCalData);
/*1487*/ 
/*1488*/ int
/*1489*/ typ
/*1490*/ LCIDToLocaleName(
/*1491*/ typ typ typ typ typ LCID Locale,
/*1492*/ typ typ typ typ typ typ typ LPWSTR lpName,
/*1493*/ typ typ typ typ typ int cchName,
/*1494*/ typ typ typ typ typ DWORD dwFlags);
/*1496*/ 
/*1497*/ LCID
/*1498*/ typ
/*1499*/ LocaleNameToLCID(
/*1500*/ typ typ typ typ typ LPCWSTR lpName,
/*1501*/ typ typ typ typ typ DWORD dwFlags);
/*1505*/ 
/*1506*/ int
/*1507*/ typ
/*1508*/ GetTimeFormatA(
/*1509*/ typ typ typ typ typ LCID Locale,
/*1510*/ typ typ typ typ typ DWORD dwFlags,
/*1511*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpTime,
/*1512*/ typ typ typ typ typ typ typ LPCSTR lpFormat,
/*1513*/ typ typ typ typ typ typ typ LPSTR lpTimeStr,
/*1514*/ typ typ typ typ typ int cchTime);
/*1515*/ 
/*1516*/ int
/*1517*/ typ
/*1518*/ GetTimeFormatW(
/*1519*/ typ typ typ typ typ LCID Locale,
/*1520*/ typ typ typ typ typ DWORD dwFlags,
/*1521*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpTime,
/*1522*/ typ typ typ typ typ typ typ LPCWSTR lpFormat,
/*1523*/ typ typ typ typ typ typ typ LPWSTR lpTimeStr,
/*1524*/ typ typ typ typ typ int cchTime);
/*1533*/ 
/*1534*/ int
/*1535*/ typ
/*1536*/ GetDurationFormat(
/*1537*/ typ typ typ typ typ LCID Locale,
/*1538*/ typ typ typ typ typ DWORD dwFlags,
/*1539*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpDuration,
/*1540*/ typ typ typ typ typ ULONGLONG ullDuration,
/*1541*/ typ typ typ typ typ typ typ LPCWSTR lpFormat,
/*1542*/ typ typ typ typ typ typ typ LPWSTR lpDurationStr,
/*1543*/ typ typ typ typ typ int cchDuration);
/*1546*/ 
/*1547*/ int
/*1548*/ typ
/*1549*/ GetDateFormatA(
/*1550*/ typ typ typ typ typ LCID Locale,
/*1551*/ typ typ typ typ typ DWORD dwFlags,
/*1552*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpDate,
/*1553*/ typ typ typ typ typ typ typ LPCSTR lpFormat,
/*1554*/ typ typ typ typ typ typ typ LPSTR lpDateStr,
/*1555*/ typ typ typ typ typ int cchDate);
/*1556*/ 
/*1557*/ int
/*1558*/ typ
/*1559*/ GetDateFormatW(
/*1560*/ typ typ typ typ typ LCID Locale,
/*1561*/ typ typ typ typ typ DWORD dwFlags,
/*1562*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpDate,
/*1563*/ typ typ typ typ typ typ typ LPCWSTR lpFormat,
/*1564*/ typ typ typ typ typ typ typ LPWSTR lpDateStr,
/*1565*/ typ typ typ typ typ int cchDate);
/*1572*/ 
/*1573*/ int
/*1574*/ typ
/*1575*/ GetNumberFormatA(
/*1576*/ typ typ typ typ typ LCID Locale,
/*1577*/ typ typ typ typ typ DWORD dwFlags,
/*1578*/ typ typ typ typ typ LPCSTR lpValue,
/*1579*/ typ typ typ typ typ typ typ const NUMBERFMTA*lpFormat,
/*1580*/ typ typ typ typ typ typ typ LPSTR lpNumberStr,
/*1581*/ typ typ typ typ typ int cchNumber);
/*1582*/ 
/*1583*/ int
/*1584*/ typ
/*1585*/ GetNumberFormatW(
/*1586*/ typ typ typ typ typ LCID Locale,
/*1587*/ typ typ typ typ typ DWORD dwFlags,
/*1588*/ typ typ typ typ typ LPCWSTR lpValue,
/*1589*/ typ typ typ typ typ typ typ const NUMBERFMTW*lpFormat,
/*1590*/ typ typ typ typ typ typ typ LPWSTR lpNumberStr,
/*1591*/ typ typ typ typ typ int cchNumber);
/*1598*/ 
/*1599*/ int
/*1600*/ typ
/*1601*/ GetCurrencyFormatA(
/*1602*/ typ typ typ typ typ LCID Locale,
/*1603*/ typ typ typ typ typ DWORD dwFlags,
/*1604*/ typ typ typ typ typ LPCSTR lpValue,
/*1605*/ typ typ typ typ typ typ typ const CURRENCYFMTA*lpFormat,
/*1606*/ typ typ typ typ typ typ typ LPSTR lpCurrencyStr,
/*1607*/ typ typ typ typ typ int cchCurrency);
/*1608*/ 
/*1609*/ int
/*1610*/ typ
/*1611*/ GetCurrencyFormatW(
/*1612*/ typ typ typ typ typ LCID Locale,
/*1613*/ typ typ typ typ typ DWORD dwFlags,
/*1614*/ typ typ typ typ typ LPCWSTR lpValue,
/*1615*/ typ typ typ typ typ typ typ const CURRENCYFMTW*lpFormat,
/*1616*/ typ typ typ typ typ typ typ LPWSTR lpCurrencyStr,
/*1617*/ typ typ typ typ typ int cchCurrency);
/*1624*/ 
/*1625*/ BOOL
/*1626*/ typ
/*1627*/ EnumCalendarInfoA(
/*1628*/ typ typ typ typ typ CALINFO_ENUMPROCA lpCalInfoEnumProc,
/*1629*/ typ typ typ typ typ LCID Locale,
/*1630*/ typ typ typ typ typ CALID Calendar,
/*1631*/ typ typ typ typ typ CALTYPE CalType);
/*1632*/ 
/*1633*/ BOOL
/*1634*/ typ
/*1635*/ EnumCalendarInfoW(
/*1636*/ typ typ typ typ typ CALINFO_ENUMPROCW lpCalInfoEnumProc,
/*1637*/ typ typ typ typ typ LCID Locale,
/*1638*/ typ typ typ typ typ CALID Calendar,
/*1639*/ typ typ typ typ typ CALTYPE CalType);
/*1647*/ 
/*1648*/ BOOL
/*1649*/ typ
/*1650*/ EnumCalendarInfoExA(
/*1651*/ typ typ typ typ typ CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
/*1652*/ typ typ typ typ typ LCID Locale,
/*1653*/ typ typ typ typ typ CALID Calendar,
/*1654*/ typ typ typ typ typ CALTYPE CalType);
/*1655*/ 
/*1656*/ BOOL
/*1657*/ typ
/*1658*/ EnumCalendarInfoExW(
/*1659*/ typ typ typ typ typ CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
/*1660*/ typ typ typ typ typ LCID Locale,
/*1661*/ typ typ typ typ typ CALID Calendar,
/*1662*/ typ typ typ typ typ CALTYPE CalType);
/*1670*/ 
/*1671*/ BOOL
/*1672*/ typ
/*1673*/ EnumTimeFormatsA(
/*1674*/ typ typ typ typ typ TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
/*1675*/ typ typ typ typ typ LCID Locale,
/*1676*/ typ typ typ typ typ DWORD dwFlags);
/*1677*/ 
/*1678*/ BOOL
/*1679*/ typ
/*1680*/ EnumTimeFormatsW(
/*1681*/ typ typ typ typ typ TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
/*1682*/ typ typ typ typ typ LCID Locale,
/*1683*/ typ typ typ typ typ DWORD dwFlags);
/*1690*/ 
/*1691*/ BOOL
/*1692*/ typ
/*1693*/ EnumDateFormatsA(
/*1694*/ typ typ typ typ typ DATEFMT_ENUMPROCA lpDateFmtEnumProc,
/*1695*/ typ typ typ typ typ LCID Locale,
/*1696*/ typ typ typ typ typ DWORD dwFlags);
/*1697*/ 
/*1698*/ BOOL
/*1699*/ typ
/*1700*/ EnumDateFormatsW(
/*1701*/ typ typ typ typ typ DATEFMT_ENUMPROCW lpDateFmtEnumProc,
/*1702*/ typ typ typ typ typ LCID Locale,
/*1703*/ typ typ typ typ typ DWORD dwFlags);
/*1711*/ 
/*1712*/ BOOL
/*1713*/ typ
/*1714*/ EnumDateFormatsExA(
/*1715*/ typ typ typ typ typ DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
/*1716*/ typ typ typ typ typ LCID Locale,
/*1717*/ typ typ typ typ typ DWORD dwFlags);
/*1718*/ 
/*1719*/ BOOL
/*1720*/ typ
/*1721*/ EnumDateFormatsExW(
/*1722*/ typ typ typ typ typ DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
/*1723*/ typ typ typ typ typ LCID Locale,
/*1724*/ typ typ typ typ typ DWORD dwFlags);
/*1733*/ 
/*1734*/ BOOL
/*1735*/ typ
/*1736*/ IsValidLanguageGroup(
/*1737*/ typ typ typ typ typ LGRPID LanguageGroup,
/*1738*/ typ typ typ typ typ DWORD dwFlags);
/*1741*/ 
/*1742*/ BOOL
/*1743*/ typ
/*1744*/ GetNLSVersion(
/*1745*/ typ typ typ typ typ NLS_FUNCTION Function,
/*1746*/ typ typ typ typ typ LCID Locale,
/*1747*/ typ typ typ typ typ LPNLSVERSIONINFO lpVersionInformation);
/*1749*/ 
/*1750*/ BOOL
/*1751*/ typ
/*1752*/ IsNLSDefinedString(
/*1753*/ typ typ typ typ typ NLS_FUNCTION Function,
/*1754*/ typ typ typ typ typ DWORD dwFlags,
/*1755*/ typ typ typ typ typ LPNLSVERSIONINFO lpVersionInformation,
/*1756*/ typ typ typ typ typ typ typ LPCWSTR lpString,
/*1757*/ typ typ typ typ typ INT cchStr);
/*1759*/ 
/*1760*/ BOOL
/*1761*/ typ
/*1762*/ IsValidLocale(
/*1763*/ typ typ typ typ typ LCID Locale,
/*1764*/ typ typ typ typ typ DWORD dwFlags);
/*1766*/ 
/*1767*/ int
/*1768*/ typ
/*1769*/ GetGeoInfoA(
/*1770*/ typ typ typ typ typ GEOID Location,
/*1771*/ typ typ typ typ typ GEOTYPE GeoType,
/*1772*/ typ typ typ typ typ typ typ LPSTR lpGeoData,
/*1773*/ typ typ typ typ typ int cchData,
/*1774*/ typ typ typ typ typ LANGID LangId);
/*1775*/ 
/*1776*/ int
/*1777*/ typ
/*1778*/ GetGeoInfoW(
/*1779*/ typ typ typ typ typ GEOID Location,
/*1780*/ typ typ typ typ typ GEOTYPE GeoType,
/*1781*/ typ typ typ typ typ typ typ LPWSTR lpGeoData,
/*1782*/ typ typ typ typ typ int cchData,
/*1783*/ typ typ typ typ typ LANGID LangId);
/*1790*/ 
/*1791*/ BOOL
/*1792*/ typ
/*1793*/ EnumSystemGeoID(
/*1794*/ typ typ typ typ typ GEOCLASS GeoClass,
/*1795*/ typ typ typ typ typ GEOID ParentGeoId,
/*1796*/ typ typ typ typ typ GEO_ENUMPROC lpGeoEnumProc);
/*1798*/ 
/*1799*/ GEOID
/*1800*/ typ
/*1801*/ GetUserGeoID(
/*1802*/ typ typ typ typ typ GEOCLASS GeoClass);
/*1804*/ 
/*1805*/ BOOL
/*1806*/ typ
/*1807*/ SetUserGeoID(
/*1808*/ typ typ typ typ typ GEOID GeoId);
/*1810*/ 
/*1811*/ LCID
/*1812*/ typ
/*1813*/ ConvertDefaultLocale(
/*1814*/ typ typ typ typ typ LCID Locale);
/*1816*/ 
/*1817*/ LCID
/*1818*/ typ
/*1819*/ GetThreadLocale(void);
/*1821*/ 
/*1822*/ BOOL
/*1823*/ typ
/*1824*/ SetThreadLocale(
/*1825*/ typ typ typ typ typ LCID Locale
/*1826*/ );
/*1829*/ 
/*1830*/ LANGID
/*1831*/ typ
/*1832*/ GetSystemDefaultUILanguage(void);
/*1834*/ 
/*1835*/ LANGID
/*1836*/ typ
/*1837*/ GetUserDefaultUILanguage(void);
/*1840*/ 
/*1841*/ LANGID
/*1842*/ typ
/*1843*/ GetSystemDefaultLangID(void);
/*1845*/ 
/*1846*/ LANGID
/*1847*/ typ
/*1848*/ GetUserDefaultLangID(void);
/*1850*/ 
/*1851*/ LCID
/*1852*/ typ
/*1853*/ GetSystemDefaultLCID(void);
/*1855*/ 
/*1856*/ LCID
/*1857*/ typ
/*1858*/ GetUserDefaultLCID(void);
/*1862*/ 
/*1863*/ LANGID
/*1864*/ typ
/*1865*/ SetThreadUILanguage(typ typ typ typ typ LANGID LangId);
/*1870*/ 
/*1871*/ LANGID
/*1872*/ typ
/*1873*/ GetThreadUILanguage(void);
/*1876*/ 
/*1877*/ BOOL
/*1878*/ typ
/*1879*/ GetUserPreferredUILanguages(
/*1880*/ typ typ typ typ typ DWORD dwFlags,
/*1881*/ typ typ typ typ typ PULONG pulNumLanguages,
/*1882*/ typ typ typ typ typ typ typ PWSTR pwszLanguagesBuffer,
/*1883*/ typ typ typ typ typ PULONG pcchLanguagesBuffer
/*1884*/ );
/*1887*/ 
/*1888*/ BOOL
/*1889*/ typ
/*1890*/ GetSystemPreferredUILanguages(
/*1891*/ typ typ typ typ typ DWORD dwFlags,
/*1892*/ typ typ typ typ typ PULONG pulNumLanguages,
/*1893*/ typ typ typ typ typ typ typ PWSTR pwszLanguagesBuffer,
/*1894*/ typ typ typ typ typ PULONG pcchLanguagesBuffer
/*1895*/ );
/*1898*/ 
/*1899*/ BOOL
/*1900*/ typ
/*1901*/ GetThreadPreferredUILanguages(
/*1902*/ typ typ typ typ typ DWORD dwFlags,
/*1903*/ typ typ typ typ typ PULONG pulNumLanguages,
/*1904*/ typ typ typ typ typ typ typ PWSTR pwszLanguagesBuffer,
/*1905*/ typ typ typ typ typ PULONG pcchLanguagesBuffer
/*1906*/ );
/*1909*/ 
/*1910*/ BOOL
/*1911*/ typ
/*1912*/ SetThreadPreferredUILanguages(
/*1913*/ typ typ typ typ typ DWORD dwFlags,
/*1914*/ typ typ typ typ typ typ typ PCWSTR pwszLanguagesBuffer,
/*1915*/ typ typ typ typ typ typ typ PULONG pulNumLanguages
/*1916*/ );
/*1918*/ 
/*1919*/ typ
/*1920*/ BOOL
/*1921*/ typ
/*1922*/ GetFileMUIInfo(
/*1923*/ DWORD dwFlags,
/*1924*/ typ typ typ typ typ PCWSTR pcwszFilePath,
/*1925*/ typ typ typ typ typ typ typ typ typ typ typ typ typ PFILEMUIINFO pFileMUIInfo,
/*1926*/ typ typ typ typ typ DWORD*pcbFileMUIInfo);
/*1928*/ 
/*1929*/ BOOL
/*1930*/ typ
/*1931*/ GetFileMUIPath(
/*1932*/ typ typ typ typ typ DWORD dwFlags,
/*1933*/ typ typ typ typ typ PCWSTR pcwszFilePath,
/*1934*/ __inout_ecount_opt(*pcchLanguage)PWSTR pwszLanguage,
/*1935*/ typ typ typ typ typ PULONG pcchLanguage,
/*1936*/ __out_ecount_opt(*pcchFileMUIPath)PWSTR pwszFileMUIPath,
/*1937*/ typ typ typ typ typ PULONG pcchFileMUIPath,
/*1938*/ typ typ typ typ typ PULONGLONG pululEnumerator
/*1939*/ );
/*1942*/ 
/*1943*/ BOOL
/*1944*/ typ
/*1945*/ GetUILanguageInfo(
/*1946*/ typ typ typ typ typ DWORD dwFlags,
/*1947*/ typ typ typ typ typ PCWSTR pwmszLanguage,
/*1948*/ typ typ typ typ typ typ typ PWSTR pwszFallbackLanguages,
/*1949*/ typ typ typ typ typ typ typ PDWORD pcchFallbackLanguages,
/*1950*/ typ typ typ typ typ PDWORD pAttributes
/*1951*/ );
/*1954*/ 
/*1955*/ BOOL
/*1956*/ typ
/*1957*/ NotifyUILanguageChange(
/*1958*/ typ typ typ typ typ DWORD dwFlags,
/*1959*/ typ typ typ typ typ typ typ PCWSTR pcwstrNewLanguage,
/*1960*/ typ typ typ typ typ typ typ PCWSTR pcwstrPreviousLanguage,
/*1961*/ typ typ typ typ typ DWORD dwReserved,
/*1962*/ typ typ typ typ typ typ typ PDWORD pdwStatusRtrn
/*1963*/ );
/*1971*/ 
/*1972*/ BOOL
/*1973*/ typ
/*1974*/ GetStringTypeExA(
/*1975*/ typ typ typ typ typ LCID Locale,
/*1976*/ typ typ typ typ typ DWORD dwInfoType,
/*1977*/ typ typ typ typ typ typ typ LPCSTR lpSrcStr,
/*1978*/ typ typ typ typ typ int cchSrc,
/*1979*/ typ typ typ typ typ LPWORD lpCharType);
/*1980*/ 
/*1981*/ BOOL
/*1982*/ typ
/*1983*/ GetStringTypeExW(
/*1984*/ typ typ typ typ typ LCID Locale,
/*1985*/ typ typ typ typ typ DWORD dwInfoType,
/*1986*/ typ typ typ typ typ typ typ LPCWSTR lpSrcStr,
/*1987*/ typ typ typ typ typ int cchSrc,
/*1988*/ typ typ typ typ typ LPWORD lpCharType);
/*2006*/ 
/*2007*/ BOOL
/*2008*/ typ
/*2009*/ GetStringTypeA(
/*2010*/ typ typ typ typ typ LCID Locale,
/*2011*/ typ typ typ typ typ DWORD dwInfoType,
/*2012*/ typ typ typ typ typ typ typ LPCSTR lpSrcStr,
/*2013*/ typ typ typ typ typ int cchSrc,
/*2014*/ typ typ typ typ typ LPWORD lpCharType);
/*2016*/ 
/*2017*/ BOOL
/*2018*/ typ
/*2019*/ GetStringTypeW(
/*2020*/ typ typ typ typ typ DWORD dwInfoType,
/*2021*/ typ typ typ typ typ typ typ LPCWSTR lpSrcStr,
/*2022*/ typ typ typ typ typ int cchSrc,
/*2023*/ typ typ typ typ typ LPWORD lpCharType);
/*2026*/ 
/*2027*/ int
/*2028*/ typ
/*2029*/ FoldStringA(
/*2030*/ typ typ typ typ typ DWORD dwMapFlags,
/*2031*/ typ typ typ typ typ typ typ LPCSTR lpSrcStr,
/*2032*/ typ typ typ typ typ int cchSrc,
/*2033*/ typ typ typ typ typ typ typ LPSTR lpDestStr,
/*2034*/ typ typ typ typ typ int cchDest);
/*2035*/ 
/*2036*/ int
/*2037*/ typ
/*2038*/ FoldStringW(
/*2039*/ typ typ typ typ typ DWORD dwMapFlags,
/*2040*/ typ typ typ typ typ typ typ LPCWSTR lpSrcStr,
/*2041*/ typ typ typ typ typ int cchSrc,
/*2042*/ typ typ typ typ typ typ typ LPWSTR lpDestStr,
/*2043*/ typ typ typ typ typ int cchDest);
/*2051*/ 
/*2052*/ BOOL
/*2053*/ typ
/*2054*/ EnumSystemLanguageGroupsA(
/*2055*/ typ typ typ typ typ LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
/*2056*/ typ typ typ typ typ DWORD dwFlags,
/*2057*/ typ typ typ typ typ LONG_PTR lParam);
/*2058*/ 
/*2059*/ BOOL
/*2060*/ typ
/*2061*/ EnumSystemLanguageGroupsW(
/*2062*/ typ typ typ typ typ LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
/*2063*/ typ typ typ typ typ DWORD dwFlags,
/*2064*/ typ typ typ typ typ LONG_PTR lParam);
/*2071*/ 
/*2072*/ BOOL
/*2073*/ typ
/*2074*/ EnumLanguageGroupLocalesA(
/*2075*/ typ typ typ typ typ LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
/*2076*/ typ typ typ typ typ LGRPID LanguageGroup,
/*2077*/ typ typ typ typ typ DWORD dwFlags,
/*2078*/ typ typ typ typ typ LONG_PTR lParam);
/*2079*/ 
/*2080*/ BOOL
/*2081*/ typ
/*2082*/ EnumLanguageGroupLocalesW(
/*2083*/ typ typ typ typ typ LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
/*2084*/ typ typ typ typ typ LGRPID LanguageGroup,
/*2085*/ typ typ typ typ typ DWORD dwFlags,
/*2086*/ typ typ typ typ typ LONG_PTR lParam);
/*2093*/ 
/*2094*/ BOOL
/*2095*/ typ
/*2096*/ EnumUILanguagesA(
/*2097*/ typ typ typ typ typ UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
/*2098*/ typ typ typ typ typ DWORD dwFlags,
/*2099*/ typ typ typ typ typ LONG_PTR lParam);
/*2100*/ 
/*2101*/ BOOL
/*2102*/ typ
/*2103*/ EnumUILanguagesW(
/*2104*/ typ typ typ typ typ UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
/*2105*/ typ typ typ typ typ DWORD dwFlags,
/*2106*/ typ typ typ typ typ LONG_PTR lParam);
/*2114*/ 
/*2115*/ BOOL
/*2116*/ typ
/*2117*/ EnumSystemLocalesA(
/*2118*/ typ typ typ typ typ LOCALE_ENUMPROCA lpLocaleEnumProc,
/*2119*/ typ typ typ typ typ DWORD dwFlags);
/*2120*/ 
/*2121*/ BOOL
/*2122*/ typ
/*2123*/ EnumSystemLocalesW(
/*2124*/ typ typ typ typ typ LOCALE_ENUMPROCW lpLocaleEnumProc,
/*2125*/ typ typ typ typ typ DWORD dwFlags);
/*2132*/ 
/*2133*/ BOOL
/*2134*/ typ
/*2135*/ EnumSystemCodePagesA(
/*2136*/ typ typ typ typ typ CODEPAGE_ENUMPROCA lpCodePageEnumProc,
/*2137*/ typ typ typ typ typ DWORD dwFlags);
/*2138*/ 
/*2139*/ BOOL
/*2140*/ typ
/*2141*/ EnumSystemCodePagesW(
/*2142*/ typ typ typ typ typ CODEPAGE_ENUMPROCW lpCodePageEnumProc,
/*2143*/ typ typ typ typ typ DWORD dwFlags);
/*2156*/ 
/*2157*/ int
/*2158*/ typ NormalizeString(typ typ typ typ typ NORM_FORM NormForm,
/*2159*/ typ typ typ typ typ typ typ LPCWSTR lpSrcString,
/*2160*/ typ typ typ typ typ int cwSrcLength,
/*2161*/ typ typ typ typ typ typ typ LPWSTR lpDstString,
/*2162*/ typ typ typ typ typ int cwDstLength);
/*2164*/ 
/*2165*/ BOOL
/*2166*/ typ IsNormalizedString(typ typ typ typ typ NORM_FORM NormForm,
/*2167*/ typ typ typ typ typ typ typ LPCWSTR lpString,
/*2168*/ typ typ typ typ typ int cwLength);
/*2173*/ 
/*2174*/ int
/*2175*/ typ IdnToAscii(typ typ typ typ typ DWORD dwFlags,
/*2176*/ typ typ typ typ typ typ typ LPCWSTR lpUnicodeCharStr,
/*2177*/ typ typ typ typ typ int cchUnicodeChar,
/*2178*/ typ typ typ typ typ LPWSTR lpASCIICharStr,
/*2179*/ typ typ typ typ typ int cchASCIIChar);
/*2181*/ 
/*2182*/ int
/*2183*/ typ IdnToNameprepUnicode(typ typ typ typ typ DWORD dwFlags,
/*2184*/ typ typ typ typ typ typ typ LPCWSTR lpUnicodeCharStr,
/*2185*/ typ typ typ typ typ int cchUnicodeChar,
/*2186*/ typ typ typ typ typ LPWSTR lpNameprepCharStr,
/*2187*/ typ typ typ typ typ int cchNameprepChar);
/*2189*/ 
/*2190*/ int
/*2191*/ typ IdnToUnicode(typ typ typ typ typ DWORD dwFlags,
/*2192*/ typ typ typ typ typ typ typ LPCWSTR lpASCIICharStr,
/*2193*/ typ typ typ typ typ int cchASCIIChar,
/*2194*/ typ typ typ typ typ LPWSTR lpUnicodeCharStr,
/*2195*/ typ typ typ typ typ int cchUnicodeChar);
/*2197*/ 
/*2198*/ BOOL
/*2199*/ typ VerifyScripts(
/*2200*/ typ typ typ typ typ DWORD dwFlags,
/*2201*/ typ typ typ typ typ LPCWSTR lpLocaleScripts,
/*2202*/ typ typ typ typ typ int cchLocaleScripts,
/*2203*/ typ typ typ typ typ LPCWSTR lpTestScripts,
/*2204*/ typ typ typ typ typ int cchTestScripts);
/*2206*/ 
/*2207*/ int
/*2208*/ typ GetStringScripts(
/*2209*/ typ typ typ typ typ DWORD dwFlags,
/*2210*/ typ typ typ typ typ LPCWSTR lpString,
/*2211*/ typ typ typ typ typ int cchString,
/*2212*/ typ typ typ typ typ typ typ LPWSTR lpScripts,
/*2213*/ typ typ typ typ typ int cchScripts);
/*2226*/ 
/*2227*/ int
/*2228*/ typ
/*2229*/ GetLocaleInfoEx(
/*2230*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2231*/ typ typ typ typ typ LCTYPE LCType,
/*2232*/ typ typ typ typ typ typ typ LPWSTR lpLCData,
/*2233*/ typ typ typ typ typ int cchData
/*2234*/ );
/*2236*/ 
/*2237*/ int
/*2238*/ typ
/*2239*/ GetCalendarInfoEx(
/*2240*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2241*/ typ typ typ typ typ CALID Calendar,
/*2242*/ typ typ typ typ typ typ typ LPCWSTR lpReserved,
/*2243*/ typ typ typ typ typ CALTYPE CalType,
/*2244*/ typ typ typ typ typ typ typ LPWSTR lpCalData,
/*2245*/ typ typ typ typ typ int cchData,
/*2246*/ typ typ typ typ typ typ typ LPDWORD lpValue
/*2247*/ );
/*2250*/ 
/*2251*/ int
/*2252*/ typ
/*2253*/ GetTimeFormatEx(
/*2254*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2255*/ typ typ typ typ typ DWORD dwFlags,
/*2256*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpTime,
/*2257*/ typ typ typ typ typ typ typ LPCWSTR lpFormat,
/*2258*/ typ typ typ typ typ typ typ LPWSTR lpTimeStr,
/*2259*/ typ typ typ typ typ int cchTime
/*2260*/ );
/*2262*/ 
/*2263*/ int
/*2264*/ typ
/*2265*/ GetDateFormatEx(
/*2266*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2267*/ typ typ typ typ typ DWORD dwFlags,
/*2268*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpDate,
/*2269*/ typ typ typ typ typ typ typ LPCWSTR lpFormat,
/*2270*/ typ typ typ typ typ typ typ LPWSTR lpDateStr,
/*2271*/ typ typ typ typ typ int cchDate,
/*2272*/ typ typ typ typ typ typ typ LPCWSTR lpCalendar
/*2273*/ );
/*2275*/ 
/*2276*/ int
/*2277*/ typ
/*2278*/ GetDurationFormatEx(
/*2279*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2280*/ typ typ typ typ typ DWORD dwFlags,
/*2281*/ typ typ typ typ typ typ typ const SYSTEMTIME*lpDuration,
/*2282*/ typ typ typ typ typ ULONGLONG ullDuration,
/*2283*/ typ typ typ typ typ typ typ LPCWSTR lpFormat,
/*2284*/ typ typ typ typ typ typ typ LPWSTR lpDurationStr,
/*2285*/ typ typ typ typ typ int cchDuration
/*2286*/ );
/*2288*/ 
/*2289*/ int
/*2290*/ typ
/*2291*/ GetNumberFormatEx(
/*2292*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2293*/ typ typ typ typ typ DWORD dwFlags,
/*2294*/ typ typ typ typ typ LPCWSTR lpValue,
/*2295*/ typ typ typ typ typ typ typ const NUMBERFMTW*lpFormat,
/*2296*/ typ typ typ typ typ typ typ LPWSTR lpNumberStr,
/*2297*/ typ typ typ typ typ int cchNumber
/*2298*/ );
/*2300*/ 
/*2301*/ int
/*2302*/ typ
/*2303*/ GetCurrencyFormatEx(
/*2304*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2305*/ typ typ typ typ typ DWORD dwFlags,
/*2306*/ typ typ typ typ typ LPCWSTR lpValue,
/*2307*/ typ typ typ typ typ typ typ const CURRENCYFMTW*lpFormat,
/*2308*/ typ typ typ typ typ typ typ LPWSTR lpCurrencyStr,
/*2309*/ typ typ typ typ typ int cchCurrency
/*2310*/ );
/*2312*/ 
/*2313*/ int
/*2314*/ typ
/*2315*/ GetUserDefaultLocaleName(
/*2316*/ typ typ typ typ typ LPWSTR lpLocaleName,
/*2317*/ typ typ typ typ typ int cchLocaleName
/*2318*/ );
/*2320*/ 
/*2321*/ int
/*2322*/ typ
/*2323*/ GetSystemDefaultLocaleName(
/*2324*/ typ typ typ typ typ LPWSTR lpLocaleName,
/*2325*/ typ typ typ typ typ int cchLocaleName
/*2326*/ );
/*2328*/ 
/*2329*/ BOOL
/*2330*/ typ
/*2331*/ GetNLSVersionEx(
/*2332*/ typ typ typ typ typ NLS_FUNCTION function,
/*2333*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2334*/ typ typ typ typ typ LPNLSVERSIONINFOEX lpVersionInformation
/*2335*/ );
/*2337*/ 
/*2338*/ int
/*2339*/ typ
/*2340*/ CompareStringEx(
/*2341*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2342*/ typ typ typ typ typ DWORD dwCmpFlags,
/*2343*/ typ typ typ typ typ typ typ LPCWSTR lpString1,
/*2344*/ typ typ typ typ typ int cchCount1,
/*2345*/ typ typ typ typ typ typ typ LPCWSTR lpString2,
/*2346*/ typ typ typ typ typ int cchCount2,
/*2347*/ typ typ typ typ typ typ typ LPNLSVERSIONINFO lpVersionInformation,
/*2348*/ typ typ typ typ typ typ typ LPVOID lpReserved,
/*2349*/ typ typ typ typ typ typ typ LPARAM lParam
/*2350*/ );
/*2352*/ 
/*2353*/ int
/*2354*/ typ
/*2355*/ FindNLSStringEx(
/*2356*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2357*/ typ typ typ typ typ DWORD dwFindNLSStringFlags,
/*2358*/ typ typ typ typ typ typ typ LPCWSTR lpStringSource,
/*2359*/ typ typ typ typ typ int cchSource,
/*2360*/ typ typ typ typ typ typ typ LPCWSTR lpStringValue,
/*2361*/ typ typ typ typ typ int cchValue,
/*2362*/ typ typ typ typ typ typ typ LPINT pcchFound,
/*2363*/ typ typ typ typ typ typ typ LPNLSVERSIONINFO lpVersionInformation,
/*2364*/ typ typ typ typ typ typ typ LPVOID lpReserved,
/*2365*/ typ typ typ typ typ typ typ LPARAM lParam
/*2366*/ );
/*2369*/ 
/*2370*/ int
/*2371*/ typ
/*2372*/ LCMapStringEx(
/*2373*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2374*/ typ typ typ typ typ DWORD dwMapFlags,
/*2375*/ typ typ typ typ typ typ typ LPCWSTR lpSrcStr,
/*2376*/ typ typ typ typ typ int cchSrc,
/*2377*/ typ typ typ typ typ typ typ LPWSTR lpDestStr,
/*2378*/ typ typ typ typ typ int cchDest,
/*2379*/ typ typ typ typ typ typ typ LPNLSVERSIONINFO lpVersionInformation,
/*2380*/ typ typ typ typ typ typ typ LPVOID lpReserved,
/*2381*/ typ typ typ typ typ typ typ LPARAM lParam
/*2382*/ );
/*2384*/ 
/*2385*/ int
/*2386*/ typ
/*2387*/ CompareStringOrdinal(
/*2388*/ typ typ typ typ typ LPCWSTR lpString1,
/*2389*/ typ typ typ typ typ int cchCount1,
/*2390*/ typ typ typ typ typ LPCWSTR lpString2,
/*2391*/ typ typ typ typ typ int cchCount2,
/*2392*/ typ typ typ typ typ BOOL bIgnoreCase
/*2393*/ );
/*2395*/ 
/*2396*/ BOOL
/*2397*/ typ
/*2398*/ IsValidLocaleName(
/*2399*/ typ typ typ typ typ LPCWSTR lpLocaleName
/*2400*/ );
/*2402*/ typedef BOOL(typ*CALINFO_ENUMPROCEXEX)(LPWSTR,CALID,LPWSTR,LPARAM);
/*2404*/ 
/*2405*/ BOOL
/*2406*/ typ
/*2407*/ EnumCalendarInfoExEx(
/*2408*/ typ typ typ typ typ CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
/*2409*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2410*/ typ typ typ typ typ CALID Calendar,
/*2411*/ typ typ typ typ typ typ typ LPCWSTR lpReserved,
/*2412*/ typ typ typ typ typ CALTYPE CalType,
/*2413*/ typ typ typ typ typ LPARAM lParam
/*2414*/ );
/*2416*/ typedef BOOL(typ*DATEFMT_ENUMPROCEXEX)(LPWSTR,CALID,LPARAM);
/*2418*/ 
/*2419*/ BOOL
/*2420*/ typ
/*2421*/ EnumDateFormatsExEx(
/*2422*/ typ typ typ typ typ DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
/*2423*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2424*/ typ typ typ typ typ DWORD dwFlags,
/*2425*/ typ typ typ typ typ LPARAM lParam
/*2426*/ );
/*2428*/ typedef BOOL(typ*TIMEFMT_ENUMPROCEX)(LPWSTR,LPARAM);
/*2430*/ 
/*2431*/ BOOL
/*2432*/ typ
/*2433*/ EnumTimeFormatsEx(
/*2434*/ typ typ typ typ typ TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
/*2435*/ typ typ typ typ typ typ typ LPCWSTR lpLocaleName,
/*2436*/ typ typ typ typ typ DWORD dwFlags,
/*2437*/ typ typ typ typ typ LPARAM lParam
/*2438*/ );
/*2440*/ typedef BOOL(typ*LOCALE_ENUMPROCEX)(LPWSTR,DWORD,LPARAM);
/*2442*/ 
/*2443*/ BOOL
/*2444*/ typ
/*2445*/ EnumSystemLocalesEx(
/*2446*/ typ typ typ typ typ LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
/*2447*/ typ typ typ typ typ DWORD dwFlags,
/*2448*/ typ typ typ typ typ LPARAM lParam,
/*2449*/ typ typ typ typ typ typ typ LPVOID lpReserved
/*2450*/ );
/*35*/ typedef struct _COORD{
/*36*/ SHORT X;
/*37*/ SHORT Y;
/*38*/ }COORD,*PCOORD;
/*40*/ typedef struct _SMALL_RECT{
/*41*/ SHORT Left;
/*42*/ SHORT Top;
/*43*/ SHORT Right;
/*44*/ SHORT Bottom;
/*45*/ }SMALL_RECT,*PSMALL_RECT;
/*47*/ typedef struct _KEY_EVENT_RECORD{
/*48*/ BOOL bKeyDown;
/*49*/ WORD wRepeatCount;
/*50*/ WORD wVirtualKeyCode;
/*51*/ WORD wVirtualScanCode;
/*52*/ union{
/*53*/ WCHAR UnicodeChar;
/*54*/ CHAR AsciiChar;
/*55*/ }uChar;
/*56*/ DWORD dwControlKeyState;
/*57*/ }KEY_EVENT_RECORD,*PKEY_EVENT_RECORD;
/*80*/ typedef struct _MOUSE_EVENT_RECORD{
/*81*/ COORD dwMousePosition;
/*82*/ DWORD dwButtonState;
/*83*/ DWORD dwControlKeyState;
/*84*/ DWORD dwEventFlags;
/*85*/ }MOUSE_EVENT_RECORD,*PMOUSE_EVENT_RECORD;
/*108*/ typedef struct _WINDOW_BUFFER_SIZE_RECORD{
/*109*/ COORD dwSize;
/*110*/ }WINDOW_BUFFER_SIZE_RECORD,*PWINDOW_BUFFER_SIZE_RECORD;
/*112*/ typedef struct _MENU_EVENT_RECORD{
/*113*/ UINT dwCommandId;
/*114*/ }MENU_EVENT_RECORD,*PMENU_EVENT_RECORD;
/*116*/ typedef struct _FOCUS_EVENT_RECORD{
/*117*/ BOOL bSetFocus;
/*118*/ }FOCUS_EVENT_RECORD,*PFOCUS_EVENT_RECORD;
/*120*/ typedef struct _INPUT_RECORD{
/*121*/ WORD EventType;
/*122*/ union{
/*123*/ KEY_EVENT_RECORD KeyEvent;
/*124*/ MOUSE_EVENT_RECORD MouseEvent;
/*125*/ WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
/*126*/ MENU_EVENT_RECORD MenuEvent;
/*127*/ FOCUS_EVENT_RECORD FocusEvent;
/*128*/ }Event;
/*129*/ }INPUT_RECORD,*PINPUT_RECORD;
/*141*/ typedef struct _CHAR_INFO{
/*142*/ union{
/*143*/ WCHAR UnicodeChar;
/*144*/ CHAR AsciiChar;
/*145*/ }Char;
/*146*/ WORD Attributes;
/*147*/ }CHAR_INFO,*PCHAR_INFO;
/*172*/ typedef struct _CONSOLE_SCREEN_BUFFER_INFO{
/*173*/ COORD dwSize;
/*174*/ COORD dwCursorPosition;
/*175*/ WORD wAttributes;
/*176*/ SMALL_RECT srWindow;
/*177*/ COORD dwMaximumWindowSize;
/*178*/ }CONSOLE_SCREEN_BUFFER_INFO,*PCONSOLE_SCREEN_BUFFER_INFO;
/*180*/ typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX{
/*181*/ ULONG cbSize;
/*182*/ COORD dwSize;
/*183*/ COORD dwCursorPosition;
/*184*/ WORD wAttributes;
/*185*/ SMALL_RECT srWindow;
/*186*/ COORD dwMaximumWindowSize;
/*187*/ WORD wPopupAttributes;
/*188*/ BOOL bFullscreenSupported;
/*189*/ COLORREF ColorTable[16];
/*190*/ }CONSOLE_SCREEN_BUFFER_INFOEX,*PCONSOLE_SCREEN_BUFFER_INFOEX;
/*192*/ typedef struct _CONSOLE_CURSOR_INFO{
/*193*/ DWORD dwSize;
/*194*/ BOOL bVisible;
/*195*/ }CONSOLE_CURSOR_INFO,*PCONSOLE_CURSOR_INFO;
/*197*/ typedef struct _CONSOLE_FONT_INFO{
/*198*/ DWORD nFont;
/*199*/ COORD dwFontSize;
/*200*/ }CONSOLE_FONT_INFO,*PCONSOLE_FONT_INFO;
/*203*/ typedef struct _CONSOLE_FONT_INFOEX{
/*204*/ ULONG cbSize;
/*205*/ DWORD nFont;
/*206*/ COORD dwFontSize;
/*207*/ UINT FontFamily;
/*208*/ UINT FontWeight;
/*209*/ WCHAR FaceName[32];
/*210*/ }CONSOLE_FONT_INFOEX,*PCONSOLE_FONT_INFOEX;
/*214*/ typedef struct _CONSOLE_HISTORY_INFO{
/*215*/ UINT cbSize;
/*216*/ UINT HistoryBufferSize;
/*217*/ UINT NumberOfHistoryBuffers;
/*218*/ DWORD dwFlags;
/*219*/ }CONSOLE_HISTORY_INFO,*PCONSOLE_HISTORY_INFO;
/*243*/ typedef
/*244*/ BOOL
/*245*/ (typ*PHANDLER_ROUTINE)(
/*246*/ DWORD CtrlType
/*247*/ );
/*282*/ 
/*283*/ BOOL
/*284*/ typ
/*285*/ PeekConsoleInputA(
/*286*/ typ typ typ typ typ HANDLE hConsoleInput,
/*287*/ typ typ typ typ typ PINPUT_RECORD lpBuffer,
/*288*/ typ typ typ typ typ DWORD nLength,
/*289*/ typ typ typ typ typ LPDWORD lpNumberOfEventsRead
/*290*/ );
/*291*/ 
/*292*/ BOOL
/*293*/ typ
/*294*/ PeekConsoleInputW(
/*295*/ typ typ typ typ typ HANDLE hConsoleInput,
/*296*/ typ typ typ typ typ PINPUT_RECORD lpBuffer,
/*297*/ typ typ typ typ typ DWORD nLength,
/*298*/ typ typ typ typ typ LPDWORD lpNumberOfEventsRead
/*299*/ );
/*306*/ 
/*307*/ BOOL
/*308*/ typ
/*309*/ ReadConsoleInputA(
/*310*/ typ typ typ typ typ HANDLE hConsoleInput,
/*311*/ typ typ typ typ typ PINPUT_RECORD lpBuffer,
/*312*/ typ typ typ typ typ DWORD nLength,
/*313*/ typ typ typ typ typ LPDWORD lpNumberOfEventsRead
/*314*/ );
/*315*/ 
/*316*/ BOOL
/*317*/ typ
/*318*/ ReadConsoleInputW(
/*319*/ typ typ typ typ typ HANDLE hConsoleInput,
/*320*/ typ typ typ typ typ PINPUT_RECORD lpBuffer,
/*321*/ typ typ typ typ typ DWORD nLength,
/*322*/ typ typ typ typ typ LPDWORD lpNumberOfEventsRead
/*323*/ );
/*330*/ 
/*331*/ BOOL
/*332*/ typ
/*333*/ WriteConsoleInputA(
/*334*/ typ typ typ typ typ HANDLE hConsoleInput,
/*335*/ typ typ typ typ typ typ typ const INPUT_RECORD*lpBuffer,
/*336*/ typ typ typ typ typ DWORD nLength,
/*337*/ typ typ typ typ typ LPDWORD lpNumberOfEventsWritten
/*338*/ );
/*339*/ 
/*340*/ BOOL
/*341*/ typ
/*342*/ WriteConsoleInputW(
/*343*/ typ typ typ typ typ HANDLE hConsoleInput,
/*344*/ typ typ typ typ typ typ typ const INPUT_RECORD*lpBuffer,
/*345*/ typ typ typ typ typ DWORD nLength,
/*346*/ typ typ typ typ typ LPDWORD lpNumberOfEventsWritten
/*347*/ );
/*354*/ 
/*355*/ BOOL
/*356*/ typ
/*357*/ ReadConsoleOutputA(
/*358*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*359*/ typ typ typ typ typ PCHAR_INFO lpBuffer,
/*360*/ typ typ typ typ typ COORD dwBufferSize,
/*361*/ typ typ typ typ typ COORD dwBufferCoord,
/*362*/ typ typ typ typ typ PSMALL_RECT lpReadRegion
/*363*/ );
/*364*/ 
/*365*/ BOOL
/*366*/ typ
/*367*/ ReadConsoleOutputW(
/*368*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*369*/ typ typ typ typ typ PCHAR_INFO lpBuffer,
/*370*/ typ typ typ typ typ COORD dwBufferSize,
/*371*/ typ typ typ typ typ COORD dwBufferCoord,
/*372*/ typ typ typ typ typ PSMALL_RECT lpReadRegion
/*373*/ );
/*380*/ 
/*381*/ BOOL
/*382*/ typ
/*383*/ WriteConsoleOutputA(
/*384*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*385*/ typ typ typ typ typ typ typ const CHAR_INFO*lpBuffer,
/*386*/ typ typ typ typ typ COORD dwBufferSize,
/*387*/ typ typ typ typ typ COORD dwBufferCoord,
/*388*/ typ typ typ typ typ PSMALL_RECT lpWriteRegion
/*389*/ );
/*390*/ 
/*391*/ BOOL
/*392*/ typ
/*393*/ WriteConsoleOutputW(
/*394*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*395*/ typ typ typ typ typ typ typ const CHAR_INFO*lpBuffer,
/*396*/ typ typ typ typ typ COORD dwBufferSize,
/*397*/ typ typ typ typ typ COORD dwBufferCoord,
/*398*/ typ typ typ typ typ PSMALL_RECT lpWriteRegion
/*399*/ );
/*406*/ 
/*407*/ BOOL
/*408*/ typ
/*409*/ ReadConsoleOutputCharacterA(
/*410*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*411*/ typ typ typ typ typ LPSTR lpCharacter,
/*412*/ typ typ typ typ typ DWORD nLength,
/*413*/ typ typ typ typ typ COORD dwReadCoord,
/*414*/ typ typ typ typ typ LPDWORD lpNumberOfCharsRead
/*415*/ );
/*416*/ 
/*417*/ BOOL
/*418*/ typ
/*419*/ ReadConsoleOutputCharacterW(
/*420*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*421*/ typ typ typ typ typ LPWSTR lpCharacter,
/*422*/ typ typ typ typ typ DWORD nLength,
/*423*/ typ typ typ typ typ COORD dwReadCoord,
/*424*/ typ typ typ typ typ LPDWORD lpNumberOfCharsRead
/*425*/ );
/*432*/ 
/*433*/ BOOL
/*434*/ typ
/*435*/ ReadConsoleOutputAttribute(
/*436*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*437*/ typ typ typ typ typ LPWORD lpAttribute,
/*438*/ typ typ typ typ typ DWORD nLength,
/*439*/ typ typ typ typ typ COORD dwReadCoord,
/*440*/ typ typ typ typ typ LPDWORD lpNumberOfAttrsRead
/*441*/ );
/*443*/ 
/*444*/ BOOL
/*445*/ typ
/*446*/ WriteConsoleOutputCharacterA(
/*447*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*448*/ typ typ typ typ typ typ typ LPCSTR lpCharacter,
/*449*/ typ typ typ typ typ DWORD nLength,
/*450*/ typ typ typ typ typ COORD dwWriteCoord,
/*451*/ typ typ typ typ typ LPDWORD lpNumberOfCharsWritten
/*452*/ );
/*453*/ 
/*454*/ BOOL
/*455*/ typ
/*456*/ WriteConsoleOutputCharacterW(
/*457*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*458*/ typ typ typ typ typ typ typ LPCWSTR lpCharacter,
/*459*/ typ typ typ typ typ DWORD nLength,
/*460*/ typ typ typ typ typ COORD dwWriteCoord,
/*461*/ typ typ typ typ typ LPDWORD lpNumberOfCharsWritten
/*462*/ );
/*469*/ 
/*470*/ BOOL
/*471*/ typ
/*472*/ WriteConsoleOutputAttribute(
/*473*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*474*/ typ typ typ typ typ typ typ const WORD*lpAttribute,
/*475*/ typ typ typ typ typ DWORD nLength,
/*476*/ typ typ typ typ typ COORD dwWriteCoord,
/*477*/ typ typ typ typ typ LPDWORD lpNumberOfAttrsWritten
/*478*/ );
/*480*/ 
/*481*/ BOOL
/*482*/ typ
/*483*/ FillConsoleOutputCharacterA(
/*484*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*485*/ typ typ typ typ typ typ typ CHAR cCharacter,
/*486*/ typ typ typ typ typ DWORD nLength,
/*487*/ typ typ typ typ typ COORD dwWriteCoord,
/*488*/ typ typ typ typ typ LPDWORD lpNumberOfCharsWritten
/*489*/ );
/*490*/ 
/*491*/ BOOL
/*492*/ typ
/*493*/ FillConsoleOutputCharacterW(
/*494*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*495*/ typ typ typ typ typ typ typ WCHAR cCharacter,
/*496*/ typ typ typ typ typ DWORD nLength,
/*497*/ typ typ typ typ typ COORD dwWriteCoord,
/*498*/ typ typ typ typ typ LPDWORD lpNumberOfCharsWritten
/*499*/ );
/*506*/ 
/*507*/ BOOL
/*508*/ typ
/*509*/ FillConsoleOutputAttribute(
/*510*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*511*/ typ typ typ typ typ WORD wAttribute,
/*512*/ typ typ typ typ typ DWORD nLength,
/*513*/ typ typ typ typ typ COORD dwWriteCoord,
/*514*/ typ typ typ typ typ LPDWORD lpNumberOfAttrsWritten
/*515*/ );
/*517*/ 
/*518*/ BOOL
/*519*/ typ
/*520*/ GetConsoleMode(
/*521*/ typ typ typ typ typ HANDLE hConsoleHandle,
/*522*/ typ typ typ typ typ LPDWORD lpMode
/*523*/ );
/*525*/ 
/*526*/ BOOL
/*527*/ typ
/*528*/ GetNumberOfConsoleInputEvents(
/*529*/ typ typ typ typ typ HANDLE hConsoleInput,
/*530*/ typ typ typ typ typ LPDWORD lpNumberOfEvents
/*531*/ );
/*536*/ 
/*537*/ BOOL
/*538*/ typ
/*539*/ GetConsoleScreenBufferInfo(
/*540*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*541*/ typ typ typ typ typ PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
/*542*/ );
/*544*/ 
/*545*/ BOOL
/*546*/ typ
/*547*/ GetConsoleScreenBufferInfoEx(
/*548*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*549*/ typ typ typ typ typ typ typ typ typ typ typ PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
/*551*/ 
/*552*/ BOOL
/*553*/ typ
/*554*/ SetConsoleScreenBufferInfoEx(
/*555*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*556*/ typ typ typ typ typ PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
/*558*/ 
/*559*/ COORD
/*560*/ typ
/*561*/ GetLargestConsoleWindowSize(
/*562*/ typ typ typ typ typ HANDLE hConsoleOutput
/*563*/ );
/*565*/ 
/*566*/ BOOL
/*567*/ typ
/*568*/ GetConsoleCursorInfo(
/*569*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*570*/ typ typ typ typ typ PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
/*571*/ );
/*631*/ 
/*632*/ BOOL
/*633*/ typ
/*634*/ GetNumberOfConsoleMouseButtons(
/*635*/ typ typ typ typ typ LPDWORD lpNumberOfMouseButtons
/*636*/ );
/*638*/ 
/*639*/ BOOL
/*640*/ typ
/*641*/ SetConsoleMode(
/*642*/ typ typ typ typ typ HANDLE hConsoleHandle,
/*643*/ typ typ typ typ typ DWORD dwMode
/*644*/ );
/*646*/ 
/*647*/ BOOL
/*648*/ typ
/*649*/ SetConsoleActiveScreenBuffer(
/*650*/ typ typ typ typ typ HANDLE hConsoleOutput
/*651*/ );
/*653*/ 
/*654*/ BOOL
/*655*/ typ
/*656*/ FlushConsoleInputBuffer(
/*657*/ typ typ typ typ typ HANDLE hConsoleInput
/*658*/ );
/*660*/ 
/*661*/ BOOL
/*662*/ typ
/*663*/ SetConsoleScreenBufferSize(
/*664*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*665*/ typ typ typ typ typ COORD dwSize
/*666*/ );
/*668*/ 
/*669*/ BOOL
/*670*/ typ
/*671*/ SetConsoleCursorPosition(
/*672*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*673*/ typ typ typ typ typ COORD dwCursorPosition
/*674*/ );
/*676*/ 
/*677*/ BOOL
/*678*/ typ
/*679*/ SetConsoleCursorInfo(
/*680*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*681*/ typ typ typ typ typ const CONSOLE_CURSOR_INFO*lpConsoleCursorInfo
/*682*/ );
/*684*/ 
/*685*/ BOOL
/*686*/ typ
/*687*/ ScrollConsoleScreenBufferA(
/*688*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*689*/ typ typ typ typ typ const SMALL_RECT*lpScrollRectangle,
/*690*/ typ typ typ typ typ typ typ const SMALL_RECT*lpClipRectangle,
/*691*/ typ typ typ typ typ COORD dwDestinationOrigin,
/*692*/ typ typ typ typ typ const CHAR_INFO*lpFill
/*693*/ );
/*694*/ 
/*695*/ BOOL
/*696*/ typ
/*697*/ ScrollConsoleScreenBufferW(
/*698*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*699*/ typ typ typ typ typ const SMALL_RECT*lpScrollRectangle,
/*700*/ typ typ typ typ typ typ typ const SMALL_RECT*lpClipRectangle,
/*701*/ typ typ typ typ typ COORD dwDestinationOrigin,
/*702*/ typ typ typ typ typ const CHAR_INFO*lpFill
/*703*/ );
/*710*/ 
/*711*/ BOOL
/*712*/ typ
/*713*/ SetConsoleWindowInfo(
/*714*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*715*/ typ typ typ typ typ BOOL bAbsolute,
/*716*/ typ typ typ typ typ const SMALL_RECT*lpConsoleWindow
/*717*/ );
/*719*/ 
/*720*/ BOOL
/*721*/ typ
/*722*/ SetConsoleTextAttribute(
/*723*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*724*/ typ typ typ typ typ WORD wAttributes
/*725*/ );
/*727*/ 
/*728*/ BOOL
/*729*/ typ
/*730*/ SetConsoleCtrlHandler(
/*731*/ typ typ typ typ typ typ typ PHANDLER_ROUTINE HandlerRoutine,
/*732*/ typ typ typ typ typ BOOL Add);
/*734*/ 
/*735*/ BOOL
/*736*/ typ
/*737*/ GenerateConsoleCtrlEvent(
/*738*/ typ typ typ typ typ DWORD dwCtrlEvent,
/*739*/ typ typ typ typ typ DWORD dwProcessGroupId
/*740*/ );
/*742*/ 
/*743*/ BOOL
/*744*/ typ
/*745*/ AllocConsole(void);
/*747*/ 
/*748*/ BOOL
/*749*/ typ
/*750*/ FreeConsole(void);
/*763*/ 
/*764*/ DWORD
/*765*/ typ
/*766*/ GetConsoleTitleA(
/*767*/ typ typ typ typ typ LPSTR lpConsoleTitle,
/*768*/ typ typ typ typ typ DWORD nSize
/*769*/ );
/*770*/ 
/*771*/ DWORD
/*772*/ typ
/*773*/ GetConsoleTitleW(
/*774*/ typ typ typ typ typ LPWSTR lpConsoleTitle,
/*775*/ typ typ typ typ typ DWORD nSize
/*776*/ );
/*803*/ 
/*804*/ BOOL
/*805*/ typ
/*806*/ SetConsoleTitleA(
/*807*/ typ typ typ typ typ LPCSTR lpConsoleTitle
/*808*/ );
/*809*/ 
/*810*/ BOOL
/*811*/ typ
/*812*/ SetConsoleTitleW(
/*813*/ typ typ typ typ typ LPCWSTR lpConsoleTitle
/*814*/ );
/*821*/ typedef struct _CONSOLE_READCONSOLE_CONTROL{
/*822*/ typ ULONG nLength;
/*823*/ typ ULONG nInitialChars;
/*824*/ typ ULONG dwCtrlWakeupMask;
/*825*/ typ ULONG dwControlKeyState;
/*826*/ }CONSOLE_READCONSOLE_CONTROL,*PCONSOLE_READCONSOLE_CONTROL;
/*828*/ 
/*829*/ BOOL
/*830*/ typ
/*831*/ ReadConsoleA(
/*832*/ typ typ typ typ typ HANDLE hConsoleInput,
/*833*/ typ typ typ typ typ typ typ
/*834*/ LPVOID lpBuffer,
/*835*/ typ typ typ typ typ DWORD nNumberOfCharsToRead,
/*836*/ typ typ typ typ typ LPDWORD lpNumberOfCharsRead,
/*837*/ typ typ typ typ typ typ typ PCONSOLE_READCONSOLE_CONTROL pInputControl
/*838*/ );
/*839*/ 
/*840*/ BOOL
/*841*/ typ
/*842*/ ReadConsoleW(
/*843*/ typ typ typ typ typ HANDLE hConsoleInput,
/*844*/ typ typ typ typ typ typ typ
/*845*/ LPVOID lpBuffer,
/*846*/ typ typ typ typ typ DWORD nNumberOfCharsToRead,
/*847*/ typ typ typ typ typ LPDWORD lpNumberOfCharsRead,
/*848*/ typ typ typ typ typ typ typ PCONSOLE_READCONSOLE_CONTROL pInputControl
/*849*/ );
/*856*/ 
/*857*/ BOOL
/*858*/ typ
/*859*/ WriteConsoleA(
/*860*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*861*/ typ typ typ typ typ typ typ const void*lpBuffer,
/*862*/ typ typ typ typ typ DWORD nNumberOfCharsToWrite,
/*863*/ typ typ typ typ typ LPDWORD lpNumberOfCharsWritten,
/*864*/ typ typ LPVOID lpReserved
/*865*/ );
/*866*/ 
/*867*/ BOOL
/*868*/ typ
/*869*/ WriteConsoleW(
/*870*/ typ typ typ typ typ HANDLE hConsoleOutput,
/*871*/ typ typ typ typ typ typ typ const void*lpBuffer,
/*872*/ typ typ typ typ typ DWORD nNumberOfCharsToWrite,
/*873*/ typ typ typ typ typ LPDWORD lpNumberOfCharsWritten,
/*874*/ typ typ LPVOID lpReserved
/*875*/ );
/*884*/ typ
/*885*/ 
/*886*/ HANDLE
/*887*/ typ
/*888*/ CreateConsoleScreenBuffer(
/*889*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*890*/ typ typ typ typ typ DWORD dwShareMode,
/*891*/ typ typ typ typ typ typ typ const SECURITY_ATTRIBUTES*lpSecurityAttributes,
/*892*/ typ typ typ typ typ DWORD dwFlags,
/*893*/ typ typ LPVOID lpScreenBufferData
/*894*/ );
/*896*/ 
/*897*/ UINT
/*898*/ typ
/*899*/ GetConsoleCP(void);
/*901*/ 
/*902*/ BOOL
/*903*/ typ
/*904*/ SetConsoleCP(
/*905*/ typ typ typ typ typ UINT wCodePageID
/*906*/ );
/*908*/ 
/*909*/ UINT
/*910*/ typ
/*911*/ GetConsoleOutputCP(void);
/*913*/ 
/*914*/ BOOL
/*915*/ typ
/*916*/ SetConsoleOutputCP(
/*917*/ typ typ typ typ typ UINT wCodePageID
/*918*/ );
/*142*/ typedef struct tagVS_FIXEDFILEINFO
/*143*/ {
/*144*/ DWORD dwSignature;
/*145*/ DWORD dwStrucVersion;
/*146*/ DWORD dwFileVersionMS;
/*147*/ DWORD dwFileVersionLS;
/*148*/ DWORD dwProductVersionMS;
/*149*/ DWORD dwProductVersionLS;
/*150*/ DWORD dwFileFlagsMask;
/*151*/ DWORD dwFileFlags;
/*152*/ DWORD dwFileOS;
/*153*/ DWORD dwFileType;
/*154*/ DWORD dwFileSubtype;
/*155*/ DWORD dwFileDateMS;
/*156*/ DWORD dwFileDateLS;
/*157*/ }VS_FIXEDFILEINFO;
/*161*/ DWORD
/*162*/ typ
/*163*/ VerFindFileA(
/*164*/ typ typ typ typ typ DWORD uFlags,
/*165*/ typ typ typ typ typ LPCSTR szFileName,
/*166*/ typ typ typ typ typ typ typ LPCSTR szWinDir,
/*167*/ typ typ typ typ typ LPCSTR szAppDir,
/*168*/ typ typ typ typ typ LPSTR szCurDir,
/*169*/ typ typ typ typ typ PUINT lpuCurDirLen,
/*170*/ typ typ typ typ typ LPSTR szDestDir,
/*171*/ typ typ typ typ typ PUINT lpuDestDirLen
/*172*/ );
/*173*/ DWORD
/*174*/ typ
/*175*/ VerFindFileW(
/*176*/ typ typ typ typ typ DWORD uFlags,
/*177*/ typ typ typ typ typ LPCWSTR szFileName,
/*178*/ typ typ typ typ typ typ typ LPCWSTR szWinDir,
/*179*/ typ typ typ typ typ LPCWSTR szAppDir,
/*180*/ typ typ typ typ typ LPWSTR szCurDir,
/*181*/ typ typ typ typ typ PUINT lpuCurDirLen,
/*182*/ typ typ typ typ typ LPWSTR szDestDir,
/*183*/ typ typ typ typ typ PUINT lpuDestDirLen
/*184*/ );
/*191*/ DWORD
/*192*/ typ
/*193*/ VerInstallFileA(
/*194*/ typ typ typ typ typ DWORD uFlags,
/*195*/ typ typ typ typ typ LPCSTR szSrcFileName,
/*196*/ typ typ typ typ typ LPCSTR szDestFileName,
/*197*/ typ typ typ typ typ LPCSTR szSrcDir,
/*198*/ typ typ typ typ typ LPCSTR szDestDir,
/*199*/ typ typ typ typ typ LPCSTR szCurDir,
/*200*/ typ typ typ typ typ LPSTR szTmpFile,
/*201*/ typ typ typ typ typ PUINT lpuTmpFileLen
/*202*/ );
/*203*/ DWORD
/*204*/ typ
/*205*/ VerInstallFileW(
/*206*/ typ typ typ typ typ DWORD uFlags,
/*207*/ typ typ typ typ typ LPCWSTR szSrcFileName,
/*208*/ typ typ typ typ typ LPCWSTR szDestFileName,
/*209*/ typ typ typ typ typ LPCWSTR szSrcDir,
/*210*/ typ typ typ typ typ LPCWSTR szDestDir,
/*211*/ typ typ typ typ typ LPCWSTR szCurDir,
/*212*/ typ typ typ typ typ LPWSTR szTmpFile,
/*213*/ typ typ typ typ typ PUINT lpuTmpFileLen
/*214*/ );
/*222*/ DWORD
/*223*/ typ
/*224*/ GetFileVersionInfoSizeA(
/*225*/ typ typ typ typ typ LPCSTR lptstrFilename,
/*226*/ typ typ typ typ typ typ typ LPDWORD lpdwHandle
/*227*/ );
/*229*/ DWORD
/*230*/ typ
/*231*/ GetFileVersionInfoSizeW(
/*232*/ typ typ typ typ typ LPCWSTR lptstrFilename,
/*233*/ typ typ typ typ typ typ typ LPDWORD lpdwHandle
/*234*/ );
/*242*/ BOOL
/*243*/ typ
/*244*/ GetFileVersionInfoA(
/*245*/ typ typ typ typ typ LPCSTR lptstrFilename,
/*246*/ typ typ DWORD dwHandle,
/*247*/ typ typ typ typ typ DWORD dwLen,
/*248*/ typ typ typ typ typ LPVOID lpData
/*249*/ );
/*251*/ BOOL
/*252*/ typ
/*253*/ GetFileVersionInfoW(
/*254*/ typ typ typ typ typ LPCWSTR lptstrFilename,
/*255*/ typ typ DWORD dwHandle,
/*256*/ typ typ typ typ typ DWORD dwLen,
/*257*/ typ typ typ typ typ LPVOID lpData
/*258*/ );
/*265*/ DWORD typ GetFileVersionInfoSizeExA(typ typ typ typ typ DWORD dwFlags,typ typ typ typ typ LPCSTR lpwstrFilename,typ typ typ typ typ LPDWORD lpdwHandle);
/*266*/ DWORD typ GetFileVersionInfoSizeExW(typ typ typ typ typ DWORD dwFlags,typ typ typ typ typ LPCWSTR lpwstrFilename,typ typ typ typ typ LPDWORD lpdwHandle);
/*273*/ BOOL typ GetFileVersionInfoExA(typ typ typ typ typ DWORD dwFlags,
/*274*/ typ typ typ typ typ LPCSTR lpwstrFilename,
/*275*/ typ typ DWORD dwHandle,
/*276*/ typ typ typ typ typ DWORD dwLen,
/*277*/ typ typ typ typ typ LPVOID lpData);
/*278*/ BOOL typ GetFileVersionInfoExW(typ typ typ typ typ DWORD dwFlags,
/*279*/ typ typ typ typ typ LPCWSTR lpwstrFilename,
/*280*/ typ typ DWORD dwHandle,
/*281*/ typ typ typ typ typ DWORD dwLen,
/*282*/ typ typ typ typ typ LPVOID lpData);
/*289*/ DWORD
/*290*/ typ
/*291*/ VerLanguageNameA(
/*292*/ typ typ typ typ typ DWORD wLang,
/*293*/ typ typ typ typ typ LPSTR szLang,
/*294*/ typ typ typ typ typ DWORD cchLang
/*295*/ );
/*296*/ DWORD
/*297*/ typ
/*298*/ VerLanguageNameW(
/*299*/ typ typ typ typ typ DWORD wLang,
/*300*/ typ typ typ typ typ LPWSTR szLang,
/*301*/ typ typ typ typ typ DWORD cchLang
/*302*/ );
/*309*/ BOOL
/*310*/ typ
/*311*/ VerQueryValueA(
/*312*/ typ typ typ typ typ LPCVOID pBlock,
/*313*/ typ typ typ typ typ LPCSTR lpSubBlock,
/*314*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*lplpBuffer,
/*315*/ typ typ typ typ typ PUINT puLen
/*316*/ );
/*317*/ BOOL
/*318*/ typ
/*319*/ VerQueryValueW(
/*320*/ typ typ typ typ typ LPCVOID pBlock,
/*321*/ typ typ typ typ typ LPCWSTR lpSubBlock,
/*322*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*lplpBuffer,
/*323*/ typ typ typ typ typ PUINT puLen
/*324*/ );
/*65*/ typedef ACCESS_MASK REGSAM;
/*93*/ struct val_context{
/*94*/ int valuelen;
/*95*/ LPVOID value_context;
/*96*/ LPVOID val_buff_ptr;
/*97*/ };
/*99*/ typedef struct val_context typ*PVALCONTEXT;
/*101*/ typedef struct pvalueA{
/*102*/ LPSTR pv_valuename;
/*103*/ int pv_valuelen;
/*104*/ LPVOID pv_value_context;
/*105*/ DWORD pv_type;
/*106*/ }PVALUEA,typ*PPVALUEA;
/*107*/ typedef struct pvalueW{
/*108*/ LPWSTR pv_valuename;
/*109*/ int pv_valuelen;
/*110*/ LPVOID pv_value_context;
/*111*/ DWORD pv_type;
/*112*/ }PVALUEW,typ*PPVALUEW;
/*117*/ typedef PVALUEA PVALUE;
/*118*/ typedef PPVALUEA PPVALUE;
/*121*/ typedef
/*122*/ DWORD
/*123*/ QUERYHANDLER(LPVOID keycontext,PVALCONTEXT val_list,DWORD num_vals,
/*124*/ LPVOID outputbuffer,DWORD typ*total_outlen,DWORD input_blen);
/*126*/ typedef QUERYHANDLER typ*PQUERYHANDLER;
/*128*/ typedef struct provider_info{
/*129*/ PQUERYHANDLER pi_R0_1val;
/*130*/ PQUERYHANDLER pi_R0_allvals;
/*131*/ PQUERYHANDLER pi_R3_1val;
/*132*/ PQUERYHANDLER pi_R3_allvals;
/*133*/ DWORD pi_flags;
/*134*/ LPVOID pi_key_context;
/*135*/ }REG_PROVIDER;
/*137*/ typedef struct provider_info typ*PPROVIDER;
/*139*/ typedef struct value_entA{
/*140*/ LPSTR ve_valuename;
/*141*/ DWORD ve_valuelen;
/*142*/ DWORD_PTR ve_valueptr;
/*143*/ DWORD ve_type;
/*144*/ }VALENTA,typ*PVALENTA;
/*145*/ typedef struct value_entW{
/*146*/ LPWSTR ve_valuename;
/*147*/ DWORD ve_valuelen;
/*148*/ DWORD_PTR ve_valueptr;
/*149*/ DWORD ve_type;
/*150*/ }VALENTW,typ*PVALENTW;
/*155*/ typedef VALENTA VALENT;
/*156*/ typedef PVALENTA PVALENT;
/*175*/ typedef typ LONG LSTATUS;
/*177*/ 
/*178*/ LSTATUS
/*179*/ typ
/*180*/ RegCloseKey(
/*181*/ typ typ typ typ typ HKEY hKey
/*182*/ );
/*184*/ 
/*185*/ LSTATUS
/*186*/ typ
/*187*/ RegOverridePredefKey(
/*188*/ typ typ typ typ typ HKEY hKey,
/*189*/ typ typ typ typ typ typ typ HKEY hNewHKey
/*190*/ );
/*192*/ 
/*193*/ LSTATUS
/*194*/ typ
/*195*/ RegOpenUserClassesRoot(
/*196*/ typ typ typ typ typ HANDLE hToken,
/*197*/ typ typ DWORD dwOptions,
/*198*/ typ typ typ typ typ REGSAM samDesired,
/*199*/ typ typ typ typ typ PHKEY phkResult
/*200*/ );
/*202*/ 
/*203*/ LSTATUS
/*204*/ typ
/*205*/ RegOpenCurrentUser(
/*206*/ typ typ typ typ typ REGSAM samDesired,
/*207*/ typ typ typ typ typ PHKEY phkResult
/*208*/ );
/*210*/ 
/*211*/ LSTATUS
/*212*/ typ
/*213*/ RegDisablePredefinedCache(
/*214*/ void
/*215*/ );
/*217*/ 
/*218*/ LSTATUS
/*219*/ typ
/*220*/ RegDisablePredefinedCacheEx(
/*221*/ void
/*222*/ );
/*224*/ 
/*225*/ LSTATUS
/*226*/ typ
/*227*/ RegConnectRegistryA(
/*228*/ typ typ typ typ typ typ typ LPCSTR lpMachineName,
/*229*/ typ typ typ typ typ HKEY hKey,
/*230*/ typ typ typ typ typ PHKEY phkResult
/*231*/ );
/*232*/ 
/*233*/ LSTATUS
/*234*/ typ
/*235*/ RegConnectRegistryW(
/*236*/ typ typ typ typ typ typ typ LPCWSTR lpMachineName,
/*237*/ typ typ typ typ typ HKEY hKey,
/*238*/ typ typ typ typ typ PHKEY phkResult
/*239*/ );
/*246*/ 
/*247*/ LSTATUS
/*248*/ typ
/*249*/ RegConnectRegistryExA(
/*250*/ typ typ typ typ typ typ typ LPCSTR lpMachineName,
/*251*/ typ typ typ typ typ HKEY hKey,
/*252*/ typ typ typ typ typ ULONG Flags,
/*253*/ typ typ typ typ typ PHKEY phkResult
/*254*/ );
/*255*/ 
/*256*/ LSTATUS
/*257*/ typ
/*258*/ RegConnectRegistryExW(
/*259*/ typ typ typ typ typ typ typ LPCWSTR lpMachineName,
/*260*/ typ typ typ typ typ HKEY hKey,
/*261*/ typ typ typ typ typ ULONG Flags,
/*262*/ typ typ typ typ typ PHKEY phkResult
/*263*/ );
/*270*/ 
/*271*/ LSTATUS
/*272*/ typ
/*273*/ RegCreateKeyA(
/*274*/ typ typ typ typ typ HKEY hKey,
/*275*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*276*/ typ typ typ typ typ PHKEY phkResult
/*277*/ );
/*278*/ 
/*279*/ LSTATUS
/*280*/ typ
/*281*/ RegCreateKeyW(
/*282*/ typ typ typ typ typ HKEY hKey,
/*283*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*284*/ typ typ typ typ typ PHKEY phkResult
/*285*/ );
/*292*/ 
/*293*/ LSTATUS
/*294*/ typ
/*295*/ RegCreateKeyExA(
/*296*/ typ typ typ typ typ HKEY hKey,
/*297*/ typ typ typ typ typ LPCSTR lpSubKey,
/*298*/ typ typ DWORD Reserved,
/*299*/ typ typ typ typ typ typ typ LPSTR lpClass,
/*300*/ typ typ typ typ typ DWORD dwOptions,
/*301*/ typ typ typ typ typ REGSAM samDesired,
/*302*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*303*/ typ typ typ typ typ PHKEY phkResult,
/*304*/ typ typ typ typ typ typ typ LPDWORD lpdwDisposition
/*305*/ );
/*306*/ 
/*307*/ LSTATUS
/*308*/ typ
/*309*/ RegCreateKeyExW(
/*310*/ typ typ typ typ typ HKEY hKey,
/*311*/ typ typ typ typ typ LPCWSTR lpSubKey,
/*312*/ typ typ DWORD Reserved,
/*313*/ typ typ typ typ typ typ typ LPWSTR lpClass,
/*314*/ typ typ typ typ typ DWORD dwOptions,
/*315*/ typ typ typ typ typ REGSAM samDesired,
/*316*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*317*/ typ typ typ typ typ PHKEY phkResult,
/*318*/ typ typ typ typ typ typ typ LPDWORD lpdwDisposition
/*319*/ );
/*326*/ 
/*327*/ LSTATUS
/*328*/ typ
/*329*/ RegCreateKeyTransactedA(
/*330*/ typ typ typ typ typ HKEY hKey,
/*331*/ typ typ typ typ typ LPCSTR lpSubKey,
/*332*/ typ typ DWORD Reserved,
/*333*/ typ typ typ typ typ typ typ LPSTR lpClass,
/*334*/ typ typ typ typ typ DWORD dwOptions,
/*335*/ typ typ typ typ typ REGSAM samDesired,
/*336*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*337*/ typ typ typ typ typ PHKEY phkResult,
/*338*/ typ typ typ typ typ typ typ LPDWORD lpdwDisposition,
/*339*/ typ typ typ typ typ HANDLE hTransaction,
/*340*/ typ typ PVOID pExtendedParemeter
/*341*/ );
/*342*/ 
/*343*/ LSTATUS
/*344*/ typ
/*345*/ RegCreateKeyTransactedW(
/*346*/ typ typ typ typ typ HKEY hKey,
/*347*/ typ typ typ typ typ LPCWSTR lpSubKey,
/*348*/ typ typ DWORD Reserved,
/*349*/ typ typ typ typ typ typ typ LPWSTR lpClass,
/*350*/ typ typ typ typ typ DWORD dwOptions,
/*351*/ typ typ typ typ typ REGSAM samDesired,
/*352*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*353*/ typ typ typ typ typ PHKEY phkResult,
/*354*/ typ typ typ typ typ typ typ LPDWORD lpdwDisposition,
/*355*/ typ typ typ typ typ HANDLE hTransaction,
/*356*/ typ typ PVOID pExtendedParemeter
/*357*/ );
/*364*/ 
/*365*/ LSTATUS
/*366*/ typ
/*367*/ RegDeleteKeyA(
/*368*/ typ typ typ typ typ HKEY hKey,
/*369*/ typ typ typ typ typ LPCSTR lpSubKey
/*370*/ );
/*371*/ 
/*372*/ LSTATUS
/*373*/ typ
/*374*/ RegDeleteKeyW(
/*375*/ typ typ typ typ typ HKEY hKey,
/*376*/ typ typ typ typ typ LPCWSTR lpSubKey
/*377*/ );
/*384*/ 
/*385*/ LSTATUS
/*386*/ typ
/*387*/ RegDeleteKeyExA(
/*388*/ typ typ typ typ typ HKEY hKey,
/*389*/ typ typ typ typ typ LPCSTR lpSubKey,
/*390*/ typ typ typ typ typ REGSAM samDesired,
/*391*/ typ typ DWORD Reserved
/*392*/ );
/*393*/ 
/*394*/ LSTATUS
/*395*/ typ
/*396*/ RegDeleteKeyExW(
/*397*/ typ typ typ typ typ HKEY hKey,
/*398*/ typ typ typ typ typ LPCWSTR lpSubKey,
/*399*/ typ typ typ typ typ REGSAM samDesired,
/*400*/ typ typ DWORD Reserved
/*401*/ );
/*408*/ 
/*409*/ LSTATUS
/*410*/ typ
/*411*/ RegDeleteKeyTransactedA(
/*412*/ typ typ typ typ typ HKEY hKey,
/*413*/ typ typ typ typ typ LPCSTR lpSubKey,
/*414*/ typ typ typ typ typ REGSAM samDesired,
/*415*/ typ typ DWORD Reserved,
/*416*/ typ typ typ typ typ HANDLE hTransaction,
/*417*/ typ typ PVOID pExtendedParameter
/*418*/ );
/*419*/ 
/*420*/ LSTATUS
/*421*/ typ
/*422*/ RegDeleteKeyTransactedW(
/*423*/ typ typ typ typ typ HKEY hKey,
/*424*/ typ typ typ typ typ LPCWSTR lpSubKey,
/*425*/ typ typ typ typ typ REGSAM samDesired,
/*426*/ typ typ DWORD Reserved,
/*427*/ typ typ typ typ typ HANDLE hTransaction,
/*428*/ typ typ PVOID pExtendedParameter
/*429*/ );
/*436*/ 
/*437*/ LONG
/*438*/ typ
/*439*/ RegDisableReflectionKey(
/*440*/ typ typ typ typ typ HKEY hBase
/*441*/ );
/*443*/ 
/*444*/ LONG
/*445*/ typ
/*446*/ RegEnableReflectionKey(
/*447*/ typ typ typ typ typ HKEY hBase
/*448*/ );
/*450*/ 
/*451*/ LONG
/*452*/ typ
/*453*/ RegQueryReflectionKey(
/*454*/ typ typ typ typ typ HKEY hBase,
/*455*/ typ typ typ typ typ BOOL*bIsReflectionDisabled
/*456*/ );
/*458*/ 
/*459*/ LSTATUS
/*460*/ typ
/*461*/ RegDeleteValueA(
/*462*/ typ typ typ typ typ HKEY hKey,
/*463*/ typ typ typ typ typ typ typ LPCSTR lpValueName
/*464*/ );
/*465*/ 
/*466*/ LSTATUS
/*467*/ typ
/*468*/ RegDeleteValueW(
/*469*/ typ typ typ typ typ HKEY hKey,
/*470*/ typ typ typ typ typ typ typ LPCWSTR lpValueName
/*471*/ );
/*478*/ 
/*479*/ LSTATUS
/*480*/ typ
/*481*/ RegEnumKeyA(
/*482*/ typ typ typ typ typ HKEY hKey,
/*483*/ typ typ typ typ typ DWORD dwIndex,
/*484*/ typ typ typ typ typ typ typ typ typ LPSTR lpName,
/*485*/ typ typ typ typ typ DWORD cchName
/*486*/ );
/*487*/ 
/*488*/ LSTATUS
/*489*/ typ
/*490*/ RegEnumKeyW(
/*491*/ typ typ typ typ typ HKEY hKey,
/*492*/ typ typ typ typ typ DWORD dwIndex,
/*493*/ typ typ typ typ typ typ typ typ typ LPWSTR lpName,
/*494*/ typ typ typ typ typ DWORD cchName
/*495*/ );
/*502*/ 
/*503*/ LSTATUS
/*504*/ typ
/*505*/ RegEnumKeyExA(
/*506*/ typ typ typ typ typ HKEY hKey,
/*507*/ typ typ typ typ typ DWORD dwIndex,
/*508*/ typ typ typ typ typ typ typ typ typ LPSTR lpName,
/*509*/ typ typ typ typ typ LPDWORD lpcchName,
/*510*/ typ typ LPDWORD lpReserved,
/*511*/ typ typ typ typ typ typ typ typ typ LPSTR lpClass,
/*512*/ typ typ typ typ typ typ typ LPDWORD lpcchClass,
/*513*/ typ typ typ typ typ typ typ PFILETIME lpftLastWriteTime
/*514*/ );
/*515*/ 
/*516*/ LSTATUS
/*517*/ typ
/*518*/ RegEnumKeyExW(
/*519*/ typ typ typ typ typ HKEY hKey,
/*520*/ typ typ typ typ typ DWORD dwIndex,
/*521*/ typ typ typ typ typ typ typ typ typ LPWSTR lpName,
/*522*/ typ typ typ typ typ LPDWORD lpcchName,
/*523*/ typ typ LPDWORD lpReserved,
/*524*/ typ typ typ typ typ typ typ typ typ LPWSTR lpClass,
/*525*/ typ typ typ typ typ typ typ LPDWORD lpcchClass,
/*526*/ typ typ typ typ typ typ typ PFILETIME lpftLastWriteTime
/*527*/ );
/*534*/ 
/*535*/ LSTATUS
/*536*/ typ
/*537*/ RegEnumValueA(
/*538*/ typ typ typ typ typ HKEY hKey,
/*539*/ typ typ typ typ typ DWORD dwIndex,
/*540*/ typ typ typ typ typ typ typ typ typ LPSTR lpValueName,
/*541*/ typ typ typ typ typ LPDWORD lpcchValueName,
/*542*/ typ typ LPDWORD lpReserved,
/*543*/ typ typ typ typ typ typ typ LPDWORD lpType,
/*544*/ typ typ typ typ typ typ typ typ typ typ LPBYTE lpData,
/*545*/ typ typ typ typ typ typ typ LPDWORD lpcbData
/*546*/ );
/*547*/ 
/*548*/ LSTATUS
/*549*/ typ
/*550*/ RegEnumValueW(
/*551*/ typ typ typ typ typ HKEY hKey,
/*552*/ typ typ typ typ typ DWORD dwIndex,
/*553*/ typ typ typ typ typ typ typ typ typ LPWSTR lpValueName,
/*554*/ typ typ typ typ typ LPDWORD lpcchValueName,
/*555*/ typ typ LPDWORD lpReserved,
/*556*/ typ typ typ typ typ typ typ LPDWORD lpType,
/*557*/ typ typ typ typ typ typ typ typ typ typ LPBYTE lpData,
/*558*/ typ typ typ typ typ typ typ LPDWORD lpcbData
/*559*/ );
/*566*/ 
/*567*/ LSTATUS
/*568*/ typ
/*569*/ RegFlushKey(
/*570*/ typ typ typ typ typ HKEY hKey
/*571*/ );
/*573*/ 
/*574*/ LSTATUS
/*575*/ typ
/*576*/ RegGetKeySecurity(
/*577*/ typ typ typ typ typ HKEY hKey,
/*578*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*579*/ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*580*/ typ typ typ typ typ LPDWORD lpcbSecurityDescriptor
/*581*/ );
/*583*/ 
/*584*/ LSTATUS
/*585*/ typ
/*586*/ RegLoadKeyA(
/*587*/ typ typ typ typ typ HKEY hKey,
/*588*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*589*/ typ typ typ typ typ LPCSTR lpFile
/*590*/ );
/*591*/ 
/*592*/ LSTATUS
/*593*/ typ
/*594*/ RegLoadKeyW(
/*595*/ typ typ typ typ typ HKEY hKey,
/*596*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*597*/ typ typ typ typ typ LPCWSTR lpFile
/*598*/ );
/*605*/ 
/*606*/ LSTATUS
/*607*/ typ
/*608*/ RegNotifyChangeKeyValue(
/*609*/ typ typ typ typ typ HKEY hKey,
/*610*/ typ typ typ typ typ BOOL bWatchSubtree,
/*611*/ typ typ typ typ typ DWORD dwNotifyFilter,
/*612*/ typ typ typ typ typ typ typ HANDLE hEvent,
/*613*/ typ typ typ typ typ BOOL fAsynchronous
/*614*/ );
/*616*/ 
/*617*/ LSTATUS
/*618*/ typ
/*619*/ RegOpenKeyA(
/*620*/ typ typ typ typ typ HKEY hKey,
/*621*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*622*/ typ typ typ typ typ PHKEY phkResult
/*623*/ );
/*624*/ 
/*625*/ LSTATUS
/*626*/ typ
/*627*/ RegOpenKeyW(
/*628*/ typ typ typ typ typ HKEY hKey,
/*629*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*630*/ typ typ typ typ typ PHKEY phkResult
/*631*/ );
/*638*/ 
/*639*/ LSTATUS
/*640*/ typ
/*641*/ RegOpenKeyExA(
/*642*/ typ typ typ typ typ HKEY hKey,
/*643*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*644*/ typ typ DWORD ulOptions,
/*645*/ typ typ typ typ typ REGSAM samDesired,
/*646*/ typ typ typ typ typ PHKEY phkResult
/*647*/ );
/*648*/ 
/*649*/ LSTATUS
/*650*/ typ
/*651*/ RegOpenKeyExW(
/*652*/ typ typ typ typ typ HKEY hKey,
/*653*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*654*/ typ typ DWORD ulOptions,
/*655*/ typ typ typ typ typ REGSAM samDesired,
/*656*/ typ typ typ typ typ PHKEY phkResult
/*657*/ );
/*664*/ 
/*665*/ LSTATUS
/*666*/ typ
/*667*/ RegOpenKeyTransactedA(
/*668*/ typ typ typ typ typ HKEY hKey,
/*669*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*670*/ typ typ typ typ typ DWORD ulOptions,
/*671*/ typ typ typ typ typ REGSAM samDesired,
/*672*/ typ typ typ typ typ PHKEY phkResult,
/*673*/ typ typ typ typ typ HANDLE hTransaction,
/*674*/ typ typ PVOID pExtendedParemeter
/*675*/ );
/*676*/ 
/*677*/ LSTATUS
/*678*/ typ
/*679*/ RegOpenKeyTransactedW(
/*680*/ typ typ typ typ typ HKEY hKey,
/*681*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*682*/ typ typ typ typ typ DWORD ulOptions,
/*683*/ typ typ typ typ typ REGSAM samDesired,
/*684*/ typ typ typ typ typ PHKEY phkResult,
/*685*/ typ typ typ typ typ HANDLE hTransaction,
/*686*/ typ typ PVOID pExtendedParemeter
/*687*/ );
/*694*/ 
/*695*/ LSTATUS
/*696*/ typ
/*697*/ RegQueryInfoKeyA(
/*698*/ typ typ typ typ typ HKEY hKey,
/*699*/ typ typ typ typ typ typ typ typ typ LPSTR lpClass,
/*700*/ typ typ typ typ typ typ typ LPDWORD lpcchClass,
/*701*/ typ typ LPDWORD lpReserved,
/*702*/ typ typ typ typ typ typ typ LPDWORD lpcSubKeys,
/*703*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxSubKeyLen,
/*704*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxClassLen,
/*705*/ typ typ typ typ typ typ typ LPDWORD lpcValues,
/*706*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxValueNameLen,
/*707*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxValueLen,
/*708*/ typ typ typ typ typ typ typ LPDWORD lpcbSecurityDescriptor,
/*709*/ typ typ typ typ typ typ typ PFILETIME lpftLastWriteTime
/*710*/ );
/*711*/ 
/*712*/ LSTATUS
/*713*/ typ
/*714*/ RegQueryInfoKeyW(
/*715*/ typ typ typ typ typ HKEY hKey,
/*716*/ typ typ typ typ typ typ typ typ typ LPWSTR lpClass,
/*717*/ typ typ typ typ typ typ typ LPDWORD lpcchClass,
/*718*/ typ typ LPDWORD lpReserved,
/*719*/ typ typ typ typ typ typ typ LPDWORD lpcSubKeys,
/*720*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxSubKeyLen,
/*721*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxClassLen,
/*722*/ typ typ typ typ typ typ typ LPDWORD lpcValues,
/*723*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxValueNameLen,
/*724*/ typ typ typ typ typ typ typ LPDWORD lpcbMaxValueLen,
/*725*/ typ typ typ typ typ typ typ LPDWORD lpcbSecurityDescriptor,
/*726*/ typ typ typ typ typ typ typ PFILETIME lpftLastWriteTime
/*727*/ );
/*734*/ 
/*735*/ LSTATUS
/*736*/ typ
/*737*/ RegQueryValueA(
/*738*/ typ typ typ typ typ HKEY hKey,
/*739*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*740*/ typ typ typ typ typ typ typ typ typ typ LPSTR lpData,
/*741*/ typ typ typ typ typ typ typ PLONG lpcbData
/*742*/ );
/*743*/ 
/*744*/ LSTATUS
/*745*/ typ
/*746*/ RegQueryValueW(
/*747*/ typ typ typ typ typ HKEY hKey,
/*748*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*749*/ typ typ typ typ typ typ typ typ typ typ LPWSTR lpData,
/*750*/ typ typ typ typ typ typ typ PLONG lpcbData
/*751*/ );
/*760*/ 
/*761*/ LSTATUS
/*762*/ typ
/*763*/ RegQueryMultipleValuesA(
/*764*/ typ typ typ typ typ HKEY hKey,
/*765*/ typ typ typ typ typ PVALENTA val_list,
/*766*/ typ typ typ typ typ DWORD num_vals,
/*767*/ typ typ typ typ typ typ typ typ typ typ LPSTR lpValueBuf,
/*768*/ typ typ typ typ typ typ typ LPDWORD ldwTotsize
/*769*/ );
/*770*/ 
/*771*/ LSTATUS
/*772*/ typ
/*773*/ RegQueryMultipleValuesW(
/*774*/ typ typ typ typ typ HKEY hKey,
/*775*/ typ typ typ typ typ PVALENTW val_list,
/*776*/ typ typ typ typ typ DWORD num_vals,
/*777*/ typ typ typ typ typ typ typ typ typ typ LPWSTR lpValueBuf,
/*778*/ typ typ typ typ typ typ typ LPDWORD ldwTotsize
/*779*/ );
/*787*/ 
/*788*/ LSTATUS
/*789*/ typ
/*790*/ RegQueryValueExA(
/*791*/ typ typ typ typ typ HKEY hKey,
/*792*/ typ typ typ typ typ typ typ LPCSTR lpValueName,
/*793*/ typ typ LPDWORD lpReserved,
/*794*/ typ typ typ typ typ typ typ LPDWORD lpType,
/*795*/ typ typ typ typ typ typ typ typ typ typ LPBYTE lpData,
/*796*/ typ typ typ typ typ typ typ LPDWORD lpcbData
/*797*/ );
/*798*/ 
/*799*/ LSTATUS
/*800*/ typ
/*801*/ RegQueryValueExW(
/*802*/ typ typ typ typ typ HKEY hKey,
/*803*/ typ typ typ typ typ typ typ LPCWSTR lpValueName,
/*804*/ typ typ LPDWORD lpReserved,
/*805*/ typ typ typ typ typ typ typ LPDWORD lpType,
/*806*/ typ typ typ typ typ typ typ typ typ typ LPBYTE lpData,
/*807*/ typ typ typ typ typ typ typ LPDWORD lpcbData
/*808*/ );
/*815*/ 
/*816*/ LSTATUS
/*817*/ typ
/*818*/ RegReplaceKeyA(
/*819*/ typ typ typ typ typ HKEY hKey,
/*820*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*821*/ typ typ typ typ typ LPCSTR lpNewFile,
/*822*/ typ typ typ typ typ LPCSTR lpOldFile
/*823*/ );
/*824*/ 
/*825*/ LSTATUS
/*826*/ typ
/*827*/ RegReplaceKeyW(
/*828*/ typ typ typ typ typ HKEY hKey,
/*829*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*830*/ typ typ typ typ typ LPCWSTR lpNewFile,
/*831*/ typ typ typ typ typ LPCWSTR lpOldFile
/*832*/ );
/*839*/ 
/*840*/ LSTATUS
/*841*/ typ
/*842*/ RegRestoreKeyA(
/*843*/ typ typ typ typ typ HKEY hKey,
/*844*/ typ typ typ typ typ LPCSTR lpFile,
/*845*/ typ typ typ typ typ DWORD dwFlags
/*846*/ );
/*847*/ 
/*848*/ LSTATUS
/*849*/ typ
/*850*/ RegRestoreKeyW(
/*851*/ typ typ typ typ typ HKEY hKey,
/*852*/ typ typ typ typ typ LPCWSTR lpFile,
/*853*/ typ typ typ typ typ DWORD dwFlags
/*854*/ );
/*861*/ 
/*862*/ LSTATUS
/*863*/ typ
/*864*/ RegSaveKeyA(
/*865*/ typ typ typ typ typ HKEY hKey,
/*866*/ typ typ typ typ typ LPCSTR lpFile,
/*867*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*868*/ );
/*869*/ 
/*870*/ LSTATUS
/*871*/ typ
/*872*/ RegSaveKeyW(
/*873*/ typ typ typ typ typ HKEY hKey,
/*874*/ typ typ typ typ typ LPCWSTR lpFile,
/*875*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*876*/ );
/*883*/ 
/*884*/ LSTATUS
/*885*/ typ
/*886*/ RegSetKeySecurity(
/*887*/ typ typ typ typ typ HKEY hKey,
/*888*/ typ typ typ typ typ SECURITY_INFORMATION SecurityInformation,
/*889*/ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor
/*890*/ );
/*892*/ 
/*893*/ LSTATUS
/*894*/ typ
/*895*/ RegSetValueA(
/*896*/ typ typ typ typ typ HKEY hKey,
/*897*/ typ typ typ typ typ typ typ LPCSTR lpSubKey,
/*898*/ typ typ typ typ typ DWORD dwType,
/*899*/ typ typ typ typ typ typ typ typ typ LPCSTR lpData,
/*900*/ typ typ typ typ typ DWORD cbData
/*901*/ );
/*902*/ 
/*903*/ LSTATUS
/*904*/ typ
/*905*/ RegSetValueW(
/*906*/ typ typ typ typ typ HKEY hKey,
/*907*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey,
/*908*/ typ typ typ typ typ DWORD dwType,
/*909*/ typ typ typ typ typ typ typ typ typ LPCWSTR lpData,
/*910*/ typ typ typ typ typ DWORD cbData
/*911*/ );
/*919*/ 
/*920*/ LSTATUS
/*921*/ typ
/*922*/ RegSetValueExA(
/*923*/ typ typ typ typ typ HKEY hKey,
/*924*/ typ typ typ typ typ typ typ LPCSTR lpValueName,
/*925*/ typ typ DWORD Reserved,
/*926*/ typ typ typ typ typ DWORD dwType,
/*927*/ typ typ typ typ typ typ typ typ typ const BYTE*lpData,
/*928*/ typ typ typ typ typ DWORD cbData
/*929*/ );
/*930*/ 
/*931*/ LSTATUS
/*932*/ typ
/*933*/ RegSetValueExW(
/*934*/ typ typ typ typ typ HKEY hKey,
/*935*/ typ typ typ typ typ typ typ LPCWSTR lpValueName,
/*936*/ typ typ DWORD Reserved,
/*937*/ typ typ typ typ typ DWORD dwType,
/*938*/ typ typ typ typ typ typ typ typ typ const BYTE*lpData,
/*939*/ typ typ typ typ typ DWORD cbData
/*940*/ );
/*947*/ 
/*948*/ LSTATUS
/*949*/ typ
/*950*/ RegUnLoadKeyA(
/*951*/ typ typ typ typ typ HKEY hKey,
/*952*/ typ typ typ typ typ typ typ LPCSTR lpSubKey
/*953*/ );
/*954*/ 
/*955*/ LSTATUS
/*956*/ typ
/*957*/ RegUnLoadKeyW(
/*958*/ typ typ typ typ typ HKEY hKey,
/*959*/ typ typ typ typ typ typ typ LPCWSTR lpSubKey
/*960*/ );
/*1157*/ 
/*1158*/ BOOL
/*1159*/ typ
/*1160*/ InitiateSystemShutdownA(
/*1161*/ typ typ typ typ typ typ typ LPSTR lpMachineName,
/*1162*/ typ typ typ typ typ typ typ LPSTR lpMessage,
/*1163*/ typ typ typ typ typ DWORD dwTimeout,
/*1164*/ typ typ typ typ typ BOOL bForceAppsClosed,
/*1165*/ typ typ typ typ typ BOOL bRebootAfterShutdown
/*1166*/ );
/*1167*/ 
/*1168*/ BOOL
/*1169*/ typ
/*1170*/ InitiateSystemShutdownW(
/*1171*/ typ typ typ typ typ typ typ LPWSTR lpMachineName,
/*1172*/ typ typ typ typ typ typ typ LPWSTR lpMessage,
/*1173*/ typ typ typ typ typ DWORD dwTimeout,
/*1174*/ typ typ typ typ typ BOOL bForceAppsClosed,
/*1175*/ typ typ typ typ typ BOOL bRebootAfterShutdown
/*1176*/ );
/*1184*/ 
/*1185*/ BOOL
/*1186*/ typ
/*1187*/ AbortSystemShutdownA(
/*1188*/ typ typ typ typ typ typ typ LPSTR lpMachineName
/*1189*/ );
/*1190*/ 
/*1191*/ BOOL
/*1192*/ typ
/*1193*/ AbortSystemShutdownW(
/*1194*/ typ typ typ typ typ typ typ LPWSTR lpMachineName
/*1195*/ );
/*1225*/ 
/*1226*/ BOOL
/*1227*/ typ
/*1228*/ InitiateSystemShutdownExA(
/*1229*/ typ typ typ typ typ typ typ LPSTR lpMachineName,
/*1230*/ typ typ typ typ typ typ typ LPSTR lpMessage,
/*1231*/ typ typ typ typ typ DWORD dwTimeout,
/*1232*/ typ typ typ typ typ BOOL bForceAppsClosed,
/*1233*/ typ typ typ typ typ BOOL bRebootAfterShutdown,
/*1234*/ typ typ typ typ typ DWORD dwReason
/*1235*/ );
/*1236*/ 
/*1237*/ BOOL
/*1238*/ typ
/*1239*/ InitiateSystemShutdownExW(
/*1240*/ typ typ typ typ typ typ typ LPWSTR lpMachineName,
/*1241*/ typ typ typ typ typ typ typ LPWSTR lpMessage,
/*1242*/ typ typ typ typ typ DWORD dwTimeout,
/*1243*/ typ typ typ typ typ BOOL bForceAppsClosed,
/*1244*/ typ typ typ typ typ BOOL bRebootAfterShutdown,
/*1245*/ typ typ typ typ typ DWORD dwReason
/*1246*/ );
/*1267*/ 
/*1268*/ DWORD
/*1269*/ typ
/*1270*/ InitiateShutdownA(
/*1271*/ typ typ typ typ typ typ typ LPSTR lpMachineName,
/*1272*/ typ typ typ typ typ typ typ LPSTR lpMessage,
/*1273*/ typ typ typ typ typ DWORD dwGracePeriod,
/*1274*/ typ typ typ typ typ DWORD dwShutdownFlags,
/*1275*/ typ typ typ typ typ DWORD dwReason
/*1276*/ );
/*1277*/ 
/*1278*/ DWORD
/*1279*/ typ
/*1280*/ InitiateShutdownW(
/*1281*/ typ typ typ typ typ typ typ LPWSTR lpMachineName,
/*1282*/ typ typ typ typ typ typ typ LPWSTR lpMessage,
/*1283*/ typ typ typ typ typ DWORD dwGracePeriod,
/*1284*/ typ typ typ typ typ DWORD dwShutdownFlags,
/*1285*/ typ typ typ typ typ DWORD dwReason
/*1286*/ );
/*1293*/ 
/*1294*/ LSTATUS
/*1295*/ typ
/*1296*/ RegSaveKeyExA(
/*1297*/ typ typ typ typ typ HKEY hKey,
/*1298*/ typ typ typ typ typ LPCSTR lpFile,
/*1299*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*1300*/ typ typ typ typ typ DWORD Flags
/*1301*/ );
/*1302*/ 
/*1303*/ LSTATUS
/*1304*/ typ
/*1305*/ RegSaveKeyExW(
/*1306*/ typ typ typ typ typ HKEY hKey,
/*1307*/ typ typ typ typ typ LPCWSTR lpFile,
/*1308*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
/*1309*/ typ typ typ typ typ DWORD Flags
/*1310*/ );
/*1317*/ 
/*1318*/ LONG
/*1319*/ typ
/*1320*/ Wow64Win32ApiEntry(
/*1321*/ typ typ typ typ typ DWORD dwFuncNumber,
/*1322*/ typ typ typ typ typ DWORD dwFlag,
/*1323*/ typ typ typ typ typ DWORD dwRes
/*1324*/ );
/*154*/ typedef struct _NETRESOURCEA{
/*155*/ DWORD dwScope;
/*156*/ DWORD dwType;
/*157*/ DWORD dwDisplayType;
/*158*/ DWORD dwUsage;
/*159*/ LPSTR lpLocalName;
/*160*/ LPSTR lpRemoteName;
/*161*/ LPSTR lpComment;
/*162*/ LPSTR lpProvider;
/*163*/ }NETRESOURCEA,*LPNETRESOURCEA;
/*164*/ typedef struct _NETRESOURCEW{
/*165*/ DWORD dwScope;
/*166*/ DWORD dwType;
/*167*/ DWORD dwDisplayType;
/*168*/ DWORD dwUsage;
/*169*/ LPWSTR lpLocalName;
/*170*/ LPWSTR lpRemoteName;
/*171*/ LPWSTR lpComment;
/*172*/ LPWSTR lpProvider;
/*173*/ }NETRESOURCEW,*LPNETRESOURCEW;
/*178*/ typedef NETRESOURCEA NETRESOURCE;
/*179*/ typedef LPNETRESOURCEA LPNETRESOURCE;
/*211*/ DWORD typ
/*212*/ WNetAddConnectionA(
/*213*/ typ typ typ typ typ LPCSTR lpRemoteName,
/*214*/ typ typ typ typ typ typ typ LPCSTR lpPassword,
/*215*/ typ typ typ typ typ typ typ LPCSTR lpLocalName
/*216*/ );
/*217*/ DWORD typ
/*218*/ WNetAddConnectionW(
/*219*/ typ typ typ typ typ LPCWSTR lpRemoteName,
/*220*/ typ typ typ typ typ typ typ LPCWSTR lpPassword,
/*221*/ typ typ typ typ typ typ typ LPCWSTR lpLocalName
/*222*/ );
/*229*/ DWORD typ
/*230*/ WNetAddConnection2A(
/*231*/ typ typ typ typ typ LPNETRESOURCEA lpNetResource,
/*232*/ typ typ typ typ typ typ typ LPCSTR lpPassword,
/*233*/ typ typ typ typ typ typ typ LPCSTR lpUserName,
/*234*/ typ typ typ typ typ DWORD dwFlags
/*235*/ );
/*236*/ DWORD typ
/*237*/ WNetAddConnection2W(
/*238*/ typ typ typ typ typ LPNETRESOURCEW lpNetResource,
/*239*/ typ typ typ typ typ typ typ LPCWSTR lpPassword,
/*240*/ typ typ typ typ typ typ typ LPCWSTR lpUserName,
/*241*/ typ typ typ typ typ DWORD dwFlags
/*242*/ );
/*249*/ DWORD typ
/*250*/ WNetAddConnection3A(
/*251*/ typ typ typ typ typ typ typ HWND hwndOwner,
/*252*/ typ typ typ typ typ LPNETRESOURCEA lpNetResource,
/*253*/ typ typ typ typ typ typ typ LPCSTR lpPassword,
/*254*/ typ typ typ typ typ typ typ LPCSTR lpUserName,
/*255*/ typ typ typ typ typ DWORD dwFlags
/*256*/ );
/*257*/ DWORD typ
/*258*/ WNetAddConnection3W(
/*259*/ typ typ typ typ typ typ typ HWND hwndOwner,
/*260*/ typ typ typ typ typ LPNETRESOURCEW lpNetResource,
/*261*/ typ typ typ typ typ typ typ LPCWSTR lpPassword,
/*262*/ typ typ typ typ typ typ typ LPCWSTR lpUserName,
/*263*/ typ typ typ typ typ DWORD dwFlags
/*264*/ );
/*271*/ DWORD typ
/*272*/ WNetCancelConnectionA(
/*273*/ typ typ typ typ typ LPCSTR lpName,
/*274*/ typ typ typ typ typ BOOL fForce
/*275*/ );
/*276*/ DWORD typ
/*277*/ WNetCancelConnectionW(
/*278*/ typ typ typ typ typ LPCWSTR lpName,
/*279*/ typ typ typ typ typ BOOL fForce
/*280*/ );
/*287*/ DWORD typ
/*288*/ WNetCancelConnection2A(
/*289*/ typ typ typ typ typ LPCSTR lpName,
/*290*/ typ typ typ typ typ DWORD dwFlags,
/*291*/ typ typ typ typ typ BOOL fForce
/*292*/ );
/*293*/ DWORD typ
/*294*/ WNetCancelConnection2W(
/*295*/ typ typ typ typ typ LPCWSTR lpName,
/*296*/ typ typ typ typ typ DWORD dwFlags,
/*297*/ typ typ typ typ typ BOOL fForce
/*298*/ );
/*305*/ DWORD typ
/*306*/ WNetGetConnectionA(
/*307*/ typ typ typ typ typ LPCSTR lpLocalName,
/*308*/ typ typ typ typ typ typ typ LPSTR lpRemoteName,
/*309*/ typ typ typ typ typ LPDWORD lpnLength
/*310*/ );
/*311*/ DWORD typ
/*312*/ WNetGetConnectionW(
/*313*/ typ typ typ typ typ LPCWSTR lpLocalName,
/*314*/ typ typ typ typ typ typ typ LPWSTR lpRemoteName,
/*315*/ typ typ typ typ typ LPDWORD lpnLength
/*316*/ );
/*335*/ DWORD typ
/*336*/ WNetRestoreConnectionW(
/*337*/ typ typ typ typ typ typ typ HWND hWnd,
/*338*/ typ typ typ typ typ LPCWSTR lpDevice
/*339*/ );
/*345*/ DWORD typ
/*346*/ WNetUseConnectionA(
/*347*/ typ typ typ typ typ typ typ HWND hwndOwner,
/*348*/ typ typ typ typ typ LPNETRESOURCEA lpNetResource,
/*349*/ typ typ typ typ typ typ typ LPCSTR lpPassword,
/*350*/ typ typ typ typ typ typ typ LPCSTR lpUserId,
/*351*/ typ typ typ typ typ DWORD dwFlags,
/*352*/ typ typ typ typ typ typ typ LPSTR lpAccessName,
/*353*/ typ typ typ typ typ typ typ LPDWORD lpBufferSize,
/*354*/ typ typ typ typ typ typ typ LPDWORD lpResult
/*355*/ );
/*356*/ DWORD typ
/*357*/ WNetUseConnectionW(
/*358*/ typ typ typ typ typ typ typ HWND hwndOwner,
/*359*/ typ typ typ typ typ LPNETRESOURCEW lpNetResource,
/*360*/ typ typ typ typ typ typ typ LPCWSTR lpPassword,
/*361*/ typ typ typ typ typ typ typ LPCWSTR lpUserId,
/*362*/ typ typ typ typ typ DWORD dwFlags,
/*363*/ typ typ typ typ typ typ typ LPWSTR lpAccessName,
/*364*/ typ typ typ typ typ typ typ LPDWORD lpBufferSize,
/*365*/ typ typ typ typ typ typ typ LPDWORD lpResult
/*366*/ );
/*379*/ DWORD typ
/*380*/ WNetConnectionDialog(
/*381*/ typ typ typ typ typ HWND hwnd,
/*382*/ typ typ typ typ typ DWORD dwType
/*383*/ );
/*385*/ DWORD typ
/*386*/ WNetDisconnectDialog(
/*387*/ typ typ typ typ typ HWND hwnd,
/*388*/ typ typ typ typ typ DWORD dwType
/*389*/ );
/*392*/ typedef struct _CONNECTDLGSTRUCTA{
/*393*/ DWORD cbStructure;
/*394*/ HWND hwndOwner;
/*395*/ LPNETRESOURCEA lpConnRes;
/*396*/ DWORD dwFlags;
/*397*/ DWORD dwDevNum;
/*398*/ }CONNECTDLGSTRUCTA,typ*LPCONNECTDLGSTRUCTA;
/*399*/ typedef struct _CONNECTDLGSTRUCTW{
/*400*/ DWORD cbStructure;
/*401*/ HWND hwndOwner;
/*402*/ LPNETRESOURCEW lpConnRes;
/*403*/ DWORD dwFlags;
/*404*/ DWORD dwDevNum;
/*405*/ }CONNECTDLGSTRUCTW,typ*LPCONNECTDLGSTRUCTW;
/*410*/ typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
/*411*/ typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
/*427*/ DWORD typ
/*428*/ WNetConnectionDialog1A(
/*429*/ typ typ typ typ typ LPCONNECTDLGSTRUCTA lpConnDlgStruct
/*430*/ );
/*431*/ DWORD typ
/*432*/ WNetConnectionDialog1W(
/*433*/ typ typ typ typ typ LPCONNECTDLGSTRUCTW lpConnDlgStruct
/*434*/ );
/*441*/ typedef struct _DISCDLGSTRUCTA{
/*442*/ DWORD cbStructure;
/*443*/ HWND hwndOwner;
/*444*/ LPSTR lpLocalName;
/*445*/ LPSTR lpRemoteName;
/*446*/ DWORD dwFlags;
/*447*/ }DISCDLGSTRUCTA,typ*LPDISCDLGSTRUCTA;
/*448*/ typedef struct _DISCDLGSTRUCTW{
/*449*/ DWORD cbStructure;
/*450*/ HWND hwndOwner;
/*451*/ LPWSTR lpLocalName;
/*452*/ LPWSTR lpRemoteName;
/*453*/ DWORD dwFlags;
/*454*/ }DISCDLGSTRUCTW,typ*LPDISCDLGSTRUCTW;
/*459*/ typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
/*460*/ typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
/*466*/ DWORD typ
/*467*/ WNetDisconnectDialog1A(
/*468*/ typ typ typ typ typ LPDISCDLGSTRUCTA lpConnDlgStruct
/*469*/ );
/*470*/ DWORD typ
/*471*/ WNetDisconnectDialog1W(
/*472*/ typ typ typ typ typ LPDISCDLGSTRUCTW lpConnDlgStruct
/*473*/ );
/*485*/ DWORD typ
/*486*/ WNetOpenEnumA(
/*487*/ typ typ typ typ typ DWORD dwScope,
/*488*/ typ typ typ typ typ DWORD dwType,
/*489*/ typ typ typ typ typ DWORD dwUsage,
/*490*/ typ typ typ typ typ typ typ LPNETRESOURCEA lpNetResource,
/*491*/ typ typ typ typ typ LPHANDLE lphEnum
/*492*/ );
/*493*/ DWORD typ
/*494*/ WNetOpenEnumW(
/*495*/ typ typ typ typ typ DWORD dwScope,
/*496*/ typ typ typ typ typ DWORD dwType,
/*497*/ typ typ typ typ typ DWORD dwUsage,
/*498*/ typ typ typ typ typ typ typ LPNETRESOURCEW lpNetResource,
/*499*/ typ typ typ typ typ LPHANDLE lphEnum
/*500*/ );
/*507*/ DWORD typ
/*508*/ WNetEnumResourceA(
/*509*/ typ typ typ typ typ HANDLE hEnum,
/*510*/ typ typ typ typ typ LPDWORD lpcCount,
/*511*/ typ typ typ typ typ LPVOID lpBuffer,
/*512*/ typ typ typ typ typ LPDWORD lpBufferSize
/*513*/ );
/*514*/ DWORD typ
/*515*/ WNetEnumResourceW(
/*516*/ typ typ typ typ typ HANDLE hEnum,
/*517*/ typ typ typ typ typ LPDWORD lpcCount,
/*518*/ typ typ typ typ typ LPVOID lpBuffer,
/*519*/ typ typ typ typ typ LPDWORD lpBufferSize
/*520*/ );
/*527*/ DWORD typ
/*528*/ WNetCloseEnum(
/*529*/ typ typ typ typ typ HANDLE hEnum
/*530*/ );
/*533*/ DWORD typ
/*534*/ WNetGetResourceParentA(
/*535*/ typ typ typ typ typ LPNETRESOURCEA lpNetResource,
/*536*/ typ typ typ typ typ LPVOID lpBuffer,
/*537*/ typ typ typ typ typ LPDWORD lpcbBuffer
/*538*/ );
/*539*/ DWORD typ
/*540*/ WNetGetResourceParentW(
/*541*/ typ typ typ typ typ LPNETRESOURCEW lpNetResource,
/*542*/ typ typ typ typ typ LPVOID lpBuffer,
/*543*/ typ typ typ typ typ LPDWORD lpcbBuffer
/*544*/ );
/*551*/ DWORD typ
/*552*/ WNetGetResourceInformationA(
/*553*/ typ typ typ typ typ LPNETRESOURCEA lpNetResource,
/*554*/ typ typ typ typ typ LPVOID lpBuffer,
/*555*/ typ typ typ typ typ LPDWORD lpcbBuffer,
/*556*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPSTR*lplpSystem
/*557*/ );
/*558*/ DWORD typ
/*559*/ WNetGetResourceInformationW(
/*560*/ typ typ typ typ typ LPNETRESOURCEW lpNetResource,
/*561*/ typ typ typ typ typ LPVOID lpBuffer,
/*562*/ typ typ typ typ typ LPDWORD lpcbBuffer,
/*563*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPWSTR*lplpSystem
/*564*/ );
/*579*/ typedef struct _UNIVERSAL_NAME_INFOA{
/*580*/ LPSTR lpUniversalName;
/*581*/ }UNIVERSAL_NAME_INFOA,*LPUNIVERSAL_NAME_INFOA;
/*582*/ typedef struct _UNIVERSAL_NAME_INFOW{
/*583*/ LPWSTR lpUniversalName;
/*584*/ }UNIVERSAL_NAME_INFOW,*LPUNIVERSAL_NAME_INFOW;
/*589*/ typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
/*590*/ typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
/*593*/ typedef struct _REMOTE_NAME_INFOA{
/*594*/ LPSTR lpUniversalName;
/*595*/ LPSTR lpConnectionName;
/*596*/ LPSTR lpRemainingPath;
/*597*/ }REMOTE_NAME_INFOA,*LPREMOTE_NAME_INFOA;
/*598*/ typedef struct _REMOTE_NAME_INFOW{
/*599*/ LPWSTR lpUniversalName;
/*600*/ LPWSTR lpConnectionName;
/*601*/ LPWSTR lpRemainingPath;
/*602*/ }REMOTE_NAME_INFOW,*LPREMOTE_NAME_INFOW;
/*607*/ typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
/*608*/ typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
/*611*/ DWORD typ
/*612*/ WNetGetUniversalNameA(
/*613*/ typ typ typ typ typ LPCSTR lpLocalPath,
/*614*/ typ typ typ typ typ DWORD dwInfoLevel,
/*615*/ typ typ typ typ typ LPVOID lpBuffer,
/*616*/ typ typ typ typ typ LPDWORD lpBufferSize
/*617*/ );
/*618*/ DWORD typ
/*619*/ WNetGetUniversalNameW(
/*620*/ typ typ typ typ typ LPCWSTR lpLocalPath,
/*621*/ typ typ typ typ typ DWORD dwInfoLevel,
/*622*/ typ typ typ typ typ LPVOID lpBuffer,
/*623*/ typ typ typ typ typ LPDWORD lpBufferSize
/*624*/ );
/*635*/ DWORD typ
/*636*/ WNetGetUserA(
/*637*/ typ typ typ typ typ typ typ LPCSTR lpName,
/*638*/ typ typ typ typ typ LPSTR lpUserName,
/*639*/ typ typ typ typ typ LPDWORD lpnLength
/*640*/ );
/*641*/ DWORD typ
/*642*/ WNetGetUserW(
/*643*/ typ typ typ typ typ typ typ LPCWSTR lpName,
/*644*/ typ typ typ typ typ LPWSTR lpUserName,
/*645*/ typ typ typ typ typ LPDWORD lpnLength
/*646*/ );
/*668*/ DWORD typ
/*669*/ WNetGetProviderNameA(
/*670*/ typ typ typ typ typ DWORD dwNetType,
/*671*/ typ typ typ typ typ LPSTR lpProviderName,
/*672*/ typ typ typ typ typ LPDWORD lpBufferSize
/*673*/ );
/*674*/ DWORD typ
/*675*/ WNetGetProviderNameW(
/*676*/ typ typ typ typ typ DWORD dwNetType,
/*677*/ typ typ typ typ typ LPWSTR lpProviderName,
/*678*/ typ typ typ typ typ LPDWORD lpBufferSize
/*679*/ );
/*686*/ typedef struct _NETINFOSTRUCT{
/*687*/ DWORD cbStructure;
/*688*/ DWORD dwProviderVersion;
/*689*/ DWORD dwStatus;
/*690*/ DWORD dwCharacteristics;
/*691*/ ULONG_PTR dwHandle;
/*692*/ WORD wNetType;
/*693*/ DWORD dwPrinters;
/*694*/ DWORD dwDrives;
/*695*/ }NETINFOSTRUCT,typ*LPNETINFOSTRUCT;
/*701*/ DWORD typ
/*702*/ WNetGetNetworkInformationA(
/*703*/ typ typ typ typ typ LPCSTR lpProvider,
/*704*/ typ typ typ typ typ LPNETINFOSTRUCT lpNetInfoStruct
/*705*/ );
/*706*/ DWORD typ
/*707*/ WNetGetNetworkInformationW(
/*708*/ typ typ typ typ typ LPCWSTR lpProvider,
/*709*/ typ typ typ typ typ LPNETINFOSTRUCT lpNetInfoStruct
/*710*/ );
/*723*/ DWORD typ
/*724*/ WNetGetLastErrorA(
/*725*/ typ typ typ typ typ LPDWORD lpError,
/*726*/ typ typ typ typ typ LPSTR lpErrorBuf,
/*727*/ typ typ typ typ typ DWORD nErrorBufSize,
/*728*/ typ typ typ typ typ LPSTR lpNameBuf,
/*729*/ typ typ typ typ typ DWORD nNameBufSize
/*730*/ );
/*731*/ DWORD typ
/*732*/ WNetGetLastErrorW(
/*733*/ typ typ typ typ typ LPDWORD lpError,
/*734*/ typ typ typ typ typ LPWSTR lpErrorBuf,
/*735*/ typ typ typ typ typ DWORD nErrorBufSize,
/*736*/ typ typ typ typ typ LPWSTR lpNameBuf,
/*737*/ typ typ typ typ typ DWORD nNameBufSize
/*738*/ );
/*814*/ typedef struct _NETCONNECTINFOSTRUCT{
/*815*/ DWORD cbStructure;
/*816*/ DWORD dwFlags;
/*817*/ DWORD dwSpeed;
/*818*/ DWORD dwDelay;
/*819*/ DWORD dwOptDataSize;
/*820*/ }NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;
/*827*/ DWORD typ
/*828*/ MultinetGetConnectionPerformanceA(
/*829*/ typ typ typ typ typ LPNETRESOURCEA lpNetResource,
/*830*/ typ typ typ typ typ LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
/*831*/ );
/*832*/ DWORD typ
/*833*/ MultinetGetConnectionPerformanceW(
/*834*/ typ typ typ typ typ LPNETRESOURCEW lpNetResource,
/*835*/ typ typ typ typ typ LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
/*836*/ );
/*50*/ typedef struct{
/*52*/ unsigned short bAppReturnCode:8,
/*53*/ reserved:6,
/*54*/ fBusy:1,
/*55*/ fAck:1;
/*59*/ }DDEACK;
/*69*/ typedef struct{
/*71*/ unsigned short reserved:14,
/*72*/ fDeferUpd:1,
/*73*/ fAckReq:1;
/*77*/ short cfFormat;
/*78*/ }DDEADVISE;
/*90*/ typedef struct{
/*92*/ unsigned short unused:12,
/*93*/ fResponse:1,
/*94*/ fRelease:1,
/*95*/ reserved:1,
/*96*/ fAckReq:1;
/*100*/ short cfFormat;
/*101*/ BYTE Value[1];
/*102*/ }DDEDATA;
/*114*/ typedef struct{
/*116*/ unsigned short unused:13,
/*118*/ fRelease:1,
/*119*/ fReserved:2;
/*123*/ short cfFormat;
/*124*/ BYTE Value[1];
/*127*/ }DDEPOKE;
/*139*/ typedef struct{
/*141*/ unsigned short unused:13,
/*142*/ fRelease:1,
/*143*/ fDeferUpd:1,
/*144*/ fAckReq:1;
/*148*/ short cfFormat;
/*149*/ }DDELN;
/*151*/ typedef struct{
/*153*/ unsigned short unused:12,
/*154*/ fAck:1,
/*155*/ fRelease:1,
/*156*/ fReserved:1,
/*157*/ fAckReq:1;
/*161*/ short cfFormat;
/*162*/ BYTE rgb[1];
/*163*/ }DDEUP;
/*170*/ BOOL
/*171*/ typ
/*172*/ DdeSetQualityOfService(
/*173*/ HWND hwndClient,
/*174*/ const SECURITY_QUALITY_OF_SERVICE*pqosNew,
/*175*/ PSECURITY_QUALITY_OF_SERVICE pqosPrev);
/*177*/ BOOL
/*178*/ typ
/*179*/ ImpersonateDdeClientWindow(
/*180*/ HWND hWndClient,
/*181*/ HWND hWndServer);
/*186*/ LPARAM typ PackDDElParam(UINT msg,UINT_PTR uiLo,UINT_PTR uiHi);
/*187*/ BOOL typ UnpackDDElParam(UINT msg,LPARAM lParam,PUINT_PTR puiLo,PUINT_PTR puiHi);
/*188*/ BOOL typ FreeDDElParam(UINT msg,LPARAM lParam);
/*189*/ LPARAM typ ReuseDDElParam(LPARAM lParam,UINT msgIn,UINT msgOut,UINT_PTR uiLo,UINT_PTR uiHi);
/*22*/ struct HCONVLIST__{int unused;};typedef struct HCONVLIST__*HCONVLIST;
/*23*/ struct HCONV__{int unused;};typedef struct HCONV__*HCONV;
/*24*/ struct HSZ__{int unused;};typedef struct HSZ__*HSZ;
/*25*/ struct HDDEDATA__{int unused;};typedef struct HDDEDATA__*HDDEDATA;
/*30*/ typedef struct tagHSZPAIR{
/*31*/ HSZ hszSvc;
/*32*/ HSZ hszTopic;
/*33*/ }HSZPAIR,typ*PHSZPAIR;
/*38*/ typedef struct tagCONVCONTEXT{
/*39*/ UINT cb;
/*40*/ UINT wFlags;
/*41*/ UINT wCountryID;
/*42*/ int iCodePage;
/*43*/ DWORD dwLangID;
/*44*/ DWORD dwSecurity;
/*45*/ SECURITY_QUALITY_OF_SERVICE qos;
/*46*/ }CONVCONTEXT,typ*PCONVCONTEXT;
/*51*/ typedef struct tagCONVINFO{
/*52*/ DWORD cb;
/*53*/ DWORD_PTR hUser;
/*54*/ HCONV hConvPartner;
/*55*/ HSZ hszSvcPartner;
/*56*/ HSZ hszServiceReq;
/*57*/ HSZ hszTopic;
/*58*/ HSZ hszItem;
/*59*/ UINT wFmt;
/*60*/ UINT wType;
/*61*/ UINT wStatus;
/*62*/ UINT wConvst;
/*63*/ UINT wLastError;
/*64*/ HCONVLIST hConvList;
/*65*/ CONVCONTEXT ConvCtxt;
/*66*/ HWND hwnd;
/*67*/ HWND hwndPartner;
/*68*/ }CONVINFO,typ*PCONVINFO;
/*199*/ typedef HDDEDATA typ FNCALLBACK(UINT wType,UINT wFmt,HCONV hConv,
/*200*/ HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);
/*201*/ typedef HDDEDATA(typ*PFNCALLBACK)(UINT wType,UINT wFmt,HCONV hConv,
/*202*/ HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);
/*208*/ UINT
/*209*/ typ
/*210*/ DdeInitializeA(
/*211*/ typ typ typ typ typ LPDWORD pidInst,
/*212*/ typ typ typ typ typ PFNCALLBACK pfnCallback,
/*213*/ typ typ typ typ typ DWORD afCmd,
/*214*/ typ typ DWORD ulRes);
/*215*/ UINT
/*216*/ typ
/*217*/ DdeInitializeW(
/*218*/ typ typ typ typ typ LPDWORD pidInst,
/*219*/ typ typ typ typ typ PFNCALLBACK pfnCallback,
/*220*/ typ typ typ typ typ DWORD afCmd,
/*221*/ typ typ DWORD ulRes);
/*259*/ BOOL
/*260*/ typ
/*261*/ DdeUninitialize(
/*262*/ typ typ typ typ typ DWORD idInst);
/*267*/ HCONVLIST
/*268*/ typ
/*269*/ DdeConnectList(
/*270*/ typ typ typ typ typ DWORD idInst,
/*271*/ typ typ typ typ typ HSZ hszService,
/*272*/ typ typ typ typ typ HSZ hszTopic,
/*273*/ typ typ typ typ typ HCONVLIST hConvList,
/*274*/ typ typ typ typ typ typ typ PCONVCONTEXT pCC);
/*276*/ HCONV
/*277*/ typ
/*278*/ DdeQueryNextServer(
/*279*/ typ typ typ typ typ HCONVLIST hConvList,
/*280*/ typ typ typ typ typ HCONV hConvPrev);
/*281*/ BOOL
/*282*/ typ
/*283*/ DdeDisconnectList(
/*284*/ typ typ typ typ typ HCONVLIST hConvList);
/*289*/ HCONV
/*290*/ typ
/*291*/ DdeConnect(
/*292*/ typ typ typ typ typ DWORD idInst,
/*293*/ typ typ typ typ typ HSZ hszService,
/*294*/ typ typ typ typ typ HSZ hszTopic,
/*295*/ typ typ typ typ typ typ typ PCONVCONTEXT pCC);
/*297*/ BOOL
/*298*/ typ
/*299*/ DdeDisconnect(
/*300*/ typ typ typ typ typ HCONV hConv);
/*302*/ HCONV
/*303*/ typ
/*304*/ DdeReconnect(
/*305*/ typ typ typ typ typ HCONV hConv);
/*307*/ UINT
/*308*/ typ
/*309*/ DdeQueryConvInfo(
/*310*/ typ typ typ typ typ HCONV hConv,
/*311*/ typ typ typ typ typ DWORD idTransaction,
/*312*/ typ typ typ typ typ PCONVINFO pConvInfo);
/*314*/ BOOL
/*315*/ typ
/*316*/ DdeSetUserHandle(
/*317*/ typ typ typ typ typ HCONV hConv,
/*318*/ typ typ typ typ typ DWORD id,
/*319*/ typ typ typ typ typ DWORD_PTR hUser);
/*321*/ BOOL
/*322*/ typ
/*323*/ DdeAbandonTransaction(
/*324*/ typ typ typ typ typ DWORD idInst,
/*325*/ typ typ typ typ typ HCONV hConv,
/*326*/ typ typ typ typ typ DWORD idTransaction);
/*332*/ BOOL
/*333*/ typ
/*334*/ DdePostAdvise(
/*335*/ typ typ typ typ typ DWORD idInst,
/*336*/ typ typ typ typ typ HSZ hszTopic,
/*337*/ typ typ typ typ typ HSZ hszItem);
/*339*/ BOOL
/*340*/ typ
/*341*/ DdeEnableCallback(
/*342*/ typ typ typ typ typ DWORD idInst,
/*343*/ typ typ typ typ typ HCONV hConv,
/*344*/ typ typ typ typ typ UINT wCmd);
/*346*/ BOOL
/*347*/ typ
/*348*/ DdeImpersonateClient(
/*349*/ typ typ typ typ typ HCONV hConv);
/*357*/ HDDEDATA
/*358*/ typ
/*359*/ DdeNameService(
/*360*/ typ typ typ typ typ DWORD idInst,
/*361*/ typ typ typ typ typ typ typ HSZ hsz1,
/*362*/ typ typ typ typ typ typ typ HSZ hsz2,
/*363*/ typ typ typ typ typ UINT afCmd);
/*373*/ HDDEDATA
/*374*/ typ
/*375*/ DdeClientTransaction(
/*376*/ typ typ typ typ typ typ typ LPBYTE pData,
/*377*/ typ typ typ typ typ DWORD cbData,
/*378*/ typ typ typ typ typ HCONV hConv,
/*379*/ typ typ typ typ typ typ typ HSZ hszItem,
/*380*/ typ typ typ typ typ UINT wFmt,
/*381*/ typ typ typ typ typ UINT wType,
/*382*/ typ typ typ typ typ DWORD dwTimeout,
/*383*/ typ typ typ typ typ typ typ LPDWORD pdwResult);
/*390*/ HDDEDATA
/*391*/ typ
/*392*/ DdeCreateDataHandle(
/*393*/ typ typ typ typ typ DWORD idInst,
/*394*/ typ typ typ typ typ typ typ typ typ LPBYTE pSrc,
/*395*/ typ typ typ typ typ DWORD cb,
/*396*/ typ typ typ typ typ DWORD cbOff,
/*397*/ typ typ typ typ typ typ typ HSZ hszItem,
/*398*/ typ typ typ typ typ UINT wFmt,
/*399*/ typ typ typ typ typ UINT afCmd);
/*401*/ HDDEDATA
/*402*/ typ
/*403*/ DdeAddData(
/*404*/ typ typ typ typ typ HDDEDATA hData,
/*405*/ typ typ typ typ typ typ typ LPBYTE pSrc,
/*406*/ typ typ typ typ typ DWORD cb,
/*407*/ typ typ typ typ typ DWORD cbOff);
/*409*/ DWORD
/*410*/ typ
/*411*/ DdeGetData(
/*412*/ typ typ typ typ typ HDDEDATA hData,
/*413*/ typ typ typ typ typ typ typ LPBYTE pDst,
/*414*/ typ typ typ typ typ DWORD cbMax,
/*415*/ typ typ typ typ typ DWORD cbOff);
/*417*/ LPBYTE
/*418*/ typ
/*419*/ DdeAccessData(
/*420*/ typ typ typ typ typ HDDEDATA hData,
/*421*/ typ typ typ typ typ typ typ LPDWORD pcbDataSize);
/*423*/ BOOL
/*424*/ typ
/*425*/ DdeUnaccessData(
/*426*/ typ typ typ typ typ HDDEDATA hData);
/*428*/ BOOL
/*429*/ typ
/*430*/ DdeFreeDataHandle(
/*431*/ typ typ typ typ typ HDDEDATA hData);
/*436*/ UINT
/*437*/ typ
/*438*/ DdeGetLastError(
/*439*/ typ typ typ typ typ DWORD idInst);
/*467*/ HSZ
/*468*/ typ
/*469*/ DdeCreateStringHandleA(
/*470*/ typ typ typ typ typ DWORD idInst,
/*471*/ typ typ typ typ typ LPCSTR psz,
/*472*/ typ typ typ typ typ int iCodePage);
/*473*/ HSZ
/*474*/ typ
/*475*/ DdeCreateStringHandleW(
/*476*/ typ typ typ typ typ DWORD idInst,
/*477*/ typ typ typ typ typ LPCWSTR psz,
/*478*/ typ typ typ typ typ int iCodePage);
/*485*/ DWORD
/*486*/ typ
/*487*/ DdeQueryStringA(
/*488*/ typ typ typ typ typ DWORD idInst,
/*489*/ typ typ typ typ typ HSZ hsz,
/*490*/ typ typ typ typ typ typ typ LPSTR psz,
/*491*/ typ typ typ typ typ DWORD cchMax,
/*492*/ typ typ typ typ typ int iCodePage);
/*493*/ DWORD
/*494*/ typ
/*495*/ DdeQueryStringW(
/*496*/ typ typ typ typ typ DWORD idInst,
/*497*/ typ typ typ typ typ HSZ hsz,
/*498*/ typ typ typ typ typ typ typ LPWSTR psz,
/*499*/ typ typ typ typ typ DWORD cchMax,
/*500*/ typ typ typ typ typ int iCodePage);
/*507*/ BOOL
/*508*/ typ
/*509*/ DdeFreeStringHandle(
/*510*/ typ typ typ typ typ DWORD idInst,
/*511*/ typ typ typ typ typ HSZ hsz);
/*513*/ BOOL
/*514*/ typ
/*515*/ DdeKeepStringHandle(
/*516*/ typ typ typ typ typ DWORD idInst,
/*517*/ typ typ typ typ typ HSZ hsz);
/*519*/ int
/*520*/ typ
/*521*/ DdeCmpStringHandles(
/*522*/ typ typ typ typ typ HSZ hsz1,
/*523*/ typ typ typ typ typ HSZ hsz2);
/*530*/ typedef struct tagDDEML_MSG_HOOK_DATA{
/*531*/ UINT_PTR uiLo;
/*532*/ UINT_PTR uiHi;
/*533*/ DWORD cbData;
/*534*/ DWORD Data[8];
/*535*/ }DDEML_MSG_HOOK_DATA,*PDDEML_MSG_HOOK_DATA;
/*538*/ typedef struct tagMONMSGSTRUCT{
/*539*/ UINT cb;
/*540*/ HWND hwndTo;
/*541*/ DWORD dwTime;
/*542*/ HANDLE hTask;
/*543*/ UINT wMsg;
/*544*/ WPARAM wParam;
/*545*/ LPARAM lParam;
/*546*/ DDEML_MSG_HOOK_DATA dmhd;
/*547*/ }MONMSGSTRUCT,*PMONMSGSTRUCT;
/*549*/ typedef struct tagMONCBSTRUCT{
/*550*/ UINT cb;
/*551*/ DWORD dwTime;
/*552*/ HANDLE hTask;
/*553*/ DWORD dwRet;
/*554*/ UINT wType;
/*555*/ UINT wFmt;
/*556*/ HCONV hConv;
/*557*/ HSZ hsz1;
/*558*/ HSZ hsz2;
/*559*/ HDDEDATA hData;
/*560*/ ULONG_PTR dwData1;
/*561*/ ULONG_PTR dwData2;
/*562*/ CONVCONTEXT cc;
/*563*/ DWORD cbData;
/*564*/ DWORD Data[8];
/*565*/ }MONCBSTRUCT,*PMONCBSTRUCT;
/*567*/ typedef struct tagMONHSZSTRUCTA{
/*568*/ UINT cb;
/*569*/ BOOL fsAction;
/*570*/ DWORD dwTime;
/*571*/ HSZ hsz;
/*572*/ HANDLE hTask;
/*573*/ CHAR str[1];
/*574*/ }MONHSZSTRUCTA,*PMONHSZSTRUCTA;
/*575*/ typedef struct tagMONHSZSTRUCTW{
/*576*/ UINT cb;
/*577*/ BOOL fsAction;
/*578*/ DWORD dwTime;
/*579*/ HSZ hsz;
/*580*/ HANDLE hTask;
/*581*/ WCHAR str[1];
/*582*/ }MONHSZSTRUCTW,*PMONHSZSTRUCTW;
/*587*/ typedef MONHSZSTRUCTA MONHSZSTRUCT;
/*588*/ typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
/*596*/ typedef struct tagMONERRSTRUCT{
/*597*/ UINT cb;
/*598*/ UINT wLastError;
/*599*/ DWORD dwTime;
/*600*/ HANDLE hTask;
/*601*/ }MONERRSTRUCT,*PMONERRSTRUCT;
/*603*/ typedef struct tagMONLINKSTRUCT{
/*604*/ UINT cb;
/*605*/ DWORD dwTime;
/*606*/ HANDLE hTask;
/*607*/ BOOL fEstablished;
/*608*/ BOOL fNoData;
/*609*/ HSZ hszSvc;
/*610*/ HSZ hszTopic;
/*611*/ HSZ hszItem;
/*612*/ UINT wFmt;
/*613*/ BOOL fServer;
/*614*/ HCONV hConvServer;
/*615*/ HCONV hConvClient;
/*616*/ }MONLINKSTRUCT,*PMONLINKSTRUCT;
/*618*/ typedef struct tagMONCONVSTRUCT{
/*619*/ UINT cb;
/*620*/ BOOL fConnect;
/*621*/ DWORD dwTime;
/*622*/ HANDLE hTask;
/*623*/ HSZ hszSvc;
/*624*/ HSZ hszTopic;
/*625*/ HCONV hConvClient;
/*626*/ HCONV hConvServer;
/*627*/ }MONCONVSTRUCT,*PMONCONVSTRUCT;
/*265*/ typedef struct tagCRGB
/*266*/ {
/*267*/ BYTE bRed;
/*268*/ BYTE bGreen;
/*269*/ BYTE bBlue;
/*270*/ BYTE bExtra;
/*271*/ }CRGB;
/*45*/ INT
/*46*/ typ
/*47*/ LZStart(
/*48*/ void
/*49*/ );
/*51*/ void
/*52*/ typ
/*53*/ LZDone(
/*54*/ void
/*55*/ );
/*57*/ LONG
/*58*/ typ
/*59*/ CopyLZFile(
/*60*/ INT,
/*61*/ INT
/*62*/ );
/*64*/ LONG
/*65*/ typ
/*66*/ LZCopy(
/*67*/ INT,
/*68*/ INT
/*69*/ );
/*71*/ INT
/*72*/ typ
/*73*/ LZInit(
/*74*/ INT
/*75*/ );
/*77*/ INT
/*78*/ typ
/*79*/ GetExpandedNameA(
/*80*/ LPSTR,
/*81*/ LPSTR
/*82*/ );
/*83*/ INT
/*84*/ typ
/*85*/ GetExpandedNameW(
/*86*/ LPWSTR,
/*87*/ LPWSTR
/*88*/ );
/*95*/ INT
/*96*/ typ
/*97*/ LZOpenFileA(
/*98*/ LPSTR,
/*99*/ LPOFSTRUCT,
/*100*/ WORD
/*101*/ );
/*102*/ INT
/*103*/ typ
/*104*/ LZOpenFileW(
/*105*/ LPWSTR,
/*106*/ LPOFSTRUCT,
/*107*/ WORD
/*108*/ );
/*115*/ LONG
/*116*/ typ
/*117*/ LZSeek(
/*118*/ INT,
/*119*/ LONG,
/*120*/ INT
/*121*/ );
/*123*/ INT
/*124*/ typ
/*125*/ LZRead(
/*126*/ INT,
/*127*/ LPSTR,
/*128*/ INT
/*129*/ );
/*131*/ void
/*132*/ typ
/*133*/ LZClose(
/*134*/ INT
/*135*/ );
/*103*/ typedef UINT MMVERSION;
/*107*/ typedef typ UINT MMRESULT;
/*111*/ typedef UINT typ*LPUINT;
/*116*/ typedef struct mmtime_tag
/*117*/ {
/*118*/ UINT wType;
/*119*/ union
/*120*/ {
/*121*/ DWORD ms;
/*122*/ DWORD sample;
/*123*/ DWORD cb;
/*124*/ DWORD ticks;
/*127*/ struct
/*128*/ {
/*129*/ BYTE hour;
/*130*/ BYTE min;
/*131*/ BYTE sec;
/*132*/ BYTE frame;
/*133*/ BYTE fps;
/*134*/ BYTE dummy;
/*136*/ BYTE pad[2];
/*138*/ }smpte;
/*141*/ struct
/*142*/ {
/*143*/ DWORD songptrpos;
/*144*/ }midi;
/*145*/ }u;
/*146*/ }MMTIME,*PMMTIME,typ*NPMMTIME,typ*LPMMTIME;
/*285*/ struct HDRVR__{int unused;};typedef struct HDRVR__*HDRVR;
/*297*/ typedef struct DRVCONFIGINFOEX{
/*298*/ DWORD dwDCISize;
/*299*/ LPCWSTR lpszDCISectionName;
/*300*/ LPCWSTR lpszDCIAliasName;
/*301*/ DWORD dnDevNode;
/*302*/ }DRVCONFIGINFOEX,*PDRVCONFIGINFOEX,typ*NPDRVCONFIGINFOEX,typ*LPDRVCONFIGINFOEX;
/*335*/ typedef struct tagDRVCONFIGINFO{
/*336*/ DWORD dwDCISize;
/*337*/ LPCWSTR lpszDCISectionName;
/*338*/ LPCWSTR lpszDCIAliasName;
/*339*/ }DRVCONFIGINFO,*PDRVCONFIGINFO,typ*NPDRVCONFIGINFO,typ*LPDRVCONFIGINFO;
/*356*/ typedef LRESULT(typ*DRIVERPROC)(DWORD_PTR,HDRVR,UINT,LPARAM,LPARAM);
/*358*/ LRESULT typ CloseDriver(typ typ typ typ typ HDRVR hDriver,typ typ typ typ typ LPARAM lParam1,typ typ typ typ typ LPARAM lParam2);
/*359*/ HDRVR typ OpenDriver(typ typ typ typ typ LPCWSTR szDriverName,typ typ typ typ typ LPCWSTR szSectionName,typ typ typ typ typ LPARAM lParam2);
/*360*/ LRESULT typ SendDriverMessage(typ typ typ typ typ HDRVR hDriver,typ typ typ typ typ UINT message,typ typ typ typ typ LPARAM lParam1,typ typ typ typ typ LPARAM lParam2);
/*361*/ HMODULE typ DrvGetModuleHandle(typ typ typ typ typ HDRVR hDriver);
/*362*/ HMODULE typ GetDriverModuleHandle(typ typ typ typ typ HDRVR hDriver);
/*363*/ LRESULT typ DefDriverProc(typ typ typ typ typ DWORD_PTR dwDriverIdentifier,typ typ typ typ typ HDRVR hdrvr,typ typ typ typ typ UINT uMsg,typ typ typ typ typ LPARAM lParam1,typ typ typ typ typ LPARAM lParam2);
/*406*/ typedef void(typ DRVCALLBACK)(HDRVR hdrvr,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);
/*408*/ typedef DRVCALLBACK typ*LPDRVCALLBACK;
/*410*/ typedef DRVCALLBACK*PDRVCALLBACK;
/*421*/ UINT typ mmsystemGetVersion(void);
/*440*/ BOOL typ sndPlaySoundA(typ typ typ typ typ typ typ LPCSTR pszSound,typ typ typ typ typ UINT fuSound);
/*441*/ BOOL typ sndPlaySoundW(typ typ typ typ typ typ typ LPCWSTR pszSound,typ typ typ typ typ UINT fuSound);
/*489*/ BOOL typ PlaySoundA(typ typ typ typ typ typ typ LPCSTR pszSound,typ typ typ typ typ typ typ HMODULE hmod,typ typ typ typ typ DWORD fdwSound);
/*490*/ BOOL typ PlaySoundW(typ typ typ typ typ typ typ LPCWSTR pszSound,typ typ typ typ typ typ typ HMODULE hmod,typ typ typ typ typ DWORD fdwSound);
/*518*/ struct HWAVE__{int unused;};typedef struct HWAVE__*HWAVE;
/*519*/ struct HWAVEIN__{int unused;};typedef struct HWAVEIN__*HWAVEIN;
/*520*/ struct HWAVEOUT__{int unused;};typedef struct HWAVEOUT__*HWAVEOUT;
/*521*/ typedef HWAVEIN typ*LPHWAVEIN;
/*522*/ typedef HWAVEOUT typ*LPHWAVEOUT;
/*523*/ typedef DRVCALLBACK WAVECALLBACK;
/*524*/ typedef WAVECALLBACK typ*LPWAVECALLBACK;
/*547*/ typedef struct wavehdr_tag{
/*548*/ LPSTR lpData;
/*549*/ DWORD dwBufferLength;
/*550*/ DWORD dwBytesRecorded;
/*551*/ DWORD_PTR dwUser;
/*552*/ DWORD dwFlags;
/*553*/ DWORD dwLoops;
/*554*/ struct wavehdr_tag typ*lpNext;
/*555*/ DWORD_PTR reserved;
/*556*/ }WAVEHDR,*PWAVEHDR,typ*NPWAVEHDR,typ*LPWAVEHDR;
/*568*/ typedef struct tagWAVEOUTCAPSA{
/*569*/ WORD wMid;
/*570*/ WORD wPid;
/*571*/ MMVERSION vDriverVersion;
/*572*/ CHAR szPname[32];
/*573*/ DWORD dwFormats;
/*574*/ WORD wChannels;
/*575*/ WORD wReserved1;
/*576*/ DWORD dwSupport;
/*577*/ }WAVEOUTCAPSA,*PWAVEOUTCAPSA,*NPWAVEOUTCAPSA,*LPWAVEOUTCAPSA;
/*578*/ typedef struct tagWAVEOUTCAPSW{
/*579*/ WORD wMid;
/*580*/ WORD wPid;
/*581*/ MMVERSION vDriverVersion;
/*582*/ WCHAR szPname[32];
/*583*/ DWORD dwFormats;
/*584*/ WORD wChannels;
/*585*/ WORD wReserved1;
/*586*/ DWORD dwSupport;
/*587*/ }WAVEOUTCAPSW,*PWAVEOUTCAPSW,*NPWAVEOUTCAPSW,*LPWAVEOUTCAPSW;
/*594*/ typedef WAVEOUTCAPSA WAVEOUTCAPS;
/*595*/ typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
/*596*/ typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
/*597*/ typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
/*599*/ typedef struct tagWAVEOUTCAPS2A{
/*600*/ WORD wMid;
/*601*/ WORD wPid;
/*602*/ MMVERSION vDriverVersion;
/*603*/ CHAR szPname[32];
/*604*/ DWORD dwFormats;
/*605*/ WORD wChannels;
/*606*/ WORD wReserved1;
/*607*/ DWORD dwSupport;
/*608*/ GUID ManufacturerGuid;
/*609*/ GUID ProductGuid;
/*610*/ GUID NameGuid;
/*611*/ }WAVEOUTCAPS2A,*PWAVEOUTCAPS2A,*NPWAVEOUTCAPS2A,*LPWAVEOUTCAPS2A;
/*612*/ typedef struct tagWAVEOUTCAPS2W{
/*613*/ WORD wMid;
/*614*/ WORD wPid;
/*615*/ MMVERSION vDriverVersion;
/*616*/ WCHAR szPname[32];
/*617*/ DWORD dwFormats;
/*618*/ WORD wChannels;
/*619*/ WORD wReserved1;
/*620*/ DWORD dwSupport;
/*621*/ GUID ManufacturerGuid;
/*622*/ GUID ProductGuid;
/*623*/ GUID NameGuid;
/*624*/ }WAVEOUTCAPS2W,*PWAVEOUTCAPS2W,*NPWAVEOUTCAPS2W,*LPWAVEOUTCAPS2W;
/*631*/ typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
/*632*/ typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
/*633*/ typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
/*634*/ typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
/*661*/ typedef struct tagWAVEINCAPSA{
/*662*/ WORD wMid;
/*663*/ WORD wPid;
/*664*/ MMVERSION vDriverVersion;
/*665*/ CHAR szPname[32];
/*666*/ DWORD dwFormats;
/*667*/ WORD wChannels;
/*668*/ WORD wReserved1;
/*669*/ }WAVEINCAPSA,*PWAVEINCAPSA,*NPWAVEINCAPSA,*LPWAVEINCAPSA;
/*670*/ typedef struct tagWAVEINCAPSW{
/*671*/ WORD wMid;
/*672*/ WORD wPid;
/*673*/ MMVERSION vDriverVersion;
/*674*/ WCHAR szPname[32];
/*675*/ DWORD dwFormats;
/*676*/ WORD wChannels;
/*677*/ WORD wReserved1;
/*678*/ }WAVEINCAPSW,*PWAVEINCAPSW,*NPWAVEINCAPSW,*LPWAVEINCAPSW;
/*685*/ typedef WAVEINCAPSA WAVEINCAPS;
/*686*/ typedef PWAVEINCAPSA PWAVEINCAPS;
/*687*/ typedef NPWAVEINCAPSA NPWAVEINCAPS;
/*688*/ typedef LPWAVEINCAPSA LPWAVEINCAPS;
/*690*/ typedef struct tagWAVEINCAPS2A{
/*691*/ WORD wMid;
/*692*/ WORD wPid;
/*693*/ MMVERSION vDriverVersion;
/*694*/ CHAR szPname[32];
/*695*/ DWORD dwFormats;
/*696*/ WORD wChannels;
/*697*/ WORD wReserved1;
/*698*/ GUID ManufacturerGuid;
/*699*/ GUID ProductGuid;
/*700*/ GUID NameGuid;
/*701*/ }WAVEINCAPS2A,*PWAVEINCAPS2A,*NPWAVEINCAPS2A,*LPWAVEINCAPS2A;
/*702*/ typedef struct tagWAVEINCAPS2W{
/*703*/ WORD wMid;
/*704*/ WORD wPid;
/*705*/ MMVERSION vDriverVersion;
/*706*/ WCHAR szPname[32];
/*707*/ DWORD dwFormats;
/*708*/ WORD wChannels;
/*709*/ WORD wReserved1;
/*710*/ GUID ManufacturerGuid;
/*711*/ GUID ProductGuid;
/*712*/ GUID NameGuid;
/*713*/ }WAVEINCAPS2W,*PWAVEINCAPS2W,*NPWAVEINCAPS2W,*LPWAVEINCAPS2W;
/*720*/ typedef WAVEINCAPS2A WAVEINCAPS2;
/*721*/ typedef PWAVEINCAPS2A PWAVEINCAPS2;
/*722*/ typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
/*723*/ typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
/*769*/ typedef struct waveformat_tag{
/*770*/ WORD wFormatTag;
/*771*/ WORD nChannels;
/*772*/ DWORD nSamplesPerSec;
/*773*/ DWORD nAvgBytesPerSec;
/*774*/ WORD nBlockAlign;
/*775*/ }WAVEFORMAT,*PWAVEFORMAT,typ*NPWAVEFORMAT,typ*LPWAVEFORMAT;
/*782*/ typedef struct pcmwaveformat_tag{
/*783*/ WAVEFORMAT wf;
/*784*/ WORD wBitsPerSample;
/*785*/ }PCMWAVEFORMAT,*PPCMWAVEFORMAT,typ*NPPCMWAVEFORMAT,typ*LPPCMWAVEFORMAT;
/*795*/ typedef struct tWAVEFORMATEX
/*796*/ {
/*797*/ WORD wFormatTag;
/*798*/ WORD nChannels;
/*799*/ DWORD nSamplesPerSec;
/*800*/ DWORD nAvgBytesPerSec;
/*801*/ WORD nBlockAlign;
/*802*/ WORD wBitsPerSample;
/*803*/ WORD cbSize;
/*805*/ }WAVEFORMATEX,*PWAVEFORMATEX,typ*NPWAVEFORMATEX,typ*LPWAVEFORMATEX;
/*808*/ typedef const WAVEFORMATEX typ*LPCWAVEFORMATEX;
/*811*/ UINT typ waveOutGetNumDevs(void);
/*815*/ MMRESULT typ waveOutGetDevCapsA(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPWAVEOUTCAPSA pwoc,typ typ typ typ typ UINT cbwoc);
/*816*/ MMRESULT typ waveOutGetDevCapsW(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPWAVEOUTCAPSW pwoc,typ typ typ typ typ UINT cbwoc);
/*828*/ MMRESULT typ waveOutGetVolume(typ typ typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ LPDWORD pdwVolume);
/*829*/ MMRESULT typ waveOutSetVolume(typ typ typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ DWORD dwVolume);
/*837*/ MMRESULT typ waveOutGetErrorTextA(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPSTR pszText,typ typ typ typ typ UINT cchText);
/*838*/ MMRESULT typ waveOutGetErrorTextW(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPWSTR pszText,typ typ typ typ typ UINT cchText);
/*849*/ MMRESULT typ waveOutOpen(typ typ typ typ typ typ typ LPHWAVEOUT phwo,typ typ typ typ typ UINT uDeviceID,
/*850*/ typ typ typ typ typ LPCWAVEFORMATEX pwfx,typ typ typ typ typ typ typ DWORD_PTR dwCallback,typ typ typ typ typ typ typ DWORD_PTR dwInstance,typ typ typ typ typ DWORD fdwOpen);
/*852*/ MMRESULT typ waveOutClose(typ typ typ typ typ HWAVEOUT hwo);
/*853*/ MMRESULT typ waveOutPrepareHeader(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ typ typ LPWAVEHDR pwh,typ typ typ typ typ UINT cbwh);
/*854*/ MMRESULT typ waveOutUnprepareHeader(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ typ typ LPWAVEHDR pwh,typ typ typ typ typ UINT cbwh);
/*855*/ MMRESULT typ waveOutWrite(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ typ typ LPWAVEHDR pwh,typ typ typ typ typ UINT cbwh);
/*856*/ MMRESULT typ waveOutPause(typ typ typ typ typ HWAVEOUT hwo);
/*857*/ MMRESULT typ waveOutRestart(typ typ typ typ typ HWAVEOUT hwo);
/*858*/ MMRESULT typ waveOutReset(typ typ typ typ typ HWAVEOUT hwo);
/*859*/ MMRESULT typ waveOutBreakLoop(typ typ typ typ typ HWAVEOUT hwo);
/*860*/ MMRESULT typ waveOutGetPosition(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ typ typ LPMMTIME pmmt,typ typ typ typ typ UINT cbmmt);
/*861*/ MMRESULT typ waveOutGetPitch(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ LPDWORD pdwPitch);
/*862*/ MMRESULT typ waveOutSetPitch(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ DWORD dwPitch);
/*863*/ MMRESULT typ waveOutGetPlaybackRate(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ LPDWORD pdwRate);
/*864*/ MMRESULT typ waveOutSetPlaybackRate(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ DWORD dwRate);
/*865*/ MMRESULT typ waveOutGetID(typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ LPUINT puDeviceID);
/*869*/ MMRESULT typ waveOutMessage(typ typ typ typ typ typ typ HWAVEOUT hwo,typ typ typ typ typ UINT uMsg,typ typ typ typ typ DWORD_PTR dw1,typ typ typ typ typ DWORD_PTR dw2);
/*875*/ UINT typ waveInGetNumDevs(void);
/*879*/ MMRESULT typ waveInGetDevCapsA(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPWAVEINCAPSA pwic,typ typ typ typ typ UINT cbwic);
/*880*/ MMRESULT typ waveInGetDevCapsW(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPWAVEINCAPSW pwic,typ typ typ typ typ UINT cbwic);
/*893*/ MMRESULT typ waveInGetErrorTextA(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPSTR pszText,typ typ typ typ typ UINT cchText);
/*894*/ MMRESULT typ waveInGetErrorTextW(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPWSTR pszText,typ typ typ typ typ UINT cchText);
/*905*/ MMRESULT typ waveInOpen(typ typ typ typ typ typ typ LPHWAVEIN phwi,typ typ typ typ typ UINT uDeviceID,
/*906*/ typ typ typ typ typ LPCWAVEFORMATEX pwfx,typ typ typ typ typ typ typ DWORD_PTR dwCallback,typ typ typ typ typ typ typ DWORD_PTR dwInstance,typ typ typ typ typ DWORD fdwOpen);
/*908*/ MMRESULT typ waveInClose(typ typ typ typ typ HWAVEIN hwi);
/*909*/ MMRESULT typ waveInPrepareHeader(typ typ typ typ typ HWAVEIN hwi,typ typ typ typ typ typ typ LPWAVEHDR pwh,typ typ typ typ typ UINT cbwh);
/*910*/ MMRESULT typ waveInUnprepareHeader(typ typ typ typ typ HWAVEIN hwi,typ typ typ typ typ typ typ LPWAVEHDR pwh,typ typ typ typ typ UINT cbwh);
/*911*/ MMRESULT typ waveInAddBuffer(typ typ typ typ typ HWAVEIN hwi,typ typ typ typ typ typ typ LPWAVEHDR pwh,typ typ typ typ typ UINT cbwh);
/*912*/ MMRESULT typ waveInStart(typ typ typ typ typ HWAVEIN hwi);
/*913*/ MMRESULT typ waveInStop(typ typ typ typ typ HWAVEIN hwi);
/*914*/ MMRESULT typ waveInReset(typ typ typ typ typ HWAVEIN hwi);
/*915*/ MMRESULT typ waveInGetPosition(typ typ typ typ typ HWAVEIN hwi,typ typ typ typ typ typ typ LPMMTIME pmmt,typ typ typ typ typ UINT cbmmt);
/*916*/ MMRESULT typ waveInGetID(typ typ typ typ typ HWAVEIN hwi,typ typ typ typ typ LPUINT puDeviceID);
/*920*/ MMRESULT typ waveInMessage(typ typ typ typ typ typ typ HWAVEIN hwi,typ typ typ typ typ UINT uMsg,typ typ typ typ typ typ typ DWORD_PTR dw1,typ typ typ typ typ typ typ DWORD_PTR dw2);
/*947*/ struct HMIDI__{int unused;};typedef struct HMIDI__*HMIDI;
/*948*/ struct HMIDIIN__{int unused;};typedef struct HMIDIIN__*HMIDIIN;
/*949*/ struct HMIDIOUT__{int unused;};typedef struct HMIDIOUT__*HMIDIOUT;
/*950*/ struct HMIDISTRM__{int unused;};typedef struct HMIDISTRM__*HMIDISTRM;
/*951*/ typedef HMIDI typ*LPHMIDI;
/*952*/ typedef HMIDIIN typ*LPHMIDIIN;
/*953*/ typedef HMIDIOUT typ*LPHMIDIOUT;
/*954*/ typedef HMIDISTRM typ*LPHMIDISTRM;
/*955*/ typedef DRVCALLBACK MIDICALLBACK;
/*956*/ typedef MIDICALLBACK typ*LPMIDICALLBACK;
/*958*/ typedef WORD PATCHARRAY[128];
/*959*/ typedef WORD typ*LPPATCHARRAY;
/*960*/ typedef WORD KEYARRAY[128];
/*961*/ typedef WORD typ*LPKEYARRAY;
/*997*/ typedef struct tagMIDIOUTCAPSA{
/*998*/ WORD wMid;
/*999*/ WORD wPid;
/*1000*/ MMVERSION vDriverVersion;
/*1001*/ CHAR szPname[32];
/*1002*/ WORD wTechnology;
/*1003*/ WORD wVoices;
/*1004*/ WORD wNotes;
/*1005*/ WORD wChannelMask;
/*1006*/ DWORD dwSupport;
/*1007*/ }MIDIOUTCAPSA,*PMIDIOUTCAPSA,*NPMIDIOUTCAPSA,*LPMIDIOUTCAPSA;
/*1008*/ typedef struct tagMIDIOUTCAPSW{
/*1009*/ WORD wMid;
/*1010*/ WORD wPid;
/*1011*/ MMVERSION vDriverVersion;
/*1012*/ WCHAR szPname[32];
/*1013*/ WORD wTechnology;
/*1014*/ WORD wVoices;
/*1015*/ WORD wNotes;
/*1016*/ WORD wChannelMask;
/*1017*/ DWORD dwSupport;
/*1018*/ }MIDIOUTCAPSW,*PMIDIOUTCAPSW,*NPMIDIOUTCAPSW,*LPMIDIOUTCAPSW;
/*1025*/ typedef MIDIOUTCAPSA MIDIOUTCAPS;
/*1026*/ typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
/*1027*/ typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
/*1028*/ typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
/*1030*/ typedef struct tagMIDIOUTCAPS2A{
/*1031*/ WORD wMid;
/*1032*/ WORD wPid;
/*1033*/ MMVERSION vDriverVersion;
/*1034*/ CHAR szPname[32];
/*1035*/ WORD wTechnology;
/*1036*/ WORD wVoices;
/*1037*/ WORD wNotes;
/*1038*/ WORD wChannelMask;
/*1039*/ DWORD dwSupport;
/*1040*/ GUID ManufacturerGuid;
/*1041*/ GUID ProductGuid;
/*1042*/ GUID NameGuid;
/*1043*/ }MIDIOUTCAPS2A,*PMIDIOUTCAPS2A,*NPMIDIOUTCAPS2A,*LPMIDIOUTCAPS2A;
/*1044*/ typedef struct tagMIDIOUTCAPS2W{
/*1045*/ WORD wMid;
/*1046*/ WORD wPid;
/*1047*/ MMVERSION vDriverVersion;
/*1048*/ WCHAR szPname[32];
/*1049*/ WORD wTechnology;
/*1050*/ WORD wVoices;
/*1051*/ WORD wNotes;
/*1052*/ WORD wChannelMask;
/*1053*/ DWORD dwSupport;
/*1054*/ GUID ManufacturerGuid;
/*1055*/ GUID ProductGuid;
/*1056*/ GUID NameGuid;
/*1057*/ }MIDIOUTCAPS2W,*PMIDIOUTCAPS2W,*NPMIDIOUTCAPS2W,*LPMIDIOUTCAPS2W;
/*1064*/ typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
/*1065*/ typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
/*1066*/ typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
/*1067*/ typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
/*1104*/ typedef struct tagMIDIINCAPSA{
/*1105*/ WORD wMid;
/*1106*/ WORD wPid;
/*1107*/ MMVERSION vDriverVersion;
/*1108*/ CHAR szPname[32];
/*1110*/ DWORD dwSupport;
/*1112*/ }MIDIINCAPSA,*PMIDIINCAPSA,*NPMIDIINCAPSA,*LPMIDIINCAPSA;
/*1113*/ typedef struct tagMIDIINCAPSW{
/*1114*/ WORD wMid;
/*1115*/ WORD wPid;
/*1116*/ MMVERSION vDriverVersion;
/*1117*/ WCHAR szPname[32];
/*1119*/ DWORD dwSupport;
/*1121*/ }MIDIINCAPSW,*PMIDIINCAPSW,*NPMIDIINCAPSW,*LPMIDIINCAPSW;
/*1128*/ typedef MIDIINCAPSA MIDIINCAPS;
/*1129*/ typedef PMIDIINCAPSA PMIDIINCAPS;
/*1130*/ typedef NPMIDIINCAPSA NPMIDIINCAPS;
/*1131*/ typedef LPMIDIINCAPSA LPMIDIINCAPS;
/*1133*/ typedef struct tagMIDIINCAPS2A{
/*1134*/ WORD wMid;
/*1135*/ WORD wPid;
/*1136*/ MMVERSION vDriverVersion;
/*1137*/ CHAR szPname[32];
/*1139*/ DWORD dwSupport;
/*1141*/ GUID ManufacturerGuid;
/*1142*/ GUID ProductGuid;
/*1143*/ GUID NameGuid;
/*1144*/ }MIDIINCAPS2A,*PMIDIINCAPS2A,*NPMIDIINCAPS2A,*LPMIDIINCAPS2A;
/*1145*/ typedef struct tagMIDIINCAPS2W{
/*1146*/ WORD wMid;
/*1147*/ WORD wPid;
/*1148*/ MMVERSION vDriverVersion;
/*1149*/ WCHAR szPname[32];
/*1151*/ DWORD dwSupport;
/*1153*/ GUID ManufacturerGuid;
/*1154*/ GUID ProductGuid;
/*1155*/ GUID NameGuid;
/*1156*/ }MIDIINCAPS2W,*PMIDIINCAPS2W,*NPMIDIINCAPS2W,*LPMIDIINCAPS2W;
/*1163*/ typedef MIDIINCAPS2A MIDIINCAPS2;
/*1164*/ typedef PMIDIINCAPS2A PMIDIINCAPS2;
/*1165*/ typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
/*1166*/ typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
/*1183*/ typedef struct midihdr_tag{
/*1184*/ LPSTR lpData;
/*1185*/ DWORD dwBufferLength;
/*1186*/ DWORD dwBytesRecorded;
/*1187*/ DWORD_PTR dwUser;
/*1188*/ DWORD dwFlags;
/*1189*/ struct midihdr_tag typ*lpNext;
/*1190*/ DWORD_PTR reserved;
/*1192*/ DWORD dwOffset;
/*1193*/ DWORD_PTR dwReserved[8];
/*1195*/ }MIDIHDR,*PMIDIHDR,typ*NPMIDIHDR,typ*LPMIDIHDR;
/*1199*/ typedef struct midievent_tag
/*1200*/ {
/*1201*/ DWORD dwDeltaTime;
/*1202*/ DWORD dwStreamID;
/*1203*/ DWORD dwEvent;
/*1204*/ DWORD dwParms[1];
/*1205*/ }MIDIEVENT;
/*1207*/ typedef struct midistrmbuffver_tag
/*1208*/ {
/*1209*/ DWORD dwVersion;
/*1210*/ DWORD dwMid;
/*1211*/ DWORD dwOEMVersion;
/*1212*/ }MIDISTRMBUFFVER;
/*1265*/ typedef struct midiproptimediv_tag
/*1266*/ {
/*1267*/ DWORD cbStruct;
/*1268*/ DWORD dwTimeDiv;
/*1269*/ }MIDIPROPTIMEDIV,typ*LPMIDIPROPTIMEDIV;
/*1271*/ typedef struct midiproptempo_tag
/*1272*/ {
/*1273*/ DWORD cbStruct;
/*1274*/ DWORD dwTempo;
/*1275*/ }MIDIPROPTEMPO,typ*LPMIDIPROPTEMPO;
/*1280*/ UINT typ midiOutGetNumDevs(void);
/*1282*/ MMRESULT typ midiStreamOpen(typ typ typ typ typ LPHMIDISTRM phms,typ typ typ typ typ typ typ LPUINT puDeviceID,typ typ typ typ typ DWORD cMidi,typ typ typ typ typ typ typ DWORD_PTR dwCallback,typ typ typ typ typ typ typ DWORD_PTR dwInstance,typ typ typ typ typ DWORD fdwOpen);
/*1283*/ MMRESULT typ midiStreamClose(typ typ typ typ typ HMIDISTRM hms);
/*1285*/ MMRESULT typ midiStreamProperty(typ typ typ typ typ HMIDISTRM hms,typ typ typ typ typ typ typ LPBYTE lppropdata,typ typ typ typ typ DWORD dwProperty);
/*1286*/ MMRESULT typ midiStreamPosition(typ typ typ typ typ HMIDISTRM hms,typ typ typ typ typ LPMMTIME lpmmt,typ typ typ typ typ UINT cbmmt);
/*1288*/ MMRESULT typ midiStreamOut(typ typ typ typ typ HMIDISTRM hms,typ typ typ typ typ LPMIDIHDR pmh,typ typ typ typ typ UINT cbmh);
/*1289*/ MMRESULT typ midiStreamPause(typ typ typ typ typ HMIDISTRM hms);
/*1290*/ MMRESULT typ midiStreamRestart(typ typ typ typ typ HMIDISTRM hms);
/*1291*/ MMRESULT typ midiStreamStop(typ typ typ typ typ HMIDISTRM hms);
/*1294*/ MMRESULT typ midiConnect(typ typ typ typ typ HMIDI hmi,typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ typ typ LPVOID pReserved);
/*1295*/ MMRESULT typ midiDisconnect(typ typ typ typ typ HMIDI hmi,typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ typ typ LPVOID pReserved);
/*1301*/ MMRESULT typ midiOutGetDevCapsA(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPMIDIOUTCAPSA pmoc,typ typ typ typ typ UINT cbmoc);
/*1302*/ MMRESULT typ midiOutGetDevCapsW(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPMIDIOUTCAPSW pmoc,typ typ typ typ typ UINT cbmoc);
/*1314*/ MMRESULT typ midiOutGetVolume(typ typ typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ LPDWORD pdwVolume);
/*1315*/ MMRESULT typ midiOutSetVolume(typ typ typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ DWORD dwVolume);
/*1323*/ MMRESULT typ midiOutGetErrorTextA(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPSTR pszText,typ typ typ typ typ UINT cchText);
/*1324*/ MMRESULT typ midiOutGetErrorTextW(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPWSTR pszText,typ typ typ typ typ UINT cchText);
/*1335*/ MMRESULT typ midiOutOpen(typ typ typ typ typ LPHMIDIOUT phmo,typ typ typ typ typ UINT uDeviceID,
/*1336*/ typ typ typ typ typ typ typ DWORD_PTR dwCallback,typ typ typ typ typ typ typ DWORD_PTR dwInstance,typ typ typ typ typ DWORD fdwOpen);
/*1337*/ MMRESULT typ midiOutClose(typ typ typ typ typ HMIDIOUT hmo);
/*1338*/ MMRESULT typ midiOutPrepareHeader(typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ typ typ LPMIDIHDR pmh,typ typ typ typ typ UINT cbmh);
/*1339*/ MMRESULT typ midiOutUnprepareHeader(typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ typ typ LPMIDIHDR pmh,typ typ typ typ typ UINT cbmh);
/*1340*/ MMRESULT typ midiOutShortMsg(typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ DWORD dwMsg);
/*1341*/ MMRESULT typ midiOutLongMsg(typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ typ typ LPMIDIHDR pmh,typ typ typ typ typ UINT cbmh);
/*1342*/ MMRESULT typ midiOutReset(typ typ typ typ typ HMIDIOUT hmo);
/*1343*/ MMRESULT typ midiOutCachePatches(typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ UINT uBank,typ typ typ typ typ typ typ LPWORD pwpa,typ typ typ typ typ UINT fuCache);
/*1344*/ MMRESULT typ midiOutCacheDrumPatches(typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ UINT uPatch,typ typ typ typ typ typ typ LPWORD pwkya,typ typ typ typ typ UINT fuCache);
/*1345*/ MMRESULT typ midiOutGetID(typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ LPUINT puDeviceID);
/*1349*/ MMRESULT typ midiOutMessage(typ typ typ typ typ typ typ HMIDIOUT hmo,typ typ typ typ typ UINT uMsg,typ typ typ typ typ typ typ DWORD_PTR dw1,typ typ typ typ typ typ typ DWORD_PTR dw2);
/*1355*/ UINT typ midiInGetNumDevs(void);
/*1359*/ MMRESULT typ midiInGetDevCapsA(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPMIDIINCAPSA pmic,typ typ typ typ typ UINT cbmic);
/*1360*/ MMRESULT typ midiInGetDevCapsW(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPMIDIINCAPSW pmic,typ typ typ typ typ UINT cbmic);
/*1366*/ MMRESULT typ midiInGetErrorTextA(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPSTR pszText,typ typ typ typ typ UINT cchText);
/*1367*/ MMRESULT typ midiInGetErrorTextW(typ typ typ typ typ MMRESULT mmrError,typ typ typ typ typ LPWSTR pszText,typ typ typ typ typ UINT cchText);
/*1379*/ MMRESULT typ midiInOpen(typ typ typ typ typ LPHMIDIIN phmi,typ typ typ typ typ UINT uDeviceID,
/*1380*/ typ typ typ typ typ typ typ DWORD_PTR dwCallback,typ typ typ typ typ typ typ DWORD_PTR dwInstance,typ typ typ typ typ DWORD fdwOpen);
/*1381*/ MMRESULT typ midiInClose(typ typ typ typ typ HMIDIIN hmi);
/*1382*/ MMRESULT typ midiInPrepareHeader(typ typ typ typ typ HMIDIIN hmi,typ typ typ typ typ typ typ LPMIDIHDR pmh,typ typ typ typ typ UINT cbmh);
/*1383*/ MMRESULT typ midiInUnprepareHeader(typ typ typ typ typ HMIDIIN hmi,typ typ typ typ typ typ typ LPMIDIHDR pmh,typ typ typ typ typ UINT cbmh);
/*1384*/ MMRESULT typ midiInAddBuffer(typ typ typ typ typ HMIDIIN hmi,typ typ typ typ typ LPMIDIHDR pmh,typ typ typ typ typ UINT cbmh);
/*1385*/ MMRESULT typ midiInStart(typ typ typ typ typ HMIDIIN hmi);
/*1386*/ MMRESULT typ midiInStop(typ typ typ typ typ HMIDIIN hmi);
/*1387*/ MMRESULT typ midiInReset(typ typ typ typ typ HMIDIIN hmi);
/*1388*/ MMRESULT typ midiInGetID(typ typ typ typ typ HMIDIIN hmi,typ typ typ typ typ LPUINT puDeviceID);
/*1392*/ MMRESULT typ midiInMessage(typ typ typ typ typ typ typ HMIDIIN hmi,typ typ typ typ typ UINT uMsg,typ typ typ typ typ typ typ DWORD_PTR dw1,typ typ typ typ typ typ typ DWORD_PTR dw2);
/*1415*/ typedef struct tagAUXCAPSA{
/*1416*/ WORD wMid;
/*1417*/ WORD wPid;
/*1418*/ MMVERSION vDriverVersion;
/*1419*/ CHAR szPname[32];
/*1420*/ WORD wTechnology;
/*1421*/ WORD wReserved1;
/*1422*/ DWORD dwSupport;
/*1423*/ }AUXCAPSA,*PAUXCAPSA,*NPAUXCAPSA,*LPAUXCAPSA;
/*1424*/ typedef struct tagAUXCAPSW{
/*1425*/ WORD wMid;
/*1426*/ WORD wPid;
/*1427*/ MMVERSION vDriverVersion;
/*1428*/ WCHAR szPname[32];
/*1429*/ WORD wTechnology;
/*1430*/ WORD wReserved1;
/*1431*/ DWORD dwSupport;
/*1432*/ }AUXCAPSW,*PAUXCAPSW,*NPAUXCAPSW,*LPAUXCAPSW;
/*1439*/ typedef AUXCAPSA AUXCAPS;
/*1440*/ typedef PAUXCAPSA PAUXCAPS;
/*1441*/ typedef NPAUXCAPSA NPAUXCAPS;
/*1442*/ typedef LPAUXCAPSA LPAUXCAPS;
/*1444*/ typedef struct tagAUXCAPS2A{
/*1445*/ WORD wMid;
/*1446*/ WORD wPid;
/*1447*/ MMVERSION vDriverVersion;
/*1448*/ CHAR szPname[32];
/*1449*/ WORD wTechnology;
/*1450*/ WORD wReserved1;
/*1451*/ DWORD dwSupport;
/*1452*/ GUID ManufacturerGuid;
/*1453*/ GUID ProductGuid;
/*1454*/ GUID NameGuid;
/*1455*/ }AUXCAPS2A,*PAUXCAPS2A,*NPAUXCAPS2A,*LPAUXCAPS2A;
/*1456*/ typedef struct tagAUXCAPS2W{
/*1457*/ WORD wMid;
/*1458*/ WORD wPid;
/*1459*/ MMVERSION vDriverVersion;
/*1460*/ WCHAR szPname[32];
/*1461*/ WORD wTechnology;
/*1462*/ WORD wReserved1;
/*1463*/ DWORD dwSupport;
/*1464*/ GUID ManufacturerGuid;
/*1465*/ GUID ProductGuid;
/*1466*/ GUID NameGuid;
/*1467*/ }AUXCAPS2W,*PAUXCAPS2W,*NPAUXCAPS2W,*LPAUXCAPS2W;
/*1474*/ typedef AUXCAPS2A AUXCAPS2;
/*1475*/ typedef PAUXCAPS2A PAUXCAPS2;
/*1476*/ typedef NPAUXCAPS2A NPAUXCAPS2;
/*1477*/ typedef LPAUXCAPS2A LPAUXCAPS2;
/*1500*/ UINT typ auxGetNumDevs(void);
/*1503*/ MMRESULT typ auxGetDevCapsA(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPAUXCAPSA pac,typ typ typ typ typ UINT cbac);
/*1504*/ MMRESULT typ auxGetDevCapsW(typ typ typ typ typ UINT_PTR uDeviceID,typ typ typ typ typ LPAUXCAPSW pac,typ typ typ typ typ UINT cbac);
/*1514*/ MMRESULT typ auxSetVolume(typ typ typ typ typ UINT uDeviceID,typ typ typ typ typ DWORD dwVolume);
/*1515*/ MMRESULT typ auxGetVolume(typ typ typ typ typ UINT uDeviceID,typ typ typ typ typ LPDWORD pdwVolume);
/*1519*/ MMRESULT typ auxOutMessage(typ typ typ typ typ UINT uDeviceID,typ typ typ typ typ UINT uMsg,typ typ typ typ typ typ typ DWORD_PTR dw1,typ typ typ typ typ typ typ DWORD_PTR dw2);
/*1534*/ struct HMIXEROBJ__{int unused;};typedef struct HMIXEROBJ__*HMIXEROBJ;
/*1535*/ typedef HMIXEROBJ typ*LPHMIXEROBJ;
/*1537*/ struct HMIXER__{int unused;};typedef struct HMIXER__*HMIXER;
/*1538*/ typedef HMIXER typ*LPHMIXER;
/*1567*/ UINT typ mixerGetNumDevs(void);
/*1571*/ typedef struct tagMIXERCAPSA{
/*1572*/ WORD wMid;
/*1573*/ WORD wPid;
/*1574*/ MMVERSION vDriverVersion;
/*1575*/ CHAR szPname[32];
/*1576*/ DWORD fdwSupport;
/*1577*/ DWORD cDestinations;
/*1578*/ }MIXERCAPSA,*PMIXERCAPSA,*LPMIXERCAPSA;
/*1579*/ typedef struct tagMIXERCAPSW{
/*1580*/ WORD wMid;
/*1581*/ WORD wPid;
/*1582*/ MMVERSION vDriverVersion;
/*1583*/ WCHAR szPname[32];
/*1584*/ DWORD fdwSupport;
/*1585*/ DWORD cDestinations;
/*1586*/ }MIXERCAPSW,*PMIXERCAPSW,*LPMIXERCAPSW;
/*1592*/ typedef MIXERCAPSA MIXERCAPS;
/*1593*/ typedef PMIXERCAPSA PMIXERCAPS;
/*1594*/ typedef LPMIXERCAPSA LPMIXERCAPS;
/*1596*/ typedef struct tagMIXERCAPS2A{
/*1597*/ WORD wMid;
/*1598*/ WORD wPid;
/*1599*/ MMVERSION vDriverVersion;
/*1600*/ CHAR szPname[32];
/*1601*/ DWORD fdwSupport;
/*1602*/ DWORD cDestinations;
/*1603*/ GUID ManufacturerGuid;
/*1604*/ GUID ProductGuid;
/*1605*/ GUID NameGuid;
/*1606*/ }MIXERCAPS2A,*PMIXERCAPS2A,*LPMIXERCAPS2A;
/*1607*/ typedef struct tagMIXERCAPS2W{
/*1608*/ WORD wMid;
/*1609*/ WORD wPid;
/*1610*/ MMVERSION vDriverVersion;
/*1611*/ WCHAR szPname[32];
/*1612*/ DWORD fdwSupport;
/*1613*/ DWORD cDestinations;
/*1614*/ GUID ManufacturerGuid;
/*1615*/ GUID ProductGuid;
/*1616*/ GUID NameGuid;
/*1617*/ }MIXERCAPS2W,*PMIXERCAPS2W,*LPMIXERCAPS2W;
/*1623*/ typedef MIXERCAPS2A MIXERCAPS2;
/*1624*/ typedef PMIXERCAPS2A PMIXERCAPS2;
/*1625*/ typedef LPMIXERCAPS2A LPMIXERCAPS2;
/*1642*/ MMRESULT typ mixerGetDevCapsA(typ typ typ typ typ UINT_PTR uMxId,typ typ typ typ typ LPMIXERCAPSA pmxcaps,typ typ typ typ typ UINT cbmxcaps);
/*1643*/ MMRESULT typ mixerGetDevCapsW(typ typ typ typ typ UINT_PTR uMxId,typ typ typ typ typ LPMIXERCAPSW pmxcaps,typ typ typ typ typ UINT cbmxcaps);
/*1654*/ MMRESULT typ mixerOpen(typ typ typ typ typ typ typ LPHMIXER phmx,typ typ typ typ typ UINT uMxId,typ typ typ typ typ typ typ DWORD_PTR dwCallback,typ typ typ typ typ typ typ DWORD_PTR dwInstance,typ typ typ typ typ DWORD fdwOpen);
/*1657*/ MMRESULT typ mixerClose(typ typ typ typ typ HMIXER hmx);
/*1659*/ DWORD typ mixerMessage(typ typ typ typ typ typ typ HMIXER hmx,typ typ typ typ typ UINT uMsg,typ typ typ typ typ typ typ DWORD_PTR dwParam1,typ typ typ typ typ typ typ DWORD_PTR dwParam2);
/*1663*/ typedef struct tagMIXERLINEA{
/*1664*/ DWORD cbStruct;
/*1665*/ DWORD dwDestination;
/*1666*/ DWORD dwSource;
/*1667*/ DWORD dwLineID;
/*1668*/ DWORD fdwLine;
/*1669*/ DWORD_PTR dwUser;
/*1670*/ DWORD dwComponentType;
/*1671*/ DWORD cChannels;
/*1672*/ DWORD cConnections;
/*1673*/ DWORD cControls;
/*1674*/ CHAR szShortName[16];
/*1675*/ CHAR szName[64];
/*1676*/ struct{
/*1677*/ DWORD dwType;
/*1678*/ DWORD dwDeviceID;
/*1679*/ WORD wMid;
/*1680*/ WORD wPid;
/*1681*/ MMVERSION vDriverVersion;
/*1682*/ CHAR szPname[32];
/*1683*/ }Target;
/*1684*/ }MIXERLINEA,*PMIXERLINEA,*LPMIXERLINEA;
/*1685*/ typedef struct tagMIXERLINEW{
/*1686*/ DWORD cbStruct;
/*1687*/ DWORD dwDestination;
/*1688*/ DWORD dwSource;
/*1689*/ DWORD dwLineID;
/*1690*/ DWORD fdwLine;
/*1691*/ DWORD_PTR dwUser;
/*1692*/ DWORD dwComponentType;
/*1693*/ DWORD cChannels;
/*1694*/ DWORD cConnections;
/*1695*/ DWORD cControls;
/*1696*/ WCHAR szShortName[16];
/*1697*/ WCHAR szName[64];
/*1698*/ struct{
/*1699*/ DWORD dwType;
/*1700*/ DWORD dwDeviceID;
/*1701*/ WORD wMid;
/*1702*/ WORD wPid;
/*1703*/ MMVERSION vDriverVersion;
/*1704*/ WCHAR szPname[32];
/*1705*/ }Target;
/*1706*/ }MIXERLINEW,*PMIXERLINEW,*LPMIXERLINEW;
/*1712*/ typedef MIXERLINEA MIXERLINE;
/*1713*/ typedef PMIXERLINEA PMIXERLINE;
/*1714*/ typedef LPMIXERLINEA LPMIXERLINE;
/*1797*/ MMRESULT typ mixerGetLineInfoA(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ LPMIXERLINEA pmxl,typ typ typ typ typ DWORD fdwInfo);
/*1798*/ MMRESULT typ mixerGetLineInfoW(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ LPMIXERLINEW pmxl,typ typ typ typ typ DWORD fdwInfo);
/*1818*/ MMRESULT typ mixerGetID(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ UINT typ*puMxId,typ typ typ typ typ DWORD fdwId);
/*1827*/ typedef struct tagMIXERCONTROLA{
/*1828*/ DWORD cbStruct;
/*1829*/ DWORD dwControlID;
/*1830*/ DWORD dwControlType;
/*1831*/ DWORD fdwControl;
/*1832*/ DWORD cMultipleItems;
/*1833*/ CHAR szShortName[16];
/*1834*/ CHAR szName[64];
/*1835*/ union{
/*1836*/ struct{
/*1837*/ LONG lMinimum;
/*1838*/ LONG lMaximum;
/*1839*/ }s;
/*1840*/ struct{
/*1841*/ DWORD dwMinimum;
/*1842*/ DWORD dwMaximum;
/*1843*/ }s2;
/*1844*/ DWORD dwReserved[6];
/*1845*/ }Bounds;
/*1846*/ union{
/*1847*/ DWORD cSteps;
/*1848*/ DWORD cbCustomData;
/*1849*/ DWORD dwReserved[6];
/*1850*/ }Metrics;
/*1851*/ }MIXERCONTROLA,*PMIXERCONTROLA,*LPMIXERCONTROLA;
/*1852*/ typedef struct tagMIXERCONTROLW{
/*1853*/ DWORD cbStruct;
/*1854*/ DWORD dwControlID;
/*1855*/ DWORD dwControlType;
/*1856*/ DWORD fdwControl;
/*1857*/ DWORD cMultipleItems;
/*1858*/ WCHAR szShortName[16];
/*1859*/ WCHAR szName[64];
/*1860*/ union{
/*1861*/ struct{
/*1862*/ LONG lMinimum;
/*1863*/ LONG lMaximum;
/*1864*/ }s;
/*1865*/ struct{
/*1866*/ DWORD dwMinimum;
/*1867*/ DWORD dwMaximum;
/*1868*/ }s2;
/*1869*/ DWORD dwReserved[6];
/*1870*/ }Bounds;
/*1871*/ union{
/*1872*/ DWORD cSteps;
/*1873*/ DWORD cbCustomData;
/*1874*/ DWORD dwReserved[6];
/*1875*/ }Metrics;
/*1876*/ }MIXERCONTROLW,*PMIXERCONTROLW,*LPMIXERCONTROLW;
/*1882*/ typedef MIXERCONTROLA MIXERCONTROL;
/*1883*/ typedef PMIXERCONTROLA PMIXERCONTROL;
/*1884*/ typedef LPMIXERCONTROLA LPMIXERCONTROL;
/*2003*/ typedef struct tagMIXERLINECONTROLSA{
/*2004*/ DWORD cbStruct;
/*2005*/ DWORD dwLineID;
/*2006*/ union{
/*2007*/ DWORD dwControlID;
/*2008*/ DWORD dwControlType;
/*2009*/ }u;
/*2010*/ DWORD cControls;
/*2011*/ DWORD cbmxctrl;
/*2012*/ LPMIXERCONTROLA pamxctrl;
/*2013*/ }MIXERLINECONTROLSA,*PMIXERLINECONTROLSA,*LPMIXERLINECONTROLSA;
/*2014*/ typedef struct tagMIXERLINECONTROLSW{
/*2015*/ DWORD cbStruct;
/*2016*/ DWORD dwLineID;
/*2017*/ union{
/*2018*/ DWORD dwControlID;
/*2019*/ DWORD dwControlType;
/*2020*/ }u;
/*2021*/ DWORD cControls;
/*2022*/ DWORD cbmxctrl;
/*2023*/ LPMIXERCONTROLW pamxctrl;
/*2024*/ }MIXERLINECONTROLSW,*PMIXERLINECONTROLSW,*LPMIXERLINECONTROLSW;
/*2030*/ typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
/*2031*/ typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
/*2032*/ typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
/*2055*/ MMRESULT typ mixerGetLineControlsA(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ LPMIXERLINECONTROLSA pmxlc,typ typ typ typ typ DWORD fdwControls);
/*2056*/ MMRESULT typ mixerGetLineControlsW(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ LPMIXERLINECONTROLSW pmxlc,typ typ typ typ typ DWORD fdwControls);
/*2074*/ typedef struct tMIXERCONTROLDETAILS{
/*2075*/ DWORD cbStruct;
/*2076*/ DWORD dwControlID;
/*2077*/ DWORD cChannels;
/*2078*/ union{
/*2079*/ HWND hwndOwner;
/*2080*/ DWORD cMultipleItems;
/*2081*/ }u;
/*2082*/ DWORD cbDetails;
/*2083*/ LPVOID paDetails;
/*2084*/ }MIXERCONTROLDETAILS,*PMIXERCONTROLDETAILS,typ*LPMIXERCONTROLDETAILS;
/*2093*/ typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA{
/*2094*/ DWORD dwParam1;
/*2095*/ DWORD dwParam2;
/*2096*/ CHAR szName[64];
/*2097*/ }MIXERCONTROLDETAILS_LISTTEXTA,*PMIXERCONTROLDETAILS_LISTTEXTA,*LPMIXERCONTROLDETAILS_LISTTEXTA;
/*2098*/ typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW{
/*2099*/ DWORD dwParam1;
/*2100*/ DWORD dwParam2;
/*2101*/ WCHAR szName[64];
/*2102*/ }MIXERCONTROLDETAILS_LISTTEXTW,*PMIXERCONTROLDETAILS_LISTTEXTW,*LPMIXERCONTROLDETAILS_LISTTEXTW;
/*2108*/ typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
/*2109*/ typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
/*2110*/ typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
/*2125*/ typedef struct tMIXERCONTROLDETAILS_BOOLEAN{
/*2126*/ LONG fValue;
/*2127*/ }MIXERCONTROLDETAILS_BOOLEAN,
/*2128*/ *PMIXERCONTROLDETAILS_BOOLEAN,
/*2129*/ typ*LPMIXERCONTROLDETAILS_BOOLEAN;
/*2131*/ typedef struct tMIXERCONTROLDETAILS_SIGNED{
/*2132*/ LONG lValue;
/*2133*/ }MIXERCONTROLDETAILS_SIGNED,
/*2134*/ *PMIXERCONTROLDETAILS_SIGNED,
/*2135*/ typ*LPMIXERCONTROLDETAILS_SIGNED;
/*2138*/ typedef struct tMIXERCONTROLDETAILS_UNSIGNED{
/*2139*/ DWORD dwValue;
/*2140*/ }MIXERCONTROLDETAILS_UNSIGNED,
/*2141*/ *PMIXERCONTROLDETAILS_UNSIGNED,
/*2142*/ typ*LPMIXERCONTROLDETAILS_UNSIGNED;
/*2147*/ MMRESULT typ mixerGetControlDetailsA(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ LPMIXERCONTROLDETAILS pmxcd,typ typ typ typ typ DWORD fdwDetails);
/*2148*/ MMRESULT typ mixerGetControlDetailsW(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ LPMIXERCONTROLDETAILS pmxcd,typ typ typ typ typ DWORD fdwDetails);
/*2165*/ MMRESULT typ mixerSetControlDetails(typ typ typ typ typ typ typ HMIXEROBJ hmxobj,typ typ typ typ typ LPMIXERCONTROLDETAILS pmxcd,typ typ typ typ typ DWORD fdwDetails);
/*2188*/ typedef void(typ TIMECALLBACK)(UINT uTimerID,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);
/*2190*/ typedef TIMECALLBACK typ*LPTIMECALLBACK;
/*2211*/ typedef struct timecaps_tag{
/*2212*/ UINT wPeriodMin;
/*2213*/ UINT wPeriodMax;
/*2214*/ }TIMECAPS,*PTIMECAPS,typ*NPTIMECAPS,typ*LPTIMECAPS;
/*2217*/ MMRESULT typ timeGetSystemTime(typ typ typ typ typ LPMMTIME pmmt,typ typ typ typ typ UINT cbmmt);
/*2218*/ DWORD typ timeGetTime(void);
/*2219*/ MMRESULT typ timeSetEvent(typ typ typ typ typ UINT uDelay,typ typ typ typ typ UINT uResolution,
/*2220*/ typ typ typ typ typ LPTIMECALLBACK fptc,typ typ typ typ typ DWORD_PTR dwUser,typ typ typ typ typ UINT fuEvent);
/*2221*/ MMRESULT typ timeKillEvent(typ typ typ typ typ UINT uTimerID);
/*2222*/ MMRESULT typ timeGetDevCaps(typ typ typ typ typ LPTIMECAPS ptc,typ typ typ typ typ UINT cbtc);
/*2223*/ MMRESULT typ timeBeginPeriod(typ typ typ typ typ UINT uPeriod);
/*2224*/ MMRESULT typ timeEndPeriod(typ typ typ typ typ UINT uPeriod);
/*2334*/ typedef struct tagJOYCAPSA{
/*2335*/ WORD wMid;
/*2336*/ WORD wPid;
/*2337*/ CHAR szPname[32];
/*2338*/ UINT wXmin;
/*2339*/ UINT wXmax;
/*2340*/ UINT wYmin;
/*2341*/ UINT wYmax;
/*2342*/ UINT wZmin;
/*2343*/ UINT wZmax;
/*2344*/ UINT wNumButtons;
/*2345*/ UINT wPeriodMin;
/*2346*/ UINT wPeriodMax;
/*2348*/ UINT wRmin;
/*2349*/ UINT wRmax;
/*2350*/ UINT wUmin;
/*2351*/ UINT wUmax;
/*2352*/ UINT wVmin;
/*2353*/ UINT wVmax;
/*2354*/ UINT wCaps;
/*2355*/ UINT wMaxAxes;
/*2356*/ UINT wNumAxes;
/*2357*/ UINT wMaxButtons;
/*2358*/ CHAR szRegKey[32];
/*2359*/ CHAR szOEMVxD[260];
/*2361*/ }JOYCAPSA,*PJOYCAPSA,*NPJOYCAPSA,*LPJOYCAPSA;
/*2362*/ typedef struct tagJOYCAPSW{
/*2363*/ WORD wMid;
/*2364*/ WORD wPid;
/*2365*/ WCHAR szPname[32];
/*2366*/ UINT wXmin;
/*2367*/ UINT wXmax;
/*2368*/ UINT wYmin;
/*2369*/ UINT wYmax;
/*2370*/ UINT wZmin;
/*2371*/ UINT wZmax;
/*2372*/ UINT wNumButtons;
/*2373*/ UINT wPeriodMin;
/*2374*/ UINT wPeriodMax;
/*2376*/ UINT wRmin;
/*2377*/ UINT wRmax;
/*2378*/ UINT wUmin;
/*2379*/ UINT wUmax;
/*2380*/ UINT wVmin;
/*2381*/ UINT wVmax;
/*2382*/ UINT wCaps;
/*2383*/ UINT wMaxAxes;
/*2384*/ UINT wNumAxes;
/*2385*/ UINT wMaxButtons;
/*2386*/ WCHAR szRegKey[32];
/*2387*/ WCHAR szOEMVxD[260];
/*2389*/ }JOYCAPSW,*PJOYCAPSW,*NPJOYCAPSW,*LPJOYCAPSW;
/*2396*/ typedef JOYCAPSA JOYCAPS;
/*2397*/ typedef PJOYCAPSA PJOYCAPS;
/*2398*/ typedef NPJOYCAPSA NPJOYCAPS;
/*2399*/ typedef LPJOYCAPSA LPJOYCAPS;
/*2401*/ typedef struct tagJOYCAPS2A{
/*2402*/ WORD wMid;
/*2403*/ WORD wPid;
/*2404*/ CHAR szPname[32];
/*2405*/ UINT wXmin;
/*2406*/ UINT wXmax;
/*2407*/ UINT wYmin;
/*2408*/ UINT wYmax;
/*2409*/ UINT wZmin;
/*2410*/ UINT wZmax;
/*2411*/ UINT wNumButtons;
/*2412*/ UINT wPeriodMin;
/*2413*/ UINT wPeriodMax;
/*2414*/ UINT wRmin;
/*2415*/ UINT wRmax;
/*2416*/ UINT wUmin;
/*2417*/ UINT wUmax;
/*2418*/ UINT wVmin;
/*2419*/ UINT wVmax;
/*2420*/ UINT wCaps;
/*2421*/ UINT wMaxAxes;
/*2422*/ UINT wNumAxes;
/*2423*/ UINT wMaxButtons;
/*2424*/ CHAR szRegKey[32];
/*2425*/ CHAR szOEMVxD[260];
/*2426*/ GUID ManufacturerGuid;
/*2427*/ GUID ProductGuid;
/*2428*/ GUID NameGuid;
/*2429*/ }JOYCAPS2A,*PJOYCAPS2A,*NPJOYCAPS2A,*LPJOYCAPS2A;
/*2430*/ typedef struct tagJOYCAPS2W{
/*2431*/ WORD wMid;
/*2432*/ WORD wPid;
/*2433*/ WCHAR szPname[32];
/*2434*/ UINT wXmin;
/*2435*/ UINT wXmax;
/*2436*/ UINT wYmin;
/*2437*/ UINT wYmax;
/*2438*/ UINT wZmin;
/*2439*/ UINT wZmax;
/*2440*/ UINT wNumButtons;
/*2441*/ UINT wPeriodMin;
/*2442*/ UINT wPeriodMax;
/*2443*/ UINT wRmin;
/*2444*/ UINT wRmax;
/*2445*/ UINT wUmin;
/*2446*/ UINT wUmax;
/*2447*/ UINT wVmin;
/*2448*/ UINT wVmax;
/*2449*/ UINT wCaps;
/*2450*/ UINT wMaxAxes;
/*2451*/ UINT wNumAxes;
/*2452*/ UINT wMaxButtons;
/*2453*/ WCHAR szRegKey[32];
/*2454*/ WCHAR szOEMVxD[260];
/*2455*/ GUID ManufacturerGuid;
/*2456*/ GUID ProductGuid;
/*2457*/ GUID NameGuid;
/*2458*/ }JOYCAPS2W,*PJOYCAPS2W,*NPJOYCAPS2W,*LPJOYCAPS2W;
/*2465*/ typedef JOYCAPS2A JOYCAPS2;
/*2466*/ typedef PJOYCAPS2A PJOYCAPS2;
/*2467*/ typedef NPJOYCAPS2A NPJOYCAPS2;
/*2468*/ typedef LPJOYCAPS2A LPJOYCAPS2;
/*2504*/ typedef struct joyinfo_tag{
/*2505*/ UINT wXpos;
/*2506*/ UINT wYpos;
/*2507*/ UINT wZpos;
/*2508*/ UINT wButtons;
/*2509*/ }JOYINFO,*PJOYINFO,typ*NPJOYINFO,typ*LPJOYINFO;
/*2512*/ typedef struct joyinfoex_tag{
/*2513*/ DWORD dwSize;
/*2514*/ DWORD dwFlags;
/*2515*/ DWORD dwXpos;
/*2516*/ DWORD dwYpos;
/*2517*/ DWORD dwZpos;
/*2518*/ DWORD dwRpos;
/*2519*/ DWORD dwUpos;
/*2520*/ DWORD dwVpos;
/*2521*/ DWORD dwButtons;
/*2522*/ DWORD dwButtonNumber;
/*2523*/ DWORD dwPOV;
/*2524*/ DWORD dwReserved1;
/*2525*/ DWORD dwReserved2;
/*2526*/ }JOYINFOEX,*PJOYINFOEX,typ*NPJOYINFOEX,typ*LPJOYINFOEX;
/*2530*/ UINT typ joyGetNumDevs(void);
/*2533*/ MMRESULT typ joyGetDevCapsA(typ typ typ typ typ UINT_PTR uJoyID,typ typ typ typ typ LPJOYCAPSA pjc,typ typ typ typ typ UINT cbjc);
/*2534*/ MMRESULT typ joyGetDevCapsW(typ typ typ typ typ UINT_PTR uJoyID,typ typ typ typ typ LPJOYCAPSW pjc,typ typ typ typ typ UINT cbjc);
/*2544*/ MMRESULT typ joyGetPos(typ typ typ typ typ UINT uJoyID,typ typ typ typ typ LPJOYINFO pji);
/*2547*/ MMRESULT typ joyGetPosEx(typ typ typ typ typ UINT uJoyID,typ typ typ typ typ LPJOYINFOEX pji);
/*2550*/ MMRESULT typ joyGetThreshold(typ typ typ typ typ UINT uJoyID,typ typ typ typ typ LPUINT puThreshold);
/*2551*/ MMRESULT typ joyReleaseCapture(typ typ typ typ typ UINT uJoyID);
/*2552*/ MMRESULT typ joySetCapture(typ typ typ typ typ HWND hwnd,typ typ typ typ typ UINT uJoyID,typ typ typ typ typ UINT uPeriod,
/*2553*/ typ typ typ typ typ BOOL fChanged);
/*2554*/ MMRESULT typ joySetThreshold(typ typ typ typ typ UINT uJoyID,typ typ typ typ typ UINT uThreshold);
/*2589*/ typedef DWORD FOURCC;
/*2590*/ typedef char*HPSTR;
/*2591*/ struct HMMIO__{int unused;};typedef struct HMMIO__*HMMIO;
/*2592*/ typedef LRESULT(typ MMIOPROC)(LPSTR lpmmioinfo,UINT uMsg,
/*2593*/ LPARAM lParam1,LPARAM lParam2);
/*2594*/ typedef MMIOPROC typ*LPMMIOPROC;
/*2598*/ typedef struct _MMIOINFO
/*2599*/ {
/*2601*/ DWORD dwFlags;
/*2602*/ FOURCC fccIOProc;
/*2603*/ LPMMIOPROC pIOProc;
/*2604*/ UINT wErrorRet;
/*2605*/ HTASK htask;
/*2608*/ LONG cchBuffer;
/*2609*/ HPSTR pchBuffer;
/*2610*/ HPSTR pchNext;
/*2611*/ HPSTR pchEndRead;
/*2612*/ HPSTR pchEndWrite;
/*2613*/ LONG lBufOffset;
/*2616*/ LONG lDiskOffset;
/*2617*/ DWORD adwInfo[3];
/*2620*/ DWORD dwReserved1;
/*2621*/ DWORD dwReserved2;
/*2622*/ HMMIO hmmio;
/*2623*/ }MMIOINFO,*PMMIOINFO,typ*NPMMIOINFO,typ*LPMMIOINFO;
/*2624*/ typedef const MMIOINFO typ*LPCMMIOINFO;
/*2627*/ typedef struct _MMCKINFO
/*2628*/ {
/*2629*/ FOURCC ckid;
/*2630*/ DWORD cksize;
/*2631*/ FOURCC fccType;
/*2632*/ DWORD dwDataOffset;
/*2633*/ DWORD dwFlags;
/*2634*/ }MMCKINFO,*PMMCKINFO,typ*NPMMCKINFO,typ*LPMMCKINFO;
/*2635*/ typedef const MMCKINFO*LPCMMCKINFO;
/*2718*/ FOURCC typ mmioStringToFOURCCA(LPCSTR sz,typ typ typ typ typ UINT uFlags);
/*2719*/ FOURCC typ mmioStringToFOURCCW(LPCWSTR sz,typ typ typ typ typ UINT uFlags);
/*2725*/ LPMMIOPROC typ mmioInstallIOProcA(typ typ typ typ typ FOURCC fccIOProc,typ typ typ typ typ typ typ LPMMIOPROC pIOProc,typ typ typ typ typ DWORD dwFlags);
/*2726*/ LPMMIOPROC typ mmioInstallIOProcW(typ typ typ typ typ FOURCC fccIOProc,typ typ typ typ typ typ typ LPMMIOPROC pIOProc,typ typ typ typ typ DWORD dwFlags);
/*2732*/ HMMIO typ mmioOpenA(typ typ typ typ typ typ typ typ typ LPSTR pszFileName,typ typ typ typ typ typ typ LPMMIOINFO pmmioinfo,typ typ typ typ typ DWORD fdwOpen);
/*2733*/ HMMIO typ mmioOpenW(typ typ typ typ typ typ typ typ typ LPWSTR pszFileName,typ typ typ typ typ typ typ LPMMIOINFO pmmioinfo,typ typ typ typ typ DWORD fdwOpen);
/*2739*/ MMRESULT typ mmioRenameA(typ typ typ typ typ LPCSTR pszFileName,typ typ typ typ typ LPCSTR pszNewFileName,typ typ typ typ typ typ typ LPCMMIOINFO pmmioinfo,typ typ typ typ typ DWORD fdwRename);
/*2740*/ MMRESULT typ mmioRenameW(typ typ typ typ typ LPCWSTR pszFileName,typ typ typ typ typ LPCWSTR pszNewFileName,typ typ typ typ typ typ typ LPCMMIOINFO pmmioinfo,typ typ typ typ typ DWORD fdwRename);
/*2755*/ MMRESULT typ mmioClose(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ UINT fuClose);
/*2756*/ LONG typ mmioRead(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ HPSTR pch,typ typ typ typ typ LONG cch);
/*2757*/ LONG typ mmioWrite(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ const char*pch,typ typ typ typ typ LONG cch);
/*2758*/ LONG typ mmioSeek(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ LONG lOffset,typ typ typ typ typ int iOrigin);
/*2759*/ MMRESULT typ mmioGetInfo(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ LPMMIOINFO pmmioinfo,typ typ typ typ typ UINT fuInfo);
/*2760*/ MMRESULT typ mmioSetInfo(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ LPCMMIOINFO pmmioinfo,typ typ typ typ typ UINT fuInfo);
/*2761*/ MMRESULT typ mmioSetBuffer(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ typ typ LPSTR pchBuffer,typ typ typ typ typ LONG cchBuffer,
/*2762*/ typ typ typ typ typ UINT fuBuffer);
/*2763*/ MMRESULT typ mmioFlush(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ UINT fuFlush);
/*2764*/ MMRESULT typ mmioAdvance(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ typ typ LPMMIOINFO pmmioinfo,typ typ typ typ typ UINT fuAdvance);
/*2765*/ LRESULT typ mmioSendMessage(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ UINT uMsg,
/*2766*/ typ typ typ typ typ typ typ LPARAM lParam1,typ typ typ typ typ typ typ LPARAM lParam2);
/*2767*/ MMRESULT typ mmioDescend(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ LPMMCKINFO pmmcki,
/*2768*/ typ typ typ typ typ typ typ const MMCKINFO typ*pmmckiParent,typ typ typ typ typ UINT fuDescend);
/*2769*/ MMRESULT typ mmioAscend(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ LPMMCKINFO pmmcki,typ typ typ typ typ UINT fuAscend);
/*2770*/ MMRESULT typ mmioCreateChunk(typ typ typ typ typ HMMIO hmmio,typ typ typ typ typ LPMMCKINFO pmmcki,typ typ typ typ typ UINT fuCreate);
/*2783*/ typedef DWORD MCIERROR;
/*2788*/ typedef UINT MCIDEVICEID;
/*2792*/ typedef UINT(typ*YIELDPROC)(MCIDEVICEID mciId,DWORD dwYieldData);
/*2797*/ MCIERROR typ mciSendCommandA(typ typ typ typ typ MCIDEVICEID mciId,typ typ typ typ typ UINT uMsg,typ typ typ typ typ typ typ DWORD_PTR dwParam1,typ typ typ typ typ typ typ DWORD_PTR dwParam2);
/*2798*/ MCIERROR typ mciSendCommandW(typ typ typ typ typ MCIDEVICEID mciId,typ typ typ typ typ UINT uMsg,typ typ typ typ typ typ typ DWORD_PTR dwParam1,typ typ typ typ typ typ typ DWORD_PTR dwParam2);
/*2804*/ MCIERROR typ mciSendStringA(typ typ typ typ typ LPCSTR lpstrCommand,typ typ typ typ typ typ typ LPSTR lpstrReturnString,typ typ typ typ typ UINT uReturnLength,typ typ typ typ typ typ typ HWND hwndCallback);
/*2805*/ MCIERROR typ mciSendStringW(typ typ typ typ typ LPCWSTR lpstrCommand,typ typ typ typ typ typ typ LPWSTR lpstrReturnString,typ typ typ typ typ UINT uReturnLength,typ typ typ typ typ typ typ HWND hwndCallback);
/*2811*/ MCIDEVICEID typ mciGetDeviceIDA(typ typ typ typ typ LPCSTR pszDevice);
/*2812*/ MCIDEVICEID typ mciGetDeviceIDW(typ typ typ typ typ LPCWSTR pszDevice);
/*2818*/ MCIDEVICEID typ mciGetDeviceIDFromElementIDA(typ typ typ typ typ DWORD dwElementID,typ typ typ typ typ LPCSTR lpstrType);
/*2819*/ MCIDEVICEID typ mciGetDeviceIDFromElementIDW(typ typ typ typ typ DWORD dwElementID,typ typ typ typ typ LPCWSTR lpstrType);
/*2825*/ BOOL typ mciGetErrorStringA(typ typ typ typ typ MCIERROR mcierr,typ typ typ typ typ LPSTR pszText,typ typ typ typ typ UINT cchText);
/*2826*/ BOOL typ mciGetErrorStringW(typ typ typ typ typ MCIERROR mcierr,typ typ typ typ typ LPWSTR pszText,typ typ typ typ typ UINT cchText);
/*2840*/ BOOL typ mciSetYieldProc(typ typ typ typ typ MCIDEVICEID mciId,typ typ typ typ typ typ typ YIELDPROC fpYieldProc,
/*2841*/ typ typ typ typ typ DWORD dwYieldData);
/*2844*/ HTASK typ mciGetCreatorTask(typ typ typ typ typ MCIDEVICEID mciId);
/*2845*/ YIELDPROC typ mciGetYieldProc(typ typ typ typ typ MCIDEVICEID mciId,typ typ typ typ typ LPDWORD pdwYieldData);
/*3144*/ typedef struct tagMCI_GENERIC_PARMS{
/*3145*/ DWORD_PTR dwCallback;
/*3146*/ }MCI_GENERIC_PARMS,*PMCI_GENERIC_PARMS,typ*LPMCI_GENERIC_PARMS;
/*3152*/ typedef struct tagMCI_OPEN_PARMSA{
/*3153*/ DWORD_PTR dwCallback;
/*3154*/ MCIDEVICEID wDeviceID;
/*3155*/ LPCSTR lpstrDeviceType;
/*3156*/ LPCSTR lpstrElementName;
/*3157*/ LPCSTR lpstrAlias;
/*3158*/ }MCI_OPEN_PARMSA,*PMCI_OPEN_PARMSA,*LPMCI_OPEN_PARMSA;
/*3159*/ typedef struct tagMCI_OPEN_PARMSW{
/*3160*/ DWORD_PTR dwCallback;
/*3161*/ MCIDEVICEID wDeviceID;
/*3162*/ LPCWSTR lpstrDeviceType;
/*3163*/ LPCWSTR lpstrElementName;
/*3164*/ LPCWSTR lpstrAlias;
/*3165*/ }MCI_OPEN_PARMSW,*PMCI_OPEN_PARMSW,*LPMCI_OPEN_PARMSW;
/*3171*/ typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
/*3172*/ typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
/*3173*/ typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
/*3189*/ typedef struct tagMCI_PLAY_PARMS{
/*3190*/ DWORD_PTR dwCallback;
/*3191*/ DWORD dwFrom;
/*3192*/ DWORD dwTo;
/*3193*/ }MCI_PLAY_PARMS,*PMCI_PLAY_PARMS,typ*LPMCI_PLAY_PARMS;
/*3197*/ typedef struct tagMCI_SEEK_PARMS{
/*3198*/ DWORD_PTR dwCallback;
/*3199*/ DWORD dwTo;
/*3200*/ }MCI_SEEK_PARMS,*PMCI_SEEK_PARMS,typ*LPMCI_SEEK_PARMS;
/*3204*/ typedef struct tagMCI_STATUS_PARMS{
/*3205*/ DWORD_PTR dwCallback;
/*3206*/ DWORD_PTR dwReturn;
/*3207*/ DWORD dwItem;
/*3208*/ DWORD dwTrack;
/*3209*/ }MCI_STATUS_PARMS,*PMCI_STATUS_PARMS,typ*LPMCI_STATUS_PARMS;
/*3215*/ typedef struct tagMCI_INFO_PARMSA{
/*3216*/ DWORD_PTR dwCallback;
/*3217*/ LPSTR lpstrReturn;
/*3218*/ DWORD dwRetSize;
/*3219*/ }MCI_INFO_PARMSA,*LPMCI_INFO_PARMSA;
/*3220*/ typedef struct tagMCI_INFO_PARMSW{
/*3221*/ DWORD_PTR dwCallback;
/*3222*/ LPWSTR lpstrReturn;
/*3223*/ DWORD dwRetSize;
/*3224*/ }MCI_INFO_PARMSW,*LPMCI_INFO_PARMSW;
/*3229*/ typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
/*3230*/ typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
/*3243*/ typedef struct tagMCI_GETDEVCAPS_PARMS{
/*3244*/ DWORD_PTR dwCallback;
/*3245*/ DWORD dwReturn;
/*3246*/ DWORD dwItem;
/*3247*/ }MCI_GETDEVCAPS_PARMS,*PMCI_GETDEVCAPS_PARMS,typ*LPMCI_GETDEVCAPS_PARMS;
/*3253*/ typedef struct tagMCI_SYSINFO_PARMSA{
/*3254*/ DWORD_PTR dwCallback;
/*3255*/ LPSTR lpstrReturn;
/*3256*/ DWORD dwRetSize;
/*3257*/ DWORD dwNumber;
/*3258*/ UINT wDeviceType;
/*3259*/ }MCI_SYSINFO_PARMSA,*PMCI_SYSINFO_PARMSA,*LPMCI_SYSINFO_PARMSA;
/*3260*/ typedef struct tagMCI_SYSINFO_PARMSW{
/*3261*/ DWORD_PTR dwCallback;
/*3262*/ LPWSTR lpstrReturn;
/*3263*/ DWORD dwRetSize;
/*3264*/ DWORD dwNumber;
/*3265*/ UINT wDeviceType;
/*3266*/ }MCI_SYSINFO_PARMSW,*PMCI_SYSINFO_PARMSW,*LPMCI_SYSINFO_PARMSW;
/*3272*/ typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
/*3273*/ typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
/*3274*/ typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
/*3289*/ typedef struct tagMCI_SET_PARMS{
/*3290*/ DWORD_PTR dwCallback;
/*3291*/ DWORD dwTimeFormat;
/*3292*/ DWORD dwAudio;
/*3293*/ }MCI_SET_PARMS,*PMCI_SET_PARMS,typ*LPMCI_SET_PARMS;
/*3297*/ typedef struct tagMCI_BREAK_PARMS{
/*3298*/ DWORD_PTR dwCallback;
/*3300*/ int nVirtKey;
/*3301*/ HWND hwndBreak;
/*3308*/ }MCI_BREAK_PARMS,*PMCI_BREAK_PARMS,typ*LPMCI_BREAK_PARMS;
/*3314*/ typedef struct tagMCI_SAVE_PARMSA{
/*3315*/ DWORD_PTR dwCallback;
/*3316*/ LPCSTR lpfilename;
/*3317*/ }MCI_SAVE_PARMSA,*PMCI_SAVE_PARMSA,*LPMCI_SAVE_PARMSA;
/*3318*/ typedef struct tagMCI_SAVE_PARMSW{
/*3319*/ DWORD_PTR dwCallback;
/*3320*/ LPCWSTR lpfilename;
/*3321*/ }MCI_SAVE_PARMSW,*PMCI_SAVE_PARMSW,*LPMCI_SAVE_PARMSW;
/*3327*/ typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
/*3328*/ typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
/*3329*/ typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
/*3343*/ typedef struct tagMCI_LOAD_PARMSA{
/*3344*/ DWORD_PTR dwCallback;
/*3345*/ LPCSTR lpfilename;
/*3346*/ }MCI_LOAD_PARMSA,*PMCI_LOAD_PARMSA,*LPMCI_LOAD_PARMSA;
/*3347*/ typedef struct tagMCI_LOAD_PARMSW{
/*3348*/ DWORD_PTR dwCallback;
/*3349*/ LPCWSTR lpfilename;
/*3350*/ }MCI_LOAD_PARMSW,*PMCI_LOAD_PARMSW,*LPMCI_LOAD_PARMSW;
/*3356*/ typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
/*3357*/ typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
/*3358*/ typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
/*3370*/ typedef struct tagMCI_RECORD_PARMS{
/*3371*/ DWORD_PTR dwCallback;
/*3372*/ DWORD dwFrom;
/*3373*/ DWORD dwTo;
/*3374*/ }MCI_RECORD_PARMS,typ*LPMCI_RECORD_PARMS;
/*3430*/ typedef struct tagMCI_VD_PLAY_PARMS{
/*3431*/ DWORD_PTR dwCallback;
/*3432*/ DWORD dwFrom;
/*3433*/ DWORD dwTo;
/*3434*/ DWORD dwSpeed;
/*3435*/ }MCI_VD_PLAY_PARMS,*PMCI_VD_PLAY_PARMS,typ*LPMCI_VD_PLAY_PARMS;
/*3439*/ typedef struct tagMCI_VD_STEP_PARMS{
/*3440*/ DWORD_PTR dwCallback;
/*3441*/ DWORD dwFrames;
/*3442*/ }MCI_VD_STEP_PARMS,*PMCI_VD_STEP_PARMS,typ*LPMCI_VD_STEP_PARMS;
/*3448*/ typedef struct tagMCI_VD_ESCAPE_PARMSA{
/*3449*/ DWORD_PTR dwCallback;
/*3450*/ LPCSTR lpstrCommand;
/*3451*/ }MCI_VD_ESCAPE_PARMSA,*PMCI_VD_ESCAPE_PARMSA,*LPMCI_VD_ESCAPE_PARMSA;
/*3452*/ typedef struct tagMCI_VD_ESCAPE_PARMSW{
/*3453*/ DWORD_PTR dwCallback;
/*3454*/ LPCWSTR lpstrCommand;
/*3455*/ }MCI_VD_ESCAPE_PARMSW,*PMCI_VD_ESCAPE_PARMSW,*LPMCI_VD_ESCAPE_PARMSW;
/*3461*/ typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
/*3462*/ typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
/*3463*/ typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
/*3524*/ typedef struct tagMCI_WAVE_OPEN_PARMSA{
/*3525*/ DWORD_PTR dwCallback;
/*3526*/ MCIDEVICEID wDeviceID;
/*3527*/ LPCSTR lpstrDeviceType;
/*3528*/ LPCSTR lpstrElementName;
/*3529*/ LPCSTR lpstrAlias;
/*3530*/ DWORD dwBufferSeconds;
/*3531*/ }MCI_WAVE_OPEN_PARMSA,*PMCI_WAVE_OPEN_PARMSA,*LPMCI_WAVE_OPEN_PARMSA;
/*3532*/ typedef struct tagMCI_WAVE_OPEN_PARMSW{
/*3533*/ DWORD_PTR dwCallback;
/*3534*/ MCIDEVICEID wDeviceID;
/*3535*/ LPCWSTR lpstrDeviceType;
/*3536*/ LPCWSTR lpstrElementName;
/*3537*/ LPCWSTR lpstrAlias;
/*3538*/ DWORD dwBufferSeconds;
/*3539*/ }MCI_WAVE_OPEN_PARMSW,*PMCI_WAVE_OPEN_PARMSW,*LPMCI_WAVE_OPEN_PARMSW;
/*3545*/ typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
/*3546*/ typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
/*3547*/ typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
/*3564*/ typedef struct tagMCI_WAVE_DELETE_PARMS{
/*3565*/ DWORD_PTR dwCallback;
/*3566*/ DWORD dwFrom;
/*3567*/ DWORD dwTo;
/*3568*/ }MCI_WAVE_DELETE_PARMS,*PMCI_WAVE_DELETE_PARMS,typ*LPMCI_WAVE_DELETE_PARMS;
/*3572*/ typedef struct tagMCI_WAVE_SET_PARMS{
/*3573*/ DWORD_PTR dwCallback;
/*3574*/ DWORD dwTimeFormat;
/*3575*/ DWORD dwAudio;
/*3577*/ UINT wInput;
/*3578*/ UINT wOutput;
/*3585*/ WORD wFormatTag;
/*3586*/ WORD wReserved2;
/*3587*/ WORD nChannels;
/*3588*/ WORD wReserved3;
/*3589*/ DWORD nSamplesPerSec;
/*3590*/ DWORD nAvgBytesPerSec;
/*3591*/ WORD nBlockAlign;
/*3592*/ WORD wReserved4;
/*3593*/ WORD wBitsPerSample;
/*3594*/ WORD wReserved5;
/*3595*/ }MCI_WAVE_SET_PARMS,*PMCI_WAVE_SET_PARMS,typ*LPMCI_WAVE_SET_PARMS;
/*3636*/ typedef struct tagMCI_SEQ_SET_PARMS{
/*3637*/ DWORD_PTR dwCallback;
/*3638*/ DWORD dwTimeFormat;
/*3639*/ DWORD dwAudio;
/*3640*/ DWORD dwTempo;
/*3641*/ DWORD dwPort;
/*3642*/ DWORD dwSlave;
/*3643*/ DWORD dwMaster;
/*3644*/ DWORD dwOffset;
/*3645*/ }MCI_SEQ_SET_PARMS,*PMCI_SEQ_SET_PARMS,typ*LPMCI_SEQ_SET_PARMS;
/*3716*/ typedef struct tagMCI_ANIM_OPEN_PARMSA{
/*3717*/ DWORD_PTR dwCallback;
/*3718*/ MCIDEVICEID wDeviceID;
/*3719*/ LPCSTR lpstrDeviceType;
/*3720*/ LPCSTR lpstrElementName;
/*3721*/ LPCSTR lpstrAlias;
/*3722*/ DWORD dwStyle;
/*3723*/ HWND hWndParent;
/*3724*/ }MCI_ANIM_OPEN_PARMSA,*PMCI_ANIM_OPEN_PARMSA,*LPMCI_ANIM_OPEN_PARMSA;
/*3725*/ typedef struct tagMCI_ANIM_OPEN_PARMSW{
/*3726*/ DWORD_PTR dwCallback;
/*3727*/ MCIDEVICEID wDeviceID;
/*3728*/ LPCWSTR lpstrDeviceType;
/*3729*/ LPCWSTR lpstrElementName;
/*3730*/ LPCWSTR lpstrAlias;
/*3731*/ DWORD dwStyle;
/*3732*/ HWND hWndParent;
/*3733*/ }MCI_ANIM_OPEN_PARMSW,*PMCI_ANIM_OPEN_PARMSW,*LPMCI_ANIM_OPEN_PARMSW;
/*3739*/ typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
/*3740*/ typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
/*3741*/ typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
/*3760*/ typedef struct tagMCI_ANIM_PLAY_PARMS{
/*3761*/ DWORD_PTR dwCallback;
/*3762*/ DWORD dwFrom;
/*3763*/ DWORD dwTo;
/*3764*/ DWORD dwSpeed;
/*3765*/ }MCI_ANIM_PLAY_PARMS,*PMCI_ANIM_PLAY_PARMS,typ*LPMCI_ANIM_PLAY_PARMS;
/*3769*/ typedef struct tagMCI_ANIM_STEP_PARMS{
/*3770*/ DWORD_PTR dwCallback;
/*3771*/ DWORD dwFrames;
/*3772*/ }MCI_ANIM_STEP_PARMS,*PMCI_ANIM_STEP_PARMS,typ*LPMCI_ANIM_STEP_PARMS;
/*3778*/ typedef struct tagMCI_ANIM_WINDOW_PARMSA{
/*3779*/ DWORD_PTR dwCallback;
/*3780*/ HWND hWnd;
/*3781*/ UINT nCmdShow;
/*3782*/ LPCSTR lpstrText;
/*3783*/ }MCI_ANIM_WINDOW_PARMSA,*PMCI_ANIM_WINDOW_PARMSA,*LPMCI_ANIM_WINDOW_PARMSA;
/*3784*/ typedef struct tagMCI_ANIM_WINDOW_PARMSW{
/*3785*/ DWORD_PTR dwCallback;
/*3786*/ HWND hWnd;
/*3787*/ UINT nCmdShow;
/*3788*/ LPCWSTR lpstrText;
/*3789*/ }MCI_ANIM_WINDOW_PARMSW,*PMCI_ANIM_WINDOW_PARMSW,*LPMCI_ANIM_WINDOW_PARMSW;
/*3795*/ typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
/*3796*/ typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
/*3797*/ typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
/*3813*/ typedef struct tagMCI_ANIM_RECT_PARMS{
/*3814*/ DWORD_PTR dwCallback;
/*3819*/ RECT rc;
/*3821*/ }MCI_ANIM_RECT_PARMS;
/*3822*/ typedef MCI_ANIM_RECT_PARMS*PMCI_ANIM_RECT_PARMS;
/*3823*/ typedef MCI_ANIM_RECT_PARMS typ*LPMCI_ANIM_RECT_PARMS;
/*3827*/ typedef struct tagMCI_ANIM_UPDATE_PARMS{
/*3828*/ DWORD_PTR dwCallback;
/*3829*/ RECT rc;
/*3830*/ HDC hDC;
/*3831*/ }MCI_ANIM_UPDATE_PARMS,*PMCI_ANIM_UPDATE_PARMS,typ*LPMCI_ANIM_UPDATE_PARMS;
/*3879*/ typedef struct tagMCI_OVLY_OPEN_PARMSA{
/*3880*/ DWORD_PTR dwCallback;
/*3881*/ MCIDEVICEID wDeviceID;
/*3882*/ LPCSTR lpstrDeviceType;
/*3883*/ LPCSTR lpstrElementName;
/*3884*/ LPCSTR lpstrAlias;
/*3885*/ DWORD dwStyle;
/*3886*/ HWND hWndParent;
/*3887*/ }MCI_OVLY_OPEN_PARMSA,*PMCI_OVLY_OPEN_PARMSA,*LPMCI_OVLY_OPEN_PARMSA;
/*3888*/ typedef struct tagMCI_OVLY_OPEN_PARMSW{
/*3889*/ DWORD_PTR dwCallback;
/*3890*/ MCIDEVICEID wDeviceID;
/*3891*/ LPCWSTR lpstrDeviceType;
/*3892*/ LPCWSTR lpstrElementName;
/*3893*/ LPCWSTR lpstrAlias;
/*3894*/ DWORD dwStyle;
/*3895*/ HWND hWndParent;
/*3896*/ }MCI_OVLY_OPEN_PARMSW,*PMCI_OVLY_OPEN_PARMSW,*LPMCI_OVLY_OPEN_PARMSW;
/*3902*/ typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
/*3903*/ typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
/*3904*/ typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
/*3925*/ typedef struct tagMCI_OVLY_WINDOW_PARMSA{
/*3926*/ DWORD_PTR dwCallback;
/*3927*/ HWND hWnd;
/*3928*/ UINT nCmdShow;
/*3929*/ LPCSTR lpstrText;
/*3930*/ }MCI_OVLY_WINDOW_PARMSA,*PMCI_OVLY_WINDOW_PARMSA,*LPMCI_OVLY_WINDOW_PARMSA;
/*3931*/ typedef struct tagMCI_OVLY_WINDOW_PARMSW{
/*3932*/ DWORD_PTR dwCallback;
/*3933*/ HWND hWnd;
/*3934*/ UINT nCmdShow;
/*3935*/ LPCWSTR lpstrText;
/*3936*/ }MCI_OVLY_WINDOW_PARMSW,*PMCI_OVLY_WINDOW_PARMSW,*LPMCI_OVLY_WINDOW_PARMSW;
/*3942*/ typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
/*3943*/ typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
/*3944*/ typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
/*3959*/ typedef struct tagMCI_OVLY_RECT_PARMS{
/*3960*/ DWORD_PTR dwCallback;
/*3965*/ RECT rc;
/*3967*/ }MCI_OVLY_RECT_PARMS,*PMCI_OVLY_RECT_PARMS,typ*LPMCI_OVLY_RECT_PARMS;
/*3973*/ typedef struct tagMCI_OVLY_SAVE_PARMSA{
/*3974*/ DWORD_PTR dwCallback;
/*3975*/ LPCSTR lpfilename;
/*3976*/ RECT rc;
/*3977*/ }MCI_OVLY_SAVE_PARMSA,*PMCI_OVLY_SAVE_PARMSA,*LPMCI_OVLY_SAVE_PARMSA;
/*3978*/ typedef struct tagMCI_OVLY_SAVE_PARMSW{
/*3979*/ DWORD_PTR dwCallback;
/*3980*/ LPCWSTR lpfilename;
/*3981*/ RECT rc;
/*3982*/ }MCI_OVLY_SAVE_PARMSW,*PMCI_OVLY_SAVE_PARMSW,*LPMCI_OVLY_SAVE_PARMSW;
/*3988*/ typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
/*3989*/ typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
/*3990*/ typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
/*4004*/ typedef struct tagMCI_OVLY_LOAD_PARMSA{
/*4005*/ DWORD_PTR dwCallback;
/*4006*/ LPCSTR lpfilename;
/*4007*/ RECT rc;
/*4008*/ }MCI_OVLY_LOAD_PARMSA,*PMCI_OVLY_LOAD_PARMSA,*LPMCI_OVLY_LOAD_PARMSA;
/*4009*/ typedef struct tagMCI_OVLY_LOAD_PARMSW{
/*4010*/ DWORD_PTR dwCallback;
/*4011*/ LPCWSTR lpfilename;
/*4012*/ RECT rc;
/*4013*/ }MCI_OVLY_LOAD_PARMSW,*PMCI_OVLY_LOAD_PARMSW,*LPMCI_OVLY_LOAD_PARMSW;
/*4019*/ typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
/*4020*/ typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
/*4021*/ typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
/*40*/ typedef struct _NCB{
/*41*/ UCHAR ncb_command;
/*42*/ UCHAR ncb_retcode;
/*43*/ UCHAR ncb_lsn;
/*44*/ UCHAR ncb_num;
/*45*/ PUCHAR ncb_buffer;
/*46*/ WORD ncb_length;
/*47*/ UCHAR ncb_callname[16];
/*48*/ UCHAR ncb_name[16];
/*49*/ UCHAR ncb_rto;
/*50*/ UCHAR ncb_sto;
/*51*/ void(typ*ncb_post)(struct _NCB*);
/*52*/ UCHAR ncb_lana_num;
/*53*/ UCHAR ncb_cmd_cplt;
/*57*/ UCHAR ncb_reserve[10];
/*59*/ HANDLE ncb_event;
/*63*/ }NCB,*PNCB;
/*70*/ typedef struct _ADAPTER_STATUS{
/*71*/ UCHAR adapter_address[6];
/*72*/ UCHAR rev_major;
/*73*/ UCHAR reserved0;
/*74*/ UCHAR adapter_type;
/*75*/ UCHAR rev_minor;
/*76*/ WORD duration;
/*77*/ WORD frmr_recv;
/*78*/ WORD frmr_xmit;
/*80*/ WORD iframe_recv_err;
/*82*/ WORD xmit_aborts;
/*83*/ DWORD xmit_success;
/*84*/ DWORD recv_success;
/*86*/ WORD iframe_xmit_err;
/*88*/ WORD recv_buff_unavail;
/*89*/ WORD t1_timeouts;
/*90*/ WORD ti_timeouts;
/*91*/ DWORD reserved1;
/*92*/ WORD free_ncbs;
/*93*/ WORD max_cfg_ncbs;
/*94*/ WORD max_ncbs;
/*95*/ WORD xmit_buf_unavail;
/*96*/ WORD max_dgram_size;
/*97*/ WORD pending_sess;
/*98*/ WORD max_cfg_sess;
/*99*/ WORD max_sess;
/*100*/ WORD max_sess_pkt_size;
/*101*/ WORD name_count;
/*102*/ }ADAPTER_STATUS,*PADAPTER_STATUS;
/*104*/ typedef struct _NAME_BUFFER{
/*105*/ UCHAR name[16];
/*106*/ UCHAR name_num;
/*107*/ UCHAR name_flags;
/*108*/ }NAME_BUFFER,*PNAME_BUFFER;
/*130*/ typedef struct _SESSION_HEADER{
/*131*/ UCHAR sess_name;
/*132*/ UCHAR num_sess;
/*133*/ UCHAR rcv_dg_outstanding;
/*134*/ UCHAR rcv_any_outstanding;
/*135*/ }SESSION_HEADER,*PSESSION_HEADER;
/*137*/ typedef struct _SESSION_BUFFER{
/*138*/ UCHAR lsn;
/*139*/ UCHAR state;
/*140*/ UCHAR local_name[16];
/*141*/ UCHAR remote_name[16];
/*142*/ UCHAR rcvs_outstanding;
/*143*/ UCHAR sends_outstanding;
/*144*/ }SESSION_BUFFER,*PSESSION_BUFFER;
/*162*/ typedef struct _LANA_ENUM{
/*163*/ UCHAR length;
/*164*/ UCHAR lana[254+1];
/*165*/ }LANA_ENUM,*PLANA_ENUM;
/*172*/ typedef struct _FIND_NAME_HEADER{
/*173*/ WORD node_count;
/*174*/ UCHAR reserved;
/*175*/ UCHAR unique_group;
/*176*/ }FIND_NAME_HEADER,*PFIND_NAME_HEADER;
/*178*/ typedef struct _FIND_NAME_BUFFER{
/*179*/ UCHAR length;
/*180*/ UCHAR access_control;
/*181*/ UCHAR frame_control;
/*182*/ UCHAR destination_addr[6];
/*183*/ UCHAR source_addr[6];
/*184*/ UCHAR routing_info[18];
/*185*/ }FIND_NAME_BUFFER,*PFIND_NAME_BUFFER;
/*192*/ typedef struct _ACTION_HEADER{
/*193*/ ULONG transport_id;
/*194*/ USHORT action_code;
/*195*/ USHORT reserved;
/*196*/ }ACTION_HEADER,*PACTION_HEADER;
/*297*/ UCHAR
/*298*/ typ
/*299*/ Netbios(
/*300*/ PNCB pncb
/*301*/ );
/*65*/ typedef void*I_RPC_HANDLE;
/*69*/ typedef long RPC_STATUS;
/*"rpcdce.h"52*/ typedef typ unsigned char*RPC_CSTR;
/*56*/ typedef typ unsigned short*RPC_WSTR;
/*59*/ typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
/*60*/ typedef RPC_BINDING_HANDLE handle_t;
/*69*/ typedef GUID UUID;
/*75*/ typedef struct _RPC_BINDING_VECTOR
/*76*/ {
/*77*/ unsigned long Count;
/*78*/ RPC_BINDING_HANDLE BindingH[1];
/*79*/ }RPC_BINDING_VECTOR;
/*84*/ typedef struct _UUID_VECTOR
/*85*/ {
/*86*/ unsigned long Count;
/*87*/ UUID*Uuid[1];
/*88*/ }UUID_VECTOR;
/*93*/ typedef void*RPC_IF_HANDLE;
/*97*/ typedef struct _RPC_IF_ID
/*98*/ {
/*99*/ UUID Uuid;
/*100*/ unsigned short VersMajor;
/*101*/ unsigned short VersMinor;
/*102*/ }RPC_IF_ID;
/*182*/ typedef struct _RPC_PROTSEQ_VECTORA
/*183*/ {
/*184*/ unsigned int Count;
/*185*/ unsigned char*Protseq[1];
/*186*/ }RPC_PROTSEQ_VECTORA;
/*188*/ typedef struct _RPC_PROTSEQ_VECTORW
/*189*/ {
/*190*/ unsigned int Count;
/*191*/ unsigned short*Protseq[1];
/*192*/ }RPC_PROTSEQ_VECTORW;
/*209*/ typedef struct _RPC_POLICY{
/*210*/ unsigned int Length;
/*211*/ unsigned long EndpointFlags;
/*212*/ unsigned long NICFlags;
/*213*/ }RPC_POLICY,*PRPC_POLICY;
/*215*/ typedef void
/*216*/ RPC_OBJECT_INQ_FN(
/*217*/ typ typ typ typ typ UUID*ObjectUuid,
/*218*/ typ typ typ typ typ UUID*TypeUuid,
/*219*/ typ typ typ typ typ RPC_STATUS*Status
/*220*/ );
/*222*/ typ
/*223*/ typedef RPC_STATUS
/*224*/ RPC_IF_CALLBACK_FN(
/*225*/ typ typ typ typ typ RPC_IF_HANDLE InterfaceUuid,
/*226*/ typ typ typ typ typ void*Context
/*227*/ );
/*229*/ typedef void
/*230*/ RPC_SECURITY_CALLBACK_FN(
/*231*/ typ typ typ typ typ void*Context
/*232*/ );
/*236*/ typedef struct
/*237*/ {
/*238*/ unsigned int Count;
/*239*/ unsigned long Stats[1];
/*240*/ }RPC_STATS_VECTOR;
/*247*/ typedef struct
/*248*/ {
/*249*/ unsigned long Count;
/*250*/ RPC_IF_ID*IfId[1];
/*251*/ }RPC_IF_ID_VECTOR;
/*254*/ 
/*255*/ RPC_STATUS
/*256*/ 
/*257*/ RpcBindingCopy(
/*258*/ typ typ typ typ typ RPC_BINDING_HANDLE SourceBinding,
/*259*/ typ typ typ typ typ RPC_BINDING_HANDLE*DestinationBinding
/*260*/ );
/*263*/ 
/*264*/ RPC_STATUS
/*265*/ 
/*266*/ RpcBindingFree(
/*267*/ typ typ typ typ typ typ RPC_BINDING_HANDLE*Binding
/*268*/ );
/*271*/ 
/*272*/ RPC_STATUS
/*273*/ 
/*274*/ RpcBindingSetOption(
/*275*/ typ typ typ typ typ RPC_BINDING_HANDLE hBinding,
/*276*/ typ typ typ typ typ unsigned long option,
/*277*/ typ typ typ typ typ ULONG_PTR optionValue
/*278*/ );
/*281*/ 
/*282*/ RPC_STATUS
/*283*/ 
/*284*/ RpcBindingInqOption(
/*285*/ typ typ typ typ typ RPC_BINDING_HANDLE hBinding,
/*286*/ typ typ typ typ typ unsigned long option,
/*287*/ typ typ typ typ typ ULONG_PTR*pOptionValue
/*288*/ );
/*296*/ 
/*297*/ RPC_STATUS
/*298*/ 
/*299*/ RpcBindingFromStringBindingA(
/*300*/ typ typ typ typ typ RPC_CSTR StringBinding,
/*301*/ typ typ typ typ typ RPC_BINDING_HANDLE*Binding
/*302*/ );
/*304*/ 
/*305*/ RPC_STATUS
/*306*/ 
/*307*/ RpcBindingFromStringBindingW(
/*308*/ typ typ typ typ typ RPC_WSTR StringBinding,
/*309*/ typ typ typ typ typ RPC_BINDING_HANDLE*Binding
/*310*/ );
/*333*/ 
/*334*/ RPC_STATUS
/*335*/ 
/*336*/ RpcSsGetContextBinding(
/*337*/ typ typ typ typ typ void*ContextHandle,
/*338*/ typ typ typ typ typ RPC_BINDING_HANDLE*Binding
/*339*/ );
/*342*/ 
/*343*/ RPC_STATUS
/*344*/ 
/*345*/ RpcBindingInqObject(
/*346*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*347*/ typ typ typ typ typ UUID*ObjectUuid
/*348*/ );
/*351*/ 
/*352*/ RPC_STATUS
/*353*/ 
/*354*/ RpcBindingReset(
/*355*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding
/*356*/ );
/*362*/ 
/*363*/ RPC_STATUS
/*364*/ 
/*365*/ RpcBindingSetObject(
/*366*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*367*/ typ typ typ typ typ UUID*ObjectUuid
/*368*/ );
/*371*/ 
/*372*/ RPC_STATUS
/*373*/ 
/*374*/ RpcMgmtInqDefaultProtectLevel(
/*375*/ typ typ typ typ typ unsigned long AuthnSvc,
/*376*/ typ typ typ typ typ unsigned long*AuthnLevel
/*377*/ );
/*383*/ 
/*384*/ RPC_STATUS
/*385*/ 
/*386*/ RpcBindingToStringBindingA(
/*387*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*388*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*StringBinding
/*389*/ );
/*391*/ 
/*392*/ RPC_STATUS
/*393*/ 
/*394*/ RpcBindingToStringBindingW(
/*395*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*396*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*StringBinding
/*397*/ );
/*418*/ 
/*419*/ RPC_STATUS
/*420*/ 
/*421*/ RpcBindingVectorFree(
/*422*/ typ typ typ typ typ typ typ typ typ RPC_BINDING_VECTOR**BindingVector
/*423*/ );
/*431*/ 
/*432*/ RPC_STATUS
/*433*/ 
/*434*/ RpcStringBindingComposeA(
/*435*/ typ typ typ typ typ typ typ RPC_CSTR ObjUuid,
/*436*/ typ typ typ typ typ typ typ RPC_CSTR ProtSeq,
/*437*/ typ typ typ typ typ typ typ RPC_CSTR NetworkAddr,
/*438*/ typ typ typ typ typ typ typ RPC_CSTR Endpoint,
/*439*/ typ typ typ typ typ typ typ RPC_CSTR Options,
/*440*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*StringBinding
/*441*/ );
/*443*/ 
/*444*/ RPC_STATUS
/*445*/ 
/*446*/ RpcStringBindingComposeW(
/*447*/ typ typ typ typ typ typ typ RPC_WSTR ObjUuid,
/*448*/ typ typ typ typ typ typ typ RPC_WSTR ProtSeq,
/*449*/ typ typ typ typ typ typ typ RPC_WSTR NetworkAddr,
/*450*/ typ typ typ typ typ typ typ RPC_WSTR Endpoint,
/*451*/ typ typ typ typ typ typ typ RPC_WSTR Options,
/*452*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*StringBinding
/*453*/ );
/*481*/ 
/*482*/ RPC_STATUS
/*483*/ 
/*484*/ RpcStringBindingParseA(
/*485*/ typ typ typ typ typ RPC_CSTR StringBinding,
/*486*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*ObjUuid,
/*487*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*Protseq,
/*488*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*NetworkAddr,
/*489*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*Endpoint,
/*490*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*NetworkOptions
/*491*/ );
/*493*/ 
/*494*/ RPC_STATUS
/*495*/ 
/*496*/ RpcStringBindingParseW(
/*497*/ typ typ typ typ typ RPC_WSTR StringBinding,
/*498*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*ObjUuid,
/*499*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*Protseq,
/*500*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*NetworkAddr,
/*501*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*Endpoint,
/*502*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*NetworkOptions
/*503*/ );
/*533*/ 
/*534*/ RPC_STATUS
/*535*/ 
/*536*/ RpcStringFreeA(
/*537*/ typ typ typ typ typ RPC_CSTR*String
/*538*/ );
/*540*/ 
/*541*/ RPC_STATUS
/*542*/ 
/*543*/ RpcStringFreeW(
/*544*/ typ typ typ typ typ RPC_WSTR*String
/*545*/ );
/*565*/ 
/*566*/ RPC_STATUS
/*567*/ 
/*568*/ RpcIfInqId(
/*569*/ typ typ typ typ typ RPC_IF_HANDLE RpcIfHandle,
/*570*/ typ typ typ typ typ RPC_IF_ID*RpcIfId
/*571*/ );
/*577*/ 
/*578*/ RPC_STATUS
/*579*/ 
/*580*/ RpcNetworkIsProtseqValidA(
/*581*/ typ typ typ typ typ RPC_CSTR Protseq
/*582*/ );
/*584*/ 
/*585*/ RPC_STATUS
/*586*/ 
/*587*/ RpcNetworkIsProtseqValidW(
/*588*/ typ typ typ typ typ RPC_WSTR Protseq
/*589*/ );
/*609*/ 
/*610*/ RPC_STATUS
/*611*/ 
/*612*/ RpcMgmtInqComTimeout(
/*613*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*614*/ typ typ typ typ typ unsigned int*Timeout
/*615*/ );
/*618*/ 
/*619*/ RPC_STATUS
/*620*/ 
/*621*/ RpcMgmtSetComTimeout(
/*622*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*623*/ typ typ typ typ typ unsigned int Timeout
/*624*/ );
/*627*/ 
/*628*/ RPC_STATUS
/*629*/ 
/*630*/ RpcMgmtSetCancelTimeout(
/*631*/ typ typ typ typ typ long Timeout
/*632*/ );
/*639*/ 
/*640*/ RPC_STATUS
/*641*/ 
/*642*/ RpcNetworkInqProtseqsA(
/*643*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_PROTSEQ_VECTORA**ProtseqVector
/*644*/ );
/*646*/ 
/*647*/ RPC_STATUS
/*648*/ 
/*649*/ RpcNetworkInqProtseqsW(
/*650*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_PROTSEQ_VECTORW**ProtseqVector
/*651*/ );
/*671*/ 
/*672*/ RPC_STATUS
/*673*/ 
/*674*/ RpcObjectInqType(
/*675*/ typ typ typ typ typ UUID*ObjUuid,
/*676*/ typ typ typ typ typ typ typ typ UUID*TypeUuid
/*677*/ );
/*680*/ 
/*681*/ RPC_STATUS
/*682*/ 
/*683*/ RpcObjectSetInqFn(
/*684*/ typ typ typ typ typ RPC_OBJECT_INQ_FN*InquiryFn
/*685*/ );
/*688*/ 
/*689*/ RPC_STATUS
/*690*/ 
/*691*/ RpcObjectSetType(
/*692*/ typ typ typ typ typ UUID*ObjUuid,
/*693*/ typ typ typ typ typ typ typ typ UUID*TypeUuid
/*694*/ );
/*700*/ 
/*701*/ RPC_STATUS
/*702*/ 
/*703*/ RpcProtseqVectorFreeA(
/*704*/ typ typ typ typ typ typ typ typ typ RPC_PROTSEQ_VECTORA**ProtseqVector
/*705*/ );
/*707*/ 
/*708*/ RPC_STATUS
/*709*/ 
/*710*/ RpcProtseqVectorFreeW(
/*711*/ typ typ typ typ typ typ typ typ typ RPC_PROTSEQ_VECTORW**ProtseqVector
/*712*/ );
/*732*/ 
/*733*/ RPC_STATUS
/*734*/ 
/*735*/ RpcServerInqBindings(
/*736*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_BINDING_VECTOR**BindingVector
/*737*/ );
/*740*/ 
/*741*/ RPC_STATUS
/*742*/ 
/*743*/ RpcServerInqIf(
/*744*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*745*/ typ typ typ typ typ typ typ UUID*MgrTypeUuid,
/*746*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**MgrEpv
/*747*/ );
/*750*/ 
/*751*/ RPC_STATUS
/*752*/ 
/*753*/ RpcServerListen(
/*754*/ typ typ typ typ typ unsigned int MinimumCallThreads,
/*755*/ typ typ typ typ typ unsigned int MaxCalls,
/*756*/ typ typ typ typ typ unsigned int DontWait
/*757*/ );
/*760*/ 
/*761*/ RPC_STATUS
/*762*/ 
/*763*/ RpcServerRegisterIf(
/*764*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*765*/ typ typ typ typ typ typ typ UUID*MgrTypeUuid,
/*766*/ typ typ typ typ typ typ typ void*MgrEpv
/*767*/ );
/*770*/ 
/*771*/ RPC_STATUS
/*772*/ 
/*773*/ RpcServerRegisterIfEx(
/*774*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*775*/ typ typ typ typ typ typ typ UUID*MgrTypeUuid,
/*776*/ typ typ typ typ typ typ typ void*MgrEpv,
/*777*/ typ typ typ typ typ unsigned int Flags,
/*778*/ typ typ typ typ typ unsigned int MaxCalls,
/*779*/ typ typ typ typ typ typ typ RPC_IF_CALLBACK_FN*IfCallback
/*780*/ );
/*783*/ 
/*784*/ RPC_STATUS
/*785*/ 
/*786*/ RpcServerRegisterIf2(
/*787*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*788*/ typ typ typ typ typ typ typ UUID*MgrTypeUuid,
/*789*/ typ typ typ typ typ typ typ void*MgrEpv,
/*790*/ typ typ typ typ typ unsigned int Flags,
/*791*/ typ typ typ typ typ unsigned int MaxCalls,
/*792*/ typ typ typ typ typ unsigned int MaxRpcSize,
/*793*/ typ typ typ typ typ typ typ RPC_IF_CALLBACK_FN*IfCallbackFn
/*794*/ );
/*798*/ 
/*799*/ RPC_STATUS
/*800*/ 
/*801*/ RpcServerUnregisterIf(
/*802*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*803*/ typ typ typ typ typ typ typ UUID*MgrTypeUuid,
/*804*/ typ typ typ typ typ unsigned int WaitForCallsToComplete
/*805*/ );
/*809*/ 
/*810*/ RPC_STATUS
/*811*/ 
/*812*/ RpcServerUnregisterIfEx(
/*813*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*814*/ typ typ typ typ typ typ typ UUID*MgrTypeUuid,
/*815*/ typ typ typ typ typ int RundownContextHandles
/*816*/ );
/*820*/ 
/*821*/ RPC_STATUS
/*822*/ 
/*823*/ RpcServerUseAllProtseqs(
/*824*/ typ typ typ typ typ unsigned int MaxCalls,
/*825*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*826*/ );
/*829*/ 
/*830*/ RPC_STATUS
/*831*/ 
/*832*/ RpcServerUseAllProtseqsEx(
/*833*/ typ typ typ typ typ unsigned int MaxCalls,
/*834*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*835*/ typ typ typ typ typ PRPC_POLICY Policy
/*836*/ );
/*839*/ 
/*840*/ RPC_STATUS
/*841*/ 
/*842*/ RpcServerUseAllProtseqsIf(
/*843*/ typ typ typ typ typ unsigned int MaxCalls,
/*844*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*845*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*846*/ );
/*849*/ 
/*850*/ RPC_STATUS
/*851*/ 
/*852*/ RpcServerUseAllProtseqsIfEx(
/*853*/ typ typ typ typ typ unsigned int MaxCalls,
/*854*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*855*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*856*/ typ typ typ typ typ PRPC_POLICY Policy
/*857*/ );
/*864*/ 
/*865*/ RPC_STATUS
/*866*/ 
/*867*/ RpcServerUseProtseqA(
/*868*/ typ typ typ typ typ RPC_CSTR Protseq,
/*869*/ typ typ typ typ typ unsigned int MaxCalls,
/*870*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*871*/ );
/*873*/ 
/*874*/ RPC_STATUS
/*875*/ 
/*876*/ RpcServerUseProtseqExA(
/*877*/ typ typ typ typ typ RPC_CSTR Protseq,
/*878*/ typ typ typ typ typ unsigned int MaxCalls,
/*879*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*880*/ typ typ typ typ typ PRPC_POLICY Policy
/*881*/ );
/*883*/ 
/*884*/ RPC_STATUS
/*885*/ 
/*886*/ RpcServerUseProtseqW(
/*887*/ typ typ typ typ typ RPC_WSTR Protseq,
/*888*/ typ typ typ typ typ unsigned int MaxCalls,
/*889*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*890*/ );
/*892*/ 
/*893*/ RPC_STATUS
/*894*/ 
/*895*/ RpcServerUseProtseqExW(
/*896*/ typ typ typ typ typ RPC_WSTR Protseq,
/*897*/ typ typ typ typ typ unsigned int MaxCalls,
/*898*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*899*/ typ typ typ typ typ PRPC_POLICY Policy
/*900*/ );
/*937*/ 
/*938*/ RPC_STATUS
/*939*/ 
/*940*/ RpcServerUseProtseqEpA(
/*941*/ typ typ typ typ typ RPC_CSTR Protseq,
/*942*/ typ typ typ typ typ unsigned int MaxCalls,
/*943*/ typ typ typ typ typ RPC_CSTR Endpoint,
/*944*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*945*/ );
/*947*/ 
/*948*/ RPC_STATUS
/*949*/ 
/*950*/ RpcServerUseProtseqEpExA(
/*951*/ typ typ typ typ typ RPC_CSTR Protseq,
/*952*/ typ typ typ typ typ unsigned int MaxCalls,
/*953*/ typ typ typ typ typ RPC_CSTR Endpoint,
/*954*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*955*/ typ typ typ typ typ PRPC_POLICY Policy
/*956*/ );
/*958*/ 
/*959*/ RPC_STATUS
/*960*/ 
/*961*/ RpcServerUseProtseqEpW(
/*962*/ typ typ typ typ typ RPC_WSTR Protseq,
/*963*/ typ typ typ typ typ unsigned int MaxCalls,
/*964*/ typ typ typ typ typ RPC_WSTR Endpoint,
/*965*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*966*/ );
/*968*/ 
/*969*/ RPC_STATUS
/*970*/ 
/*971*/ RpcServerUseProtseqEpExW(
/*972*/ typ typ typ typ typ RPC_WSTR Protseq,
/*973*/ typ typ typ typ typ unsigned int MaxCalls,
/*974*/ typ typ typ typ typ RPC_WSTR Endpoint,
/*975*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*976*/ typ typ typ typ typ PRPC_POLICY Policy
/*977*/ );
/*1016*/ 
/*1017*/ RPC_STATUS
/*1018*/ 
/*1019*/ RpcServerUseProtseqIfA(
/*1020*/ typ typ typ typ typ RPC_CSTR Protseq,
/*1021*/ typ typ typ typ typ unsigned int MaxCalls,
/*1022*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*1023*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*1024*/ );
/*1026*/ 
/*1027*/ RPC_STATUS
/*1028*/ 
/*1029*/ RpcServerUseProtseqIfExA(
/*1030*/ typ typ typ typ typ RPC_CSTR Protseq,
/*1031*/ typ typ typ typ typ unsigned int MaxCalls,
/*1032*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*1033*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*1034*/ typ typ typ typ typ PRPC_POLICY Policy
/*1035*/ );
/*1037*/ 
/*1038*/ RPC_STATUS
/*1039*/ 
/*1040*/ RpcServerUseProtseqIfW(
/*1041*/ typ typ typ typ typ RPC_WSTR Protseq,
/*1042*/ typ typ typ typ typ unsigned int MaxCalls,
/*1043*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*1044*/ typ typ typ typ typ typ typ void*SecurityDescriptor
/*1045*/ );
/*1047*/ 
/*1048*/ RPC_STATUS
/*1049*/ 
/*1050*/ RpcServerUseProtseqIfExW(
/*1051*/ typ typ typ typ typ RPC_WSTR Protseq,
/*1052*/ typ typ typ typ typ unsigned int MaxCalls,
/*1053*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*1054*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*1055*/ typ typ typ typ typ PRPC_POLICY Policy
/*1056*/ );
/*1091*/ 
/*1092*/ void
/*1093*/ 
/*1094*/ RpcServerYield(
/*1095*/ void
/*1096*/ );
/*1099*/ 
/*1100*/ RPC_STATUS
/*1101*/ 
/*1102*/ RpcMgmtStatsVectorFree(
/*1103*/ typ typ typ typ typ RPC_STATS_VECTOR**StatsVector
/*1104*/ );
/*1107*/ 
/*1108*/ RPC_STATUS
/*1109*/ 
/*1110*/ RpcMgmtInqStats(
/*1111*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1112*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_STATS_VECTOR**Statistics
/*1113*/ );
/*1116*/ 
/*1117*/ RPC_STATUS
/*1118*/ 
/*1119*/ RpcMgmtIsServerListening(
/*1120*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE Binding
/*1121*/ );
/*1124*/ 
/*1125*/ RPC_STATUS
/*1126*/ 
/*1127*/ RpcMgmtStopServerListening(
/*1128*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE Binding
/*1129*/ );
/*1132*/ 
/*1133*/ RPC_STATUS
/*1134*/ 
/*1135*/ RpcMgmtWaitServerListen(
/*1136*/ void
/*1137*/ );
/*1140*/ 
/*1141*/ RPC_STATUS
/*1142*/ 
/*1143*/ RpcMgmtSetServerStackSize(
/*1144*/ typ typ typ typ typ unsigned long ThreadStackSize
/*1145*/ );
/*1148*/ 
/*1149*/ void
/*1150*/ 
/*1151*/ RpcSsDontSerializeContext(
/*1152*/ void
/*1153*/ );
/*1156*/ 
/*1157*/ RPC_STATUS
/*1158*/ 
/*1159*/ RpcMgmtEnableIdleCleanup(
/*1160*/ void
/*1161*/ );
/*1163*/ 
/*1164*/ RPC_STATUS
/*1165*/ 
/*1166*/ RpcMgmtInqIfIds(
/*1167*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1168*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_IF_ID_VECTOR**IfIdVector
/*1169*/ );
/*1171*/ 
/*1172*/ RPC_STATUS
/*1173*/ 
/*1174*/ RpcIfIdVectorFree(
/*1175*/ typ typ typ typ typ typ typ typ typ RPC_IF_ID_VECTOR**IfIdVector
/*1176*/ );
/*1180*/ 
/*1181*/ RPC_STATUS
/*1182*/ 
/*1183*/ RpcMgmtInqServerPrincNameA(
/*1184*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1185*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1186*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*ServerPrincName
/*1187*/ );
/*1189*/ 
/*1190*/ RPC_STATUS
/*1191*/ 
/*1192*/ RpcMgmtInqServerPrincNameW(
/*1193*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1194*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1195*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*ServerPrincName
/*1196*/ );
/*1219*/ 
/*1220*/ RPC_STATUS
/*1221*/ 
/*1222*/ RpcServerInqDefaultPrincNameA(
/*1223*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1224*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*PrincName
/*1225*/ );
/*1227*/ 
/*1228*/ RPC_STATUS
/*1229*/ 
/*1230*/ RpcServerInqDefaultPrincNameW(
/*1231*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1232*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*PrincName
/*1233*/ );
/*1254*/ 
/*1255*/ RPC_STATUS
/*1256*/ 
/*1257*/ RpcEpResolveBinding(
/*1258*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1259*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec
/*1260*/ );
/*1266*/ 
/*1267*/ RPC_STATUS
/*1268*/ 
/*1269*/ RpcNsBindingInqEntryNameA(
/*1270*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1271*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*1272*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*EntryName
/*1273*/ );
/*1275*/ 
/*1276*/ RPC_STATUS
/*1277*/ 
/*1278*/ RpcNsBindingInqEntryNameW(
/*1279*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1280*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*1281*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*EntryName
/*1282*/ );
/*1303*/ typedef void*RPC_AUTH_IDENTITY_HANDLE;
/*1304*/ typedef void*RPC_AUTHZ_HANDLE;
/*1366*/ typedef struct _RPC_SECURITY_QOS{
/*1367*/ unsigned long Version;
/*1368*/ unsigned long Capabilities;
/*1369*/ unsigned long IdentityTracking;
/*1370*/ unsigned long ImpersonationType;
/*1371*/ }RPC_SECURITY_QOS,*PRPC_SECURITY_QOS;
/*1379*/ typedef struct _SEC_WINNT_AUTH_IDENTITY_W{
/*1380*/ typ typ unsigned short*User;
/*1381*/ unsigned long UserLength;
/*1382*/ typ typ unsigned short*Domain;
/*1383*/ unsigned long DomainLength;
/*1384*/ typ typ unsigned short*Password;
/*1385*/ unsigned long PasswordLength;
/*1386*/ unsigned long Flags;
/*1387*/ }SEC_WINNT_AUTH_IDENTITY_W,*PSEC_WINNT_AUTH_IDENTITY_W;
/*1393*/ typedef struct _SEC_WINNT_AUTH_IDENTITY_A{
/*1394*/ typ typ unsigned char*User;
/*1395*/ unsigned long UserLength;
/*1396*/ typ typ unsigned char*Domain;
/*1397*/ unsigned long DomainLength;
/*1398*/ typ typ unsigned char*Password;
/*1399*/ unsigned long PasswordLength;
/*1400*/ unsigned long Flags;
/*1401*/ }SEC_WINNT_AUTH_IDENTITY_A,*PSEC_WINNT_AUTH_IDENTITY_A;
/*1444*/ typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
/*1445*/ {
/*1446*/ SEC_WINNT_AUTH_IDENTITY_W*TransportCredentials;
/*1447*/ unsigned long Flags;
/*1448*/ unsigned long AuthenticationTarget;
/*1449*/ unsigned long NumberOfAuthnSchemes;
/*1450*/ unsigned long*AuthnSchemes;
/*1451*/ unsigned short*ServerCertificateSubject;
/*1452*/ }RPC_HTTP_TRANSPORT_CREDENTIALS_W,*PRPC_HTTP_TRANSPORT_CREDENTIALS_W;
/*1454*/ typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
/*1455*/ {
/*1456*/ SEC_WINNT_AUTH_IDENTITY_A*TransportCredentials;
/*1457*/ unsigned long Flags;
/*1458*/ unsigned long AuthenticationTarget;
/*1459*/ unsigned long NumberOfAuthnSchemes;
/*1460*/ unsigned long*AuthnSchemes;
/*1461*/ unsigned char*ServerCertificateSubject;
/*1462*/ }RPC_HTTP_TRANSPORT_CREDENTIALS_A,*PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
/*1466*/ typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
/*1467*/ {
/*1468*/ SEC_WINNT_AUTH_IDENTITY_W*TransportCredentials;
/*1469*/ unsigned long Flags;
/*1470*/ unsigned long AuthenticationTarget;
/*1471*/ unsigned long NumberOfAuthnSchemes;
/*1472*/ typ typ unsigned long*AuthnSchemes;
/*1473*/ unsigned short*ServerCertificateSubject;
/*1474*/ SEC_WINNT_AUTH_IDENTITY_W*ProxyCredentials;
/*1475*/ unsigned long NumberOfProxyAuthnSchemes;
/*1476*/ typ typ unsigned long*ProxyAuthnSchemes;
/*1477*/ }RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W,*PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
/*1479*/ typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
/*1480*/ {
/*1481*/ SEC_WINNT_AUTH_IDENTITY_A*TransportCredentials;
/*1482*/ unsigned long Flags;
/*1483*/ unsigned long AuthenticationTarget;
/*1484*/ unsigned long NumberOfAuthnSchemes;
/*1485*/ unsigned long*AuthnSchemes;
/*1486*/ unsigned char*ServerCertificateSubject;
/*1487*/ SEC_WINNT_AUTH_IDENTITY_A*ProxyCredentials;
/*1488*/ unsigned long NumberOfProxyAuthnSchemes;
/*1489*/ unsigned long*ProxyAuthnSchemes;
/*1490*/ }RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A,*PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
/*1494*/ typedef struct _RPC_SECURITY_QOS_V2_W{
/*1495*/ unsigned long Version;
/*1496*/ unsigned long Capabilities;
/*1497*/ unsigned long IdentityTracking;
/*1498*/ unsigned long ImpersonationType;
/*1499*/ unsigned long AdditionalSecurityInfoType;
/*1500*/ union
/*1501*/ {
/*1502*/ RPC_HTTP_TRANSPORT_CREDENTIALS_W*HttpCredentials;
/*1503*/ }u;
/*1504*/ }RPC_SECURITY_QOS_V2_W,*PRPC_SECURITY_QOS_V2_W;
/*1506*/ typedef struct _RPC_SECURITY_QOS_V2_A{
/*1507*/ unsigned long Version;
/*1508*/ unsigned long Capabilities;
/*1509*/ unsigned long IdentityTracking;
/*1510*/ unsigned long ImpersonationType;
/*1511*/ unsigned long AdditionalSecurityInfoType;
/*1512*/ union
/*1513*/ {
/*1514*/ RPC_HTTP_TRANSPORT_CREDENTIALS_A*HttpCredentials;
/*1515*/ }u;
/*1516*/ }RPC_SECURITY_QOS_V2_A,*PRPC_SECURITY_QOS_V2_A;
/*1521*/ typedef struct _RPC_SECURITY_QOS_V3_W{
/*1522*/ unsigned long Version;
/*1523*/ unsigned long Capabilities;
/*1524*/ unsigned long IdentityTracking;
/*1525*/ unsigned long ImpersonationType;
/*1526*/ unsigned long AdditionalSecurityInfoType;
/*1527*/ union
/*1528*/ {
/*1529*/ RPC_HTTP_TRANSPORT_CREDENTIALS_W*HttpCredentials;
/*1530*/ }u;
/*1531*/ void*Sid;
/*1532*/ }RPC_SECURITY_QOS_V3_W,*PRPC_SECURITY_QOS_V3_W;
/*1534*/ typedef struct _RPC_SECURITY_QOS_V3_A{
/*1535*/ unsigned long Version;
/*1536*/ unsigned long Capabilities;
/*1537*/ unsigned long IdentityTracking;
/*1538*/ unsigned long ImpersonationType;
/*1539*/ unsigned long AdditionalSecurityInfoType;
/*1540*/ union
/*1541*/ {
/*1542*/ RPC_HTTP_TRANSPORT_CREDENTIALS_A*HttpCredentials;
/*1543*/ }u;
/*1544*/ void*Sid;
/*1545*/ }RPC_SECURITY_QOS_V3_A,*PRPC_SECURITY_QOS_V3_A;
/*1552*/ typedef struct _RPC_SECURITY_QOS_V4_W{
/*1553*/ unsigned long Version;
/*1554*/ unsigned long Capabilities;
/*1555*/ unsigned long IdentityTracking;
/*1556*/ unsigned long ImpersonationType;
/*1557*/ unsigned long AdditionalSecurityInfoType;
/*1558*/ union
/*1559*/ {
/*1560*/ RPC_HTTP_TRANSPORT_CREDENTIALS_W*HttpCredentials;
/*1561*/ }u;
/*1562*/ void*Sid;
/*1563*/ unsigned int EffectiveOnly;
/*1564*/ }RPC_SECURITY_QOS_V4_W,*PRPC_SECURITY_QOS_V4_W;
/*1566*/ typedef struct _RPC_SECURITY_QOS_V4_A{
/*1567*/ unsigned long Version;
/*1568*/ unsigned long Capabilities;
/*1569*/ unsigned long IdentityTracking;
/*1570*/ unsigned long ImpersonationType;
/*1571*/ unsigned long AdditionalSecurityInfoType;
/*1572*/ union
/*1573*/ {
/*1574*/ RPC_HTTP_TRANSPORT_CREDENTIALS_A*HttpCredentials;
/*1575*/ }u;
/*1576*/ void*Sid;
/*1577*/ unsigned int EffectiveOnly;
/*1578*/ }RPC_SECURITY_QOS_V4_A,*PRPC_SECURITY_QOS_V4_A;
/*1829*/ 
/*1830*/ RPC_STATUS
/*1831*/ 
/*1832*/ RpcImpersonateClient(
/*1833*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE BindingHandle
/*1834*/ );
/*1836*/ 
/*1837*/ RPC_STATUS
/*1838*/ 
/*1839*/ RpcRevertToSelfEx(
/*1840*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE BindingHandle
/*1841*/ );
/*1843*/ 
/*1844*/ RPC_STATUS
/*1845*/ 
/*1846*/ RpcRevertToSelf(
/*1847*/ void
/*1848*/ );
/*1852*/ 
/*1853*/ RPC_STATUS
/*1854*/ 
/*1855*/ RpcBindingInqAuthClientA(
/*1856*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE ClientBinding,
/*1857*/ typ typ typ typ typ RPC_AUTHZ_HANDLE*Privs,
/*1858*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*ServerPrincName,
/*1859*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1860*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1861*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc
/*1862*/ );
/*1864*/ 
/*1865*/ RPC_STATUS
/*1866*/ 
/*1867*/ RpcBindingInqAuthClientW(
/*1868*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE ClientBinding,
/*1869*/ typ typ typ typ typ RPC_AUTHZ_HANDLE*Privs,
/*1870*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*ServerPrincName,
/*1871*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1872*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1873*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc
/*1874*/ );
/*1876*/ 
/*1877*/ RPC_STATUS
/*1878*/ 
/*1879*/ RpcBindingInqAuthClientExA(
/*1880*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE ClientBinding,
/*1881*/ typ typ typ typ typ RPC_AUTHZ_HANDLE*Privs,
/*1882*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*ServerPrincName,
/*1883*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1884*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1885*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc,
/*1886*/ typ typ typ typ typ unsigned long Flags
/*1887*/ );
/*1889*/ 
/*1890*/ RPC_STATUS
/*1891*/ 
/*1892*/ RpcBindingInqAuthClientExW(
/*1893*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE ClientBinding,
/*1894*/ typ typ typ typ typ RPC_AUTHZ_HANDLE*Privs,
/*1895*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*ServerPrincName,
/*1896*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1897*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1898*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc,
/*1899*/ typ typ typ typ typ unsigned long Flags
/*1900*/ );
/*1902*/ 
/*1903*/ RPC_STATUS
/*1904*/ 
/*1905*/ RpcBindingInqAuthInfoA(
/*1906*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1907*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*ServerPrincName,
/*1908*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1909*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1910*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE*AuthIdentity,
/*1911*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc
/*1912*/ );
/*1914*/ 
/*1915*/ RPC_STATUS
/*1916*/ 
/*1917*/ RpcBindingInqAuthInfoW(
/*1918*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1919*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*ServerPrincName,
/*1920*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1921*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1922*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE*AuthIdentity,
/*1923*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc
/*1924*/ );
/*1926*/ 
/*1927*/ RPC_STATUS
/*1928*/ 
/*1929*/ RpcBindingSetAuthInfoA(
/*1930*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1931*/ typ typ typ typ typ typ typ RPC_CSTR ServerPrincName,
/*1932*/ typ typ typ typ typ unsigned long AuthnLevel,
/*1933*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1934*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
/*1935*/ typ typ typ typ typ unsigned long AuthzSvc
/*1936*/ );
/*1938*/ 
/*1939*/ RPC_STATUS
/*1940*/ 
/*1941*/ RpcBindingSetAuthInfoExA(
/*1942*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1943*/ typ typ typ typ typ typ typ RPC_CSTR ServerPrincName,
/*1944*/ typ typ typ typ typ unsigned long AuthnLevel,
/*1945*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1946*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
/*1947*/ typ typ typ typ typ unsigned long AuthzSvc,
/*1948*/ typ typ typ typ typ typ typ RPC_SECURITY_QOS*SecurityQos
/*1949*/ );
/*1951*/ 
/*1952*/ RPC_STATUS
/*1953*/ 
/*1954*/ RpcBindingSetAuthInfoW(
/*1955*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1956*/ typ typ typ typ typ typ typ RPC_WSTR ServerPrincName,
/*1957*/ typ typ typ typ typ unsigned long AuthnLevel,
/*1958*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1959*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
/*1960*/ typ typ typ typ typ unsigned long AuthzSvc
/*1961*/ );
/*1963*/ 
/*1964*/ RPC_STATUS
/*1965*/ 
/*1966*/ RpcBindingSetAuthInfoExW(
/*1967*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1968*/ typ typ typ typ typ typ typ RPC_WSTR ServerPrincName,
/*1969*/ typ typ typ typ typ unsigned long AuthnLevel,
/*1970*/ typ typ typ typ typ unsigned long AuthnSvc,
/*1971*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
/*1972*/ typ typ typ typ typ typ typ unsigned long AuthzSvc,
/*1973*/ typ typ typ typ typ typ typ RPC_SECURITY_QOS*SecurityQOS
/*1974*/ );
/*1976*/ 
/*1977*/ RPC_STATUS
/*1978*/ 
/*1979*/ RpcBindingInqAuthInfoExA(
/*1980*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1981*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*ServerPrincName,
/*1982*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1983*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1984*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE*AuthIdentity,
/*1985*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc,
/*1986*/ typ typ typ typ typ unsigned long RpcQosVersion,
/*1987*/ typ typ typ typ typ typ typ RPC_SECURITY_QOS*SecurityQOS
/*1988*/ );
/*1990*/ 
/*1991*/ RPC_STATUS
/*1992*/ 
/*1993*/ RpcBindingInqAuthInfoExW(
/*1994*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*1995*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*ServerPrincName,
/*1996*/ typ typ typ typ typ typ typ unsigned long*AuthnLevel,
/*1997*/ typ typ typ typ typ typ typ unsigned long*AuthnSvc,
/*1998*/ typ typ typ typ typ typ typ RPC_AUTH_IDENTITY_HANDLE*AuthIdentity,
/*1999*/ typ typ typ typ typ typ typ unsigned long*AuthzSvc,
/*2000*/ typ typ typ typ typ typ typ unsigned long RpcQosVersion,
/*2001*/ typ typ typ typ typ typ typ RPC_SECURITY_QOS*SecurityQOS
/*2002*/ );
/*2004*/ typedef void
/*2005*/ (*RPC_AUTH_KEY_RETRIEVAL_FN)(
/*2006*/ typ typ typ typ typ void*Arg,
/*2007*/ typ typ typ typ typ RPC_WSTR ServerPrincName,
/*2008*/ typ typ typ typ typ unsigned long KeyVer,
/*2009*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**Key,
/*2010*/ typ typ typ typ typ RPC_STATUS*Status
/*2011*/ );
/*2013*/ 
/*2014*/ RPC_STATUS
/*2015*/ 
/*2016*/ RpcServerCompleteSecurityCallback(
/*2017*/ typ typ typ typ typ RPC_BINDING_HANDLE BindingHandle,
/*2018*/ typ typ typ typ typ RPC_STATUS Status
/*2019*/ );
/*2021*/ 
/*2022*/ RPC_STATUS
/*2023*/ 
/*2024*/ RpcServerRegisterAuthInfoA(
/*2025*/ typ typ typ typ typ typ typ RPC_CSTR ServerPrincName,
/*2026*/ typ typ typ typ typ unsigned long AuthnSvc,
/*2027*/ typ typ typ typ typ typ typ RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
/*2028*/ typ typ typ typ typ typ typ void*Arg
/*2029*/ );
/*2031*/ 
/*2032*/ RPC_STATUS
/*2033*/ 
/*2034*/ RpcServerRegisterAuthInfoW(
/*2035*/ typ typ typ typ typ typ typ RPC_WSTR ServerPrincName,
/*2036*/ typ typ typ typ typ unsigned long AuthnSvc,
/*2037*/ typ typ typ typ typ typ typ RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
/*2038*/ typ typ typ typ typ typ typ void*Arg
/*2039*/ );
/*2133*/ typedef struct{
/*2134*/ unsigned char*UserName;
/*2135*/ unsigned char*ComputerName;
/*2136*/ unsigned short Privilege;
/*2137*/ unsigned long AuthFlags;
/*2138*/ }RPC_CLIENT_INFORMATION1,*PRPC_CLIENT_INFORMATION1;
/*2142*/ 
/*2143*/ RPC_STATUS
/*2144*/ 
/*2145*/ RpcBindingServerFromClient(
/*2146*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE ClientBinding,
/*2147*/ typ typ typ typ typ RPC_BINDING_HANDLE*ServerBinding
/*2148*/ );
/*2150*/ 
/*2151*/ 
/*2152*/ void
/*2153*/ 
/*2154*/ RpcRaiseException(
/*2155*/ typ typ typ typ typ RPC_STATUS exception
/*2156*/ );
/*2158*/ 
/*2159*/ RPC_STATUS
/*2160*/ 
/*2161*/ RpcTestCancel(
/*2162*/ void
/*2163*/ );
/*2165*/ 
/*2166*/ RPC_STATUS
/*2167*/ 
/*2168*/ RpcServerTestCancel(
/*2169*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE BindingHandle
/*2170*/ );
/*2172*/ 
/*2173*/ RPC_STATUS
/*2174*/ 
/*2175*/ RpcCancelThread(
/*2176*/ typ typ typ typ typ void*Thread
/*2177*/ );
/*2179*/ 
/*2180*/ RPC_STATUS
/*2181*/ 
/*2182*/ RpcCancelThreadEx(
/*2183*/ typ typ typ typ typ void*Thread,
/*2184*/ typ typ typ typ typ long Timeout
/*2185*/ );
/*2188*/ 
/*2189*/ RPC_STATUS
/*2190*/ 
/*2191*/ UuidCreate(
/*2192*/ typ typ typ typ typ UUID*Uuid
/*2193*/ );
/*2196*/ 
/*2197*/ RPC_STATUS
/*2198*/ 
/*2199*/ UuidCreateSequential(
/*2200*/ typ typ typ typ typ UUID*Uuid
/*2201*/ );
/*2206*/ 
/*2207*/ RPC_STATUS
/*2208*/ 
/*2209*/ UuidToStringA(
/*2210*/ typ typ typ typ typ const UUID*Uuid,
/*2211*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*StringUuid
/*2212*/ );
/*2215*/ 
/*2216*/ RPC_STATUS
/*2217*/ 
/*2218*/ UuidFromStringA(
/*2219*/ typ typ typ typ typ typ typ RPC_CSTR StringUuid,
/*2220*/ typ typ typ typ typ UUID*Uuid
/*2221*/ );
/*2224*/ 
/*2225*/ RPC_STATUS
/*2226*/ 
/*2227*/ UuidToStringW(
/*2228*/ typ typ typ typ typ const UUID*Uuid,
/*2229*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*StringUuid
/*2230*/ );
/*2233*/ 
/*2234*/ RPC_STATUS
/*2235*/ 
/*2236*/ UuidFromStringW(
/*2237*/ typ typ typ typ typ typ typ RPC_WSTR StringUuid,
/*2238*/ typ typ typ typ typ UUID*Uuid
/*2239*/ );
/*2271*/ 
/*2272*/ signed int
/*2273*/ 
/*2274*/ UuidCompare(
/*2275*/ typ typ typ typ typ UUID*Uuid1,
/*2276*/ typ typ typ typ typ UUID*Uuid2,
/*2277*/ typ typ typ typ typ RPC_STATUS*Status
/*2278*/ );
/*2280*/ 
/*2281*/ RPC_STATUS
/*2282*/ 
/*2283*/ UuidCreateNil(
/*2284*/ typ typ typ typ typ UUID*NilUuid
/*2285*/ );
/*2287*/ 
/*2288*/ int
/*2289*/ 
/*2290*/ UuidEqual(
/*2291*/ typ typ typ typ typ UUID*Uuid1,
/*2292*/ typ typ typ typ typ UUID*Uuid2,
/*2293*/ typ typ typ typ typ RPC_STATUS*Status
/*2294*/ );
/*2296*/ 
/*2297*/ unsigned short
/*2298*/ 
/*2299*/ UuidHash(
/*2300*/ typ typ typ typ typ UUID*Uuid,
/*2301*/ typ typ typ typ typ RPC_STATUS*Status
/*2302*/ );
/*2304*/ 
/*2305*/ int
/*2306*/ 
/*2307*/ UuidIsNil(
/*2308*/ typ typ typ typ typ UUID*Uuid,
/*2309*/ typ typ typ typ typ RPC_STATUS*Status
/*2310*/ );
/*2314*/ 
/*2315*/ RPC_STATUS
/*2316*/ 
/*2317*/ RpcEpRegisterNoReplaceA(
/*2318*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*2319*/ typ typ typ typ typ RPC_BINDING_VECTOR*BindingVector,
/*2320*/ typ typ typ typ typ typ typ UUID_VECTOR*UuidVector,
/*2321*/ typ typ typ typ typ typ typ RPC_CSTR Annotation
/*2322*/ );
/*2324*/ 
/*2325*/ RPC_STATUS
/*2326*/ 
/*2327*/ RpcEpRegisterNoReplaceW(
/*2328*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*2329*/ typ typ typ typ typ RPC_BINDING_VECTOR*BindingVector,
/*2330*/ typ typ typ typ typ typ typ UUID_VECTOR*UuidVector,
/*2331*/ typ typ typ typ typ typ typ RPC_WSTR Annotation
/*2332*/ );
/*2334*/ 
/*2335*/ RPC_STATUS
/*2336*/ 
/*2337*/ RpcEpRegisterA(
/*2338*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*2339*/ typ typ typ typ typ RPC_BINDING_VECTOR*BindingVector,
/*2340*/ typ typ typ typ typ typ typ UUID_VECTOR*UuidVector,
/*2341*/ typ typ typ typ typ typ typ RPC_CSTR Annotation
/*2342*/ );
/*2344*/ 
/*2345*/ RPC_STATUS
/*2346*/ 
/*2347*/ RpcEpRegisterW(
/*2348*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*2349*/ typ typ typ typ typ RPC_BINDING_VECTOR*BindingVector,
/*2350*/ typ typ typ typ typ typ typ UUID_VECTOR*UuidVector,
/*2351*/ typ typ typ typ typ typ typ RPC_WSTR Annotation
/*2352*/ );
/*2387*/ 
/*2388*/ RPC_STATUS
/*2389*/ 
/*2390*/ RpcEpUnregister(
/*2391*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*2392*/ typ typ typ typ typ RPC_BINDING_VECTOR*BindingVector,
/*2393*/ typ typ typ typ typ typ typ UUID_VECTOR*UuidVector
/*2394*/ );
/*2400*/ 
/*2401*/ RPC_STATUS
/*2402*/ 
/*2403*/ DceErrorInqTextA(
/*2404*/ typ typ typ typ typ RPC_STATUS RpcStatus,
/*2405*/ typ typ typ typ typ RPC_CSTR ErrorText
/*2406*/ );
/*2408*/ 
/*2409*/ RPC_STATUS
/*2410*/ 
/*2411*/ DceErrorInqTextW(
/*2412*/ typ typ typ typ typ RPC_STATUS RpcStatus,
/*2413*/ typ typ typ typ typ RPC_WSTR ErrorText
/*2414*/ );
/*2434*/ typedef I_RPC_HANDLE*RPC_EP_INQ_HANDLE;
/*2447*/ 
/*2448*/ RPC_STATUS
/*2449*/ 
/*2450*/ RpcMgmtEpEltInqBegin(
/*2451*/ typ typ typ typ typ typ RPC_BINDING_HANDLE EpBinding,
/*2452*/ typ typ typ typ typ unsigned long InquiryType,
/*2453*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*2454*/ typ typ typ typ typ typ typ unsigned long VersOption,
/*2455*/ typ typ typ typ typ typ typ UUID*ObjectUuid,
/*2456*/ typ typ typ typ typ RPC_EP_INQ_HANDLE*InquiryContext
/*2457*/ );
/*2459*/ 
/*2460*/ RPC_STATUS
/*2461*/ 
/*2462*/ RpcMgmtEpEltInqDone(
/*2463*/ typ typ typ typ typ RPC_EP_INQ_HANDLE*InquiryContext
/*2464*/ );
/*2468*/ 
/*2469*/ RPC_STATUS
/*2470*/ 
/*2471*/ RpcMgmtEpEltInqNextA(
/*2472*/ typ typ typ typ typ RPC_EP_INQ_HANDLE InquiryContext,
/*2473*/ typ typ typ typ typ RPC_IF_ID*IfId,
/*2474*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE*Binding,
/*2475*/ typ typ typ typ typ typ typ UUID*ObjectUuid,
/*2476*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*Annotation
/*2477*/ );
/*2479*/ 
/*2480*/ RPC_STATUS
/*2481*/ 
/*2482*/ RpcMgmtEpEltInqNextW(
/*2483*/ typ typ typ typ typ RPC_EP_INQ_HANDLE InquiryContext,
/*2484*/ typ typ typ typ typ RPC_IF_ID*IfId,
/*2485*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE*Binding,
/*2486*/ typ typ typ typ typ typ typ UUID*ObjectUuid,
/*2487*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*Annotation
/*2488*/ );
/*2510*/ 
/*2511*/ RPC_STATUS
/*2512*/ 
/*2513*/ RpcMgmtEpUnregister(
/*2514*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE EpBinding,
/*2515*/ typ typ typ typ typ RPC_IF_ID*IfId,
/*2516*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*2517*/ typ typ typ typ typ typ typ UUID*ObjectUuid
/*2518*/ );
/*2520*/ typedef int
/*2521*/ (*RPC_MGMT_AUTHORIZATION_FN)(
/*2522*/ typ typ typ typ typ RPC_BINDING_HANDLE ClientBinding,
/*2523*/ typ typ typ typ typ unsigned long RequestedMgmtOperation,
/*2524*/ typ typ typ typ typ RPC_STATUS*Status
/*2525*/ );
/*2533*/ 
/*2534*/ RPC_STATUS
/*2535*/ 
/*2536*/ RpcMgmtSetAuthorizationFn(
/*2537*/ typ typ typ typ typ RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
/*2538*/ );
/*2541*/ 
/*2542*/ int
/*2543*/ 
/*2544*/ RpcExceptionFilter(
/*2545*/ typ typ typ typ typ unsigned long ExceptionCode
/*2546*/ );
/*"rpcdcep.h"28*/ typedef struct _RPC_VERSION{
/*29*/ unsigned short MajorVersion;
/*30*/ unsigned short MinorVersion;
/*31*/ }RPC_VERSION;
/*33*/ typedef struct _RPC_SYNTAX_IDENTIFIER{
/*34*/ GUID SyntaxGUID;
/*35*/ RPC_VERSION SyntaxVersion;
/*36*/ }RPC_SYNTAX_IDENTIFIER,*PRPC_SYNTAX_IDENTIFIER;
/*38*/ typedef struct _RPC_MESSAGE
/*39*/ {
/*40*/ RPC_BINDING_HANDLE Handle;
/*41*/ unsigned long DataRepresentation;
/*42*/ void*Buffer;
/*43*/ unsigned int BufferLength;
/*44*/ unsigned int ProcNum;
/*45*/ PRPC_SYNTAX_IDENTIFIER TransferSyntax;
/*46*/ void*RpcInterfaceInformation;
/*47*/ void*ReservedForRuntime;
/*48*/ void*ManagerEpv;
/*49*/ void*ImportContext;
/*50*/ unsigned long RpcFlags;
/*51*/ }RPC_MESSAGE,*PRPC_MESSAGE;
/*54*/ typedef RPC_STATUS
/*55*/ RPC_FORWARD_FUNCTION(
/*56*/ typ UUID*InterfaceId,
/*57*/ typ RPC_VERSION*InterfaceVersion,
/*58*/ typ UUID*ObjectId,
/*59*/ typ unsigned char*Rpcpro,
/*60*/ typ void**ppDestEndpoint);
/*62*/ enum RPC_ADDRESS_CHANGE_TYPE
/*63*/ {
/*64*/ PROTOCOL_NOT_LOADED=1,
/*65*/ PROTOCOL_LOADED,
/*66*/ PROTOCOL_ADDRESS_CHANGE
/*67*/ };
/*69*/ typedef void
/*70*/ RPC_ADDRESS_CHANGE_FN(
/*71*/ typ void*arg
/*72*/ );
/*133*/ typedef
/*134*/ void
/*135*/ (*RPC_DISPATCH_FUNCTION)(
/*136*/ typ typ PRPC_MESSAGE Message
/*137*/ );
/*139*/ typedef struct{
/*140*/ unsigned int DispatchTableCount;
/*141*/ RPC_DISPATCH_FUNCTION*DispatchTable;
/*142*/ LONG_PTR Reserved;
/*143*/ }RPC_DISPATCH_TABLE,*PRPC_DISPATCH_TABLE;
/*145*/ typedef struct _RPC_PROTSEQ_ENDPOINT
/*146*/ {
/*147*/ unsigned char*RpcProtocolSequence;
/*148*/ unsigned char*Endpoint;
/*149*/ }RPC_PROTSEQ_ENDPOINT,*PRPC_PROTSEQ_ENDPOINT;
/*158*/ typedef struct _RPC_SERVER_INTERFACE
/*159*/ {
/*160*/ unsigned int Length;
/*161*/ RPC_SYNTAX_IDENTIFIER InterfaceId;
/*162*/ RPC_SYNTAX_IDENTIFIER TransferSyntax;
/*163*/ PRPC_DISPATCH_TABLE DispatchTable;
/*164*/ unsigned int RpcProtseqEndpointCount;
/*165*/ PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
/*166*/ void*DefaultManagerEpv;
/*167*/ void const*InterpreterInfo;
/*168*/ unsigned int Flags;
/*169*/ }RPC_SERVER_INTERFACE,*PRPC_SERVER_INTERFACE;
/*171*/ typedef struct _RPC_CLIENT_INTERFACE
/*172*/ {
/*173*/ unsigned int Length;
/*174*/ RPC_SYNTAX_IDENTIFIER InterfaceId;
/*175*/ RPC_SYNTAX_IDENTIFIER TransferSyntax;
/*176*/ PRPC_DISPATCH_TABLE DispatchTable;
/*177*/ unsigned int RpcProtseqEndpointCount;
/*178*/ PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
/*179*/ ULONG_PTR Reserved;
/*180*/ void const*InterpreterInfo;
/*181*/ unsigned int Flags;
/*182*/ }RPC_CLIENT_INTERFACE,*PRPC_CLIENT_INTERFACE;
/*185*/ 
/*186*/ RPC_STATUS
/*187*/ 
/*188*/ I_RpcNegotiateTransferSyntax(
/*189*/ typ typ RPC_MESSAGE*Message
/*190*/ );
/*193*/ 
/*194*/ RPC_STATUS
/*195*/ 
/*196*/ I_RpcGetBuffer(
/*197*/ typ typ RPC_MESSAGE*Message
/*198*/ );
/*200*/ 
/*201*/ RPC_STATUS
/*202*/ 
/*203*/ I_RpcGetBufferWithObject(
/*204*/ typ typ RPC_MESSAGE*Message,
/*205*/ typ UUID*ObjectUuid
/*206*/ );
/*208*/ 
/*209*/ RPC_STATUS
/*210*/ 
/*211*/ I_RpcSendReceive(
/*212*/ typ typ RPC_MESSAGE*Message
/*213*/ );
/*215*/ 
/*216*/ RPC_STATUS
/*217*/ 
/*218*/ I_RpcFreeBuffer(
/*219*/ typ typ RPC_MESSAGE*Message
/*220*/ );
/*222*/ 
/*223*/ RPC_STATUS
/*224*/ 
/*225*/ I_RpcSend(
/*226*/ typ typ PRPC_MESSAGE Message
/*227*/ );
/*229*/ 
/*230*/ RPC_STATUS
/*231*/ 
/*232*/ I_RpcReceive(
/*233*/ typ typ PRPC_MESSAGE Message,
/*234*/ typ unsigned int Size
/*235*/ );
/*237*/ 
/*238*/ RPC_STATUS
/*239*/ 
/*240*/ I_RpcFreePipeBuffer(
/*241*/ typ typ RPC_MESSAGE*Message
/*242*/ );
/*244*/ 
/*245*/ RPC_STATUS
/*246*/ 
/*247*/ I_RpcReallocPipeBuffer(
/*248*/ typ typ typ typ typ PRPC_MESSAGE Message,
/*249*/ typ typ unsigned int NewSize
/*250*/ );
/*252*/ typedef void*I_RPC_MUTEX;
/*254*/ 
/*255*/ void
/*256*/ 
/*257*/ I_RpcRequestMutex(
/*258*/ typ typ I_RPC_MUTEX*Mutex
/*259*/ );
/*261*/ 
/*262*/ void
/*263*/ 
/*264*/ I_RpcClearMutex(
/*265*/ typ I_RPC_MUTEX Mutex
/*266*/ );
/*268*/ 
/*269*/ void
/*270*/ 
/*271*/ I_RpcDeleteMutex(
/*272*/ typ I_RPC_MUTEX Mutex
/*273*/ );
/*275*/ 
/*276*/ void*
/*277*/ 
/*278*/ I_RpcAllocate(
/*279*/ typ unsigned int Size
/*280*/ );
/*282*/ 
/*283*/ void
/*284*/ 
/*285*/ I_RpcFree(
/*286*/ typ void*Object
/*287*/ );
/*289*/ 
/*290*/ void
/*291*/ 
/*292*/ I_RpcPauseExecution(
/*293*/ typ unsigned long Milliseconds
/*294*/ );
/*296*/ 
/*297*/ RPC_STATUS
/*298*/ 
/*299*/ I_RpcGetExtendedError(
/*300*/ void
/*301*/ );
/*303*/ typedef
/*304*/ void
/*305*/ (*PRPC_RUNDOWN)(
/*306*/ void*AssociationContext
/*307*/ );
/*309*/ 
/*310*/ RPC_STATUS
/*311*/ 
/*312*/ I_RpcMonitorAssociation(
/*313*/ typ RPC_BINDING_HANDLE Handle,
/*314*/ typ PRPC_RUNDOWN RundownRoutine,
/*315*/ typ void*Context
/*316*/ );
/*318*/ 
/*319*/ RPC_STATUS
/*320*/ 
/*321*/ I_RpcStopMonitorAssociation(
/*322*/ typ RPC_BINDING_HANDLE Handle
/*323*/ );
/*325*/ 
/*326*/ RPC_BINDING_HANDLE
/*327*/ 
/*328*/ I_RpcGetCurrentCallHandle(
/*329*/ void
/*330*/ );
/*332*/ 
/*333*/ RPC_STATUS
/*334*/ 
/*335*/ I_RpcGetAssociationContext(
/*336*/ typ RPC_BINDING_HANDLE BindingHandle,
/*337*/ typ void**AssociationContext
/*338*/ );
/*340*/ 
/*341*/ void*
/*342*/ 
/*343*/ I_RpcGetServerContextList(
/*344*/ typ RPC_BINDING_HANDLE BindingHandle
/*345*/ );
/*347*/ 
/*348*/ void
/*349*/ 
/*350*/ I_RpcSetServerContextList(
/*351*/ typ RPC_BINDING_HANDLE BindingHandle,
/*352*/ typ void*ServerContextList
/*353*/ );
/*355*/ 
/*356*/ RPC_STATUS
/*357*/ 
/*358*/ I_RpcNsInterfaceExported(
/*359*/ typ unsigned long EntryNameSyntax,
/*360*/ typ unsigned short*EntryName,
/*361*/ typ RPC_SERVER_INTERFACE*RpcInterfaceInformation
/*362*/ );
/*364*/ 
/*365*/ RPC_STATUS
/*366*/ 
/*367*/ I_RpcNsInterfaceUnexported(
/*368*/ typ unsigned long EntryNameSyntax,
/*369*/ typ unsigned short*EntryName,
/*370*/ typ RPC_SERVER_INTERFACE*RpcInterfaceInformation
/*371*/ );
/*373*/ 
/*374*/ RPC_STATUS
/*375*/ 
/*376*/ I_RpcBindingToStaticStringBindingW(
/*377*/ typ RPC_BINDING_HANDLE Binding,
/*378*/ typ unsigned short**StringBinding
/*379*/ );
/*381*/ 
/*382*/ RPC_STATUS
/*383*/ 
/*384*/ I_RpcBindingInqSecurityContext(
/*385*/ typ RPC_BINDING_HANDLE Binding,
/*386*/ typ void**SecurityContextHandle
/*387*/ );
/*390*/ 
/*391*/ RPC_STATUS
/*392*/ 
/*393*/ I_RpcBindingInqSecurityContextKeyInfo(
/*394*/ typ typ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*395*/ typ typ typ typ typ void*KeyInfo
/*396*/ );
/*399*/ 
/*400*/ RPC_STATUS
/*401*/ 
/*402*/ I_RpcBindingInqWireIdForSnego(
/*403*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*404*/ typ typ typ typ typ RPC_CSTR WireId
/*405*/ );
/*408*/ 
/*409*/ RPC_STATUS
/*410*/ 
/*411*/ I_RpcBindingInqMarshalledTargetInfo(
/*412*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*413*/ typ typ typ typ typ unsigned long*MarshalledTargetInfoSize,
/*414*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*MarshalledTargetInfo
/*415*/ );
/*438*/ 
/*439*/ RPC_STATUS
/*440*/ 
/*441*/ I_RpcNsBindingSetEntryNameW(
/*442*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*443*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*444*/ typ typ typ typ typ RPC_WSTR EntryName
/*445*/ );
/*447*/ 
/*448*/ RPC_STATUS
/*449*/ 
/*450*/ I_RpcNsBindingSetEntryNameA(
/*451*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*452*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*453*/ typ typ typ typ typ RPC_CSTR EntryName
/*454*/ );
/*456*/ 
/*457*/ RPC_STATUS
/*458*/ 
/*459*/ I_RpcServerUseProtseqEp2A(
/*460*/ typ typ typ typ typ typ typ RPC_CSTR NetworkAddress,
/*461*/ typ typ typ typ typ RPC_CSTR Protseq,
/*462*/ typ typ typ typ typ unsigned int MaxCalls,
/*463*/ typ typ typ typ typ RPC_CSTR Endpoint,
/*464*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*465*/ typ typ typ typ typ void*Policy
/*466*/ );
/*468*/ 
/*469*/ RPC_STATUS
/*470*/ 
/*471*/ I_RpcServerUseProtseqEp2W(
/*472*/ typ typ typ typ typ typ typ RPC_WSTR NetworkAddress,
/*473*/ typ typ typ typ typ RPC_WSTR Protseq,
/*474*/ typ typ typ typ typ unsigned int MaxCalls,
/*475*/ typ typ typ typ typ RPC_WSTR Endpoint,
/*476*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*477*/ typ typ typ typ typ void*Policy
/*478*/ );
/*480*/ 
/*481*/ RPC_STATUS
/*482*/ 
/*483*/ I_RpcServerUseProtseq2W(
/*484*/ typ typ typ typ typ typ typ RPC_WSTR NetworkAddress,
/*485*/ typ typ typ typ typ RPC_WSTR Protseq,
/*486*/ typ typ typ typ typ unsigned int MaxCalls,
/*487*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*488*/ typ typ typ typ typ void*Policy
/*489*/ );
/*491*/ 
/*492*/ RPC_STATUS
/*493*/ 
/*494*/ I_RpcServerUseProtseq2A(
/*495*/ typ typ typ typ typ typ typ RPC_CSTR NetworkAddress,
/*496*/ typ typ typ typ typ RPC_CSTR Protseq,
/*497*/ typ typ typ typ typ unsigned int MaxCalls,
/*498*/ typ typ typ typ typ typ typ void*SecurityDescriptor,
/*499*/ typ typ typ typ typ void*Policy
/*500*/ );
/*548*/ 
/*549*/ RPC_STATUS
/*550*/ 
/*551*/ I_RpcServerStartService(
/*552*/ typ typ typ typ typ RPC_WSTR Protseq,
/*553*/ typ typ typ typ typ RPC_WSTR Endpoint,
/*554*/ typ typ typ typ typ RPC_IF_HANDLE IfSpec
/*555*/ );
/*559*/ 
/*560*/ RPC_STATUS
/*561*/ 
/*562*/ I_RpcBindingInqDynamicEndpointW(
/*563*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*564*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*DynamicEndpoint
/*565*/ );
/*567*/ 
/*568*/ RPC_STATUS
/*569*/ 
/*570*/ I_RpcBindingInqDynamicEndpointA(
/*571*/ typ typ typ typ typ RPC_BINDING_HANDLE Binding,
/*572*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*DynamicEndpoint
/*573*/ );
/*594*/ 
/*595*/ RPC_STATUS
/*596*/ 
/*597*/ I_RpcServerCheckClientRestriction(
/*598*/ typ RPC_BINDING_HANDLE Context
/*599*/ );
/*607*/ 
/*608*/ RPC_STATUS
/*609*/ 
/*610*/ I_RpcBindingInqTransportType(
/*611*/ typ RPC_BINDING_HANDLE Binding,
/*612*/ typ unsigned int*Type
/*613*/ );
/*615*/ typedef struct _RPC_TRANSFER_SYNTAX
/*616*/ {
/*617*/ UUID Uuid;
/*618*/ unsigned short VersMajor;
/*619*/ unsigned short VersMinor;
/*620*/ }RPC_TRANSFER_SYNTAX;
/*622*/ 
/*623*/ RPC_STATUS
/*624*/ 
/*625*/ I_RpcIfInqTransferSyntaxes(
/*626*/ typ RPC_IF_HANDLE RpcIfHandle,
/*627*/ typ RPC_TRANSFER_SYNTAX*TransferSyntaxes,
/*628*/ typ unsigned int TransferSyntaxSize,
/*629*/ typ unsigned int*TransferSyntaxCount
/*630*/ );
/*632*/ 
/*633*/ RPC_STATUS
/*634*/ 
/*635*/ I_UuidCreate(
/*636*/ typ UUID*Uuid
/*637*/ );
/*639*/ 
/*640*/ RPC_STATUS
/*641*/ 
/*642*/ I_RpcBindingCopy(
/*643*/ typ RPC_BINDING_HANDLE SourceBinding,
/*644*/ typ RPC_BINDING_HANDLE*DestinationBinding
/*645*/ );
/*647*/ 
/*648*/ RPC_STATUS
/*649*/ 
/*650*/ I_RpcBindingIsClientLocal(
/*651*/ typ typ RPC_BINDING_HANDLE BindingHandle,
/*652*/ typ unsigned int*ClientLocalFlag
/*653*/ );
/*655*/ 
/*656*/ RPC_STATUS
/*657*/ 
/*658*/ I_RpcBindingInqConnId(
/*659*/ typ RPC_BINDING_HANDLE Binding,
/*660*/ typ void**ConnId,
/*661*/ typ int*pfFirstCall
/*662*/ );
/*664*/ 
/*665*/ RPC_STATUS
/*666*/ 
/*667*/ I_RpcBindingCreateNP(
/*668*/ typ typ typ typ typ RPC_WSTR ServerName,
/*669*/ typ typ typ typ typ RPC_WSTR ServiceName,
/*670*/ typ typ typ typ typ RPC_WSTR NetworkOptions,
/*671*/ typ typ typ typ typ RPC_BINDING_HANDLE*Binding
/*672*/ );
/*674*/ 
/*675*/ void
/*676*/ 
/*677*/ I_RpcSsDontSerializeContext(
/*678*/ void
/*679*/ );
/*681*/ 
/*682*/ RPC_STATUS
/*683*/ 
/*684*/ I_RpcLaunchDatagramReceiveThread(
/*685*/ void*pAddress
/*686*/ );
/*688*/ 
/*689*/ RPC_STATUS
/*690*/ 
/*691*/ I_RpcServerRegisterForwardFunction(
/*692*/ typ RPC_FORWARD_FUNCTION*pForwardFunction
/*693*/ );
/*695*/ RPC_ADDRESS_CHANGE_FN*
/*696*/ I_RpcServerInqAddressChangeFn(
/*697*/ void
/*698*/ );
/*700*/ RPC_STATUS
/*701*/ I_RpcServerSetAddressChangeFn(
/*702*/ typ RPC_ADDRESS_CHANGE_FN*pAddressChangeFn
/*703*/ );
/*747*/ 
/*748*/ RPC_STATUS
/*749*/ 
/*750*/ I_RpcConnectionInqSockBuffSize(
/*751*/ typ unsigned long*RecvBuffSize,
/*752*/ typ unsigned long*SendBuffSize
/*753*/ );
/*755*/ 
/*756*/ RPC_STATUS
/*757*/ 
/*758*/ I_RpcConnectionSetSockBuffSize(
/*759*/ typ unsigned long RecvBuffSize,
/*760*/ typ unsigned long SendBuffSize
/*761*/ );
/*763*/ typedef
/*764*/ void
/*765*/ (*RPCLT_PDU_FILTER_FUNC)(
/*766*/ typ void*Buffer,
/*767*/ typ unsigned int BufferLength,
/*768*/ typ int fDatagram
/*769*/ );
/*771*/ typedef
/*772*/ void
/*773*/ (*RPC_SETFILTER_FUNC)(
/*774*/ typ RPCLT_PDU_FILTER_FUNC pfnFilter
/*775*/ );
/*778*/ 
/*779*/ RPC_STATUS
/*780*/ 
/*781*/ I_RpcServerStartListening(
/*782*/ void*hWnd
/*783*/ );
/*785*/ 
/*786*/ RPC_STATUS
/*787*/ 
/*788*/ I_RpcServerStopListening(
/*789*/ void
/*790*/ );
/*792*/ typedef RPC_STATUS(*RPC_BLOCKING_FN)(
/*793*/ typ void*hWnd,
/*794*/ typ void*Context,
/*795*/ typ typ void*hSyncEvent
/*796*/ );
/*798*/ 
/*799*/ RPC_STATUS
/*800*/ 
/*801*/ I_RpcBindingSetAsync(
/*802*/ typ RPC_BINDING_HANDLE Binding,
/*803*/ typ RPC_BLOCKING_FN BlockingFn,
/*804*/ typ unsigned long ServerTid
/*805*/ );
/*807*/ 
/*808*/ RPC_STATUS
/*809*/ 
/*810*/ I_RpcSetThreadParams(
/*811*/ typ int fClientFree,
/*812*/ typ typ void*Context,
/*813*/ typ typ void*hWndClient
/*814*/ );
/*816*/ 
/*817*/ unsigned int
/*818*/ 
/*819*/ I_RpcWindowProc(
/*820*/ typ void*hWnd,
/*821*/ typ unsigned int Message,
/*822*/ typ unsigned int wParam,
/*823*/ typ unsigned long lParam
/*824*/ );
/*826*/ 
/*827*/ RPC_STATUS
/*828*/ 
/*829*/ I_RpcServerUnregisterEndpointA(
/*830*/ typ typ typ typ typ RPC_CSTR Protseq,
/*831*/ typ typ typ typ typ RPC_CSTR Endpoint
/*832*/ );
/*834*/ 
/*835*/ RPC_STATUS
/*836*/ 
/*837*/ I_RpcServerUnregisterEndpointW(
/*838*/ typ typ typ typ typ RPC_WSTR Protseq,
/*839*/ typ typ typ typ typ RPC_WSTR Endpoint
/*840*/ );
/*849*/ 
/*850*/ RPC_STATUS
/*851*/ 
/*852*/ I_RpcServerInqTransportType(
/*853*/ typ unsigned int*Type
/*854*/ );
/*856*/ 
/*857*/ long
/*858*/ 
/*859*/ I_RpcMapWin32Status(
/*860*/ typ RPC_STATUS Status
/*861*/ );
/*869*/ typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
/*870*/ {
/*871*/ unsigned long BufferSize;
/*872*/ typ typ char*Buffer;
/*873*/ }RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;
/*875*/ typedef struct _RDR_CALLOUT_STATE
/*876*/ {
/*878*/ RPC_STATUS LastError;
/*879*/ void*LastEEInfo;
/*881*/ RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
/*884*/ unsigned short*ServerName;
/*885*/ unsigned short*ServerPort;
/*886*/ unsigned short*RemoteUser;
/*887*/ unsigned short*AuthType;
/*888*/ unsigned char ResourceTypePresent;
/*889*/ unsigned char SessionIdPresent;
/*890*/ unsigned char InterfacePresent;
/*891*/ UUID ResourceType;
/*892*/ UUID SessionId;
/*893*/ RPC_SYNTAX_IDENTIFIER Interface;
/*894*/ void*CertContext;
/*897*/ }RDR_CALLOUT_STATE;
/*901*/ typedef RPC_STATUS
/*902*/ (*I_RpcProxyIsValidMachineFn)
/*903*/ (
/*904*/ typ typ typ typ typ RPC_WSTR Machine,
/*905*/ typ typ typ typ typ RPC_WSTR DotMachine,
/*906*/ typ typ typ typ typ unsigned long PortNumber
/*907*/ );
/*909*/ typedef RPC_STATUS
/*910*/ (*I_RpcProxyGetClientAddressFn)
/*911*/ (
/*912*/ typ void*Context,
/*913*/ typ char*Buffer,
/*914*/ typ unsigned long*BufferLength
/*915*/ );
/*917*/ typedef RPC_STATUS
/*918*/ (*I_RpcProxyGetConnectionTimeoutFn)
/*919*/ (
/*920*/ typ unsigned long*ConnectionTimeout
/*921*/ );
/*924*/ typedef RPC_STATUS
/*925*/ (*I_RpcPerformCalloutFn)
/*926*/ (
/*927*/ typ void*Context,
/*928*/ typ RDR_CALLOUT_STATE*CallOutState,
/*929*/ typ RPC_HTTP_REDIRECTOR_STAGE Stage
/*930*/ );
/*932*/ typedef void
/*933*/ (*I_RpcFreeCalloutStateFn)
/*934*/ (
/*935*/ typ RDR_CALLOUT_STATE*CallOutState
/*936*/ );
/*938*/ typedef RPC_STATUS
/*939*/ (*I_RpcProxyGetClientSessionAndResourceUUID)
/*940*/ (
/*941*/ typ typ typ typ typ void*Context,
/*942*/ typ typ typ typ typ typ typ int*SessionIdPresent,
/*943*/ typ typ typ typ typ typ typ UUID*SessionId,
/*944*/ typ typ typ typ typ int*ResourceIdPresent,
/*945*/ typ typ typ typ typ UUID*ResourceId
/*946*/ );
/*951*/ typedef RPC_STATUS
/*952*/ (*I_RpcProxyFilterIfFn)
/*953*/ (
/*954*/ typ typ typ typ typ void*Context,
/*955*/ typ typ typ typ typ UUID*IfUuid,
/*956*/ typ typ typ typ typ unsigned short IfMajorVersion,
/*957*/ typ typ typ typ typ int*fAllow
/*958*/ );
/*960*/ typedef enum RpcProxyPerfCounters
/*961*/ {
/*962*/ RpcCurrentUniqueUser=1,
/*963*/ RpcBackEndConnectionAttempts,
/*964*/ RpcBackEndConnectionFailed,
/*965*/ RpcRequestsPerSecond,
/*966*/ RpcIncomingConnections,
/*967*/ RpcIncomingBandwidth,
/*968*/ RpcOutgoingBandwidth,
/*969*/ RpcAttemptedLbsDecisions,
/*970*/ RpcFailedLbsDecisions,
/*971*/ RpcAttemptedLbsMessages,
/*972*/ RpcFailedLbsMessages,
/*973*/ RpcLastCounter
/*974*/ }RpcPerfCounters;
/*976*/ typedef void
/*977*/ (*I_RpcProxyUpdatePerfCounterFn)
/*978*/ (
/*979*/ typ typ typ typ typ RpcPerfCounters Counter,
/*980*/ typ typ typ typ typ int ModifyTrend,
/*981*/ typ typ typ typ typ unsigned long Size
/*982*/ );
/*984*/ typedef void
/*985*/ (*I_RpcProxyUpdatePerfCounterBackendServerFn)
/*986*/ (
/*987*/ typ typ typ typ typ unsigned short*MachineName,
/*988*/ typ typ typ typ typ int IsConnectEvent
/*989*/ );
/*997*/ typedef struct tagI_RpcProxyCallbackInterface
/*998*/ {
/*999*/ I_RpcProxyIsValidMachineFn IsValidMachineFn;
/*1000*/ I_RpcProxyGetClientAddressFn GetClientAddressFn;
/*1001*/ I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
/*1002*/ I_RpcPerformCalloutFn PerformCalloutFn;
/*1003*/ I_RpcFreeCalloutStateFn FreeCalloutStateFn;
/*1004*/ I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;
/*1006*/ I_RpcProxyFilterIfFn ProxyFilterIfFn;
/*1007*/ I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
/*1008*/ I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;
/*1010*/ }I_RpcProxyCallbackInterface;
/*1012*/ 
/*1013*/ RPC_STATUS
/*1014*/ 
/*1015*/ I_RpcProxyNewConnection(
/*1016*/ typ unsigned long ConnectionType,
/*1017*/ typ unsigned short*ServerAddress,
/*1018*/ typ unsigned short*ServerPort,
/*1019*/ typ unsigned short*MinConnTimeout,
/*1020*/ typ void*ConnectionParameter,
/*1021*/ typ typ RDR_CALLOUT_STATE*CallOutState,
/*1022*/ typ I_RpcProxyCallbackInterface*ProxyCallbackInterface
/*1023*/ );
/*1049*/ 
/*1050*/ RPC_STATUS
/*1051*/ 
/*1052*/ I_RpcReplyToClientWithStatus(
/*1053*/ typ void*ConnectionParameter,
/*1054*/ typ RPC_STATUS RpcStatus
/*1055*/ );
/*1057*/ 
/*1058*/ void
/*1059*/ 
/*1060*/ I_RpcRecordCalloutFailure(
/*1061*/ typ RPC_STATUS RpcStatus,
/*1062*/ typ RDR_CALLOUT_STATE*CallOutState,
/*1063*/ typ unsigned short*DllName
/*1064*/ );
/*"rpcnsi.h"23*/ typedef void*RPC_NS_HANDLE;
/*39*/ RPC_STATUS
/*40*/ RpcNsBindingExportA(
/*41*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*42*/ typ typ typ typ typ typ typ RPC_CSTR EntryName,
/*43*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*44*/ typ typ typ typ typ typ typ RPC_BINDING_VECTOR*BindingVec,
/*45*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectUuidVec
/*46*/ );
/*49*/ RPC_STATUS
/*50*/ RpcNsBindingUnexportA(
/*51*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*52*/ typ typ typ typ typ typ typ RPC_CSTR EntryName,
/*53*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*54*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectUuidVec
/*55*/ );
/*59*/ RPC_STATUS
/*60*/ RpcNsBindingExportW(
/*61*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*62*/ typ typ typ typ typ typ typ RPC_WSTR EntryName,
/*63*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*64*/ typ typ typ typ typ typ typ RPC_BINDING_VECTOR*BindingVec,
/*65*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectUuidVec
/*66*/ );
/*68*/ RPC_STATUS
/*69*/ RpcNsBindingUnexportW(
/*70*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*71*/ typ typ typ typ typ typ typ RPC_WSTR EntryName,
/*72*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*73*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectUuidVec
/*74*/ );
/*80*/ RPC_STATUS
/*81*/ RpcNsBindingExportPnPA(
/*82*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*83*/ typ typ typ typ typ typ typ RPC_CSTR EntryName,
/*84*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*85*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectVector
/*86*/ );
/*88*/ RPC_STATUS
/*89*/ RpcNsBindingUnexportPnPA(
/*90*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*91*/ typ typ typ typ typ typ typ RPC_CSTR EntryName,
/*92*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*93*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectVector
/*94*/ );
/*98*/ RPC_STATUS
/*99*/ RpcNsBindingExportPnPW(
/*100*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*101*/ typ typ typ typ typ typ typ RPC_WSTR EntryName,
/*102*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*103*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectVector
/*104*/ );
/*106*/ RPC_STATUS
/*107*/ RpcNsBindingUnexportPnPW(
/*108*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*109*/ typ typ typ typ typ typ typ RPC_WSTR EntryName,
/*110*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*111*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectVector
/*112*/ );
/*118*/ RPC_STATUS
/*119*/ RpcNsBindingLookupBeginA(
/*120*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*121*/ typ typ typ typ typ typ typ RPC_CSTR EntryName,
/*122*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*123*/ typ typ typ typ typ typ typ UUID*ObjUuid,
/*124*/ typ typ typ typ typ unsigned long BindingMaxCount,
/*125*/ typ typ typ typ typ RPC_NS_HANDLE*LookupContext
/*126*/ );
/*130*/ RPC_STATUS
/*131*/ RpcNsBindingLookupBeginW(
/*132*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*133*/ typ typ typ typ typ typ typ RPC_WSTR EntryName,
/*134*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*135*/ typ typ typ typ typ typ typ UUID*ObjUuid,
/*136*/ typ typ typ typ typ unsigned long BindingMaxCount,
/*137*/ typ typ typ typ typ RPC_NS_HANDLE*LookupContext
/*138*/ );
/*141*/ RPC_STATUS
/*142*/ RpcNsBindingLookupNext(
/*143*/ typ RPC_NS_HANDLE LookupContext,
/*144*/ typ RPC_BINDING_VECTOR**BindingVec
/*145*/ );
/*147*/ RPC_STATUS
/*148*/ RpcNsBindingLookupDone(
/*149*/ typ typ RPC_NS_HANDLE*LookupContext
/*150*/ );
/*154*/ RPC_STATUS
/*155*/ RpcNsGroupDeleteA(
/*156*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*157*/ typ typ typ typ typ typ typ RPC_CSTR GroupName
/*158*/ );
/*160*/ RPC_STATUS
/*161*/ RpcNsGroupMbrAddA(
/*162*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*163*/ typ typ typ typ typ RPC_CSTR GroupName,
/*164*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*165*/ typ typ typ typ typ RPC_CSTR MemberName
/*166*/ );
/*168*/ RPC_STATUS
/*169*/ RpcNsGroupMbrRemoveA(
/*170*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*171*/ typ typ typ typ typ RPC_CSTR GroupName,
/*172*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*173*/ typ typ typ typ typ RPC_CSTR MemberName
/*174*/ );
/*176*/ RPC_STATUS
/*177*/ RpcNsGroupMbrInqBeginA(
/*178*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*179*/ typ typ typ typ typ RPC_CSTR GroupName,
/*180*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*181*/ typ typ typ typ typ RPC_NS_HANDLE*InquiryContext
/*182*/ );
/*184*/ RPC_STATUS
/*185*/ RpcNsGroupMbrInqNextA(
/*186*/ typ typ typ typ typ RPC_NS_HANDLE InquiryContext,
/*187*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_CSTR*MemberName
/*188*/ );
/*192*/ RPC_STATUS
/*193*/ RpcNsGroupDeleteW(
/*194*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*195*/ typ typ typ typ typ typ typ RPC_WSTR GroupName
/*196*/ );
/*198*/ RPC_STATUS
/*199*/ RpcNsGroupMbrAddW(
/*200*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*201*/ typ typ typ typ typ RPC_WSTR GroupName,
/*202*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*203*/ typ typ typ typ typ RPC_WSTR MemberName
/*204*/ );
/*206*/ RPC_STATUS
/*207*/ RpcNsGroupMbrRemoveW(
/*208*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*209*/ typ typ typ typ typ RPC_WSTR GroupName,
/*210*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*211*/ typ typ typ typ typ RPC_WSTR MemberName
/*212*/ );
/*214*/ RPC_STATUS
/*215*/ RpcNsGroupMbrInqBeginW(
/*216*/ typ typ typ typ typ unsigned long GroupNameSyntax,
/*217*/ typ typ typ typ typ RPC_WSTR GroupName,
/*218*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*219*/ typ typ typ typ typ RPC_NS_HANDLE*InquiryContext
/*220*/ );
/*222*/ RPC_STATUS
/*223*/ RpcNsGroupMbrInqNextW(
/*224*/ typ typ typ typ typ RPC_NS_HANDLE InquiryContext,
/*225*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ RPC_WSTR*MemberName
/*226*/ );
/*230*/ RPC_STATUS
/*231*/ RpcNsGroupMbrInqDone(
/*232*/ typ typ RPC_NS_HANDLE*InquiryContext
/*233*/ );
/*237*/ RPC_STATUS
/*238*/ RpcNsProfileDeleteA(
/*239*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*240*/ typ typ typ typ typ RPC_CSTR ProfileName
/*241*/ );
/*243*/ RPC_STATUS
/*244*/ RpcNsProfileEltAddA(
/*245*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*246*/ typ typ typ typ typ RPC_CSTR ProfileName,
/*247*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*248*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*249*/ typ typ typ typ typ RPC_CSTR MemberName,
/*250*/ typ typ typ typ typ unsigned long Priority,
/*251*/ typ typ typ typ typ typ typ RPC_CSTR Annotation
/*252*/ );
/*254*/ RPC_STATUS
/*255*/ RpcNsProfileEltRemoveA(
/*256*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*257*/ typ typ typ typ typ RPC_CSTR ProfileName,
/*258*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*259*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*260*/ typ typ typ typ typ RPC_CSTR MemberName
/*261*/ );
/*263*/ RPC_STATUS
/*264*/ RpcNsProfileEltInqBeginA(
/*265*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*266*/ typ typ typ typ typ RPC_CSTR ProfileName,
/*267*/ typ typ typ typ typ unsigned long InquiryType,
/*268*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*269*/ typ typ typ typ typ unsigned long VersOption,
/*270*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*271*/ typ typ typ typ typ typ typ RPC_CSTR MemberName,
/*272*/ typ typ typ typ typ RPC_NS_HANDLE*InquiryContext
/*273*/ );
/*275*/ RPC_STATUS
/*276*/ RpcNsProfileEltInqNextA(
/*277*/ typ typ typ typ typ RPC_NS_HANDLE InquiryContext,
/*278*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*279*/ typ typ typ typ typ RPC_CSTR*MemberName,
/*280*/ typ typ typ typ typ unsigned long*Priority,
/*281*/ typ typ typ typ typ RPC_CSTR*Annotation
/*282*/ );
/*286*/ RPC_STATUS
/*287*/ RpcNsProfileDeleteW(
/*288*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*289*/ typ typ typ typ typ RPC_WSTR ProfileName
/*290*/ );
/*292*/ RPC_STATUS
/*293*/ RpcNsProfileEltAddW(
/*294*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*295*/ typ typ typ typ typ RPC_WSTR ProfileName,
/*296*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*297*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*298*/ typ typ typ typ typ RPC_WSTR MemberName,
/*299*/ typ typ typ typ typ unsigned long Priority,
/*300*/ typ typ typ typ typ typ typ RPC_WSTR Annotation
/*301*/ );
/*303*/ RPC_STATUS
/*304*/ RpcNsProfileEltRemoveW(
/*305*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*306*/ typ typ typ typ typ RPC_WSTR ProfileName,
/*307*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*308*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*309*/ typ typ typ typ typ RPC_WSTR MemberName
/*310*/ );
/*312*/ RPC_STATUS
/*313*/ RpcNsProfileEltInqBeginW(
/*314*/ typ typ typ typ typ unsigned long ProfileNameSyntax,
/*315*/ typ typ typ typ typ RPC_WSTR ProfileName,
/*316*/ typ typ typ typ typ unsigned long InquiryType,
/*317*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*318*/ typ typ typ typ typ unsigned long VersOption,
/*319*/ typ typ typ typ typ unsigned long MemberNameSyntax,
/*320*/ typ typ typ typ typ typ typ RPC_WSTR MemberName,
/*321*/ typ typ typ typ typ RPC_NS_HANDLE*InquiryContext
/*322*/ );
/*324*/ RPC_STATUS
/*325*/ RpcNsProfileEltInqNextW(
/*326*/ typ typ typ typ typ RPC_NS_HANDLE InquiryContext,
/*327*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*328*/ typ typ typ typ typ RPC_WSTR*MemberName,
/*329*/ typ typ typ typ typ unsigned long*Priority,
/*330*/ typ typ typ typ typ RPC_WSTR*Annotation
/*331*/ );
/*335*/ RPC_STATUS
/*336*/ RpcNsProfileEltInqDone(
/*337*/ typ typ RPC_NS_HANDLE*InquiryContext
/*338*/ );
/*342*/ RPC_STATUS
/*343*/ RpcNsEntryObjectInqBeginA(
/*344*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*345*/ typ typ typ typ typ RPC_CSTR EntryName,
/*346*/ typ typ typ typ typ RPC_NS_HANDLE*InquiryContext
/*347*/ );
/*351*/ RPC_STATUS
/*352*/ RpcNsEntryObjectInqBeginW(
/*353*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*354*/ typ typ typ typ typ RPC_WSTR EntryName,
/*355*/ typ typ typ typ typ RPC_NS_HANDLE*InquiryContext
/*356*/ );
/*360*/ RPC_STATUS
/*361*/ RpcNsEntryObjectInqNext(
/*362*/ typ RPC_NS_HANDLE InquiryContext,
/*363*/ typ UUID*ObjUuid
/*364*/ );
/*366*/ RPC_STATUS
/*367*/ RpcNsEntryObjectInqDone(
/*368*/ typ typ RPC_NS_HANDLE*InquiryContext
/*369*/ );
/*373*/ RPC_STATUS
/*374*/ RpcNsEntryExpandNameA(
/*375*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*376*/ typ typ typ typ typ RPC_CSTR EntryName,
/*377*/ typ typ typ typ typ RPC_CSTR*ExpandedName
/*378*/ );
/*380*/ RPC_STATUS
/*381*/ RpcNsMgmtBindingUnexportA(
/*382*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*383*/ typ typ typ typ typ RPC_CSTR EntryName,
/*384*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*385*/ typ typ typ typ typ unsigned long VersOption,
/*386*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectUuidVec
/*387*/ );
/*389*/ RPC_STATUS
/*390*/ RpcNsMgmtEntryCreateA(
/*391*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*392*/ typ typ typ typ typ RPC_CSTR EntryName
/*393*/ );
/*395*/ RPC_STATUS
/*396*/ RpcNsMgmtEntryDeleteA(
/*397*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*398*/ typ typ typ typ typ RPC_CSTR EntryName
/*399*/ );
/*401*/ RPC_STATUS
/*402*/ RpcNsMgmtEntryInqIfIdsA(
/*403*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*404*/ typ typ typ typ typ RPC_CSTR EntryName,
/*405*/ typ typ typ typ typ RPC_IF_ID_VECTOR**IfIdVec
/*406*/ );
/*408*/ RPC_STATUS
/*409*/ RpcNsMgmtHandleSetExpAge(
/*410*/ typ RPC_NS_HANDLE NsHandle,
/*411*/ typ unsigned long ExpirationAge
/*412*/ );
/*414*/ RPC_STATUS
/*415*/ RpcNsMgmtInqExpAge(
/*416*/ typ unsigned long*ExpirationAge
/*417*/ );
/*419*/ RPC_STATUS
/*420*/ RpcNsMgmtSetExpAge(
/*421*/ typ unsigned long ExpirationAge
/*422*/ );
/*426*/ RPC_STATUS
/*427*/ RpcNsEntryExpandNameW(
/*428*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*429*/ typ typ typ typ typ RPC_WSTR EntryName,
/*430*/ typ typ typ typ typ RPC_WSTR*ExpandedName
/*431*/ );
/*433*/ RPC_STATUS
/*434*/ RpcNsMgmtBindingUnexportW(
/*435*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*436*/ typ typ typ typ typ RPC_WSTR EntryName,
/*437*/ typ typ typ typ typ typ typ RPC_IF_ID*IfId,
/*438*/ typ typ typ typ typ unsigned long VersOption,
/*439*/ typ typ typ typ typ typ typ UUID_VECTOR*ObjectUuidVec
/*440*/ );
/*442*/ RPC_STATUS
/*443*/ RpcNsMgmtEntryCreateW(
/*444*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*445*/ typ typ typ typ typ RPC_WSTR EntryName
/*446*/ );
/*448*/ RPC_STATUS
/*449*/ RpcNsMgmtEntryDeleteW(
/*450*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*451*/ typ typ typ typ typ RPC_WSTR EntryName
/*452*/ );
/*454*/ RPC_STATUS
/*455*/ RpcNsMgmtEntryInqIfIdsW(
/*456*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*457*/ typ typ typ typ typ RPC_WSTR EntryName,
/*458*/ typ typ typ typ typ RPC_IF_ID_VECTOR**IfIdVec
/*459*/ );
/*465*/ RPC_STATUS
/*466*/ RpcNsBindingImportBeginA(
/*467*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*468*/ typ typ typ typ typ typ typ RPC_CSTR EntryName,
/*469*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*470*/ typ typ typ typ typ typ typ UUID*ObjUuid,
/*471*/ typ typ typ typ typ RPC_NS_HANDLE*ImportContext
/*472*/ );
/*476*/ RPC_STATUS
/*477*/ RpcNsBindingImportBeginW(
/*478*/ typ typ typ typ typ unsigned long EntryNameSyntax,
/*479*/ typ typ typ typ typ typ typ RPC_WSTR EntryName,
/*480*/ typ typ typ typ typ typ typ RPC_IF_HANDLE IfSpec,
/*481*/ typ typ typ typ typ typ typ UUID*ObjUuid,
/*482*/ typ typ typ typ typ RPC_NS_HANDLE*ImportContext
/*483*/ );
/*487*/ RPC_STATUS
/*488*/ RpcNsBindingImportNext(
/*489*/ typ RPC_NS_HANDLE ImportContext,
/*490*/ typ RPC_BINDING_HANDLE*Binding
/*491*/ );
/*493*/ RPC_STATUS
/*494*/ RpcNsBindingImportDone(
/*495*/ typ typ RPC_NS_HANDLE*ImportContext
/*496*/ );
/*498*/ RPC_STATUS
/*499*/ RpcNsBindingSelect(
/*500*/ typ typ RPC_BINDING_VECTOR*BindingVec,
/*501*/ typ RPC_BINDING_HANDLE*Binding
/*502*/ );
/*"shellapi.h"56*/ struct HDROP__{int unused;};typedef struct HDROP__*HDROP;
/*58*/ extern UINT __stdcall DragQueryFileA(HDROP hDrop,UINT iFile,typ typ typ typ typ typ typ LPSTR lpszFile,UINT cch);
/*59*/ extern UINT __stdcall DragQueryFileW(HDROP hDrop,UINT iFile,typ typ typ typ typ typ typ LPWSTR lpszFile,UINT cch);
/*65*/ extern BOOL __stdcall DragQueryPoint(HDROP hDrop,typ typ typ typ typ LPPOINT lppt);
/*66*/ extern void __stdcall DragFinish(typ typ typ typ typ HDROP hDrop);
/*67*/ extern void __stdcall DragAcceptFiles(typ typ typ typ typ HWND hWnd,typ typ typ typ typ BOOL fAccept);
/*69*/ extern HINSTANCE __stdcall ShellExecuteA(HWND hwnd,LPCSTR lpOperation,LPCSTR lpFile,LPCSTR lpParameters,
/*70*/ LPCSTR lpDirectory,INT nShowCmd);
/*71*/ extern HINSTANCE __stdcall ShellExecuteW(HWND hwnd,LPCWSTR lpOperation,LPCWSTR lpFile,LPCWSTR lpParameters,
/*72*/ LPCWSTR lpDirectory,INT nShowCmd);
/*78*/ extern HINSTANCE __stdcall FindExecutableA(LPCSTR lpFile,LPCSTR lpDirectory,typ typ typ typ typ LPSTR lpResult);
/*79*/ extern HINSTANCE __stdcall FindExecutableW(LPCWSTR lpFile,LPCWSTR lpDirectory,typ typ typ typ typ LPWSTR lpResult);
/*85*/ extern LPWSTR*__stdcall CommandLineToArgvW(LPCWSTR lpCmdLine,typ typ typ typ typ int*pNumArgs);
/*87*/ extern INT __stdcall ShellAboutA(HWND hWnd,LPCSTR szApp,LPCSTR szOtherStuff,HICON hIcon);
/*88*/ extern INT __stdcall ShellAboutW(HWND hWnd,LPCWSTR szApp,LPCWSTR szOtherStuff,HICON hIcon);
/*94*/ extern HICON __stdcall DuplicateIcon(HINSTANCE hInst,HICON hIcon);
/*95*/ extern HICON __stdcall ExtractAssociatedIconA(HINSTANCE hInst,typ typ typ typ typ typ typ LPSTR lpIconPath,typ typ typ typ typ LPWORD lpiIcon);
/*96*/ extern HICON __stdcall ExtractAssociatedIconW(HINSTANCE hInst,typ typ typ typ typ typ typ LPWSTR lpIconPath,typ typ typ typ typ LPWORD lpiIcon);
/*102*/ extern HICON __stdcall ExtractAssociatedIconExA(HINSTANCE hInst,typ typ typ typ typ typ typ LPSTR lpIconPath,typ typ typ typ typ LPWORD lpiIconIndex,typ typ typ typ typ LPWORD lpiIconId);
/*103*/ extern HICON __stdcall ExtractAssociatedIconExW(HINSTANCE hInst,typ typ typ typ typ typ typ LPWSTR lpIconPath,typ typ typ typ typ LPWORD lpiIconIndex,typ typ typ typ typ LPWORD lpiIconId);
/*109*/ extern HICON __stdcall ExtractIconA(HINSTANCE hInst,LPCSTR lpszExeFileName,UINT nIconIndex);
/*110*/ extern HICON __stdcall ExtractIconW(HINSTANCE hInst,LPCWSTR lpszExeFileName,UINT nIconIndex);
/*119*/ typedef struct _DRAGINFOA{
/*120*/ UINT uSize;
/*121*/ POINT pt;
/*122*/ BOOL fNC;
/*123*/ LPSTR lpFileList;
/*124*/ DWORD grfKeyState;
/*125*/ }DRAGINFOA,*LPDRAGINFOA;
/*126*/ typedef struct _DRAGINFOW{
/*127*/ UINT uSize;
/*128*/ POINT pt;
/*129*/ BOOL fNC;
/*130*/ LPWSTR lpFileList;
/*131*/ DWORD grfKeyState;
/*132*/ }DRAGINFOW,*LPDRAGINFOW;
/*137*/ typedef DRAGINFOA DRAGINFO;
/*138*/ typedef LPDRAGINFOA LPDRAGINFO;
/*176*/ typedef struct _AppBarData
/*177*/ {
/*178*/ DWORD cbSize;
/*179*/ HWND hWnd;
/*180*/ UINT uCallbackMessage;
/*181*/ UINT uEdge;
/*182*/ RECT rc;
/*183*/ LPARAM lParam;
/*184*/ }APPBARDATA,*PAPPBARDATA;
/*187*/ extern UINT_PTR __stdcall SHAppBarMessage(DWORD dwMessage,typ typ typ typ typ PAPPBARDATA pData);
/*193*/ extern DWORD __stdcall DoEnvironmentSubstA(typ typ typ typ typ typ typ LPSTR szString,UINT cchString);
/*194*/ extern DWORD __stdcall DoEnvironmentSubstW(typ typ typ typ typ typ typ LPWSTR szString,UINT cchString);
/*202*/ extern UINT __stdcall ExtractIconExA(LPCSTR lpszFile,int nIconIndex,typ typ typ typ typ typ typ HICON*phiconLarge,typ typ typ typ typ typ typ HICON*phiconSmall,UINT nIcons);
/*203*/ extern UINT __stdcall ExtractIconExW(LPCWSTR lpszFile,int nIconIndex,typ typ typ typ typ typ typ HICON*phiconLarge,typ typ typ typ typ typ typ HICON*phiconSmall,UINT nIcons);
/*242*/ typedef WORD FILEOP_FLAGS;
/*255*/ typedef WORD PRINTEROP_FLAGS;
/*264*/ typedef struct _SHFILEOPSTRUCTA
/*265*/ {
/*266*/ HWND hwnd;
/*267*/ UINT wFunc;
/*268*/ LPCSTR pFrom;
/*269*/ LPCSTR pTo;
/*270*/ FILEOP_FLAGS fFlags;
/*271*/ BOOL fAnyOperationsAborted;
/*272*/ LPVOID hNameMappings;
/*273*/ LPCSTR lpszProgressTitle;
/*274*/ }SHFILEOPSTRUCTA,*LPSHFILEOPSTRUCTA;
/*275*/ typedef struct _SHFILEOPSTRUCTW
/*276*/ {
/*277*/ HWND hwnd;
/*278*/ UINT wFunc;
/*279*/ LPCWSTR pFrom;
/*280*/ LPCWSTR pTo;
/*281*/ FILEOP_FLAGS fFlags;
/*282*/ BOOL fAnyOperationsAborted;
/*283*/ LPVOID hNameMappings;
/*284*/ LPCWSTR lpszProgressTitle;
/*285*/ }SHFILEOPSTRUCTW,*LPSHFILEOPSTRUCTW;
/*290*/ typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
/*291*/ typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
/*294*/ extern int __stdcall SHFileOperationA(typ typ typ typ typ LPSHFILEOPSTRUCTA lpFileOp);
/*295*/ extern int __stdcall SHFileOperationW(typ typ typ typ typ LPSHFILEOPSTRUCTW lpFileOp);
/*301*/ extern void __stdcall SHFreeNameMappings(HANDLE hNameMappings);
/*303*/ typedef struct _SHNAMEMAPPINGA
/*304*/ {
/*305*/ LPSTR pszOldPath;
/*306*/ LPSTR pszNewPath;
/*307*/ int cchOldPath;
/*308*/ int cchNewPath;
/*309*/ }SHNAMEMAPPINGA,*LPSHNAMEMAPPINGA;
/*310*/ typedef struct _SHNAMEMAPPINGW
/*311*/ {
/*312*/ LPWSTR pszOldPath;
/*313*/ LPWSTR pszNewPath;
/*314*/ int cchOldPath;
/*315*/ int cchNewPath;
/*316*/ }SHNAMEMAPPINGW,*LPSHNAMEMAPPINGW;
/*321*/ typedef SHNAMEMAPPINGA SHNAMEMAPPING;
/*322*/ typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
/*415*/ typedef struct _SHELLEXECUTEINFOA
/*416*/ {
/*417*/ DWORD cbSize;
/*418*/ ULONG fMask;
/*419*/ HWND hwnd;
/*420*/ LPCSTR lpVerb;
/*421*/ LPCSTR lpFile;
/*422*/ LPCSTR lpParameters;
/*423*/ LPCSTR lpDirectory;
/*424*/ int nShow;
/*425*/ HINSTANCE hInstApp;
/*427*/ LPVOID lpIDList;
/*428*/ LPCSTR lpClass;
/*429*/ HKEY hkeyClass;
/*430*/ DWORD dwHotKey;
/*431*/ union{
/*432*/ HANDLE hIcon;
/*434*/ HANDLE hMonitor;
/*436*/ }u;
/*437*/ HANDLE hProcess;
/*438*/ }SHELLEXECUTEINFOA,*LPSHELLEXECUTEINFOA;
/*439*/ typedef struct _SHELLEXECUTEINFOW
/*440*/ {
/*441*/ DWORD cbSize;
/*442*/ ULONG fMask;
/*443*/ HWND hwnd;
/*444*/ LPCWSTR lpVerb;
/*445*/ LPCWSTR lpFile;
/*446*/ LPCWSTR lpParameters;
/*447*/ LPCWSTR lpDirectory;
/*448*/ int nShow;
/*449*/ HINSTANCE hInstApp;
/*451*/ LPVOID lpIDList;
/*452*/ LPCWSTR lpClass;
/*453*/ HKEY hkeyClass;
/*454*/ DWORD dwHotKey;
/*455*/ union{
/*456*/ HANDLE hIcon;
/*458*/ HANDLE hMonitor;
/*460*/ }u;
/*461*/ HANDLE hProcess;
/*462*/ }SHELLEXECUTEINFOW,*LPSHELLEXECUTEINFOW;
/*467*/ typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
/*468*/ typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
/*471*/ extern BOOL __stdcall ShellExecuteExA(typ typ typ typ typ LPSHELLEXECUTEINFOA lpExecInfo);
/*472*/ extern BOOL __stdcall ShellExecuteExW(typ typ typ typ typ LPSHELLEXECUTEINFOW lpExecInfo);
/*482*/ typedef struct _SHCREATEPROCESSINFOW
/*483*/ {
/*484*/ DWORD cbSize;
/*485*/ ULONG fMask;
/*486*/ HWND hwnd;
/*487*/ LPCWSTR pszFile;
/*488*/ LPCWSTR pszParameters;
/*489*/ LPCWSTR pszCurrentDirectory;
/*490*/ HANDLE hUserToken;
/*491*/ LPSECURITY_ATTRIBUTES lpProcessAttributes;
/*492*/ LPSECURITY_ATTRIBUTES lpThreadAttributes;
/*493*/ BOOL bInheritHandles;
/*494*/ DWORD dwCreationFlags;
/*495*/ LPSTARTUPINFOW lpStartupInfo;
/*496*/ LPPROCESS_INFORMATION lpProcessInformation;
/*497*/ }SHCREATEPROCESSINFOW,*PSHCREATEPROCESSINFOW;
/*499*/ extern BOOL __stdcall SHCreateProcessAsUserW(typ typ typ typ typ PSHCREATEPROCESSINFOW pscpi);
/*504*/ extern HRESULT __stdcall SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate,typ typ typ typ typ PWSTR*ppszApplication,typ typ typ typ typ typ typ PWSTR*ppszCommandLine,typ typ typ typ typ typ typ PWSTR*ppszParameters);
/*840*/ typedef enum ASSOCCLASS
/*841*/ {
/*842*/ ASSOCCLASS_SHELL_KEY=0,
/*843*/ ASSOCCLASS_PROGID_KEY,
/*844*/ ASSOCCLASS_PROGID_STR,
/*845*/ ASSOCCLASS_CLSID_KEY,
/*846*/ ASSOCCLASS_CLSID_STR,
/*847*/ ASSOCCLASS_APP_KEY,
/*848*/ ASSOCCLASS_APP_STR,
/*849*/ ASSOCCLASS_SYSTEM_STR,
/*850*/ ASSOCCLASS_FOLDER,
/*851*/ ASSOCCLASS_STAR,
/*852*/ }ASSOCCLASS;
/*853*/ typedef struct ASSOCIATIONELEMENT_
/*854*/ {
/*855*/ ASSOCCLASS ac;
/*856*/ HKEY hkClass;
/*857*/ PCWSTR pszClass;
/*858*/ }ASSOCIATIONELEMENT;
/*862*/ extern HRESULT __stdcall AssocCreateForClasses(typ typ typ typ typ const ASSOCIATIONELEMENT*rgClasses,ULONG cClasses,const IID*const riid,typ typ typ typ typ void**ppv);
/*908*/ typedef struct _SHQUERYRBINFO{
/*909*/ DWORD cbSize;
/*911*/ __int64 i64Size;
/*912*/ __int64 i64NumItems;
/*917*/ }SHQUERYRBINFO,*LPSHQUERYRBINFO;
/*927*/ extern HRESULT __stdcall SHQueryRecycleBinA(LPCSTR pszRootPath,typ typ typ typ typ LPSHQUERYRBINFO pSHQueryRBInfo);
/*928*/ extern HRESULT __stdcall SHQueryRecycleBinW(LPCWSTR pszRootPath,typ typ typ typ typ LPSHQUERYRBINFO pSHQueryRBInfo);
/*934*/ extern HRESULT __stdcall SHEmptyRecycleBinA(HWND hwnd,LPCSTR pszRootPath,DWORD dwFlags);
/*935*/ extern HRESULT __stdcall SHEmptyRecycleBinW(HWND hwnd,LPCWSTR pszRootPath,DWORD dwFlags);
/*952*/ typedef enum
/*953*/ {
/*954*/ QUNS_NOT_PRESENT=1,
/*955*/ QUNS_BUSY=2,
/*956*/ QUNS_RUNNING_D3D_FULL_SCREEN=3,
/*957*/ QUNS_PRESENTATION_MODE=4,
/*958*/ QUNS_ACCEPTS_NOTIFICATIONS=5,
/*959*/ }QUERY_USER_NOTIFICATION_STATE;
/*961*/ extern HRESULT __stdcall SHQueryUserNotificationState(typ typ typ typ typ QUERY_USER_NOTIFICATION_STATE*pquns);
/*965*/ typedef struct _NOTIFYICONDATAA{
/*966*/ DWORD cbSize;
/*967*/ HWND hWnd;
/*968*/ UINT uID;
/*969*/ UINT uFlags;
/*970*/ UINT uCallbackMessage;
/*971*/ HICON hIcon;
/*976*/ CHAR szTip[128];
/*977*/ DWORD dwState;
/*978*/ DWORD dwStateMask;
/*979*/ CHAR szInfo[256];
/*980*/ union{
/*981*/ UINT uTimeout;
/*982*/ UINT uVersion;
/*983*/ }u;
/*984*/ CHAR szInfoTitle[64];
/*985*/ DWORD dwInfoFlags;
/*988*/ GUID guidItem;
/*991*/ HICON hBalloonIcon;
/*993*/ }NOTIFYICONDATAA,*PNOTIFYICONDATAA;
/*994*/ typedef struct _NOTIFYICONDATAW{
/*995*/ DWORD cbSize;
/*996*/ HWND hWnd;
/*997*/ UINT uID;
/*998*/ UINT uFlags;
/*999*/ UINT uCallbackMessage;
/*1000*/ HICON hIcon;
/*1005*/ WCHAR szTip[128];
/*1006*/ DWORD dwState;
/*1007*/ DWORD dwStateMask;
/*1008*/ WCHAR szInfo[256];
/*1009*/ union{
/*1010*/ UINT uTimeout;
/*1011*/ UINT uVersion;
/*1012*/ }u;
/*1013*/ WCHAR szInfoTitle[64];
/*1014*/ DWORD dwInfoFlags;
/*1017*/ GUID guidItem;
/*1020*/ HICON hBalloonIcon;
/*1022*/ }NOTIFYICONDATAW,*PNOTIFYICONDATAW;
/*1027*/ typedef NOTIFYICONDATAA NOTIFYICONDATA;
/*1028*/ typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
/*1129*/ extern BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage,typ typ typ typ typ PNOTIFYICONDATAA lpData);
/*1130*/ extern BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage,typ typ typ typ typ PNOTIFYICONDATAW lpData);
/*1163*/ typedef struct _SHFILEINFOA
/*1164*/ {
/*1165*/ HICON hIcon;
/*1166*/ int iIcon;
/*1167*/ DWORD dwAttributes;
/*1168*/ CHAR szDisplayName[260];
/*1169*/ CHAR szTypeName[80];
/*1170*/ }SHFILEINFOA;
/*1171*/ typedef struct _SHFILEINFOW
/*1172*/ {
/*1173*/ HICON hIcon;
/*1174*/ int iIcon;
/*1175*/ DWORD dwAttributes;
/*1176*/ WCHAR szDisplayName[260];
/*1177*/ WCHAR szTypeName[80];
/*1178*/ }SHFILEINFOW;
/*1182*/ typedef SHFILEINFOA SHFILEINFO;
/*1214*/ extern DWORD_PTR __stdcall SHGetFileInfoA(LPCSTR pszPath,DWORD dwFileAttributes,typ typ typ typ typ typ typ typ typ SHFILEINFOA*psfi,
/*1215*/ UINT cbFileInfo,UINT uFlags);
/*1216*/ extern DWORD_PTR __stdcall SHGetFileInfoW(LPCWSTR pszPath,DWORD dwFileAttributes,typ typ typ typ typ typ typ typ typ SHFILEINFOW*psfi,
/*1217*/ UINT cbFileInfo,UINT uFlags);
/*1225*/ typedef struct _SHSTOCKICONINFO
/*1226*/ {
/*1227*/ DWORD cbSize;
/*1228*/ HICON hIcon;
/*1229*/ int iSysImageIndex;
/*1230*/ int iIcon;
/*1231*/ WCHAR szPath[260];
/*1232*/ }SHSTOCKICONINFO;
/*1246*/ typedef enum SHSTOCKICONID
/*1247*/ {
/*1248*/ SIID_DOCNOASSOC=0,
/*1249*/ SIID_DOCASSOC=1,
/*1250*/ SIID_APPLICATION=2,
/*1251*/ SIID_FOLDER=3,
/*1252*/ SIID_FOLDEROPEN=4,
/*1253*/ SIID_DRIVE525=5,
/*1254*/ SIID_DRIVE35=6,
/*1255*/ SIID_DRIVEREMOVE=7,
/*1256*/ SIID_DRIVEFIXED=8,
/*1257*/ SIID_DRIVENET=9,
/*1258*/ SIID_DRIVENETDISABLED=10,
/*1259*/ SIID_DRIVECD=11,
/*1260*/ SIID_DRIVERAM=12,
/*1261*/ SIID_WORLD=13,
/*1262*/ SIID_SERVER=15,
/*1263*/ SIID_PRINTER=16,
/*1264*/ SIID_MYNETWORK=17,
/*1265*/ SIID_FIND=22,
/*1266*/ SIID_HELP=23,
/*1267*/ SIID_SHARE=28,
/*1268*/ SIID_LINK=29,
/*1269*/ SIID_SLOWFILE=30,
/*1270*/ SIID_RECYCLER=31,
/*1271*/ SIID_RECYCLERFULL=32,
/*1272*/ SIID_MEDIACDAUDIO=40,
/*1273*/ SIID_LOCK=47,
/*1274*/ SIID_AUTOLIST=49,
/*1275*/ SIID_PRINTERNET=50,
/*1276*/ SIID_SERVERSHARE=51,
/*1277*/ SIID_PRINTERFAX=52,
/*1278*/ SIID_PRINTERFAXNET=53,
/*1279*/ SIID_PRINTERFILE=54,
/*1280*/ SIID_STACK=55,
/*1281*/ SIID_MEDIASVCD=56,
/*1282*/ SIID_STUFFEDFOLDER=57,
/*1283*/ SIID_DRIVEUNKNOWN=58,
/*1284*/ SIID_DRIVEDVD=59,
/*1285*/ SIID_MEDIADVD=60,
/*1286*/ SIID_MEDIADVDRAM=61,
/*1287*/ SIID_MEDIADVDRW=62,
/*1288*/ SIID_MEDIADVDR=63,
/*1289*/ SIID_MEDIADVDROM=64,
/*1290*/ SIID_MEDIACDAUDIOPLUS=65,
/*1291*/ SIID_MEDIACDRW=66,
/*1292*/ SIID_MEDIACDR=67,
/*1293*/ SIID_MEDIACDBURN=68,
/*1294*/ SIID_MEDIABLANKCD=69,
/*1295*/ SIID_MEDIACDROM=70,
/*1296*/ SIID_AUDIOFILES=71,
/*1297*/ SIID_IMAGEFILES=72,
/*1298*/ SIID_VIDEOFILES=73,
/*1299*/ SIID_MIXEDFILES=74,
/*1300*/ SIID_FOLDERBACK=75,
/*1301*/ SIID_FOLDERFRONT=76,
/*1302*/ SIID_SHIELD=77,
/*1303*/ SIID_WARNING=78,
/*1304*/ SIID_INFO=79,
/*1305*/ SIID_ERROR=80,
/*1306*/ SIID_KEY=81,
/*1307*/ SIID_SOFTWARE=82,
/*1308*/ SIID_RENAME=83,
/*1309*/ SIID_DELETE=84,
/*1310*/ SIID_MEDIAAUDIODVD=85,
/*1311*/ SIID_MEDIAMOVIEDVD=86,
/*1312*/ SIID_MEDIAENHANCEDCD=87,
/*1313*/ SIID_MEDIAENHANCEDDVD=88,
/*1314*/ SIID_MEDIAHDDVD=89,
/*1315*/ SIID_MEDIABLURAY=90,
/*1316*/ SIID_MEDIAVCD=91,
/*1317*/ SIID_MEDIADVDPLUSR=92,
/*1318*/ SIID_MEDIADVDPLUSRW=93,
/*1319*/ SIID_DESKTOPPC=94,
/*1320*/ SIID_MOBILEPC=95,
/*1321*/ SIID_USERS=96,
/*1322*/ SIID_MEDIASMARTMEDIA=97,
/*1323*/ SIID_MEDIACOMPACTFLASH=98,
/*1324*/ SIID_DEVICECELLPHONE=99,
/*1325*/ SIID_DEVICECAMERA=100,
/*1326*/ SIID_DEVICEVIDEOCAMERA=101,
/*1327*/ SIID_DEVICEAUDIOPLAYER=102,
/*1328*/ SIID_NETWORKCONNECT=103,
/*1329*/ SIID_INTERNET=104,
/*1330*/ SIID_ZIPFILE=105,
/*1331*/ SIID_SETTINGS=106,
/*1334*/ SIID_DRIVEHDDVD=132,
/*1335*/ SIID_DRIVEBD=133,
/*1336*/ SIID_MEDIAHDDVDROM=134,
/*1337*/ SIID_MEDIAHDDVDR=135,
/*1338*/ SIID_MEDIAHDDVDRAM=136,
/*1339*/ SIID_MEDIABDROM=137,
/*1340*/ SIID_MEDIABDR=138,
/*1341*/ SIID_MEDIABDRE=139,
/*1342*/ SIID_CLUSTEREDDRIVE=140,
/*1343*/ SIID_MAX_ICONS=141,
/*1344*/ }SHSTOCKICONID;
/*1349*/ extern HRESULT __stdcall SHGetStockIconInfo(SHSTOCKICONID siid,UINT uFlags,typ typ typ typ typ SHSTOCKICONINFO*psii);
/*1356*/ extern BOOL __stdcall SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName,typ typ typ typ typ typ typ ULARGE_INTEGER*pulFreeBytesAvailableToCaller,
/*1357*/ typ typ typ typ typ typ typ ULARGE_INTEGER*pulTotalNumberOfBytes,typ typ typ typ typ typ typ ULARGE_INTEGER*pulTotalNumberOfFreeBytes);
/*1358*/ extern BOOL __stdcall SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName,typ typ typ typ typ typ typ ULARGE_INTEGER*pulFreeBytesAvailableToCaller,
/*1359*/ typ typ typ typ typ typ typ ULARGE_INTEGER*pulTotalNumberOfBytes,typ typ typ typ typ typ typ ULARGE_INTEGER*pulTotalNumberOfFreeBytes);
/*1365*/ extern BOOL __stdcall SHGetNewLinkInfoA(typ typ typ typ typ LPCSTR pszLinkTo,typ typ typ typ typ LPCSTR pszDir,typ typ typ typ typ LPSTR pszName,typ typ typ typ typ BOOL*pfMustCopy,typ typ typ typ typ UINT uFlags);
/*1366*/ extern BOOL __stdcall SHGetNewLinkInfoW(typ typ typ typ typ LPCWSTR pszLinkTo,typ typ typ typ typ LPCWSTR pszDir,typ typ typ typ typ LPWSTR pszName,typ typ typ typ typ BOOL*pfMustCopy,typ typ typ typ typ UINT uFlags);
/*1402*/ extern BOOL __stdcall SHInvokePrinterCommandA(HWND hwnd,UINT uAction,LPCSTR lpBuf1,LPCSTR lpBuf2,BOOL fModal);
/*1403*/ extern BOOL __stdcall SHInvokePrinterCommandW(HWND hwnd,UINT uAction,LPCWSTR lpBuf1,LPCWSTR lpBuf2,BOOL fModal);
/*1412*/ typedef struct _OPEN_PRINTER_PROPS_INFOA
/*1413*/ {
/*1414*/ DWORD dwSize;
/*1415*/ LPSTR pszSheetName;
/*1416*/ UINT uSheetIndex;
/*1417*/ DWORD dwFlags;
/*1418*/ BOOL bModal;
/*1419*/ }OPEN_PRINTER_PROPS_INFOA,*POPEN_PRINTER_PROPS_INFOA;
/*1420*/ typedef struct _OPEN_PRINTER_PROPS_INFOW
/*1421*/ {
/*1422*/ DWORD dwSize;
/*1423*/ LPWSTR pszSheetName;
/*1424*/ UINT uSheetIndex;
/*1425*/ DWORD dwFlags;
/*1426*/ BOOL bModal;
/*1427*/ }OPEN_PRINTER_PROPS_INFOW,*POPEN_PRINTER_PROPS_INFOW;
/*1432*/ typedef OPEN_PRINTER_PROPS_INFOA OPEN_PRINTER_PROPS_INFO;
/*1433*/ typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO;
/*1489*/ extern HRESULT __stdcall SHSetLocalizedName(LPCWSTR pszPath,LPCWSTR pszResModule,int idsRes);
/*1494*/ extern HRESULT __stdcall SHRemoveLocalizedName(LPCWSTR pszPath);
/*1496*/ extern HRESULT __stdcall SHGetLocalizedName(typ typ typ typ typ LPCWSTR pszPath,typ typ typ typ typ LPWSTR pszResModule,UINT cch,typ typ typ typ typ int*pidsRes);
/*1525*/ extern int ShellMessageBoxA(
/*1526*/ typ typ typ typ typ typ typ HINSTANCE hAppInst,
/*1527*/ typ typ typ typ typ typ typ HWND hWnd,
/*1528*/ typ typ typ typ typ LPCSTR lpcText,
/*1529*/ typ typ typ typ typ typ typ LPCSTR lpcTitle,
/*1530*/ typ typ typ typ typ UINT fuStyle,...);
/*1531*/ extern int ShellMessageBoxW(
/*1532*/ typ typ typ typ typ typ typ HINSTANCE hAppInst,
/*1533*/ typ typ typ typ typ typ typ HWND hWnd,
/*1534*/ typ typ typ typ typ LPCWSTR lpcText,
/*1535*/ typ typ typ typ typ typ typ LPCWSTR lpcTitle,
/*1536*/ typ typ typ typ typ UINT fuStyle,...);
/*1544*/ extern BOOL __stdcall IsLFNDriveA(LPCSTR pszPath);
/*1545*/ extern BOOL __stdcall IsLFNDriveW(LPCWSTR pszPath);
/*1556*/ extern HRESULT __stdcall SHEnumerateUnreadMailAccountsA(HKEY hKeyUser,DWORD dwIndex,typ typ typ typ typ LPSTR pszMailAddress,int cchMailAddress);
/*1557*/ extern HRESULT __stdcall SHEnumerateUnreadMailAccountsW(HKEY hKeyUser,DWORD dwIndex,typ typ typ typ typ LPWSTR pszMailAddress,int cchMailAddress);
/*1563*/ extern HRESULT __stdcall SHGetUnreadMailCountA(HKEY hKeyUser,LPCSTR pszMailAddress,typ typ typ typ typ typ typ DWORD*pdwCount,typ typ typ typ typ typ typ FILETIME*pFileTime,typ typ typ typ typ typ typ LPSTR pszShellExecuteCommand,int cchShellExecuteCommand);
/*1564*/ extern HRESULT __stdcall SHGetUnreadMailCountW(HKEY hKeyUser,LPCWSTR pszMailAddress,typ typ typ typ typ typ typ DWORD*pdwCount,typ typ typ typ typ typ typ FILETIME*pFileTime,typ typ typ typ typ typ typ LPWSTR pszShellExecuteCommand,int cchShellExecuteCommand);
/*1570*/ extern HRESULT __stdcall SHSetUnreadMailCountA(LPCSTR pszMailAddress,DWORD dwCount,LPCSTR pszShellExecuteCommand);
/*1571*/ extern HRESULT __stdcall SHSetUnreadMailCountW(LPCWSTR pszMailAddress,DWORD dwCount,LPCWSTR pszShellExecuteCommand);
/*1581*/ extern BOOL __stdcall SHTestTokenMembership(typ typ typ typ typ typ typ HANDLE hToken,typ typ typ typ typ ULONG ulRID);
/*1587*/ extern HRESULT __stdcall SHGetImageList(int iImageList,const IID*const riid,typ typ typ typ typ void**ppvObj);
/*1605*/ typedef HRESULT(__stdcall*PFNCANSHAREFOLDERW)(LPCWSTR pszPath);
/*1606*/ typedef HRESULT(__stdcall*PFNSHOWSHAREFOLDERUIW)(HWND hwndParent,LPCWSTR pszPath);
/*1628*/ extern BOOL __stdcall InitNetworkAddressControl(void);
/*1641*/ typedef struct tagNC_ADDRESS
/*1642*/ {
/*1643*/ struct NET_ADDRESS_INFO_*pAddrInfo;
/*1644*/ USHORT PortNumber;
/*1645*/ BYTE PrefixLength;
/*1646*/ }NC_ADDRESS,*PNC_ADDRESS;
/*1669*/ extern HRESULT __stdcall SHGetDriveMedia(LPCWSTR pszDrive,typ typ typ typ typ DWORD*pdwMediaContent);
/*58*/ typedef struct _PERF_DATA_BLOCK{
/*59*/ WCHAR Signature[4];
/*60*/ DWORD LittleEndian;
/*61*/ DWORD Version;
/*63*/ DWORD Revision;
/*65*/ DWORD TotalByteLength;
/*66*/ DWORD HeaderLength;
/*67*/ DWORD NumObjectTypes;
/*69*/ LONG DefaultObject;
/*74*/ SYSTEMTIME SystemTime;
/*76*/ LARGE_INTEGER PerfTime;
/*78*/ LARGE_INTEGER PerfFreq;
/*80*/ LARGE_INTEGER PerfTime100nSec;
/*82*/ DWORD SystemNameLength;
/*83*/ DWORD SystemNameOffset;
/*86*/ }PERF_DATA_BLOCK,*PPERF_DATA_BLOCK;
/*96*/ typedef struct _PERF_OBJECT_TYPE{
/*97*/ DWORD TotalByteLength;
/*105*/ DWORD DefinitionLength;
/*113*/ DWORD HeaderLength;
/*117*/ DWORD ObjectNameTitleIndex;
/*122*/ LPWSTR ObjectNameTitle;
/*126*/ DWORD ObjectHelpTitleIndex;
/*131*/ LPWSTR ObjectHelpTitle;
/*135*/ DWORD DetailLevel;
/*139*/ DWORD NumCounters;
/*142*/ LONG DefaultCounter;
/*146*/ LONG NumInstances;
/*158*/ DWORD CodePage;
/*161*/ LARGE_INTEGER PerfTime;
/*163*/ LARGE_INTEGER PerfFreq;
/*165*/ }PERF_OBJECT_TYPE,*PPERF_OBJECT_TYPE;
/*542*/ typedef struct _PERF_COUNTER_DEFINITION{
/*543*/ DWORD ByteLength;
/*544*/ DWORD CounterNameTitleIndex;
/*550*/ LPWSTR CounterNameTitle;
/*554*/ DWORD CounterHelpTitleIndex;
/*560*/ LPWSTR CounterHelpTitle;
/*564*/ LONG DefaultScale;
/*567*/ DWORD DetailLevel;
/*569*/ DWORD CounterType;
/*570*/ DWORD CounterSize;
/*571*/ DWORD CounterOffset;
/*574*/ }PERF_COUNTER_DEFINITION,*PPERF_COUNTER_DEFINITION;
/*589*/ typedef struct _PERF_INSTANCE_DEFINITION{
/*590*/ DWORD ByteLength;
/*592*/ DWORD ParentObjectTitleIndex;
/*598*/ DWORD ParentObjectInstance;
/*602*/ LONG UniqueID;
/*605*/ DWORD NameOffset;
/*608*/ DWORD NameLength;
/*614*/ }PERF_INSTANCE_DEFINITION,*PPERF_INSTANCE_DEFINITION;
/*628*/ typedef struct _PERF_COUNTER_BLOCK{
/*629*/ DWORD ByteLength;
/*631*/ }PERF_COUNTER_BLOCK,*PPERF_COUNTER_BLOCK;
/*648*/ typedef DWORD(typ PM_OPEN_PROC)(typ typ typ typ typ typ typ LPWSTR);
/*649*/ typedef DWORD(typ PM_COLLECT_PROC)(typ typ typ typ typ typ typ LPWSTR,LPVOID*,LPDWORD,LPDWORD);
/*650*/ typedef DWORD(typ PM_CLOSE_PROC)(void);
/*651*/ typedef DWORD(typ PM_QUERY_PROC)(LPDWORD,LPVOID*,LPDWORD,LPDWORD);
/*44*/ typedef unsigned char u_char;
/*45*/ typedef unsigned short u_short;
/*46*/ typedef unsigned int u_int;
/*47*/ typedef unsigned long u_long;
/*54*/ typedef UINT_PTR SOCKET;
/*68*/ typedef struct fd_set{
/*69*/ u_int fd_count;
/*70*/ SOCKET fd_array[64];
/*71*/ }fd_set;
/*77*/ extern int typ typ __WSAFDIsSet(SOCKET,fd_set typ*);
/*111*/ struct timeval{
/*112*/ long tv_sec;
/*113*/ long tv_usec;
/*114*/ };
/*167*/ struct hostent{
/*168*/ char typ*h_name;
/*169*/ char typ*typ*h_aliases;
/*170*/ short h_addrtype;
/*171*/ short h_length;
/*172*/ char typ*typ*h_addr_list;
/*174*/ };
/*180*/ struct netent{
/*181*/ char typ*n_name;
/*182*/ char typ*typ*n_aliases;
/*183*/ short n_addrtype;
/*184*/ u_long n_net;
/*185*/ };
/*187*/ struct servent{
/*188*/ char typ*s_name;
/*189*/ char typ*typ*s_aliases;
/*194*/ short s_port;
/*195*/ char typ*s_proto;
/*197*/ };
/*199*/ struct protoent{
/*200*/ char typ*p_name;
/*201*/ char typ*typ*p_aliases;
/*202*/ short p_proto;
/*203*/ };
/*"inaddr.h"22*/ typedef struct in_addr{
/*23*/ union{
/*24*/ struct{UCHAR s_b1,s_b2,s_b3,s_b4;}S_un_b;
/*25*/ struct{USHORT s_w1,s_w2;}S_un_w;
/*26*/ ULONG S_addr;
/*27*/ }S_un;
/*34*/ }IN_ADDR,*PIN_ADDR,typ*LPIN_ADDR;
/*"winsock.h"312*/ struct sockaddr_in{
/*313*/ short sin_family;
/*314*/ u_short sin_port;
/*315*/ struct in_addr sin_addr;
/*316*/ char sin_zero[8];
/*317*/ };
/*322*/ typedef struct WSAData{
/*323*/ WORD wVersion;
/*324*/ WORD wHighVersion;
/*332*/ char szDescription[256+1];
/*333*/ char szSystemStatus[128+1];
/*334*/ unsigned short iMaxSockets;
/*335*/ unsigned short iMaxUdpDg;
/*336*/ char typ*lpVendorInfo;
/*338*/ }WSADATA;
/*340*/ typedef WSADATA typ*LPWSADATA;
/*363*/ struct ip_mreq{
/*364*/ struct in_addr imr_multiaddr;
/*365*/ struct in_addr imr_interface;
/*366*/ };
/*485*/ struct sockaddr{
/*486*/ u_short sa_family;
/*487*/ char sa_data[14];
/*488*/ };
/*494*/ struct sockproto{
/*495*/ u_short sp_family;
/*496*/ u_short sp_protocol;
/*497*/ };
/*531*/ struct linger{
/*532*/ u_short l_onoff;
/*533*/ u_short l_linger;
/*534*/ };
/*735*/ SOCKET typ typ accept(
/*736*/ typ SOCKET s,
/*737*/ typ struct sockaddr typ*addr,
/*738*/ typ typ int typ*addrlen);
/*740*/ int typ typ bind(
/*741*/ typ SOCKET s,
/*742*/ typ const struct sockaddr typ*addr,
/*743*/ typ int namelen);
/*745*/ int typ typ closesocket(typ SOCKET s);
/*747*/ int typ typ connect(
/*748*/ typ SOCKET s,
/*749*/ typ const struct sockaddr typ*name,
/*750*/ typ int namelen);
/*752*/ int typ typ ioctlsocket(
/*753*/ typ SOCKET s,
/*754*/ typ long cmd,
/*755*/ typ typ u_long typ*argp);
/*757*/ int typ typ getpeername(
/*758*/ typ SOCKET s,
/*759*/ typ struct sockaddr typ*name,
/*760*/ typ typ int typ*namelen);
/*762*/ int typ typ getsockname(
/*763*/ typ SOCKET s,
/*764*/ typ struct sockaddr typ*name,
/*765*/ typ typ int typ*namelen);
/*767*/ int typ typ getsockopt(
/*768*/ typ SOCKET s,
/*769*/ typ int level,
/*770*/ typ int optname,
/*771*/ typ typ typ typ typ char typ*optval,
/*772*/ typ typ int typ*optlen);
/*774*/ u_long typ typ htonl(typ u_long hostlong);
/*776*/ u_short typ typ htons(typ u_short hostshort);
/*778*/ unsigned long typ typ inet_addr(typ const char typ*cp);
/*780*/ char typ*typ typ inet_ntoa(typ struct in_addr in);
/*782*/ int typ typ listen(
/*783*/ typ SOCKET s,
/*784*/ typ int backlog);
/*786*/ u_long typ typ ntohl(typ u_long netlong);
/*788*/ u_short typ typ ntohs(typ u_short netshort);
/*790*/ int typ typ recv(
/*791*/ typ SOCKET s,
/*792*/ typ typ typ typ typ typ typ typ char typ*buf,
/*793*/ typ int len,
/*794*/ typ int flags);
/*796*/ int typ typ recvfrom(
/*797*/ typ SOCKET s,
/*798*/ typ typ typ typ typ typ typ typ char typ*buf,
/*799*/ typ int len,
/*800*/ typ int flags,
/*801*/ typ typ typ typ typ struct sockaddr typ*from,
/*802*/ typ typ int typ*fromlen);
/*804*/ int typ typ select(
/*805*/ typ int nfds,
/*806*/ typ typ fd_set typ*readfds,
/*807*/ typ typ fd_set typ*writefds,
/*808*/ typ typ fd_set typ*exceptfds,
/*809*/ typ const struct timeval typ*timeout);
/*811*/ int typ typ send(
/*812*/ typ SOCKET s,
/*813*/ typ const char typ*buf,
/*814*/ typ int len,
/*815*/ typ int flags);
/*817*/ int typ typ sendto(
/*818*/ typ SOCKET s,
/*819*/ typ const char typ*buf,
/*820*/ typ int len,
/*821*/ typ int flags,
/*822*/ typ const struct sockaddr typ*to,
/*823*/ typ int tolen);
/*825*/ int typ typ setsockopt(
/*826*/ typ SOCKET s,
/*827*/ typ int level,
/*828*/ typ int optname,
/*829*/ typ const char typ*optval,
/*830*/ typ int optlen);
/*832*/ int typ typ shutdown(
/*833*/ typ SOCKET s,
/*834*/ typ int how);
/*836*/ SOCKET typ typ socket(
/*837*/ typ int af,
/*838*/ typ int type,
/*839*/ typ int protocol);
/*843*/ struct hostent typ*typ typ gethostbyaddr(
/*844*/ typ const char typ*addr,
/*845*/ typ int len,
/*846*/ typ int type);
/*848*/ struct hostent typ*typ typ gethostbyname(typ const char typ*name);
/*850*/ int typ typ gethostname(
/*851*/ typ typ typ typ typ typ typ char typ*name,
/*852*/ typ int namelen);
/*854*/ struct servent typ*typ typ getservbyport(
/*855*/ typ int port,
/*856*/ typ const char typ*proto);
/*858*/ struct servent typ*typ typ getservbyname(
/*859*/ typ const char typ*name,
/*860*/ typ const char typ*proto);
/*862*/ struct protoent typ*typ typ getprotobynumber(typ int proto);
/*864*/ struct protoent typ*typ typ getprotobyname(typ const char typ*name);
/*868*/ int typ typ WSAStartup(
/*869*/ typ WORD wVersionRequired,
/*870*/ typ LPWSADATA lpWSAData);
/*872*/ int typ typ WSACleanup(void);
/*874*/ void typ typ WSASetLastError(typ int iError);
/*876*/ int typ typ WSAGetLastError(void);
/*878*/ BOOL typ typ WSAIsBlocking(void);
/*880*/ int typ typ WSAUnhookBlockingHook(void);
/*882*/ FARPROC typ typ WSASetBlockingHook(typ FARPROC lpBlockFunc);
/*884*/ int typ typ WSACancelBlockingCall(void);
/*886*/ HANDLE typ typ WSAAsyncGetServByName(
/*887*/ typ HWND hWnd,
/*888*/ typ u_int wMsg,
/*889*/ typ const char typ*name,
/*890*/ typ const char typ*proto,
/*891*/ typ typ typ typ typ char typ*buf,
/*892*/ typ int buflen);
/*894*/ HANDLE typ typ WSAAsyncGetServByPort(
/*895*/ typ HWND hWnd,
/*896*/ typ u_int wMsg,
/*897*/ typ int port,
/*898*/ typ const char typ*proto,
/*899*/ typ typ typ typ typ char typ*buf,
/*900*/ typ int buflen);
/*902*/ HANDLE typ typ WSAAsyncGetProtoByName(
/*903*/ typ HWND hWnd,
/*904*/ typ u_int wMsg,
/*905*/ typ const char typ*name,
/*906*/ typ typ typ typ typ char typ*buf,
/*907*/ typ int buflen);
/*909*/ HANDLE typ typ WSAAsyncGetProtoByNumber(
/*910*/ typ HWND hWnd,
/*911*/ typ u_int wMsg,
/*912*/ typ int number,
/*913*/ typ typ typ typ typ char typ*buf,
/*914*/ typ int buflen);
/*916*/ HANDLE typ typ WSAAsyncGetHostByName(
/*917*/ typ HWND hWnd,
/*918*/ typ u_int wMsg,
/*919*/ typ const char typ*name,
/*920*/ typ typ typ typ typ char typ*buf,
/*921*/ typ int buflen);
/*923*/ HANDLE typ typ WSAAsyncGetHostByAddr(
/*924*/ typ HWND hWnd,
/*925*/ typ u_int wMsg,
/*926*/ typ const char typ*addr,
/*927*/ typ int len,
/*928*/ typ int type,
/*929*/ typ typ typ typ typ char typ*buf,
/*930*/ typ int buflen);
/*932*/ int typ typ WSACancelAsyncRequest(typ HANDLE hAsyncTaskHandle);
/*934*/ int typ typ WSAAsyncSelect(
/*935*/ typ SOCKET s,
/*936*/ typ HWND hWnd,
/*937*/ typ u_int wMsg,
/*938*/ typ long lEvent);
/*940*/ int typ typ WSARecvEx(
/*941*/ typ SOCKET s,
/*942*/ typ typ typ typ typ typ typ typ char typ*buf,
/*943*/ typ int len,
/*944*/ typ typ int typ*flags);
/*946*/ typedef struct _TRANSMIT_FILE_BUFFERS{
/*947*/ PVOID Head;
/*948*/ DWORD HeadLength;
/*949*/ PVOID Tail;
/*950*/ DWORD TailLength;
/*951*/ }TRANSMIT_FILE_BUFFERS,*PTRANSMIT_FILE_BUFFERS,*LPTRANSMIT_FILE_BUFFERS;
/*957*/ BOOL
/*958*/ typ typ
/*959*/ TransmitFile(
/*960*/ typ SOCKET hSocket,
/*961*/ typ HANDLE hFile,
/*962*/ typ DWORD nNumberOfBytesToWrite,
/*963*/ typ DWORD nNumberOfBytesPerSend,
/*964*/ typ LPOVERLAPPED lpOverlapped,
/*965*/ typ LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
/*966*/ typ DWORD dwReserved
/*967*/ );
/*969*/ BOOL
/*970*/ typ typ
/*971*/ AcceptEx(
/*972*/ typ SOCKET sListenSocket,
/*973*/ typ SOCKET sAcceptSocket,
/*974*/ typ PVOID lpOutputBuffer,
/*975*/ typ DWORD dwReceiveDataLength,
/*976*/ typ DWORD dwLocalAddressLength,
/*977*/ typ DWORD dwRemoteAddressLength,
/*978*/ typ LPDWORD lpdwBytesReceived,
/*979*/ typ LPOVERLAPPED lpOverlapped
/*980*/ );
/*982*/ void
/*983*/ typ typ
/*984*/ GetAcceptExSockaddrs(
/*985*/ typ PVOID lpOutputBuffer,
/*986*/ typ DWORD dwReceiveDataLength,
/*987*/ typ DWORD dwLocalAddressLength,
/*988*/ typ DWORD dwRemoteAddressLength,
/*989*/ typ struct sockaddr**LocalSockaddr,
/*990*/ typ LPINT LocalSockaddrLength,
/*991*/ typ struct sockaddr**RemoteSockaddr,
/*992*/ typ LPINT RemoteSockaddrLength
/*993*/ );
/*1000*/ typedef struct sockaddr SOCKADDR;
/*1001*/ typedef struct sockaddr*PSOCKADDR;
/*1002*/ typedef struct sockaddr typ*LPSOCKADDR;
/*1004*/ typedef struct sockaddr_in SOCKADDR_IN;
/*1005*/ typedef struct sockaddr_in*PSOCKADDR_IN;
/*1006*/ typedef struct sockaddr_in typ*LPSOCKADDR_IN;
/*1008*/ typedef struct linger LINGER;
/*1009*/ typedef struct linger*PLINGER;
/*1010*/ typedef struct linger typ*LPLINGER;
/*1012*/ typedef struct fd_set FD_SET;
/*1013*/ typedef struct fd_set*PFD_SET;
/*1014*/ typedef struct fd_set typ*LPFD_SET;
/*1016*/ typedef struct hostent HOSTENT;
/*1017*/ typedef struct hostent*PHOSTENT;
/*1018*/ typedef struct hostent typ*LPHOSTENT;
/*1020*/ typedef struct servent SERVENT;
/*1021*/ typedef struct servent*PSERVENT;
/*1022*/ typedef struct servent typ*LPSERVENT;
/*1024*/ typedef struct protoent PROTOENT;
/*1025*/ typedef struct protoent*PPROTOENT;
/*1026*/ typedef struct protoent typ*LPPROTOENT;
/*1028*/ typedef struct timeval TIMEVAL;
/*1029*/ typedef struct timeval*PTIMEVAL;
/*1030*/ typedef struct timeval typ*LPTIMEVAL;
/*237*/ typedef unsigned int ALG_ID;
/*316*/ typedef ULONG_PTR HCRYPTPROV;
/*317*/ typedef ULONG_PTR HCRYPTKEY;
/*318*/ typedef ULONG_PTR HCRYPTHASH;
/*830*/ typedef struct _CMS_KEY_INFO{
/*831*/ DWORD dwVersion;
/*832*/ ALG_ID Algid;
/*833*/ BYTE*pbOID;
/*834*/ DWORD cbOID;
/*835*/ }CMS_KEY_INFO,*PCMS_KEY_INFO;
/*838*/ typedef struct _HMAC_Info{
/*839*/ ALG_ID HashAlgid;
/*840*/ BYTE*pbInnerString;
/*841*/ DWORD cbInnerString;
/*842*/ BYTE*pbOuterString;
/*843*/ DWORD cbOuterString;
/*844*/ }HMAC_INFO,*PHMAC_INFO;
/*847*/ typedef struct _SCHANNEL_ALG{
/*848*/ DWORD dwUse;
/*849*/ ALG_ID Algid;
/*850*/ DWORD cBits;
/*851*/ DWORD dwFlags;
/*852*/ DWORD dwReserved;
/*853*/ }SCHANNEL_ALG,*PSCHANNEL_ALG;
/*862*/ typedef struct _PROV_ENUMALGS{
/*863*/ ALG_ID aiAlgid;
/*864*/ DWORD dwBitLen;
/*865*/ DWORD dwNameLen;
/*866*/ CHAR szName[20];
/*867*/ }PROV_ENUMALGS;
/*870*/ typedef struct _PROV_ENUMALGS_EX{
/*871*/ ALG_ID aiAlgid;
/*872*/ DWORD dwDefaultLen;
/*873*/ DWORD dwMinLen;
/*874*/ DWORD dwMaxLen;
/*875*/ DWORD dwProtocols;
/*876*/ DWORD dwNameLen;
/*877*/ CHAR szName[20];
/*878*/ DWORD dwLongNameLen;
/*879*/ CHAR szLongName[40];
/*880*/ }PROV_ENUMALGS_EX;
/*883*/ typedef struct _PUBLICKEYSTRUC{
/*884*/ BYTE bType;
/*885*/ BYTE bVersion;
/*886*/ WORD reserved;
/*887*/ ALG_ID aiKeyAlg;
/*888*/ }BLOBHEADER,PUBLICKEYSTRUC;
/*890*/ typedef struct _RSAPUBKEY{
/*891*/ DWORD magic;
/*892*/ DWORD bitlen;
/*893*/ DWORD pubexp;
/*895*/ }RSAPUBKEY;
/*897*/ typedef struct _PUBKEY{
/*898*/ DWORD magic;
/*899*/ DWORD bitlen;
/*900*/ }DHPUBKEY,DSSPUBKEY,KEAPUBKEY,TEKPUBKEY;
/*902*/ typedef struct _DSSSEED{
/*903*/ DWORD counter;
/*904*/ BYTE seed[20];
/*905*/ }DSSSEED;
/*907*/ typedef struct _PUBKEYVER3{
/*908*/ DWORD magic;
/*909*/ DWORD bitlenP;
/*910*/ DWORD bitlenQ;
/*911*/ DWORD bitlenJ;
/*912*/ DSSSEED DSSSeed;
/*913*/ }DHPUBKEY_VER3,DSSPUBKEY_VER3;
/*915*/ typedef struct _PRIVKEYVER3{
/*916*/ DWORD magic;
/*917*/ DWORD bitlenP;
/*918*/ DWORD bitlenQ;
/*919*/ DWORD bitlenJ;
/*920*/ DWORD bitlenX;
/*921*/ DSSSEED DSSSeed;
/*922*/ }DHPRIVKEY_VER3,DSSPRIVKEY_VER3;
/*924*/ typedef struct _KEY_TYPE_SUBTYPE{
/*925*/ DWORD dwKeySpec;
/*926*/ GUID Type;
/*927*/ GUID Subtype;
/*928*/ }KEY_TYPE_SUBTYPE,*PKEY_TYPE_SUBTYPE;
/*930*/ typedef struct _CERT_FORTEZZA_DATA_PROP{
/*931*/ unsigned char SerialNumber[8];
/*932*/ int CertIndex;
/*933*/ unsigned char CertLabel[36];
/*934*/ }CERT_FORTEZZA_DATA_PROP;
/*937*/ typedef struct _CRYPT_RC4_KEY_STATE{
/*938*/ unsigned char Key[16];
/*939*/ unsigned char SBox[256];
/*940*/ unsigned char i;
/*941*/ unsigned char j;
/*942*/ }CRYPT_RC4_KEY_STATE,*PCRYPT_RC4_KEY_STATE;
/*944*/ typedef struct _CRYPT_DES_KEY_STATE{
/*945*/ unsigned char Key[8];
/*946*/ unsigned char IV[8];
/*947*/ unsigned char Feedback[8];
/*948*/ }CRYPT_DES_KEY_STATE,*PCRYPT_DES_KEY_STATE;
/*950*/ typedef struct _CRYPT_3DES_KEY_STATE{
/*951*/ unsigned char Key[24];
/*952*/ unsigned char IV[8];
/*953*/ unsigned char Feedback[8];
/*954*/ }CRYPT_3DES_KEY_STATE,*PCRYPT_3DES_KEY_STATE;
/*980*/ typedef struct _CRYPTOAPI_BLOB{
/*981*/ DWORD cbData;
/*982*/ typ typ BYTE*pbData;
/*983*/ }CRYPT_INTEGER_BLOB,*PCRYPT_INTEGER_BLOB,
/*984*/ CRYPT_UINT_BLOB,*PCRYPT_UINT_BLOB,
/*985*/ CRYPT_OBJID_BLOB,*PCRYPT_OBJID_BLOB,
/*986*/ CERT_NAME_BLOB,*PCERT_NAME_BLOB,
/*987*/ CERT_RDN_VALUE_BLOB,*PCERT_RDN_VALUE_BLOB,
/*988*/ CERT_BLOB,*PCERT_BLOB,
/*989*/ CRL_BLOB,*PCRL_BLOB,
/*990*/ DATA_BLOB,*PDATA_BLOB,
/*991*/ CRYPT_DATA_BLOB,*PCRYPT_DATA_BLOB,
/*992*/ CRYPT_HASH_BLOB,*PCRYPT_HASH_BLOB,
/*993*/ CRYPT_DIGEST_BLOB,*PCRYPT_DIGEST_BLOB,
/*994*/ CRYPT_DER_BLOB,*PCRYPT_DER_BLOB,
/*995*/ CRYPT_ATTR_BLOB,*PCRYPT_ATTR_BLOB;
/*999*/ typedef struct _CMS_DH_KEY_INFO{
/*1000*/ DWORD dwVersion;
/*1001*/ ALG_ID Algid;
/*1002*/ LPSTR pszContentEncObjId;
/*1003*/ CRYPT_DATA_BLOB PubInfo;
/*1004*/ void*pReserved;
/*1005*/ }CMS_DH_KEY_INFO,*PCMS_DH_KEY_INFO;
/*1091*/ 
/*1092*/ BOOL
/*1093*/ typ
/*1094*/ CryptReleaseContext(
/*1095*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1096*/ typ typ typ typ typ DWORD dwFlags
/*1097*/ );
/*1110*/ 
/*1111*/ BOOL
/*1112*/ typ
/*1113*/ CryptGenKey(
/*1114*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1115*/ typ typ typ typ typ ALG_ID Algid,
/*1116*/ typ typ typ typ typ DWORD dwFlags,
/*1117*/ typ typ typ typ typ HCRYPTKEY*phKey
/*1118*/ );
/*1120*/ 
/*1121*/ BOOL
/*1122*/ typ
/*1123*/ CryptDeriveKey(
/*1124*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1125*/ typ typ typ typ typ ALG_ID Algid,
/*1126*/ typ typ typ typ typ HCRYPTHASH hBaseData,
/*1127*/ typ typ typ typ typ DWORD dwFlags,
/*1128*/ typ typ typ typ typ HCRYPTKEY*phKey
/*1129*/ );
/*1131*/ 
/*1132*/ BOOL
/*1133*/ typ
/*1134*/ CryptDestroyKey(
/*1135*/ typ typ typ typ typ HCRYPTKEY hKey
/*1136*/ );
/*1139*/ 
/*1140*/ BOOL
/*1141*/ typ
/*1142*/ CryptSetKeyParam(
/*1143*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1144*/ typ typ typ typ typ DWORD dwParam,
/*1145*/ typ typ typ typ typ const BYTE*pbData,
/*1146*/ typ typ typ typ typ DWORD dwFlags
/*1147*/ );
/*1162*/ 
/*1163*/ BOOL
/*1164*/ typ
/*1165*/ CryptGetKeyParam(
/*1166*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1167*/ typ typ typ typ typ DWORD dwParam,
/*1168*/ typ typ typ typ typ typ typ BYTE*pbData,
/*1169*/ typ typ typ typ typ DWORD*pdwDataLen,
/*1170*/ typ typ typ typ typ DWORD dwFlags
/*1171*/ );
/*1174*/ 
/*1175*/ BOOL
/*1176*/ typ
/*1177*/ CryptSetHashParam(
/*1178*/ typ typ typ typ typ HCRYPTHASH hHash,
/*1179*/ typ typ typ typ typ DWORD dwParam,
/*1180*/ typ typ typ typ typ const BYTE*pbData,
/*1181*/ typ typ typ typ typ DWORD dwFlags
/*1182*/ );
/*1197*/ 
/*1198*/ BOOL
/*1199*/ typ
/*1200*/ CryptGetHashParam(
/*1201*/ typ typ typ typ typ HCRYPTHASH hHash,
/*1202*/ typ typ typ typ typ DWORD dwParam,
/*1203*/ typ typ typ typ typ typ typ BYTE*pbData,
/*1204*/ typ typ typ typ typ DWORD*pdwDataLen,
/*1205*/ typ typ typ typ typ DWORD dwFlags
/*1206*/ );
/*1209*/ 
/*1210*/ BOOL
/*1211*/ typ
/*1212*/ CryptSetProvParam(
/*1213*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1214*/ typ typ typ typ typ DWORD dwParam,
/*1215*/ typ typ typ typ typ const BYTE*pbData,
/*1216*/ typ typ typ typ typ DWORD dwFlags
/*1217*/ );
/*1232*/ 
/*1233*/ BOOL
/*1234*/ typ
/*1235*/ CryptGetProvParam(
/*1236*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1237*/ typ typ typ typ typ DWORD dwParam,
/*1238*/ typ typ typ typ typ typ typ typ typ BYTE*pbData,
/*1239*/ typ typ typ typ typ DWORD*pdwDataLen,
/*1240*/ typ typ typ typ typ DWORD dwFlags
/*1241*/ );
/*1243*/ 
/*1244*/ BOOL
/*1245*/ typ
/*1246*/ CryptGenRandom(
/*1247*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1248*/ typ typ typ typ typ DWORD dwLen,
/*1249*/ typ typ typ typ typ typ typ BYTE*pbBuffer
/*1250*/ );
/*1252*/ 
/*1253*/ BOOL
/*1254*/ typ
/*1255*/ CryptGetUserKey(
/*1256*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1257*/ typ typ typ typ typ DWORD dwKeySpec,
/*1258*/ typ typ typ typ typ HCRYPTKEY*phUserKey
/*1259*/ );
/*1261*/ 
/*1262*/ BOOL
/*1263*/ typ
/*1264*/ CryptExportKey(
/*1265*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1266*/ typ typ typ typ typ HCRYPTKEY hExpKey,
/*1267*/ typ typ typ typ typ DWORD dwBlobType,
/*1268*/ typ typ typ typ typ DWORD dwFlags,
/*1269*/ typ typ typ typ typ typ typ typ typ BYTE*pbData,
/*1270*/ typ typ typ typ typ DWORD*pdwDataLen
/*1271*/ );
/*1273*/ 
/*1274*/ BOOL
/*1275*/ typ
/*1276*/ CryptImportKey(
/*1277*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1278*/ typ typ typ typ typ typ typ const BYTE*pbData,
/*1279*/ typ typ typ typ typ DWORD dwDataLen,
/*1280*/ typ typ typ typ typ HCRYPTKEY hPubKey,
/*1281*/ typ typ typ typ typ DWORD dwFlags,
/*1282*/ typ typ typ typ typ HCRYPTKEY*phKey
/*1283*/ );
/*1285*/ 
/*1286*/ typ BOOL
/*1287*/ typ
/*1288*/ CryptEncrypt(
/*1289*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1290*/ typ typ typ typ typ HCRYPTHASH hHash,
/*1291*/ typ typ typ typ typ BOOL Final,
/*1292*/ typ typ typ typ typ DWORD dwFlags,
/*1293*/ typ typ typ typ typ typ typ typ typ typ typ BYTE*pbData,
/*1294*/ typ typ typ typ typ DWORD*pdwDataLen,
/*1295*/ typ typ typ typ typ DWORD dwBufLen
/*1296*/ );
/*1298*/ 
/*1299*/ BOOL
/*1300*/ typ
/*1301*/ CryptDecrypt(
/*1302*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1303*/ typ typ typ typ typ HCRYPTHASH hHash,
/*1304*/ typ typ typ typ typ BOOL Final,
/*1305*/ typ typ typ typ typ DWORD dwFlags,
/*1306*/ typ typ typ typ typ typ typ typ typ typ typ BYTE*pbData,
/*1307*/ typ typ typ typ typ typ typ typ typ DWORD*pdwDataLen
/*1308*/ );
/*1310*/ 
/*1311*/ BOOL
/*1312*/ typ
/*1313*/ CryptCreateHash(
/*1314*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1315*/ typ typ typ typ typ ALG_ID Algid,
/*1316*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1317*/ typ typ typ typ typ DWORD dwFlags,
/*1318*/ typ typ typ typ typ HCRYPTHASH*phHash
/*1319*/ );
/*1321*/ 
/*1322*/ BOOL
/*1323*/ typ
/*1324*/ CryptHashData(
/*1325*/ typ typ typ typ typ HCRYPTHASH hHash,
/*1326*/ typ typ typ typ typ typ typ const BYTE*pbData,
/*1327*/ typ typ typ typ typ DWORD dwDataLen,
/*1328*/ typ typ typ typ typ DWORD dwFlags
/*1329*/ );
/*1331*/ 
/*1332*/ BOOL
/*1333*/ typ
/*1334*/ CryptHashSessionKey(
/*1335*/ typ typ typ typ typ HCRYPTHASH hHash,
/*1336*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1337*/ typ typ typ typ typ DWORD dwFlags
/*1338*/ );
/*1340*/ 
/*1341*/ BOOL
/*1342*/ typ
/*1343*/ CryptDestroyHash(
/*1344*/ typ typ typ typ typ HCRYPTHASH hHash
/*1345*/ );
/*1851*/ 
/*1852*/ BOOL
/*1853*/ typ
/*1854*/ CryptContextAddRef(
/*1855*/ typ typ typ typ typ HCRYPTPROV hProv,
/*1856*/ typ typ DWORD*pdwReserved,
/*1857*/ typ typ typ typ typ DWORD dwFlags
/*1858*/ );
/*1860*/ 
/*1861*/ BOOL
/*1862*/ typ
/*1863*/ CryptDuplicateKey(
/*1864*/ typ typ typ typ typ HCRYPTKEY hKey,
/*1865*/ typ typ DWORD*pdwReserved,
/*1866*/ typ typ typ typ typ DWORD dwFlags,
/*1867*/ typ typ typ typ typ HCRYPTKEY*phKey
/*1868*/ );
/*1870*/ 
/*1871*/ BOOL
/*1872*/ typ
/*1873*/ CryptDuplicateHash(
/*1874*/ typ typ typ typ typ HCRYPTHASH hHash,
/*1875*/ typ typ DWORD*pdwReserved,
/*1876*/ typ typ typ typ typ DWORD dwFlags,
/*1877*/ typ typ typ typ typ HCRYPTHASH*phHash
/*1878*/ );
/*1887*/ BOOL
/*1888*/ 
/*1889*/ GetEncSChannel(
/*1890*/ BYTE**pData,
/*1891*/ DWORD*dwDecSize
/*1892*/ );
/*1896*/ typedef struct{
/*1897*/ DWORD dwVersion;
/*1898*/ ALG_ID algId;
/*1899*/ DWORD dwMinKeyLength;
/*1900*/ DWORD dwMaxKeyLength;
/*1901*/ DWORD dwRequiredFlags;
/*1902*/ DWORD dwDisallowedFlags;
/*1903*/ }_CRYPT_KEY_LIMITS_V01;
/*1904*/ typedef _CRYPT_KEY_LIMITS_V01 CRYPT_KEY_LIMITS,*PCRYPT_KEY_LIMITS;
/*1910*/ 
/*1911*/ BOOL
/*1912*/ typ
/*1913*/ CryptGetLocalKeyLimits(
/*1914*/ typ ALG_ID algId,
/*1915*/ typ DWORD dwFlags,
/*1916*/ typ PCRYPT_KEY_LIMITS pLimits,
/*1917*/ typ typ LPDWORD cbLimitLength);
/*"bcrypt.h"24*/ typedef typ LONG NTSTATUS,*PNTSTATUS;
/*102*/ typedef struct __BCRYPT_KEY_LENGTHS_STRUCT
/*103*/ {
/*104*/ ULONG dwMinLength;
/*105*/ ULONG dwMaxLength;
/*106*/ ULONG dwIncrement;
/*107*/ }BCRYPT_KEY_LENGTHS_STRUCT;
/*109*/ typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;
/*112*/ typedef typ struct _BCRYPT_OID
/*113*/ {
/*114*/ ULONG cbOID;
/*115*/ PUCHAR pbOID;
/*116*/ }BCRYPT_OID;
/*118*/ typedef typ struct _BCRYPT_OID_LIST
/*119*/ {
/*120*/ ULONG dwOIDCount;
/*121*/ BCRYPT_OID*pOIDs;
/*122*/ }BCRYPT_OID_LIST;
/*125*/ typedef struct _BCRYPT_PKCS1_PADDING_INFO
/*126*/ {
/*127*/ LPCWSTR pszAlgId;
/*128*/ }BCRYPT_PKCS1_PADDING_INFO;
/*130*/ typedef struct _BCRYPT_PSS_PADDING_INFO
/*131*/ {
/*132*/ LPCWSTR pszAlgId;
/*133*/ ULONG cbSalt;
/*134*/ }BCRYPT_PSS_PADDING_INFO;
/*136*/ typedef struct _BCRYPT_OAEP_PADDING_INFO
/*137*/ {
/*138*/ LPCWSTR pszAlgId;
/*139*/ PUCHAR pbLabel;
/*140*/ ULONG cbLabel;
/*141*/ }BCRYPT_OAEP_PADDING_INFO;
/*148*/ typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
/*149*/ {
/*150*/ ULONG cbSize;
/*151*/ ULONG dwInfoVersion;
/*152*/ PUCHAR pbNonce;
/*153*/ ULONG cbNonce;
/*154*/ PUCHAR pbAuthData;
/*155*/ ULONG cbAuthData;
/*156*/ PUCHAR pbTag;
/*157*/ ULONG cbTag;
/*158*/ PUCHAR pbMacContext;
/*159*/ ULONG cbMacContext;
/*160*/ ULONG cbAAD;
/*161*/ ULONGLONG cbData;
/*162*/ ULONG dwFlags;
/*163*/ }BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO,*PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
/*233*/ typedef struct _BCryptBuffer{
/*234*/ ULONG cbBuffer;
/*235*/ ULONG BufferType;
/*236*/ PVOID pvBuffer;
/*237*/ }BCryptBuffer,*PBCryptBuffer;
/*239*/ typedef struct _BCryptBufferDesc{
/*240*/ ULONG ulVersion;
/*241*/ ULONG cBuffers;
/*242*/ PBCryptBuffer pBuffers;
/*243*/ }BCryptBufferDesc,*PBCryptBufferDesc;
/*250*/ typedef PVOID BCRYPT_HANDLE;
/*251*/ typedef PVOID BCRYPT_ALG_HANDLE;
/*252*/ typedef PVOID BCRYPT_KEY_HANDLE;
/*253*/ typedef PVOID BCRYPT_HASH_HANDLE;
/*254*/ typedef PVOID BCRYPT_SECRET_HANDLE;
/*264*/ typedef struct _BCRYPT_KEY_BLOB
/*265*/ {
/*266*/ ULONG Magic;
/*267*/ }BCRYPT_KEY_BLOB;
/*286*/ typedef struct _BCRYPT_RSAKEY_BLOB
/*287*/ {
/*288*/ ULONG Magic;
/*289*/ ULONG BitLength;
/*290*/ ULONG cbPublicExp;
/*291*/ ULONG cbModulus;
/*292*/ ULONG cbPrime1;
/*293*/ ULONG cbPrime2;
/*294*/ }BCRYPT_RSAKEY_BLOB;
/*330*/ typedef struct _BCRYPT_ECCKEY_BLOB
/*331*/ {
/*332*/ ULONG dwMagic;
/*333*/ ULONG cbKey;
/*334*/ }BCRYPT_ECCKEY_BLOB,*PBCRYPT_ECCKEY_BLOB;
/*347*/ typedef struct _BCRYPT_DH_KEY_BLOB
/*348*/ {
/*349*/ ULONG dwMagic;
/*350*/ ULONG cbKey;
/*351*/ }BCRYPT_DH_KEY_BLOB,*PBCRYPT_DH_KEY_BLOB;
/*358*/ typedef typ typ struct _BCRYPT_DH_PARAMETER_HEADER
/*359*/ {
/*360*/ ULONG cbLength;
/*361*/ ULONG dwMagic;
/*362*/ ULONG cbKeyLength;
/*363*/ }BCRYPT_DH_PARAMETER_HEADER;
/*378*/ typedef struct _BCRYPT_DSA_KEY_BLOB
/*379*/ {
/*380*/ ULONG dwMagic;
/*381*/ ULONG cbKey;
/*382*/ UCHAR Count[4];
/*383*/ UCHAR Seed[20];
/*384*/ UCHAR q[20];
/*385*/ }BCRYPT_DSA_KEY_BLOB,*PBCRYPT_DSA_KEY_BLOB;
/*387*/ typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER
/*388*/ {
/*389*/ ULONG dwMagic;
/*390*/ ULONG dwVersion;
/*391*/ ULONG cbKeyData;
/*392*/ }BCRYPT_KEY_DATA_BLOB_HEADER,*PBCRYPT_KEY_DATA_BLOB_HEADER;
/*403*/ typedef struct _BCRYPT_DSA_PARAMETER_HEADER
/*404*/ {
/*405*/ ULONG cbLength;
/*406*/ ULONG dwMagic;
/*407*/ ULONG cbKeyLength;
/*408*/ UCHAR Count[4];
/*409*/ UCHAR Seed[20];
/*410*/ UCHAR q[20];
/*411*/ }BCRYPT_DSA_PARAMETER_HEADER;
/*469*/ NTSTATUS
/*470*/ typ
/*471*/ BCryptOpenAlgorithmProvider(
/*472*/ typ typ typ typ typ BCRYPT_ALG_HANDLE*phAlgorithm,
/*473*/ typ typ typ typ typ LPCWSTR pszAlgId,
/*474*/ typ typ typ typ typ typ typ LPCWSTR pszImplementation,
/*475*/ typ typ typ typ typ ULONG dwFlags);
/*477*/ typedef NTSTATUS
/*478*/ (typ*BCryptOpenAlgorithmProviderFn)(
/*479*/ typ typ typ typ typ BCRYPT_ALG_HANDLE*phAlgorithm,
/*480*/ typ typ typ typ typ LPCWSTR pszAlgId,
/*481*/ typ typ typ typ typ ULONG dwFlags);
/*495*/ typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
/*496*/ {
/*497*/ LPWSTR pszName;
/*498*/ ULONG dwClass;
/*499*/ ULONG dwFlags;
/*501*/ }BCRYPT_ALGORITHM_IDENTIFIER;
/*504*/ NTSTATUS
/*505*/ typ
/*506*/ BCryptEnumAlgorithms(
/*507*/ typ typ typ typ typ ULONG dwAlgOperations,
/*508*/ typ typ typ typ typ ULONG*pAlgCount,
/*509*/ typ typ typ typ typ BCRYPT_ALGORITHM_IDENTIFIER**ppAlgList,
/*510*/ typ typ typ typ typ ULONG dwFlags);
/*513*/ typedef struct _BCRYPT_PROVIDER_NAME
/*514*/ {
/*515*/ LPWSTR pszProviderName;
/*516*/ }BCRYPT_PROVIDER_NAME;
/*518*/ NTSTATUS
/*519*/ typ
/*520*/ BCryptEnumProviders(
/*521*/ typ typ typ typ typ LPCWSTR pszAlgId,
/*522*/ typ typ typ typ typ ULONG*pImplCount,
/*523*/ typ typ typ typ typ BCRYPT_PROVIDER_NAME**ppImplList,
/*524*/ typ typ typ typ typ ULONG dwFlags);
/*532*/ NTSTATUS
/*533*/ typ
/*534*/ BCryptGetProperty(
/*535*/ typ typ typ typ typ BCRYPT_HANDLE hObject,
/*536*/ typ typ typ typ typ LPCWSTR pszProperty,
/*537*/ typ typ typ typ typ typ typ typ typ PUCHAR pbOutput,
/*538*/ typ typ typ typ typ ULONG cbOutput,
/*539*/ typ typ typ typ typ ULONG*pcbResult,
/*540*/ typ typ typ typ typ ULONG dwFlags);
/*543*/ NTSTATUS
/*544*/ typ
/*545*/ BCryptSetProperty(
/*546*/ typ typ typ typ typ BCRYPT_HANDLE hObject,
/*547*/ typ typ typ typ typ LPCWSTR pszProperty,
/*548*/ typ typ typ typ typ typ typ PUCHAR pbInput,
/*549*/ typ typ typ typ typ ULONG cbInput,
/*550*/ typ typ typ typ typ ULONG dwFlags);
/*553*/ NTSTATUS
/*554*/ typ
/*555*/ BCryptCloseAlgorithmProvider(
/*556*/ typ typ typ typ typ BCRYPT_ALG_HANDLE hAlgorithm,
/*557*/ typ typ typ typ typ ULONG dwFlags);
/*560*/ void
/*561*/ typ
/*562*/ BCryptFreeBuffer(
/*563*/ typ PVOID pvBuffer);
/*570*/ NTSTATUS
/*571*/ typ
/*572*/ BCryptGenerateSymmetricKey(
/*573*/ typ typ typ typ typ BCRYPT_ALG_HANDLE hAlgorithm,
/*574*/ typ typ typ typ typ BCRYPT_KEY_HANDLE*phKey,
/*575*/ typ typ typ typ typ typ typ PUCHAR pbKeyObject,
/*576*/ typ typ typ typ typ ULONG cbKeyObject,
/*577*/ typ typ typ typ typ typ typ PUCHAR pbSecret,
/*578*/ typ typ typ typ typ ULONG cbSecret,
/*579*/ typ typ typ typ typ ULONG dwFlags);
/*582*/ NTSTATUS
/*583*/ typ
/*584*/ BCryptGenerateKeyPair(
/*585*/ typ typ typ typ typ BCRYPT_ALG_HANDLE hAlgorithm,
/*586*/ typ typ typ typ typ BCRYPT_KEY_HANDLE*phKey,
/*587*/ typ typ typ typ typ ULONG dwLength,
/*588*/ typ typ typ typ typ ULONG dwFlags);
/*591*/ NTSTATUS
/*592*/ typ
/*593*/ BCryptEncrypt(
/*594*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey,
/*595*/ typ typ typ typ typ typ typ PUCHAR pbInput,
/*596*/ typ typ typ typ typ ULONG cbInput,
/*597*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*598*/ typ typ typ typ typ typ typ typ typ PUCHAR pbIV,
/*599*/ typ typ typ typ typ ULONG cbIV,
/*600*/ typ typ typ typ typ typ typ typ typ PUCHAR pbOutput,
/*601*/ typ typ typ typ typ ULONG cbOutput,
/*602*/ typ typ typ typ typ ULONG*pcbResult,
/*603*/ typ typ typ typ typ ULONG dwFlags);
/*606*/ NTSTATUS
/*607*/ typ
/*608*/ BCryptDecrypt(
/*609*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey,
/*610*/ typ typ typ typ typ typ typ PUCHAR pbInput,
/*611*/ typ typ typ typ typ ULONG cbInput,
/*612*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*613*/ typ typ typ typ typ typ typ typ typ PUCHAR pbIV,
/*614*/ typ typ typ typ typ ULONG cbIV,
/*615*/ typ typ typ typ typ typ typ typ typ PUCHAR pbOutput,
/*616*/ typ typ typ typ typ ULONG cbOutput,
/*617*/ typ typ typ typ typ ULONG*pcbResult,
/*618*/ typ typ typ typ typ ULONG dwFlags);
/*621*/ NTSTATUS
/*622*/ typ
/*623*/ BCryptExportKey(
/*624*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey,
/*625*/ typ typ typ typ typ typ typ BCRYPT_KEY_HANDLE hExportKey,
/*626*/ typ typ typ typ typ LPCWSTR pszBlobType,
/*627*/ typ typ typ typ typ typ typ typ typ PUCHAR pbOutput,
/*628*/ typ typ typ typ typ ULONG cbOutput,
/*629*/ typ typ typ typ typ ULONG*pcbResult,
/*630*/ typ typ typ typ typ ULONG dwFlags);
/*633*/ NTSTATUS
/*634*/ typ
/*635*/ BCryptImportKey(
/*636*/ typ typ typ typ typ BCRYPT_ALG_HANDLE hAlgorithm,
/*637*/ typ typ typ typ typ typ typ BCRYPT_KEY_HANDLE hImportKey,
/*638*/ typ typ typ typ typ LPCWSTR pszBlobType,
/*639*/ typ typ typ typ typ BCRYPT_KEY_HANDLE*phKey,
/*640*/ typ typ typ typ typ typ typ PUCHAR pbKeyObject,
/*641*/ typ typ typ typ typ ULONG cbKeyObject,
/*642*/ typ typ typ typ typ typ typ PUCHAR pbInput,
/*643*/ typ typ typ typ typ ULONG cbInput,
/*644*/ typ typ typ typ typ ULONG dwFlags);
/*649*/ NTSTATUS
/*650*/ typ
/*651*/ BCryptImportKeyPair(
/*652*/ typ typ typ typ typ BCRYPT_ALG_HANDLE hAlgorithm,
/*653*/ typ typ typ typ typ typ typ BCRYPT_KEY_HANDLE hImportKey,
/*654*/ typ typ typ typ typ LPCWSTR pszBlobType,
/*655*/ typ typ typ typ typ BCRYPT_KEY_HANDLE*phKey,
/*656*/ typ typ typ typ typ typ typ PUCHAR pbInput,
/*657*/ typ typ typ typ typ ULONG cbInput,
/*658*/ typ typ typ typ typ ULONG dwFlags);
/*661*/ NTSTATUS
/*662*/ typ
/*663*/ BCryptDuplicateKey(
/*664*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey,
/*665*/ typ typ typ typ typ BCRYPT_KEY_HANDLE*phNewKey,
/*666*/ typ typ typ typ typ typ typ PUCHAR pbKeyObject,
/*667*/ typ typ typ typ typ ULONG cbKeyObject,
/*668*/ typ typ typ typ typ ULONG dwFlags);
/*671*/ NTSTATUS
/*672*/ typ
/*673*/ BCryptFinalizeKeyPair(
/*674*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey,
/*675*/ typ typ typ typ typ ULONG dwFlags);
/*678*/ NTSTATUS
/*679*/ typ
/*680*/ BCryptDestroyKey(
/*681*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey);
/*684*/ NTSTATUS
/*685*/ typ
/*686*/ BCryptDestroySecret(
/*687*/ typ typ typ typ typ BCRYPT_SECRET_HANDLE hSecret);
/*690*/ NTSTATUS
/*691*/ typ
/*692*/ BCryptSignHash(
/*693*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey,
/*694*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*695*/ typ typ typ typ typ typ typ PUCHAR pbInput,
/*696*/ typ typ typ typ typ ULONG cbInput,
/*697*/ typ typ typ typ typ typ typ typ typ PUCHAR pbOutput,
/*698*/ typ typ typ typ typ ULONG cbOutput,
/*699*/ typ typ typ typ typ ULONG*pcbResult,
/*700*/ typ typ typ typ typ ULONG dwFlags);
/*703*/ NTSTATUS
/*704*/ typ
/*705*/ BCryptVerifySignature(
/*706*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hKey,
/*707*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*708*/ typ typ typ typ typ typ typ PUCHAR pbHash,
/*709*/ typ typ typ typ typ ULONG cbHash,
/*710*/ typ typ typ typ typ typ typ PUCHAR pbSignature,
/*711*/ typ typ typ typ typ ULONG cbSignature,
/*712*/ typ typ typ typ typ ULONG dwFlags);
/*715*/ NTSTATUS
/*716*/ typ
/*717*/ BCryptSecretAgreement(
/*718*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hPrivKey,
/*719*/ typ typ typ typ typ BCRYPT_KEY_HANDLE hPubKey,
/*720*/ typ typ typ typ typ BCRYPT_SECRET_HANDLE*phAgreedSecret,
/*721*/ typ typ typ typ typ ULONG dwFlags);
/*724*/ NTSTATUS
/*725*/ typ
/*726*/ BCryptDeriveKey(
/*727*/ typ typ typ typ typ BCRYPT_SECRET_HANDLE hSharedSecret,
/*728*/ typ typ typ typ typ LPCWSTR pwszKDF,
/*729*/ typ typ typ typ typ typ typ BCryptBufferDesc*pParameterList,
/*730*/ typ typ typ typ typ typ typ typ typ PUCHAR pbDerivedKey,
/*731*/ typ typ typ typ typ ULONG cbDerivedKey,
/*732*/ typ typ typ typ typ ULONG*pcbResult,
/*733*/ typ typ typ typ typ ULONG dwFlags);
/*740*/ NTSTATUS
/*741*/ typ
/*742*/ BCryptCreateHash(
/*743*/ typ typ typ typ typ BCRYPT_ALG_HANDLE hAlgorithm,
/*744*/ typ typ typ typ typ BCRYPT_HASH_HANDLE*phHash,
/*745*/ typ typ typ typ typ typ typ PUCHAR pbHashObject,
/*746*/ typ typ typ typ typ ULONG cbHashObject,
/*747*/ typ typ typ typ typ typ typ typ typ PUCHAR pbSecret,
/*748*/ typ typ typ typ typ ULONG cbSecret,
/*749*/ typ typ typ typ typ ULONG dwFlags);
/*752*/ NTSTATUS
/*753*/ typ
/*754*/ BCryptHashData(
/*755*/ typ typ typ typ typ BCRYPT_HASH_HANDLE hHash,
/*756*/ typ typ typ typ typ typ typ PUCHAR pbInput,
/*757*/ typ typ typ typ typ ULONG cbInput,
/*758*/ typ typ typ typ typ ULONG dwFlags);
/*761*/ NTSTATUS
/*762*/ typ
/*763*/ BCryptFinishHash(
/*764*/ typ typ typ typ typ BCRYPT_HASH_HANDLE hHash,
/*765*/ typ typ typ typ typ typ typ PUCHAR pbOutput,
/*766*/ typ typ typ typ typ ULONG cbOutput,
/*767*/ typ typ typ typ typ ULONG dwFlags);
/*770*/ NTSTATUS
/*771*/ typ
/*772*/ BCryptDuplicateHash(
/*773*/ typ typ typ typ typ BCRYPT_HASH_HANDLE hHash,
/*774*/ typ typ typ typ typ BCRYPT_HASH_HANDLE*phNewHash,
/*775*/ typ typ typ typ typ typ typ PUCHAR pbHashObject,
/*776*/ typ typ typ typ typ ULONG cbHashObject,
/*777*/ typ typ typ typ typ ULONG dwFlags);
/*780*/ NTSTATUS
/*781*/ typ
/*782*/ BCryptDestroyHash(
/*783*/ typ typ typ typ typ BCRYPT_HASH_HANDLE hHash);
/*794*/ NTSTATUS
/*795*/ typ
/*796*/ BCryptGenRandom(
/*797*/ typ typ typ typ typ BCRYPT_ALG_HANDLE hAlgorithm,
/*798*/ typ typ typ typ typ typ typ typ typ typ typ PUCHAR pbBuffer,
/*799*/ typ typ typ typ typ ULONG cbBuffer,
/*800*/ typ typ typ typ typ ULONG dwFlags);
/*806*/ typedef struct _BCRYPT_INTERFACE_VERSION
/*807*/ {
/*808*/ USHORT MajorVersion;
/*809*/ USHORT MinorVersion;
/*811*/ }BCRYPT_INTERFACE_VERSION,*PBCRYPT_INTERFACE_VERSION;
/*891*/ typedef struct _CRYPT_INTERFACE_REG
/*892*/ {
/*893*/ ULONG dwInterface;
/*894*/ ULONG dwFlags;
/*896*/ ULONG cFunctions;
/*897*/ PWSTR*rgpszFunctions;
/*898*/ }
/*899*/ CRYPT_INTERFACE_REG,*PCRYPT_INTERFACE_REG;
/*901*/ typedef struct _CRYPT_IMAGE_REG
/*902*/ {
/*903*/ PWSTR pszImage;
/*905*/ ULONG cInterfaces;
/*906*/ PCRYPT_INTERFACE_REG*rgpInterfaces;
/*907*/ }
/*908*/ CRYPT_IMAGE_REG,*PCRYPT_IMAGE_REG;
/*910*/ typedef struct _CRYPT_PROVIDER_REG
/*911*/ {
/*912*/ ULONG cAliases;
/*913*/ PWSTR*rgpszAliases;
/*915*/ PCRYPT_IMAGE_REG pUM;
/*916*/ PCRYPT_IMAGE_REG pKM;
/*917*/ }
/*918*/ CRYPT_PROVIDER_REG,*PCRYPT_PROVIDER_REG;
/*920*/ typedef struct _CRYPT_PROVIDERS
/*921*/ {
/*922*/ ULONG cProviders;
/*923*/ PWSTR*rgpszProviders;
/*924*/ }
/*925*/ CRYPT_PROVIDERS,*PCRYPT_PROVIDERS;
/*931*/ typedef struct _CRYPT_CONTEXT_CONFIG
/*932*/ {
/*933*/ ULONG dwFlags;
/*934*/ ULONG dwReserved;
/*935*/ }
/*936*/ CRYPT_CONTEXT_CONFIG,*PCRYPT_CONTEXT_CONFIG;
/*938*/ typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG
/*939*/ {
/*940*/ ULONG dwFlags;
/*941*/ ULONG dwReserved;
/*942*/ }
/*943*/ CRYPT_CONTEXT_FUNCTION_CONFIG,*PCRYPT_CONTEXT_FUNCTION_CONFIG;
/*945*/ typedef struct _CRYPT_CONTEXTS
/*946*/ {
/*947*/ ULONG cContexts;
/*948*/ PWSTR*rgpszContexts;
/*949*/ }
/*950*/ CRYPT_CONTEXTS,*PCRYPT_CONTEXTS;
/*952*/ typedef struct _CRYPT_CONTEXT_FUNCTIONS
/*953*/ {
/*954*/ ULONG cFunctions;
/*955*/ PWSTR*rgpszFunctions;
/*956*/ }
/*957*/ CRYPT_CONTEXT_FUNCTIONS,*PCRYPT_CONTEXT_FUNCTIONS;
/*959*/ typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
/*960*/ {
/*961*/ ULONG cProviders;
/*962*/ PWSTR*rgpszProviders;
/*963*/ }
/*964*/ CRYPT_CONTEXT_FUNCTION_PROVIDERS,*PCRYPT_CONTEXT_FUNCTION_PROVIDERS;
/*970*/ typedef struct _CRYPT_PROPERTY_REF
/*971*/ {
/*972*/ PWSTR pszProperty;
/*974*/ ULONG cbValue;
/*975*/ PUCHAR pbValue;
/*976*/ }
/*977*/ CRYPT_PROPERTY_REF,*PCRYPT_PROPERTY_REF;
/*979*/ typedef struct _CRYPT_IMAGE_REF
/*980*/ {
/*981*/ PWSTR pszImage;
/*982*/ ULONG dwFlags;
/*983*/ }
/*984*/ CRYPT_IMAGE_REF,*PCRYPT_IMAGE_REF;
/*986*/ typedef struct _CRYPT_PROVIDER_REF
/*987*/ {
/*988*/ ULONG dwInterface;
/*989*/ PWSTR pszFunction;
/*990*/ PWSTR pszProvider;
/*992*/ ULONG cProperties;
/*993*/ PCRYPT_PROPERTY_REF*rgpProperties;
/*995*/ PCRYPT_IMAGE_REF pUM;
/*996*/ PCRYPT_IMAGE_REF pKM;
/*997*/ }
/*998*/ CRYPT_PROVIDER_REF,*PCRYPT_PROVIDER_REF;
/*1000*/ typedef struct _CRYPT_PROVIDER_REFS
/*1001*/ {
/*1002*/ ULONG cProviders;
/*1003*/ PCRYPT_PROVIDER_REF*rgpProviders;
/*1004*/ }
/*1005*/ CRYPT_PROVIDER_REFS,*PCRYPT_PROVIDER_REFS;
/*1014*/ NTSTATUS
/*1015*/ typ
/*1016*/ BCryptQueryProviderRegistration(
/*1017*/ typ typ typ typ typ LPCWSTR pszProvider,
/*1018*/ typ typ typ typ typ ULONG dwMode,
/*1019*/ typ typ typ typ typ ULONG dwInterface,
/*1020*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1021*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_PROVIDER_REG*ppBuffer);
/*1023*/ NTSTATUS
/*1024*/ typ
/*1025*/ BCryptEnumRegisteredProviders(
/*1026*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1027*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_PROVIDERS*ppBuffer);
/*1033*/ NTSTATUS
/*1034*/ typ
/*1035*/ BCryptCreateContext(
/*1036*/ typ typ typ typ typ ULONG dwTable,
/*1037*/ typ typ typ typ typ LPCWSTR pszContext,
/*1038*/ typ typ typ typ typ typ typ PCRYPT_CONTEXT_CONFIG pConfig);
/*1040*/ NTSTATUS
/*1041*/ typ
/*1042*/ BCryptDeleteContext(
/*1043*/ typ typ typ typ typ ULONG dwTable,
/*1044*/ typ typ typ typ typ LPCWSTR pszContext);
/*1046*/ NTSTATUS
/*1047*/ typ
/*1048*/ BCryptEnumContexts(
/*1049*/ typ typ typ typ typ ULONG dwTable,
/*1050*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1051*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_CONTEXTS*ppBuffer);
/*1053*/ NTSTATUS
/*1054*/ typ
/*1055*/ BCryptConfigureContext(
/*1056*/ typ typ typ typ typ ULONG dwTable,
/*1057*/ typ typ typ typ typ LPCWSTR pszContext,
/*1058*/ typ typ typ typ typ PCRYPT_CONTEXT_CONFIG pConfig);
/*1060*/ NTSTATUS
/*1061*/ typ
/*1062*/ BCryptQueryContextConfiguration(
/*1063*/ typ typ typ typ typ ULONG dwTable,
/*1064*/ typ typ typ typ typ LPCWSTR pszContext,
/*1065*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1066*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_CONTEXT_CONFIG*ppBuffer);
/*1068*/ NTSTATUS
/*1069*/ typ
/*1070*/ BCryptAddContextFunction(
/*1071*/ typ typ typ typ typ ULONG dwTable,
/*1072*/ typ typ typ typ typ LPCWSTR pszContext,
/*1073*/ typ typ typ typ typ ULONG dwInterface,
/*1074*/ typ typ typ typ typ LPCWSTR pszFunction,
/*1075*/ typ typ typ typ typ ULONG dwPosition);
/*1077*/ NTSTATUS
/*1078*/ typ
/*1079*/ BCryptRemoveContextFunction(
/*1080*/ typ typ typ typ typ ULONG dwTable,
/*1081*/ typ typ typ typ typ LPCWSTR pszContext,
/*1082*/ typ typ typ typ typ ULONG dwInterface,
/*1083*/ typ typ typ typ typ LPCWSTR pszFunction);
/*1085*/ NTSTATUS
/*1086*/ typ
/*1087*/ BCryptEnumContextFunctions(
/*1088*/ typ typ typ typ typ ULONG dwTable,
/*1089*/ typ typ typ typ typ LPCWSTR pszContext,
/*1090*/ typ typ typ typ typ ULONG dwInterface,
/*1091*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1092*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_CONTEXT_FUNCTIONS*ppBuffer);
/*1094*/ NTSTATUS
/*1095*/ typ
/*1096*/ BCryptConfigureContextFunction(
/*1097*/ typ typ typ typ typ ULONG dwTable,
/*1098*/ typ typ typ typ typ LPCWSTR pszContext,
/*1099*/ typ typ typ typ typ ULONG dwInterface,
/*1100*/ typ typ typ typ typ LPCWSTR pszFunction,
/*1101*/ typ typ typ typ typ PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
/*1103*/ NTSTATUS
/*1104*/ typ
/*1105*/ BCryptQueryContextFunctionConfiguration(
/*1106*/ typ typ typ typ typ ULONG dwTable,
/*1107*/ typ typ typ typ typ LPCWSTR pszContext,
/*1108*/ typ typ typ typ typ ULONG dwInterface,
/*1109*/ typ typ typ typ typ LPCWSTR pszFunction,
/*1110*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1111*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_CONTEXT_FUNCTION_CONFIG*ppBuffer);
/*1114*/ NTSTATUS
/*1115*/ typ
/*1116*/ BCryptEnumContextFunctionProviders(
/*1117*/ typ typ typ typ typ ULONG dwTable,
/*1118*/ typ typ typ typ typ LPCWSTR pszContext,
/*1119*/ typ typ typ typ typ ULONG dwInterface,
/*1120*/ typ typ typ typ typ LPCWSTR pszFunction,
/*1121*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1122*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_CONTEXT_FUNCTION_PROVIDERS*ppBuffer);
/*1124*/ NTSTATUS
/*1125*/ typ
/*1126*/ BCryptSetContextFunctionProperty(
/*1127*/ typ typ typ typ typ ULONG dwTable,
/*1128*/ typ typ typ typ typ LPCWSTR pszContext,
/*1129*/ typ typ typ typ typ ULONG dwInterface,
/*1130*/ typ typ typ typ typ LPCWSTR pszFunction,
/*1131*/ typ typ typ typ typ LPCWSTR pszProperty,
/*1132*/ typ typ typ typ typ ULONG cbValue,
/*1133*/ typ typ typ typ typ typ typ typ typ PUCHAR pbValue);
/*1135*/ NTSTATUS
/*1136*/ typ
/*1137*/ BCryptQueryContextFunctionProperty(
/*1138*/ typ typ typ typ typ ULONG dwTable,
/*1139*/ typ typ typ typ typ LPCWSTR pszContext,
/*1140*/ typ typ typ typ typ ULONG dwInterface,
/*1141*/ typ typ typ typ typ LPCWSTR pszFunction,
/*1142*/ typ typ typ typ typ LPCWSTR pszProperty,
/*1143*/ typ typ typ typ typ ULONG*pcbValue,
/*1144*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PUCHAR*ppbValue);
/*1158*/ NTSTATUS
/*1159*/ typ
/*1160*/ BCryptRegisterConfigChangeNotify(
/*1161*/ typ typ typ typ typ HANDLE*phEvent);
/*1170*/ NTSTATUS
/*1171*/ typ
/*1172*/ BCryptUnregisterConfigChangeNotify(
/*1173*/ typ typ typ typ typ HANDLE hEvent);
/*1180*/ NTSTATUS typ
/*1181*/ BCryptResolveProviders(
/*1182*/ typ typ typ typ typ typ typ LPCWSTR pszContext,
/*1183*/ typ typ typ typ typ typ typ ULONG dwInterface,
/*1184*/ typ typ typ typ typ typ typ LPCWSTR pszFunction,
/*1185*/ typ typ typ typ typ typ typ LPCWSTR pszProvider,
/*1186*/ typ typ typ typ typ ULONG dwMode,
/*1187*/ typ typ typ typ typ ULONG dwFlags,
/*1188*/ typ typ typ typ typ ULONG*pcbBuffer,
/*1189*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRYPT_PROVIDER_REFS*ppBuffer);
/*1196*/ NTSTATUS
/*1197*/ typ
/*1198*/ BCryptGetFipsAlgorithmMode(
/*1199*/ typ typ typ typ typ BOOLEAN*pfEnabled
/*1200*/ );
/*24*/ typedef LONG SECURITY_STATUS;
/*111*/ typedef BCryptBuffer NCryptBuffer;
/*112*/ typedef BCryptBuffer*PNCryptBuffer;
/*113*/ typedef BCryptBufferDesc NCryptBufferDesc;
/*114*/ typedef BCryptBufferDesc*PNCryptBufferDesc;
/*120*/ typedef ULONG_PTR NCRYPT_HANDLE;
/*121*/ typedef ULONG_PTR NCRYPT_PROV_HANDLE;
/*122*/ typedef ULONG_PTR NCRYPT_KEY_HANDLE;
/*123*/ typedef ULONG_PTR NCRYPT_HASH_HANDLE;
/*124*/ typedef ULONG_PTR NCRYPT_SECRET_HANDLE;
/*151*/ SECURITY_STATUS
/*152*/ typ
/*153*/ NCryptOpenStorageProvider(
/*154*/ typ typ typ typ typ NCRYPT_PROV_HANDLE*phProvider,
/*155*/ typ typ typ typ typ typ typ LPCWSTR pszProviderName,
/*156*/ typ typ typ typ typ DWORD dwFlags);
/*171*/ typedef struct _NCryptAlgorithmName
/*172*/ {
/*173*/ LPWSTR pszName;
/*174*/ DWORD dwClass;
/*175*/ DWORD dwAlgOperations;
/*176*/ DWORD dwFlags;
/*177*/ }NCryptAlgorithmName;
/*180*/ SECURITY_STATUS
/*181*/ typ
/*182*/ NCryptEnumAlgorithms(
/*183*/ typ typ typ typ typ NCRYPT_PROV_HANDLE hProvider,
/*184*/ typ typ typ typ typ DWORD dwAlgOperations,
/*185*/ typ typ typ typ typ DWORD*pdwAlgCount,
/*186*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ NCryptAlgorithmName**ppAlgList,
/*187*/ typ typ typ typ typ DWORD dwFlags);
/*191*/ SECURITY_STATUS
/*192*/ typ
/*193*/ NCryptIsAlgSupported(
/*194*/ typ typ typ typ typ NCRYPT_PROV_HANDLE hProvider,
/*195*/ typ typ typ typ typ LPCWSTR pszAlgId,
/*196*/ typ typ typ typ typ DWORD dwFlags);
/*203*/ typedef struct NCryptKeyName
/*204*/ {
/*205*/ LPWSTR pszName;
/*206*/ LPWSTR pszAlgid;
/*207*/ DWORD dwLegacyKeySpec;
/*208*/ DWORD dwFlags;
/*209*/ }NCryptKeyName;
/*211*/ SECURITY_STATUS
/*212*/ typ
/*213*/ NCryptEnumKeys(
/*214*/ typ typ typ typ typ NCRYPT_PROV_HANDLE hProvider,
/*215*/ typ typ typ typ typ typ typ LPCWSTR pszScope,
/*216*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ NCryptKeyName**ppKeyName,
/*217*/ typ typ typ typ typ PVOID*ppEnumState,
/*218*/ typ typ typ typ typ DWORD dwFlags);
/*222*/ typedef struct NCryptProviderName
/*223*/ {
/*224*/ LPWSTR pszName;
/*225*/ LPWSTR pszComment;
/*226*/ }NCryptProviderName;
/*228*/ SECURITY_STATUS
/*229*/ typ
/*230*/ NCryptEnumStorageProviders(
/*231*/ typ typ typ typ typ DWORD*pdwProviderCount,
/*232*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ NCryptProviderName**ppProviderList,
/*233*/ typ typ typ typ typ DWORD dwFlags);
/*237*/ SECURITY_STATUS
/*238*/ typ
/*239*/ NCryptFreeBuffer(
/*240*/ typ PVOID pvInput);
/*248*/ SECURITY_STATUS
/*249*/ typ
/*250*/ NCryptOpenKey(
/*251*/ typ typ typ typ typ NCRYPT_PROV_HANDLE hProvider,
/*252*/ typ typ typ typ typ NCRYPT_KEY_HANDLE*phKey,
/*253*/ typ typ typ typ typ LPCWSTR pszKeyName,
/*254*/ typ typ typ typ typ typ typ DWORD dwLegacyKeySpec,
/*255*/ typ typ typ typ typ DWORD dwFlags);
/*263*/ SECURITY_STATUS
/*264*/ typ
/*265*/ NCryptCreatePersistedKey(
/*266*/ typ typ typ typ typ NCRYPT_PROV_HANDLE hProvider,
/*267*/ typ typ typ typ typ NCRYPT_KEY_HANDLE*phKey,
/*268*/ typ typ typ typ typ LPCWSTR pszAlgId,
/*269*/ typ typ typ typ typ typ typ LPCWSTR pszKeyName,
/*270*/ typ typ typ typ typ DWORD dwLegacyKeySpec,
/*271*/ typ typ typ typ typ DWORD dwFlags);
/*336*/ typedef struct __NCRYPT_UI_POLICY_BLOB
/*337*/ {
/*338*/ DWORD dwVersion;
/*339*/ DWORD dwFlags;
/*340*/ DWORD cbCreationTitle;
/*341*/ DWORD cbFriendlyName;
/*342*/ DWORD cbDescription;
/*346*/ }NCRYPT_UI_POLICY_BLOB;
/*348*/ typedef struct __NCRYPT_UI_POLICY
/*349*/ {
/*350*/ DWORD dwVersion;
/*351*/ DWORD dwFlags;
/*352*/ LPCWSTR pszCreationTitle;
/*353*/ LPCWSTR pszFriendlyName;
/*354*/ LPCWSTR pszDescription;
/*355*/ }NCRYPT_UI_POLICY;
/*359*/ typedef struct __NCRYPT_SUPPORTED_LENGTHS
/*360*/ {
/*361*/ DWORD dwMinLength;
/*362*/ DWORD dwMaxLength;
/*363*/ DWORD dwIncrement;
/*364*/ DWORD dwDefaultLength;
/*365*/ }NCRYPT_SUPPORTED_LENGTHS;
/*370*/ SECURITY_STATUS
/*371*/ typ
/*372*/ NCryptGetProperty(
/*373*/ typ typ typ typ typ NCRYPT_HANDLE hObject,
/*374*/ typ typ typ typ typ LPCWSTR pszProperty,
/*375*/ typ typ typ typ typ typ typ typ typ PBYTE pbOutput,
/*376*/ typ typ typ typ typ DWORD cbOutput,
/*377*/ typ typ typ typ typ DWORD*pcbResult,
/*378*/ typ typ typ typ typ DWORD dwFlags);
/*386*/ SECURITY_STATUS
/*387*/ typ
/*388*/ NCryptSetProperty(
/*389*/ typ typ typ typ typ NCRYPT_HANDLE hObject,
/*390*/ typ typ typ typ typ LPCWSTR pszProperty,
/*391*/ typ typ typ typ typ typ typ PBYTE pbInput,
/*392*/ typ typ typ typ typ DWORD cbInput,
/*393*/ typ typ typ typ typ DWORD dwFlags);
/*399*/ SECURITY_STATUS
/*400*/ typ
/*401*/ NCryptFinalizeKey(
/*402*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*403*/ typ typ typ typ typ DWORD dwFlags);
/*407*/ SECURITY_STATUS
/*408*/ typ
/*409*/ NCryptEncrypt(
/*410*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*411*/ typ typ typ typ typ typ typ PBYTE pbInput,
/*412*/ typ typ typ typ typ DWORD cbInput,
/*413*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*414*/ typ typ typ typ typ typ typ typ typ PBYTE pbOutput,
/*415*/ typ typ typ typ typ DWORD cbOutput,
/*416*/ typ typ typ typ typ DWORD*pcbResult,
/*417*/ typ typ typ typ typ DWORD dwFlags);
/*421*/ SECURITY_STATUS
/*422*/ typ
/*423*/ NCryptDecrypt(
/*424*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*425*/ typ typ typ typ typ typ typ PBYTE pbInput,
/*426*/ typ typ typ typ typ DWORD cbInput,
/*427*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*428*/ typ typ typ typ typ typ typ typ typ PBYTE pbOutput,
/*429*/ typ typ typ typ typ DWORD cbOutput,
/*430*/ typ typ typ typ typ DWORD*pcbResult,
/*431*/ typ typ typ typ typ DWORD dwFlags);
/*443*/ SECURITY_STATUS
/*444*/ typ
/*445*/ NCryptImportKey(
/*446*/ typ typ typ typ typ NCRYPT_PROV_HANDLE hProvider,
/*447*/ typ typ typ typ typ typ typ NCRYPT_KEY_HANDLE hImportKey,
/*448*/ typ typ typ typ typ LPCWSTR pszBlobType,
/*449*/ typ typ typ typ typ typ typ NCryptBufferDesc*pParameterList,
/*450*/ typ typ typ typ typ NCRYPT_KEY_HANDLE*phKey,
/*451*/ typ typ typ typ typ typ typ PBYTE pbData,
/*452*/ typ typ typ typ typ DWORD cbData,
/*453*/ typ typ typ typ typ DWORD dwFlags);
/*457*/ SECURITY_STATUS
/*458*/ typ
/*459*/ NCryptExportKey(
/*460*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*461*/ typ typ typ typ typ typ typ NCRYPT_KEY_HANDLE hExportKey,
/*462*/ typ typ typ typ typ LPCWSTR pszBlobType,
/*463*/ typ typ typ typ typ typ typ NCryptBufferDesc*pParameterList,
/*464*/ typ typ typ typ typ typ typ typ typ PBYTE pbOutput,
/*465*/ typ typ typ typ typ DWORD cbOutput,
/*466*/ typ typ typ typ typ DWORD*pcbResult,
/*467*/ typ typ typ typ typ DWORD dwFlags);
/*471*/ SECURITY_STATUS
/*472*/ typ
/*473*/ NCryptSignHash(
/*474*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*475*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*476*/ typ typ typ typ typ typ typ PBYTE pbHashValue,
/*477*/ typ typ typ typ typ DWORD cbHashValue,
/*478*/ typ typ typ typ typ typ typ typ typ PBYTE pbSignature,
/*479*/ typ typ typ typ typ DWORD cbSignature,
/*480*/ typ typ typ typ typ DWORD*pcbResult,
/*481*/ typ typ typ typ typ DWORD dwFlags);
/*485*/ SECURITY_STATUS
/*486*/ typ
/*487*/ NCryptVerifySignature(
/*488*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*489*/ typ typ typ typ typ typ typ void*pPaddingInfo,
/*490*/ typ typ typ typ typ typ typ PBYTE pbHashValue,
/*491*/ typ typ typ typ typ DWORD cbHashValue,
/*492*/ typ typ typ typ typ typ typ PBYTE pbSignature,
/*493*/ typ typ typ typ typ DWORD cbSignature,
/*494*/ typ typ typ typ typ DWORD dwFlags);
/*498*/ SECURITY_STATUS
/*499*/ typ
/*500*/ NCryptDeleteKey(
/*501*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*502*/ typ typ typ typ typ DWORD dwFlags);
/*506*/ SECURITY_STATUS
/*507*/ typ
/*508*/ NCryptFreeObject(
/*509*/ typ typ typ typ typ NCRYPT_HANDLE hObject);
/*513*/ BOOL
/*514*/ typ
/*515*/ NCryptIsKeyHandle(
/*516*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey);
/*518*/ SECURITY_STATUS
/*519*/ typ
/*520*/ NCryptTranslateHandle(
/*521*/ typ typ typ typ typ typ typ NCRYPT_PROV_HANDLE*phProvider,
/*522*/ typ typ typ typ typ NCRYPT_KEY_HANDLE*phKey,
/*523*/ typ typ typ typ typ HCRYPTPROV hLegacyProv,
/*524*/ typ typ typ typ typ typ typ HCRYPTKEY hLegacyKey,
/*525*/ typ typ typ typ typ typ typ DWORD dwLegacyKeySpec,
/*526*/ typ typ typ typ typ DWORD dwFlags);
/*535*/ SECURITY_STATUS
/*536*/ typ
/*537*/ NCryptNotifyChangeKey(
/*538*/ typ typ typ typ typ NCRYPT_PROV_HANDLE hProvider,
/*539*/ typ typ typ typ typ HANDLE*phEvent,
/*540*/ typ typ typ typ typ DWORD dwFlags);
/*544*/ SECURITY_STATUS
/*545*/ typ
/*546*/ NCryptSecretAgreement(
/*547*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hPrivKey,
/*548*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hPubKey,
/*549*/ typ typ typ typ typ NCRYPT_SECRET_HANDLE*phAgreedSecret,
/*550*/ typ typ typ typ typ DWORD dwFlags);
/*554*/ SECURITY_STATUS
/*555*/ typ
/*556*/ NCryptDeriveKey(
/*557*/ typ typ typ typ typ NCRYPT_SECRET_HANDLE hSharedSecret,
/*558*/ typ typ typ typ typ LPCWSTR pwszKDF,
/*559*/ typ typ typ typ typ typ typ NCryptBufferDesc*pParameterList,
/*560*/ typ typ typ typ typ typ typ typ typ PBYTE pbDerivedKey,
/*561*/ typ typ typ typ typ DWORD cbDerivedKey,
/*562*/ typ typ typ typ typ DWORD*pcbResult,
/*563*/ typ typ typ typ typ ULONG dwFlags);
/*"wincrypt.h"1933*/ typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
/*1937*/ typedef ULONG_PTR HCRYPTPROV_LEGACY;
/*1944*/ typedef struct _CRYPT_BIT_BLOB{
/*1945*/ DWORD cbData;
/*1946*/ BYTE*pbData;
/*1947*/ DWORD cUnusedBits;
/*1948*/ }CRYPT_BIT_BLOB,*PCRYPT_BIT_BLOB;
/*1956*/ typedef struct _CRYPT_ALGORITHM_IDENTIFIER{
/*1957*/ LPSTR pszObjId;
/*1958*/ CRYPT_OBJID_BLOB Parameters;
/*1959*/ }CRYPT_ALGORITHM_IDENTIFIER,*PCRYPT_ALGORITHM_IDENTIFIER;
/*2189*/ typedef struct _CRYPT_OBJID_TABLE{
/*2190*/ DWORD dwAlgId;
/*2191*/ LPCSTR pszObjId;
/*2192*/ }CRYPT_OBJID_TABLE,*PCRYPT_OBJID_TABLE;
/*2198*/ typedef struct _CRYPT_HASH_INFO{
/*2199*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*2200*/ CRYPT_HASH_BLOB Hash;
/*2201*/ }CRYPT_HASH_INFO,*PCRYPT_HASH_INFO;
/*2209*/ typedef struct _CERT_EXTENSION{
/*2210*/ LPSTR pszObjId;
/*2211*/ BOOL fCritical;
/*2212*/ CRYPT_OBJID_BLOB Value;
/*2213*/ }CERT_EXTENSION,*PCERT_EXTENSION;
/*2222*/ typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE{
/*2223*/ LPSTR pszObjId;
/*2224*/ CRYPT_OBJID_BLOB Value;
/*2225*/ }CRYPT_ATTRIBUTE_TYPE_VALUE,*PCRYPT_ATTRIBUTE_TYPE_VALUE;
/*2234*/ typedef struct _CRYPT_ATTRIBUTE{
/*2235*/ LPSTR pszObjId;
/*2236*/ DWORD cValue;
/*2237*/ PCRYPT_ATTR_BLOB rgValue;
/*2238*/ }CRYPT_ATTRIBUTE,*PCRYPT_ATTRIBUTE;
/*2240*/ typedef struct _CRYPT_ATTRIBUTES{
/*2241*/ DWORD cAttr;
/*2242*/ PCRYPT_ATTRIBUTE rgAttr;
/*2243*/ }CRYPT_ATTRIBUTES,*PCRYPT_ATTRIBUTES;
/*2252*/ typedef struct _CERT_RDN_ATTR{
/*2253*/ LPSTR pszObjId;
/*2254*/ DWORD dwValueType;
/*2255*/ CERT_RDN_VALUE_BLOB Value;
/*2256*/ }CERT_RDN_ATTR,*PCERT_RDN_ATTR;
/*2422*/ typedef struct _CERT_RDN{
/*2423*/ DWORD cRDNAttr;
/*2424*/ PCERT_RDN_ATTR rgRDNAttr;
/*2425*/ }CERT_RDN,*PCERT_RDN;
/*2431*/ typedef struct _CERT_NAME_INFO{
/*2432*/ DWORD cRDN;
/*2433*/ PCERT_RDN rgRDN;
/*2434*/ }CERT_NAME_INFO,*PCERT_NAME_INFO;
/*2442*/ typedef struct _CERT_NAME_VALUE{
/*2443*/ DWORD dwValueType;
/*2444*/ CERT_RDN_VALUE_BLOB Value;
/*2445*/ }CERT_NAME_VALUE,*PCERT_NAME_VALUE;
/*2454*/ typedef struct _CERT_PUBLIC_KEY_INFO{
/*2455*/ CRYPT_ALGORITHM_IDENTIFIER Algorithm;
/*2456*/ CRYPT_BIT_BLOB PublicKey;
/*2457*/ }CERT_PUBLIC_KEY_INFO,*PCERT_PUBLIC_KEY_INFO;
/*2468*/ typedef struct _CRYPT_PRIVATE_KEY_INFO{
/*2469*/ DWORD Version;
/*2470*/ CRYPT_ALGORITHM_IDENTIFIER Algorithm;
/*2471*/ CRYPT_DER_BLOB PrivateKey;
/*2472*/ PCRYPT_ATTRIBUTES pAttributes;
/*2473*/ }CRYPT_PRIVATE_KEY_INFO,*PCRYPT_PRIVATE_KEY_INFO;
/*2479*/ typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
/*2480*/ CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
/*2481*/ CRYPT_DATA_BLOB EncryptedPrivateKey;
/*2482*/ }CRYPT_ENCRYPTED_PRIVATE_KEY_INFO,*PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
/*2500*/ typedef BOOL(typ*PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
/*2501*/ typ typ typ typ typ CRYPT_ALGORITHM_IDENTIFIER Algorithm,
/*2502*/ typ typ typ typ typ CRYPT_DATA_BLOB EncryptedPrivateKey,
/*2503*/ __out_bcount_opt(*pcbClearTextKey)BYTE*pbClearTextKey,
/*2504*/ typ typ typ typ typ DWORD*pcbClearTextKey,
/*2505*/ typ typ typ typ typ LPVOID pVoidDecryptFunc);
/*2523*/ typedef BOOL(typ*PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
/*2524*/ typ typ typ typ typ CRYPT_ALGORITHM_IDENTIFIER*pAlgorithm,
/*2525*/ typ typ typ typ typ CRYPT_DATA_BLOB*pClearTextPrivateKey,
/*2526*/ __out_bcount_opt(*pcbEncryptedKey)BYTE*pbEncryptedKey,
/*2527*/ typ typ typ typ typ DWORD*pcbEncryptedKey,
/*2528*/ typ typ typ typ typ LPVOID pVoidEncryptFunc);
/*2542*/ typedef BOOL(typ*PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
/*2543*/ CRYPT_PRIVATE_KEY_INFO*pPrivateKeyInfo,
/*2544*/ HCRYPTPROV*phCryptProv,
/*2545*/ LPVOID pVoidResolveFunc);
/*2556*/ typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
/*2557*/ CRYPT_DIGEST_BLOB PrivateKey;
/*2558*/ PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
/*2559*/ LPVOID pVoidResolveFunc;
/*2560*/ PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
/*2561*/ LPVOID pVoidDecryptFunc;
/*2562*/ }CRYPT_PKCS8_IMPORT_PARAMS,*PCRYPT_PKCS8_IMPORT_PARAMS,CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS,*PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
/*2572*/ typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
/*2573*/ HCRYPTPROV hCryptProv;
/*2574*/ DWORD dwKeySpec;
/*2575*/ LPSTR pszPrivateKeyObjId;
/*2577*/ PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
/*2578*/ LPVOID pVoidEncryptFunc;
/*2579*/ }CRYPT_PKCS8_EXPORT_PARAMS,*PCRYPT_PKCS8_EXPORT_PARAMS;
/*2588*/ typedef struct _CERT_INFO{
/*2589*/ DWORD dwVersion;
/*2590*/ CRYPT_INTEGER_BLOB SerialNumber;
/*2591*/ CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
/*2592*/ CERT_NAME_BLOB Issuer;
/*2593*/ FILETIME NotBefore;
/*2594*/ FILETIME NotAfter;
/*2595*/ CERT_NAME_BLOB Subject;
/*2596*/ CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
/*2597*/ CRYPT_BIT_BLOB IssuerUniqueId;
/*2598*/ CRYPT_BIT_BLOB SubjectUniqueId;
/*2599*/ DWORD cExtension;
/*2600*/ PCERT_EXTENSION rgExtension;
/*2601*/ }CERT_INFO,*PCERT_INFO;
/*2631*/ typedef struct _CRL_ENTRY{
/*2632*/ CRYPT_INTEGER_BLOB SerialNumber;
/*2633*/ FILETIME RevocationDate;
/*2634*/ DWORD cExtension;
/*2635*/ PCERT_EXTENSION rgExtension;
/*2636*/ }CRL_ENTRY,*PCRL_ENTRY;
/*2644*/ typedef struct _CRL_INFO{
/*2645*/ DWORD dwVersion;
/*2646*/ CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
/*2647*/ CERT_NAME_BLOB Issuer;
/*2648*/ FILETIME ThisUpdate;
/*2649*/ FILETIME NextUpdate;
/*2650*/ DWORD cCRLEntry;
/*2651*/ PCRL_ENTRY rgCRLEntry;
/*2652*/ DWORD cExtension;
/*2653*/ PCERT_EXTENSION rgExtension;
/*2654*/ }CRL_INFO,*PCRL_INFO;
/*2669*/ typedef struct _CERT_REQUEST_INFO{
/*2670*/ DWORD dwVersion;
/*2671*/ CERT_NAME_BLOB Subject;
/*2672*/ CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
/*2673*/ DWORD cAttribute;
/*2674*/ PCRYPT_ATTRIBUTE rgAttribute;
/*2675*/ }CERT_REQUEST_INFO,*PCERT_REQUEST_INFO;
/*2685*/ typedef struct _CERT_KEYGEN_REQUEST_INFO{
/*2686*/ DWORD dwVersion;
/*2687*/ CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
/*2688*/ LPWSTR pwszChallengeString;
/*2689*/ }CERT_KEYGEN_REQUEST_INFO,*PCERT_KEYGEN_REQUEST_INFO;
/*2701*/ typedef struct _CERT_SIGNED_CONTENT_INFO{
/*2702*/ CRYPT_DER_BLOB ToBeSigned;
/*2703*/ CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
/*2704*/ CRYPT_BIT_BLOB Signature;
/*2705*/ }CERT_SIGNED_CONTENT_INFO,*PCERT_SIGNED_CONTENT_INFO;
/*2715*/ typedef struct _CTL_USAGE{
/*2716*/ DWORD cUsageIdentifier;
/*2717*/ LPSTR*rgpszUsageIdentifier;
/*2718*/ }CTL_USAGE,*PCTL_USAGE,
/*2719*/ CERT_ENHKEY_USAGE,*PCERT_ENHKEY_USAGE;
/*2725*/ typedef struct _CTL_ENTRY{
/*2726*/ CRYPT_DATA_BLOB SubjectIdentifier;
/*2727*/ DWORD cAttribute;
/*2728*/ PCRYPT_ATTRIBUTE rgAttribute;
/*2729*/ }CTL_ENTRY,*PCTL_ENTRY;
/*2734*/ typedef struct _CTL_INFO{
/*2735*/ DWORD dwVersion;
/*2736*/ CTL_USAGE SubjectUsage;
/*2737*/ CRYPT_DATA_BLOB ListIdentifier;
/*2738*/ CRYPT_INTEGER_BLOB SequenceNumber;
/*2739*/ FILETIME ThisUpdate;
/*2740*/ FILETIME NextUpdate;
/*2741*/ CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
/*2742*/ DWORD cCTLEntry;
/*2743*/ PCTL_ENTRY rgCTLEntry;
/*2744*/ DWORD cExtension;
/*2745*/ PCERT_EXTENSION rgExtension;
/*2746*/ }CTL_INFO,*PCTL_INFO;
/*2761*/ typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO{
/*2762*/ LPSTR pszTimeStampAlgorithm;
/*2763*/ LPSTR pszContentType;
/*2764*/ CRYPT_OBJID_BLOB Content;
/*2765*/ DWORD cAttribute;
/*2766*/ PCRYPT_ATTRIBUTE rgAttribute;
/*2767*/ }CRYPT_TIME_STAMP_REQUEST_INFO,*PCRYPT_TIME_STAMP_REQUEST_INFO;
/*2772*/ typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR{
/*2773*/ LPWSTR pwszName;
/*2774*/ LPWSTR pwszValue;
/*2775*/ }CRYPT_ENROLLMENT_NAME_VALUE_PAIR,*PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
/*2780*/ typedef struct _CRYPT_CSP_PROVIDER{
/*2781*/ DWORD dwKeySpec;
/*2782*/ LPWSTR pwszProviderName;
/*2783*/ CRYPT_BIT_BLOB Signature;
/*2784*/ }CRYPT_CSP_PROVIDER,*PCRYPT_CSP_PROVIDER;
/*2829*/ 
/*2830*/ BOOL
/*2831*/ typ
/*2832*/ CryptFormatObject(
/*2833*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*2834*/ typ typ typ typ typ DWORD dwFormatType,
/*2835*/ typ typ typ typ typ DWORD dwFormatStrType,
/*2836*/ typ typ typ typ typ typ typ void*pFormatStruct,
/*2837*/ typ typ typ typ typ typ typ LPCSTR lpszStructType,
/*2838*/ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*2839*/ typ typ typ typ typ DWORD cbEncoded,
/*2840*/ typ typ typ typ typ typ typ typ typ typ void*pbFormat,
/*2841*/ typ typ typ typ typ DWORD*pcbFormat
/*2842*/ );
/*2912*/ typedef LPVOID(typ*PFN_CRYPT_ALLOC)(
/*2913*/ typ typ typ typ typ size_t cbSize
/*2914*/ );
/*2916*/ typedef void(typ*PFN_CRYPT_FREE)(
/*2917*/ typ typ typ typ typ LPVOID pv
/*2918*/ );
/*2921*/ typedef struct _CRYPT_ENCODE_PARA{
/*2922*/ DWORD cbSize;
/*2923*/ PFN_CRYPT_ALLOC pfnAlloc;
/*2924*/ PFN_CRYPT_FREE pfnFree;
/*2925*/ }CRYPT_ENCODE_PARA,*PCRYPT_ENCODE_PARA;
/*2928*/ 
/*2929*/ BOOL
/*2930*/ typ
/*2931*/ CryptEncodeObjectEx(
/*2932*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*2933*/ typ typ typ typ typ LPCSTR lpszStructType,
/*2934*/ typ typ typ typ typ const void*pvStructInfo,
/*2935*/ typ typ typ typ typ DWORD dwFlags,
/*2936*/ typ typ typ typ typ typ typ PCRYPT_ENCODE_PARA pEncodePara,
/*2937*/ typ typ typ typ typ typ typ void*pvEncoded,
/*2938*/ typ typ typ typ typ typ DWORD*pcbEncoded
/*2939*/ );
/*2941*/ 
/*2942*/ BOOL
/*2943*/ typ
/*2944*/ CryptEncodeObject(
/*2945*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*2946*/ typ typ typ typ typ LPCSTR lpszStructType,
/*2947*/ typ typ typ typ typ const void*pvStructInfo,
/*2948*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncoded,
/*2949*/ typ typ typ typ typ DWORD*pcbEncoded
/*2950*/ );
/*3007*/ typedef struct _CRYPT_DECODE_PARA{
/*3008*/ DWORD cbSize;
/*3009*/ PFN_CRYPT_ALLOC pfnAlloc;
/*3010*/ PFN_CRYPT_FREE pfnFree;
/*3011*/ }CRYPT_DECODE_PARA,*PCRYPT_DECODE_PARA;
/*3013*/ 
/*3014*/ BOOL
/*3015*/ typ
/*3016*/ CryptDecodeObjectEx(
/*3017*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*3018*/ typ typ typ typ typ LPCSTR lpszStructType,
/*3019*/ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*3020*/ typ typ typ typ typ DWORD cbEncoded,
/*3021*/ typ typ typ typ typ DWORD dwFlags,
/*3022*/ typ typ typ typ typ typ typ PCRYPT_DECODE_PARA pDecodePara,
/*3023*/ typ typ typ typ typ typ typ void*pvStructInfo,
/*3024*/ typ typ typ typ typ typ DWORD*pcbStructInfo
/*3025*/ );
/*3028*/ 
/*3029*/ BOOL
/*3030*/ typ
/*3031*/ CryptDecodeObject(
/*3032*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*3033*/ typ typ typ typ typ LPCSTR lpszStructType,
/*3034*/ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*3035*/ typ typ typ typ typ DWORD cbEncoded,
/*3036*/ typ typ typ typ typ DWORD dwFlags,
/*3037*/ typ typ typ typ typ typ typ typ typ void*pvStructInfo,
/*3038*/ typ typ typ typ typ DWORD*pcbStructInfo
/*3039*/ );
/*3668*/ typedef struct _CERT_EXTENSIONS{
/*3669*/ DWORD cExtension;
/*3670*/ PCERT_EXTENSION rgExtension;
/*3671*/ }CERT_EXTENSIONS,*PCERT_EXTENSIONS;
/*3835*/ typedef struct _CERT_AUTHORITY_KEY_ID_INFO{
/*3836*/ CRYPT_DATA_BLOB KeyId;
/*3837*/ CERT_NAME_BLOB CertIssuer;
/*3838*/ CRYPT_INTEGER_BLOB CertSerialNumber;
/*3839*/ }CERT_AUTHORITY_KEY_ID_INFO,*PCERT_AUTHORITY_KEY_ID_INFO;
/*3847*/ typedef struct _CERT_PRIVATE_KEY_VALIDITY{
/*3848*/ FILETIME NotBefore;
/*3849*/ FILETIME NotAfter;
/*3850*/ }CERT_PRIVATE_KEY_VALIDITY,*PCERT_PRIVATE_KEY_VALIDITY;
/*3852*/ typedef struct _CERT_KEY_ATTRIBUTES_INFO{
/*3853*/ CRYPT_DATA_BLOB KeyId;
/*3854*/ CRYPT_BIT_BLOB IntendedKeyUsage;
/*3855*/ PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
/*3856*/ }CERT_KEY_ATTRIBUTES_INFO,*PCERT_KEY_ATTRIBUTES_INFO;
/*3879*/ typedef struct _CERT_POLICY_ID{
/*3880*/ DWORD cCertPolicyElementId;
/*3881*/ LPSTR*rgpszCertPolicyElementId;
/*3882*/ }CERT_POLICY_ID,*PCERT_POLICY_ID;
/*3884*/ typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO{
/*3885*/ DWORD cCertPolicyId;
/*3886*/ PCERT_POLICY_ID rgCertPolicyId;
/*3887*/ CRYPT_BIT_BLOB RestrictedKeyUsage;
/*3888*/ }CERT_KEY_USAGE_RESTRICTION_INFO,*PCERT_KEY_USAGE_RESTRICTION_INFO;
/*3903*/ typedef struct _CERT_OTHER_NAME{
/*3904*/ LPSTR pszObjId;
/*3905*/ CRYPT_OBJID_BLOB Value;
/*3906*/ }CERT_OTHER_NAME,*PCERT_OTHER_NAME;
/*3908*/ typedef struct _CERT_ALT_NAME_ENTRY{
/*3909*/ DWORD dwAltNameChoice;
/*3910*/ union{
/*3911*/ PCERT_OTHER_NAME pOtherName;
/*3912*/ LPWSTR pwszRfc822Name;
/*3913*/ LPWSTR pwszDNSName;
/*3915*/ CERT_NAME_BLOB DirectoryName;
/*3917*/ LPWSTR pwszURL;
/*3918*/ CRYPT_DATA_BLOB IPAddress;
/*3919*/ LPSTR pszRegisteredID;
/*3920*/ }u;
/*3921*/ }CERT_ALT_NAME_ENTRY,*PCERT_ALT_NAME_ENTRY;
/*3937*/ typedef struct _CERT_ALT_NAME_INFO{
/*3938*/ DWORD cAltEntry;
/*3939*/ PCERT_ALT_NAME_ENTRY rgAltEntry;
/*3940*/ }CERT_ALT_NAME_INFO,*PCERT_ALT_NAME_INFO;
/*3972*/ typedef struct _CERT_BASIC_CONSTRAINTS_INFO{
/*3973*/ CRYPT_BIT_BLOB SubjectType;
/*3974*/ BOOL fPathLenConstraint;
/*3975*/ DWORD dwPathLenConstraint;
/*3976*/ DWORD cSubtreesConstraint;
/*3977*/ CERT_NAME_BLOB*rgSubtreesConstraint;
/*3978*/ }CERT_BASIC_CONSTRAINTS_INFO,*PCERT_BASIC_CONSTRAINTS_INFO;
/*3989*/ typedef struct _CERT_BASIC_CONSTRAINTS2_INFO{
/*3990*/ BOOL fCA;
/*3991*/ BOOL fPathLenConstraint;
/*3992*/ DWORD dwPathLenConstraint;
/*3993*/ }CERT_BASIC_CONSTRAINTS2_INFO,*PCERT_BASIC_CONSTRAINTS2_INFO;
/*4014*/ typedef struct _CERT_POLICY_QUALIFIER_INFO{
/*4015*/ LPSTR pszPolicyQualifierId;
/*4016*/ CRYPT_OBJID_BLOB Qualifier;
/*4017*/ }CERT_POLICY_QUALIFIER_INFO,*PCERT_POLICY_QUALIFIER_INFO;
/*4019*/ typedef struct _CERT_POLICY_INFO{
/*4020*/ LPSTR pszPolicyIdentifier;
/*4021*/ DWORD cPolicyQualifier;
/*4022*/ CERT_POLICY_QUALIFIER_INFO*rgPolicyQualifier;
/*4023*/ }CERT_POLICY_INFO,*PCERT_POLICY_INFO;
/*4025*/ typedef struct _CERT_POLICIES_INFO{
/*4026*/ DWORD cPolicyInfo;
/*4027*/ CERT_POLICY_INFO*rgPolicyInfo;
/*4028*/ }CERT_POLICIES_INFO,*PCERT_POLICIES_INFO;
/*4038*/ typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE{
/*4039*/ LPSTR pszOrganization;
/*4040*/ DWORD cNoticeNumbers;
/*4041*/ int*rgNoticeNumbers;
/*4042*/ }CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,*PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
/*4044*/ typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE{
/*4045*/ CERT_POLICY_QUALIFIER_NOTICE_REFERENCE*pNoticeReference;
/*4046*/ LPWSTR pszDisplayText;
/*4047*/ }CERT_POLICY_QUALIFIER_USER_NOTICE,*PCERT_POLICY_QUALIFIER_USER_NOTICE;
/*4055*/ typedef struct _CPS_URLS{
/*4056*/ LPWSTR pszURL;
/*4057*/ CRYPT_ALGORITHM_IDENTIFIER*pAlgorithm;
/*4058*/ CRYPT_DATA_BLOB*pDigest;
/*4059*/ }CPS_URLS,*PCPS_URLS;
/*4061*/ typedef struct _CERT_POLICY95_QUALIFIER1{
/*4062*/ LPWSTR pszPracticesReference;
/*4063*/ LPSTR pszNoticeIdentifier;
/*4064*/ LPSTR pszNSINoticeIdentifier;
/*4065*/ DWORD cCPSURLs;
/*4066*/ CPS_URLS*rgCPSURLs;
/*4067*/ }CERT_POLICY95_QUALIFIER1,*PCERT_POLICY95_QUALIFIER1;
/*4083*/ typedef struct _CERT_POLICY_MAPPING{
/*4084*/ LPSTR pszIssuerDomainPolicy;
/*4085*/ LPSTR pszSubjectDomainPolicy;
/*4086*/ }CERT_POLICY_MAPPING,*PCERT_POLICY_MAPPING;
/*4088*/ typedef struct _CERT_POLICY_MAPPINGS_INFO{
/*4089*/ DWORD cPolicyMapping;
/*4090*/ PCERT_POLICY_MAPPING rgPolicyMapping;
/*4091*/ }CERT_POLICY_MAPPINGS_INFO,*PCERT_POLICY_MAPPINGS_INFO;
/*4099*/ typedef struct _CERT_POLICY_CONSTRAINTS_INFO{
/*4100*/ BOOL fRequireExplicitPolicy;
/*4101*/ DWORD dwRequireExplicitPolicySkipCerts;
/*4103*/ BOOL fInhibitPolicyMapping;
/*4104*/ DWORD dwInhibitPolicyMappingSkipCerts;
/*4105*/ }CERT_POLICY_CONSTRAINTS_INFO,*PCERT_POLICY_CONSTRAINTS_INFO;
/*4176*/ typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY{
/*4177*/ LPSTR pszObjId;
/*4178*/ DWORD cValue;
/*4179*/ PCRYPT_DER_BLOB rgValue;
/*4180*/ }CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY,*PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
/*4190*/ typedef struct _CRYPT_CONTENT_INFO{
/*4191*/ LPSTR pszObjId;
/*4192*/ CRYPT_DER_BLOB Content;
/*4193*/ }CRYPT_CONTENT_INFO,*PCRYPT_CONTENT_INFO;
/*4248*/ typedef struct _CRYPT_SEQUENCE_OF_ANY{
/*4249*/ DWORD cValue;
/*4250*/ PCRYPT_DER_BLOB rgValue;
/*4251*/ }CRYPT_SEQUENCE_OF_ANY,*PCRYPT_SEQUENCE_OF_ANY;
/*4265*/ typedef struct _CERT_AUTHORITY_KEY_ID2_INFO{
/*4266*/ CRYPT_DATA_BLOB KeyId;
/*4267*/ CERT_ALT_NAME_INFO AuthorityCertIssuer;
/*4269*/ CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
/*4270*/ }CERT_AUTHORITY_KEY_ID2_INFO,*PCERT_AUTHORITY_KEY_ID2_INFO;
/*4301*/ typedef struct _CERT_ACCESS_DESCRIPTION{
/*4302*/ LPSTR pszAccessMethod;
/*4303*/ CERT_ALT_NAME_ENTRY AccessLocation;
/*4304*/ }CERT_ACCESS_DESCRIPTION,*PCERT_ACCESS_DESCRIPTION;
/*4307*/ typedef struct _CERT_AUTHORITY_INFO_ACCESS{
/*4308*/ DWORD cAccDescr;
/*4309*/ PCERT_ACCESS_DESCRIPTION rgAccDescr;
/*4310*/ }CERT_AUTHORITY_INFO_ACCESS,*PCERT_AUTHORITY_INFO_ACCESS,
/*4311*/ CERT_SUBJECT_INFO_ACCESS,*PCERT_SUBJECT_INFO_ACCESS;
/*4363*/ typedef struct _CRL_DIST_POINT_NAME{
/*4364*/ DWORD dwDistPointNameChoice;
/*4365*/ union{
/*4366*/ CERT_ALT_NAME_INFO FullName;
/*4368*/ }u;
/*4369*/ }CRL_DIST_POINT_NAME,*PCRL_DIST_POINT_NAME;
/*4375*/ typedef struct _CRL_DIST_POINT{
/*4376*/ CRL_DIST_POINT_NAME DistPointName;
/*4377*/ CRYPT_BIT_BLOB ReasonFlags;
/*4378*/ CERT_ALT_NAME_INFO CRLIssuer;
/*4379*/ }CRL_DIST_POINT,*PCRL_DIST_POINT;
/*4389*/ typedef struct _CRL_DIST_POINTS_INFO{
/*4390*/ DWORD cDistPoint;
/*4391*/ PCRL_DIST_POINT rgDistPoint;
/*4392*/ }CRL_DIST_POINTS_INFO,*PCRL_DIST_POINTS_INFO;
/*4420*/ typedef struct _CROSS_CERT_DIST_POINTS_INFO{
/*4422*/ DWORD dwSyncDeltaTime;
/*4424*/ DWORD cDistPoint;
/*4425*/ PCERT_ALT_NAME_INFO rgDistPoint;
/*4426*/ }CROSS_CERT_DIST_POINTS_INFO,*PCROSS_CERT_DIST_POINTS_INFO;
/*4448*/ typedef struct _CERT_PAIR{
/*4449*/ CERT_BLOB Forward;
/*4450*/ CERT_BLOB Reverse;
/*4451*/ }CERT_PAIR,*PCERT_PAIR;
/*4481*/ typedef struct _CRL_ISSUING_DIST_POINT{
/*4482*/ CRL_DIST_POINT_NAME DistPointName;
/*4483*/ BOOL fOnlyContainsUserCerts;
/*4484*/ BOOL fOnlyContainsCACerts;
/*4485*/ CRYPT_BIT_BLOB OnlySomeReasonFlags;
/*4486*/ BOOL fIndirectCRL;
/*4487*/ }CRL_ISSUING_DIST_POINT,*PCRL_ISSUING_DIST_POINT;
/*4512*/ typedef struct _CERT_GENERAL_SUBTREE{
/*4513*/ CERT_ALT_NAME_ENTRY Base;
/*4514*/ DWORD dwMinimum;
/*4515*/ BOOL fMaximum;
/*4516*/ DWORD dwMaximum;
/*4517*/ }CERT_GENERAL_SUBTREE,*PCERT_GENERAL_SUBTREE;
/*4519*/ typedef struct _CERT_NAME_CONSTRAINTS_INFO{
/*4520*/ DWORD cPermittedSubtree;
/*4521*/ PCERT_GENERAL_SUBTREE rgPermittedSubtree;
/*4522*/ DWORD cExcludedSubtree;
/*4523*/ PCERT_GENERAL_SUBTREE rgExcludedSubtree;
/*4524*/ }CERT_NAME_CONSTRAINTS_INFO,*PCERT_NAME_CONSTRAINTS_INFO;
/*4613*/ typedef struct _CERT_DSS_PARAMETERS{
/*4614*/ CRYPT_UINT_BLOB p;
/*4615*/ CRYPT_UINT_BLOB q;
/*4616*/ CRYPT_UINT_BLOB g;
/*4617*/ }CERT_DSS_PARAMETERS,*PCERT_DSS_PARAMETERS;
/*4644*/ typedef struct _CERT_DH_PARAMETERS{
/*4645*/ CRYPT_UINT_BLOB p;
/*4646*/ CRYPT_UINT_BLOB g;
/*4647*/ }CERT_DH_PARAMETERS,*PCERT_DH_PARAMETERS;
/*4657*/ typedef struct _CERT_ECC_SIGNATURE{
/*4658*/ CRYPT_UINT_BLOB r;
/*4659*/ CRYPT_UINT_BLOB s;
/*4660*/ }CERT_ECC_SIGNATURE,*PCERT_ECC_SIGNATURE;
/*4669*/ typedef struct _CERT_X942_DH_VALIDATION_PARAMS{
/*4670*/ CRYPT_BIT_BLOB seed;
/*4671*/ DWORD pgenCounter;
/*4672*/ }CERT_X942_DH_VALIDATION_PARAMS,*PCERT_X942_DH_VALIDATION_PARAMS;
/*4674*/ typedef struct _CERT_X942_DH_PARAMETERS{
/*4675*/ CRYPT_UINT_BLOB p;
/*4676*/ CRYPT_UINT_BLOB g;
/*4677*/ CRYPT_UINT_BLOB q;
/*4678*/ CRYPT_UINT_BLOB j;
/*4679*/ PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
/*4680*/ }CERT_X942_DH_PARAMETERS,*PCERT_X942_DH_PARAMETERS;
/*4692*/ typedef struct _CRYPT_X942_OTHER_INFO{
/*4693*/ LPSTR pszContentEncryptionObjId;
/*4694*/ BYTE rgbCounter[4];
/*4695*/ BYTE rgbKeyLength[4];
/*4696*/ CRYPT_DATA_BLOB PubInfo;
/*4697*/ }CRYPT_X942_OTHER_INFO,*PCRYPT_X942_OTHER_INFO;
/*4708*/ typedef struct _CRYPT_ECC_CMS_SHARED_INFO{
/*4709*/ CRYPT_ALGORITHM_IDENTIFIER Algorithm;
/*4710*/ CRYPT_DATA_BLOB EntityUInfo;
/*4711*/ BYTE rgbSuppPubInfo[4];
/*4712*/ }CRYPT_ECC_CMS_SHARED_INFO,*PCRYPT_ECC_CMS_SHARED_INFO;
/*4721*/ typedef struct _CRYPT_RC2_CBC_PARAMETERS{
/*4722*/ DWORD dwVersion;
/*4723*/ BOOL fIV;
/*4724*/ BYTE rgbIV[8];
/*4725*/ }CRYPT_RC2_CBC_PARAMETERS,*PCRYPT_RC2_CBC_PARAMETERS;
/*4745*/ typedef struct _CRYPT_SMIME_CAPABILITY{
/*4746*/ LPSTR pszObjId;
/*4747*/ CRYPT_OBJID_BLOB Parameters;
/*4748*/ }CRYPT_SMIME_CAPABILITY,*PCRYPT_SMIME_CAPABILITY;
/*4750*/ typedef struct _CRYPT_SMIME_CAPABILITIES{
/*4751*/ DWORD cCapability;
/*4752*/ PCRYPT_SMIME_CAPABILITY rgCapability;
/*4753*/ }CRYPT_SMIME_CAPABILITIES,*PCRYPT_SMIME_CAPABILITIES;
/*4770*/ typedef struct _CERT_QC_STATEMENT{
/*4771*/ LPSTR pszStatementId;
/*4772*/ CRYPT_OBJID_BLOB StatementInfo;
/*4773*/ }CERT_QC_STATEMENT,*PCERT_QC_STATEMENT;
/*4775*/ typedef struct _CERT_QC_STATEMENTS_EXT_INFO{
/*4776*/ DWORD cStatement;
/*4777*/ PCERT_QC_STATEMENT rgStatement;
/*4778*/ }CERT_QC_STATEMENTS_EXT_INFO,*PCERT_QC_STATEMENTS_EXT_INFO;
/*4822*/ typedef struct _CRYPT_MASK_GEN_ALGORITHM{
/*4823*/ LPSTR pszObjId;
/*4824*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*4825*/ }CRYPT_MASK_GEN_ALGORITHM,*PCRYPT_MASK_GEN_ALGORITHM;
/*4827*/ typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS{
/*4828*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*4829*/ CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
/*4830*/ DWORD dwSaltLength;
/*4831*/ DWORD dwTrailerField;
/*4832*/ }CRYPT_RSA_SSA_PSS_PARAMETERS,*PCRYPT_RSA_SSA_PSS_PARAMETERS;
/*4857*/ typedef struct _CRYPT_PSOURCE_ALGORITHM{
/*4858*/ LPSTR pszObjId;
/*4859*/ CRYPT_DATA_BLOB EncodingParameters;
/*4860*/ }CRYPT_PSOURCE_ALGORITHM,*PCRYPT_PSOURCE_ALGORITHM;
/*4862*/ typedef struct _CRYPT_RSAES_OAEP_PARAMETERS{
/*4863*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*4864*/ CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
/*4865*/ CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
/*4866*/ }CRYPT_RSAES_OAEP_PARAMETERS,*PCRYPT_RSAES_OAEP_PARAMETERS;
/*5136*/ typedef struct _CMC_TAGGED_ATTRIBUTE{
/*5137*/ DWORD dwBodyPartID;
/*5138*/ CRYPT_ATTRIBUTE Attribute;
/*5139*/ }CMC_TAGGED_ATTRIBUTE,*PCMC_TAGGED_ATTRIBUTE;
/*5141*/ typedef struct _CMC_TAGGED_CERT_REQUEST{
/*5142*/ DWORD dwBodyPartID;
/*5143*/ CRYPT_DER_BLOB SignedCertRequest;
/*5144*/ }CMC_TAGGED_CERT_REQUEST,*PCMC_TAGGED_CERT_REQUEST;
/*5146*/ typedef struct _CMC_TAGGED_REQUEST{
/*5147*/ DWORD dwTaggedRequestChoice;
/*5148*/ union{
/*5150*/ PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
/*5151*/ }u;
/*5152*/ }CMC_TAGGED_REQUEST,*PCMC_TAGGED_REQUEST;
/*5156*/ typedef struct _CMC_TAGGED_CONTENT_INFO{
/*5157*/ DWORD dwBodyPartID;
/*5158*/ CRYPT_DER_BLOB EncodedContentInfo;
/*5159*/ }CMC_TAGGED_CONTENT_INFO,*PCMC_TAGGED_CONTENT_INFO;
/*5161*/ typedef struct _CMC_TAGGED_OTHER_MSG{
/*5162*/ DWORD dwBodyPartID;
/*5163*/ LPSTR pszObjId;
/*5164*/ CRYPT_OBJID_BLOB Value;
/*5165*/ }CMC_TAGGED_OTHER_MSG,*PCMC_TAGGED_OTHER_MSG;
/*5169*/ typedef struct _CMC_DATA_INFO{
/*5170*/ DWORD cTaggedAttribute;
/*5171*/ PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
/*5172*/ DWORD cTaggedRequest;
/*5173*/ PCMC_TAGGED_REQUEST rgTaggedRequest;
/*5174*/ DWORD cTaggedContentInfo;
/*5175*/ PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
/*5176*/ DWORD cTaggedOtherMsg;
/*5177*/ PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
/*5178*/ }CMC_DATA_INFO,*PCMC_DATA_INFO;
/*5182*/ typedef struct _CMC_RESPONSE_INFO{
/*5183*/ DWORD cTaggedAttribute;
/*5184*/ PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
/*5185*/ DWORD cTaggedContentInfo;
/*5186*/ PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
/*5187*/ DWORD cTaggedOtherMsg;
/*5188*/ PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
/*5189*/ }CMC_RESPONSE_INFO,*PCMC_RESPONSE_INFO;
/*5199*/ typedef struct _CMC_PEND_INFO{
/*5200*/ CRYPT_DATA_BLOB PendToken;
/*5201*/ FILETIME PendTime;
/*5202*/ }CMC_PEND_INFO,*PCMC_PEND_INFO;
/*5204*/ typedef struct _CMC_STATUS_INFO{
/*5205*/ DWORD dwStatus;
/*5206*/ DWORD cBodyList;
/*5207*/ DWORD*rgdwBodyList;
/*5208*/ LPWSTR pwszStatusString;
/*5209*/ DWORD dwOtherInfoChoice;
/*5210*/ union{
/*5214*/ DWORD dwFailInfo;
/*5216*/ PCMC_PEND_INFO pPendInfo;
/*5217*/ }u;
/*5218*/ }CMC_STATUS_INFO,*PCMC_STATUS_INFO;
/*5296*/ typedef struct _CMC_ADD_EXTENSIONS_INFO{
/*5297*/ DWORD dwCmcDataReference;
/*5298*/ DWORD cCertReference;
/*5299*/ DWORD*rgdwCertReference;
/*5300*/ DWORD cExtension;
/*5301*/ PCERT_EXTENSION rgExtension;
/*5302*/ }CMC_ADD_EXTENSIONS_INFO,*PCMC_ADD_EXTENSIONS_INFO;
/*5313*/ typedef struct _CMC_ADD_ATTRIBUTES_INFO{
/*5314*/ DWORD dwCmcDataReference;
/*5315*/ DWORD cCertReference;
/*5316*/ DWORD*rgdwCertReference;
/*5317*/ DWORD cAttribute;
/*5318*/ PCRYPT_ATTRIBUTE rgAttribute;
/*5319*/ }CMC_ADD_ATTRIBUTES_INFO,*PCMC_ADD_ATTRIBUTES_INFO;
/*5329*/ typedef struct _CERT_TEMPLATE_EXT{
/*5330*/ LPSTR pszObjId;
/*5331*/ DWORD dwMajorVersion;
/*5332*/ BOOL fMinorVersion;
/*5333*/ DWORD dwMinorVersion;
/*5334*/ }CERT_TEMPLATE_EXT,*PCERT_TEMPLATE_EXT;
/*5345*/ typedef struct _CERT_HASHED_URL{
/*5346*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*5347*/ CRYPT_HASH_BLOB Hash;
/*5348*/ LPWSTR pwszUrl;
/*5350*/ }CERT_HASHED_URL,*PCERT_HASHED_URL;
/*5352*/ typedef struct _CERT_LOGOTYPE_DETAILS{
/*5353*/ LPWSTR pwszMimeType;
/*5354*/ DWORD cHashedUrl;
/*5355*/ PCERT_HASHED_URL rgHashedUrl;
/*5356*/ }CERT_LOGOTYPE_DETAILS,*PCERT_LOGOTYPE_DETAILS;
/*5358*/ typedef struct _CERT_LOGOTYPE_REFERENCE{
/*5359*/ DWORD cHashedUrl;
/*5360*/ PCERT_HASHED_URL rgHashedUrl;
/*5361*/ }CERT_LOGOTYPE_REFERENCE,*PCERT_LOGOTYPE_REFERENCE;
/*5363*/ typedef struct _CERT_LOGOTYPE_IMAGE_INFO{
/*5366*/ DWORD dwLogotypeImageInfoChoice;
/*5368*/ DWORD dwFileSize;
/*5369*/ DWORD dwXSize;
/*5370*/ DWORD dwYSize;
/*5372*/ DWORD dwLogotypeImageResolutionChoice;
/*5373*/ union{
/*5378*/ DWORD dwNumBits;
/*5381*/ DWORD dwTableSize;
/*5382*/ }u;
/*5383*/ LPWSTR pwszLanguage;
/*5385*/ }CERT_LOGOTYPE_IMAGE_INFO,*PCERT_LOGOTYPE_IMAGE_INFO;
/*5394*/ typedef struct _CERT_LOGOTYPE_IMAGE{
/*5395*/ CERT_LOGOTYPE_DETAILS LogotypeDetails;
/*5397*/ PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo;
/*5398*/ }CERT_LOGOTYPE_IMAGE,*PCERT_LOGOTYPE_IMAGE;
/*5401*/ typedef struct _CERT_LOGOTYPE_AUDIO_INFO{
/*5402*/ DWORD dwFileSize;
/*5403*/ DWORD dwPlayTime;
/*5404*/ DWORD dwChannels;
/*5405*/ DWORD dwSampleRate;
/*5407*/ LPWSTR pwszLanguage;
/*5409*/ }CERT_LOGOTYPE_AUDIO_INFO,*PCERT_LOGOTYPE_AUDIO_INFO;
/*5411*/ typedef struct _CERT_LOGOTYPE_AUDIO{
/*5412*/ CERT_LOGOTYPE_DETAILS LogotypeDetails;
/*5414*/ PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo;
/*5415*/ }CERT_LOGOTYPE_AUDIO,*PCERT_LOGOTYPE_AUDIO;
/*5418*/ typedef struct _CERT_LOGOTYPE_DATA{
/*5419*/ DWORD cLogotypeImage;
/*5420*/ PCERT_LOGOTYPE_IMAGE rgLogotypeImage;
/*5422*/ DWORD cLogotypeAudio;
/*5423*/ PCERT_LOGOTYPE_AUDIO rgLogotypeAudio;
/*5424*/ }CERT_LOGOTYPE_DATA,*PCERT_LOGOTYPE_DATA;
/*5427*/ typedef struct _CERT_LOGOTYPE_INFO{
/*5428*/ DWORD dwLogotypeInfoChoice;
/*5429*/ union{
/*5431*/ PCERT_LOGOTYPE_DATA pLogotypeDirectInfo;
/*5434*/ PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo;
/*5435*/ }u;
/*5436*/ }CERT_LOGOTYPE_INFO,*PCERT_LOGOTYPE_INFO;
/*5441*/ typedef struct _CERT_OTHER_LOGOTYPE_INFO{
/*5442*/ LPSTR pszObjId;
/*5443*/ CERT_LOGOTYPE_INFO LogotypeInfo;
/*5444*/ }CERT_OTHER_LOGOTYPE_INFO,*PCERT_OTHER_LOGOTYPE_INFO;
/*5449*/ typedef struct _CERT_LOGOTYPE_EXT_INFO{
/*5450*/ DWORD cCommunityLogo;
/*5451*/ PCERT_LOGOTYPE_INFO rgCommunityLogo;
/*5452*/ PCERT_LOGOTYPE_INFO pIssuerLogo;
/*5453*/ PCERT_LOGOTYPE_INFO pSubjectLogo;
/*5454*/ DWORD cOtherLogo;
/*5455*/ PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo;
/*5456*/ }CERT_LOGOTYPE_EXT_INFO,*PCERT_LOGOTYPE_EXT_INFO;
/*5468*/ typedef struct _CERT_BIOMETRIC_DATA{
/*5469*/ DWORD dwTypeOfBiometricDataChoice;
/*5470*/ union{
/*5472*/ DWORD dwPredefined;
/*5475*/ LPSTR pszObjId;
/*5476*/ }u;
/*5478*/ CERT_HASHED_URL HashedUrl;
/*5479*/ }CERT_BIOMETRIC_DATA,*PCERT_BIOMETRIC_DATA;
/*5488*/ typedef struct _CERT_BIOMETRIC_EXT_INFO{
/*5489*/ DWORD cBiometricData;
/*5490*/ PCERT_BIOMETRIC_DATA rgBiometricData;
/*5491*/ }CERT_BIOMETRIC_EXT_INFO,*PCERT_BIOMETRIC_EXT_INFO;
/*5508*/ typedef struct _OCSP_SIGNATURE_INFO{
/*5509*/ CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
/*5510*/ CRYPT_BIT_BLOB Signature;
/*5511*/ DWORD cCertEncoded;
/*5512*/ PCERT_BLOB rgCertEncoded;
/*5513*/ }OCSP_SIGNATURE_INFO,*POCSP_SIGNATURE_INFO;
/*5515*/ typedef struct _OCSP_SIGNED_REQUEST_INFO{
/*5516*/ CRYPT_DER_BLOB ToBeSigned;
/*5517*/ POCSP_SIGNATURE_INFO pOptionalSignatureInfo;
/*5518*/ }OCSP_SIGNED_REQUEST_INFO,*POCSP_SIGNED_REQUEST_INFO;
/*5526*/ typedef struct _OCSP_CERT_ID{
/*5527*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*5528*/ CRYPT_HASH_BLOB IssuerNameHash;
/*5529*/ CRYPT_HASH_BLOB IssuerKeyHash;
/*5530*/ CRYPT_INTEGER_BLOB SerialNumber;
/*5531*/ }OCSP_CERT_ID,*POCSP_CERT_ID;
/*5533*/ typedef struct _OCSP_REQUEST_ENTRY{
/*5534*/ OCSP_CERT_ID CertId;
/*5535*/ DWORD cExtension;
/*5536*/ PCERT_EXTENSION rgExtension;
/*5537*/ }OCSP_REQUEST_ENTRY,*POCSP_REQUEST_ENTRY;
/*5539*/ typedef struct _OCSP_REQUEST_INFO{
/*5540*/ DWORD dwVersion;
/*5541*/ PCERT_ALT_NAME_ENTRY pRequestorName;
/*5542*/ DWORD cRequestEntry;
/*5543*/ POCSP_REQUEST_ENTRY rgRequestEntry;
/*5544*/ DWORD cExtension;
/*5545*/ PCERT_EXTENSION rgExtension;
/*5546*/ }OCSP_REQUEST_INFO,*POCSP_REQUEST_INFO;
/*5555*/ typedef struct _OCSP_RESPONSE_INFO{
/*5556*/ DWORD dwStatus;
/*5557*/ LPSTR pszObjId;
/*5558*/ CRYPT_OBJID_BLOB Value;
/*5559*/ }OCSP_RESPONSE_INFO,*POCSP_RESPONSE_INFO;
/*5578*/ typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO{
/*5579*/ CRYPT_DER_BLOB ToBeSigned;
/*5580*/ OCSP_SIGNATURE_INFO SignatureInfo;
/*5581*/ }OCSP_BASIC_SIGNED_RESPONSE_INFO,*POCSP_BASIC_SIGNED_RESPONSE_INFO;
/*5589*/ typedef struct _OCSP_BASIC_REVOKED_INFO{
/*5590*/ FILETIME RevocationDate;
/*5593*/ DWORD dwCrlReasonCode;
/*5594*/ }OCSP_BASIC_REVOKED_INFO,*POCSP_BASIC_REVOKED_INFO;
/*5596*/ typedef struct _OCSP_BASIC_RESPONSE_ENTRY{
/*5597*/ OCSP_CERT_ID CertId;
/*5598*/ DWORD dwCertStatus;
/*5599*/ union{
/*5605*/ POCSP_BASIC_REVOKED_INFO pRevokedInfo;
/*5607*/ }u;
/*5608*/ FILETIME ThisUpdate;
/*5609*/ FILETIME NextUpdate;
/*5611*/ DWORD cExtension;
/*5612*/ PCERT_EXTENSION rgExtension;
/*5613*/ }OCSP_BASIC_RESPONSE_ENTRY,*POCSP_BASIC_RESPONSE_ENTRY;
/*5620*/ typedef struct _OCSP_BASIC_RESPONSE_INFO{
/*5621*/ DWORD dwVersion;
/*5622*/ DWORD dwResponderIdChoice;
/*5623*/ union{
/*5625*/ CERT_NAME_BLOB ByNameResponderId;
/*5627*/ CRYPT_HASH_BLOB ByKeyResponderId;
/*5628*/ }u;
/*5629*/ FILETIME ProducedAt;
/*5630*/ DWORD cResponseEntry;
/*5631*/ POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry;
/*5632*/ DWORD cExtension;
/*5633*/ PCERT_EXTENSION rgExtension;
/*5634*/ }OCSP_BASIC_RESPONSE_INFO,*POCSP_BASIC_RESPONSE_INFO;
/*5646*/ typedef void*HCRYPTOIDFUNCSET;
/*5647*/ typedef void*HCRYPTOIDFUNCADDR;
/*5723*/ typedef struct _CRYPT_OID_FUNC_ENTRY{
/*5724*/ LPCSTR pszOID;
/*5725*/ void*pvFuncAddr;
/*5726*/ }CRYPT_OID_FUNC_ENTRY,*PCRYPT_OID_FUNC_ENTRY;
/*5747*/ 
/*5748*/ BOOL
/*5749*/ typ
/*5750*/ CryptInstallOIDFunctionAddress(
/*5751*/ typ typ typ typ typ typ typ HMODULE hModule,
/*5752*/ typ typ typ typ typ DWORD dwEncodingType,
/*5753*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5754*/ typ typ typ typ typ DWORD cFuncEntry,
/*5755*/ typ typ typ typ typ typ typ const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
/*5756*/ typ typ typ typ typ DWORD dwFlags
/*5757*/ );
/*5765*/ 
/*5766*/ HCRYPTOIDFUNCSET
/*5767*/ typ
/*5768*/ CryptInitOIDFunctionSet(
/*5769*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5770*/ typ typ typ typ typ DWORD dwFlags
/*5771*/ );
/*5791*/ 
/*5792*/ typ
/*5793*/ BOOL
/*5794*/ typ
/*5795*/ CryptGetOIDFunctionAddress(
/*5796*/ typ typ typ typ typ HCRYPTOIDFUNCSET hFuncSet,
/*5797*/ typ typ typ typ typ DWORD dwEncodingType,
/*5798*/ typ typ typ typ typ LPCSTR pszOID,
/*5799*/ typ typ typ typ typ DWORD dwFlags,
/*5800*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppvFuncAddr,
/*5801*/ typ typ typ typ typ HCRYPTOIDFUNCADDR*phFuncAddr
/*5802*/ );
/*5815*/ 
/*5816*/ BOOL
/*5817*/ typ
/*5818*/ CryptGetDefaultOIDDllList(
/*5819*/ typ typ typ typ typ HCRYPTOIDFUNCSET hFuncSet,
/*5820*/ typ typ typ typ typ DWORD dwEncodingType,
/*5821*/ typ typ typ typ typ typ typ typ typ typ typ WCHAR*pwszDllList,
/*5822*/ typ typ typ typ typ DWORD*pcchDllList
/*5823*/ );
/*5848*/ 
/*5849*/ typ
/*5850*/ BOOL
/*5851*/ typ
/*5852*/ CryptGetDefaultOIDFunctionAddress(
/*5853*/ typ typ typ typ typ HCRYPTOIDFUNCSET hFuncSet,
/*5854*/ typ typ typ typ typ DWORD dwEncodingType,
/*5855*/ typ typ typ typ typ typ typ LPCWSTR pwszDll,
/*5856*/ typ typ typ typ typ DWORD dwFlags,
/*5857*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppvFuncAddr,
/*5858*/ typ typ typ typ typ HCRYPTOIDFUNCADDR*phFuncAddr
/*5859*/ );
/*5873*/ 
/*5874*/ BOOL
/*5875*/ typ
/*5876*/ CryptFreeOIDFunctionAddress(
/*5877*/ typ typ typ typ typ HCRYPTOIDFUNCADDR hFuncAddr,
/*5878*/ typ typ typ typ typ DWORD dwFlags
/*5879*/ );
/*5895*/ 
/*5896*/ BOOL
/*5897*/ typ
/*5898*/ CryptRegisterOIDFunction(
/*5899*/ typ typ typ typ typ DWORD dwEncodingType,
/*5900*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5901*/ typ typ typ typ typ LPCSTR pszOID,
/*5902*/ typ typ typ typ typ typ typ LPCWSTR pwszDll,
/*5903*/ typ typ typ typ typ typ typ LPCSTR pszOverrideFuncName
/*5904*/ );
/*5910*/ 
/*5911*/ BOOL
/*5912*/ typ
/*5913*/ CryptUnregisterOIDFunction(
/*5914*/ typ typ typ typ typ DWORD dwEncodingType,
/*5915*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5916*/ typ typ typ typ typ LPCSTR pszOID
/*5917*/ );
/*5934*/ 
/*5935*/ BOOL
/*5936*/ typ
/*5937*/ CryptRegisterDefaultOIDFunction(
/*5938*/ typ typ typ typ typ DWORD dwEncodingType,
/*5939*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5940*/ typ typ typ typ typ DWORD dwIndex,
/*5941*/ typ typ typ typ typ LPCWSTR pwszDll
/*5942*/ );
/*5951*/ 
/*5952*/ BOOL
/*5953*/ typ
/*5954*/ CryptUnregisterDefaultOIDFunction(
/*5955*/ typ typ typ typ typ DWORD dwEncodingType,
/*5956*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5957*/ typ typ typ typ typ LPCWSTR pwszDll
/*5958*/ );
/*5968*/ 
/*5969*/ BOOL
/*5970*/ typ
/*5971*/ CryptSetOIDFunctionValue(
/*5972*/ typ typ typ typ typ DWORD dwEncodingType,
/*5973*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5974*/ typ typ typ typ typ LPCSTR pszOID,
/*5975*/ typ typ typ typ typ typ typ LPCWSTR pwszValueName,
/*5976*/ typ typ typ typ typ DWORD dwValueType,
/*5977*/ typ typ typ typ typ typ typ typ typ const BYTE*pbValueData,
/*5978*/ typ typ typ typ typ DWORD cbValueData
/*5979*/ );
/*5989*/ 
/*5990*/ BOOL
/*5991*/ typ
/*5992*/ CryptGetOIDFunctionValue(
/*5993*/ typ typ typ typ typ DWORD dwEncodingType,
/*5994*/ typ typ typ typ typ LPCSTR pszFuncName,
/*5995*/ typ typ typ typ typ LPCSTR pszOID,
/*5996*/ typ typ typ typ typ typ typ LPCWSTR pwszValueName,
/*5997*/ typ typ typ typ typ typ typ DWORD*pdwValueType,
/*5998*/ typ typ typ typ typ typ typ typ typ BYTE*pbValueData,
/*5999*/ typ typ typ typ typ typ typ DWORD*pcbValueData
/*6000*/ );
/*6002*/ typedef BOOL(typ*PFN_CRYPT_ENUM_OID_FUNC)(
/*6003*/ typ typ typ typ typ DWORD dwEncodingType,
/*6004*/ typ typ typ typ typ LPCSTR pszFuncName,
/*6005*/ typ typ typ typ typ LPCSTR pszOID,
/*6006*/ typ typ typ typ typ DWORD cValue,
/*6007*/ typ typ typ typ typ typ typ const DWORD rgdwValueType[],
/*6008*/ typ typ typ typ typ typ typ LPCWSTR const rgpwszValueName[],
/*6009*/ typ typ typ typ typ typ typ const BYTE*const rgpbValueData[],
/*6010*/ typ typ typ typ typ typ typ const DWORD rgcbValueData[],
/*6011*/ typ typ typ typ typ typ typ void*pvArg
/*6012*/ );
/*6027*/ 
/*6028*/ BOOL
/*6029*/ typ
/*6030*/ CryptEnumOIDFunction(
/*6031*/ typ typ typ typ typ DWORD dwEncodingType,
/*6032*/ typ typ typ typ typ typ typ LPCSTR pszFuncName,
/*6033*/ typ typ typ typ typ typ typ LPCSTR pszOID,
/*6034*/ typ typ typ typ typ DWORD dwFlags,
/*6035*/ typ typ typ typ typ typ typ void*pvArg,
/*6036*/ typ PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
/*6037*/ );
/*6073*/ typedef struct _CRYPT_OID_INFO{
/*6074*/ DWORD cbSize;
/*6075*/ LPCSTR pszOID;
/*6076*/ LPCWSTR pwszName;
/*6077*/ DWORD dwGroupId;
/*6078*/ union{
/*6079*/ DWORD dwValue;
/*6080*/ ALG_ID Algid;
/*6081*/ DWORD dwLength;
/*6082*/ }u;
/*6083*/ CRYPT_DATA_BLOB ExtraInfo;
/*6111*/ }CRYPT_OID_INFO,*PCRYPT_OID_INFO;
/*6112*/ typedef const CRYPT_OID_INFO CCRYPT_OID_INFO,*PCCRYPT_OID_INFO;
/*6204*/ 
/*6205*/ PCCRYPT_OID_INFO
/*6206*/ typ
/*6207*/ CryptFindOIDInfo(
/*6208*/ typ typ typ typ typ DWORD dwKeyType,
/*6209*/ typ typ typ typ typ void*pvKey,
/*6210*/ typ typ typ typ typ DWORD dwGroupId
/*6211*/ );
/*6274*/ 
/*6275*/ BOOL
/*6276*/ typ
/*6277*/ CryptRegisterOIDInfo(
/*6278*/ typ typ typ typ typ PCCRYPT_OID_INFO pInfo,
/*6279*/ typ typ typ typ typ DWORD dwFlags
/*6280*/ );
/*6288*/ 
/*6289*/ BOOL
/*6290*/ typ
/*6291*/ CryptUnregisterOIDInfo(
/*6292*/ typ typ typ typ typ PCCRYPT_OID_INFO pInfo
/*6293*/ );
/*6296*/ typedef BOOL(typ*PFN_CRYPT_ENUM_OID_INFO)(
/*6297*/ typ typ typ typ typ PCCRYPT_OID_INFO pInfo,
/*6298*/ typ typ typ typ typ typ typ void*pvArg
/*6299*/ );
/*6311*/ 
/*6312*/ BOOL
/*6313*/ typ
/*6314*/ CryptEnumOIDInfo(
/*6315*/ typ typ typ typ typ DWORD dwGroupId,
/*6316*/ typ typ typ typ typ DWORD dwFlags,
/*6317*/ typ typ typ typ typ typ typ void*pvArg,
/*6318*/ typ PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
/*6319*/ );
/*6344*/ 
/*6345*/ LPCWSTR
/*6346*/ typ
/*6347*/ CryptFindLocalizedName(
/*6348*/ typ typ typ typ typ LPCWSTR pwszCryptName
/*6349*/ );
/*6358*/ typedef void*HCRYPTMSG;
/*6395*/ typedef struct _CERT_ISSUER_SERIAL_NUMBER{
/*6396*/ CERT_NAME_BLOB Issuer;
/*6397*/ CRYPT_INTEGER_BLOB SerialNumber;
/*6398*/ }CERT_ISSUER_SERIAL_NUMBER,*PCERT_ISSUER_SERIAL_NUMBER;
/*6403*/ typedef struct _CERT_ID{
/*6404*/ DWORD dwIdChoice;
/*6405*/ union{
/*6407*/ CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
/*6409*/ CRYPT_HASH_BLOB KeyId;
/*6411*/ CRYPT_HASH_BLOB HashId;
/*6412*/ }u;
/*6413*/ }CERT_ID,*PCERT_ID;
/*6468*/ typedef struct _CMSG_SIGNER_ENCODE_INFO{
/*6469*/ DWORD cbSize;
/*6470*/ PCERT_INFO pCertInfo;
/*6473*/ union{
/*6474*/ HCRYPTPROV hCryptProv;
/*6475*/ NCRYPT_KEY_HANDLE hNCryptKey;
/*6476*/ }u;
/*6479*/ DWORD dwKeySpec;
/*6481*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*6482*/ void*pvHashAuxInfo;
/*6483*/ DWORD cAuthAttr;
/*6484*/ PCRYPT_ATTRIBUTE rgAuthAttr;
/*6485*/ DWORD cUnauthAttr;
/*6486*/ PCRYPT_ATTRIBUTE rgUnauthAttr;
/*6495*/ }CMSG_SIGNER_ENCODE_INFO,*PCMSG_SIGNER_ENCODE_INFO;
/*6497*/ typedef struct _CMSG_SIGNED_ENCODE_INFO{
/*6498*/ DWORD cbSize;
/*6499*/ DWORD cSigners;
/*6500*/ PCMSG_SIGNER_ENCODE_INFO rgSigners;
/*6501*/ DWORD cCertEncoded;
/*6502*/ PCERT_BLOB rgCertEncoded;
/*6503*/ DWORD cCrlEncoded;
/*6504*/ PCRL_BLOB rgCrlEncoded;
/*6510*/ }CMSG_SIGNED_ENCODE_INFO,*PCMSG_SIGNED_ENCODE_INFO;
/*6555*/ typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
/*6556*/ *PCMSG_RECIPIENT_ENCODE_INFO;
/*6558*/ typedef struct _CMSG_ENVELOPED_ENCODE_INFO{
/*6559*/ DWORD cbSize;
/*6560*/ HCRYPTPROV_LEGACY hCryptProv;
/*6561*/ CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
/*6562*/ void*pvEncryptionAuxInfo;
/*6563*/ DWORD cRecipients;
/*6568*/ PCERT_INFO*rgpRecipients;
/*6583*/ }CMSG_ENVELOPED_ENCODE_INFO,*PCMSG_ENVELOPED_ENCODE_INFO;
/*6608*/ typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO{
/*6609*/ DWORD cbSize;
/*6610*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*6611*/ void*pvKeyEncryptionAuxInfo;
/*6612*/ HCRYPTPROV_LEGACY hCryptProv;
/*6613*/ CRYPT_BIT_BLOB RecipientPublicKey;
/*6614*/ CERT_ID RecipientId;
/*6615*/ }CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
/*6657*/ typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO{
/*6658*/ DWORD cbSize;
/*6659*/ CRYPT_BIT_BLOB RecipientPublicKey;
/*6660*/ CERT_ID RecipientId;
/*6664*/ FILETIME Date;
/*6665*/ PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
/*6666*/ }CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
/*6667*/ *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
/*6669*/ typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO{
/*6670*/ DWORD cbSize;
/*6671*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*6672*/ void*pvKeyEncryptionAuxInfo;
/*6673*/ CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
/*6674*/ void*pvKeyWrapAuxInfo;
/*6682*/ HCRYPTPROV_LEGACY hCryptProv;
/*6683*/ DWORD dwKeySpec;
/*6685*/ DWORD dwKeyChoice;
/*6686*/ union{
/*6690*/ PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
/*6695*/ PCERT_ID pSenderId;
/*6696*/ }u;
/*6697*/ CRYPT_DATA_BLOB UserKeyingMaterial;
/*6699*/ DWORD cRecipientEncryptedKeys;
/*6700*/ PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO*rgpRecipientEncryptedKeys;
/*6701*/ }CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
/*6725*/ typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO{
/*6726*/ DWORD cbSize;
/*6727*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*6728*/ void*pvKeyEncryptionAuxInfo;
/*6729*/ HCRYPTPROV hCryptProv;
/*6730*/ DWORD dwKeyChoice;
/*6731*/ union{
/*6733*/ HCRYPTKEY hKeyEncryptionKey;
/*6735*/ void*pvKeyEncryptionKey;
/*6736*/ }u;
/*6737*/ CRYPT_DATA_BLOB KeyId;
/*6740*/ FILETIME Date;
/*6741*/ PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
/*6742*/ }CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO,*PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
/*6751*/ struct _CMSG_RECIPIENT_ENCODE_INFO{
/*6752*/ DWORD dwRecipientChoice;
/*6753*/ union{
/*6755*/ PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
/*6757*/ PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
/*6759*/ PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
/*6760*/ }u;
/*6761*/ };
/*6783*/ typedef struct _CMSG_RC2_AUX_INFO{
/*6784*/ DWORD cbSize;
/*6785*/ DWORD dwBitLen;
/*6786*/ }CMSG_RC2_AUX_INFO,*PCMSG_RC2_AUX_INFO;
/*6801*/ typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO{
/*6802*/ DWORD cbSize;
/*6803*/ DWORD dwFlags;
/*6804*/ }CMSG_SP3_COMPATIBLE_AUX_INFO,*PCMSG_SP3_COMPATIBLE_AUX_INFO;
/*6823*/ typedef struct _CMSG_RC4_AUX_INFO{
/*6824*/ DWORD cbSize;
/*6825*/ DWORD dwBitLen;
/*6826*/ }CMSG_RC4_AUX_INFO,*PCMSG_RC4_AUX_INFO;
/*6837*/ typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO{
/*6838*/ DWORD cbSize;
/*6839*/ CMSG_SIGNED_ENCODE_INFO SignedInfo;
/*6840*/ CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
/*6841*/ }CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO,*PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
/*6859*/ typedef struct _CMSG_HASHED_ENCODE_INFO{
/*6860*/ DWORD cbSize;
/*6861*/ HCRYPTPROV_LEGACY hCryptProv;
/*6862*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*6863*/ void*pvHashAuxInfo;
/*6864*/ }CMSG_HASHED_ENCODE_INFO,*PCMSG_HASHED_ENCODE_INFO;
/*6876*/ typedef struct _CMSG_ENCRYPTED_ENCODE_INFO{
/*6877*/ DWORD cbSize;
/*6878*/ CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
/*6879*/ void*pvEncryptionAuxInfo;
/*6880*/ }CMSG_ENCRYPTED_ENCODE_INFO,*PCMSG_ENCRYPTED_ENCODE_INFO;
/*6897*/ typedef BOOL(typ*PFN_CMSG_STREAM_OUTPUT)(
/*6898*/ typ typ typ typ typ typ typ const void*pvArg,
/*6899*/ typ typ typ typ typ typ typ typ typ BYTE*pbData,
/*6900*/ typ typ typ typ typ DWORD cbData,
/*6901*/ typ typ typ typ typ BOOL fFinal
/*6902*/ );
/*6906*/ typedef struct _CMSG_STREAM_INFO{
/*6907*/ DWORD cbContent;
/*6908*/ PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
/*6909*/ void*pvArg;
/*6910*/ }CMSG_STREAM_INFO,*PCMSG_STREAM_INFO;
/*6945*/ 
/*6946*/ HCRYPTMSG
/*6947*/ typ
/*6948*/ CryptMsgOpenToEncode(
/*6949*/ typ typ typ typ typ DWORD dwMsgEncodingType,
/*6950*/ typ typ typ typ typ DWORD dwFlags,
/*6951*/ typ typ typ typ typ DWORD dwMsgType,
/*6952*/ typ typ typ typ typ void const*pvMsgEncodeInfo,
/*6953*/ typ typ typ typ typ typ typ LPSTR pszInnerContentObjID,
/*6954*/ typ typ typ typ typ typ typ PCMSG_STREAM_INFO pStreamInfo
/*6955*/ );
/*6965*/ 
/*6966*/ DWORD
/*6967*/ typ
/*6968*/ CryptMsgCalculateEncodedLength(
/*6969*/ typ typ typ typ typ DWORD dwMsgEncodingType,
/*6970*/ typ typ typ typ typ DWORD dwFlags,
/*6971*/ typ typ typ typ typ DWORD dwMsgType,
/*6972*/ typ typ typ typ typ void const*pvMsgEncodeInfo,
/*6973*/ typ typ typ typ typ typ typ LPSTR pszInnerContentObjID,
/*6974*/ typ typ typ typ typ DWORD cbData
/*6975*/ );
/*6989*/ 
/*6990*/ HCRYPTMSG
/*6991*/ typ
/*6992*/ CryptMsgOpenToDecode(
/*6993*/ typ typ typ typ typ DWORD dwMsgEncodingType,
/*6994*/ typ typ typ typ typ DWORD dwFlags,
/*6995*/ typ typ typ typ typ DWORD dwMsgType,
/*6996*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*6997*/ typ typ PCERT_INFO pRecipientInfo,
/*6998*/ typ typ typ typ typ typ typ PCMSG_STREAM_INFO pStreamInfo
/*6999*/ );
/*7004*/ 
/*7005*/ HCRYPTMSG
/*7006*/ typ
/*7007*/ CryptMsgDuplicate(
/*7008*/ typ typ typ typ typ typ typ HCRYPTMSG hCryptMsg
/*7009*/ );
/*7016*/ 
/*7017*/ BOOL
/*7018*/ typ
/*7019*/ CryptMsgClose(
/*7020*/ typ typ typ typ typ typ typ HCRYPTMSG hCryptMsg
/*7021*/ );
/*7032*/ 
/*7033*/ BOOL
/*7034*/ typ
/*7035*/ CryptMsgUpdate(
/*7036*/ typ typ typ typ typ HCRYPTMSG hCryptMsg,
/*7037*/ typ typ typ typ typ typ typ typ typ const BYTE*pbData,
/*7038*/ typ typ typ typ typ DWORD cbData,
/*7039*/ typ typ typ typ typ BOOL fFinal
/*7040*/ );
/*7066*/ 
/*7067*/ BOOL
/*7068*/ typ
/*7069*/ CryptMsgGetParam(
/*7070*/ typ typ typ typ typ HCRYPTMSG hCryptMsg,
/*7071*/ typ typ typ typ typ DWORD dwParamType,
/*7072*/ typ typ typ typ typ DWORD dwIndex,
/*7073*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*7074*/ typ typ typ typ typ DWORD*pcbData
/*7075*/ );
/*7201*/ typedef struct _CMSG_SIGNER_INFO{
/*7202*/ DWORD dwVersion;
/*7203*/ CERT_NAME_BLOB Issuer;
/*7204*/ CRYPT_INTEGER_BLOB SerialNumber;
/*7205*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*7208*/ CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
/*7210*/ CRYPT_DATA_BLOB EncryptedHash;
/*7211*/ CRYPT_ATTRIBUTES AuthAttrs;
/*7212*/ CRYPT_ATTRIBUTES UnauthAttrs;
/*7213*/ }CMSG_SIGNER_INFO,*PCMSG_SIGNER_INFO;
/*7236*/ typedef struct _CMSG_CMS_SIGNER_INFO{
/*7237*/ DWORD dwVersion;
/*7238*/ CERT_ID SignerId;
/*7239*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*7242*/ CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
/*7244*/ CRYPT_DATA_BLOB EncryptedHash;
/*7245*/ CRYPT_ATTRIBUTES AuthAttrs;
/*7246*/ CRYPT_ATTRIBUTES UnauthAttrs;
/*7247*/ }CMSG_CMS_SIGNER_INFO,*PCMSG_CMS_SIGNER_INFO;
/*7269*/ typedef CRYPT_ATTRIBUTES CMSG_ATTR;
/*7270*/ typedef CRYPT_ATTRIBUTES*PCMSG_ATTR;
/*7510*/ typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO{
/*7511*/ DWORD dwVersion;
/*7514*/ CERT_ID RecipientId;
/*7516*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*7517*/ CRYPT_DATA_BLOB EncryptedKey;
/*7518*/ }CMSG_KEY_TRANS_RECIPIENT_INFO,*PCMSG_KEY_TRANS_RECIPIENT_INFO;
/*7520*/ typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO{
/*7522*/ CERT_ID RecipientId;
/*7524*/ CRYPT_DATA_BLOB EncryptedKey;
/*7527*/ FILETIME Date;
/*7528*/ PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
/*7529*/ }CMSG_RECIPIENT_ENCRYPTED_KEY_INFO,*PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
/*7531*/ typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO{
/*7532*/ DWORD dwVersion;
/*7533*/ DWORD dwOriginatorChoice;
/*7534*/ union{
/*7536*/ CERT_ID OriginatorCertId;
/*7538*/ CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
/*7539*/ }u;
/*7540*/ CRYPT_DATA_BLOB UserKeyingMaterial;
/*7541*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*7543*/ DWORD cRecipientEncryptedKeys;
/*7544*/ PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO*rgpRecipientEncryptedKeys;
/*7545*/ }CMSG_KEY_AGREE_RECIPIENT_INFO,*PCMSG_KEY_AGREE_RECIPIENT_INFO;
/*7551*/ typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO{
/*7552*/ DWORD dwVersion;
/*7553*/ CRYPT_DATA_BLOB KeyId;
/*7554*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*7555*/ CRYPT_DATA_BLOB EncryptedKey;
/*7558*/ FILETIME Date;
/*7559*/ PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
/*7560*/ }CMSG_MAIL_LIST_RECIPIENT_INFO,*PCMSG_MAIL_LIST_RECIPIENT_INFO;
/*7562*/ typedef struct _CMSG_CMS_RECIPIENT_INFO{
/*7563*/ DWORD dwRecipientChoice;
/*7564*/ union{
/*7566*/ PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
/*7568*/ PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
/*7570*/ PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
/*7571*/ }u;
/*7572*/ }CMSG_CMS_RECIPIENT_INFO,*PCMSG_CMS_RECIPIENT_INFO;
/*7605*/ 
/*7606*/ BOOL
/*7607*/ typ
/*7608*/ CryptMsgControl(
/*7609*/ typ typ typ typ typ HCRYPTMSG hCryptMsg,
/*7610*/ typ typ typ typ typ DWORD dwFlags,
/*7611*/ typ typ typ typ typ DWORD dwCtrlType,
/*7612*/ typ typ typ typ typ typ typ void const*pvCtrlPara
/*7613*/ );
/*7683*/ typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA{
/*7684*/ DWORD cbSize;
/*7685*/ HCRYPTPROV_LEGACY hCryptProv;
/*7686*/ DWORD dwSignerIndex;
/*7687*/ DWORD dwSignerType;
/*7688*/ void*pvSigner;
/*7689*/ }CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA,*PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
/*7727*/ typedef struct _CMSG_CTRL_DECRYPT_PARA{
/*7728*/ DWORD cbSize;
/*7731*/ union{
/*7732*/ HCRYPTPROV hCryptProv;
/*7733*/ NCRYPT_KEY_HANDLE hNCryptKey;
/*7734*/ }u;
/*7737*/ DWORD dwKeySpec;
/*7739*/ DWORD dwRecipientIndex;
/*7740*/ }CMSG_CTRL_DECRYPT_PARA,*PCMSG_CTRL_DECRYPT_PARA;
/*7767*/ typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA{
/*7768*/ DWORD cbSize;
/*7770*/ union{
/*7771*/ HCRYPTPROV hCryptProv;
/*7772*/ NCRYPT_KEY_HANDLE hNCryptKey;
/*7773*/ }u;
/*7776*/ DWORD dwKeySpec;
/*7778*/ PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
/*7779*/ DWORD dwRecipientIndex;
/*7780*/ }CMSG_CTRL_KEY_TRANS_DECRYPT_PARA,*PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
/*7811*/ typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA{
/*7812*/ DWORD cbSize;
/*7815*/ union{
/*7816*/ HCRYPTPROV hCryptProv;
/*7817*/ NCRYPT_KEY_HANDLE hNCryptKey;
/*7818*/ }u;
/*7821*/ DWORD dwKeySpec;
/*7823*/ PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
/*7824*/ DWORD dwRecipientIndex;
/*7825*/ DWORD dwRecipientEncryptedKeyIndex;
/*7826*/ CRYPT_BIT_BLOB OriginatorPublicKey;
/*7827*/ }CMSG_CTRL_KEY_AGREE_DECRYPT_PARA,*PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
/*7855*/ typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA{
/*7856*/ DWORD cbSize;
/*7857*/ HCRYPTPROV hCryptProv;
/*7858*/ PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
/*7859*/ DWORD dwRecipientIndex;
/*7860*/ DWORD dwKeyChoice;
/*7861*/ union{
/*7863*/ HCRYPTKEY hKeyEncryptionKey;
/*7865*/ void*pvKeyEncryptionKey;
/*7866*/ }u;
/*7867*/ }CMSG_CTRL_MAIL_LIST_DECRYPT_PARA,*PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
/*7917*/ typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA{
/*7918*/ DWORD cbSize;
/*7919*/ DWORD dwSignerIndex;
/*7920*/ CRYPT_DATA_BLOB blob;
/*7921*/ }CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
/*7933*/ typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA{
/*7934*/ DWORD cbSize;
/*7935*/ DWORD dwSignerIndex;
/*7936*/ DWORD dwUnauthAttrIndex;
/*7937*/ }CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
/*8004*/ BOOL
/*8005*/ typ
/*8006*/ CryptMsgVerifyCountersignatureEncoded(
/*8007*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*8008*/ typ typ typ typ typ DWORD dwEncodingType,
/*8009*/ typ typ typ typ typ typ typ PBYTE pbSignerInfo,
/*8010*/ typ typ typ typ typ DWORD cbSignerInfo,
/*8011*/ typ typ typ typ typ typ typ PBYTE pbSignerInfoCountersignature,
/*8012*/ typ typ typ typ typ DWORD cbSignerInfoCountersignature,
/*8013*/ typ typ typ typ typ PCERT_INFO pciCountersigner
/*8014*/ );
/*8027*/ BOOL
/*8028*/ typ
/*8029*/ CryptMsgVerifyCountersignatureEncodedEx(
/*8030*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*8031*/ typ typ typ typ typ DWORD dwEncodingType,
/*8032*/ typ typ typ typ typ typ typ PBYTE pbSignerInfo,
/*8033*/ typ typ typ typ typ DWORD cbSignerInfo,
/*8034*/ typ typ typ typ typ typ typ PBYTE pbSignerInfoCountersignature,
/*8035*/ typ typ typ typ typ DWORD cbSignerInfoCountersignature,
/*8036*/ typ typ typ typ typ DWORD dwSignerType,
/*8037*/ typ typ typ typ typ void*pvSigner,
/*8038*/ typ typ DWORD dwFlags,
/*8039*/ typ typ void*pvReserved
/*8040*/ );
/*8051*/ BOOL
/*8052*/ typ
/*8053*/ CryptMsgCountersign(
/*8054*/ typ typ typ typ typ HCRYPTMSG hCryptMsg,
/*8055*/ typ typ typ typ typ DWORD dwIndex,
/*8056*/ typ typ typ typ typ DWORD cCountersigners,
/*8057*/ typ typ typ typ typ typ typ PCMSG_SIGNER_ENCODE_INFO rgCountersigners
/*8058*/ );
/*8066*/ BOOL
/*8067*/ typ
/*8068*/ CryptMsgCountersignEncoded(
/*8069*/ typ typ typ typ typ DWORD dwEncodingType,
/*8070*/ typ typ typ typ typ typ typ PBYTE pbSignerInfo,
/*8071*/ typ typ typ typ typ DWORD cbSignerInfo,
/*8072*/ typ typ typ typ typ DWORD cCountersigners,
/*8073*/ typ typ typ typ typ typ typ PCMSG_SIGNER_ENCODE_INFO rgCountersigners,
/*8074*/ typ typ typ typ typ typ typ typ typ PBYTE pbCountersignature,
/*8075*/ typ typ typ typ typ PDWORD pcbCountersignature
/*8076*/ );
/*8085*/ typedef void*(typ*PFN_CMSG_ALLOC)(
/*8086*/ typ typ typ typ typ size_t cb
/*8087*/ );
/*8089*/ typedef void(typ*PFN_CMSG_FREE)(
/*8090*/ typ typ typ typ typ void*pv
/*8091*/ );
/*8106*/ typedef typ BOOL(typ*PFN_CMSG_GEN_ENCRYPT_KEY)(
/*8107*/ typ typ typ typ typ HCRYPTPROV*phCryptProv,
/*8108*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
/*8109*/ typ typ typ typ typ typ typ PVOID pvEncryptAuxInfo,
/*8110*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
/*8111*/ typ PFN_CMSG_ALLOC pfnAlloc,
/*8112*/ typ typ typ typ typ HCRYPTKEY*phEncryptKey,
/*8113*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PBYTE*ppbEncryptParameters,
/*8114*/ typ typ typ typ typ PDWORD pcbEncryptParameters
/*8115*/ );
/*8118*/ typedef BOOL(typ*PFN_CMSG_EXPORT_ENCRYPT_KEY)(
/*8119*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*8120*/ typ typ typ typ typ HCRYPTKEY hEncryptKey,
/*8121*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
/*8122*/ typ typ typ typ typ typ typ typ typ PBYTE pbData,
/*8123*/ typ typ typ typ typ PDWORD pcbData
/*8124*/ );
/*8127*/ typedef BOOL(typ*PFN_CMSG_IMPORT_ENCRYPT_KEY)(
/*8128*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*8129*/ typ typ typ typ typ DWORD dwKeySpec,
/*8130*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
/*8131*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
/*8132*/ typ typ typ typ typ typ typ PBYTE pbEncodedKey,
/*8133*/ typ typ typ typ typ DWORD cbEncodedKey,
/*8134*/ typ typ typ typ typ HCRYPTKEY*phEncryptKey
/*8135*/ );
/*8160*/ typedef struct _CMSG_CONTENT_ENCRYPT_INFO{
/*8161*/ DWORD cbSize;
/*8162*/ HCRYPTPROV_LEGACY hCryptProv;
/*8163*/ CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
/*8164*/ void*pvEncryptionAuxInfo;
/*8165*/ DWORD cRecipients;
/*8166*/ PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
/*8167*/ PFN_CMSG_ALLOC pfnAlloc;
/*8168*/ PFN_CMSG_FREE pfnFree;
/*8169*/ DWORD dwEncryptFlags;
/*8170*/ union{
/*8172*/ HCRYPTKEY hContentEncryptKey;
/*8174*/ BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
/*8175*/ }u;
/*8176*/ DWORD dwFlags;
/*8178*/ BOOL fCNG;
/*8180*/ BYTE*pbCNGContentEncryptKeyObject;
/*8181*/ BYTE*pbContentEncryptKey;
/*8182*/ DWORD cbContentEncryptKey;
/*8183*/ }CMSG_CONTENT_ENCRYPT_INFO,*PCMSG_CONTENT_ENCRYPT_INFO;
/*8248*/ typedef BOOL(typ*PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(
/*8249*/ typ typ typ typ typ PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
/*8250*/ typ typ typ typ typ DWORD dwFlags,
/*8251*/ typ typ void*pvReserved
/*8252*/ );
/*8265*/ typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO{
/*8266*/ DWORD cbSize;
/*8267*/ DWORD dwRecipientIndex;
/*8268*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*8269*/ CRYPT_DATA_BLOB EncryptedKey;
/*8270*/ DWORD dwFlags;
/*8271*/ }CMSG_KEY_TRANS_ENCRYPT_INFO,*PCMSG_KEY_TRANS_ENCRYPT_INFO;
/*8306*/ typedef BOOL(typ*PFN_CMSG_EXPORT_KEY_TRANS)(
/*8307*/ typ typ typ typ typ PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
/*8308*/ typ typ typ typ typ PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
/*8309*/ typ typ typ typ typ PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
/*8310*/ typ typ typ typ typ DWORD dwFlags,
/*8311*/ typ typ void*pvReserved
/*8312*/ );
/*8326*/ typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO{
/*8327*/ DWORD cbSize;
/*8328*/ CRYPT_DATA_BLOB EncryptedKey;
/*8329*/ }CMSG_KEY_AGREE_KEY_ENCRYPT_INFO,*PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
/*8337*/ typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO{
/*8338*/ DWORD cbSize;
/*8339*/ DWORD dwRecipientIndex;
/*8340*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*8341*/ CRYPT_DATA_BLOB UserKeyingMaterial;
/*8342*/ DWORD dwOriginatorChoice;
/*8343*/ union{
/*8345*/ CERT_ID OriginatorCertId;
/*8347*/ CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
/*8348*/ }u;
/*8349*/ DWORD cKeyAgreeKeyEncryptInfo;
/*8350*/ PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO*rgpKeyAgreeKeyEncryptInfo;
/*8351*/ DWORD dwFlags;
/*8352*/ }CMSG_KEY_AGREE_ENCRYPT_INFO,*PCMSG_KEY_AGREE_ENCRYPT_INFO;
/*8413*/ typedef BOOL(typ*PFN_CMSG_EXPORT_KEY_AGREE)(
/*8414*/ typ typ typ typ typ PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
/*8415*/ typ typ typ typ typ PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
/*8416*/ typ typ typ typ typ PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
/*8417*/ typ typ typ typ typ DWORD dwFlags,
/*8418*/ typ typ void*pvReserved
/*8419*/ );
/*8432*/ typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO{
/*8433*/ DWORD cbSize;
/*8434*/ DWORD dwRecipientIndex;
/*8435*/ CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
/*8436*/ CRYPT_DATA_BLOB EncryptedKey;
/*8437*/ DWORD dwFlags;
/*8438*/ }CMSG_MAIL_LIST_ENCRYPT_INFO,*PCMSG_MAIL_LIST_ENCRYPT_INFO;
/*8474*/ typedef BOOL(typ*PFN_CMSG_EXPORT_MAIL_LIST)(
/*8475*/ typ typ typ typ typ PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
/*8476*/ typ typ typ typ typ PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
/*8477*/ typ typ typ typ typ PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
/*8478*/ typ typ typ typ typ DWORD dwFlags,
/*8479*/ typ typ void*pvReserved
/*8480*/ );
/*8503*/ typedef BOOL(typ*PFN_CMSG_IMPORT_KEY_TRANS)(
/*8504*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
/*8505*/ typ typ typ typ typ PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
/*8506*/ typ typ typ typ typ DWORD dwFlags,
/*8507*/ typ typ void*pvReserved,
/*8508*/ typ typ typ typ typ HCRYPTKEY*phContentEncryptKey
/*8509*/ );
/*8513*/ typedef BOOL(typ*PFN_CMSG_IMPORT_KEY_AGREE)(
/*8514*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
/*8515*/ typ typ typ typ typ PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
/*8516*/ typ typ typ typ typ DWORD dwFlags,
/*8517*/ typ typ void*pvReserved,
/*8518*/ typ typ typ typ typ HCRYPTKEY*phContentEncryptKey
/*8519*/ );
/*8523*/ typedef BOOL(typ*PFN_CMSG_IMPORT_MAIL_LIST)(
/*8524*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
/*8525*/ typ typ typ typ typ PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
/*8526*/ typ typ typ typ typ DWORD dwFlags,
/*8527*/ typ typ void*pvReserved,
/*8528*/ typ typ typ typ typ HCRYPTKEY*phContentEncryptKey
/*8529*/ );
/*8541*/ typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO{
/*8542*/ DWORD cbSize;
/*8543*/ CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
/*8544*/ PFN_CMSG_ALLOC pfnAlloc;
/*8545*/ PFN_CMSG_FREE pfnFree;
/*8550*/ NCRYPT_KEY_HANDLE hNCryptKey;
/*8552*/ BYTE*pbContentEncryptKey;
/*8553*/ DWORD cbContentEncryptKey;
/*8555*/ BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
/*8556*/ BYTE*pbCNGContentEncryptKeyObject;
/*8557*/ }CMSG_CNG_CONTENT_DECRYPT_INFO,*PCMSG_CNG_CONTENT_DECRYPT_INFO;
/*8577*/ typedef BOOL(typ*PFN_CMSG_CNG_IMPORT_KEY_TRANS)(
/*8578*/ typ typ typ typ typ PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
/*8579*/ typ typ typ typ typ PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
/*8580*/ typ typ typ typ typ DWORD dwFlags,
/*8581*/ typ typ void*pvReserved
/*8582*/ );
/*8602*/ typedef BOOL(typ*PFN_CMSG_CNG_IMPORT_KEY_AGREE)(
/*8603*/ typ typ typ typ typ PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
/*8604*/ typ typ typ typ typ PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
/*8605*/ typ typ typ typ typ DWORD dwFlags,
/*8606*/ typ typ void*pvReserved
/*8607*/ );
/*8627*/ typedef BOOL(typ*PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY)(
/*8628*/ typ typ typ typ typ PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
/*8629*/ typ typ typ typ typ DWORD dwFlags,
/*8630*/ typ typ void*pvReserved
/*8631*/ );
/*8708*/ typedef void*HCERTSTORE;
/*8720*/ typedef struct _CERT_CONTEXT{
/*8721*/ DWORD dwCertEncodingType;
/*8722*/ BYTE*pbCertEncoded;
/*8723*/ DWORD cbCertEncoded;
/*8724*/ PCERT_INFO pCertInfo;
/*8725*/ HCERTSTORE hCertStore;
/*8726*/ }CERT_CONTEXT,*PCERT_CONTEXT;
/*8727*/ typedef const CERT_CONTEXT*PCCERT_CONTEXT;
/*8739*/ typedef struct _CRL_CONTEXT{
/*8740*/ DWORD dwCertEncodingType;
/*8741*/ BYTE*pbCrlEncoded;
/*8742*/ DWORD cbCrlEncoded;
/*8743*/ PCRL_INFO pCrlInfo;
/*8744*/ HCERTSTORE hCertStore;
/*8745*/ }CRL_CONTEXT,*PCRL_CONTEXT;
/*8746*/ typedef const CRL_CONTEXT*PCCRL_CONTEXT;
/*8758*/ typedef struct _CTL_CONTEXT{
/*8759*/ DWORD dwMsgAndCertEncodingType;
/*8760*/ BYTE*pbCtlEncoded;
/*8761*/ DWORD cbCtlEncoded;
/*8762*/ PCTL_INFO pCtlInfo;
/*8763*/ HCERTSTORE hCertStore;
/*8764*/ HCRYPTMSG hCryptMsg;
/*8765*/ BYTE*pbCtlContent;
/*8766*/ DWORD cbCtlContent;
/*8767*/ }CTL_CONTEXT,*PCTL_CONTEXT;
/*8768*/ typedef const CTL_CONTEXT*PCCTL_CONTEXT;
/*8920*/ typedef struct _CRYPT_KEY_PROV_PARAM{
/*8921*/ DWORD dwParam;
/*8922*/ BYTE*pbData;
/*8923*/ DWORD cbData;
/*8924*/ DWORD dwFlags;
/*8925*/ }CRYPT_KEY_PROV_PARAM,*PCRYPT_KEY_PROV_PARAM;
/*8927*/ typedef struct _CRYPT_KEY_PROV_INFO{
/*8928*/ LPWSTR pwszContainerName;
/*8929*/ LPWSTR pwszProvName;
/*8930*/ DWORD dwProvType;
/*8931*/ DWORD dwFlags;
/*8932*/ DWORD cProvParam;
/*8933*/ PCRYPT_KEY_PROV_PARAM rgProvParam;
/*8934*/ DWORD dwKeySpec;
/*8935*/ }CRYPT_KEY_PROV_INFO,*PCRYPT_KEY_PROV_INFO;
/*8960*/ typedef struct _CERT_KEY_CONTEXT{
/*8961*/ DWORD cbSize;
/*8962*/ union{
/*8963*/ HCRYPTPROV hCryptProv;
/*8966*/ NCRYPT_KEY_HANDLE hNCryptKey;
/*8967*/ }u;
/*8968*/ DWORD dwKeySpec;
/*8969*/ }CERT_KEY_CONTEXT,*PCERT_KEY_CONTEXT;
/*8977*/ typedef struct _ROOT_INFO_LUID{
/*8978*/ DWORD LowPart;
/*8979*/ LONG HighPart;
/*8980*/ }ROOT_INFO_LUID,*PROOT_INFO_LUID;
/*8982*/ typedef struct _CRYPT_SMART_CARD_ROOT_INFO{
/*8983*/ BYTE rgbCardID[16];
/*8984*/ ROOT_INFO_LUID luid;
/*8985*/ }CRYPT_SMART_CARD_ROOT_INFO,*PCRYPT_SMART_CARD_ROOT_INFO;
/*9086*/ typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA{
/*9087*/ union{
/*9088*/ HKEY hKeyBase;
/*9089*/ void*pvBase;
/*9090*/ }u;
/*9091*/ union{
/*9092*/ void*pvSystemStore;
/*9093*/ LPCSTR pszSystemStore;
/*9094*/ LPCWSTR pwszSystemStore;
/*9095*/ }u2;
/*9096*/ }CERT_SYSTEM_STORE_RELOCATE_PARA,*PCERT_SYSTEM_STORE_RELOCATE_PARA;
/*9372*/ typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA{
/*9373*/ HKEY hKeyBase;
/*9374*/ LPWSTR pwszRegPath;
/*9375*/ }CERT_REGISTRY_STORE_CLIENT_GPT_PARA,*PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
/*9385*/ typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA{
/*9386*/ HKEY hKey;
/*9387*/ LPWSTR pwszStoreDirectory;
/*9388*/ }CERT_REGISTRY_STORE_ROAMING_PARA,*PCERT_REGISTRY_STORE_ROAMING_PARA;
/*9464*/ typedef struct _CERT_LDAP_STORE_OPENED_PARA{
/*9465*/ void*pvLdapSessionHandle;
/*9467*/ LPCWSTR pwszLdapUrl;
/*9468*/ }CERT_LDAP_STORE_OPENED_PARA,*PCERT_LDAP_STORE_OPENED_PARA;
/*9832*/ 
/*9833*/ typ __inner_checkReturn
/*9834*/ HCERTSTORE
/*9835*/ typ
/*9836*/ CertOpenStore(
/*9837*/ typ typ typ typ typ LPCSTR lpszStoreProvider,
/*9838*/ typ typ typ typ typ DWORD dwEncodingType,
/*9839*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*9840*/ typ typ typ typ typ DWORD dwFlags,
/*9841*/ typ typ typ typ typ typ typ const void*pvPara
/*9842*/ );
/*9850*/ typedef void*HCERTSTOREPROV;
/*9861*/ typedef struct _CERT_STORE_PROV_INFO{
/*9862*/ DWORD cbSize;
/*9863*/ DWORD cStoreProvFunc;
/*9864*/ void**rgpvStoreProvFunc;
/*9865*/ HCERTSTOREPROV hStoreProv;
/*9866*/ DWORD dwStoreProvFlags;
/*9867*/ HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
/*9868*/ }CERT_STORE_PROV_INFO,*PCERT_STORE_PROV_INFO;
/*9877*/ typedef BOOL(typ*PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
/*9878*/ typ typ typ typ typ LPCSTR lpszStoreProvider,
/*9879*/ typ typ typ typ typ DWORD dwEncodingType,
/*9880*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*9881*/ typ typ typ typ typ DWORD dwFlags,
/*9882*/ typ typ typ typ typ typ typ const void*pvPara,
/*9883*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*9884*/ typ typ typ typ typ PCERT_STORE_PROV_INFO pStoreProvInfo
/*9885*/ );
/*9943*/ typedef void(typ*PFN_CERT_STORE_PROV_CLOSE)(
/*9944*/ typ typ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*9945*/ typ typ typ typ typ DWORD dwFlags
/*9946*/ );
/*9953*/ typedef typ BOOL(typ*PFN_CERT_STORE_PROV_READ_CERT)(
/*9954*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*9955*/ typ typ typ typ typ PCCERT_CONTEXT pStoreCertContext,
/*9956*/ typ typ typ typ typ DWORD dwFlags,
/*9957*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppProvCertContext
/*9958*/ );
/*9969*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_WRITE_CERT)(
/*9970*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*9971*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*9972*/ typ typ typ typ typ DWORD dwFlags
/*9973*/ );
/*9979*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_DELETE_CERT)(
/*9980*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*9981*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*9982*/ typ typ typ typ typ DWORD dwFlags
/*9983*/ );
/*9993*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
/*9994*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*9995*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*9996*/ typ typ typ typ typ DWORD dwPropId,
/*9997*/ typ typ typ typ typ DWORD dwFlags,
/*9998*/ typ typ typ typ typ typ typ const void*pvData
/*9999*/ );
/*10006*/ typedef typ BOOL(typ*PFN_CERT_STORE_PROV_READ_CRL)(
/*10007*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10008*/ typ typ typ typ typ PCCRL_CONTEXT pStoreCrlContext,
/*10009*/ typ typ typ typ typ DWORD dwFlags,
/*10010*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCRL_CONTEXT*ppProvCrlContext
/*10011*/ );
/*10020*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_WRITE_CRL)(
/*10021*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10022*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*10023*/ typ typ typ typ typ DWORD dwFlags
/*10024*/ );
/*10029*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_DELETE_CRL)(
/*10030*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10031*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*10032*/ typ typ typ typ typ DWORD dwFlags
/*10033*/ );
/*10043*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
/*10044*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10045*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*10046*/ typ typ typ typ typ DWORD dwPropId,
/*10047*/ typ typ typ typ typ DWORD dwFlags,
/*10048*/ typ typ typ typ typ typ typ const void*pvData
/*10049*/ );
/*10056*/ typedef typ BOOL(typ*PFN_CERT_STORE_PROV_READ_CTL)(
/*10057*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10058*/ typ typ typ typ typ PCCTL_CONTEXT pStoreCtlContext,
/*10059*/ typ typ typ typ typ DWORD dwFlags,
/*10060*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCTL_CONTEXT*ppProvCtlContext
/*10061*/ );
/*10070*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_WRITE_CTL)(
/*10071*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10072*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*10073*/ typ typ typ typ typ DWORD dwFlags
/*10074*/ );
/*10079*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_DELETE_CTL)(
/*10080*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10081*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*10082*/ typ typ typ typ typ DWORD dwFlags
/*10083*/ );
/*10093*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
/*10094*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10095*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*10096*/ typ typ typ typ typ DWORD dwPropId,
/*10097*/ typ typ typ typ typ DWORD dwFlags,
/*10098*/ typ typ typ typ typ typ typ const void*pvData
/*10099*/ );
/*10101*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_CONTROL)(
/*10102*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10103*/ typ typ typ typ typ DWORD dwFlags,
/*10104*/ typ typ typ typ typ DWORD dwCtrlType,
/*10105*/ typ typ typ typ typ typ typ void const*pvCtrlPara
/*10106*/ );
/*10108*/ typedef struct _CERT_STORE_PROV_FIND_INFO{
/*10109*/ DWORD cbSize;
/*10110*/ DWORD dwMsgAndCertEncodingType;
/*10111*/ DWORD dwFindFlags;
/*10112*/ DWORD dwFindType;
/*10113*/ const void*pvFindPara;
/*10114*/ }CERT_STORE_PROV_FIND_INFO,*PCERT_STORE_PROV_FIND_INFO;
/*10115*/ typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
/*10116*/ *PCCERT_STORE_PROV_FIND_INFO;
/*10118*/ typedef typ BOOL(typ*PFN_CERT_STORE_PROV_FIND_CERT)(
/*10119*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10120*/ typ typ typ typ typ PCCERT_STORE_PROV_FIND_INFO pFindInfo,
/*10121*/ typ typ typ typ typ PCCERT_CONTEXT pPrevCertContext,
/*10122*/ typ typ typ typ typ DWORD dwFlags,
/*10123*/ typ typ typ typ typ typ typ typ typ void**ppvStoreProvFindInfo,
/*10124*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppProvCertContext
/*10125*/ );
/*10127*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
/*10128*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10129*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*10130*/ typ typ typ typ typ void*pvStoreProvFindInfo,
/*10131*/ typ typ typ typ typ DWORD dwFlags
/*10132*/ );
/*10134*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
/*10135*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10136*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*10137*/ typ typ typ typ typ DWORD dwPropId,
/*10138*/ typ typ typ typ typ DWORD dwFlags,
/*10139*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*10140*/ typ typ typ typ typ DWORD*pcbData
/*10141*/ );
/*10144*/ typedef typ BOOL(typ*PFN_CERT_STORE_PROV_FIND_CRL)(
/*10145*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10146*/ typ typ typ typ typ PCCERT_STORE_PROV_FIND_INFO pFindInfo,
/*10147*/ typ typ typ typ typ PCCRL_CONTEXT pPrevCrlContext,
/*10148*/ typ typ typ typ typ DWORD dwFlags,
/*10149*/ typ typ typ typ typ typ typ typ typ void**ppvStoreProvFindInfo,
/*10150*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCRL_CONTEXT*ppProvCrlContext
/*10151*/ );
/*10153*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
/*10154*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10155*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*10156*/ typ typ typ typ typ void*pvStoreProvFindInfo,
/*10157*/ typ typ typ typ typ DWORD dwFlags
/*10158*/ );
/*10160*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
/*10161*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10162*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*10163*/ typ typ typ typ typ DWORD dwPropId,
/*10164*/ typ typ typ typ typ DWORD dwFlags,
/*10165*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*10166*/ typ typ typ typ typ DWORD*pcbData
/*10167*/ );
/*10169*/ typedef typ BOOL(typ*PFN_CERT_STORE_PROV_FIND_CTL)(
/*10170*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10171*/ typ typ typ typ typ PCCERT_STORE_PROV_FIND_INFO pFindInfo,
/*10172*/ typ typ typ typ typ PCCTL_CONTEXT pPrevCtlContext,
/*10173*/ typ typ typ typ typ DWORD dwFlags,
/*10174*/ typ typ typ typ typ typ typ typ typ void**ppvStoreProvFindInfo,
/*10175*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCTL_CONTEXT*ppProvCtlContext
/*10176*/ );
/*10178*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
/*10179*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10180*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*10181*/ typ typ typ typ typ void*pvStoreProvFindInfo,
/*10182*/ typ typ typ typ typ DWORD dwFlags
/*10183*/ );
/*10185*/ typedef BOOL(typ*PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
/*10186*/ typ typ typ typ typ HCERTSTOREPROV hStoreProv,
/*10187*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*10188*/ typ typ typ typ typ DWORD dwPropId,
/*10189*/ typ typ typ typ typ DWORD dwFlags,
/*10190*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*10191*/ typ typ typ typ typ DWORD*pcbData
/*10192*/ );
/*10198*/ 
/*10199*/ HCERTSTORE
/*10200*/ typ
/*10201*/ CertDuplicateStore(
/*10202*/ typ typ typ typ typ HCERTSTORE hCertStore
/*10203*/ );
/*10267*/ 
/*10268*/ BOOL
/*10269*/ typ
/*10270*/ CertSaveStore(
/*10271*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*10272*/ typ typ typ typ typ DWORD dwEncodingType,
/*10273*/ typ typ typ typ typ DWORD dwSaveAs,
/*10274*/ typ typ typ typ typ DWORD dwSaveTo,
/*10275*/ typ typ typ typ typ void*pvSaveToPara,
/*10276*/ typ typ typ typ typ DWORD dwFlags
/*10277*/ );
/*10309*/ 
/*10310*/ BOOL
/*10311*/ typ
/*10312*/ CertCloseStore(
/*10313*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*10314*/ typ typ typ typ typ DWORD dwFlags
/*10315*/ );
/*10329*/ 
/*10330*/ PCCERT_CONTEXT
/*10331*/ typ
/*10332*/ CertGetSubjectCertificateFromStore(
/*10333*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*10334*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*10335*/ typ typ typ typ typ PCERT_INFO pCertId
/*10337*/ );
/*10355*/ 
/*10356*/ PCCERT_CONTEXT
/*10357*/ typ
/*10358*/ CertEnumCertificatesInStore(
/*10359*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*10360*/ typ typ typ typ typ typ typ PCCERT_CONTEXT pPrevCertContext
/*10361*/ );
/*10387*/ 
/*10388*/ PCCERT_CONTEXT
/*10389*/ typ
/*10390*/ CertFindCertificateInStore(
/*10391*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*10392*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*10393*/ typ typ typ typ typ DWORD dwFindFlags,
/*10394*/ typ typ typ typ typ DWORD dwFindType,
/*10395*/ typ typ typ typ typ typ typ const void*pvFindPara,
/*10396*/ typ typ typ typ typ typ typ PCCERT_CONTEXT pPrevCertContext
/*10397*/ );
/*10734*/ 
/*10735*/ PCCERT_CONTEXT
/*10736*/ typ
/*10737*/ CertGetIssuerCertificateFromStore(
/*10738*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*10739*/ typ typ typ typ typ PCCERT_CONTEXT pSubjectContext,
/*10740*/ typ typ typ typ typ typ typ PCCERT_CONTEXT pPrevIssuerContext,
/*10741*/ typ typ typ typ typ DWORD*pdwFlags
/*10742*/ );
/*10754*/ 
/*10755*/ BOOL
/*10756*/ typ
/*10757*/ CertVerifySubjectCertificateContext(
/*10758*/ typ typ typ typ typ PCCERT_CONTEXT pSubject,
/*10759*/ typ typ typ typ typ typ typ PCCERT_CONTEXT pIssuer,
/*10760*/ typ typ typ typ typ DWORD*pdwFlags
/*10761*/ );
/*10766*/ 
/*10767*/ PCCERT_CONTEXT
/*10768*/ typ
/*10769*/ CertDuplicateCertificateContext(
/*10770*/ typ typ typ typ typ typ typ PCCERT_CONTEXT pCertContext
/*10771*/ );
/*10787*/ 
/*10788*/ PCCERT_CONTEXT
/*10789*/ typ
/*10790*/ CertCreateCertificateContext(
/*10791*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*10792*/ typ typ typ typ typ typ typ const BYTE*pbCertEncoded,
/*10793*/ typ typ typ typ typ DWORD cbCertEncoded
/*10794*/ );
/*10802*/ 
/*10803*/ BOOL
/*10804*/ typ
/*10805*/ CertFreeCertificateContext(
/*10806*/ typ typ typ typ typ typ typ PCCERT_CONTEXT pCertContext
/*10807*/ );
/*10932*/ 
/*10933*/ BOOL
/*10934*/ typ
/*10935*/ CertSetCertificateContextProperty(
/*10936*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*10937*/ typ typ typ typ typ DWORD dwPropId,
/*10938*/ typ typ typ typ typ DWORD dwFlags,
/*10939*/ typ typ typ typ typ typ typ const void*pvData
/*10940*/ );
/*11009*/ 
/*11010*/ BOOL
/*11011*/ typ
/*11012*/ CertGetCertificateContextProperty(
/*11013*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*11014*/ typ typ typ typ typ DWORD dwPropId,
/*11015*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*11016*/ typ typ typ typ typ DWORD*pcbData
/*11017*/ );
/*11033*/ 
/*11034*/ DWORD
/*11035*/ typ
/*11036*/ CertEnumCertificateContextProperties(
/*11037*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*11038*/ typ typ typ typ typ DWORD dwPropId
/*11039*/ );
/*11058*/ 
/*11059*/ BOOL
/*11060*/ typ
/*11061*/ CertCreateCTLEntryFromCertificateContextProperties(
/*11062*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*11063*/ typ typ typ typ typ DWORD cOptAttr,
/*11064*/ typ typ typ typ typ typ typ typ typ PCRYPT_ATTRIBUTE rgOptAttr,
/*11065*/ typ typ typ typ typ DWORD dwFlags,
/*11066*/ typ typ void*pvReserved,
/*11067*/ typ typ typ typ typ typ typ typ typ PCTL_ENTRY pCtlEntry,
/*11068*/ typ typ typ typ typ DWORD*pcbCtlEntry
/*11069*/ );
/*11086*/ 
/*11087*/ BOOL
/*11088*/ typ
/*11089*/ CertSetCertificateContextPropertiesFromCTLEntry(
/*11090*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*11091*/ typ typ typ typ typ PCTL_ENTRY pCtlEntry,
/*11092*/ typ typ typ typ typ DWORD dwFlags
/*11093*/ );
/*11147*/ 
/*11148*/ PCCRL_CONTEXT
/*11149*/ typ
/*11150*/ CertGetCRLFromStore(
/*11151*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*11152*/ typ typ typ typ typ typ typ PCCERT_CONTEXT pIssuerContext,
/*11153*/ typ typ typ typ typ typ typ PCCRL_CONTEXT pPrevCrlContext,
/*11154*/ typ typ typ typ typ DWORD*pdwFlags
/*11155*/ );
/*11173*/ 
/*11174*/ PCCRL_CONTEXT
/*11175*/ typ
/*11176*/ CertEnumCRLsInStore(
/*11177*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*11178*/ typ typ typ typ typ typ typ PCCRL_CONTEXT pPrevCrlContext
/*11179*/ );
/*11204*/ 
/*11205*/ PCCRL_CONTEXT
/*11206*/ typ
/*11207*/ CertFindCRLInStore(
/*11208*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*11209*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*11210*/ typ typ typ typ typ DWORD dwFindFlags,
/*11211*/ typ typ typ typ typ DWORD dwFindType,
/*11212*/ typ typ typ typ typ typ typ const void*pvFindPara,
/*11213*/ typ typ typ typ typ typ typ PCCRL_CONTEXT pPrevCrlContext
/*11214*/ );
/*11289*/ typedef struct _CRL_FIND_ISSUED_FOR_PARA{
/*11290*/ PCCERT_CONTEXT pSubjectCert;
/*11291*/ PCCERT_CONTEXT pIssuerCert;
/*11292*/ }CRL_FIND_ISSUED_FOR_PARA,*PCRL_FIND_ISSUED_FOR_PARA;
/*11298*/ 
/*11299*/ PCCRL_CONTEXT
/*11300*/ typ
/*11301*/ CertDuplicateCRLContext(
/*11302*/ typ typ typ typ typ typ typ PCCRL_CONTEXT pCrlContext
/*11303*/ );
/*11319*/ 
/*11320*/ PCCRL_CONTEXT
/*11321*/ typ
/*11322*/ CertCreateCRLContext(
/*11323*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*11324*/ typ typ typ typ typ typ typ const BYTE*pbCrlEncoded,
/*11325*/ typ typ typ typ typ DWORD cbCrlEncoded
/*11326*/ );
/*11334*/ 
/*11335*/ BOOL
/*11336*/ typ
/*11337*/ CertFreeCRLContext(
/*11338*/ typ typ typ typ typ typ typ PCCRL_CONTEXT pCrlContext
/*11339*/ );
/*11346*/ 
/*11347*/ BOOL
/*11348*/ typ
/*11349*/ CertSetCRLContextProperty(
/*11350*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*11351*/ typ typ typ typ typ DWORD dwPropId,
/*11352*/ typ typ typ typ typ DWORD dwFlags,
/*11353*/ typ typ typ typ typ typ typ const void*pvData
/*11354*/ );
/*11364*/ 
/*11365*/ BOOL
/*11366*/ typ
/*11367*/ CertGetCRLContextProperty(
/*11368*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*11369*/ typ typ typ typ typ DWORD dwPropId,
/*11370*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*11371*/ typ typ typ typ typ DWORD*pcbData
/*11372*/ );
/*11384*/ 
/*11385*/ DWORD
/*11386*/ typ
/*11387*/ CertEnumCRLContextProperties(
/*11388*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*11389*/ typ typ typ typ typ DWORD dwPropId
/*11390*/ );
/*11405*/ 
/*11406*/ BOOL
/*11407*/ typ
/*11408*/ CertFindCertificateInCRL(
/*11409*/ typ typ typ typ typ PCCERT_CONTEXT pCert,
/*11410*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*11411*/ typ typ typ typ typ DWORD dwFlags,
/*11412*/ typ typ void*pvReserved,
/*11413*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCRL_ENTRY*ppCrlEntry
/*11414*/ );
/*11428*/ 
/*11429*/ BOOL
/*11430*/ typ
/*11431*/ CertIsValidCRLForCertificate(
/*11432*/ typ typ typ typ typ PCCERT_CONTEXT pCert,
/*11433*/ typ typ typ typ typ PCCRL_CONTEXT pCrl,
/*11434*/ typ typ typ typ typ DWORD dwFlags,
/*11435*/ typ typ void*pvReserved
/*11436*/ );
/*11496*/ 
/*11497*/ typ
/*11498*/ BOOL
/*11499*/ typ
/*11500*/ CertAddEncodedCertificateToStore(
/*11501*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*11502*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*11503*/ typ typ typ typ typ typ typ const BYTE*pbCertEncoded,
/*11504*/ typ typ typ typ typ DWORD cbCertEncoded,
/*11505*/ typ typ typ typ typ DWORD dwAddDisposition,
/*11506*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppCertContext
/*11507*/ );
/*11566*/ 
/*11567*/ typ
/*11568*/ BOOL
/*11569*/ typ
/*11570*/ CertAddCertificateContextToStore(
/*11571*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*11572*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*11573*/ typ typ typ typ typ DWORD dwAddDisposition,
/*11574*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppStoreContext
/*11575*/ );
/*11621*/ 
/*11622*/ typ
/*11623*/ BOOL
/*11624*/ typ
/*11625*/ CertAddSerializedElementToStore(
/*11626*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*11627*/ typ typ typ typ typ typ typ const BYTE*pbElement,
/*11628*/ typ typ typ typ typ DWORD cbElement,
/*11629*/ typ typ typ typ typ DWORD dwAddDisposition,
/*11630*/ typ typ typ typ typ DWORD dwFlags,
/*11631*/ typ typ typ typ typ DWORD dwContextTypeFlags,
/*11632*/ typ typ typ typ typ typ typ DWORD*pdwContextType,
/*11633*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ const void**ppvContext
/*11634*/ );
/*11651*/ 
/*11652*/ BOOL
/*11653*/ typ
/*11654*/ CertDeleteCertificateFromStore(
/*11655*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext
/*11656*/ );
/*11674*/ 
/*11675*/ typ
/*11676*/ BOOL
/*11677*/ typ
/*11678*/ CertAddEncodedCRLToStore(
/*11679*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*11680*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*11681*/ typ typ typ typ typ typ typ const BYTE*pbCrlEncoded,
/*11682*/ typ typ typ typ typ DWORD cbCrlEncoded,
/*11683*/ typ typ typ typ typ DWORD dwAddDisposition,
/*11684*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCRL_CONTEXT*ppCrlContext
/*11685*/ );
/*11707*/ 
/*11708*/ typ
/*11709*/ BOOL
/*11710*/ typ
/*11711*/ CertAddCRLContextToStore(
/*11712*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*11713*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*11714*/ typ typ typ typ typ DWORD dwAddDisposition,
/*11715*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCRL_CONTEXT*ppStoreContext
/*11716*/ );
/*11730*/ 
/*11731*/ BOOL
/*11732*/ typ
/*11733*/ CertDeleteCRLFromStore(
/*11734*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext
/*11735*/ );
/*11741*/ 
/*11742*/ BOOL
/*11743*/ typ
/*11744*/ CertSerializeCertificateStoreElement(
/*11745*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*11746*/ typ typ typ typ typ DWORD dwFlags,
/*11747*/ typ typ typ typ typ typ typ typ typ BYTE*pbElement,
/*11748*/ typ typ typ typ typ DWORD*pcbElement
/*11749*/ );
/*11755*/ 
/*11756*/ BOOL
/*11757*/ typ
/*11758*/ CertSerializeCRLStoreElement(
/*11759*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*11760*/ typ typ typ typ typ DWORD dwFlags,
/*11761*/ typ typ typ typ typ typ typ typ typ BYTE*pbElement,
/*11762*/ typ typ typ typ typ DWORD*pcbElement
/*11763*/ );
/*11774*/ 
/*11775*/ PCCTL_CONTEXT
/*11776*/ typ
/*11777*/ CertDuplicateCTLContext(
/*11778*/ typ typ typ typ typ typ typ PCCTL_CONTEXT pCtlContext
/*11779*/ );
/*11795*/ 
/*11796*/ PCCTL_CONTEXT
/*11797*/ typ
/*11798*/ CertCreateCTLContext(
/*11799*/ typ typ typ typ typ DWORD dwMsgAndCertEncodingType,
/*11800*/ typ typ typ typ typ typ typ const BYTE*pbCtlEncoded,
/*11801*/ typ typ typ typ typ DWORD cbCtlEncoded
/*11802*/ );
/*11810*/ 
/*11811*/ BOOL
/*11812*/ typ
/*11813*/ CertFreeCTLContext(
/*11814*/ typ typ typ typ typ typ typ PCCTL_CONTEXT pCtlContext
/*11815*/ );
/*11822*/ 
/*11823*/ BOOL
/*11824*/ typ
/*11825*/ CertSetCTLContextProperty(
/*11826*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*11827*/ typ typ typ typ typ DWORD dwPropId,
/*11828*/ typ typ typ typ typ DWORD dwFlags,
/*11829*/ typ typ typ typ typ typ typ const void*pvData
/*11830*/ );
/*11840*/ 
/*11841*/ BOOL
/*11842*/ typ
/*11843*/ CertGetCTLContextProperty(
/*11844*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*11845*/ typ typ typ typ typ DWORD dwPropId,
/*11846*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*11847*/ typ typ typ typ typ DWORD*pcbData
/*11848*/ );
/*11853*/ 
/*11854*/ DWORD
/*11855*/ typ
/*11856*/ CertEnumCTLContextProperties(
/*11857*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*11858*/ typ typ typ typ typ DWORD dwPropId
/*11859*/ );
/*11877*/ 
/*11878*/ PCCTL_CONTEXT
/*11879*/ typ
/*11880*/ CertEnumCTLsInStore(
/*11881*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*11882*/ typ typ typ typ typ typ typ PCCTL_CONTEXT pPrevCtlContext
/*11883*/ );
/*11903*/ 
/*11904*/ PCTL_ENTRY
/*11905*/ typ
/*11906*/ CertFindSubjectInCTL(
/*11907*/ typ typ typ typ typ DWORD dwEncodingType,
/*11908*/ typ typ typ typ typ DWORD dwSubjectType,
/*11909*/ typ typ typ typ typ void*pvSubject,
/*11910*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*11911*/ typ typ typ typ typ DWORD dwFlags
/*11912*/ );
/*11920*/ typedef struct _CTL_ANY_SUBJECT_INFO{
/*11921*/ CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
/*11922*/ CRYPT_DATA_BLOB SubjectIdentifier;
/*11923*/ }CTL_ANY_SUBJECT_INFO,*PCTL_ANY_SUBJECT_INFO;
/*11948*/ 
/*11949*/ PCCTL_CONTEXT
/*11950*/ typ
/*11951*/ CertFindCTLInStore(
/*11952*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*11953*/ typ typ typ typ typ DWORD dwMsgAndCertEncodingType,
/*11954*/ typ typ typ typ typ DWORD dwFindFlags,
/*11955*/ typ typ typ typ typ DWORD dwFindType,
/*11956*/ typ typ typ typ typ typ typ const void*pvFindPara,
/*11957*/ typ typ typ typ typ typ typ PCCTL_CONTEXT pPrevCtlContext
/*11958*/ );
/*11967*/ typedef struct _CTL_FIND_USAGE_PARA{
/*11968*/ DWORD cbSize;
/*11969*/ CTL_USAGE SubjectUsage;
/*11970*/ CRYPT_DATA_BLOB ListIdentifier;
/*11971*/ PCERT_INFO pSigner;
/*11972*/ }CTL_FIND_USAGE_PARA,*PCTL_FIND_USAGE_PARA;
/*11980*/ typedef struct _CTL_FIND_SUBJECT_PARA{
/*11981*/ DWORD cbSize;
/*11982*/ PCTL_FIND_USAGE_PARA pUsagePara;
/*11983*/ DWORD dwSubjectType;
/*11984*/ void*pvSubject;
/*11985*/ }CTL_FIND_SUBJECT_PARA,*PCTL_FIND_SUBJECT_PARA;
/*12054*/ 
/*12055*/ typ
/*12056*/ BOOL
/*12057*/ typ
/*12058*/ CertAddEncodedCTLToStore(
/*12059*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*12060*/ typ typ typ typ typ DWORD dwMsgAndCertEncodingType,
/*12061*/ typ typ typ typ typ typ typ const BYTE*pbCtlEncoded,
/*12062*/ typ typ typ typ typ DWORD cbCtlEncoded,
/*12063*/ typ typ typ typ typ DWORD dwAddDisposition,
/*12064*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCTL_CONTEXT*ppCtlContext
/*12065*/ );
/*12087*/ 
/*12088*/ typ
/*12089*/ BOOL
/*12090*/ typ
/*12091*/ CertAddCTLContextToStore(
/*12092*/ typ typ typ typ typ typ typ HCERTSTORE hCertStore,
/*12093*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*12094*/ typ typ typ typ typ DWORD dwAddDisposition,
/*12095*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCTL_CONTEXT*ppStoreContext
/*12096*/ );
/*12101*/ 
/*12102*/ BOOL
/*12103*/ typ
/*12104*/ CertSerializeCTLStoreElement(
/*12105*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*12106*/ typ typ typ typ typ DWORD dwFlags,
/*12107*/ typ typ typ typ typ typ typ typ typ BYTE*pbElement,
/*12108*/ typ typ typ typ typ DWORD*pcbElement
/*12109*/ );
/*12123*/ 
/*12124*/ BOOL
/*12125*/ typ
/*12126*/ CertDeleteCTLFromStore(
/*12127*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext
/*12128*/ );
/*12131*/ 
/*12132*/ typ
/*12133*/ BOOL
/*12134*/ typ
/*12135*/ CertAddCertificateLinkToStore(
/*12136*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*12137*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*12138*/ typ typ typ typ typ DWORD dwAddDisposition,
/*12139*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppStoreContext
/*12140*/ );
/*12142*/ 
/*12143*/ typ
/*12144*/ BOOL
/*12145*/ typ
/*12146*/ CertAddCRLLinkToStore(
/*12147*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*12148*/ typ typ typ typ typ PCCRL_CONTEXT pCrlContext,
/*12149*/ typ typ typ typ typ DWORD dwAddDisposition,
/*12150*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCRL_CONTEXT*ppStoreContext
/*12151*/ );
/*12153*/ 
/*12154*/ typ
/*12155*/ BOOL
/*12156*/ typ
/*12157*/ CertAddCTLLinkToStore(
/*12158*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*12159*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*12160*/ typ typ typ typ typ DWORD dwAddDisposition,
/*12161*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCTL_CONTEXT*ppStoreContext
/*12162*/ );
/*12164*/ 
/*12165*/ BOOL
/*12166*/ typ
/*12167*/ CertAddStoreToCollection(
/*12168*/ typ typ typ typ typ HCERTSTORE hCollectionStore,
/*12169*/ typ typ typ typ typ typ typ HCERTSTORE hSiblingStore,
/*12170*/ typ typ typ typ typ DWORD dwUpdateFlags,
/*12171*/ typ typ typ typ typ DWORD dwPriority
/*12172*/ );
/*12174*/ 
/*12175*/ void
/*12176*/ typ
/*12177*/ CertRemoveStoreFromCollection(
/*12178*/ typ typ typ typ typ HCERTSTORE hCollectionStore,
/*12179*/ typ typ typ typ typ HCERTSTORE hSiblingStore
/*12180*/ );
/*12183*/ 
/*12184*/ BOOL
/*12185*/ typ
/*12186*/ CertControlStore(
/*12187*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*12188*/ typ typ typ typ typ DWORD dwFlags,
/*12189*/ typ typ typ typ typ DWORD dwCtrlType,
/*12190*/ typ typ typ typ typ typ typ void const*pvCtrlPara
/*12191*/ );
/*12319*/ 
/*12320*/ BOOL
/*12321*/ typ
/*12322*/ CertSetStoreProperty(
/*12323*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*12324*/ typ typ typ typ typ DWORD dwPropId,
/*12325*/ typ typ typ typ typ DWORD dwFlags,
/*12326*/ typ typ typ typ typ typ typ const void*pvData
/*12327*/ );
/*12342*/ 
/*12343*/ BOOL
/*12344*/ typ
/*12345*/ CertGetStoreProperty(
/*12346*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*12347*/ typ typ typ typ typ DWORD dwPropId,
/*12348*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*12349*/ typ typ typ typ typ DWORD*pcbData
/*12350*/ );
/*12364*/ typedef BOOL(typ*PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(
/*12365*/ typ typ typ typ typ DWORD cbTotalEncoded,
/*12366*/ typ typ typ typ typ DWORD cbRemainEncoded,
/*12367*/ typ typ typ typ typ DWORD cEntry,
/*12368*/ typ typ typ typ typ typ typ void*pvSort
/*12369*/ );
/*12371*/ typedef struct _CERT_CREATE_CONTEXT_PARA{
/*12372*/ DWORD cbSize;
/*12373*/ PFN_CRYPT_FREE pfnFree;
/*12374*/ void*pvFree;
/*12378*/ PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort;
/*12379*/ void*pvSort;
/*12380*/ }CERT_CREATE_CONTEXT_PARA,*PCERT_CREATE_CONTEXT_PARA;
/*12415*/ 
/*12416*/ const void*
/*12417*/ typ
/*12418*/ CertCreateContext(
/*12419*/ typ typ typ typ typ DWORD dwContextType,
/*12420*/ typ typ typ typ typ DWORD dwEncodingType,
/*12421*/ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*12422*/ typ typ typ typ typ DWORD cbEncoded,
/*12423*/ typ typ typ typ typ DWORD dwFlags,
/*12424*/ typ typ typ typ typ typ typ PCERT_CREATE_CONTEXT_PARA pCreatePara
/*12425*/ );
/*12475*/ typedef struct _CERT_SYSTEM_STORE_INFO{
/*12476*/ DWORD cbSize;
/*12477*/ }CERT_SYSTEM_STORE_INFO,*PCERT_SYSTEM_STORE_INFO;
/*12521*/ typedef struct _CERT_PHYSICAL_STORE_INFO{
/*12522*/ DWORD cbSize;
/*12523*/ LPSTR pszOpenStoreProvider;
/*12524*/ DWORD dwOpenEncodingType;
/*12525*/ DWORD dwOpenFlags;
/*12526*/ CRYPT_DATA_BLOB OpenParameters;
/*12527*/ DWORD dwFlags;
/*12528*/ DWORD dwPriority;
/*12529*/ }CERT_PHYSICAL_STORE_INFO,*PCERT_PHYSICAL_STORE_INFO;
/*12567*/ 
/*12568*/ BOOL
/*12569*/ typ
/*12570*/ CertRegisterSystemStore(
/*12571*/ typ typ typ typ typ const void*pvSystemStore,
/*12572*/ typ typ typ typ typ DWORD dwFlags,
/*12573*/ typ typ typ typ typ typ typ PCERT_SYSTEM_STORE_INFO pStoreInfo,
/*12574*/ typ typ void*pvReserved
/*12575*/ );
/*12593*/ 
/*12594*/ BOOL
/*12595*/ typ
/*12596*/ CertRegisterPhysicalStore(
/*12597*/ typ typ typ typ typ const void*pvSystemStore,
/*12598*/ typ typ typ typ typ DWORD dwFlags,
/*12599*/ typ typ typ typ typ LPCWSTR pwszStoreName,
/*12600*/ typ typ typ typ typ PCERT_PHYSICAL_STORE_INFO pStoreInfo,
/*12601*/ typ typ void*pvReserved
/*12602*/ );
/*12619*/ 
/*12620*/ BOOL
/*12621*/ typ
/*12622*/ CertUnregisterSystemStore(
/*12623*/ typ typ typ typ typ const void*pvSystemStore,
/*12624*/ typ typ typ typ typ DWORD dwFlags
/*12625*/ );
/*12642*/ 
/*12643*/ BOOL
/*12644*/ typ
/*12645*/ CertUnregisterPhysicalStore(
/*12646*/ typ typ typ typ typ const void*pvSystemStore,
/*12647*/ typ typ typ typ typ DWORD dwFlags,
/*12648*/ typ typ typ typ typ LPCWSTR pwszStoreName
/*12649*/ );
/*12668*/ typedef BOOL(typ*PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
/*12669*/ typ typ typ typ typ LPCWSTR pwszStoreLocation,
/*12670*/ typ typ typ typ typ DWORD dwFlags,
/*12671*/ typ typ void*pvReserved,
/*12672*/ typ typ typ typ typ typ typ void*pvArg
/*12673*/ );
/*12675*/ typedef BOOL(typ*PFN_CERT_ENUM_SYSTEM_STORE)(
/*12676*/ typ typ typ typ typ const void*pvSystemStore,
/*12677*/ typ typ typ typ typ DWORD dwFlags,
/*12678*/ typ typ typ typ typ PCERT_SYSTEM_STORE_INFO pStoreInfo,
/*12679*/ typ typ void*pvReserved,
/*12680*/ typ typ typ typ typ typ typ void*pvArg
/*12681*/ );
/*12683*/ typedef BOOL(typ*PFN_CERT_ENUM_PHYSICAL_STORE)(
/*12684*/ typ typ typ typ typ const void*pvSystemStore,
/*12685*/ typ typ typ typ typ DWORD dwFlags,
/*12686*/ typ typ typ typ typ LPCWSTR pwszStoreName,
/*12687*/ typ typ typ typ typ PCERT_PHYSICAL_STORE_INFO pStoreInfo,
/*12688*/ typ typ void*pvReserved,
/*12689*/ typ typ typ typ typ typ typ void*pvArg
/*12690*/ );
/*12711*/ 
/*12712*/ BOOL
/*12713*/ typ
/*12714*/ CertEnumSystemStoreLocation(
/*12715*/ typ typ typ typ typ DWORD dwFlags,
/*12716*/ typ typ typ typ typ typ typ void*pvArg,
/*12717*/ typ PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
/*12718*/ );
/*12751*/ 
/*12752*/ BOOL
/*12753*/ typ
/*12754*/ CertEnumSystemStore(
/*12755*/ typ typ typ typ typ DWORD dwFlags,
/*12756*/ typ typ typ typ typ typ typ void*pvSystemStoreLocationPara,
/*12757*/ typ typ typ typ typ typ typ void*pvArg,
/*12758*/ typ PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
/*12759*/ );
/*12777*/ 
/*12778*/ BOOL
/*12779*/ typ
/*12780*/ CertEnumPhysicalStore(
/*12781*/ typ typ typ typ typ const void*pvSystemStore,
/*12782*/ typ typ typ typ typ DWORD dwFlags,
/*12783*/ typ typ typ typ typ typ typ void*pvArg,
/*12784*/ typ PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
/*12785*/ );
/*12840*/ 
/*12841*/ BOOL
/*12842*/ typ
/*12843*/ CertGetEnhancedKeyUsage(
/*12844*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*12845*/ typ typ typ typ typ DWORD dwFlags,
/*12846*/ typ typ typ typ typ typ typ typ typ PCERT_ENHKEY_USAGE pUsage,
/*12847*/ typ typ typ typ typ DWORD*pcbUsage
/*12848*/ );
/*12853*/ 
/*12854*/ BOOL
/*12855*/ typ
/*12856*/ CertSetEnhancedKeyUsage(
/*12857*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*12858*/ typ typ typ typ typ typ typ PCERT_ENHKEY_USAGE pUsage
/*12859*/ );
/*12864*/ 
/*12865*/ BOOL
/*12866*/ typ
/*12867*/ CertAddEnhancedKeyUsageIdentifier(
/*12868*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*12869*/ typ typ typ typ typ LPCSTR pszUsageIdentifier
/*12870*/ );
/*12877*/ 
/*12878*/ BOOL
/*12879*/ typ
/*12880*/ CertRemoveEnhancedKeyUsageIdentifier(
/*12881*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*12882*/ typ typ typ typ typ LPCSTR pszUsageIdentifier
/*12883*/ );
/*12893*/ 
/*12894*/ BOOL
/*12895*/ typ
/*12896*/ CertGetValidUsages(
/*12897*/ typ typ typ typ typ DWORD cCerts,
/*12898*/ typ typ typ typ typ typ typ PCCERT_CONTEXT*rghCerts,
/*12899*/ typ typ typ typ typ int*cNumOIDs,
/*12900*/ typ typ typ typ typ typ typ typ typ LPSTR*rghOIDs,
/*12901*/ typ typ typ typ typ DWORD*pcbOIDs);
/*12931*/ 
/*12932*/ typ
/*12933*/ BOOL
/*12934*/ typ
/*12935*/ CryptMsgGetAndVerifySigner(
/*12936*/ typ typ typ typ typ HCRYPTMSG hCryptMsg,
/*12937*/ typ typ typ typ typ DWORD cSignerStore,
/*12938*/ typ typ typ typ typ typ typ typ typ HCERTSTORE*rghSignerStore,
/*12939*/ typ typ typ typ typ DWORD dwFlags,
/*12940*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppSigner,
/*12941*/ typ typ typ typ typ typ typ DWORD*pdwSignerIndex
/*12942*/ );
/*12957*/ 
/*12958*/ BOOL
/*12959*/ typ
/*12960*/ CryptMsgSignCTL(
/*12961*/ typ typ typ typ typ DWORD dwMsgEncodingType,
/*12962*/ typ typ typ typ typ typ typ BYTE*pbCtlContent,
/*12963*/ typ typ typ typ typ DWORD cbCtlContent,
/*12964*/ typ typ typ typ typ PCMSG_SIGNED_ENCODE_INFO pSignInfo,
/*12965*/ typ typ typ typ typ DWORD dwFlags,
/*12966*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncoded,
/*12967*/ typ typ typ typ typ DWORD*pcbEncoded
/*12968*/ );
/*12986*/ 
/*12987*/ BOOL
/*12988*/ typ
/*12989*/ CryptMsgEncodeAndSignCTL(
/*12990*/ typ typ typ typ typ DWORD dwMsgEncodingType,
/*12991*/ typ typ typ typ typ PCTL_INFO pCtlInfo,
/*12992*/ typ typ typ typ typ PCMSG_SIGNED_ENCODE_INFO pSignInfo,
/*12993*/ typ typ typ typ typ DWORD dwFlags,
/*12994*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncoded,
/*12995*/ typ typ typ typ typ DWORD*pcbEncoded
/*12996*/ );
/*13013*/ 
/*13014*/ BOOL
/*13015*/ typ
/*13016*/ CertFindSubjectInSortedCTL(
/*13017*/ typ typ typ typ typ PCRYPT_DATA_BLOB pSubjectIdentifier,
/*13018*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*13019*/ typ typ typ typ typ DWORD dwFlags,
/*13020*/ typ typ void*pvReserved,
/*13021*/ typ typ typ typ typ typ typ PCRYPT_DER_BLOB pEncodedAttributes
/*13022*/ );
/*13037*/ 
/*13038*/ BOOL
/*13039*/ typ
/*13040*/ CertEnumSubjectInSortedCTL(
/*13041*/ typ typ typ typ typ PCCTL_CONTEXT pCtlContext,
/*13042*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppvNextSubject,
/*13043*/ typ typ typ typ typ typ typ PCRYPT_DER_BLOB pSubjectIdentifier,
/*13044*/ typ typ typ typ typ typ typ PCRYPT_DER_BLOB pEncodedAttributes
/*13045*/ );
/*13052*/ typedef struct _CTL_VERIFY_USAGE_PARA{
/*13053*/ DWORD cbSize;
/*13054*/ CRYPT_DATA_BLOB ListIdentifier;
/*13055*/ DWORD cCtlStore;
/*13056*/ HCERTSTORE*rghCtlStore;
/*13057*/ DWORD cSignerStore;
/*13058*/ HCERTSTORE*rghSignerStore;
/*13059*/ }CTL_VERIFY_USAGE_PARA,*PCTL_VERIFY_USAGE_PARA;
/*13061*/ typedef struct _CTL_VERIFY_USAGE_STATUS{
/*13062*/ DWORD cbSize;
/*13063*/ DWORD dwError;
/*13064*/ DWORD dwFlags;
/*13065*/ PCCTL_CONTEXT*ppCtl;
/*13066*/ DWORD dwCtlEntryIndex;
/*13067*/ PCCERT_CONTEXT*ppSigner;
/*13068*/ DWORD dwSignerIndex;
/*13069*/ }CTL_VERIFY_USAGE_STATUS,*PCTL_VERIFY_USAGE_STATUS;
/*13127*/ 
/*13128*/ BOOL
/*13129*/ typ
/*13130*/ CertVerifyCTLUsage(
/*13131*/ typ typ typ typ typ DWORD dwEncodingType,
/*13132*/ typ typ typ typ typ DWORD dwSubjectType,
/*13133*/ typ typ typ typ typ void*pvSubject,
/*13134*/ typ typ typ typ typ PCTL_USAGE pSubjectUsage,
/*13135*/ typ typ typ typ typ DWORD dwFlags,
/*13136*/ typ typ typ typ typ typ typ PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
/*13137*/ typ typ typ typ typ PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
/*13138*/ );
/*13149*/ typedef struct _CERT_REVOCATION_CRL_INFO{
/*13150*/ DWORD cbSize;
/*13151*/ PCCRL_CONTEXT pBaseCrlContext;
/*13152*/ PCCRL_CONTEXT pDeltaCrlContext;
/*13156*/ PCRL_ENTRY pCrlEntry;
/*13157*/ BOOL fDeltaCrlEntry;
/*13158*/ }CERT_REVOCATION_CRL_INFO,*PCERT_REVOCATION_CRL_INFO;
/*13169*/ typedef struct _CERT_REVOCATION_CHAIN_PARA
/*13170*/ CERT_REVOCATION_CHAIN_PARA,
/*13171*/ *PCERT_REVOCATION_CHAIN_PARA;
/*13190*/ typedef struct _CERT_REVOCATION_PARA{
/*13191*/ DWORD cbSize;
/*13192*/ PCCERT_CONTEXT pIssuerCert;
/*13193*/ DWORD cCertStore;
/*13194*/ HCERTSTORE*rgCertStore;
/*13195*/ HCERTSTORE hCrlStore;
/*13196*/ LPFILETIME pftTimeToUse;
/*13233*/ }CERT_REVOCATION_PARA,*PCERT_REVOCATION_PARA;
/*13250*/ typedef struct _CERT_REVOCATION_STATUS{
/*13251*/ DWORD cbSize;
/*13252*/ DWORD dwIndex;
/*13253*/ DWORD dwError;
/*13254*/ DWORD dwReason;
/*13264*/ BOOL fHasFreshnessTime;
/*13265*/ DWORD dwFreshnessTime;
/*13266*/ }CERT_REVOCATION_STATUS,*PCERT_REVOCATION_STATUS;
/*13345*/ 
/*13346*/ BOOL
/*13347*/ typ
/*13348*/ CertVerifyRevocation(
/*13349*/ typ typ typ typ typ DWORD dwEncodingType,
/*13350*/ typ typ typ typ typ DWORD dwRevType,
/*13351*/ typ typ typ typ typ DWORD cContext,
/*13352*/ typ typ typ typ typ typ typ PVOID rgpvContext[],
/*13353*/ typ typ typ typ typ DWORD dwFlags,
/*13354*/ typ typ typ typ typ typ typ PCERT_REVOCATION_PARA pRevPara,
/*13355*/ typ typ typ typ typ PCERT_REVOCATION_STATUS pRevStatus
/*13356*/ );
/*13417*/ BOOL
/*13418*/ typ
/*13419*/ CertCompareIntegerBlob(
/*13420*/ typ typ typ typ typ PCRYPT_INTEGER_BLOB pInt1,
/*13421*/ typ typ typ typ typ PCRYPT_INTEGER_BLOB pInt2
/*13422*/ );
/*13432*/ 
/*13433*/ BOOL
/*13434*/ typ
/*13435*/ CertCompareCertificate(
/*13436*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13437*/ typ typ typ typ typ PCERT_INFO pCertId1,
/*13438*/ typ typ typ typ typ PCERT_INFO pCertId2
/*13439*/ );
/*13446*/ 
/*13447*/ BOOL
/*13448*/ typ
/*13449*/ CertCompareCertificateName(
/*13450*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13451*/ typ typ typ typ typ PCERT_NAME_BLOB pCertName1,
/*13452*/ typ typ typ typ typ PCERT_NAME_BLOB pCertName2
/*13453*/ );
/*13473*/ 
/*13474*/ BOOL
/*13475*/ typ
/*13476*/ CertIsRDNAttrsInCertificateName(
/*13477*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13478*/ typ typ typ typ typ DWORD dwFlags,
/*13479*/ typ typ typ typ typ PCERT_NAME_BLOB pCertName,
/*13480*/ typ typ typ typ typ PCERT_RDN pRDN
/*13481*/ );
/*13491*/ 
/*13492*/ BOOL
/*13493*/ typ
/*13494*/ CertComparePublicKeyInfo(
/*13495*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13496*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPublicKey1,
/*13497*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPublicKey2
/*13498*/ );
/*13505*/ 
/*13506*/ DWORD
/*13507*/ typ
/*13508*/ CertGetPublicKeyLength(
/*13509*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13510*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPublicKey
/*13511*/ );
/*13522*/ 
/*13523*/ typ __inner_checkReturn
/*13524*/ BOOL
/*13525*/ typ
/*13526*/ CryptVerifyCertificateSignature(
/*13527*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*13528*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13529*/ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*13530*/ typ typ typ typ typ DWORD cbEncoded,
/*13531*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPublicKey
/*13532*/ );
/*13559*/ 
/*13560*/ typ __inner_checkReturn
/*13561*/ BOOL
/*13562*/ typ
/*13563*/ CryptVerifyCertificateSignatureEx(
/*13564*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*13565*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13566*/ typ typ typ typ typ DWORD dwSubjectType,
/*13567*/ typ typ typ typ typ void*pvSubject,
/*13568*/ typ typ typ typ typ DWORD dwIssuerType,
/*13569*/ typ typ typ typ typ typ typ void*pvIssuer,
/*13570*/ typ typ typ typ typ DWORD dwFlags,
/*13571*/ typ typ void*pvReserved
/*13572*/ );
/*13602*/ 
/*13603*/ BOOL
/*13604*/ typ
/*13605*/ CryptHashToBeSigned(
/*13606*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*13607*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13608*/ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*13609*/ typ typ typ typ typ DWORD cbEncoded,
/*13610*/ typ typ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*13611*/ typ typ typ typ typ DWORD*pcbComputedHash
/*13612*/ );
/*13623*/ 
/*13624*/ BOOL
/*13625*/ typ
/*13626*/ CryptHashCertificate(
/*13627*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*13628*/ typ typ typ typ typ ALG_ID Algid,
/*13629*/ typ typ typ typ typ DWORD dwFlags,
/*13630*/ typ typ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*13631*/ typ typ typ typ typ DWORD cbEncoded,
/*13632*/ typ typ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*13633*/ typ typ typ typ typ DWORD*pcbComputedHash
/*13634*/ );
/*13639*/ 
/*13640*/ BOOL
/*13641*/ typ
/*13642*/ CryptHashCertificate2(
/*13643*/ typ typ typ typ typ LPCWSTR pwszCNGHashAlgid,
/*13644*/ typ typ typ typ typ DWORD dwFlags,
/*13645*/ typ typ void*pvReserved,
/*13646*/ typ typ typ typ typ typ typ typ typ const BYTE*pbEncoded,
/*13647*/ typ typ typ typ typ DWORD cbEncoded,
/*13648*/ typ typ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*13649*/ typ typ typ typ typ DWORD*pcbComputedHash
/*13650*/ );
/*13663*/ 
/*13664*/ BOOL
/*13665*/ typ
/*13666*/ CryptSignCertificate(
/*13667*/ typ typ typ typ typ typ typ HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
/*13668*/ typ typ typ typ typ typ typ DWORD dwKeySpec,
/*13669*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13670*/ typ typ typ typ typ typ typ const BYTE*pbEncodedToBeSigned,
/*13671*/ typ typ typ typ typ DWORD cbEncodedToBeSigned,
/*13672*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
/*13673*/ typ typ typ typ typ typ typ const void*pvHashAuxInfo,
/*13674*/ typ typ typ typ typ typ typ typ typ BYTE*pbSignature,
/*13675*/ typ typ typ typ typ DWORD*pcbSignature
/*13676*/ );
/*13690*/ 
/*13691*/ BOOL
/*13692*/ typ
/*13693*/ CryptSignAndEncodeCertificate(
/*13694*/ typ typ typ typ typ typ typ HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
/*13695*/ typ typ typ typ typ typ typ DWORD dwKeySpec,
/*13696*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13697*/ typ typ typ typ typ LPCSTR lpszStructType,
/*13698*/ typ typ typ typ typ const void*pvStructInfo,
/*13699*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
/*13700*/ typ typ typ typ typ typ typ const void*pvHashAuxInfo,
/*13701*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncoded,
/*13702*/ typ typ typ typ typ DWORD*pcbEncoded
/*13703*/ );
/*13726*/ typedef BOOL(typ*PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(
/*13727*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13728*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
/*13729*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppvDecodedSignPara,
/*13730*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPWSTR*ppwszCNGHashAlgid
/*13731*/ );
/*13736*/ typedef BOOL(typ*PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(
/*13737*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hKey,
/*13738*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13739*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
/*13740*/ typ typ typ typ typ typ typ void*pvDecodedSignPara,
/*13741*/ typ typ typ typ typ LPCWSTR pwszCNGPubKeyAlgid,
/*13742*/ typ typ typ typ typ LPCWSTR pwszCNGHashAlgid,
/*13743*/ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*13744*/ typ typ typ typ typ DWORD cbComputedHash,
/*13745*/ typ typ typ typ typ typ typ typ typ BYTE*pbSignature,
/*13746*/ typ typ typ typ typ DWORD*pcbSignature
/*13747*/ );
/*13753*/ typedef BOOL(typ*PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(
/*13754*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13755*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPubKeyInfo,
/*13756*/ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
/*13757*/ typ typ typ typ typ typ typ void*pvDecodedSignPara,
/*13758*/ typ typ typ typ typ LPCWSTR pwszCNGPubKeyAlgid,
/*13759*/ typ typ typ typ typ LPCWSTR pwszCNGHashAlgid,
/*13760*/ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*13761*/ typ typ typ typ typ DWORD cbComputedHash,
/*13762*/ typ typ typ typ typ typ typ BYTE*pbSignature,
/*13763*/ typ typ typ typ typ DWORD cbSignature
/*13764*/ );
/*13775*/ 
/*13776*/ LONG
/*13777*/ typ
/*13778*/ CertVerifyTimeValidity(
/*13779*/ typ typ typ typ typ typ typ LPFILETIME pTimeToVerify,
/*13780*/ typ typ typ typ typ PCERT_INFO pCertInfo
/*13781*/ );
/*13792*/ 
/*13793*/ LONG
/*13794*/ typ
/*13795*/ CertVerifyCRLTimeValidity(
/*13796*/ typ typ typ typ typ typ typ LPFILETIME pTimeToVerify,
/*13797*/ typ typ typ typ typ PCRL_INFO pCrlInfo
/*13798*/ );
/*13806*/ 
/*13807*/ BOOL
/*13808*/ typ
/*13809*/ CertVerifyValidityNesting(
/*13810*/ typ typ typ typ typ PCERT_INFO pSubjectInfo,
/*13811*/ typ typ typ typ typ PCERT_INFO pIssuerInfo
/*13812*/ );
/*13819*/ 
/*13820*/ BOOL
/*13821*/ typ
/*13822*/ CertVerifyCRLRevocation(
/*13823*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13824*/ typ typ typ typ typ PCERT_INFO pCertId,
/*13826*/ typ typ typ typ typ DWORD cCrlInfo,
/*13827*/ typ typ typ typ typ typ typ PCRL_INFO rgpCrlInfo[]
/*13828*/ );
/*13835*/ 
/*13836*/ LPCSTR
/*13837*/ typ
/*13838*/ CertAlgIdToOID(
/*13839*/ typ typ typ typ typ DWORD dwAlgId
/*13840*/ );
/*13847*/ 
/*13848*/ DWORD
/*13849*/ typ
/*13850*/ CertOIDToAlgId(
/*13851*/ typ typ typ typ typ LPCSTR pszObjId
/*13852*/ );
/*13859*/ 
/*13860*/ PCERT_EXTENSION
/*13861*/ typ
/*13862*/ CertFindExtension(
/*13863*/ typ typ typ typ typ LPCSTR pszObjId,
/*13864*/ typ typ typ typ typ DWORD cExtensions,
/*13865*/ typ typ typ typ typ typ typ CERT_EXTENSION rgExtensions[]
/*13866*/ );
/*13873*/ 
/*13874*/ PCRYPT_ATTRIBUTE
/*13875*/ typ
/*13876*/ CertFindAttribute(
/*13877*/ typ typ typ typ typ LPCSTR pszObjId,
/*13878*/ typ typ typ typ typ DWORD cAttr,
/*13879*/ typ typ typ typ typ typ typ CRYPT_ATTRIBUTE rgAttr[]
/*13880*/ );
/*13888*/ 
/*13889*/ PCERT_RDN_ATTR
/*13890*/ typ
/*13891*/ CertFindRDNAttr(
/*13892*/ typ typ typ typ typ LPCSTR pszObjId,
/*13893*/ typ typ typ typ typ PCERT_NAME_INFO pName
/*13894*/ );
/*13904*/ 
/*13905*/ BOOL
/*13906*/ typ
/*13907*/ CertGetIntendedKeyUsage(
/*13908*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*13909*/ typ typ typ typ typ PCERT_INFO pCertInfo,
/*13910*/ typ typ typ typ typ typ typ BYTE*pbKeyUsage,
/*13911*/ typ typ typ typ typ DWORD cbKeyUsage
/*13912*/ );
/*13914*/ typedef void*HCRYPTDEFAULTCONTEXT;
/*13943*/ 
/*13944*/ BOOL
/*13945*/ typ
/*13946*/ CryptInstallDefaultContext(
/*13947*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*13948*/ typ typ typ typ typ DWORD dwDefaultType,
/*13949*/ typ typ typ typ typ typ typ const void*pvDefaultPara,
/*13950*/ typ typ typ typ typ DWORD dwFlags,
/*13951*/ typ typ void*pvReserved,
/*13952*/ typ typ typ typ typ HCRYPTDEFAULTCONTEXT*phDefaultContext
/*13953*/ );
/*13984*/ typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA{
/*13985*/ DWORD cOID;
/*13986*/ LPSTR*rgpszOID;
/*13987*/ }CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA,*PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
/*13998*/ 
/*13999*/ BOOL
/*14000*/ typ
/*14001*/ CryptUninstallDefaultContext(
/*14002*/ typ typ typ typ typ typ typ HCRYPTDEFAULTCONTEXT hDefaultContext,
/*14003*/ typ typ typ typ typ DWORD dwFlags,
/*14004*/ typ typ void*pvReserved
/*14005*/ );
/*14014*/ 
/*14015*/ BOOL
/*14016*/ typ
/*14017*/ CryptExportPublicKeyInfo(
/*14018*/ typ typ typ typ typ HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
/*14019*/ typ typ typ typ typ typ typ DWORD dwKeySpec,
/*14020*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14021*/ typ typ typ typ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14022*/ typ typ typ typ typ DWORD*pcbInfo
/*14023*/ );
/*14045*/ 
/*14046*/ BOOL
/*14047*/ typ
/*14048*/ CryptExportPublicKeyInfoEx(
/*14049*/ typ typ typ typ typ HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
/*14050*/ typ typ typ typ typ typ typ DWORD dwKeySpec,
/*14051*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14052*/ typ typ typ typ typ typ typ LPSTR pszPublicKeyObjId,
/*14053*/ typ typ typ typ typ DWORD dwFlags,
/*14054*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14055*/ typ typ typ typ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14056*/ typ typ typ typ typ DWORD*pcbInfo
/*14057*/ );
/*14068*/ typedef BOOL(typ*PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC)(
/*14069*/ typ typ typ typ typ NCRYPT_KEY_HANDLE hNCryptKey,
/*14070*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14071*/ typ typ typ typ typ LPSTR pszPublicKeyObjId,
/*14072*/ typ typ typ typ typ DWORD dwFlags,
/*14073*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14074*/ typ typ typ typ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14075*/ typ typ typ typ typ DWORD*pcbInfo
/*14076*/ );
/*14086*/ 
/*14087*/ BOOL
/*14088*/ typ
/*14089*/ CryptImportPublicKeyInfo(
/*14090*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*14091*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14092*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14093*/ typ typ typ typ typ HCRYPTKEY*phKey
/*14094*/ );
/*14112*/ 
/*14113*/ BOOL
/*14114*/ typ
/*14115*/ CryptImportPublicKeyInfoEx(
/*14116*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*14117*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14118*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14119*/ typ typ typ typ typ ALG_ID aiKeyAlg,
/*14120*/ typ typ typ typ typ DWORD dwFlags,
/*14121*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14122*/ typ typ typ typ typ HCRYPTKEY*phKey
/*14123*/ );
/*14139*/ 
/*14140*/ BOOL
/*14141*/ typ
/*14142*/ CryptImportPublicKeyInfoEx2(
/*14143*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14144*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14145*/ typ typ typ typ typ DWORD dwFlags,
/*14146*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14147*/ typ typ typ typ typ BCRYPT_KEY_HANDLE*phKey
/*14148*/ );
/*14156*/ typedef BOOL(typ*PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC)(
/*14157*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14158*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14159*/ typ typ typ typ typ DWORD dwFlags,
/*14160*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14161*/ typ typ typ typ typ BCRYPT_KEY_HANDLE*phKey
/*14162*/ );
/*14228*/ 
/*14229*/ BOOL
/*14230*/ typ
/*14231*/ CryptAcquireCertificatePrivateKey(
/*14232*/ typ typ typ typ typ PCCERT_CONTEXT pCert,
/*14233*/ typ typ typ typ typ DWORD dwFlags,
/*14234*/ typ typ void*pvReserved,
/*14235*/ typ typ typ typ typ HCRYPTPROV_OR_NCRYPT_KEY_HANDLE*phCryptProvOrNCryptKey,
/*14236*/ typ typ typ typ typ typ typ DWORD*pdwKeySpec,
/*14237*/ typ typ typ typ typ typ typ BOOL*pfCallerFreeProvOrNCryptKey
/*14238*/ );
/*14275*/ 
/*14276*/ BOOL
/*14277*/ typ
/*14278*/ CryptFindCertificateKeyProvInfo(
/*14279*/ typ typ typ typ typ PCCERT_CONTEXT pCert,
/*14280*/ typ typ typ typ typ DWORD dwFlags,
/*14281*/ typ typ void*pvReserved
/*14282*/ );
/*14303*/ typedef BOOL(typ*PFN_IMPORT_PRIV_KEY_FUNC)(
/*14304*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*14305*/ typ typ typ typ typ CRYPT_PRIVATE_KEY_INFO*pPrivateKeyInfo,
/*14306*/ typ typ typ typ typ DWORD dwFlags,
/*14307*/ typ typ typ typ typ typ typ void*pvAuxInfo
/*14308*/ );
/*14330*/ 
/*14331*/ BOOL
/*14332*/ typ
/*14333*/ CryptImportPKCS8(
/*14334*/ typ typ typ typ typ CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,
/*14335*/ typ typ typ typ typ DWORD dwFlags,
/*14336*/ typ typ typ typ typ typ typ HCRYPTPROV*phCryptProv,
/*14337*/ typ typ typ typ typ typ typ void*pvAuxInfo
/*14338*/ );
/*14343*/ typedef BOOL(typ*PFN_EXPORT_PRIV_KEY_FUNC)(
/*14344*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*14345*/ typ typ typ typ typ DWORD dwKeySpec,
/*14346*/ typ typ typ typ typ LPSTR pszPrivateKeyObjId,
/*14347*/ typ typ typ typ typ DWORD dwFlags,
/*14348*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14349*/ __out_bcount_opt(*pcbPrivateKeyInfo)CRYPT_PRIVATE_KEY_INFO*pPrivateKeyInfo,
/*14350*/ typ typ typ typ typ DWORD*pcbPrivateKeyInfo
/*14351*/ );
/*14361*/ 
/*14362*/ BOOL
/*14363*/ typ
/*14364*/ CryptExportPKCS8(
/*14365*/ typ typ typ typ typ HCRYPTPROV hCryptProv,
/*14366*/ typ typ typ typ typ DWORD dwKeySpec,
/*14367*/ typ typ typ typ typ LPSTR pszPrivateKeyObjId,
/*14368*/ typ typ typ typ typ DWORD dwFlags,
/*14369*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14370*/ __out_bcount_opt(*pcbPrivateKeyBlob)BYTE*pbPrivateKeyBlob,
/*14371*/ typ typ typ typ typ DWORD*pcbPrivateKeyBlob
/*14372*/ );
/*14396*/ 
/*14397*/ BOOL
/*14398*/ typ
/*14399*/ CryptExportPKCS8Ex(
/*14400*/ typ typ typ typ typ CRYPT_PKCS8_EXPORT_PARAMS*psExportParams,
/*14401*/ typ typ typ typ typ DWORD dwFlags,
/*14402*/ typ typ typ typ typ typ typ void*pvAuxInfo,
/*14403*/ __out_bcount_opt(*pcbPrivateKeyBlob)BYTE*pbPrivateKeyBlob,
/*14404*/ typ typ typ typ typ DWORD*pcbPrivateKeyBlob
/*14405*/ );
/*14412*/ 
/*14413*/ BOOL
/*14414*/ typ
/*14415*/ CryptHashPublicKeyInfo(
/*14416*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*14417*/ typ typ typ typ typ ALG_ID Algid,
/*14418*/ typ typ typ typ typ DWORD dwFlags,
/*14419*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14420*/ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pInfo,
/*14421*/ typ typ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*14422*/ typ typ typ typ typ DWORD*pcbComputedHash
/*14423*/ );
/*14436*/ 
/*14437*/ DWORD
/*14438*/ typ
/*14439*/ CertRDNValueToStrA(
/*14440*/ typ typ typ typ typ DWORD dwValueType,
/*14441*/ typ typ typ typ typ PCERT_RDN_VALUE_BLOB pValue,
/*14442*/ typ typ typ typ typ typ typ typ typ LPSTR psz,
/*14443*/ typ typ typ typ typ DWORD csz
/*14444*/ );
/*14456*/ 
/*14457*/ DWORD
/*14458*/ typ
/*14459*/ CertRDNValueToStrW(
/*14460*/ typ typ typ typ typ DWORD dwValueType,
/*14461*/ typ typ typ typ typ PCERT_RDN_VALUE_BLOB pValue,
/*14462*/ typ typ typ typ typ typ typ typ typ LPWSTR psz,
/*14463*/ typ typ typ typ typ DWORD csz
/*14464*/ );
/*14564*/ 
/*14565*/ DWORD
/*14566*/ typ
/*14567*/ CertNameToStrA(
/*14568*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14569*/ typ typ typ typ typ PCERT_NAME_BLOB pName,
/*14570*/ typ typ typ typ typ DWORD dwStrType,
/*14571*/ typ typ typ typ typ typ typ typ typ LPSTR psz,
/*14572*/ typ typ typ typ typ DWORD csz
/*14573*/ );
/*14576*/ 
/*14577*/ DWORD
/*14578*/ typ
/*14579*/ CertNameToStrW(
/*14580*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14581*/ typ typ typ typ typ PCERT_NAME_BLOB pName,
/*14582*/ typ typ typ typ typ DWORD dwStrType,
/*14583*/ typ typ typ typ typ typ typ typ typ LPWSTR psz,
/*14584*/ typ typ typ typ typ DWORD csz
/*14585*/ );
/*14730*/ 
/*14731*/ BOOL
/*14732*/ typ
/*14733*/ CertStrToNameA(
/*14734*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14735*/ typ typ typ typ typ LPCSTR pszX500,
/*14736*/ typ typ typ typ typ DWORD dwStrType,
/*14737*/ typ typ void*pvReserved,
/*14738*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncoded,
/*14739*/ typ typ typ typ typ DWORD*pcbEncoded,
/*14740*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCSTR*ppszError
/*14741*/ );
/*14744*/ 
/*14745*/ BOOL
/*14746*/ typ
/*14747*/ CertStrToNameW(
/*14748*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14749*/ typ typ typ typ typ LPCWSTR pszX500,
/*14750*/ typ typ typ typ typ DWORD dwStrType,
/*14751*/ typ typ void*pvReserved,
/*14752*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncoded,
/*14753*/ typ typ typ typ typ DWORD*pcbEncoded,
/*14754*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppszError
/*14755*/ );
/*14855*/ 
/*14856*/ DWORD
/*14857*/ typ
/*14858*/ CertGetNameStringA(
/*14859*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*14860*/ typ typ typ typ typ DWORD dwType,
/*14861*/ typ typ typ typ typ DWORD dwFlags,
/*14862*/ typ typ typ typ typ typ typ void*pvTypePara,
/*14863*/ typ typ typ typ typ typ typ typ typ LPSTR pszNameString,
/*14864*/ typ typ typ typ typ DWORD cchNameString
/*14865*/ );
/*14868*/ 
/*14869*/ DWORD
/*14870*/ typ
/*14871*/ CertGetNameStringW(
/*14872*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*14873*/ typ typ typ typ typ DWORD dwType,
/*14874*/ typ typ typ typ typ DWORD dwFlags,
/*14875*/ typ typ typ typ typ typ typ void*pvTypePara,
/*14876*/ typ typ typ typ typ typ typ typ typ LPWSTR pszNameString,
/*14877*/ typ typ typ typ typ DWORD cchNameString
/*14878*/ );
/*14957*/ typedef PCCERT_CONTEXT(typ*PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
/*14958*/ typ typ typ typ typ typ typ void*pvGetArg,
/*14959*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*14960*/ typ typ typ typ typ PCERT_INFO pSignerId,
/*14962*/ typ typ typ typ typ HCERTSTORE hMsgCertStore
/*14963*/ );
/*15016*/ typedef struct _CRYPT_SIGN_MESSAGE_PARA{
/*15017*/ DWORD cbSize;
/*15018*/ DWORD dwMsgEncodingType;
/*15019*/ PCCERT_CONTEXT pSigningCert;
/*15020*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*15021*/ void*pvHashAuxInfo;
/*15022*/ DWORD cMsgCert;
/*15023*/ PCCERT_CONTEXT*rgpMsgCert;
/*15024*/ DWORD cMsgCrl;
/*15025*/ PCCRL_CONTEXT*rgpMsgCrl;
/*15026*/ DWORD cAuthAttr;
/*15027*/ PCRYPT_ATTRIBUTE rgAuthAttr;
/*15028*/ DWORD cUnauthAttr;
/*15029*/ PCRYPT_ATTRIBUTE rgUnauthAttr;
/*15030*/ DWORD dwFlags;
/*15031*/ DWORD dwInnerContentType;
/*15038*/ }CRYPT_SIGN_MESSAGE_PARA,*PCRYPT_SIGN_MESSAGE_PARA;
/*15068*/ typedef struct _CRYPT_VERIFY_MESSAGE_PARA{
/*15069*/ DWORD cbSize;
/*15070*/ DWORD dwMsgAndCertEncodingType;
/*15071*/ HCRYPTPROV_LEGACY hCryptProv;
/*15072*/ PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
/*15073*/ void*pvGetArg;
/*15074*/ }CRYPT_VERIFY_MESSAGE_PARA,*PCRYPT_VERIFY_MESSAGE_PARA;
/*15115*/ typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA{
/*15116*/ DWORD cbSize;
/*15117*/ DWORD dwMsgEncodingType;
/*15118*/ HCRYPTPROV_LEGACY hCryptProv;
/*15119*/ CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
/*15120*/ void*pvEncryptionAuxInfo;
/*15121*/ DWORD dwFlags;
/*15122*/ DWORD dwInnerContentType;
/*15123*/ }CRYPT_ENCRYPT_MESSAGE_PARA,*PCRYPT_ENCRYPT_MESSAGE_PARA;
/*15149*/ typedef struct _CRYPT_DECRYPT_MESSAGE_PARA{
/*15150*/ DWORD cbSize;
/*15151*/ DWORD dwMsgAndCertEncodingType;
/*15152*/ DWORD cCertStore;
/*15153*/ HCERTSTORE*rghCertStore;
/*15163*/ }CRYPT_DECRYPT_MESSAGE_PARA,*PCRYPT_DECRYPT_MESSAGE_PARA;
/*15176*/ typedef struct _CRYPT_HASH_MESSAGE_PARA{
/*15177*/ DWORD cbSize;
/*15178*/ DWORD dwMsgEncodingType;
/*15179*/ HCRYPTPROV_LEGACY hCryptProv;
/*15180*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*15181*/ void*pvHashAuxInfo;
/*15182*/ }CRYPT_HASH_MESSAGE_PARA,*PCRYPT_HASH_MESSAGE_PARA;
/*15196*/ typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA{
/*15197*/ DWORD cbSize;
/*15198*/ DWORD dwMsgAndCertEncodingType;
/*15201*/ union{
/*15202*/ HCRYPTPROV hCryptProv;
/*15203*/ NCRYPT_KEY_HANDLE hNCryptKey;
/*15204*/ }u;
/*15207*/ DWORD dwKeySpec;
/*15209*/ CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
/*15210*/ void*pvHashAuxInfo;
/*15212*/ CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
/*15213*/ }CRYPT_KEY_SIGN_MESSAGE_PARA,*PCRYPT_KEY_SIGN_MESSAGE_PARA;
/*15226*/ typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA{
/*15227*/ DWORD cbSize;
/*15228*/ DWORD dwMsgEncodingType;
/*15229*/ HCRYPTPROV_LEGACY hCryptProv;
/*15230*/ }CRYPT_KEY_VERIFY_MESSAGE_PARA,*PCRYPT_KEY_VERIFY_MESSAGE_PARA;
/*15239*/ 
/*15240*/ BOOL
/*15241*/ typ
/*15242*/ CryptSignMessage(
/*15243*/ typ typ typ typ typ PCRYPT_SIGN_MESSAGE_PARA pSignPara,
/*15244*/ typ typ typ typ typ BOOL fDetachedSignature,
/*15245*/ typ typ typ typ typ DWORD cToBeSigned,
/*15246*/ typ typ typ typ typ typ typ typ typ const BYTE*rgpbToBeSigned[],
/*15247*/ typ typ typ typ typ typ typ DWORD rgcbToBeSigned[],
/*15248*/ typ typ typ typ typ typ typ typ typ BYTE*pbSignedBlob,
/*15249*/ typ typ typ typ typ DWORD*pcbSignedBlob
/*15250*/ );
/*15288*/ 
/*15289*/ BOOL
/*15290*/ typ
/*15291*/ CryptVerifyMessageSignature(
/*15292*/ typ typ typ typ typ PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
/*15293*/ typ typ typ typ typ DWORD dwSignerIndex,
/*15294*/ typ typ typ typ typ typ typ const BYTE*pbSignedBlob,
/*15295*/ typ typ typ typ typ DWORD cbSignedBlob,
/*15296*/ typ typ typ typ typ typ typ typ typ BYTE*pbDecoded,
/*15297*/ typ typ typ typ typ typ typ DWORD*pcbDecoded,
/*15298*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppSignerCert
/*15299*/ );
/*15305*/ 
/*15306*/ LONG
/*15307*/ typ
/*15308*/ CryptGetMessageSignerCount(
/*15309*/ typ typ typ typ typ DWORD dwMsgEncodingType,
/*15310*/ typ typ typ typ typ typ typ const BYTE*pbSignedBlob,
/*15311*/ typ typ typ typ typ DWORD cbSignedBlob
/*15312*/ );
/*15318*/ 
/*15319*/ HCERTSTORE
/*15320*/ typ
/*15321*/ CryptGetMessageCertificates(
/*15322*/ typ typ typ typ typ DWORD dwMsgAndCertEncodingType,
/*15323*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hCryptProv,
/*15324*/ typ typ typ typ typ DWORD dwFlags,
/*15325*/ typ typ typ typ typ typ typ const BYTE*pbSignedBlob,
/*15326*/ typ typ typ typ typ DWORD cbSignedBlob
/*15327*/ );
/*15334*/ 
/*15335*/ BOOL
/*15336*/ typ
/*15337*/ CryptVerifyDetachedMessageSignature(
/*15338*/ typ typ typ typ typ PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
/*15339*/ typ typ typ typ typ DWORD dwSignerIndex,
/*15340*/ typ typ typ typ typ typ typ const BYTE*pbDetachedSignBlob,
/*15341*/ typ typ typ typ typ DWORD cbDetachedSignBlob,
/*15342*/ typ typ typ typ typ DWORD cToBeSigned,
/*15343*/ typ typ typ typ typ typ typ const BYTE*rgpbToBeSigned[],
/*15344*/ typ typ typ typ typ typ typ DWORD rgcbToBeSigned[],
/*15345*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppSignerCert
/*15346*/ );
/*15351*/ 
/*15352*/ BOOL
/*15353*/ typ
/*15354*/ CryptEncryptMessage(
/*15355*/ typ typ typ typ typ PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
/*15356*/ typ typ typ typ typ DWORD cRecipientCert,
/*15357*/ typ typ typ typ typ typ typ PCCERT_CONTEXT rgpRecipientCert[],
/*15358*/ typ typ typ typ typ typ typ typ typ const BYTE*pbToBeEncrypted,
/*15359*/ typ typ typ typ typ DWORD cbToBeEncrypted,
/*15360*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncryptedBlob,
/*15361*/ typ typ typ typ typ DWORD*pcbEncryptedBlob
/*15362*/ );
/*15378*/ 
/*15379*/ BOOL
/*15380*/ typ
/*15381*/ CryptDecryptMessage(
/*15382*/ typ typ typ typ typ PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
/*15383*/ typ typ typ typ typ typ typ const BYTE*pbEncryptedBlob,
/*15384*/ typ typ typ typ typ DWORD cbEncryptedBlob,
/*15385*/ typ typ typ typ typ typ typ typ typ BYTE*pbDecrypted,
/*15386*/ typ typ typ typ typ typ typ DWORD*pcbDecrypted,
/*15387*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppXchgCert
/*15388*/ );
/*15397*/ 
/*15398*/ BOOL
/*15399*/ typ
/*15400*/ CryptSignAndEncryptMessage(
/*15401*/ typ typ typ typ typ PCRYPT_SIGN_MESSAGE_PARA pSignPara,
/*15402*/ typ typ typ typ typ PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
/*15403*/ typ typ typ typ typ DWORD cRecipientCert,
/*15404*/ typ typ typ typ typ typ typ PCCERT_CONTEXT rgpRecipientCert[],
/*15405*/ typ typ typ typ typ typ typ const BYTE*pbToBeSignedAndEncrypted,
/*15406*/ typ typ typ typ typ DWORD cbToBeSignedAndEncrypted,
/*15407*/ typ typ typ typ typ typ typ typ typ BYTE*pbSignedAndEncryptedBlob,
/*15408*/ typ typ typ typ typ DWORD*pcbSignedAndEncryptedBlob
/*15409*/ );
/*15438*/ 
/*15439*/ BOOL
/*15440*/ typ
/*15441*/ CryptDecryptAndVerifyMessageSignature(
/*15442*/ typ typ typ typ typ PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
/*15443*/ typ typ typ typ typ PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
/*15444*/ typ typ typ typ typ DWORD dwSignerIndex,
/*15445*/ typ typ typ typ typ typ typ const BYTE*pbEncryptedBlob,
/*15446*/ typ typ typ typ typ DWORD cbEncryptedBlob,
/*15447*/ typ typ typ typ typ typ typ typ typ BYTE*pbDecrypted,
/*15448*/ typ typ typ typ typ typ typ DWORD*pcbDecrypted,
/*15449*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppXchgCert,
/*15450*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppSignerCert
/*15451*/ );
/*15485*/ 
/*15486*/ BOOL
/*15487*/ typ
/*15488*/ CryptDecodeMessage(
/*15489*/ typ typ typ typ typ DWORD dwMsgTypeFlags,
/*15490*/ typ typ typ typ typ typ typ PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
/*15491*/ typ typ typ typ typ typ typ PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
/*15492*/ typ typ typ typ typ DWORD dwSignerIndex,
/*15493*/ typ typ typ typ typ typ typ const BYTE*pbEncodedBlob,
/*15494*/ typ typ typ typ typ DWORD cbEncodedBlob,
/*15495*/ typ typ typ typ typ DWORD dwPrevInnerContentType,
/*15496*/ typ typ typ typ typ typ typ DWORD*pdwMsgType,
/*15497*/ typ typ typ typ typ typ typ DWORD*pdwInnerContentType,
/*15498*/ typ typ typ typ typ typ typ typ typ BYTE*pbDecoded,
/*15499*/ typ typ typ typ typ typ typ DWORD*pcbDecoded,
/*15500*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppXchgCert,
/*15501*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PCCERT_CONTEXT*ppSignerCert
/*15502*/ );
/*15514*/ 
/*15515*/ BOOL
/*15516*/ typ
/*15517*/ CryptHashMessage(
/*15518*/ typ typ typ typ typ PCRYPT_HASH_MESSAGE_PARA pHashPara,
/*15519*/ typ typ typ typ typ BOOL fDetachedHash,
/*15520*/ typ typ typ typ typ DWORD cToBeHashed,
/*15521*/ typ typ typ typ typ typ typ const BYTE*rgpbToBeHashed[],
/*15522*/ typ typ typ typ typ typ typ DWORD rgcbToBeHashed[],
/*15523*/ typ typ typ typ typ typ typ typ typ BYTE*pbHashedBlob,
/*15524*/ typ typ typ typ typ typ typ DWORD*pcbHashedBlob,
/*15525*/ typ typ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*15526*/ typ typ typ typ typ typ typ DWORD*pcbComputedHash
/*15527*/ );
/*15535*/ 
/*15536*/ BOOL
/*15537*/ typ
/*15538*/ CryptVerifyMessageHash(
/*15539*/ typ typ typ typ typ PCRYPT_HASH_MESSAGE_PARA pHashPara,
/*15540*/ typ typ typ typ typ typ typ BYTE*pbHashedBlob,
/*15541*/ typ typ typ typ typ DWORD cbHashedBlob,
/*15542*/ typ typ typ typ typ typ typ typ typ BYTE*pbToBeHashed,
/*15543*/ typ typ typ typ typ typ typ DWORD*pcbToBeHashed,
/*15544*/ typ typ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*15545*/ typ typ typ typ typ typ typ DWORD*pcbComputedHash
/*15546*/ );
/*15556*/ 
/*15557*/ BOOL
/*15558*/ typ
/*15559*/ CryptVerifyDetachedMessageHash(
/*15560*/ typ typ typ typ typ PCRYPT_HASH_MESSAGE_PARA pHashPara,
/*15561*/ typ typ typ typ typ typ typ BYTE*pbDetachedHashBlob,
/*15562*/ typ typ typ typ typ DWORD cbDetachedHashBlob,
/*15563*/ typ typ typ typ typ DWORD cToBeHashed,
/*15564*/ typ typ typ typ typ typ typ const BYTE*rgpbToBeHashed[],
/*15565*/ typ typ typ typ typ typ typ DWORD rgcbToBeHashed[],
/*15566*/ typ typ typ typ typ typ typ typ typ BYTE*pbComputedHash,
/*15567*/ typ typ typ typ typ typ typ DWORD*pcbComputedHash
/*15568*/ );
/*15576*/ 
/*15577*/ BOOL
/*15578*/ typ
/*15579*/ CryptSignMessageWithKey(
/*15580*/ typ typ typ typ typ PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
/*15581*/ typ typ typ typ typ typ typ const BYTE*pbToBeSigned,
/*15582*/ typ typ typ typ typ DWORD cbToBeSigned,
/*15583*/ typ typ typ typ typ typ typ typ typ BYTE*pbSignedBlob,
/*15584*/ typ typ typ typ typ DWORD*pcbSignedBlob
/*15585*/ );
/*15600*/ 
/*15601*/ BOOL
/*15602*/ typ
/*15603*/ CryptVerifyMessageSignatureWithKey(
/*15604*/ typ typ typ typ typ PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
/*15605*/ typ typ typ typ typ typ typ PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
/*15606*/ typ typ typ typ typ typ typ const BYTE*pbSignedBlob,
/*15607*/ typ typ typ typ typ DWORD cbSignedBlob,
/*15608*/ typ typ typ typ typ typ typ typ typ BYTE*pbDecoded,
/*15609*/ typ typ typ typ typ typ typ DWORD*pcbDecoded
/*15610*/ );
/*15639*/ 
/*15640*/ HCERTSTORE
/*15641*/ typ
/*15642*/ CertOpenSystemStoreA(
/*15643*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hProv,
/*15644*/ typ typ typ typ typ LPCSTR szSubsystemProtocol
/*15645*/ );
/*15646*/ 
/*15647*/ HCERTSTORE
/*15648*/ typ
/*15649*/ CertOpenSystemStoreW(
/*15650*/ typ typ typ typ typ typ typ HCRYPTPROV_LEGACY hProv,
/*15651*/ typ typ typ typ typ LPCWSTR szSubsystemProtocol
/*15652*/ );
/*15659*/ 
/*15660*/ BOOL
/*15661*/ typ
/*15662*/ CertAddEncodedCertificateToSystemStoreA(
/*15663*/ typ typ typ typ typ LPCSTR szCertStoreName,
/*15664*/ typ typ typ typ typ typ typ const BYTE*pbCertEncoded,
/*15665*/ typ typ typ typ typ DWORD cbCertEncoded
/*15666*/ );
/*15667*/ 
/*15668*/ BOOL
/*15669*/ typ
/*15670*/ CertAddEncodedCertificateToSystemStoreW(
/*15671*/ typ typ typ typ typ LPCWSTR szCertStoreName,
/*15672*/ typ typ typ typ typ typ typ const BYTE*pbCertEncoded,
/*15673*/ typ typ typ typ typ DWORD cbCertEncoded
/*15674*/ );
/*15693*/ typedef struct _CERT_CHAIN{
/*15694*/ DWORD cCerts;
/*15695*/ PCERT_BLOB certs;
/*15697*/ CRYPT_KEY_PROV_INFO keyLocatorInfo;
/*15698*/ }CERT_CHAIN,*PCERT_CHAIN;
/*15702*/ HRESULT
/*15703*/ typ
/*15704*/ FindCertsByIssuer(
/*15705*/ typ typ typ typ typ typ typ typ typ PCERT_CHAIN pCertChains,
/*15706*/ typ typ typ typ typ DWORD*pcbCertChains,
/*15707*/ typ typ typ typ typ DWORD*pcCertChains,
/*15708*/ typ typ typ typ typ typ typ typ typ BYTE*pbEncodedIssuerName,
/*15709*/ typ typ typ typ typ DWORD cbEncodedIssuerName,
/*15710*/ typ typ typ typ typ typ typ LPCWSTR pwszPurpose,
/*15711*/ typ typ typ typ typ DWORD dwKeySpec
/*15713*/ );
/*15845*/ 
/*15846*/ BOOL
/*15847*/ typ
/*15848*/ CryptQueryObject(
/*15849*/ typ typ typ typ typ DWORD dwObjectType,
/*15850*/ typ typ typ typ typ const void*pvObject,
/*15851*/ typ typ typ typ typ DWORD dwExpectedContentTypeFlags,
/*15852*/ typ typ typ typ typ DWORD dwExpectedFormatTypeFlags,
/*15853*/ typ typ typ typ typ DWORD dwFlags,
/*15854*/ typ typ typ typ typ typ typ DWORD*pdwMsgAndCertEncodingType,
/*15855*/ typ typ typ typ typ typ typ DWORD*pdwContentType,
/*15856*/ typ typ typ typ typ typ typ DWORD*pdwFormatType,
/*15857*/ typ typ typ typ typ typ typ HCERTSTORE*phCertStore,
/*15858*/ typ typ typ typ typ typ typ HCRYPTMSG*phMsg,
/*15859*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ const void**ppvContext
/*15860*/ );
/*16020*/ 
/*16021*/ LPVOID
/*16022*/ typ
/*16023*/ CryptMemAlloc(
/*16024*/ typ typ typ typ typ ULONG cbSize
/*16025*/ );
/*16027*/ 
/*16028*/ LPVOID
/*16029*/ typ
/*16030*/ CryptMemRealloc(
/*16031*/ typ typ typ typ typ typ typ LPVOID pv,
/*16032*/ typ typ typ typ typ ULONG cbSize
/*16033*/ );
/*16035*/ 
/*16036*/ void
/*16037*/ typ
/*16038*/ CryptMemFree(
/*16039*/ typ typ typ typ typ typ typ LPVOID pv
/*16040*/ );
/*16052*/ typedef HANDLE HCRYPTASYNC,*PHCRYPTASYNC;
/*16054*/ typedef void(typ*PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(
/*16055*/ typ typ typ typ typ LPSTR pszParamOid,
/*16056*/ typ typ typ typ typ LPVOID pvParam
/*16057*/ );
/*16059*/ 
/*16060*/ BOOL
/*16061*/ typ
/*16062*/ CryptCreateAsyncHandle(
/*16063*/ typ typ typ typ typ DWORD dwFlags,
/*16064*/ typ typ typ typ typ PHCRYPTASYNC phAsync
/*16065*/ );
/*16067*/ 
/*16068*/ BOOL
/*16069*/ typ
/*16070*/ CryptSetAsyncParam(
/*16071*/ typ typ typ typ typ HCRYPTASYNC hAsync,
/*16072*/ typ typ typ typ typ LPSTR pszParamOid,
/*16073*/ typ typ typ typ typ typ typ LPVOID pvParam,
/*16074*/ typ PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree
/*16075*/ );
/*16077*/ 
/*16078*/ BOOL
/*16079*/ typ
/*16080*/ CryptGetAsyncParam(
/*16081*/ typ typ typ typ typ HCRYPTASYNC hAsync,
/*16082*/ typ typ typ typ typ LPSTR pszParamOid,
/*16083*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*ppvParam,
/*16084*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PFN_CRYPT_ASYNC_PARAM_FREE_FUNC*ppfnFree
/*16085*/ );
/*16087*/ 
/*16088*/ BOOL
/*16089*/ typ
/*16090*/ CryptCloseAsyncHandle(
/*16091*/ typ typ typ typ typ typ typ HCRYPTASYNC hAsync
/*16092*/ );
/*16108*/ typedef struct _CRYPT_BLOB_ARRAY{
/*16109*/ DWORD cBlob;
/*16110*/ PCRYPT_DATA_BLOB rgBlob;
/*16111*/ }CRYPT_BLOB_ARRAY,*PCRYPT_BLOB_ARRAY;
/*16113*/ typedef struct _CRYPT_CREDENTIALS{
/*16114*/ DWORD cbSize;
/*16115*/ LPCSTR pszCredentialsOid;
/*16116*/ LPVOID pvCredentials;
/*16117*/ }CRYPT_CREDENTIALS,*PCRYPT_CREDENTIALS;
/*16128*/ typedef struct _CRYPT_PASSWORD_CREDENTIALSA{
/*16129*/ DWORD cbSize;
/*16130*/ LPSTR pszUsername;
/*16131*/ LPSTR pszPassword;
/*16132*/ }CRYPT_PASSWORD_CREDENTIALSA,*PCRYPT_PASSWORD_CREDENTIALSA;
/*16133*/ typedef struct _CRYPT_PASSWORD_CREDENTIALSW{
/*16134*/ DWORD cbSize;
/*16135*/ LPWSTR pszUsername;
/*16136*/ LPWSTR pszPassword;
/*16137*/ }CRYPT_PASSWORD_CREDENTIALSW,*PCRYPT_PASSWORD_CREDENTIALSW;
/*16142*/ typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
/*16143*/ typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
/*16157*/ typedef void(typ*PFN_FREE_ENCODED_OBJECT_FUNC)(
/*16158*/ typ typ typ typ typ typ typ LPCSTR pszObjectOid,
/*16159*/ typ typ typ typ typ PCRYPT_BLOB_ARRAY pObject,
/*16160*/ typ typ typ typ typ typ typ LPVOID pvFreeContext
/*16161*/ );
/*16328*/ typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO{
/*16329*/ DWORD cbSize;
/*16330*/ DWORD dwObjectType;
/*16338*/ DWORD dwError;
/*16339*/ DWORD dwReserved;
/*16341*/ FILETIME ThisUpdateTime;
/*16342*/ FILETIME NextUpdateTime;
/*16343*/ FILETIME PublishTime;
/*16344*/ }CRYPTNET_URL_CACHE_PRE_FETCH_INFO,*PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
/*16358*/ typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO{
/*16359*/ DWORD cbSize;
/*16364*/ DWORD dwExemptSeconds;
/*16369*/ FILETIME ExpireTime;
/*16370*/ }CRYPTNET_URL_CACHE_FLUSH_INFO,*PCRYPTNET_URL_CACHE_FLUSH_INFO;
/*16379*/ typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO{
/*16380*/ DWORD cbSize;
/*16381*/ WORD wResponseType;
/*16382*/ WORD wResponseFlags;
/*16385*/ FILETIME LastModifiedTime;
/*16386*/ DWORD dwMaxAge;
/*16387*/ LPCWSTR pwszETag;
/*16388*/ DWORD dwProxyId;
/*16389*/ }CRYPTNET_URL_CACHE_RESPONSE_INFO,*PCRYPTNET_URL_CACHE_RESPONSE_INFO;
/*16406*/ typedef struct _CRYPT_RETRIEVE_AUX_INFO{
/*16407*/ DWORD cbSize;
/*16408*/ FILETIME*pLastSyncTime;
/*16411*/ DWORD dwMaxUrlRetrievalByteCount;
/*16417*/ PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;
/*16423*/ PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;
/*16429*/ PCRYPTNET_URL_CACHE_RESPONSE_INFO*ppResponseInfo;
/*16433*/ LPWSTR pwszCacheFileNamePrefix;
/*16439*/ LPFILETIME pftCacheResync;
/*16445*/ BOOL fProxyCacheRetrieval;
/*16455*/ DWORD dwHttpStatusCode;
/*16456*/ }CRYPT_RETRIEVE_AUX_INFO,*PCRYPT_RETRIEVE_AUX_INFO;
/*16459*/ 
/*16460*/ typ
/*16461*/ BOOL
/*16462*/ typ
/*16463*/ CryptRetrieveObjectByUrlA(
/*16464*/ typ typ typ typ typ LPCSTR pszUrl,
/*16465*/ typ typ typ typ typ typ typ LPCSTR pszObjectOid,
/*16466*/ typ typ typ typ typ DWORD dwRetrievalFlags,
/*16467*/ typ typ typ typ typ DWORD dwTimeout,
/*16468*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*ppvObject,
/*16469*/ typ typ typ typ typ typ typ HCRYPTASYNC hAsyncRetrieve,
/*16470*/ typ typ typ typ typ typ typ PCRYPT_CREDENTIALS pCredentials,
/*16471*/ typ typ typ typ typ typ typ LPVOID pvVerify,
/*16472*/ typ typ typ typ typ typ typ PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
/*16473*/ );
/*16474*/ 
/*16475*/ typ
/*16476*/ BOOL
/*16477*/ typ
/*16478*/ CryptRetrieveObjectByUrlW(
/*16479*/ typ typ typ typ typ LPCWSTR pszUrl,
/*16480*/ typ typ typ typ typ typ typ LPCSTR pszObjectOid,
/*16481*/ typ typ typ typ typ DWORD dwRetrievalFlags,
/*16482*/ typ typ typ typ typ DWORD dwTimeout,
/*16483*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*ppvObject,
/*16484*/ typ typ typ typ typ typ typ HCRYPTASYNC hAsyncRetrieve,
/*16485*/ typ typ typ typ typ typ typ PCRYPT_CREDENTIALS pCredentials,
/*16486*/ typ typ typ typ typ typ typ LPVOID pvVerify,
/*16487*/ typ typ typ typ typ typ typ PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
/*16488*/ );
/*16507*/ typedef BOOL(typ*PFN_CRYPT_CANCEL_RETRIEVAL)(
/*16508*/ typ typ typ typ typ DWORD dwFlags,
/*16509*/ typ typ typ typ typ typ typ void*pvArg
/*16510*/ );
/*16520*/ 
/*16521*/ BOOL
/*16522*/ typ
/*16523*/ CryptInstallCancelRetrieval(
/*16524*/ typ PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
/*16525*/ typ typ typ typ typ typ typ const void*pvArg,
/*16526*/ typ typ typ typ typ DWORD dwFlags,
/*16527*/ typ typ void*pvReserved
/*16528*/ );
/*16531*/ 
/*16532*/ BOOL
/*16533*/ typ
/*16534*/ CryptUninstallCancelRetrieval(
/*16535*/ typ typ typ typ typ DWORD dwFlags,
/*16536*/ typ typ void*pvReserved
/*16537*/ );
/*16540*/ 
/*16541*/ BOOL
/*16542*/ typ
/*16543*/ CryptCancelAsyncRetrieval(
/*16544*/ typ typ typ typ typ typ typ HCRYPTASYNC hAsyncRetrieval
/*16545*/ );
/*16558*/ typedef void(typ*PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(
/*16559*/ typ typ typ typ typ typ typ LPVOID pvCompletion,
/*16560*/ typ typ typ typ typ DWORD dwCompletionCode,
/*16561*/ typ typ typ typ typ LPCSTR pszUrl,
/*16562*/ typ typ typ typ typ typ typ LPSTR pszObjectOid,
/*16563*/ typ typ typ typ typ LPVOID pvObject
/*16564*/ );
/*16566*/ typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION{
/*16567*/ typ PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
/*16568*/ typ typ typ typ typ typ typ LPVOID pvCompletion;
/*16569*/ }CRYPT_ASYNC_RETRIEVAL_COMPLETION,*PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
/*16578*/ typedef BOOL(typ*PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(
/*16579*/ typ typ typ typ typ typ typ HCRYPTASYNC hAsyncRetrieve
/*16580*/ );
/*16591*/ typedef struct _CRYPT_URL_ARRAY{
/*16592*/ DWORD cUrl;
/*16593*/ LPWSTR*rgwszUrl;
/*16594*/ }CRYPT_URL_ARRAY,*PCRYPT_URL_ARRAY;
/*16596*/ typedef struct _CRYPT_URL_INFO{
/*16597*/ DWORD cbSize;
/*16600*/ DWORD dwSyncDeltaTime;
/*16605*/ DWORD cGroup;
/*16606*/ DWORD*rgcGroupEntry;
/*16607*/ }CRYPT_URL_INFO,*PCRYPT_URL_INFO;
/*16609*/ 
/*16610*/ BOOL
/*16611*/ typ
/*16612*/ CryptGetObjectUrl(
/*16613*/ typ typ typ typ typ LPCSTR pszUrlOid,
/*16614*/ typ typ typ typ typ LPVOID pvPara,
/*16615*/ typ typ typ typ typ DWORD dwFlags,
/*16616*/ typ typ typ typ typ typ typ typ typ PCRYPT_URL_ARRAY pUrlArray,
/*16617*/ typ typ typ typ typ DWORD*pcbUrlArray,
/*16618*/ typ typ typ typ typ typ typ typ typ PCRYPT_URL_INFO pUrlInfo,
/*16619*/ typ typ typ typ typ typ typ DWORD*pcbUrlInfo,
/*16620*/ typ typ LPVOID pvReserved
/*16621*/ );
/*16745*/ typedef struct _CERT_CRL_CONTEXT_PAIR{
/*16746*/ PCCERT_CONTEXT pCertContext;
/*16747*/ PCCRL_CONTEXT pCrlContext;
/*16748*/ }CERT_CRL_CONTEXT_PAIR,*PCERT_CRL_CONTEXT_PAIR;
/*16749*/ typedef const CERT_CRL_CONTEXT_PAIR*PCCERT_CRL_CONTEXT_PAIR;
/*16763*/ typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO{
/*16764*/ DWORD cbSize;
/*16767*/ int iDeltaCrlIndicator;
/*16771*/ LPFILETIME pftCacheResync;
/*16774*/ LPFILETIME pLastSyncTime;
/*16779*/ LPFILETIME pMaxAgeTime;
/*16783*/ PCERT_REVOCATION_CHAIN_PARA pChainPara;
/*16784*/ }CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
/*16785*/ *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;
/*16787*/ 
/*16788*/ typ
/*16789*/ BOOL
/*16790*/ typ
/*16791*/ CryptGetTimeValidObject(
/*16792*/ typ typ typ typ typ LPCSTR pszTimeValidOid,
/*16793*/ typ typ typ typ typ LPVOID pvPara,
/*16794*/ typ typ typ typ typ PCCERT_CONTEXT pIssuer,
/*16795*/ typ typ typ typ typ typ typ LPFILETIME pftValidFor,
/*16796*/ typ typ typ typ typ DWORD dwFlags,
/*16797*/ typ typ typ typ typ DWORD dwTimeout,
/*16798*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID*ppvObject,
/*16799*/ typ typ typ typ typ typ typ PCRYPT_CREDENTIALS pCredentials,
/*16800*/ typ typ typ typ typ typ typ PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo
/*16801*/ );
/*16838*/ 
/*16839*/ BOOL
/*16840*/ typ
/*16841*/ CryptFlushTimeValidObject(
/*16842*/ typ typ typ typ typ LPCSTR pszFlushTimeValidOid,
/*16843*/ typ typ typ typ typ LPVOID pvPara,
/*16844*/ typ typ typ typ typ PCCERT_CONTEXT pIssuer,
/*16845*/ typ typ typ typ typ DWORD dwFlags,
/*16846*/ typ typ LPVOID pvReserved
/*16847*/ );
/*16902*/ typedef struct _CRYPTPROTECT_PROMPTSTRUCT
/*16903*/ {
/*16904*/ DWORD cbSize;
/*16905*/ DWORD dwPromptFlags;
/*16906*/ HWND hwndApp;
/*16907*/ LPCWSTR szPrompt;
/*16908*/ }CRYPTPROTECT_PROMPTSTRUCT,*PCRYPTPROTECT_PROMPTSTRUCT;
/*16983*/ 
/*16984*/ BOOL
/*16985*/ typ
/*16986*/ CryptProtectData(
/*16987*/ typ DATA_BLOB*pDataIn,
/*16988*/ typ typ typ typ typ typ typ LPCWSTR szDataDescr,
/*16989*/ typ typ DATA_BLOB*pOptionalEntropy,
/*16990*/ typ typ PVOID pvReserved,
/*16991*/ typ typ CRYPTPROTECT_PROMPTSTRUCT*pPromptStruct,
/*16992*/ typ DWORD dwFlags,
/*16993*/ typ DATA_BLOB*pDataOut
/*16994*/ );
/*16996*/ 
/*16997*/ BOOL
/*16998*/ typ
/*16999*/ CryptUnprotectData(
/*17000*/ typ DATA_BLOB*pDataIn,
/*17001*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPWSTR*ppszDataDescr,
/*17002*/ typ typ DATA_BLOB*pOptionalEntropy,
/*17003*/ typ typ PVOID pvReserved,
/*17004*/ typ typ CRYPTPROTECT_PROMPTSTRUCT*pPromptStruct,
/*17005*/ typ DWORD dwFlags,
/*17006*/ typ DATA_BLOB*pDataOut
/*17007*/ );
/*17009*/ 
/*17010*/ BOOL
/*17011*/ typ
/*17012*/ CryptUpdateProtectedState(
/*17013*/ typ typ typ typ typ typ typ PSID pOldSid,
/*17014*/ typ typ typ typ typ typ typ LPCWSTR pwszOldPassword,
/*17015*/ typ typ typ typ typ DWORD dwFlags,
/*17016*/ typ typ typ typ typ typ typ DWORD*pdwSuccessCount,
/*17017*/ typ typ typ typ typ typ typ DWORD*pdwFailureCount);
/*17053*/ 
/*17054*/ BOOL
/*17055*/ typ
/*17056*/ CryptProtectMemory(
/*17057*/ typ typ LPVOID pDataIn,
/*17058*/ typ DWORD cbDataIn,
/*17059*/ typ DWORD dwFlags
/*17060*/ );
/*17062*/ 
/*17063*/ BOOL
/*17064*/ typ
/*17065*/ CryptUnprotectMemory(
/*17066*/ typ typ LPVOID pDataIn,
/*17067*/ typ DWORD cbDataIn,
/*17068*/ typ DWORD dwFlags
/*17069*/ );
/*17107*/ 
/*17108*/ PCCERT_CONTEXT
/*17109*/ typ
/*17110*/ CertCreateSelfSignCertificate(
/*17111*/ typ typ typ typ typ typ typ HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
/*17112*/ typ typ typ typ typ PCERT_NAME_BLOB pSubjectIssuerBlob,
/*17113*/ typ typ typ typ typ DWORD dwFlags,
/*17114*/ typ typ typ typ typ typ typ PCRYPT_KEY_PROV_INFO pKeyProvInfo,
/*17115*/ typ typ typ typ typ typ typ PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
/*17116*/ typ typ typ typ typ typ typ PSYSTEMTIME pStartTime,
/*17117*/ typ typ typ typ typ typ typ PSYSTEMTIME pEndTime,
/*17118*/ typ typ typ typ typ typ typ PCERT_EXTENSIONS pExtensions
/*17119*/ );
/*17153*/ 
/*17154*/ BOOL
/*17155*/ typ
/*17156*/ CryptGetKeyIdentifierProperty(
/*17157*/ typ typ typ typ typ const CRYPT_HASH_BLOB*pKeyIdentifier,
/*17158*/ typ typ typ typ typ DWORD dwPropId,
/*17159*/ typ typ typ typ typ DWORD dwFlags,
/*17160*/ typ typ typ typ typ typ typ LPCWSTR pwszComputerName,
/*17161*/ typ typ void*pvReserved,
/*17162*/ typ typ typ typ typ typ typ typ typ void*pvData,
/*17163*/ typ typ typ typ typ DWORD*pcbData
/*17164*/ );
/*17194*/ 
/*17195*/ BOOL
/*17196*/ typ
/*17197*/ CryptSetKeyIdentifierProperty(
/*17198*/ typ typ typ typ typ const CRYPT_HASH_BLOB*pKeyIdentifier,
/*17199*/ typ typ typ typ typ DWORD dwPropId,
/*17200*/ typ typ typ typ typ DWORD dwFlags,
/*17201*/ typ typ typ typ typ typ typ LPCWSTR pwszComputerName,
/*17202*/ typ typ void*pvReserved,
/*17203*/ typ typ typ typ typ typ typ const void*pvData
/*17204*/ );
/*17221*/ typedef BOOL(typ*PFN_CRYPT_ENUM_KEYID_PROP)(
/*17222*/ typ typ typ typ typ const CRYPT_HASH_BLOB*pKeyIdentifier,
/*17223*/ typ typ typ typ typ DWORD dwFlags,
/*17224*/ typ typ void*pvReserved,
/*17225*/ typ typ typ typ typ typ typ void*pvArg,
/*17226*/ typ typ typ typ typ DWORD cProp,
/*17227*/ typ typ typ typ typ typ typ DWORD*rgdwPropId,
/*17228*/ typ typ typ typ typ typ typ void**rgpvData,
/*17229*/ typ typ typ typ typ typ typ DWORD*rgcbData
/*17230*/ );
/*17246*/ 
/*17247*/ BOOL
/*17248*/ typ
/*17249*/ CryptEnumKeyIdentifierProperties(
/*17250*/ typ typ typ typ typ typ typ const CRYPT_HASH_BLOB*pKeyIdentifier,
/*17251*/ typ typ typ typ typ DWORD dwPropId,
/*17252*/ typ typ typ typ typ DWORD dwFlags,
/*17253*/ typ typ typ typ typ typ typ LPCWSTR pwszComputerName,
/*17254*/ typ typ void*pvReserved,
/*17255*/ typ typ typ typ typ typ typ void*pvArg,
/*17256*/ typ PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
/*17257*/ );
/*17270*/ 
/*17271*/ BOOL
/*17272*/ typ
/*17273*/ CryptCreateKeyIdentifierFromCSP(
/*17274*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*17275*/ typ typ typ typ typ typ typ LPCSTR pszPubKeyOID,
/*17276*/ typ typ typ typ typ typ typ const PUBLICKEYSTRUC*pPubKeyStruc,
/*17277*/ typ typ typ typ typ DWORD cbPubKeyStruc,
/*17278*/ typ typ typ typ typ DWORD dwFlags,
/*17279*/ typ typ void*pvReserved,
/*17280*/ typ typ typ typ typ typ typ typ typ BYTE*pbHash,
/*17281*/ typ typ typ typ typ DWORD*pcbHash
/*17282*/ );
/*17659*/ typedef HANDLE HCERTCHAINENGINE;
/*17714*/ typedef struct _CERT_CHAIN_ENGINE_CONFIG{
/*17716*/ DWORD cbSize;
/*17717*/ HCERTSTORE hRestrictedRoot;
/*17718*/ HCERTSTORE hRestrictedTrust;
/*17719*/ HCERTSTORE hRestrictedOther;
/*17720*/ DWORD cAdditionalStore;
/*17721*/ HCERTSTORE*rghAdditionalStore;
/*17722*/ DWORD dwFlags;
/*17723*/ DWORD dwUrlRetrievalTimeout;
/*17724*/ DWORD MaximumCachedCertificates;
/*17725*/ DWORD CycleDetectionModulus;
/*17727*/ }CERT_CHAIN_ENGINE_CONFIG,*PCERT_CHAIN_ENGINE_CONFIG;
/*17729*/ 
/*17730*/ typ
/*17731*/ BOOL
/*17732*/ typ
/*17733*/ CertCreateCertificateChainEngine(
/*17734*/ typ typ typ typ typ PCERT_CHAIN_ENGINE_CONFIG pConfig,
/*17735*/ typ typ typ typ typ HCERTCHAINENGINE*phChainEngine
/*17736*/ );
/*17742*/ 
/*17743*/ void
/*17744*/ typ
/*17745*/ CertFreeCertificateChainEngine(
/*17746*/ typ typ typ typ typ typ typ HCERTCHAINENGINE hChainEngine
/*17747*/ );
/*17754*/ 
/*17755*/ BOOL
/*17756*/ typ
/*17757*/ CertResyncCertificateChainEngine(
/*17758*/ typ typ typ typ typ typ typ HCERTCHAINENGINE hChainEngine
/*17759*/ );
/*17775*/ typedef struct _CERT_TRUST_STATUS{
/*17777*/ DWORD dwErrorStatus;
/*17778*/ DWORD dwInfoStatus;
/*17780*/ }CERT_TRUST_STATUS,*PCERT_TRUST_STATUS;
/*17864*/ typedef struct _CERT_REVOCATION_INFO{
/*17866*/ DWORD cbSize;
/*17867*/ DWORD dwRevocationResult;
/*17868*/ LPCSTR pszRevocationOid;
/*17869*/ LPVOID pvOidSpecificInfo;
/*17873*/ BOOL fHasFreshnessTime;
/*17874*/ DWORD dwFreshnessTime;
/*17877*/ PCERT_REVOCATION_CRL_INFO pCrlInfo;
/*17879*/ }CERT_REVOCATION_INFO,*PCERT_REVOCATION_INFO;
/*17885*/ typedef struct _CERT_TRUST_LIST_INFO{
/*17887*/ DWORD cbSize;
/*17888*/ PCTL_ENTRY pCtlEntry;
/*17889*/ PCCTL_CONTEXT pCtlContext;
/*17891*/ }CERT_TRUST_LIST_INFO,*PCERT_TRUST_LIST_INFO;
/*17897*/ typedef struct _CERT_CHAIN_ELEMENT{
/*17899*/ DWORD cbSize;
/*17900*/ PCCERT_CONTEXT pCertContext;
/*17901*/ CERT_TRUST_STATUS TrustStatus;
/*17902*/ PCERT_REVOCATION_INFO pRevocationInfo;
/*17904*/ PCERT_ENHKEY_USAGE pIssuanceUsage;
/*17905*/ PCERT_ENHKEY_USAGE pApplicationUsage;
/*17907*/ LPCWSTR pwszExtendedErrorInfo;
/*17908*/ }CERT_CHAIN_ELEMENT,*PCERT_CHAIN_ELEMENT;
/*17919*/ typedef struct _CERT_SIMPLE_CHAIN{
/*17921*/ DWORD cbSize;
/*17922*/ CERT_TRUST_STATUS TrustStatus;
/*17923*/ DWORD cElement;
/*17924*/ PCERT_CHAIN_ELEMENT*rgpElement;
/*17925*/ PCERT_TRUST_LIST_INFO pTrustListInfo;
/*17933*/ BOOL fHasRevocationFreshnessTime;
/*17934*/ DWORD dwRevocationFreshnessTime;
/*17936*/ }CERT_SIMPLE_CHAIN,*PCERT_SIMPLE_CHAIN;
/*17948*/ typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT,*PCERT_CHAIN_CONTEXT;
/*17949*/ typedef const CERT_CHAIN_CONTEXT*PCCERT_CHAIN_CONTEXT;
/*17951*/ struct _CERT_CHAIN_CONTEXT{
/*17952*/ DWORD cbSize;
/*17953*/ CERT_TRUST_STATUS TrustStatus;
/*17954*/ DWORD cChain;
/*17955*/ PCERT_SIMPLE_CHAIN*rgpChain;
/*17959*/ DWORD cLowerQualityChainContext;
/*17960*/ PCCERT_CHAIN_CONTEXT*rgpLowerQualityChainContext;
/*17968*/ BOOL fHasRevocationFreshnessTime;
/*17969*/ DWORD dwRevocationFreshnessTime;
/*17972*/ DWORD dwCreateFlags;
/*17975*/ GUID ChainId;
/*17976*/ };
/*17989*/ typedef struct _CERT_USAGE_MATCH{
/*17991*/ DWORD dwType;
/*17992*/ CERT_ENHKEY_USAGE Usage;
/*17994*/ }CERT_USAGE_MATCH,*PCERT_USAGE_MATCH;
/*17996*/ typedef struct _CTL_USAGE_MATCH{
/*17998*/ DWORD dwType;
/*17999*/ CTL_USAGE Usage;
/*18001*/ }CTL_USAGE_MATCH,*PCTL_USAGE_MATCH;
/*18003*/ typedef struct _CERT_CHAIN_PARA{
/*18005*/ DWORD cbSize;
/*18006*/ CERT_USAGE_MATCH RequestedUsage;
/*18026*/ }CERT_CHAIN_PARA,*PCERT_CHAIN_PARA;
/*18121*/ 
/*18122*/ typ
/*18123*/ BOOL
/*18124*/ typ
/*18125*/ CertGetCertificateChain(
/*18126*/ typ typ typ typ typ typ typ HCERTCHAINENGINE hChainEngine,
/*18127*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*18128*/ typ typ typ typ typ typ typ LPFILETIME pTime,
/*18129*/ typ typ typ typ typ typ typ HCERTSTORE hAdditionalStore,
/*18130*/ typ typ typ typ typ PCERT_CHAIN_PARA pChainPara,
/*18131*/ typ typ typ typ typ DWORD dwFlags,
/*18132*/ typ typ LPVOID pvReserved,
/*18133*/ typ typ typ typ typ PCCERT_CHAIN_CONTEXT*ppChainContext
/*18134*/ );
/*18140*/ 
/*18141*/ void
/*18142*/ typ
/*18143*/ CertFreeCertificateChain(
/*18144*/ typ typ typ typ typ PCCERT_CHAIN_CONTEXT pChainContext
/*18145*/ );
/*18151*/ 
/*18152*/ PCCERT_CHAIN_CONTEXT
/*18153*/ typ
/*18154*/ CertDuplicateCertificateChain(
/*18155*/ typ typ typ typ typ PCCERT_CHAIN_CONTEXT pChainContext
/*18156*/ );
/*18164*/ struct _CERT_REVOCATION_CHAIN_PARA{
/*18165*/ DWORD cbSize;
/*18166*/ HCERTCHAINENGINE hChainEngine;
/*18167*/ HCERTSTORE hAdditionalStore;
/*18168*/ DWORD dwChainFlags;
/*18169*/ DWORD dwUrlRetrievalTimeout;
/*18170*/ LPFILETIME pftCurrentTime;
/*18171*/ LPFILETIME pftCacheResync;
/*18172*/ };
/*18192*/ typedef struct _CRL_REVOCATION_INFO{
/*18194*/ PCRL_ENTRY pCrlEntry;
/*18195*/ PCCRL_CONTEXT pCrlContext;
/*18196*/ PCCERT_CHAIN_CONTEXT pCrlIssuerChain;
/*18198*/ }CRL_REVOCATION_INFO,*PCRL_REVOCATION_INFO;
/*18221*/ 
/*18222*/ PCCERT_CHAIN_CONTEXT
/*18223*/ typ
/*18224*/ CertFindChainInStore(
/*18225*/ typ typ typ typ typ HCERTSTORE hCertStore,
/*18226*/ typ typ typ typ typ DWORD dwCertEncodingType,
/*18227*/ typ typ typ typ typ DWORD dwFindFlags,
/*18228*/ typ typ typ typ typ DWORD dwFindType,
/*18229*/ typ typ typ typ typ typ typ const void*pvFindPara,
/*18230*/ typ typ typ typ typ typ typ PCCERT_CHAIN_CONTEXT pPrevChainContext
/*18231*/ );
/*18280*/ typedef BOOL(typ*PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
/*18281*/ typ typ typ typ typ PCCERT_CONTEXT pCert,
/*18282*/ typ typ typ typ typ typ typ void*pvFindArg
/*18283*/ );
/*18285*/ typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA{
/*18286*/ DWORD cbSize;
/*18289*/ LPCSTR pszUsageIdentifier;
/*18292*/ DWORD dwKeySpec;
/*18299*/ DWORD dwAcquirePrivateKeyFlags;
/*18303*/ DWORD cIssuer;
/*18304*/ CERT_NAME_BLOB*rgIssuer;
/*18309*/ PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
/*18310*/ void*pvFindArg;
/*18332*/ }CERT_CHAIN_FIND_ISSUER_PARA,*PCERT_CHAIN_FIND_ISSUER_PARA,
/*18333*/ CERT_CHAIN_FIND_BY_ISSUER_PARA,*PCERT_CHAIN_FIND_BY_ISSUER_PARA;
/*18372*/ typedef struct _CERT_CHAIN_POLICY_PARA{
/*18373*/ DWORD cbSize;
/*18374*/ DWORD dwFlags;
/*18375*/ void*pvExtraPolicyPara;
/*18376*/ }CERT_CHAIN_POLICY_PARA,*PCERT_CHAIN_POLICY_PARA;
/*18383*/ typedef struct _CERT_CHAIN_POLICY_STATUS{
/*18384*/ DWORD cbSize;
/*18385*/ DWORD dwError;
/*18386*/ LONG lChainIndex;
/*18387*/ LONG lElementIndex;
/*18388*/ void*pvExtraPolicyStatus;
/*18389*/ }CERT_CHAIN_POLICY_STATUS,*PCERT_CHAIN_POLICY_STATUS;
/*18450*/ 
/*18451*/ BOOL
/*18452*/ typ
/*18453*/ CertVerifyCertificateChainPolicy(
/*18454*/ typ typ typ typ typ LPCSTR pszPolicyOID,
/*18455*/ typ typ typ typ typ PCCERT_CHAIN_CONTEXT pChainContext,
/*18456*/ typ typ typ typ typ PCERT_CHAIN_POLICY_PARA pPolicyPara,
/*18457*/ typ typ typ typ typ PCERT_CHAIN_POLICY_STATUS pPolicyStatus
/*18458*/ );
/*18498*/ typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA{
/*18499*/ DWORD cbSize;
/*18500*/ DWORD dwRegPolicySettings;
/*18501*/ PCMSG_SIGNER_INFO pSignerInfo;
/*18502*/ }AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
/*18503*/ *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
/*18505*/ typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS{
/*18506*/ DWORD cbSize;
/*18507*/ BOOL fCommercial;
/*18508*/ }AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
/*18509*/ *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
/*18523*/ typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA{
/*18524*/ DWORD cbSize;
/*18525*/ DWORD dwRegPolicySettings;
/*18526*/ BOOL fCommercial;
/*18527*/ }AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
/*18528*/ *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
/*18541*/ typedef struct _HTTPSPolicyCallbackData
/*18542*/ {
/*18543*/ union{
/*18544*/ DWORD cbStruct;
/*18545*/ DWORD cbSize;
/*18546*/ }u;
/*18548*/ DWORD dwAuthType;
/*18552*/ DWORD fdwChecks;
/*18554*/ WCHAR*pwszServerName;
/*18556*/ }HTTPSPolicyCallbackData,*PHTTPSPolicyCallbackData,
/*18557*/ SSL_EXTRA_CERT_CHAIN_POLICY_PARA,*PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
/*18646*/ 
/*18647*/ BOOL
/*18648*/ typ
/*18649*/ CryptStringToBinaryA(
/*18650*/ typ typ typ typ typ typ typ LPCSTR pszString,
/*18651*/ typ typ typ typ typ DWORD cchString,
/*18652*/ typ typ typ typ typ DWORD dwFlags,
/*18653*/ typ typ typ typ typ typ typ typ typ BYTE*pbBinary,
/*18654*/ typ typ typ typ typ DWORD*pcbBinary,
/*18655*/ typ typ typ typ typ typ typ DWORD*pdwSkip,
/*18656*/ typ typ typ typ typ typ typ DWORD*pdwFlags
/*18657*/ );
/*18667*/ 
/*18668*/ BOOL
/*18669*/ typ
/*18670*/ CryptStringToBinaryW(
/*18671*/ typ typ typ typ typ typ typ LPCWSTR pszString,
/*18672*/ typ typ typ typ typ DWORD cchString,
/*18673*/ typ typ typ typ typ DWORD dwFlags,
/*18674*/ typ typ typ typ typ typ typ typ typ BYTE*pbBinary,
/*18675*/ typ typ typ typ typ DWORD*pcbBinary,
/*18676*/ typ typ typ typ typ typ typ DWORD*pdwSkip,
/*18677*/ typ typ typ typ typ typ typ DWORD*pdwFlags
/*18678*/ );
/*18691*/ 
/*18692*/ BOOL
/*18693*/ typ
/*18694*/ CryptBinaryToStringA(
/*18695*/ typ typ typ typ typ typ typ const BYTE*pbBinary,
/*18696*/ typ typ typ typ typ DWORD cbBinary,
/*18697*/ typ typ typ typ typ DWORD dwFlags,
/*18698*/ typ typ typ typ typ typ typ typ typ LPSTR pszString,
/*18699*/ typ typ typ typ typ DWORD*pcchString
/*18700*/ );
/*18707*/ 
/*18708*/ BOOL
/*18709*/ typ
/*18710*/ CryptBinaryToStringW(
/*18711*/ typ typ typ typ typ typ typ const BYTE*pbBinary,
/*18712*/ typ typ typ typ typ DWORD cbBinary,
/*18713*/ typ typ typ typ typ DWORD dwFlags,
/*18714*/ typ typ typ typ typ typ typ typ typ LPWSTR pszString,
/*18715*/ typ typ typ typ typ DWORD*pcchString
/*18716*/ );
/*18799*/ typedef struct _CRYPT_PKCS12_PBE_PARAMS
/*18800*/ {
/*18801*/ int iIterations;
/*18802*/ ULONG cbSalt;
/*18803*/ }
/*18804*/ CRYPT_PKCS12_PBE_PARAMS;
/*18829*/ 
/*18830*/ HCERTSTORE
/*18831*/ typ
/*18832*/ PFXImportCertStore(
/*18833*/ typ typ typ typ typ CRYPT_DATA_BLOB*pPFX,
/*18834*/ typ typ typ typ typ LPCWSTR szPassword,
/*18835*/ typ typ typ typ typ DWORD dwFlags);
/*18857*/ 
/*18858*/ BOOL
/*18859*/ typ
/*18860*/ PFXIsPFXBlob(
/*18861*/ typ typ typ typ typ CRYPT_DATA_BLOB*pPFX);
/*18875*/ 
/*18876*/ BOOL
/*18877*/ typ
/*18878*/ PFXVerifyPassword(
/*18879*/ typ typ typ typ typ CRYPT_DATA_BLOB*pPFX,
/*18880*/ typ typ typ typ typ LPCWSTR szPassword,
/*18881*/ typ typ typ typ typ DWORD dwFlags);
/*18909*/ 
/*18910*/ BOOL
/*18911*/ typ
/*18912*/ PFXExportCertStoreEx(
/*18913*/ typ typ typ typ typ HCERTSTORE hStore,
/*18914*/ typ typ typ typ typ CRYPT_DATA_BLOB*pPFX,
/*18915*/ typ typ typ typ typ LPCWSTR szPassword,
/*18916*/ typ typ void*pvReserved,
/*18917*/ typ typ typ typ typ DWORD dwFlags);
/*18936*/ 
/*18937*/ BOOL
/*18938*/ typ
/*18939*/ PFXExportCertStore(
/*18940*/ typ typ typ typ typ HCERTSTORE hStore,
/*18941*/ typ typ typ typ typ CRYPT_DATA_BLOB*pPFX,
/*18942*/ typ typ typ typ typ LPCWSTR szPassword,
/*18943*/ typ typ typ typ typ DWORD dwFlags);
/*18958*/ typedef void*HCERT_SERVER_OCSP_RESPONSE;
/*18984*/ 
/*18985*/ HCERT_SERVER_OCSP_RESPONSE
/*18986*/ typ
/*18987*/ CertOpenServerOcspResponse(
/*18988*/ typ typ typ typ typ PCCERT_CHAIN_CONTEXT pChainContext,
/*18989*/ typ typ typ typ typ DWORD dwFlags,
/*18990*/ typ typ LPVOID pvReserved
/*18991*/ );
/*18998*/ 
/*18999*/ void
/*19000*/ typ
/*19001*/ CertAddRefServerOcspResponse(
/*19002*/ typ typ typ typ typ typ typ HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
/*19003*/ );
/*19011*/ 
/*19012*/ void
/*19013*/ typ
/*19014*/ CertCloseServerOcspResponse(
/*19015*/ typ typ typ typ typ typ typ HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
/*19016*/ typ typ typ typ typ DWORD dwFlags
/*19017*/ );
/*19023*/ typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
/*19024*/ CERT_SERVER_OCSP_RESPONSE_CONTEXT,
/*19025*/ *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
/*19026*/ typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
/*19027*/ *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;
/*19029*/ struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT{
/*19030*/ DWORD cbSize;
/*19031*/ BYTE*pbEncodedOcspResponse;
/*19032*/ DWORD cbEncodedOcspResponse;
/*19033*/ };
/*19047*/ 
/*19048*/ PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
/*19049*/ typ
/*19050*/ CertGetServerOcspResponseContext(
/*19051*/ typ typ typ typ typ HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
/*19052*/ typ typ typ typ typ DWORD dwFlags,
/*19053*/ typ typ LPVOID pvReserved
/*19054*/ );
/*19061*/ 
/*19062*/ void
/*19063*/ typ
/*19064*/ CertAddRefServerOcspResponseContext(
/*19065*/ typ typ typ typ typ typ typ PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
/*19066*/ );
/*19072*/ 
/*19073*/ void
/*19074*/ typ
/*19075*/ CertFreeServerOcspResponseContext(
/*19076*/ typ typ typ typ typ typ typ PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
/*19077*/ );
/*19127*/ 
/*19128*/ typ
/*19129*/ BOOL
/*19130*/ typ
/*19131*/ CertRetrieveLogoOrBiometricInfo(
/*19132*/ typ typ typ typ typ PCCERT_CONTEXT pCertContext,
/*19133*/ typ typ typ typ typ LPCSTR lpszLogoOrBiometricType,
/*19134*/ typ typ typ typ typ DWORD dwRetrievalFlags,
/*19135*/ typ typ typ typ typ DWORD dwTimeout,
/*19136*/ typ typ typ typ typ DWORD dwFlags,
/*19137*/ typ typ void*pvReserved,
/*19138*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ BYTE**ppbData,
/*19139*/ typ typ typ typ typ DWORD*pcbData,
/*19140*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPWSTR*ppwszMimeType
/*19141*/ );
/*55*/ typedef struct _CERTIFICATE_BLOB{
/*57*/ DWORD dwCertEncodingType;
/*63*/ DWORD cbData;
/*68*/ PBYTE pbData;
/*70*/ }EFS_CERTIFICATE_BLOB,*PEFS_CERTIFICATE_BLOB;
/*76*/ typedef struct _EFS_HASH_BLOB{
/*81*/ DWORD cbData;
/*86*/ PBYTE pbData;
/*88*/ }EFS_HASH_BLOB,*PEFS_HASH_BLOB;
/*98*/ typedef struct _EFS_RPC_BLOB{
/*103*/ DWORD cbData;
/*108*/ PBYTE pbData;
/*110*/ }EFS_RPC_BLOB,*PEFS_RPC_BLOB;
/*117*/ typedef struct _EFS_PIN_BLOB{
/*122*/ DWORD cbPadding;
/*127*/ DWORD cbData;
/*132*/ PBYTE pbData;
/*134*/ }EFS_PIN_BLOB,*PEFS_PIN_BLOB;
/*142*/ typedef struct _EFS_KEY_INFO{
/*144*/ DWORD dwVersion;
/*145*/ ULONG Entropy;
/*146*/ ALG_ID Algorithm;
/*147*/ ULONG KeyLength;
/*149*/ }EFS_KEY_INFO,*PEFS_KEY_INFO;
/*156*/ typedef struct _EFS_DECRYPTION_STATUS_INFO{
/*158*/ DWORD dwDecryptionError;
/*159*/ DWORD dwHashOffset;
/*160*/ DWORD cbHash;
/*162*/ }EFS_DECRYPTION_STATUS_INFO,*PEFS_DECRYPTION_STATUS_INFO;
/*164*/ typedef struct _EFS_ENCRYPTION_STATUS_INFO{
/*166*/ BOOL bHasCurrentKey;
/*167*/ DWORD dwEncryptionError;
/*169*/ }EFS_ENCRYPTION_STATUS_INFO,*PEFS_ENCRYPTION_STATUS_INFO;
/*177*/ typedef struct _ENCRYPTION_CERTIFICATE{
/*178*/ DWORD cbTotalLength;
/*179*/ SID*pUserSid;
/*180*/ PEFS_CERTIFICATE_BLOB pCertBlob;
/*181*/ }ENCRYPTION_CERTIFICATE,*PENCRYPTION_CERTIFICATE;
/*186*/ typedef struct _ENCRYPTION_CERTIFICATE_HASH{
/*187*/ DWORD cbTotalLength;
/*188*/ SID*pUserSid;
/*189*/ PEFS_HASH_BLOB pHash;
/*194*/ LPWSTR lpDisplayInformation;
/*196*/ }ENCRYPTION_CERTIFICATE_HASH,*PENCRYPTION_CERTIFICATE_HASH;
/*198*/ typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST{
/*202*/ DWORD nCert_Hash;
/*206*/ PENCRYPTION_CERTIFICATE_HASH*pUsers;
/*207*/ }ENCRYPTION_CERTIFICATE_HASH_LIST,*PENCRYPTION_CERTIFICATE_HASH_LIST;
/*211*/ typedef struct _ENCRYPTION_CERTIFICATE_LIST{
/*215*/ DWORD nUsers;
/*219*/ PENCRYPTION_CERTIFICATE*pUsers;
/*220*/ }ENCRYPTION_CERTIFICATE_LIST,*PENCRYPTION_CERTIFICATE_LIST;
/*230*/ typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE{
/*232*/ DWORD dwEfsAccessType;
/*233*/ PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded;
/*234*/ PENCRYPTION_CERTIFICATE pEncryptionCertificate;
/*235*/ PEFS_RPC_BLOB pEfsStreamSignature;
/*237*/ }ENCRYPTED_FILE_METADATA_SIGNATURE,*PENCRYPTED_FILE_METADATA_SIGNATURE;
/*250*/ 
/*251*/ DWORD
/*252*/ typ
/*253*/ QueryUsersOnEncryptedFile(
/*254*/ typ typ typ typ typ LPCWSTR lpFileName,
/*255*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PENCRYPTION_CERTIFICATE_HASH_LIST*pUsers
/*256*/ );
/*259*/ 
/*260*/ DWORD
/*261*/ typ
/*262*/ QueryRecoveryAgentsOnEncryptedFile(
/*263*/ typ typ typ typ typ LPCWSTR lpFileName,
/*264*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PENCRYPTION_CERTIFICATE_HASH_LIST*pRecoveryAgents
/*265*/ );
/*268*/ 
/*269*/ DWORD
/*270*/ typ
/*271*/ RemoveUsersFromEncryptedFile(
/*272*/ typ typ typ typ typ LPCWSTR lpFileName,
/*273*/ typ typ typ typ typ PENCRYPTION_CERTIFICATE_HASH_LIST pHashes
/*274*/ );
/*276*/ 
/*277*/ DWORD
/*278*/ typ
/*279*/ AddUsersToEncryptedFile(
/*280*/ typ typ typ typ typ LPCWSTR lpFileName,
/*281*/ typ typ typ typ typ PENCRYPTION_CERTIFICATE_LIST pEncryptionCertificates
/*282*/ );
/*284*/ 
/*285*/ DWORD
/*286*/ typ
/*287*/ SetUserFileEncryptionKey(
/*288*/ typ typ typ typ typ PENCRYPTION_CERTIFICATE pEncryptionCertificate
/*289*/ );
/*294*/ 
/*295*/ DWORD
/*296*/ typ
/*297*/ SetUserFileEncryptionKeyEx(
/*298*/ typ typ typ typ typ PENCRYPTION_CERTIFICATE pEncryptionCertificate,
/*299*/ DWORD dwCapabilities,
/*300*/ DWORD dwFlags,
/*301*/ typ typ LPVOID pvReserved
/*302*/ );
/*306*/ 
/*307*/ void
/*308*/ typ
/*309*/ FreeEncryptionCertificateHashList(
/*310*/ typ typ typ typ typ PENCRYPTION_CERTIFICATE_HASH_LIST pUsers
/*311*/ );
/*313*/ 
/*314*/ BOOL
/*315*/ typ
/*316*/ EncryptionDisable(
/*317*/ typ typ typ typ typ LPCWSTR DirPath,
/*318*/ BOOL Disable
/*319*/ );
/*327*/ 
/*328*/ DWORD
/*329*/ typ
/*330*/ DuplicateEncryptionInfoFile(
/*331*/ typ typ typ typ typ LPCWSTR SrcFileName,
/*332*/ typ typ typ typ typ LPCWSTR DstFileName,
/*333*/ DWORD dwCreationDistribution,
/*334*/ DWORD dwAttributes,
/*335*/ typ typ typ typ typ typ typ const LPSECURITY_ATTRIBUTES lpSecurityAttributes
/*336*/ );
/*359*/ 
/*360*/ DWORD
/*361*/ typ
/*362*/ GetEncryptedFileMetadata(
/*363*/ typ typ typ typ typ LPCWSTR lpFileName,
/*364*/ typ typ typ typ typ PDWORD pcbMetadata,
/*365*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ PBYTE*ppbMetadata
/*366*/ );
/*368*/ 
/*369*/ DWORD
/*370*/ typ
/*371*/ SetEncryptedFileMetadata(
/*372*/ typ typ typ typ typ LPCWSTR lpFileName,
/*373*/ typ typ typ typ typ typ typ PBYTE pbOldMetadata,
/*374*/ typ typ typ typ typ PBYTE pbNewMetadata,
/*375*/ typ typ typ typ typ PENCRYPTION_CERTIFICATE_HASH pOwnerHash,
/*376*/ DWORD dwOperation,
/*377*/ typ typ typ typ typ typ typ PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded
/*378*/ );
/*380*/ 
/*381*/ void
/*382*/ typ
/*383*/ FreeEncryptedFileMetadata(
/*384*/ typ typ typ typ typ PBYTE pbMetadata
/*385*/ );
/*"rpcnsip.h"27*/ typedef struct
/*28*/ {
/*29*/ RPC_NS_HANDLE LookupContext;
/*30*/ RPC_BINDING_HANDLE ProposedHandle;
/*31*/ RPC_BINDING_VECTOR*Bindings;
/*33*/ }RPC_IMPORT_CONTEXT_P,*PRPC_IMPORT_CONTEXT_P;
/*38*/ 
/*39*/ RPC_STATUS
/*40*/ 
/*41*/ I_RpcNsGetBuffer(
/*42*/ typ PRPC_MESSAGE Message
/*43*/ );
/*45*/ 
/*46*/ RPC_STATUS
/*47*/ 
/*48*/ I_RpcNsSendReceive(
/*49*/ typ PRPC_MESSAGE Message,
/*50*/ typ RPC_BINDING_HANDLE*Handle
/*51*/ );
/*53*/ 
/*54*/ void
/*55*/ 
/*56*/ I_RpcNsRaiseException(
/*57*/ typ PRPC_MESSAGE Message,
/*58*/ typ RPC_STATUS Status
/*59*/ );
/*61*/ 
/*62*/ RPC_STATUS
/*63*/ 
/*64*/ I_RpcReBindBuffer(
/*65*/ typ PRPC_MESSAGE Message
/*66*/ );
/*68*/ 
/*69*/ RPC_STATUS
/*70*/ 
/*71*/ I_NsServerBindSearch(
/*72*/ void
/*73*/ );
/*75*/ 
/*76*/ RPC_STATUS
/*77*/ 
/*78*/ I_NsClientBindSearch(
/*79*/ void
/*80*/ );
/*82*/ 
/*83*/ void
/*84*/ 
/*85*/ I_NsClientBindDone(
/*86*/ void
/*87*/ );
/*"rpcndr.h"154*/ typedef unsigned char byte;
/*155*/ typedef byte cs_byte;
/*156*/ typedef unsigned char boolean;
/*199*/ typ typ
/*200*/ typ typ
/*201*/ void*MIDL_user_allocate(size_t size);
/*202*/ void MIDL_user_free(typ typ typ typ typ void*);
/*204*/ typ typ
/*205*/ typ typ
/*206*/ void*I_RpcDefaultAllocate(
/*207*/ handle_t bh,size_t size,void*(*RealAlloc)(size_t));
/*209*/ void I_RpcDefaultFree(
/*210*/ handle_t bh,void*,void(*RealFree)(void*));
/*235*/ typedef void*NDR_CCONTEXT;
/*237*/ typedef struct
/*238*/ {
/*239*/ void*pad[2];
/*240*/ void*userContext;
/*241*/ }*NDR_SCONTEXT;
/*247*/ typedef void(*NDR_RUNDOWN)(void*context);
/*249*/ typedef void(*NDR_NOTIFY_ROUTINE)(void);
/*250*/ typedef void(*NDR_NOTIFY2_ROUTINE)(boolean flag);
/*252*/ typedef struct _SCONTEXT_QUEUE{
/*253*/ unsigned long NumberOfObjects;
/*254*/ NDR_SCONTEXT*ArrayOfObjects;
/*255*/ }SCONTEXT_QUEUE,*PSCONTEXT_QUEUE;
/*257*/ 
/*258*/ RPC_BINDING_HANDLE
/*259*/ 
/*260*/ NDRCContextBinding(
/*261*/ typ NDR_CCONTEXT CContext
/*262*/ );
/*264*/ 
/*265*/ void
/*266*/ 
/*267*/ NDRCContextMarshall(
/*268*/ typ NDR_CCONTEXT CContext,
/*269*/ typ void*pBuff
/*270*/ );
/*272*/ 
/*273*/ void
/*274*/ 
/*275*/ NDRCContextUnmarshall(
/*276*/ typ typ typ typ typ NDR_CCONTEXT*pCContext,
/*277*/ typ typ typ typ typ RPC_BINDING_HANDLE hBinding,
/*278*/ typ typ typ typ typ void*pBuff,
/*279*/ typ typ typ typ typ unsigned long DataRepresentation
/*280*/ );
/*282*/ 
/*283*/ void
/*284*/ 
/*285*/ NDRCContextUnmarshall2(
/*286*/ typ typ typ typ typ NDR_CCONTEXT*pCContext,
/*287*/ typ typ typ typ typ RPC_BINDING_HANDLE hBinding,
/*288*/ typ typ typ typ typ void*pBuff,
/*289*/ typ typ typ typ typ unsigned long DataRepresentation
/*290*/ );
/*292*/ 
/*293*/ void
/*294*/ 
/*295*/ NDRSContextMarshall(
/*296*/ typ NDR_SCONTEXT CContext,
/*297*/ typ void*pBuff,
/*298*/ typ NDR_RUNDOWN userRunDownIn
/*299*/ );
/*301*/ 
/*302*/ NDR_SCONTEXT
/*303*/ 
/*304*/ NDRSContextUnmarshall(
/*305*/ typ void*pBuff,
/*306*/ typ unsigned long DataRepresentation
/*307*/ );
/*309*/ 
/*310*/ void
/*311*/ 
/*312*/ NDRSContextMarshallEx(
/*313*/ typ RPC_BINDING_HANDLE BindingHandle,
/*314*/ typ NDR_SCONTEXT CContext,
/*315*/ typ void*pBuff,
/*316*/ typ NDR_RUNDOWN userRunDownIn
/*317*/ );
/*319*/ 
/*320*/ void
/*321*/ 
/*322*/ NDRSContextMarshall2(
/*323*/ typ RPC_BINDING_HANDLE BindingHandle,
/*324*/ typ NDR_SCONTEXT CContext,
/*325*/ typ void*pBuff,
/*326*/ typ NDR_RUNDOWN userRunDownIn,
/*327*/ typ void*CtxGuard,
/*328*/ typ unsigned long Flags
/*329*/ );
/*331*/ 
/*332*/ NDR_SCONTEXT
/*333*/ 
/*334*/ NDRSContextUnmarshallEx(
/*335*/ typ RPC_BINDING_HANDLE BindingHandle,
/*336*/ typ void*pBuff,
/*337*/ typ unsigned long DataRepresentation
/*338*/ );
/*340*/ 
/*341*/ NDR_SCONTEXT
/*342*/ 
/*343*/ NDRSContextUnmarshall2(
/*344*/ typ RPC_BINDING_HANDLE BindingHandle,
/*345*/ typ void*pBuff,
/*346*/ typ unsigned long DataRepresentation,
/*347*/ typ void*CtxGuard,
/*348*/ typ unsigned long Flags
/*349*/ );
/*351*/ 
/*352*/ void
/*353*/ 
/*354*/ RpcSsDestroyClientContext(
/*355*/ typ void**ContextHandle
/*356*/ );
/*427*/ typedef unsigned long error_status_t;
/*510*/ struct _MIDL_STUB_MESSAGE;
/*511*/ struct _MIDL_STUB_DESC;
/*512*/ struct _FULL_PTR_XLAT_TABLES;
/*514*/ typedef unsigned char*RPC_BUFPTR;
/*515*/ typedef unsigned long RPC_LENGTH;
/*518*/ typedef void(*EXPR_EVAL)(struct _MIDL_STUB_MESSAGE*);
/*520*/ typedef const unsigned char*PFORMAT_STRING;
/*525*/ typedef struct
/*526*/ {
/*527*/ long Dimension;
/*530*/ unsigned long*BufferConformanceMark;
/*531*/ unsigned long*BufferVarianceMark;
/*534*/ unsigned long*MaxCountArray;
/*535*/ unsigned long*OffsetArray;
/*536*/ unsigned long*ActualCountArray;
/*537*/ }ARRAY_INFO,*PARRAY_INFO;
/*540*/ typedef struct _NDR_ASYNC_MESSAGE*PNDR_ASYNC_MESSAGE;
/*541*/ typedef struct _NDR_CORRELATION_INFO*PNDR_CORRELATION_INFO;
/*547*/ typedef const unsigned char*PFORMAT_STRING;
/*548*/ typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO,*PMIDL_SYNTAX_INFO;
/*550*/ struct NDR_ALLOC_ALL_NODES_CONTEXT;
/*551*/ struct NDR_POINTER_QUEUE_STATE;
/*552*/ struct _NDR_PROC_CONTEXT;
/*554*/ typedef struct _MIDL_STUB_MESSAGE
/*555*/ {
/*557*/ PRPC_MESSAGE RpcMsg;
/*560*/ unsigned char*Buffer;
/*566*/ unsigned char*BufferStart;
/*567*/ unsigned char*BufferEnd;
/*576*/ unsigned char*BufferMark;
/*579*/ unsigned long BufferLength;
/*582*/ unsigned long MemorySize;
/*585*/ unsigned char*Memory;
/*588*/ unsigned char IsClient;
/*589*/ unsigned char Pad;
/*590*/ unsigned short uFlags2;
/*593*/ int ReuseBuffer;
/*596*/ struct NDR_ALLOC_ALL_NODES_CONTEXT*pAllocAllNodesContext;
/*597*/ struct NDR_POINTER_QUEUE_STATE*pPointerQueueState;
/*604*/ int IgnoreEmbeddedPointers;
/*610*/ unsigned char*PointerBufferMark;
/*615*/ unsigned char CorrDespIncrement;
/*617*/ unsigned char uFlags;
/*618*/ unsigned short UniquePtrCount;
/*624*/ ULONG_PTR MaxCount;
/*630*/ unsigned long Offset;
/*636*/ unsigned long ActualCount;
/*639*/ void*(*pfnAllocate)(size_t);
/*640*/ void(*pfnFree)(void*);
/*648*/ unsigned char*StackTop;
/*654*/ unsigned char*pPresentedType;
/*655*/ unsigned char*pTransmitType;
/*665*/ handle_t SavedHandle;
/*670*/ const struct _MIDL_STUB_DESC*StubDesc;
/*675*/ struct _FULL_PTR_XLAT_TABLES*FullPtrXlatTables;
/*676*/ unsigned long FullPtrRefId;
/*678*/ unsigned long PointerLength;
/*680*/ int fInDontFree:1;
/*681*/ int fDontCallFreeInst:1;
/*682*/ int fInOnlyParam:1;
/*683*/ int fHasReturn:1;
/*684*/ int fHasExtensions:1;
/*685*/ int fHasNewCorrDesc:1;
/*686*/ int fIsIn:1;
/*687*/ int fIsOut:1;
/*688*/ int fIsOicf:1;
/*689*/ int fBufferValid:1;
/*690*/ int fHasMemoryValidateCallback:1;
/*691*/ int fInFree:1;
/*692*/ int fNeedMCCP:1;
/*693*/ int fUnused:3;
/*694*/ int fUnused2:16;
/*697*/ unsigned long dwDestContext;
/*698*/ void*pvDestContext;
/*700*/ NDR_SCONTEXT*SavedContextHandles;
/*702*/ long ParamNumber;
/*704*/ struct IRpcChannelBuffer*pRpcChannelBuffer;
/*706*/ PARRAY_INFO pArrayInfo;
/*707*/ unsigned long*SizePtrCountArray;
/*708*/ unsigned long*SizePtrOffsetArray;
/*709*/ unsigned long*SizePtrLengthArray;
/*714*/ void*pArgQueue;
/*716*/ unsigned long dwStubPhase;
/*718*/ void*LowStackMark;
/*723*/ PNDR_ASYNC_MESSAGE pAsyncMsg;
/*724*/ PNDR_CORRELATION_INFO pCorrInfo;
/*725*/ unsigned char*pCorrMemory;
/*727*/ void*pMemoryList;
/*740*/ INT_PTR pCSInfo;
/*742*/ unsigned char*ConformanceMark;
/*743*/ unsigned char*VarianceMark;
/*748*/ INT_PTR Unused;
/*751*/ struct _NDR_PROC_CONTEXT*pContext;
/*763*/ void*ContextHandleHash;
/*764*/ void*pUserMarshalList;
/*765*/ INT_PTR Reserved51_3;
/*766*/ INT_PTR Reserved51_4;
/*767*/ INT_PTR Reserved51_5;
/*774*/ }MIDL_STUB_MESSAGE,*PMIDL_STUB_MESSAGE;
/*777*/ typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE,*PMIDL_STUB_MESSAGE;
/*782*/ typedef void*
/*783*/ (*GENERIC_BINDING_ROUTINE)
/*784*/ (void*);
/*785*/ typedef void
/*786*/ (*GENERIC_UNBIND_ROUTINE)
/*787*/ (void*,unsigned char*);
/*789*/ typedef struct _GENERIC_BINDING_ROUTINE_PAIR
/*790*/ {
/*791*/ GENERIC_BINDING_ROUTINE pfnBind;
/*792*/ GENERIC_UNBIND_ROUTINE pfnUnbind;
/*793*/ }GENERIC_BINDING_ROUTINE_PAIR,*PGENERIC_BINDING_ROUTINE_PAIR;
/*795*/ typedef struct __GENERIC_BINDING_INFO
/*796*/ {
/*797*/ void*pObj;
/*798*/ unsigned int Size;
/*799*/ GENERIC_BINDING_ROUTINE pfnBind;
/*800*/ GENERIC_UNBIND_ROUTINE pfnUnbind;
/*801*/ }GENERIC_BINDING_INFO,*PGENERIC_BINDING_INFO;
/*814*/ typedef void(*XMIT_HELPER_ROUTINE)
/*815*/ (PMIDL_STUB_MESSAGE);
/*817*/ typedef struct _XMIT_ROUTINE_QUINTUPLE
/*818*/ {
/*819*/ XMIT_HELPER_ROUTINE pfnTranslateToXmit;
/*820*/ XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
/*821*/ XMIT_HELPER_ROUTINE pfnFreeXmit;
/*822*/ XMIT_HELPER_ROUTINE pfnFreeInst;
/*823*/ }XMIT_ROUTINE_QUINTUPLE,*PXMIT_ROUTINE_QUINTUPLE;
/*825*/ typedef unsigned long
/*826*/ (*USER_MARSHAL_SIZING_ROUTINE)
/*827*/ (unsigned long*,
/*828*/ unsigned long,
/*829*/ void*);
/*831*/ typedef unsigned char*
/*832*/ (*USER_MARSHAL_MARSHALLING_ROUTINE)
/*833*/ (unsigned long*,
/*834*/ unsigned char*,
/*835*/ void*);
/*837*/ typedef unsigned char*
/*838*/ (*USER_MARSHAL_UNMARSHALLING_ROUTINE)
/*839*/ (unsigned long*,
/*840*/ unsigned char*,
/*841*/ void*);
/*843*/ typedef void(*USER_MARSHAL_FREEING_ROUTINE)
/*844*/ (unsigned long*,
/*845*/ void*);
/*847*/ typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
/*848*/ {
/*849*/ USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
/*850*/ USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
/*851*/ USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
/*852*/ USER_MARSHAL_FREEING_ROUTINE pfnFree;
/*853*/ }USER_MARSHAL_ROUTINE_QUADRUPLE;
/*857*/ typedef enum _USER_MARSHAL_CB_TYPE
/*858*/ {
/*859*/ USER_MARSHAL_CB_BUFFER_SIZE,
/*860*/ USER_MARSHAL_CB_MARSHALL,
/*861*/ USER_MARSHAL_CB_UNMARSHALL,
/*862*/ USER_MARSHAL_CB_FREE
/*863*/ }USER_MARSHAL_CB_TYPE;
/*865*/ typedef struct _USER_MARSHAL_CB
/*866*/ {
/*867*/ unsigned long Flags;
/*868*/ PMIDL_STUB_MESSAGE pStubMsg;
/*869*/ PFORMAT_STRING pReserve;
/*870*/ unsigned long Signature;
/*871*/ USER_MARSHAL_CB_TYPE CBType;
/*872*/ PFORMAT_STRING pFormat;
/*873*/ PFORMAT_STRING pTypeFormat;
/*874*/ }USER_MARSHAL_CB;
/*884*/ typedef struct _MALLOC_FREE_STRUCT
/*885*/ {
/*886*/ void*(*pfnAllocate)(size_t);
/*887*/ void(*pfnFree)(void*);
/*888*/ }MALLOC_FREE_STRUCT;
/*890*/ typedef struct _COMM_FAULT_OFFSETS
/*891*/ {
/*892*/ short CommOffset;
/*893*/ short FaultOffset;
/*894*/ }COMM_FAULT_OFFSETS;
/*900*/ typedef enum _IDL_CS_CONVERT
/*901*/ {
/*902*/ IDL_CS_NO_CONVERT,
/*903*/ IDL_CS_IN_PLACE_CONVERT,
/*904*/ IDL_CS_NEW_BUFFER_CONVERT
/*905*/ }IDL_CS_CONVERT;
/*907*/ typedef void
/*908*/ (*CS_TYPE_NET_SIZE_ROUTINE)
/*909*/ (RPC_BINDING_HANDLE hBinding,
/*910*/ unsigned long ulNetworkCodeSet,
/*911*/ unsigned long ulLocalBufferSize,
/*912*/ IDL_CS_CONVERT*conversionType,
/*913*/ unsigned long*pulNetworkBufferSize,
/*914*/ error_status_t*pStatus);
/*916*/ typedef void
/*917*/ (*CS_TYPE_LOCAL_SIZE_ROUTINE)
/*918*/ (RPC_BINDING_HANDLE hBinding,
/*919*/ unsigned long ulNetworkCodeSet,
/*920*/ unsigned long ulNetworkBufferSize,
/*921*/ IDL_CS_CONVERT*conversionType,
/*922*/ unsigned long*pulLocalBufferSize,
/*923*/ error_status_t*pStatus);
/*925*/ typedef void
/*926*/ (*CS_TYPE_TO_NETCS_ROUTINE)
/*927*/ (RPC_BINDING_HANDLE hBinding,
/*928*/ unsigned long ulNetworkCodeSet,
/*929*/ void*pLocalData,
/*930*/ unsigned long ulLocalDataLength,
/*931*/ byte*pNetworkData,
/*932*/ unsigned long*pulNetworkDataLength,
/*933*/ error_status_t*pStatus);
/*935*/ typedef void
/*936*/ (*CS_TYPE_FROM_NETCS_ROUTINE)
/*937*/ (RPC_BINDING_HANDLE hBinding,
/*938*/ unsigned long ulNetworkCodeSet,
/*939*/ byte*pNetworkData,
/*940*/ unsigned long ulNetworkDataLength,
/*941*/ unsigned long ulLocalBufferSize,
/*942*/ void*pLocalData,
/*943*/ unsigned long*pulLocalDataLength,
/*944*/ error_status_t*pStatus);
/*946*/ typedef void
/*947*/ (*CS_TAG_GETTING_ROUTINE)
/*948*/ (RPC_BINDING_HANDLE hBinding,
/*949*/ int fServerSide,
/*950*/ unsigned long*pulSendingTag,
/*951*/ unsigned long*pulDesiredReceivingTag,
/*952*/ unsigned long*pulReceivingTag,
/*953*/ error_status_t*pStatus);
/*955*/ void
/*956*/ RpcCsGetTags(
/*957*/ RPC_BINDING_HANDLE hBinding,
/*958*/ int fServerSide,
/*959*/ unsigned long*pulSendingTag,
/*960*/ unsigned long*pulDesiredReceivingTag,
/*961*/ unsigned long*pulReceivingTag,
/*962*/ error_status_t*pStatus);
/*964*/ typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
/*965*/ {
/*966*/ CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
/*967*/ CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
/*968*/ CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
/*969*/ CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
/*970*/ }NDR_CS_SIZE_CONVERT_ROUTINES;
/*972*/ typedef struct _NDR_CS_ROUTINES
/*973*/ {
/*974*/ NDR_CS_SIZE_CONVERT_ROUTINES*pSizeConvertRoutines;
/*975*/ CS_TAG_GETTING_ROUTINE*pTagGettingRoutines;
/*976*/ }NDR_CS_ROUTINES;
/*978*/ typedef struct _NDR_EXPR_DESC
/*979*/ {
/*980*/ const unsigned short*pOffset;
/*981*/ PFORMAT_STRING pFormatExpr;
/*982*/ }NDR_EXPR_DESC;
/*987*/ typedef struct _MIDL_STUB_DESC
/*988*/ {
/*989*/ void*RpcInterfaceInformation;
/*991*/ void*(*pfnAllocate)(size_t);
/*992*/ void(*pfnFree)(void*);
/*994*/ union
/*995*/ {
/*996*/ handle_t*pAutoHandle;
/*997*/ handle_t*pPrimitiveHandle;
/*998*/ PGENERIC_BINDING_INFO pGenericBindingInfo;
/*999*/ }IMPLICIT_HANDLE_INFO;
/*1001*/ const NDR_RUNDOWN*apfnNdrRundownRoutines;
/*1002*/ const GENERIC_BINDING_ROUTINE_PAIR*aGenericBindingRoutinePairs;
/*1003*/ const EXPR_EVAL*apfnExprEval;
/*1004*/ const XMIT_ROUTINE_QUINTUPLE*aXmitQuintuple;
/*1006*/ const unsigned char*pFormatTypes;
/*1008*/ int fCheckBounds;
/*1011*/ unsigned long Version;
/*1013*/ MALLOC_FREE_STRUCT*pMallocFreeStruct;
/*1015*/ long MIDLVersion;
/*1017*/ const COMM_FAULT_OFFSETS*CommFaultOffsets;
/*1020*/ const USER_MARSHAL_ROUTINE_QUADRUPLE*aUserMarshalQuadruple;
/*1023*/ const NDR_NOTIFY_ROUTINE*NotifyRoutineTable;
/*1029*/ ULONG_PTR mFlags;
/*1032*/ const NDR_CS_ROUTINES*CsRoutineTables;
/*1034*/ void*ProxyServerInfo;
/*1035*/ const NDR_EXPR_DESC*pExprInfo;
/*1039*/ }MIDL_STUB_DESC;
/*1042*/ typedef const MIDL_STUB_DESC*PMIDL_STUB_DESC;
/*1044*/ typedef void*PMIDL_XMIT_TYPE;
/*1073*/ typedef void(*STUB_THUNK)(PMIDL_STUB_MESSAGE);
/*1076*/ typedef long(*SERVER_ROUTINE)();
/*1084*/ typedef struct _MIDL_SERVER_INFO_
/*1085*/ {
/*1086*/ PMIDL_STUB_DESC pStubDesc;
/*1087*/ const SERVER_ROUTINE*DispatchTable;
/*1088*/ PFORMAT_STRING ProcString;
/*1089*/ const unsigned short*FmtStringOffset;
/*1090*/ const STUB_THUNK*ThunkTable;
/*1091*/ PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
/*1092*/ ULONG_PTR nCount;
/*1093*/ PMIDL_SYNTAX_INFO pSyntaxInfo;
/*1094*/ }MIDL_SERVER_INFO,*PMIDL_SERVER_INFO;
/*1101*/ typedef struct _MIDL_STUBLESS_PROXY_INFO
/*1102*/ {
/*1103*/ PMIDL_STUB_DESC pStubDesc;
/*1104*/ PFORMAT_STRING ProcFormatString;
/*1105*/ const unsigned short*FormatStringOffset;
/*1106*/ PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
/*1107*/ ULONG_PTR nCount;
/*1108*/ PMIDL_SYNTAX_INFO pSyntaxInfo;
/*1109*/ }MIDL_STUBLESS_PROXY_INFO;
/*1111*/ typedef MIDL_STUBLESS_PROXY_INFO*PMIDL_STUBLESS_PROXY_INFO;
/*1116*/ typedef struct _MIDL_SYNTAX_INFO
/*1117*/ {
/*1118*/ RPC_SYNTAX_IDENTIFIER TransferSyntax;
/*1119*/ RPC_DISPATCH_TABLE*DispatchTable;
/*1120*/ PFORMAT_STRING ProcString;
/*1121*/ const unsigned short*FmtStringOffset;
/*1122*/ PFORMAT_STRING TypeString;
/*1123*/ const void*aUserMarshalQuadruple;
/*1124*/ ULONG_PTR pReserved1;
/*1125*/ ULONG_PTR pReserved2;
/*1126*/ }MIDL_SYNTAX_INFO,*PMIDL_SYNTAX_INFO;
/*1128*/ typedef unsigned short*PARAM_OFFSETTABLE,*PPARAM_OFFSETTABLE;
/*1133*/ typedef union _CLIENT_CALL_RETURN
/*1134*/ {
/*1135*/ void*Pointer;
/*1136*/ LONG_PTR Simple;
/*1137*/ }CLIENT_CALL_RETURN;
/*1140*/ typedef enum
/*1141*/ {
/*1142*/ XLAT_SERVER=1,
/*1143*/ XLAT_CLIENT
/*1144*/ }XLAT_SIDE;
/*1146*/ typedef struct _FULL_PTR_XLAT_TABLES
/*1147*/ {
/*1148*/ void*RefIdToPointer;
/*1149*/ void*PointerToRefId;
/*1150*/ unsigned long NextRefId;
/*1151*/ XLAT_SIDE XlatSide;
/*1152*/ }FULL_PTR_XLAT_TABLES,*PFULL_PTR_XLAT_TABLES;
/*1158*/ RPC_STATUS
/*1159*/ NdrClientGetSupportedSyntaxes(
/*1160*/ typ RPC_CLIENT_INTERFACE*pInf,
/*1161*/ typ unsigned long*pCount,
/*1162*/ typ MIDL_SYNTAX_INFO**pArr);
/*1165*/ RPC_STATUS
/*1166*/ NdrServerGetSupportedSyntaxes(
/*1167*/ typ RPC_SERVER_INTERFACE*pInf,
/*1168*/ typ unsigned long*pCount,
/*1169*/ typ MIDL_SYNTAX_INFO**pArr,
/*1170*/ typ unsigned long*pPreferSyntaxIndex);
/*1176*/ 
/*1177*/ void
/*1178*/ 
/*1179*/ NdrSimpleTypeMarshall(
/*1180*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1181*/ unsigned char*pMemory,
/*1182*/ unsigned char FormatChar
/*1183*/ );
/*1185*/ 
/*1186*/ unsigned char*
/*1187*/ 
/*1188*/ NdrPointerMarshall(
/*1189*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1190*/ unsigned char*pMemory,
/*1191*/ PFORMAT_STRING pFormat
/*1192*/ );
/*1194*/ 
/*1195*/ unsigned char*
/*1196*/ 
/*1197*/ NdrCsArrayMarshall(
/*1198*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1199*/ unsigned char*pMemory,
/*1200*/ PFORMAT_STRING pFormat
/*1201*/ );
/*1203*/ 
/*1204*/ unsigned char*
/*1205*/ 
/*1206*/ NdrCsTagMarshall(
/*1207*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1208*/ unsigned char*pMemory,
/*1209*/ PFORMAT_STRING pFormat
/*1210*/ );
/*1214*/ 
/*1215*/ unsigned char*
/*1216*/ 
/*1217*/ NdrSimpleStructMarshall(
/*1218*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1219*/ unsigned char*pMemory,
/*1220*/ PFORMAT_STRING pFormat
/*1221*/ );
/*1223*/ 
/*1224*/ unsigned char*
/*1225*/ 
/*1226*/ NdrConformantStructMarshall(
/*1227*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1228*/ unsigned char*pMemory,
/*1229*/ PFORMAT_STRING pFormat
/*1230*/ );
/*1232*/ 
/*1233*/ unsigned char*
/*1234*/ 
/*1235*/ NdrConformantVaryingStructMarshall(
/*1236*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1237*/ unsigned char*pMemory,
/*1238*/ PFORMAT_STRING pFormat
/*1239*/ );
/*1241*/ 
/*1242*/ unsigned char*
/*1243*/ 
/*1244*/ NdrComplexStructMarshall(
/*1245*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1246*/ unsigned char*pMemory,
/*1247*/ PFORMAT_STRING pFormat
/*1248*/ );
/*1252*/ 
/*1253*/ unsigned char*
/*1254*/ 
/*1255*/ NdrFixedArrayMarshall(
/*1256*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1257*/ unsigned char*pMemory,
/*1258*/ PFORMAT_STRING pFormat
/*1259*/ );
/*1261*/ 
/*1262*/ unsigned char*
/*1263*/ 
/*1264*/ NdrConformantArrayMarshall(
/*1265*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1266*/ unsigned char*pMemory,
/*1267*/ PFORMAT_STRING pFormat
/*1268*/ );
/*1270*/ 
/*1271*/ unsigned char*
/*1272*/ 
/*1273*/ NdrConformantVaryingArrayMarshall(
/*1274*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1275*/ unsigned char*pMemory,
/*1276*/ PFORMAT_STRING pFormat
/*1277*/ );
/*1279*/ 
/*1280*/ unsigned char*
/*1281*/ 
/*1282*/ NdrVaryingArrayMarshall(
/*1283*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1284*/ unsigned char*pMemory,
/*1285*/ PFORMAT_STRING pFormat
/*1286*/ );
/*1288*/ 
/*1289*/ unsigned char*
/*1290*/ 
/*1291*/ NdrComplexArrayMarshall(
/*1292*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1293*/ unsigned char*pMemory,
/*1294*/ PFORMAT_STRING pFormat
/*1295*/ );
/*1299*/ 
/*1300*/ unsigned char*
/*1301*/ 
/*1302*/ NdrNonConformantStringMarshall(
/*1303*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1304*/ unsigned char*pMemory,
/*1305*/ PFORMAT_STRING pFormat
/*1306*/ );
/*1308*/ 
/*1309*/ unsigned char*
/*1310*/ 
/*1311*/ NdrConformantStringMarshall(
/*1312*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1313*/ unsigned char*pMemory,
/*1314*/ PFORMAT_STRING pFormat
/*1315*/ );
/*1319*/ 
/*1320*/ unsigned char*
/*1321*/ 
/*1322*/ NdrEncapsulatedUnionMarshall(
/*1323*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1324*/ unsigned char*pMemory,
/*1325*/ PFORMAT_STRING pFormat
/*1326*/ );
/*1328*/ 
/*1329*/ unsigned char*
/*1330*/ 
/*1331*/ NdrNonEncapsulatedUnionMarshall(
/*1332*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1333*/ unsigned char*pMemory,
/*1334*/ PFORMAT_STRING pFormat
/*1335*/ );
/*1339*/ 
/*1340*/ unsigned char*
/*1341*/ 
/*1342*/ NdrByteCountPointerMarshall(
/*1343*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1344*/ unsigned char*pMemory,
/*1345*/ PFORMAT_STRING pFormat
/*1346*/ );
/*1350*/ 
/*1351*/ unsigned char*
/*1352*/ 
/*1353*/ NdrXmitOrRepAsMarshall(
/*1354*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1355*/ unsigned char*pMemory,
/*1356*/ PFORMAT_STRING pFormat
/*1357*/ );
/*1361*/ 
/*1362*/ unsigned char*
/*1363*/ 
/*1364*/ NdrUserMarshalMarshall(
/*1365*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1366*/ unsigned char*pMemory,
/*1367*/ PFORMAT_STRING pFormat
/*1368*/ );
/*1372*/ 
/*1373*/ unsigned char*
/*1374*/ 
/*1375*/ NdrInterfacePointerMarshall(
/*1376*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1377*/ unsigned char*pMemory,
/*1378*/ PFORMAT_STRING pFormat
/*1379*/ );
/*1383*/ 
/*1384*/ void
/*1385*/ 
/*1386*/ NdrClientContextMarshall(
/*1387*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1388*/ NDR_CCONTEXT ContextHandle,
/*1389*/ int fCheck
/*1390*/ );
/*1392*/ 
/*1393*/ void
/*1394*/ 
/*1395*/ NdrServerContextMarshall(
/*1396*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1397*/ NDR_SCONTEXT ContextHandle,
/*1398*/ NDR_RUNDOWN RundownRoutine
/*1399*/ );
/*1401*/ 
/*1402*/ void
/*1403*/ 
/*1404*/ NdrServerContextNewMarshall(
/*1405*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1406*/ NDR_SCONTEXT ContextHandle,
/*1407*/ NDR_RUNDOWN RundownRoutine,
/*1408*/ PFORMAT_STRING pFormat
/*1409*/ );
/*1415*/ 
/*1416*/ void
/*1417*/ 
/*1418*/ NdrSimpleTypeUnmarshall(
/*1419*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1420*/ unsigned char*pMemory,
/*1421*/ unsigned char FormatChar
/*1422*/ );
/*1424*/ 
/*1425*/ unsigned char*
/*1426*/ 
/*1427*/ NdrCsArrayUnmarshall(
/*1428*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1429*/ unsigned char**ppMemory,
/*1430*/ PFORMAT_STRING pFormat,
/*1431*/ unsigned char fMustAlloc
/*1432*/ );
/*1434*/ 
/*1435*/ unsigned char*
/*1436*/ 
/*1437*/ NdrCsTagUnmarshall(
/*1438*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1439*/ unsigned char**ppMemory,
/*1440*/ PFORMAT_STRING pFormat,
/*1441*/ unsigned char fMustAlloc
/*1442*/ );
/*1444*/ 
/*1445*/ unsigned char*
/*1446*/ NdrRangeUnmarshall(
/*1447*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1448*/ unsigned char**ppMemory,
/*1449*/ PFORMAT_STRING pFormat,
/*1450*/ unsigned char fMustAlloc
/*1451*/ );
/*1453*/ 
/*1454*/ void
/*1455*/ 
/*1456*/ NdrCorrelationInitialize(
/*1457*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1458*/ void*pMemory,
/*1459*/ unsigned long CacheSize,
/*1460*/ unsigned long flags
/*1461*/ );
/*1463*/ 
/*1464*/ void
/*1465*/ 
/*1466*/ NdrCorrelationPass(
/*1467*/ PMIDL_STUB_MESSAGE pStubMsg
/*1468*/ );
/*1470*/ 
/*1471*/ void
/*1472*/ 
/*1473*/ NdrCorrelationFree(
/*1474*/ PMIDL_STUB_MESSAGE pStubMsg
/*1475*/ );
/*1477*/ 
/*1478*/ unsigned char*
/*1479*/ 
/*1480*/ NdrPointerUnmarshall(
/*1481*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1482*/ unsigned char**ppMemory,
/*1483*/ PFORMAT_STRING pFormat,
/*1484*/ unsigned char fMustAlloc
/*1485*/ );
/*1489*/ 
/*1490*/ unsigned char*
/*1491*/ 
/*1492*/ NdrSimpleStructUnmarshall(
/*1493*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1494*/ unsigned char**ppMemory,
/*1495*/ PFORMAT_STRING pFormat,
/*1496*/ unsigned char fMustAlloc
/*1497*/ );
/*1499*/ 
/*1500*/ unsigned char*
/*1501*/ 
/*1502*/ NdrConformantStructUnmarshall(
/*1503*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1504*/ unsigned char**ppMemory,
/*1505*/ PFORMAT_STRING pFormat,
/*1506*/ unsigned char fMustAlloc
/*1507*/ );
/*1509*/ 
/*1510*/ unsigned char*
/*1511*/ 
/*1512*/ NdrConformantVaryingStructUnmarshall(
/*1513*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1514*/ unsigned char**ppMemory,
/*1515*/ PFORMAT_STRING pFormat,
/*1516*/ unsigned char fMustAlloc
/*1517*/ );
/*1519*/ 
/*1520*/ unsigned char*
/*1521*/ 
/*1522*/ NdrComplexStructUnmarshall(
/*1523*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1524*/ unsigned char**ppMemory,
/*1525*/ PFORMAT_STRING pFormat,
/*1526*/ unsigned char fMustAlloc
/*1527*/ );
/*1531*/ 
/*1532*/ unsigned char*
/*1533*/ 
/*1534*/ NdrFixedArrayUnmarshall(
/*1535*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1536*/ unsigned char**ppMemory,
/*1537*/ PFORMAT_STRING pFormat,
/*1538*/ unsigned char fMustAlloc
/*1539*/ );
/*1541*/ 
/*1542*/ unsigned char*
/*1543*/ 
/*1544*/ NdrConformantArrayUnmarshall(
/*1545*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1546*/ unsigned char**ppMemory,
/*1547*/ PFORMAT_STRING pFormat,
/*1548*/ unsigned char fMustAlloc
/*1549*/ );
/*1551*/ 
/*1552*/ unsigned char*
/*1553*/ 
/*1554*/ NdrConformantVaryingArrayUnmarshall(
/*1555*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1556*/ unsigned char**ppMemory,
/*1557*/ PFORMAT_STRING pFormat,
/*1558*/ unsigned char fMustAlloc
/*1559*/ );
/*1561*/ 
/*1562*/ unsigned char*
/*1563*/ 
/*1564*/ NdrVaryingArrayUnmarshall(
/*1565*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1566*/ unsigned char**ppMemory,
/*1567*/ PFORMAT_STRING pFormat,
/*1568*/ unsigned char fMustAlloc
/*1569*/ );
/*1571*/ 
/*1572*/ unsigned char*
/*1573*/ 
/*1574*/ NdrComplexArrayUnmarshall(
/*1575*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1576*/ unsigned char**ppMemory,
/*1577*/ PFORMAT_STRING pFormat,
/*1578*/ unsigned char fMustAlloc
/*1579*/ );
/*1583*/ 
/*1584*/ unsigned char*
/*1585*/ 
/*1586*/ NdrNonConformantStringUnmarshall(
/*1587*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1588*/ unsigned char**ppMemory,
/*1589*/ PFORMAT_STRING pFormat,
/*1590*/ unsigned char fMustAlloc
/*1591*/ );
/*1593*/ 
/*1594*/ unsigned char*
/*1595*/ 
/*1596*/ NdrConformantStringUnmarshall(
/*1597*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1598*/ unsigned char**ppMemory,
/*1599*/ PFORMAT_STRING pFormat,
/*1600*/ unsigned char fMustAlloc
/*1601*/ );
/*1605*/ 
/*1606*/ unsigned char*
/*1607*/ 
/*1608*/ NdrEncapsulatedUnionUnmarshall(
/*1609*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1610*/ unsigned char**ppMemory,
/*1611*/ PFORMAT_STRING pFormat,
/*1612*/ unsigned char fMustAlloc
/*1613*/ );
/*1615*/ 
/*1616*/ unsigned char*
/*1617*/ 
/*1618*/ NdrNonEncapsulatedUnionUnmarshall(
/*1619*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1620*/ unsigned char**ppMemory,
/*1621*/ PFORMAT_STRING pFormat,
/*1622*/ unsigned char fMustAlloc
/*1623*/ );
/*1627*/ 
/*1628*/ unsigned char*
/*1629*/ 
/*1630*/ NdrByteCountPointerUnmarshall(
/*1631*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1632*/ unsigned char**ppMemory,
/*1633*/ PFORMAT_STRING pFormat,
/*1634*/ unsigned char fMustAlloc
/*1635*/ );
/*1639*/ 
/*1640*/ unsigned char*
/*1641*/ 
/*1642*/ NdrXmitOrRepAsUnmarshall(
/*1643*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1644*/ unsigned char**ppMemory,
/*1645*/ PFORMAT_STRING pFormat,
/*1646*/ unsigned char fMustAlloc
/*1647*/ );
/*1651*/ 
/*1652*/ unsigned char*
/*1653*/ 
/*1654*/ NdrUserMarshalUnmarshall(
/*1655*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1656*/ unsigned char**ppMemory,
/*1657*/ PFORMAT_STRING pFormat,
/*1658*/ unsigned char fMustAlloc
/*1659*/ );
/*1663*/ 
/*1664*/ unsigned char*
/*1665*/ 
/*1666*/ NdrInterfacePointerUnmarshall(
/*1667*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1668*/ unsigned char**ppMemory,
/*1669*/ PFORMAT_STRING pFormat,
/*1670*/ unsigned char fMustAlloc
/*1671*/ );
/*1675*/ 
/*1676*/ void
/*1677*/ 
/*1678*/ NdrClientContextUnmarshall(
/*1679*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1680*/ NDR_CCONTEXT*pContextHandle,
/*1681*/ RPC_BINDING_HANDLE BindHandle
/*1682*/ );
/*1684*/ 
/*1685*/ NDR_SCONTEXT
/*1686*/ 
/*1687*/ NdrServerContextUnmarshall(
/*1688*/ PMIDL_STUB_MESSAGE pStubMsg
/*1689*/ );
/*1693*/ 
/*1694*/ NDR_SCONTEXT
/*1695*/ 
/*1696*/ NdrContextHandleInitialize(
/*1697*/ typ PMIDL_STUB_MESSAGE pStubMsg,
/*1698*/ typ PFORMAT_STRING pFormat
/*1699*/ );
/*1701*/ 
/*1702*/ NDR_SCONTEXT
/*1703*/ 
/*1704*/ NdrServerContextNewUnmarshall(
/*1705*/ typ PMIDL_STUB_MESSAGE pStubMsg,
/*1706*/ typ PFORMAT_STRING pFormat
/*1707*/ );
/*1713*/ 
/*1714*/ void
/*1715*/ 
/*1716*/ NdrPointerBufferSize(
/*1717*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1718*/ unsigned char*pMemory,
/*1719*/ PFORMAT_STRING pFormat
/*1720*/ );
/*1722*/ 
/*1723*/ void
/*1724*/ 
/*1725*/ NdrCsArrayBufferSize(
/*1726*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1727*/ unsigned char*pMemory,
/*1728*/ PFORMAT_STRING pFormat
/*1729*/ );
/*1731*/ 
/*1732*/ void
/*1733*/ 
/*1734*/ NdrCsTagBufferSize(
/*1735*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1736*/ unsigned char*pMemory,
/*1737*/ PFORMAT_STRING pFormat
/*1738*/ );
/*1742*/ 
/*1743*/ void
/*1744*/ 
/*1745*/ NdrSimpleStructBufferSize(
/*1746*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1747*/ unsigned char*pMemory,
/*1748*/ PFORMAT_STRING pFormat
/*1749*/ );
/*1751*/ 
/*1752*/ void
/*1753*/ 
/*1754*/ NdrConformantStructBufferSize(
/*1755*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1756*/ unsigned char*pMemory,
/*1757*/ PFORMAT_STRING pFormat
/*1758*/ );
/*1760*/ 
/*1761*/ void
/*1762*/ 
/*1763*/ NdrConformantVaryingStructBufferSize(
/*1764*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1765*/ unsigned char*pMemory,
/*1766*/ PFORMAT_STRING pFormat
/*1767*/ );
/*1769*/ 
/*1770*/ void
/*1771*/ 
/*1772*/ NdrComplexStructBufferSize(
/*1773*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1774*/ unsigned char*pMemory,
/*1775*/ PFORMAT_STRING pFormat
/*1776*/ );
/*1780*/ 
/*1781*/ void
/*1782*/ 
/*1783*/ NdrFixedArrayBufferSize(
/*1784*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1785*/ unsigned char*pMemory,
/*1786*/ PFORMAT_STRING pFormat
/*1787*/ );
/*1789*/ 
/*1790*/ void
/*1791*/ 
/*1792*/ NdrConformantArrayBufferSize(
/*1793*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1794*/ unsigned char*pMemory,
/*1795*/ PFORMAT_STRING pFormat
/*1796*/ );
/*1798*/ 
/*1799*/ void
/*1800*/ 
/*1801*/ NdrConformantVaryingArrayBufferSize(
/*1802*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1803*/ unsigned char*pMemory,
/*1804*/ PFORMAT_STRING pFormat
/*1805*/ );
/*1807*/ 
/*1808*/ void
/*1809*/ 
/*1810*/ NdrVaryingArrayBufferSize(
/*1811*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1812*/ unsigned char*pMemory,
/*1813*/ PFORMAT_STRING pFormat
/*1814*/ );
/*1816*/ 
/*1817*/ void
/*1818*/ 
/*1819*/ NdrComplexArrayBufferSize(
/*1820*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1821*/ unsigned char*pMemory,
/*1822*/ PFORMAT_STRING pFormat
/*1823*/ );
/*1827*/ 
/*1828*/ void
/*1829*/ 
/*1830*/ NdrConformantStringBufferSize(
/*1831*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1832*/ unsigned char*pMemory,
/*1833*/ PFORMAT_STRING pFormat
/*1834*/ );
/*1836*/ 
/*1837*/ void
/*1838*/ 
/*1839*/ NdrNonConformantStringBufferSize(
/*1840*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1841*/ unsigned char*pMemory,
/*1842*/ PFORMAT_STRING pFormat
/*1843*/ );
/*1847*/ 
/*1848*/ void
/*1849*/ 
/*1850*/ NdrEncapsulatedUnionBufferSize(
/*1851*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1852*/ unsigned char*pMemory,
/*1853*/ PFORMAT_STRING pFormat
/*1854*/ );
/*1856*/ 
/*1857*/ void
/*1858*/ 
/*1859*/ NdrNonEncapsulatedUnionBufferSize(
/*1860*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1861*/ unsigned char*pMemory,
/*1862*/ PFORMAT_STRING pFormat
/*1863*/ );
/*1867*/ 
/*1868*/ void
/*1869*/ 
/*1870*/ NdrByteCountPointerBufferSize(
/*1871*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1872*/ unsigned char*pMemory,
/*1873*/ PFORMAT_STRING pFormat
/*1874*/ );
/*1878*/ 
/*1879*/ void
/*1880*/ 
/*1881*/ NdrXmitOrRepAsBufferSize(
/*1882*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1883*/ unsigned char*pMemory,
/*1884*/ PFORMAT_STRING pFormat
/*1885*/ );
/*1889*/ 
/*1890*/ void
/*1891*/ 
/*1892*/ NdrUserMarshalBufferSize(
/*1893*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1894*/ unsigned char*pMemory,
/*1895*/ PFORMAT_STRING pFormat
/*1896*/ );
/*1900*/ 
/*1901*/ void
/*1902*/ 
/*1903*/ NdrInterfacePointerBufferSize(
/*1904*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1905*/ unsigned char*pMemory,
/*1906*/ PFORMAT_STRING pFormat
/*1907*/ );
/*1911*/ 
/*1912*/ void
/*1913*/ 
/*1914*/ NdrContextHandleSize(
/*1915*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1916*/ unsigned char*pMemory,
/*1917*/ PFORMAT_STRING pFormat
/*1918*/ );
/*1924*/ 
/*1925*/ unsigned long
/*1926*/ 
/*1927*/ NdrPointerMemorySize(
/*1928*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1929*/ PFORMAT_STRING pFormat
/*1930*/ );
/*1932*/ 
/*1933*/ unsigned long
/*1934*/ 
/*1935*/ NdrContextHandleMemorySize(
/*1936*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1937*/ PFORMAT_STRING pFormat
/*1938*/ );
/*1943*/ 
/*1944*/ unsigned long
/*1945*/ 
/*1946*/ NdrCsArrayMemorySize(
/*1947*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1948*/ PFORMAT_STRING pFormat
/*1949*/ );
/*1951*/ 
/*1952*/ unsigned long
/*1953*/ 
/*1954*/ NdrCsTagMemorySize(
/*1955*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1956*/ PFORMAT_STRING pFormat
/*1957*/ );
/*1961*/ 
/*1962*/ unsigned long
/*1963*/ 
/*1964*/ NdrSimpleStructMemorySize(
/*1965*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1966*/ PFORMAT_STRING pFormat
/*1967*/ );
/*1969*/ 
/*1970*/ unsigned long
/*1971*/ 
/*1972*/ NdrConformantStructMemorySize(
/*1973*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1974*/ PFORMAT_STRING pFormat
/*1975*/ );
/*1977*/ 
/*1978*/ unsigned long
/*1979*/ 
/*1980*/ NdrConformantVaryingStructMemorySize(
/*1981*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1982*/ PFORMAT_STRING pFormat
/*1983*/ );
/*1985*/ 
/*1986*/ unsigned long
/*1987*/ 
/*1988*/ NdrComplexStructMemorySize(
/*1989*/ PMIDL_STUB_MESSAGE pStubMsg,
/*1990*/ PFORMAT_STRING pFormat
/*1991*/ );
/*1995*/ 
/*1996*/ unsigned long
/*1997*/ 
/*1998*/ NdrFixedArrayMemorySize(
/*1999*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2000*/ PFORMAT_STRING pFormat
/*2001*/ );
/*2003*/ 
/*2004*/ unsigned long
/*2005*/ 
/*2006*/ NdrConformantArrayMemorySize(
/*2007*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2008*/ PFORMAT_STRING pFormat
/*2009*/ );
/*2011*/ 
/*2012*/ unsigned long
/*2013*/ 
/*2014*/ NdrConformantVaryingArrayMemorySize(
/*2015*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2016*/ PFORMAT_STRING pFormat
/*2017*/ );
/*2019*/ 
/*2020*/ unsigned long
/*2021*/ 
/*2022*/ NdrVaryingArrayMemorySize(
/*2023*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2024*/ PFORMAT_STRING pFormat
/*2025*/ );
/*2027*/ 
/*2028*/ unsigned long
/*2029*/ 
/*2030*/ NdrComplexArrayMemorySize(
/*2031*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2032*/ PFORMAT_STRING pFormat
/*2033*/ );
/*2037*/ 
/*2038*/ unsigned long
/*2039*/ 
/*2040*/ NdrConformantStringMemorySize(
/*2041*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2042*/ PFORMAT_STRING pFormat
/*2043*/ );
/*2045*/ 
/*2046*/ unsigned long
/*2047*/ 
/*2048*/ NdrNonConformantStringMemorySize(
/*2049*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2050*/ PFORMAT_STRING pFormat
/*2051*/ );
/*2055*/ 
/*2056*/ unsigned long
/*2057*/ 
/*2058*/ NdrEncapsulatedUnionMemorySize(
/*2059*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2060*/ PFORMAT_STRING pFormat
/*2061*/ );
/*2063*/ 
/*2064*/ unsigned long
/*2065*/ 
/*2066*/ NdrNonEncapsulatedUnionMemorySize(
/*2067*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2068*/ PFORMAT_STRING pFormat
/*2069*/ );
/*2073*/ 
/*2074*/ unsigned long
/*2075*/ 
/*2076*/ NdrXmitOrRepAsMemorySize(
/*2077*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2078*/ PFORMAT_STRING pFormat
/*2079*/ );
/*2083*/ 
/*2084*/ unsigned long
/*2085*/ 
/*2086*/ NdrUserMarshalMemorySize(
/*2087*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2088*/ PFORMAT_STRING pFormat
/*2089*/ );
/*2093*/ 
/*2094*/ unsigned long
/*2095*/ 
/*2096*/ NdrInterfacePointerMemorySize(
/*2097*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2098*/ PFORMAT_STRING pFormat
/*2099*/ );
/*2105*/ 
/*2106*/ void
/*2107*/ 
/*2108*/ NdrPointerFree(
/*2109*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2110*/ unsigned char*pMemory,
/*2111*/ PFORMAT_STRING pFormat
/*2112*/ );
/*2114*/ 
/*2115*/ void
/*2116*/ 
/*2117*/ NdrCsArrayFree(
/*2118*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2119*/ unsigned char*pMemory,
/*2120*/ PFORMAT_STRING pFormat
/*2121*/ );
/*2125*/ 
/*2126*/ void
/*2127*/ 
/*2128*/ NdrSimpleStructFree(
/*2129*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2130*/ unsigned char*pMemory,
/*2131*/ PFORMAT_STRING pFormat
/*2132*/ );
/*2134*/ 
/*2135*/ void
/*2136*/ 
/*2137*/ NdrConformantStructFree(
/*2138*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2139*/ unsigned char*pMemory,
/*2140*/ PFORMAT_STRING pFormat
/*2141*/ );
/*2143*/ 
/*2144*/ void
/*2145*/ 
/*2146*/ NdrConformantVaryingStructFree(
/*2147*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2148*/ unsigned char*pMemory,
/*2149*/ PFORMAT_STRING pFormat
/*2150*/ );
/*2152*/ 
/*2153*/ void
/*2154*/ 
/*2155*/ NdrComplexStructFree(
/*2156*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2157*/ unsigned char*pMemory,
/*2158*/ PFORMAT_STRING pFormat
/*2159*/ );
/*2163*/ 
/*2164*/ void
/*2165*/ 
/*2166*/ NdrFixedArrayFree(
/*2167*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2168*/ unsigned char*pMemory,
/*2169*/ PFORMAT_STRING pFormat
/*2170*/ );
/*2172*/ 
/*2173*/ void
/*2174*/ 
/*2175*/ NdrConformantArrayFree(
/*2176*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2177*/ unsigned char*pMemory,
/*2178*/ PFORMAT_STRING pFormat
/*2179*/ );
/*2181*/ 
/*2182*/ void
/*2183*/ 
/*2184*/ NdrConformantVaryingArrayFree(
/*2185*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2186*/ unsigned char*pMemory,
/*2187*/ PFORMAT_STRING pFormat
/*2188*/ );
/*2190*/ 
/*2191*/ void
/*2192*/ 
/*2193*/ NdrVaryingArrayFree(
/*2194*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2195*/ unsigned char*pMemory,
/*2196*/ PFORMAT_STRING pFormat
/*2197*/ );
/*2199*/ 
/*2200*/ void
/*2201*/ 
/*2202*/ NdrComplexArrayFree(
/*2203*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2204*/ unsigned char*pMemory,
/*2205*/ PFORMAT_STRING pFormat
/*2206*/ );
/*2210*/ 
/*2211*/ void
/*2212*/ 
/*2213*/ NdrEncapsulatedUnionFree(
/*2214*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2215*/ unsigned char*pMemory,
/*2216*/ PFORMAT_STRING pFormat
/*2217*/ );
/*2219*/ 
/*2220*/ void
/*2221*/ 
/*2222*/ NdrNonEncapsulatedUnionFree(
/*2223*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2224*/ unsigned char*pMemory,
/*2225*/ PFORMAT_STRING pFormat
/*2226*/ );
/*2230*/ 
/*2231*/ void
/*2232*/ 
/*2233*/ NdrByteCountPointerFree(
/*2234*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2235*/ unsigned char*pMemory,
/*2236*/ PFORMAT_STRING pFormat
/*2237*/ );
/*2241*/ 
/*2242*/ void
/*2243*/ 
/*2244*/ NdrXmitOrRepAsFree(
/*2245*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2246*/ unsigned char*pMemory,
/*2247*/ PFORMAT_STRING pFormat
/*2248*/ );
/*2252*/ 
/*2253*/ void
/*2254*/ 
/*2255*/ NdrUserMarshalFree(
/*2256*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2257*/ unsigned char*pMemory,
/*2258*/ PFORMAT_STRING pFormat
/*2259*/ );
/*2263*/ 
/*2264*/ void
/*2265*/ 
/*2266*/ NdrInterfacePointerFree(
/*2267*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2268*/ unsigned char*pMemory,
/*2269*/ PFORMAT_STRING pFormat
/*2270*/ );
/*2276*/ 
/*2277*/ void
/*2278*/ 
/*2279*/ NdrConvert2(
/*2280*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2281*/ PFORMAT_STRING pFormat,
/*2282*/ long NumberParams
/*2283*/ );
/*2285*/ 
/*2286*/ void
/*2287*/ 
/*2288*/ NdrConvert(
/*2289*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2290*/ PFORMAT_STRING pFormat
/*2291*/ );
/*2306*/ 
/*2307*/ unsigned char*
/*2308*/ 
/*2309*/ NdrUserMarshalSimpleTypeConvert(
/*2310*/ unsigned long*pFlags,
/*2311*/ unsigned char*pBuffer,
/*2312*/ unsigned char FormatChar
/*2313*/ );
/*2319*/ 
/*2320*/ void
/*2321*/ 
/*2322*/ NdrClientInitializeNew(
/*2323*/ PRPC_MESSAGE pRpcMsg,
/*2324*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2325*/ PMIDL_STUB_DESC pStubDescriptor,
/*2326*/ unsigned int ProcNum
/*2327*/ );
/*2329*/ 
/*2330*/ unsigned char*
/*2331*/ 
/*2332*/ NdrServerInitializeNew(
/*2333*/ PRPC_MESSAGE pRpcMsg,
/*2334*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2335*/ PMIDL_STUB_DESC pStubDescriptor
/*2336*/ );
/*2338*/ 
/*2339*/ void
/*2340*/ 
/*2341*/ NdrServerInitializePartial(
/*2342*/ PRPC_MESSAGE pRpcMsg,
/*2343*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2344*/ PMIDL_STUB_DESC pStubDescriptor,
/*2345*/ unsigned long RequestedBufferSize
/*2346*/ );
/*2348*/ 
/*2349*/ void
/*2350*/ 
/*2351*/ NdrClientInitialize(
/*2352*/ PRPC_MESSAGE pRpcMsg,
/*2353*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2354*/ PMIDL_STUB_DESC pStubDescriptor,
/*2355*/ unsigned int ProcNum
/*2356*/ );
/*2358*/ 
/*2359*/ unsigned char*
/*2360*/ 
/*2361*/ NdrServerInitialize(
/*2362*/ PRPC_MESSAGE pRpcMsg,
/*2363*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2364*/ PMIDL_STUB_DESC pStubDescriptor
/*2365*/ );
/*2367*/ 
/*2368*/ unsigned char*
/*2369*/ 
/*2370*/ NdrServerInitializeUnmarshall(
/*2371*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2372*/ PMIDL_STUB_DESC pStubDescriptor,
/*2373*/ PRPC_MESSAGE pRpcMsg
/*2374*/ );
/*2376*/ 
/*2377*/ void
/*2378*/ 
/*2379*/ NdrServerInitializeMarshall(
/*2380*/ PRPC_MESSAGE pRpcMsg,
/*2381*/ PMIDL_STUB_MESSAGE pStubMsg
/*2382*/ );
/*2384*/ 
/*2385*/ unsigned char*
/*2386*/ 
/*2387*/ NdrGetBuffer(
/*2388*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2389*/ unsigned long BufferLength,
/*2390*/ RPC_BINDING_HANDLE Handle
/*2391*/ );
/*2393*/ 
/*2394*/ unsigned char*
/*2395*/ 
/*2396*/ NdrNsGetBuffer(
/*2397*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2398*/ unsigned long BufferLength,
/*2399*/ RPC_BINDING_HANDLE Handle
/*2400*/ );
/*2402*/ 
/*2403*/ unsigned char*
/*2404*/ 
/*2405*/ NdrSendReceive(
/*2406*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2407*/ unsigned char*pBufferEnd
/*2408*/ );
/*2410*/ 
/*2411*/ unsigned char*
/*2412*/ 
/*2413*/ NdrNsSendReceive(
/*2414*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2415*/ unsigned char*pBufferEnd,
/*2416*/ RPC_BINDING_HANDLE*pAutoHandle
/*2417*/ );
/*2419*/ 
/*2420*/ void
/*2421*/ 
/*2422*/ NdrFreeBuffer(
/*2423*/ PMIDL_STUB_MESSAGE pStubMsg
/*2424*/ );
/*2426*/ 
/*2427*/ RPC_STATUS
/*2428*/ 
/*2429*/ NdrGetDcomProtocolVersion(
/*2430*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2431*/ RPC_VERSION*pVersion);
/*2440*/ CLIENT_CALL_RETURN
/*2441*/ NdrClientCall2(
/*2442*/ PMIDL_STUB_DESC pStubDescriptor,
/*2443*/ PFORMAT_STRING pFormat,
/*2444*/ ...
/*2445*/ );
/*2448*/ CLIENT_CALL_RETURN
/*2449*/ NdrClientCall(
/*2450*/ PMIDL_STUB_DESC pStubDescriptor,
/*2451*/ PFORMAT_STRING pFormat,
/*2452*/ ...
/*2453*/ );
/*2455*/ CLIENT_CALL_RETURN
/*2456*/ NdrAsyncClientCall(
/*2457*/ PMIDL_STUB_DESC pStubDescriptor,
/*2458*/ PFORMAT_STRING pFormat,
/*2459*/ ...
/*2460*/ );
/*2462*/ CLIENT_CALL_RETURN
/*2463*/ NdrDcomAsyncClientCall(
/*2464*/ PMIDL_STUB_DESC pStubDescriptor,
/*2465*/ PFORMAT_STRING pFormat,
/*2466*/ ...
/*2467*/ );
/*2470*/ typedef enum{
/*2471*/ STUB_UNMARSHAL,
/*2472*/ STUB_CALL_SERVER,
/*2473*/ STUB_MARSHAL,
/*2474*/ STUB_CALL_SERVER_NO_HRESULT
/*2475*/ }STUB_PHASE;
/*2477*/ typedef enum{
/*2478*/ PROXY_CALCSIZE,
/*2479*/ PROXY_GETBUFFER,
/*2480*/ PROXY_MARSHAL,
/*2481*/ PROXY_SENDRECEIVE,
/*2482*/ PROXY_UNMARSHAL
/*2483*/ }PROXY_PHASE;
/*2485*/ struct IRpcStubBuffer;
/*2488*/ 
/*2489*/ void
/*2490*/ 
/*2491*/ NdrAsyncServerCall(
/*2492*/ PRPC_MESSAGE pRpcMsg
/*2493*/ );
/*2496*/ 
/*2497*/ long
/*2498*/ 
/*2499*/ NdrAsyncStubCall(
/*2500*/ struct IRpcStubBuffer*pThis,
/*2501*/ struct IRpcChannelBuffer*pChannel,
/*2502*/ PRPC_MESSAGE pRpcMsg,
/*2503*/ unsigned long*pdwStubPhase
/*2504*/ );
/*2507*/ 
/*2508*/ long
/*2509*/ 
/*2510*/ NdrDcomAsyncStubCall(
/*2511*/ struct IRpcStubBuffer*pThis,
/*2512*/ struct IRpcChannelBuffer*pChannel,
/*2513*/ PRPC_MESSAGE pRpcMsg,
/*2514*/ unsigned long*pdwStubPhase
/*2515*/ );
/*2517*/ 
/*2518*/ long
/*2519*/ 
/*2520*/ NdrStubCall2(
/*2521*/ struct IRpcStubBuffer*pThis,
/*2522*/ struct IRpcChannelBuffer*pChannel,
/*2523*/ PRPC_MESSAGE pRpcMsg,
/*2524*/ unsigned long*pdwStubPhase
/*2525*/ );
/*2527*/ 
/*2528*/ void
/*2529*/ 
/*2530*/ NdrServerCall2(
/*2531*/ PRPC_MESSAGE pRpcMsg
/*2532*/ );
/*2534*/ 
/*2535*/ long
/*2536*/ 
/*2537*/ NdrStubCall(
/*2538*/ struct IRpcStubBuffer*pThis,
/*2539*/ struct IRpcChannelBuffer*pChannel,
/*2540*/ PRPC_MESSAGE pRpcMsg,
/*2541*/ unsigned long*pdwStubPhase
/*2542*/ );
/*2544*/ 
/*2545*/ void
/*2546*/ 
/*2547*/ NdrServerCall(
/*2548*/ PRPC_MESSAGE pRpcMsg
/*2549*/ );
/*2551*/ 
/*2552*/ int
/*2553*/ 
/*2554*/ NdrServerUnmarshall(
/*2555*/ struct IRpcChannelBuffer*pChannel,
/*2556*/ PRPC_MESSAGE pRpcMsg,
/*2557*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2558*/ PMIDL_STUB_DESC pStubDescriptor,
/*2559*/ PFORMAT_STRING pFormat,
/*2560*/ void*pParamList
/*2561*/ );
/*2563*/ 
/*2564*/ void
/*2565*/ 
/*2566*/ NdrServerMarshall(
/*2567*/ struct IRpcStubBuffer*pThis,
/*2568*/ struct IRpcChannelBuffer*pChannel,
/*2569*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2570*/ PFORMAT_STRING pFormat
/*2571*/ );
/*2575*/ 
/*2576*/ RPC_STATUS
/*2577*/ 
/*2578*/ NdrMapCommAndFaultStatus(
/*2579*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2580*/ unsigned long*pCommStatus,
/*2581*/ unsigned long*pFaultStatus,
/*2582*/ RPC_STATUS Status
/*2583*/ );
/*2591*/ typedef void*RPC_SS_THREAD_HANDLE;
/*2593*/ typedef void*
/*2594*/ RPC_CLIENT_ALLOC(
/*2595*/ typ size_t Size
/*2596*/ );
/*2598*/ typedef void
/*2599*/ RPC_CLIENT_FREE(
/*2600*/ typ void*Ptr
/*2601*/ );
/*2607*/ 
/*2608*/ void*
/*2609*/ 
/*2610*/ RpcSsAllocate(
/*2611*/ typ size_t Size
/*2612*/ );
/*2614*/ 
/*2615*/ void
/*2616*/ 
/*2617*/ RpcSsDisableAllocate(
/*2618*/ void
/*2619*/ );
/*2621*/ 
/*2622*/ void
/*2623*/ 
/*2624*/ RpcSsEnableAllocate(
/*2625*/ void
/*2626*/ );
/*2628*/ 
/*2629*/ void
/*2630*/ 
/*2631*/ RpcSsFree(
/*2632*/ typ void*NodeToFree
/*2633*/ );
/*2635*/ 
/*2636*/ RPC_SS_THREAD_HANDLE
/*2637*/ 
/*2638*/ RpcSsGetThreadHandle(
/*2639*/ void
/*2640*/ );
/*2642*/ 
/*2643*/ void
/*2644*/ 
/*2645*/ RpcSsSetClientAllocFree(
/*2646*/ typ RPC_CLIENT_ALLOC*ClientAlloc,
/*2647*/ typ RPC_CLIENT_FREE*ClientFree
/*2648*/ );
/*2650*/ 
/*2651*/ void
/*2652*/ 
/*2653*/ RpcSsSetThreadHandle(
/*2654*/ typ RPC_SS_THREAD_HANDLE Id
/*2655*/ );
/*2657*/ 
/*2658*/ void
/*2659*/ 
/*2660*/ RpcSsSwapClientAllocFree(
/*2661*/ typ RPC_CLIENT_ALLOC*ClientAlloc,
/*2662*/ typ RPC_CLIENT_FREE*ClientFree,
/*2663*/ typ RPC_CLIENT_ALLOC**OldClientAlloc,
/*2664*/ typ RPC_CLIENT_FREE**OldClientFree
/*2665*/ );
/*2671*/ 
/*2672*/ void*
/*2673*/ 
/*2674*/ RpcSmAllocate(
/*2675*/ typ size_t Size,
/*2676*/ typ RPC_STATUS*pStatus
/*2677*/ );
/*2679*/ 
/*2680*/ RPC_STATUS
/*2681*/ 
/*2682*/ RpcSmClientFree(
/*2683*/ typ void*pNodeToFree
/*2684*/ );
/*2686*/ 
/*2687*/ RPC_STATUS
/*2688*/ 
/*2689*/ RpcSmDestroyClientContext(
/*2690*/ typ void**ContextHandle
/*2691*/ );
/*2693*/ 
/*2694*/ RPC_STATUS
/*2695*/ 
/*2696*/ RpcSmDisableAllocate(
/*2697*/ void
/*2698*/ );
/*2700*/ 
/*2701*/ RPC_STATUS
/*2702*/ 
/*2703*/ RpcSmEnableAllocate(
/*2704*/ void
/*2705*/ );
/*2707*/ 
/*2708*/ RPC_STATUS
/*2709*/ 
/*2710*/ RpcSmFree(
/*2711*/ typ void*NodeToFree
/*2712*/ );
/*2714*/ 
/*2715*/ RPC_SS_THREAD_HANDLE
/*2716*/ 
/*2717*/ RpcSmGetThreadHandle(
/*2718*/ typ RPC_STATUS*pStatus
/*2719*/ );
/*2721*/ 
/*2722*/ RPC_STATUS
/*2723*/ 
/*2724*/ RpcSmSetClientAllocFree(
/*2725*/ typ RPC_CLIENT_ALLOC*ClientAlloc,
/*2726*/ typ RPC_CLIENT_FREE*ClientFree
/*2727*/ );
/*2729*/ 
/*2730*/ RPC_STATUS
/*2731*/ 
/*2732*/ RpcSmSetThreadHandle(
/*2733*/ typ RPC_SS_THREAD_HANDLE Id
/*2734*/ );
/*2736*/ 
/*2737*/ RPC_STATUS
/*2738*/ 
/*2739*/ RpcSmSwapClientAllocFree(
/*2740*/ typ RPC_CLIENT_ALLOC*ClientAlloc,
/*2741*/ typ RPC_CLIENT_FREE*ClientFree,
/*2742*/ typ RPC_CLIENT_ALLOC**OldClientAlloc,
/*2743*/ typ RPC_CLIENT_FREE**OldClientFree
/*2744*/ );
/*2750*/ 
/*2751*/ void
/*2752*/ 
/*2753*/ NdrRpcSsEnableAllocate(
/*2754*/ PMIDL_STUB_MESSAGE pMessage);
/*2756*/ 
/*2757*/ void
/*2758*/ 
/*2759*/ NdrRpcSsDisableAllocate(
/*2760*/ PMIDL_STUB_MESSAGE pMessage);
/*2762*/ 
/*2763*/ void
/*2764*/ 
/*2765*/ NdrRpcSmSetClientToOsf(
/*2766*/ PMIDL_STUB_MESSAGE pMessage);
/*2768*/ 
/*2769*/ void*
/*2770*/ 
/*2771*/ NdrRpcSmClientAllocate(
/*2772*/ typ size_t Size
/*2773*/ );
/*2775*/ 
/*2776*/ void
/*2777*/ 
/*2778*/ NdrRpcSmClientFree(
/*2779*/ typ void*NodeToFree
/*2780*/ );
/*2782*/ 
/*2783*/ void*
/*2784*/ 
/*2785*/ NdrRpcSsDefaultAllocate(
/*2786*/ typ size_t Size
/*2787*/ );
/*2789*/ 
/*2790*/ void
/*2791*/ 
/*2792*/ NdrRpcSsDefaultFree(
/*2793*/ typ void*NodeToFree
/*2794*/ );
/*2804*/ 
/*2805*/ PFULL_PTR_XLAT_TABLES
/*2806*/ 
/*2807*/ NdrFullPointerXlatInit(
/*2808*/ unsigned long NumberOfPointers,
/*2809*/ XLAT_SIDE XlatSide
/*2810*/ );
/*2812*/ 
/*2813*/ void
/*2814*/ 
/*2815*/ NdrFullPointerXlatFree(
/*2816*/ PFULL_PTR_XLAT_TABLES pXlatTables
/*2817*/ );
/*2820*/ 
/*2821*/ void*
/*2822*/ 
/*2823*/ NdrAllocate(
/*2824*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2825*/ size_t Len
/*2826*/ );
/*2828*/ 
/*2829*/ void
/*2830*/ 
/*2831*/ NdrClearOutParameters(
/*2832*/ PMIDL_STUB_MESSAGE pStubMsg,
/*2833*/ PFORMAT_STRING pFormat,
/*2834*/ void*ArgAddr
/*2835*/ );
/*2842*/ 
/*2843*/ void*
/*2844*/ 
/*2845*/ NdrOleAllocate(
/*2846*/ typ size_t Size
/*2847*/ );
/*2849*/ 
/*2850*/ void
/*2851*/ 
/*2852*/ NdrOleFree(
/*2853*/ typ void*NodeToFree
/*2854*/ );
/*2903*/ typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
/*2904*/ {
/*2905*/ void*Buffer;
/*2906*/ unsigned long BufferSize;
/*2907*/ void*(*pfnAllocate)(size_t);
/*2908*/ void(*pfnFree)(void*);
/*2909*/ struct IRpcChannelBuffer*pRpcChannelBuffer;
/*2910*/ ULONG_PTR Reserved[5];
/*2911*/ }NDR_USER_MARSHAL_INFO_LEVEL1;
/*2920*/ typedef struct _NDR_USER_MARSHAL_INFO
/*2921*/ {
/*2922*/ unsigned long InformationLevel;
/*2923*/ union{
/*2924*/ NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
/*2925*/ }u;
/*2926*/ }NDR_USER_MARSHAL_INFO;
/*2936*/ RPC_STATUS
/*2937*/ 
/*2938*/ NdrGetUserMarshalInfo(
/*2939*/ typ unsigned long*pFlags,
/*2940*/ typ unsigned long InformationLevel,
/*2941*/ typ NDR_USER_MARSHAL_INFO*pMarshalInfo
/*2942*/ );
/*2947*/ RPC_STATUS
/*2948*/ NdrCreateServerInterfaceFromStub(
/*2949*/ typ struct IRpcStubBuffer*pStub,
/*2950*/ typ typ RPC_SERVER_INTERFACE*pServerIf);
/*2955*/ CLIENT_CALL_RETURN
/*2956*/ NdrClientCall3(
/*2957*/ MIDL_STUBLESS_PROXY_INFO*pProxyInfo,
/*2958*/ unsigned long nProcNum,
/*2959*/ void*pReturnValue,
/*2960*/ ...
/*2961*/ );
/*2963*/ CLIENT_CALL_RETURN
/*2964*/ Ndr64AsyncClientCall(
/*2965*/ MIDL_STUBLESS_PROXY_INFO*pProxyInfo,
/*2966*/ unsigned long nProcNum,
/*2967*/ void*pReturnValue,
/*2968*/ ...
/*2969*/ );
/*2971*/ CLIENT_CALL_RETURN
/*2972*/ Ndr64DcomAsyncClientCall(
/*2973*/ MIDL_STUBLESS_PROXY_INFO*pProxyInfo,
/*2974*/ unsigned long nProcNum,
/*2975*/ void*pReturnValue,
/*2976*/ ...
/*2977*/ );
/*2979*/ struct IRpcStubBuffer;
/*2981*/ 
/*2982*/ void
/*2983*/ 
/*2984*/ Ndr64AsyncServerCall(
/*2985*/ PRPC_MESSAGE pRpcMsg
/*2986*/ );
/*2988*/ 
/*2989*/ void
/*2990*/ 
/*2991*/ Ndr64AsyncServerCall64(
/*2992*/ PRPC_MESSAGE pRpcMsg
/*2993*/ );
/*2995*/ 
/*2996*/ void
/*2997*/ 
/*2998*/ Ndr64AsyncServerCallAll(
/*2999*/ PRPC_MESSAGE pRpcMsg
/*3000*/ );
/*3002*/ 
/*3003*/ long
/*3004*/ 
/*3005*/ Ndr64AsyncStubCall(
/*3006*/ struct IRpcStubBuffer*pThis,
/*3007*/ struct IRpcChannelBuffer*pChannel,
/*3008*/ PRPC_MESSAGE pRpcMsg,
/*3009*/ unsigned long*pdwStubPhase
/*3010*/ );
/*3013*/ 
/*3014*/ long
/*3015*/ 
/*3016*/ Ndr64DcomAsyncStubCall(
/*3017*/ struct IRpcStubBuffer*pThis,
/*3018*/ struct IRpcChannelBuffer*pChannel,
/*3019*/ PRPC_MESSAGE pRpcMsg,
/*3020*/ unsigned long*pdwStubPhase
/*3021*/ );
/*3023*/ 
/*3024*/ long
/*3025*/ 
/*3026*/ NdrStubCall3(
/*3027*/ struct IRpcStubBuffer*pThis,
/*3028*/ struct IRpcChannelBuffer*pChannel,
/*3029*/ PRPC_MESSAGE pRpcMsg,
/*3030*/ unsigned long*pdwStubPhase
/*3031*/ );
/*3033*/ 
/*3034*/ void
/*3035*/ 
/*3036*/ NdrServerCallAll(
/*3037*/ PRPC_MESSAGE pRpcMsg
/*3038*/ );
/*3040*/ 
/*3041*/ void
/*3042*/ 
/*3043*/ NdrServerCallNdr64(
/*3044*/ PRPC_MESSAGE pRpcMsg
/*3045*/ );
/*3048*/ 
/*3049*/ void
/*3050*/ 
/*3051*/ NdrServerCall3(
/*3052*/ PRPC_MESSAGE pRpcMsg
/*3053*/ );
/*3057*/ 
/*3058*/ void
/*3059*/ 
/*3060*/ NdrPartialIgnoreClientMarshall(
/*3061*/ PMIDL_STUB_MESSAGE pStubMsg,
/*3062*/ void*pMemory
/*3063*/ );
/*3065*/ 
/*3066*/ void
/*3067*/ 
/*3068*/ NdrPartialIgnoreServerUnmarshall(
/*3069*/ PMIDL_STUB_MESSAGE pStubMsg,
/*3070*/ void**ppMemory
/*3071*/ );
/*3073*/ 
/*3074*/ void
/*3075*/ 
/*3076*/ NdrPartialIgnoreClientBufferSize(
/*3077*/ PMIDL_STUB_MESSAGE pStubMsg,
/*3078*/ void*pMemory
/*3079*/ );
/*3081*/ 
/*3082*/ void
/*3083*/ 
/*3084*/ NdrPartialIgnoreServerInitialize(
/*3085*/ PMIDL_STUB_MESSAGE pStubMsg,
/*3086*/ void**ppMemory,
/*3087*/ PFORMAT_STRING pFormat
/*3088*/ );
/*3091*/ void
/*3092*/ RpcUserFree(handle_t AsyncHandle,void*pBuffer);
/*"wtypes.h"70*/ extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
/*71*/ extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;
/*79*/ typedef struct tagRemHGLOBAL
/*80*/ {
/*81*/ long fNullHGlobal;
/*82*/ unsigned long cbData;
/*83*/ byte data[1];
/*84*/ }RemHGLOBAL;
/*86*/ typedef struct tagRemHMETAFILEPICT
/*87*/ {
/*88*/ long mm;
/*89*/ long xExt;
/*90*/ long yExt;
/*91*/ unsigned long cbData;
/*92*/ byte data[1];
/*93*/ }RemHMETAFILEPICT;
/*95*/ typedef struct tagRemHENHMETAFILE
/*96*/ {
/*97*/ unsigned long cbData;
/*98*/ byte data[1];
/*99*/ }RemHENHMETAFILE;
/*101*/ typedef struct tagRemHBITMAP
/*102*/ {
/*103*/ unsigned long cbData;
/*104*/ byte data[1];
/*105*/ }RemHBITMAP;
/*107*/ typedef struct tagRemHPALETTE
/*108*/ {
/*109*/ unsigned long cbData;
/*110*/ byte data[1];
/*111*/ }RemHPALETTE;
/*113*/ typedef struct tagRemBRUSH
/*114*/ {
/*115*/ unsigned long cbData;
/*116*/ byte data[1];
/*117*/ }RemHBRUSH;
/*351*/ typedef char OLECHAR;
/*352*/ typedef LPSTR LPOLESTR;
/*353*/ typedef LPCSTR LPCOLESTR;
/*380*/ typedef unsigned char UCHAR;
/*382*/ typedef short SHORT;
/*384*/ typedef unsigned short USHORT;
/*386*/ typedef DWORD ULONG;
/*388*/ typedef double DOUBLE;
/*500*/ typedef struct _COAUTHIDENTITY
/*501*/ {
/*502*/ USHORT*User;
/*503*/ ULONG UserLength;
/*504*/ USHORT*Domain;
/*505*/ ULONG DomainLength;
/*506*/ USHORT*Password;
/*507*/ ULONG PasswordLength;
/*508*/ ULONG Flags;
/*509*/ }COAUTHIDENTITY;
/*511*/ typedef struct _COAUTHINFO
/*512*/ {
/*513*/ DWORD dwAuthnSvc;
/*514*/ DWORD dwAuthzSvc;
/*515*/ LPWSTR pwszServerPrincName;
/*516*/ DWORD dwAuthnLevel;
/*517*/ DWORD dwImpersonationLevel;
/*518*/ COAUTHIDENTITY*pAuthIdentityData;
/*519*/ DWORD dwCapabilities;
/*520*/ }COAUTHINFO;
/*522*/ typedef LONG SCODE;
/*524*/ typedef SCODE*PSCODE;
/*556*/ typedef
/*557*/ enum tagMEMCTX
/*558*/ {MEMCTX_TASK=1,
/*559*/ MEMCTX_SHARED=2,
/*560*/ MEMCTX_MACSYSTEM=3,
/*561*/ MEMCTX_UNKNOWN=-1,
/*562*/ MEMCTX_SAME=-2
/*563*/ }MEMCTX;
/*591*/ typedef
/*592*/ enum tagCLSCTX
/*593*/ {CLSCTX_INPROC_SERVER=0x1,
/*594*/ CLSCTX_INPROC_HANDLER=0x2,
/*595*/ CLSCTX_LOCAL_SERVER=0x4,
/*596*/ CLSCTX_INPROC_SERVER16=0x8,
/*597*/ CLSCTX_REMOTE_SERVER=0x10,
/*598*/ CLSCTX_INPROC_HANDLER16=0x20,
/*599*/ CLSCTX_RESERVED1=0x40,
/*600*/ CLSCTX_RESERVED2=0x80,
/*601*/ CLSCTX_RESERVED3=0x100,
/*602*/ CLSCTX_RESERVED4=0x200,
/*603*/ CLSCTX_NO_CODE_DOWNLOAD=0x400,
/*604*/ CLSCTX_RESERVED5=0x800,
/*605*/ CLSCTX_NO_CUSTOM_MARSHAL=0x1000,
/*606*/ CLSCTX_ENABLE_CODE_DOWNLOAD=0x2000,
/*607*/ CLSCTX_NO_FAILURE_LOG=0x4000,
/*608*/ CLSCTX_DISABLE_AAA=0x8000,
/*609*/ CLSCTX_ENABLE_AAA=0x10000,
/*610*/ CLSCTX_FROM_DEFAULT_CONTEXT=0x20000,
/*611*/ CLSCTX_ACTIVATE_32_BIT_SERVER=0x40000,
/*612*/ CLSCTX_ACTIVATE_64_BIT_SERVER=0x80000,
/*613*/ CLSCTX_ENABLE_CLOAKING=0x100000,
/*614*/ CLSCTX_PS_DLL=(int)0x80000000
/*615*/ }CLSCTX;
/*634*/ typedef
/*635*/ enum tagMSHLFLAGS
/*636*/ {MSHLFLAGS_NORMAL=0,
/*637*/ MSHLFLAGS_TABLESTRONG=1,
/*638*/ MSHLFLAGS_TABLEWEAK=2,
/*639*/ MSHLFLAGS_NOPING=4,
/*640*/ MSHLFLAGS_RESERVED1=8,
/*641*/ MSHLFLAGS_RESERVED2=16,
/*642*/ MSHLFLAGS_RESERVED3=32,
/*643*/ MSHLFLAGS_RESERVED4=64
/*644*/ }MSHLFLAGS;
/*646*/ typedef
/*647*/ enum tagMSHCTX
/*648*/ {MSHCTX_LOCAL=0,
/*649*/ MSHCTX_NOSHAREDMEM=1,
/*650*/ MSHCTX_DIFFERENTMACHINE=2,
/*651*/ MSHCTX_INPROC=3,
/*652*/ MSHCTX_CROSSCTX=4
/*653*/ }MSHCTX;
/*655*/ typedef
/*656*/ enum tagDVASPECT
/*657*/ {DVASPECT_CONTENT=1,
/*658*/ DVASPECT_THUMBNAIL=2,
/*659*/ DVASPECT_ICON=4,
/*660*/ DVASPECT_DOCPRINT=8
/*661*/ }DVASPECT;
/*663*/ typedef
/*664*/ enum tagSTGC
/*665*/ {STGC_DEFAULT=0,
/*666*/ STGC_OVERWRITE=1,
/*667*/ STGC_ONLYIFCURRENT=2,
/*668*/ STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE=4,
/*669*/ STGC_CONSOLIDATE=8
/*670*/ }STGC;
/*672*/ typedef
/*673*/ enum tagSTGMOVE
/*674*/ {STGMOVE_MOVE=0,
/*675*/ STGMOVE_COPY=1,
/*676*/ STGMOVE_SHALLOWCOPY=2
/*677*/ }STGMOVE;
/*679*/ typedef
/*680*/ enum tagSTATFLAG
/*681*/ {STATFLAG_DEFAULT=0,
/*682*/ STATFLAG_NONAME=1,
/*683*/ STATFLAG_NOOPEN=2
/*684*/ }STATFLAG;
/*686*/ typedef void*HCONTEXT;
/*690*/ typedef DWORD LCID;
/*695*/ typedef USHORT LANGID;
/*698*/ typedef struct _BYTE_BLOB
/*699*/ {
/*700*/ unsigned long clSize;
/*701*/ byte abData[1];
/*702*/ }BYTE_BLOB;
/*704*/ typedef BYTE_BLOB*UP_BYTE_BLOB;
/*706*/ typedef struct _WORD_BLOB
/*707*/ {
/*708*/ unsigned long clSize;
/*709*/ unsigned short asData[1];
/*710*/ }WORD_BLOB;
/*712*/ typedef WORD_BLOB*UP_WORD_BLOB;
/*714*/ typedef struct _DWORD_BLOB
/*715*/ {
/*716*/ unsigned long clSize;
/*717*/ unsigned long alData[1];
/*718*/ }DWORD_BLOB;
/*720*/ typedef DWORD_BLOB*UP_DWORD_BLOB;
/*722*/ typedef struct _FLAGGED_BYTE_BLOB
/*723*/ {
/*724*/ unsigned long fFlags;
/*725*/ unsigned long clSize;
/*726*/ byte abData[1];
/*727*/ }FLAGGED_BYTE_BLOB;
/*729*/ typedef FLAGGED_BYTE_BLOB*UP_FLAGGED_BYTE_BLOB;
/*731*/ typedef struct _FLAGGED_WORD_BLOB
/*732*/ {
/*733*/ unsigned long fFlags;
/*734*/ unsigned long clSize;
/*735*/ unsigned short asData[1];
/*736*/ }FLAGGED_WORD_BLOB;
/*738*/ typedef FLAGGED_WORD_BLOB*UP_FLAGGED_WORD_BLOB;
/*740*/ typedef struct _BYTE_SIZEDARR
/*741*/ {
/*742*/ unsigned long clSize;
/*743*/ byte*pData;
/*744*/ }BYTE_SIZEDARR;
/*746*/ typedef struct _SHORT_SIZEDARR
/*747*/ {
/*748*/ unsigned long clSize;
/*749*/ unsigned short*pData;
/*750*/ }WORD_SIZEDARR;
/*752*/ typedef struct _LONG_SIZEDARR
/*753*/ {
/*754*/ unsigned long clSize;
/*755*/ unsigned long*pData;
/*756*/ }DWORD_SIZEDARR;
/*758*/ typedef struct _HYPER_SIZEDARR
/*759*/ {
/*760*/ unsigned long clSize;
/*761*/ __int64*pData;
/*762*/ }HYPER_SIZEDARR;
/*770*/ typedef struct _userCLIPFORMAT
/*771*/ {
/*772*/ long fContext;
/*773*/ union __MIDL_IWinTypes_0001
/*774*/ {
/*775*/ DWORD dwValue;
/*776*/ wchar_t*pwszName;
/*777*/ }u;
/*778*/ }userCLIPFORMAT;
/*780*/ typedef userCLIPFORMAT*wireCLIPFORMAT;
/*782*/ typedef WORD CLIPFORMAT;
/*784*/ typedef struct _GDI_NONREMOTE
/*785*/ {
/*786*/ long fContext;
/*787*/ union __MIDL_IWinTypes_0002
/*788*/ {
/*789*/ long hInproc;
/*790*/ DWORD_BLOB*hRemote;
/*791*/ }u;
/*792*/ }GDI_NONREMOTE;
/*794*/ typedef struct _userHGLOBAL
/*795*/ {
/*796*/ long fContext;
/*797*/ union __MIDL_IWinTypes_0003
/*798*/ {
/*799*/ long hInproc;
/*800*/ FLAGGED_BYTE_BLOB*hRemote;
/*801*/ __int64 hInproc64;
/*802*/ }u;
/*803*/ }userHGLOBAL;
/*805*/ typedef userHGLOBAL*wireHGLOBAL;
/*807*/ typedef struct _userHMETAFILE
/*808*/ {
/*809*/ long fContext;
/*810*/ union __MIDL_IWinTypes_0004
/*811*/ {
/*812*/ long hInproc;
/*813*/ BYTE_BLOB*hRemote;
/*814*/ __int64 hInproc64;
/*815*/ }u;
/*816*/ }userHMETAFILE;
/*818*/ typedef struct _remoteMETAFILEPICT
/*819*/ {
/*820*/ long mm;
/*821*/ long xExt;
/*822*/ long yExt;
/*823*/ userHMETAFILE*hMF;
/*824*/ }remoteMETAFILEPICT;
/*826*/ typedef struct _userHMETAFILEPICT
/*827*/ {
/*828*/ long fContext;
/*829*/ union __MIDL_IWinTypes_0005
/*830*/ {
/*831*/ long hInproc;
/*832*/ remoteMETAFILEPICT*hRemote;
/*833*/ __int64 hInproc64;
/*834*/ }u;
/*835*/ }userHMETAFILEPICT;
/*837*/ typedef struct _userHENHMETAFILE
/*838*/ {
/*839*/ long fContext;
/*840*/ union __MIDL_IWinTypes_0006
/*841*/ {
/*842*/ long hInproc;
/*843*/ BYTE_BLOB*hRemote;
/*844*/ __int64 hInproc64;
/*845*/ }u;
/*846*/ }userHENHMETAFILE;
/*848*/ typedef struct _userBITMAP
/*849*/ {
/*850*/ LONG bmType;
/*851*/ LONG bmWidth;
/*852*/ LONG bmHeight;
/*853*/ LONG bmWidthBytes;
/*854*/ WORD bmPlanes;
/*855*/ WORD bmBitsPixel;
/*856*/ ULONG cbSize;
/*857*/ byte pBuffer[1];
/*858*/ }userBITMAP;
/*860*/ typedef struct _userHBITMAP
/*861*/ {
/*862*/ long fContext;
/*863*/ union __MIDL_IWinTypes_0007
/*864*/ {
/*865*/ long hInproc;
/*866*/ userBITMAP*hRemote;
/*867*/ __int64 hInproc64;
/*868*/ }u;
/*869*/ }userHBITMAP;
/*871*/ typedef struct _userHPALETTE
/*872*/ {
/*873*/ long fContext;
/*874*/ union __MIDL_IWinTypes_0008
/*875*/ {
/*876*/ long hInproc;
/*877*/ LOGPALETTE*hRemote;
/*878*/ __int64 hInproc64;
/*879*/ }u;
/*880*/ }userHPALETTE;
/*882*/ typedef struct _RemotableHandle
/*883*/ {
/*884*/ long fContext;
/*885*/ union __MIDL_IWinTypes_0009
/*886*/ {
/*887*/ long hInproc;
/*888*/ long hRemote;
/*889*/ }u;
/*890*/ }RemotableHandle;
/*892*/ typedef RemotableHandle*wireHWND;
/*894*/ typedef RemotableHandle*wireHMENU;
/*896*/ typedef RemotableHandle*wireHACCEL;
/*898*/ typedef RemotableHandle*wireHBRUSH;
/*900*/ typedef RemotableHandle*wireHFONT;
/*902*/ typedef RemotableHandle*wireHDC;
/*904*/ typedef RemotableHandle*wireHICON;
/*906*/ typedef RemotableHandle*wireHRGN;
/*982*/ typedef userHBITMAP*wireHBITMAP;
/*984*/ typedef userHPALETTE*wireHPALETTE;
/*986*/ typedef userHENHMETAFILE*wireHENHMETAFILE;
/*988*/ typedef userHMETAFILE*wireHMETAFILE;
/*990*/ typedef userHMETAFILEPICT*wireHMETAFILEPICT;
/*1006*/ typedef void*HMETAFILEPICT;
/*1010*/ extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
/*1011*/ extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
/*1023*/ typedef double DATE;
/*1038*/ typedef union tagCY{
/*1039*/ struct{
/*1044*/ unsigned long Lo;
/*1045*/ long Hi;
/*1047*/ }s;
/*1048*/ LONGLONG int64;
/*1049*/ }CY;
/*1052*/ typedef CY*LPCY;
/*1068*/ typedef struct tagDEC{
/*1069*/ USHORT wReserved;
/*1070*/ union{
/*1071*/ struct{
/*1072*/ BYTE scale;
/*1073*/ BYTE sign;
/*1074*/ }s;
/*1075*/ USHORT signscale;
/*1076*/ }u;
/*1077*/ ULONG Hi32;
/*1078*/ union{
/*1079*/ struct{
/*1084*/ ULONG Lo32;
/*1085*/ ULONG Mid32;
/*1087*/ }s2;
/*1088*/ ULONGLONG Lo64;
/*1089*/ }u2;
/*1090*/ }DECIMAL;
/*1095*/ typedef DECIMAL*LPDECIMAL;
/*1104*/ typedef FLAGGED_WORD_BLOB*wireBSTR;
/*1106*/ typedef OLECHAR*BSTR;
/*1108*/ typedef BSTR*LPBSTR;
/*1111*/ typedef short VARIANT_BOOL;
/*1121*/ typedef boolean BOOLEAN;
/*1128*/ typedef struct tagBSTRBLOB
/*1129*/ {
/*1130*/ ULONG cbSize;
/*1131*/ BYTE*pData;
/*1132*/ }BSTRBLOB;
/*1134*/ typedef struct tagBSTRBLOB*LPBSTRBLOB;
/*1143*/ typedef struct tagBLOB
/*1144*/ {
/*1145*/ ULONG cbSize;
/*1146*/ BYTE*pBlobData;
/*1147*/ }BLOB;
/*1149*/ typedef struct tagBLOB*LPBLOB;
/*1152*/ typedef struct tagCLIPDATA
/*1153*/ {
/*1154*/ ULONG cbSize;
/*1155*/ long ulClipFmt;
/*1156*/ BYTE*pClipData;
/*1157*/ }CLIPDATA;
/*1161*/ typedef unsigned short VARTYPE;
/*1222*/ enum VARENUM
/*1223*/ {VT_EMPTY=0,
/*1224*/ VT_NULL=1,
/*1225*/ VT_I2=2,
/*1226*/ VT_I4=3,
/*1227*/ VT_R4=4,
/*1228*/ VT_R8=5,
/*1229*/ VT_CY=6,
/*1230*/ VT_DATE=7,
/*1231*/ VT_BSTR=8,
/*1232*/ VT_DISPATCH=9,
/*1233*/ VT_ERROR=10,
/*1234*/ VT_BOOL=11,
/*1235*/ VT_VARIANT=12,
/*1236*/ VT_UNKNOWN=13,
/*1237*/ VT_DECIMAL=14,
/*1238*/ VT_I1=16,
/*1239*/ VT_UI1=17,
/*1240*/ VT_UI2=18,
/*1241*/ VT_UI4=19,
/*1242*/ VT_I8=20,
/*1243*/ VT_UI8=21,
/*1244*/ VT_INT=22,
/*1245*/ VT_UINT=23,
/*1246*/ VT_VOID=24,
/*1247*/ VT_HRESULT=25,
/*1248*/ VT_PTR=26,
/*1249*/ VT_SAFEARRAY=27,
/*1250*/ VT_CARRAY=28,
/*1251*/ VT_USERDEFINED=29,
/*1252*/ VT_LPSTR=30,
/*1253*/ VT_LPWSTR=31,
/*1254*/ VT_RECORD=36,
/*1255*/ VT_INT_PTR=37,
/*1256*/ VT_UINT_PTR=38,
/*1257*/ VT_FILETIME=64,
/*1258*/ VT_BLOB=65,
/*1259*/ VT_STREAM=66,
/*1260*/ VT_STORAGE=67,
/*1261*/ VT_STREAMED_OBJECT=68,
/*1262*/ VT_STORED_OBJECT=69,
/*1263*/ VT_BLOB_OBJECT=70,
/*1264*/ VT_CF=71,
/*1265*/ VT_CLSID=72,
/*1266*/ VT_VERSIONED_STREAM=73,
/*1267*/ VT_BSTR_BLOB=0xfff,
/*1268*/ VT_VECTOR=0x1000,
/*1269*/ VT_ARRAY=0x2000,
/*1270*/ VT_BYREF=0x4000,
/*1271*/ VT_RESERVED=0x8000,
/*1272*/ VT_ILLEGAL=0xffff,
/*1273*/ VT_ILLEGALMASKED=0xfff,
/*1274*/ VT_TYPEMASK=0xfff
/*1275*/ };
/*1276*/ typedef ULONG PROPID;
/*1280*/ typedef struct _tagpropertykey
/*1281*/ {
/*1282*/ GUID fmtid;
/*1283*/ DWORD pid;
/*1284*/ }PROPERTYKEY;
/*1318*/ typedef struct tagCSPLATFORM
/*1319*/ {
/*1320*/ DWORD dwPlatformId;
/*1321*/ DWORD dwVersionHi;
/*1322*/ DWORD dwVersionLo;
/*1323*/ DWORD dwProcessorArch;
/*1324*/ }CSPLATFORM;
/*1326*/ typedef struct tagQUERYCONTEXT
/*1327*/ {
/*1328*/ DWORD dwContext;
/*1329*/ CSPLATFORM Platform;
/*1330*/ LCID Locale;
/*1331*/ DWORD dwVersionHi;
/*1332*/ DWORD dwVersionLo;
/*1333*/ }QUERYCONTEXT;
/*1335*/ typedef
/*1336*/ enum tagTYSPEC
/*1337*/ {TYSPEC_CLSID=0,
/*1338*/ TYSPEC_FILEEXT=(TYSPEC_CLSID+1),
/*1339*/ TYSPEC_MIMETYPE=(TYSPEC_FILEEXT+1),
/*1340*/ TYSPEC_FILENAME=(TYSPEC_MIMETYPE+1),
/*1341*/ TYSPEC_PROGID=(TYSPEC_FILENAME+1),
/*1342*/ TYSPEC_PACKAGENAME=(TYSPEC_PROGID+1),
/*1343*/ TYSPEC_OBJECTID=(TYSPEC_PACKAGENAME+1)
/*1344*/ }TYSPEC;
/*1346*/ typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
/*1347*/ {
/*1348*/ DWORD tyspec;
/*1349*/ union __MIDL___MIDL_itf_wtypes_0000_0001_0005
/*1350*/ {
/*1351*/ CLSID clsid;
/*1352*/ LPOLESTR pFileExt;
/*1353*/ LPOLESTR pMimeType;
/*1354*/ LPOLESTR pProgId;
/*1355*/ LPOLESTR pFileName;
/*1356*/ struct
/*1357*/ {
/*1358*/ LPOLESTR pPackageName;
/*1359*/ GUID PolicyId;
/*1360*/ }ByName;
/*1361*/ struct
/*1362*/ {
/*1363*/ GUID ObjectId;
/*1364*/ GUID PolicyId;
/*1365*/ }ByObjectId;
/*1366*/ }tagged_union;
/*1367*/ }uCLSSPEC;
/*1371*/ extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
/*1372*/ extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;
/*39*/ extern const GUID typ GUID_DEVINTERFACE_DISK;
/*40*/ extern const GUID typ GUID_DEVINTERFACE_CDROM;
/*41*/ extern const GUID typ GUID_DEVINTERFACE_PARTITION;
/*42*/ extern const GUID typ GUID_DEVINTERFACE_TAPE;
/*43*/ extern const GUID typ GUID_DEVINTERFACE_WRITEONCEDISK;
/*44*/ extern const GUID typ GUID_DEVINTERFACE_VOLUME;
/*45*/ extern const GUID typ GUID_DEVINTERFACE_MEDIUMCHANGER;
/*46*/ extern const GUID typ GUID_DEVINTERFACE_FLOPPY;
/*47*/ extern const GUID typ GUID_DEVINTERFACE_CDCHANGER;
/*48*/ extern const GUID typ GUID_DEVINTERFACE_STORAGEPORT;
/*58*/ extern const GUID typ GUID_DEVINTERFACE_HIDDEN_VOLUME;
/*60*/ extern const GUID typ GUID_DEVINTERFACE_COMPORT;
/*61*/ extern const GUID typ GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
/*307*/ typedef struct _STORAGE_HOTPLUG_INFO{
/*308*/ DWORD Size;
/*309*/ BOOLEAN MediaRemovable;
/*310*/ BOOLEAN MediaHotplug;
/*311*/ BOOLEAN DeviceHotplug;
/*312*/ BOOLEAN WriteCacheEnableOverride;
/*313*/ }STORAGE_HOTPLUG_INFO,*PSTORAGE_HOTPLUG_INFO;
/*326*/ typedef struct _STORAGE_DEVICE_NUMBER{
/*332*/ DWORD DeviceType;
/*338*/ DWORD DeviceNumber;
/*345*/ DWORD PartitionNumber;
/*346*/ }STORAGE_DEVICE_NUMBER,*PSTORAGE_DEVICE_NUMBER;
/*352*/ typedef struct _STORAGE_BUS_RESET_REQUEST{
/*353*/ BYTE PathId;
/*354*/ }STORAGE_BUS_RESET_REQUEST,*PSTORAGE_BUS_RESET_REQUEST;
/*360*/ typedef struct STORAGE_BREAK_RESERVATION_REQUEST{
/*361*/ DWORD Length;
/*362*/ BYTE _unused;
/*363*/ BYTE PathId;
/*364*/ BYTE TargetId;
/*365*/ BYTE Lun;
/*366*/ }STORAGE_BREAK_RESERVATION_REQUEST,*PSTORAGE_BREAK_RESERVATION_REQUEST;
/*379*/ typedef struct _PREVENT_MEDIA_REMOVAL{
/*380*/ BOOLEAN PreventMediaRemoval;
/*381*/ }PREVENT_MEDIA_REMOVAL,*PPREVENT_MEDIA_REMOVAL;
/*389*/ typedef struct _CLASS_MEDIA_CHANGE_CONTEXT{
/*390*/ DWORD MediaChangeCount;
/*391*/ DWORD NewState;
/*392*/ }CLASS_MEDIA_CHANGE_CONTEXT,*PCLASS_MEDIA_CHANGE_CONTEXT;
/*398*/ typedef struct _TAPE_STATISTICS{
/*399*/ DWORD Version;
/*400*/ DWORD Flags;
/*401*/ LARGE_INTEGER RecoveredWrites;
/*402*/ LARGE_INTEGER UnrecoveredWrites;
/*403*/ LARGE_INTEGER RecoveredReads;
/*404*/ LARGE_INTEGER UnrecoveredReads;
/*405*/ BYTE CompressionRatioReads;
/*406*/ BYTE CompressionRatioWrites;
/*407*/ }TAPE_STATISTICS,*PTAPE_STATISTICS;
/*416*/ typedef struct _TAPE_GET_STATISTICS{
/*417*/ DWORD Operation;
/*418*/ }TAPE_GET_STATISTICS,*PTAPE_GET_STATISTICS;
/*429*/ typedef enum _STORAGE_MEDIA_TYPE{
/*459*/ DDS_4mm=0x20,
/*460*/ MiniQic,
/*461*/ Travan,
/*462*/ QIC,
/*463*/ MP_8mm,
/*464*/ AME_8mm,
/*465*/ AIT1_8mm,
/*466*/ DLT,
/*467*/ NCTP,
/*468*/ IBM_3480,
/*469*/ IBM_3490E,
/*470*/ IBM_Magstar_3590,
/*471*/ IBM_Magstar_MP,
/*472*/ STK_DATA_D3,
/*473*/ SONY_DTF,
/*474*/ DV_6mm,
/*475*/ DMI,
/*476*/ SONY_D2,
/*477*/ CLEANER_CARTRIDGE,
/*478*/ CD_ROM,
/*479*/ CD_R,
/*480*/ CD_RW,
/*481*/ DVD_ROM,
/*482*/ DVD_R,
/*483*/ DVD_RW,
/*484*/ MO_3_RW,
/*485*/ MO_5_WO,
/*486*/ MO_5_RW,
/*487*/ MO_5_LIMDOW,
/*488*/ PC_5_WO,
/*489*/ PC_5_RW,
/*490*/ PD_5_RW,
/*491*/ ABL_5_WO,
/*492*/ PINNACLE_APEX_5_RW,
/*493*/ SONY_12_WO,
/*494*/ PHILIPS_12_WO,
/*495*/ HITACHI_12_WO,
/*496*/ CYGNET_12_WO,
/*497*/ KODAK_14_WO,
/*498*/ MO_NFR_525,
/*499*/ NIKON_12_RW,
/*500*/ IOMEGA_ZIP,
/*501*/ IOMEGA_JAZ,
/*502*/ SYQUEST_EZ135,
/*503*/ SYQUEST_EZFLYER,
/*504*/ SYQUEST_SYJET,
/*505*/ AVATAR_F2,
/*506*/ MP2_8mm,
/*507*/ DST_S,
/*508*/ DST_M,
/*509*/ DST_L,
/*510*/ VXATape_1,
/*511*/ VXATape_2,
/*515*/ STK_9840,
/*517*/ LTO_Ultrium,
/*518*/ LTO_Accelis,
/*519*/ DVD_RAM,
/*520*/ AIT_8mm,
/*521*/ ADR_1,
/*522*/ ADR_2,
/*523*/ STK_9940,
/*524*/ SAIT,
/*525*/ VXATape
/*526*/ }STORAGE_MEDIA_TYPE,*PSTORAGE_MEDIA_TYPE;
/*541*/ typedef enum _STORAGE_BUS_TYPE{
/*542*/ BusTypeUnknown=0x00,
/*543*/ BusTypeScsi,
/*544*/ BusTypeAtapi,
/*545*/ BusTypeAta,
/*546*/ BusType1394,
/*547*/ BusTypeSsa,
/*548*/ BusTypeFibre,
/*549*/ BusTypeUsb,
/*550*/ BusTypeRAID,
/*551*/ BusTypeiScsi,
/*552*/ BusTypeSas,
/*553*/ BusTypeSata,
/*554*/ BusTypeSd,
/*555*/ BusTypeMmc,
/*556*/ BusTypeMax,
/*557*/ BusTypeMaxReserved=0x7F
/*558*/ }STORAGE_BUS_TYPE,*PSTORAGE_BUS_TYPE;
/*560*/ typedef struct _DEVICE_MEDIA_INFO{
/*561*/ union{
/*562*/ struct{
/*563*/ LARGE_INTEGER Cylinders;
/*564*/ STORAGE_MEDIA_TYPE MediaType;
/*565*/ DWORD TracksPerCylinder;
/*566*/ DWORD SectorsPerTrack;
/*567*/ DWORD BytesPerSector;
/*568*/ DWORD NumberMediaSides;
/*569*/ DWORD MediaCharacteristics;
/*570*/ }DiskInfo;
/*572*/ struct{
/*573*/ LARGE_INTEGER Cylinders;
/*574*/ STORAGE_MEDIA_TYPE MediaType;
/*575*/ DWORD TracksPerCylinder;
/*576*/ DWORD SectorsPerTrack;
/*577*/ DWORD BytesPerSector;
/*578*/ DWORD NumberMediaSides;
/*579*/ DWORD MediaCharacteristics;
/*580*/ }RemovableDiskInfo;
/*582*/ struct{
/*583*/ STORAGE_MEDIA_TYPE MediaType;
/*584*/ DWORD MediaCharacteristics;
/*585*/ DWORD CurrentBlockSize;
/*586*/ STORAGE_BUS_TYPE BusType;
/*592*/ union{
/*593*/ struct{
/*594*/ BYTE MediumType;
/*595*/ BYTE DensityCode;
/*596*/ }ScsiInformation;
/*597*/ }BusSpecificData;
/*599*/ }TapeInfo;
/*600*/ }DeviceSpecific;
/*601*/ }DEVICE_MEDIA_INFO,*PDEVICE_MEDIA_INFO;
/*603*/ typedef struct _GET_MEDIA_TYPES{
/*604*/ DWORD DeviceType;
/*605*/ DWORD MediaInfoCount;
/*606*/ DEVICE_MEDIA_INFO MediaInfo[1];
/*607*/ }GET_MEDIA_TYPES,*PGET_MEDIA_TYPES;
/*622*/ typedef struct _STORAGE_PREDICT_FAILURE
/*623*/ {
/*624*/ DWORD PredictFailure;
/*625*/ BYTE VendorSpecific[512];
/*626*/ }STORAGE_PREDICT_FAILURE,*PSTORAGE_PREDICT_FAILURE;
/*654*/ typedef enum _STORAGE_QUERY_TYPE{
/*655*/ PropertyStandardQuery=0,
/*656*/ PropertyExistsQuery,
/*657*/ PropertyMaskQuery,
/*658*/ PropertyQueryMaxDefined
/*659*/ }STORAGE_QUERY_TYPE,*PSTORAGE_QUERY_TYPE;
/*665*/ typedef enum _STORAGE_PROPERTY_ID{
/*666*/ StorageDeviceProperty=0,
/*667*/ StorageAdapterProperty,
/*668*/ StorageDeviceIdProperty,
/*669*/ StorageDeviceUniqueIdProperty,
/*670*/ StorageDeviceWriteCacheProperty,
/*671*/ StorageMiniportProperty,
/*672*/ StorageAccessAlignmentProperty
/*673*/ }STORAGE_PROPERTY_ID,*PSTORAGE_PROPERTY_ID;
/*680*/ typedef struct _STORAGE_PROPERTY_QUERY{
/*686*/ STORAGE_PROPERTY_ID PropertyId;
/*692*/ STORAGE_QUERY_TYPE QueryType;
/*698*/ BYTE AdditionalParameters[1];
/*700*/ }STORAGE_PROPERTY_QUERY,*PSTORAGE_PROPERTY_QUERY;
/*707*/ typedef typ typ struct _STORAGE_DESCRIPTOR_HEADER{
/*709*/ DWORD Version;
/*711*/ DWORD Size;
/*713*/ }STORAGE_DESCRIPTOR_HEADER,*PSTORAGE_DESCRIPTOR_HEADER;
/*723*/ typedef typ typ struct _STORAGE_DEVICE_DESCRIPTOR{
/*729*/ DWORD Version;
/*736*/ DWORD Size;
/*742*/ BYTE DeviceType;
/*748*/ BYTE DeviceTypeModifier;
/*755*/ BOOLEAN RemovableMedia;
/*763*/ BOOLEAN CommandQueueing;
/*770*/ DWORD VendorIdOffset;
/*777*/ DWORD ProductIdOffset;
/*785*/ DWORD ProductRevisionOffset;
/*792*/ DWORD SerialNumberOffset;
/*800*/ STORAGE_BUS_TYPE BusType;
/*807*/ DWORD RawPropertiesLength;
/*813*/ BYTE RawDeviceProperties[1];
/*815*/ }STORAGE_DEVICE_DESCRIPTOR,*PSTORAGE_DEVICE_DESCRIPTOR;
/*826*/ typedef typ typ struct _STORAGE_ADAPTER_DESCRIPTOR{
/*828*/ DWORD Version;
/*830*/ DWORD Size;
/*832*/ DWORD MaximumTransferLength;
/*834*/ DWORD MaximumPhysicalPages;
/*836*/ DWORD AlignmentMask;
/*838*/ BOOLEAN AdapterUsesPio;
/*840*/ BOOLEAN AdapterScansDown;
/*842*/ BOOLEAN CommandQueueing;
/*844*/ BOOLEAN AcceleratedTransfer;
/*849*/ BYTE BusType;
/*852*/ WORD BusMajorVersion;
/*854*/ WORD BusMinorVersion;
/*856*/ }STORAGE_ADAPTER_DESCRIPTOR,*PSTORAGE_ADAPTER_DESCRIPTOR;
/*858*/ typedef typ typ struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR{
/*864*/ DWORD Version;
/*871*/ DWORD Size;
/*877*/ DWORD BytesPerCacheLine;
/*883*/ DWORD BytesOffsetForCacheAlignment;
/*889*/ DWORD BytesPerLogicalSector;
/*895*/ DWORD BytesPerPhysicalSector;
/*901*/ DWORD BytesOffsetForSectorAlignment;
/*903*/ }STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR,*PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
/*907*/ typedef enum _STORAGE_PORT_CODE_SET{
/*908*/ StoragePortCodeSetReserved=0,
/*909*/ StoragePortCodeSetStorport=1,
/*910*/ StoragePortCodeSetSCSIport=2
/*911*/ }STORAGE_PORT_CODE_SET,*PSTORAGE_PORT_CODE_SET;
/*913*/ typedef struct _STORAGE_MINIPORT_DESCRIPTOR{
/*915*/ DWORD Version;
/*917*/ DWORD Size;
/*919*/ STORAGE_PORT_CODE_SET Portdriver;
/*921*/ BOOLEAN LUNResetSupported;
/*923*/ BOOLEAN TargetResetSupported;
/*926*/ }STORAGE_MINIPORT_DESCRIPTOR,*PSTORAGE_MINIPORT_DESCRIPTOR;
/*934*/ typedef enum _STORAGE_IDENTIFIER_CODE_SET{
/*935*/ StorageIdCodeSetReserved=0,
/*936*/ StorageIdCodeSetBinary=1,
/*937*/ StorageIdCodeSetAscii=2,
/*938*/ StorageIdCodeSetUtf8=3
/*939*/ }STORAGE_IDENTIFIER_CODE_SET,*PSTORAGE_IDENTIFIER_CODE_SET;
/*941*/ typedef enum _STORAGE_IDENTIFIER_TYPE{
/*942*/ StorageIdTypeVendorSpecific=0,
/*943*/ StorageIdTypeVendorId=1,
/*944*/ StorageIdTypeEUI64=2,
/*945*/ StorageIdTypeFCPHName=3,
/*946*/ StorageIdTypePortRelative=4,
/*947*/ StorageIdTypeTargetPortGroup=5,
/*948*/ StorageIdTypeLogicalUnitGroup=6,
/*949*/ StorageIdTypeMD5LogicalUnitIdentifier=7,
/*950*/ StorageIdTypeScsiNameString=8
/*951*/ }STORAGE_IDENTIFIER_TYPE,*PSTORAGE_IDENTIFIER_TYPE;
/*957*/ typedef enum _STORAGE_ID_NAA_FORMAT{
/*958*/ StorageIdNAAFormatIEEEExtended=2,
/*959*/ StorageIdNAAFormatIEEERegistered=3,
/*960*/ StorageIdNAAFormatIEEEERegisteredExtended=5
/*961*/ }STORAGE_ID_NAA_FORMAT,*PSTORAGE_ID_NAA_FORMAT;
/*963*/ typedef enum _STORAGE_ASSOCIATION_TYPE{
/*964*/ StorageIdAssocDevice=0,
/*965*/ StorageIdAssocPort=1,
/*966*/ StorageIdAssocTarget=2
/*967*/ }STORAGE_ASSOCIATION_TYPE,*PSTORAGE_ASSOCIATION_TYPE;
/*969*/ typedef struct _STORAGE_IDENTIFIER{
/*970*/ STORAGE_IDENTIFIER_CODE_SET CodeSet;
/*971*/ STORAGE_IDENTIFIER_TYPE Type;
/*972*/ WORD IdentifierSize;
/*973*/ WORD NextOffset;
/*980*/ STORAGE_ASSOCIATION_TYPE Association;
/*986*/ BYTE Identifier[1];
/*987*/ }STORAGE_IDENTIFIER,*PSTORAGE_IDENTIFIER;
/*989*/ typedef typ typ struct _STORAGE_DEVICE_ID_DESCRIPTOR{
/*991*/ DWORD Version;
/*993*/ DWORD Size;
/*999*/ DWORD NumberOfIdentifiers;
/*1007*/ BYTE Identifiers[1];
/*1008*/ }STORAGE_DEVICE_ID_DESCRIPTOR,*PSTORAGE_DEVICE_ID_DESCRIPTOR;
/*1021*/ typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT{
/*1027*/ DWORD MaximumRequestsPerPeriod;
/*1033*/ DWORD MinimumPeriod;
/*1041*/ DWORDLONG MaximumRequestSize;
/*1048*/ DWORD EstimatedTimePerRequest;
/*1057*/ DWORD NumOutStandingRequests;
/*1064*/ DWORDLONG RequestSize;
/*1066*/ }STORAGE_GET_BC_PROPERTIES_OUTPUT,*PSTORAGE_GET_BC_PROPERTIES_OUTPUT;
/*1085*/ typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT{
/*1090*/ DWORD Version;
/*1096*/ DWORD RequestsPerPeriod;
/*1102*/ DWORD Period;
/*1108*/ BOOLEAN RetryFailures;
/*1114*/ BOOLEAN Discardable;
/*1119*/ BOOLEAN Reserved1[2];
/*1125*/ DWORD AccessType;
/*1131*/ DWORD AccessMode;
/*1133*/ }STORAGE_ALLOCATE_BC_STREAM_INPUT,*PSTORAGE_ALLOCATE_BC_STREAM_INPUT;
/*1135*/ typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT{
/*1141*/ DWORDLONG RequestSize;
/*1148*/ DWORD NumOutStandingRequests;
/*1150*/ }STORAGE_ALLOCATE_BC_STREAM_OUTPUT,*PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
/*1174*/ typedef struct _STORAGE_PRIORITY_HINT_SUPPORT{
/*1175*/ DWORD SupportFlags;
/*1176*/ }STORAGE_PRIORITY_HINT_SUPPORT,*PSTORAGE_PRIORITY_HINT_SUPPORT;
/*1209*/ typedef typ typ struct _STORAGE_READ_CAPACITY{
/*1214*/ DWORD Version;
/*1219*/ DWORD Size;
/*1225*/ DWORD BlockLength;
/*1232*/ LARGE_INTEGER NumberOfBlocks;
/*1238*/ LARGE_INTEGER DiskLength;
/*1240*/ }STORAGE_READ_CAPACITY,*PSTORAGE_READ_CAPACITY;
/*1251*/ typedef enum _WRITE_CACHE_TYPE{
/*1252*/ WriteCacheTypeUnknown,
/*1253*/ WriteCacheTypeNone,
/*1254*/ WriteCacheTypeWriteBack,
/*1255*/ WriteCacheTypeWriteThrough
/*1256*/ }WRITE_CACHE_TYPE;
/*1258*/ typedef enum _WRITE_CACHE_ENABLE{
/*1259*/ WriteCacheEnableUnknown,
/*1260*/ WriteCacheDisabled,
/*1261*/ WriteCacheEnabled
/*1262*/ }WRITE_CACHE_ENABLE;
/*1264*/ typedef enum _WRITE_CACHE_CHANGE{
/*1265*/ WriteCacheChangeUnknown,
/*1266*/ WriteCacheNotChangeable,
/*1267*/ WriteCacheChangeable
/*1268*/ }WRITE_CACHE_CHANGE;
/*1270*/ typedef enum _WRITE_THROUGH{
/*1271*/ WriteThroughUnknown,
/*1272*/ WriteThroughNotSupported,
/*1273*/ WriteThroughSupported
/*1274*/ }WRITE_THROUGH;
/*1276*/ typedef typ typ struct _STORAGE_WRITE_CACHE_PROPERTY{
/*1282*/ DWORD Version;
/*1288*/ DWORD Size;
/*1293*/ WRITE_CACHE_TYPE WriteCacheType;
/*1298*/ WRITE_CACHE_ENABLE WriteCacheEnabled;
/*1303*/ WRITE_CACHE_CHANGE WriteCacheChangeable;
/*1308*/ WRITE_THROUGH WriteThroughSupported;
/*1313*/ BOOLEAN FlushCacheSupported;
/*1318*/ BOOLEAN UserDefinedPowerProtection;
/*1323*/ BOOLEAN NVCacheEnabled;
/*1325*/ }STORAGE_WRITE_CACHE_PROPERTY,*PSTORAGE_WRITE_CACHE_PROPERTY;
/*1655*/ typedef enum _MEDIA_TYPE{
/*1656*/ Unknown,
/*1657*/ F5_1Pt2_512,
/*1658*/ F3_1Pt44_512,
/*1659*/ F3_2Pt88_512,
/*1660*/ F3_20Pt8_512,
/*1661*/ F3_720_512,
/*1662*/ F5_360_512,
/*1663*/ F5_320_512,
/*1664*/ F5_320_1024,
/*1665*/ F5_180_512,
/*1666*/ F5_160_512,
/*1667*/ RemovableMedia,
/*1668*/ FixedMedia,
/*1669*/ F3_120M_512,
/*1670*/ F3_640_512,
/*1671*/ F5_640_512,
/*1672*/ F5_720_512,
/*1673*/ F3_1Pt2_512,
/*1674*/ F3_1Pt23_1024,
/*1675*/ F5_1Pt23_1024,
/*1676*/ F3_128Mb_512,
/*1677*/ F3_230Mb_512,
/*1678*/ F8_256_128,
/*1679*/ F3_200Mb_512,
/*1680*/ F3_240M_512,
/*1681*/ F3_32M_512
/*1682*/ }MEDIA_TYPE,*PMEDIA_TYPE;
/*1689*/ typedef struct _FORMAT_PARAMETERS{
/*1690*/ MEDIA_TYPE MediaType;
/*1691*/ DWORD StartCylinderNumber;
/*1692*/ DWORD EndCylinderNumber;
/*1693*/ DWORD StartHeadNumber;
/*1694*/ DWORD EndHeadNumber;
/*1695*/ }FORMAT_PARAMETERS,*PFORMAT_PARAMETERS;
/*1704*/ typedef WORD BAD_TRACK_NUMBER;
/*1705*/ typedef WORD*PBAD_TRACK_NUMBER;
/*1712*/ typedef struct _FORMAT_EX_PARAMETERS{
/*1713*/ MEDIA_TYPE MediaType;
/*1714*/ DWORD StartCylinderNumber;
/*1715*/ DWORD EndCylinderNumber;
/*1716*/ DWORD StartHeadNumber;
/*1717*/ DWORD EndHeadNumber;
/*1718*/ WORD FormatGapLength;
/*1719*/ WORD SectorsPerTrack;
/*1720*/ WORD SectorNumber[1];
/*1721*/ }FORMAT_EX_PARAMETERS,*PFORMAT_EX_PARAMETERS;
/*1729*/ typedef struct _DISK_GEOMETRY{
/*1730*/ LARGE_INTEGER Cylinders;
/*1731*/ MEDIA_TYPE MediaType;
/*1732*/ DWORD TracksPerCylinder;
/*1733*/ DWORD SectorsPerTrack;
/*1734*/ DWORD BytesPerSector;
/*1735*/ }DISK_GEOMETRY,*PDISK_GEOMETRY;
/*1752*/ typedef struct _PARTITION_INFORMATION{
/*1753*/ LARGE_INTEGER StartingOffset;
/*1754*/ LARGE_INTEGER PartitionLength;
/*1755*/ DWORD HiddenSectors;
/*1756*/ DWORD PartitionNumber;
/*1757*/ BYTE PartitionType;
/*1758*/ BOOLEAN BootIndicator;
/*1759*/ BOOLEAN RecognizedPartition;
/*1760*/ BOOLEAN RewritePartition;
/*1761*/ }PARTITION_INFORMATION,*PPARTITION_INFORMATION;
/*1769*/ typedef struct _SET_PARTITION_INFORMATION{
/*1770*/ BYTE PartitionType;
/*1771*/ }SET_PARTITION_INFORMATION,*PSET_PARTITION_INFORMATION;
/*1778*/ typedef struct _DRIVE_LAYOUT_INFORMATION{
/*1779*/ DWORD PartitionCount;
/*1780*/ DWORD Signature;
/*1781*/ PARTITION_INFORMATION PartitionEntry[1];
/*1782*/ }DRIVE_LAYOUT_INFORMATION,*PDRIVE_LAYOUT_INFORMATION;
/*1789*/ typedef struct _VERIFY_INFORMATION{
/*1790*/ LARGE_INTEGER StartingOffset;
/*1791*/ DWORD Length;
/*1792*/ }VERIFY_INFORMATION,*PVERIFY_INFORMATION;
/*1799*/ typedef struct _REASSIGN_BLOCKS{
/*1800*/ WORD Reserved;
/*1801*/ WORD Count;
/*1802*/ DWORD BlockNumber[1];
/*1803*/ }REASSIGN_BLOCKS,*PREASSIGN_BLOCKS;
/*1811*/ typedef struct _REASSIGN_BLOCKS_EX{
/*1812*/ WORD Reserved;
/*1813*/ WORD Count;
/*1814*/ LARGE_INTEGER BlockNumber[1];
/*1815*/ }REASSIGN_BLOCKS_EX,*PREASSIGN_BLOCKS_EX;
/*2252*/ typedef struct _HISTOGRAM_BUCKET{
/*2253*/ DWORD Reads;
/*2254*/ DWORD Writes;
/*2255*/ }HISTOGRAM_BUCKET,*PHISTOGRAM_BUCKET;
/*2259*/ typedef struct _DISK_HISTOGRAM{
/*2260*/ LARGE_INTEGER DiskSize;
/*2261*/ LARGE_INTEGER Start;
/*2262*/ LARGE_INTEGER End;
/*2263*/ LARGE_INTEGER Average;
/*2264*/ LARGE_INTEGER AverageRead;
/*2265*/ LARGE_INTEGER AverageWrite;
/*2266*/ DWORD Granularity;
/*2267*/ DWORD Size;
/*2268*/ DWORD ReadCount;
/*2269*/ DWORD WriteCount;
/*2270*/ PHISTOGRAM_BUCKET Histogram;
/*2271*/ }DISK_HISTOGRAM,*PDISK_HISTOGRAM;
/*2295*/ typedef struct _DISK_PERFORMANCE{
/*2296*/ LARGE_INTEGER BytesRead;
/*2297*/ LARGE_INTEGER BytesWritten;
/*2298*/ LARGE_INTEGER ReadTime;
/*2299*/ LARGE_INTEGER WriteTime;
/*2300*/ LARGE_INTEGER IdleTime;
/*2301*/ DWORD ReadCount;
/*2302*/ DWORD WriteCount;
/*2303*/ DWORD QueueDepth;
/*2304*/ DWORD SplitCount;
/*2305*/ LARGE_INTEGER QueryTime;
/*2306*/ DWORD StorageDeviceNumber;
/*2307*/ WCHAR StorageManagerName[8];
/*2308*/ }DISK_PERFORMANCE,*PDISK_PERFORMANCE;
/*2316*/ typedef struct _DISK_RECORD{
/*2317*/ LARGE_INTEGER ByteOffset;
/*2318*/ LARGE_INTEGER StartTime;
/*2319*/ LARGE_INTEGER EndTime;
/*2320*/ PVOID VirtualAddress;
/*2321*/ DWORD NumberOfBytes;
/*2322*/ BYTE DeviceNumber;
/*2323*/ BOOLEAN ReadRequest;
/*2324*/ }DISK_RECORD,*PDISK_RECORD;
/*2331*/ typedef struct _DISK_LOGGING{
/*2332*/ BYTE Function;
/*2333*/ PVOID BufferAddress;
/*2334*/ DWORD BufferSize;
/*2335*/ }DISK_LOGGING,*PDISK_LOGGING;
/*2373*/ typedef enum _BIN_TYPES{
/*2374*/ RequestSize,
/*2375*/ RequestLocation
/*2376*/ }BIN_TYPES;
/*2382*/ typedef struct _BIN_RANGE{
/*2383*/ LARGE_INTEGER StartValue;
/*2384*/ LARGE_INTEGER Length;
/*2385*/ }BIN_RANGE,*PBIN_RANGE;
/*2391*/ typedef struct _PERF_BIN{
/*2392*/ DWORD NumberOfBins;
/*2393*/ DWORD TypeOfBin;
/*2394*/ BIN_RANGE BinsRanges[1];
/*2395*/ }PERF_BIN,*PPERF_BIN;
/*2401*/ typedef struct _BIN_COUNT{
/*2402*/ BIN_RANGE BinRange;
/*2403*/ DWORD BinCount;
/*2404*/ }BIN_COUNT,*PBIN_COUNT;
/*2410*/ typedef struct _BIN_RESULTS{
/*2411*/ DWORD NumberOfBins;
/*2412*/ BIN_COUNT BinCounts[1];
/*2413*/ }BIN_RESULTS,*PBIN_RESULTS;
/*2600*/ typedef enum _ELEMENT_TYPE{
/*2601*/ AllElements,
/*2602*/ ChangerTransport,
/*2603*/ ChangerSlot,
/*2604*/ ChangerIEPort,
/*2605*/ ChangerDrive,
/*2606*/ ChangerDoor,
/*2607*/ ChangerKeypad,
/*2608*/ ChangerMaxElement
/*2609*/ }ELEMENT_TYPE,*PELEMENT_TYPE;
/*2611*/ typedef struct _CHANGER_ELEMENT{
/*2612*/ ELEMENT_TYPE ElementType;
/*2613*/ DWORD ElementAddress;
/*2614*/ }CHANGER_ELEMENT,*PCHANGER_ELEMENT;
/*2616*/ typedef struct _CHANGER_ELEMENT_LIST{
/*2617*/ CHANGER_ELEMENT Element;
/*2618*/ DWORD NumberOfElements;
/*2619*/ }CHANGER_ELEMENT_LIST,*PCHANGER_ELEMENT_LIST;
/*2710*/ typedef struct _GET_CHANGER_PARAMETERS{
/*2716*/ DWORD Size;
/*2722*/ WORD NumberTransportElements;
/*2723*/ WORD NumberStorageElements;
/*2724*/ WORD NumberCleanerSlots;
/*2725*/ WORD NumberIEElements;
/*2726*/ WORD NumberDataTransferElements;
/*2732*/ WORD NumberOfDoors;
/*2739*/ WORD FirstSlotNumber;
/*2740*/ WORD FirstDriveNumber;
/*2741*/ WORD FirstTransportNumber;
/*2742*/ WORD FirstIEPortNumber;
/*2743*/ WORD FirstCleanerSlotAddress;
/*2749*/ WORD MagazineSize;
/*2756*/ DWORD DriveCleanTimeout;
/*2762*/ DWORD Features0;
/*2763*/ DWORD Features1;
/*2770*/ BYTE MoveFromTransport;
/*2771*/ BYTE MoveFromSlot;
/*2772*/ BYTE MoveFromIePort;
/*2773*/ BYTE MoveFromDrive;
/*2780*/ BYTE ExchangeFromTransport;
/*2781*/ BYTE ExchangeFromSlot;
/*2782*/ BYTE ExchangeFromIePort;
/*2783*/ BYTE ExchangeFromDrive;
/*2790*/ BYTE LockUnlockCapabilities;
/*2797*/ BYTE PositionCapabilities;
/*2803*/ BYTE Reserved1[2];
/*2804*/ DWORD Reserved2[2];
/*2806*/ }GET_CHANGER_PARAMETERS,*PGET_CHANGER_PARAMETERS;
/*2813*/ typedef struct _CHANGER_PRODUCT_DATA{
/*2819*/ BYTE VendorId[8];
/*2825*/ BYTE ProductId[16];
/*2831*/ BYTE Revision[4];
/*2838*/ BYTE SerialNumber[32];
/*2844*/ BYTE DeviceType;
/*2846*/ }CHANGER_PRODUCT_DATA,*PCHANGER_PRODUCT_DATA;
/*2858*/ typedef struct _CHANGER_SET_ACCESS{
/*2864*/ CHANGER_ELEMENT Element;
/*2870*/ DWORD Control;
/*2871*/ }CHANGER_SET_ACCESS,*PCHANGER_SET_ACCESS;
/*2882*/ typedef struct _CHANGER_READ_ELEMENT_STATUS{
/*2888*/ CHANGER_ELEMENT_LIST ElementList;
/*2894*/ BOOLEAN VolumeTagInfo;
/*2895*/ }CHANGER_READ_ELEMENT_STATUS,*PCHANGER_READ_ELEMENT_STATUS;
/*2901*/ typedef struct _CHANGER_ELEMENT_STATUS{
/*2907*/ CHANGER_ELEMENT Element;
/*2915*/ CHANGER_ELEMENT SrcElementAddress;
/*2921*/ DWORD Flags;
/*2927*/ DWORD ExceptionCode;
/*2934*/ BYTE TargetId;
/*2941*/ BYTE Lun;
/*2942*/ WORD Reserved;
/*2949*/ BYTE PrimaryVolumeID[36];
/*2957*/ BYTE AlternateVolumeID[36];
/*2959*/ }CHANGER_ELEMENT_STATUS,*PCHANGER_ELEMENT_STATUS;
/*2967*/ typedef struct _CHANGER_ELEMENT_STATUS_EX{
/*2973*/ CHANGER_ELEMENT Element;
/*2981*/ CHANGER_ELEMENT SrcElementAddress;
/*2987*/ DWORD Flags;
/*2993*/ DWORD ExceptionCode;
/*3000*/ BYTE TargetId;
/*3007*/ BYTE Lun;
/*3008*/ WORD Reserved;
/*3015*/ BYTE PrimaryVolumeID[36];
/*3023*/ BYTE AlternateVolumeID[36];
/*3028*/ BYTE VendorIdentification[8];
/*3033*/ BYTE ProductIdentification[16];
/*3038*/ BYTE SerialNumber[32];
/*3040*/ }CHANGER_ELEMENT_STATUS_EX,*PCHANGER_ELEMENT_STATUS_EX;
/*3081*/ typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS{
/*3087*/ CHANGER_ELEMENT_LIST ElementList;
/*3094*/ BOOLEAN BarCodeScan;
/*3095*/ }CHANGER_INITIALIZE_ELEMENT_STATUS,*PCHANGER_INITIALIZE_ELEMENT_STATUS;
/*3102*/ typedef struct _CHANGER_SET_POSITION{
/*3109*/ CHANGER_ELEMENT Transport;
/*3115*/ CHANGER_ELEMENT Destination;
/*3121*/ BOOLEAN Flip;
/*3122*/ }CHANGER_SET_POSITION,*PCHANGER_SET_POSITION;
/*3129*/ typedef struct _CHANGER_EXCHANGE_MEDIUM{
/*3135*/ CHANGER_ELEMENT Transport;
/*3141*/ CHANGER_ELEMENT Source;
/*3147*/ CHANGER_ELEMENT Destination1;
/*3153*/ CHANGER_ELEMENT Destination2;
/*3159*/ BOOLEAN Flip1;
/*3160*/ BOOLEAN Flip2;
/*3161*/ }CHANGER_EXCHANGE_MEDIUM,*PCHANGER_EXCHANGE_MEDIUM;
/*3168*/ typedef struct _CHANGER_MOVE_MEDIUM{
/*3174*/ CHANGER_ELEMENT Transport;
/*3180*/ CHANGER_ELEMENT Source;
/*3186*/ CHANGER_ELEMENT Destination;
/*3192*/ BOOLEAN Flip;
/*3193*/ }CHANGER_MOVE_MEDIUM,*PCHANGER_MOVE_MEDIUM;
/*3205*/ typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION{
/*3211*/ CHANGER_ELEMENT StartingElement;
/*3217*/ DWORD ActionCode;
/*3223*/ BYTE VolumeIDTemplate[40];
/*3224*/ }CHANGER_SEND_VOLUME_TAG_INFORMATION,*PCHANGER_SEND_VOLUME_TAG_INFORMATION;
/*3231*/ typedef struct _READ_ELEMENT_ADDRESS_INFO{
/*3237*/ DWORD NumberOfElements;
/*3244*/ CHANGER_ELEMENT_STATUS ElementStatus[1];
/*3245*/ }READ_ELEMENT_ADDRESS_INFO,*PREAD_ELEMENT_ADDRESS_INFO;
/*3272*/ typedef enum _CHANGER_DEVICE_PROBLEM_TYPE{
/*3273*/ DeviceProblemNone,
/*3274*/ DeviceProblemHardware,
/*3275*/ DeviceProblemCHMError,
/*3276*/ DeviceProblemDoorOpen,
/*3277*/ DeviceProblemCalibrationError,
/*3278*/ DeviceProblemTargetFailure,
/*3279*/ DeviceProblemCHMMoveError,
/*3280*/ DeviceProblemCHMZeroError,
/*3281*/ DeviceProblemCartridgeInsertError,
/*3282*/ DeviceProblemPositionError,
/*3283*/ DeviceProblemSensorError,
/*3284*/ DeviceProblemCartridgeEjectError,
/*3285*/ DeviceProblemGripperError,
/*3286*/ DeviceProblemDriveError
/*3287*/ }CHANGER_DEVICE_PROBLEM_TYPE,*PCHANGER_DEVICE_PROBLEM_TYPE;
/*3511*/ typedef struct _PATHNAME_BUFFER{
/*3513*/ DWORD PathNameLength;
/*3514*/ WCHAR Name[1];
/*3516*/ }PATHNAME_BUFFER,*PPATHNAME_BUFFER;
/*3522*/ typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER{
/*3524*/ BYTE First0x24BytesOfBootSector[0x24];
/*3526*/ }FSCTL_QUERY_FAT_BPB_BUFFER,*PFSCTL_QUERY_FAT_BPB_BUFFER;
/*3918*/ typedef struct _FILE_PREFETCH{
/*3919*/ DWORD Type;
/*3920*/ DWORD Count;
/*3921*/ DWORDLONG Prefetch[1];
/*3922*/ }FILE_PREFETCH,*PFILE_PREFETCH;
/*3924*/ typedef struct _FILE_PREFETCH_EX{
/*3925*/ DWORD Type;
/*3926*/ DWORD Count;
/*3927*/ PVOID Context;
/*3928*/ DWORDLONG Prefetch[1];
/*3929*/ }FILE_PREFETCH_EX,*PFILE_PREFETCH_EX;
/*3942*/ typedef struct _VOLUME_COMPRESSION_STATE{
/*3943*/ BOOLEAN CompressNewFiles;
/*3944*/ }VOLUME_COMPRESSION_STATE,*PVOLUME_COMPRESSION_STATE;
/*3952*/ typedef struct _FILESYSTEM_STATISTICS{
/*3954*/ WORD FileSystemType;
/*3955*/ WORD Version;
/*3957*/ DWORD SizeOfCompleteStructure;
/*3959*/ DWORD UserFileReads;
/*3960*/ DWORD UserFileReadBytes;
/*3961*/ DWORD UserDiskReads;
/*3962*/ DWORD UserFileWrites;
/*3963*/ DWORD UserFileWriteBytes;
/*3964*/ DWORD UserDiskWrites;
/*3966*/ DWORD MetaDataReads;
/*3967*/ DWORD MetaDataReadBytes;
/*3968*/ DWORD MetaDataDiskReads;
/*3969*/ DWORD MetaDataWrites;
/*3970*/ DWORD MetaDataWriteBytes;
/*3971*/ DWORD MetaDataDiskWrites;
/*3977*/ }FILESYSTEM_STATISTICS,*PFILESYSTEM_STATISTICS;
/*3989*/ typedef struct _FAT_STATISTICS{
/*3990*/ DWORD CreateHits;
/*3991*/ DWORD SuccessfulCreates;
/*3992*/ DWORD FailedCreates;
/*3994*/ DWORD NonCachedReads;
/*3995*/ DWORD NonCachedReadBytes;
/*3996*/ DWORD NonCachedWrites;
/*3997*/ DWORD NonCachedWriteBytes;
/*3999*/ DWORD NonCachedDiskReads;
/*4000*/ DWORD NonCachedDiskWrites;
/*4001*/ }FAT_STATISTICS,*PFAT_STATISTICS;
/*4003*/ typedef struct _EXFAT_STATISTICS{
/*4004*/ DWORD CreateHits;
/*4005*/ DWORD SuccessfulCreates;
/*4006*/ DWORD FailedCreates;
/*4008*/ DWORD NonCachedReads;
/*4009*/ DWORD NonCachedReadBytes;
/*4010*/ DWORD NonCachedWrites;
/*4011*/ DWORD NonCachedWriteBytes;
/*4013*/ DWORD NonCachedDiskReads;
/*4014*/ DWORD NonCachedDiskWrites;
/*4015*/ }EXFAT_STATISTICS,*PEXFAT_STATISTICS;
/*4017*/ typedef struct _NTFS_STATISTICS{
/*4019*/ DWORD LogFileFullExceptions;
/*4020*/ DWORD OtherExceptions;
/*4026*/ DWORD MftReads;
/*4027*/ DWORD MftReadBytes;
/*4028*/ DWORD MftWrites;
/*4029*/ DWORD MftWriteBytes;
/*4030*/ struct{
/*4031*/ WORD Write;
/*4032*/ WORD Create;
/*4033*/ WORD SetInfo;
/*4034*/ WORD Flush;
/*4035*/ }MftWritesUserLevel;
/*4037*/ WORD MftWritesFlushForLogFileFull;
/*4038*/ WORD MftWritesLazyWriter;
/*4039*/ WORD MftWritesUserRequest;
/*4041*/ DWORD Mft2Writes;
/*4042*/ DWORD Mft2WriteBytes;
/*4043*/ struct{
/*4044*/ WORD Write;
/*4045*/ WORD Create;
/*4046*/ WORD SetInfo;
/*4047*/ WORD Flush;
/*4048*/ }Mft2WritesUserLevel;
/*4050*/ WORD Mft2WritesFlushForLogFileFull;
/*4051*/ WORD Mft2WritesLazyWriter;
/*4052*/ WORD Mft2WritesUserRequest;
/*4054*/ DWORD RootIndexReads;
/*4055*/ DWORD RootIndexReadBytes;
/*4056*/ DWORD RootIndexWrites;
/*4057*/ DWORD RootIndexWriteBytes;
/*4059*/ DWORD BitmapReads;
/*4060*/ DWORD BitmapReadBytes;
/*4061*/ DWORD BitmapWrites;
/*4062*/ DWORD BitmapWriteBytes;
/*4064*/ WORD BitmapWritesFlushForLogFileFull;
/*4065*/ WORD BitmapWritesLazyWriter;
/*4066*/ WORD BitmapWritesUserRequest;
/*4068*/ struct{
/*4069*/ WORD Write;
/*4070*/ WORD Create;
/*4071*/ WORD SetInfo;
/*4072*/ }BitmapWritesUserLevel;
/*4074*/ DWORD MftBitmapReads;
/*4075*/ DWORD MftBitmapReadBytes;
/*4076*/ DWORD MftBitmapWrites;
/*4077*/ DWORD MftBitmapWriteBytes;
/*4079*/ WORD MftBitmapWritesFlushForLogFileFull;
/*4080*/ WORD MftBitmapWritesLazyWriter;
/*4081*/ WORD MftBitmapWritesUserRequest;
/*4083*/ struct{
/*4084*/ WORD Write;
/*4085*/ WORD Create;
/*4086*/ WORD SetInfo;
/*4087*/ WORD Flush;
/*4088*/ }MftBitmapWritesUserLevel;
/*4090*/ DWORD UserIndexReads;
/*4091*/ DWORD UserIndexReadBytes;
/*4092*/ DWORD UserIndexWrites;
/*4093*/ DWORD UserIndexWriteBytes;
/*4099*/ DWORD LogFileReads;
/*4100*/ DWORD LogFileReadBytes;
/*4101*/ DWORD LogFileWrites;
/*4102*/ DWORD LogFileWriteBytes;
/*4104*/ struct{
/*4105*/ DWORD Calls;
/*4106*/ DWORD Clusters;
/*4107*/ DWORD Hints;
/*4109*/ DWORD RunsReturned;
/*4111*/ DWORD HintsHonored;
/*4112*/ DWORD HintsClusters;
/*4113*/ DWORD Cache;
/*4114*/ DWORD CacheClusters;
/*4115*/ DWORD CacheMiss;
/*4116*/ DWORD CacheMissClusters;
/*4117*/ }Allocate;
/*4119*/ }NTFS_STATISTICS,*PNTFS_STATISTICS;
/*5389*/ typedef struct _DISK_EXTENT{
/*5395*/ DWORD DiskNumber;
/*5402*/ LARGE_INTEGER StartingOffset;
/*5403*/ LARGE_INTEGER ExtentLength;
/*5405*/ }DISK_EXTENT,*PDISK_EXTENT;
/*5407*/ typedef struct _VOLUME_DISK_EXTENTS{
/*5413*/ DWORD NumberOfDiskExtents;
/*5414*/ DISK_EXTENT Extents[1];
/*5416*/ }VOLUME_DISK_EXTENTS,*PVOLUME_DISK_EXTENTS;
/*31*/ typedef DWORD ULONG;
/*32*/ typedef WORD UWORD;
/*33*/ typedef BYTE UCHAR;
/*254*/ typedef struct _SCARD_IO_REQUEST{
/*255*/ DWORD dwProtocol;
/*256*/ DWORD cbPciLength;
/*257*/ }SCARD_IO_REQUEST,*PSCARD_IO_REQUEST,*LPSCARD_IO_REQUEST;
/*258*/ typedef const SCARD_IO_REQUEST*LPCSCARD_IO_REQUEST;
/*265*/ typedef struct{
/*266*/ BYTE
/*267*/ bCla,
/*268*/ bIns,
/*269*/ bP1,
/*270*/ bP2,
/*271*/ bP3;
/*272*/ }SCARD_T0_COMMAND,*LPSCARD_T0_COMMAND;
/*274*/ typedef struct{
/*275*/ SCARD_IO_REQUEST ioRequest;
/*276*/ BYTE
/*277*/ bSw1,
/*278*/ bSw2;
/*279*/ union
/*280*/ {
/*281*/ SCARD_T0_COMMAND CmdBytes;
/*282*/ BYTE rgbHeader[5];
/*283*/ }u;
/*284*/ }SCARD_T0_REQUEST;
/*286*/ typedef SCARD_T0_REQUEST*PSCARD_T0_REQUEST,*LPSCARD_T0_REQUEST;
/*293*/ typedef struct{
/*294*/ SCARD_IO_REQUEST ioRequest;
/*295*/ }SCARD_T1_REQUEST;
/*296*/ typedef SCARD_T1_REQUEST*PSCARD_T1_REQUEST,*LPSCARD_T1_REQUEST;
/*"winscard.h"43*/ typedef const BYTE*LPCBYTE;
/*47*/ typedef const void*LPCVOID;
/*62*/ typ extern const SCARD_IO_REQUEST
/*63*/ g_rgSCardT0Pci,
/*64*/ g_rgSCardT1Pci,
/*65*/ g_rgSCardRawPci;
/*80*/ typedef ULONG_PTR SCARDCONTEXT;
/*81*/ typedef SCARDCONTEXT*PSCARDCONTEXT,*LPSCARDCONTEXT;
/*83*/ typedef ULONG_PTR SCARDHANDLE;
/*84*/ typedef SCARDHANDLE*PSCARDHANDLE,*LPSCARDHANDLE;
/*102*/ extern LONG typ
/*103*/ SCardEstablishContext(
/*104*/ typ DWORD dwScope,
/*105*/ typ LPCVOID pvReserved1,
/*106*/ typ LPCVOID pvReserved2,
/*107*/ typ LPSCARDCONTEXT phContext);
/*109*/ extern LONG typ
/*110*/ SCardReleaseContext(
/*111*/ typ SCARDCONTEXT hContext);
/*113*/ extern LONG typ
/*114*/ SCardIsValidContext(
/*115*/ typ SCARDCONTEXT hContext);
/*140*/ extern LONG typ
/*141*/ SCardListReaderGroupsA(
/*142*/ typ SCARDCONTEXT hContext,
/*143*/ typ LPSTR mszGroups,
/*144*/ typ typ LPDWORD pcchGroups);
/*145*/ extern LONG typ
/*146*/ SCardListReaderGroupsW(
/*147*/ typ SCARDCONTEXT hContext,
/*148*/ typ LPWSTR mszGroups,
/*149*/ typ typ LPDWORD pcchGroups);
/*156*/ extern LONG typ
/*157*/ SCardListReadersA(
/*158*/ typ SCARDCONTEXT hContext,
/*159*/ typ LPCSTR mszGroups,
/*160*/ typ LPSTR mszReaders,
/*161*/ typ typ LPDWORD pcchReaders);
/*162*/ extern LONG typ
/*163*/ SCardListReadersW(
/*164*/ typ SCARDCONTEXT hContext,
/*165*/ typ LPCWSTR mszGroups,
/*166*/ typ LPWSTR mszReaders,
/*167*/ typ typ LPDWORD pcchReaders);
/*174*/ extern LONG typ
/*175*/ SCardListCardsA(
/*176*/ typ SCARDCONTEXT hContext,
/*177*/ typ LPCBYTE pbAtr,
/*178*/ typ LPCGUID rgquidInterfaces,
/*179*/ typ DWORD cguidInterfaceCount,
/*180*/ typ LPSTR mszCards,
/*181*/ typ typ LPDWORD pcchCards);
/*182*/ extern LONG typ
/*183*/ SCardListCardsW(
/*184*/ typ SCARDCONTEXT hContext,
/*185*/ typ LPCBYTE pbAtr,
/*186*/ typ LPCGUID rgquidInterfaces,
/*187*/ typ DWORD cguidInterfaceCount,
/*188*/ typ LPWSTR mszCards,
/*189*/ typ typ LPDWORD pcchCards);
/*211*/ extern LONG typ
/*212*/ SCardListInterfacesA(
/*213*/ typ SCARDCONTEXT hContext,
/*214*/ typ LPCSTR szCard,
/*215*/ typ LPGUID pguidInterfaces,
/*216*/ typ typ LPDWORD pcguidInterfaces);
/*217*/ extern LONG typ
/*218*/ SCardListInterfacesW(
/*219*/ typ SCARDCONTEXT hContext,
/*220*/ typ LPCWSTR szCard,
/*221*/ typ LPGUID pguidInterfaces,
/*222*/ typ typ LPDWORD pcguidInterfaces);
/*229*/ extern LONG typ
/*230*/ SCardGetProviderIdA(
/*231*/ typ SCARDCONTEXT hContext,
/*232*/ typ LPCSTR szCard,
/*233*/ typ LPGUID pguidProviderId);
/*234*/ extern LONG typ
/*235*/ SCardGetProviderIdW(
/*236*/ typ SCARDCONTEXT hContext,
/*237*/ typ LPCWSTR szCard,
/*238*/ typ LPGUID pguidProviderId);
/*249*/ extern LONG typ
/*250*/ SCardGetCardTypeProviderNameA(
/*251*/ typ SCARDCONTEXT hContext,
/*252*/ typ LPCSTR szCardName,
/*253*/ typ DWORD dwProviderId,
/*254*/ typ LPSTR szProvider,
/*255*/ typ typ LPDWORD pcchProvider);
/*256*/ extern LONG typ
/*257*/ SCardGetCardTypeProviderNameW(
/*258*/ typ SCARDCONTEXT hContext,
/*259*/ typ LPCWSTR szCardName,
/*260*/ typ DWORD dwProviderId,
/*261*/ typ LPWSTR szProvider,
/*262*/ typ typ LPDWORD pcchProvider);
/*277*/ extern LONG typ
/*278*/ SCardIntroduceReaderGroupA(
/*279*/ typ SCARDCONTEXT hContext,
/*280*/ typ LPCSTR szGroupName);
/*281*/ extern LONG typ
/*282*/ SCardIntroduceReaderGroupW(
/*283*/ typ SCARDCONTEXT hContext,
/*284*/ typ LPCWSTR szGroupName);
/*291*/ extern LONG typ
/*292*/ SCardForgetReaderGroupA(
/*293*/ typ SCARDCONTEXT hContext,
/*294*/ typ LPCSTR szGroupName);
/*295*/ extern LONG typ
/*296*/ SCardForgetReaderGroupW(
/*297*/ typ SCARDCONTEXT hContext,
/*298*/ typ LPCWSTR szGroupName);
/*305*/ extern LONG typ
/*306*/ SCardIntroduceReaderA(
/*307*/ typ SCARDCONTEXT hContext,
/*308*/ typ LPCSTR szReaderName,
/*309*/ typ LPCSTR szDeviceName);
/*310*/ extern LONG typ
/*311*/ SCardIntroduceReaderW(
/*312*/ typ SCARDCONTEXT hContext,
/*313*/ typ LPCWSTR szReaderName,
/*314*/ typ LPCWSTR szDeviceName);
/*321*/ extern LONG typ
/*322*/ SCardForgetReaderA(
/*323*/ typ SCARDCONTEXT hContext,
/*324*/ typ LPCSTR szReaderName);
/*325*/ extern LONG typ
/*326*/ SCardForgetReaderW(
/*327*/ typ SCARDCONTEXT hContext,
/*328*/ typ LPCWSTR szReaderName);
/*335*/ extern LONG typ
/*336*/ SCardAddReaderToGroupA(
/*337*/ typ SCARDCONTEXT hContext,
/*338*/ typ LPCSTR szReaderName,
/*339*/ typ LPCSTR szGroupName);
/*340*/ extern LONG typ
/*341*/ SCardAddReaderToGroupW(
/*342*/ typ SCARDCONTEXT hContext,
/*343*/ typ LPCWSTR szReaderName,
/*344*/ typ LPCWSTR szGroupName);
/*351*/ extern LONG typ
/*352*/ SCardRemoveReaderFromGroupA(
/*353*/ typ SCARDCONTEXT hContext,
/*354*/ typ LPCSTR szReaderName,
/*355*/ typ LPCSTR szGroupName);
/*356*/ extern LONG typ
/*357*/ SCardRemoveReaderFromGroupW(
/*358*/ typ SCARDCONTEXT hContext,
/*359*/ typ LPCWSTR szReaderName,
/*360*/ typ LPCWSTR szGroupName);
/*367*/ extern LONG typ
/*368*/ SCardIntroduceCardTypeA(
/*369*/ typ SCARDCONTEXT hContext,
/*370*/ typ LPCSTR szCardName,
/*371*/ typ LPCGUID pguidPrimaryProvider,
/*372*/ typ LPCGUID rgguidInterfaces,
/*373*/ typ DWORD dwInterfaceCount,
/*374*/ typ LPCBYTE pbAtr,
/*375*/ typ LPCBYTE pbAtrMask,
/*376*/ typ DWORD cbAtrLen);
/*377*/ extern LONG typ
/*378*/ SCardIntroduceCardTypeW(
/*379*/ typ SCARDCONTEXT hContext,
/*380*/ typ LPCWSTR szCardName,
/*381*/ typ LPCGUID pguidPrimaryProvider,
/*382*/ typ LPCGUID rgguidInterfaces,
/*383*/ typ DWORD dwInterfaceCount,
/*384*/ typ LPCBYTE pbAtr,
/*385*/ typ LPCBYTE pbAtrMask,
/*386*/ typ DWORD cbAtrLen);
/*411*/ extern LONG typ
/*412*/ SCardSetCardTypeProviderNameA(
/*413*/ typ SCARDCONTEXT hContext,
/*414*/ typ LPCSTR szCardName,
/*415*/ typ DWORD dwProviderId,
/*416*/ typ LPCSTR szProvider);
/*417*/ extern LONG typ
/*418*/ SCardSetCardTypeProviderNameW(
/*419*/ typ SCARDCONTEXT hContext,
/*420*/ typ LPCWSTR szCardName,
/*421*/ typ DWORD dwProviderId,
/*422*/ typ LPCWSTR szProvider);
/*432*/ extern LONG typ
/*433*/ SCardForgetCardTypeA(
/*434*/ typ SCARDCONTEXT hContext,
/*435*/ typ LPCSTR szCardName);
/*436*/ extern LONG typ
/*437*/ SCardForgetCardTypeW(
/*438*/ typ SCARDCONTEXT hContext,
/*439*/ typ LPCWSTR szCardName);
/*456*/ extern LONG typ
/*457*/ SCardFreeMemory(
/*458*/ typ SCARDCONTEXT hContext,
/*459*/ typ LPCVOID pvMem);
/*462*/ extern HANDLE typ
/*463*/ SCardAccessStartedEvent(void);
/*465*/ extern void typ
/*466*/ SCardReleaseStartedEvent(void);
/*477*/ typedef struct{
/*478*/ LPCSTR szReader;
/*479*/ LPVOID pvUserData;
/*480*/ DWORD dwCurrentState;
/*481*/ DWORD dwEventState;
/*482*/ DWORD cbAtr;
/*483*/ BYTE rgbAtr[36];
/*484*/ }SCARD_READERSTATEA,*PSCARD_READERSTATEA,*LPSCARD_READERSTATEA;
/*485*/ typedef struct{
/*486*/ LPCWSTR szReader;
/*487*/ LPVOID pvUserData;
/*488*/ DWORD dwCurrentState;
/*489*/ DWORD dwEventState;
/*490*/ DWORD cbAtr;
/*491*/ BYTE rgbAtr[36];
/*492*/ }SCARD_READERSTATEW,*PSCARD_READERSTATEW,*LPSCARD_READERSTATEW;
/*498*/ typedef SCARD_READERSTATEA SCARD_READERSTATE;
/*499*/ typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
/*500*/ typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;
/*573*/ extern LONG typ
/*574*/ SCardLocateCardsA(
/*575*/ typ SCARDCONTEXT hContext,
/*576*/ typ LPCSTR mszCards,
/*577*/ typ typ LPSCARD_READERSTATEA rgReaderStates,
/*578*/ typ DWORD cReaders);
/*579*/ extern LONG typ
/*580*/ SCardLocateCardsW(
/*581*/ typ SCARDCONTEXT hContext,
/*582*/ typ LPCWSTR mszCards,
/*583*/ typ typ LPSCARD_READERSTATEW rgReaderStates,
/*584*/ typ DWORD cReaders);
/*592*/ typedef struct _SCARD_ATRMASK{
/*593*/ DWORD cbAtr;
/*594*/ BYTE rgbAtr[36];
/*595*/ BYTE rgbMask[36];
/*596*/ }SCARD_ATRMASK,*PSCARD_ATRMASK,*LPSCARD_ATRMASK;
/*599*/ extern LONG typ
/*600*/ SCardLocateCardsByATRA(
/*601*/ typ SCARDCONTEXT hContext,
/*602*/ typ LPSCARD_ATRMASK rgAtrMasks,
/*603*/ typ DWORD cAtrs,
/*604*/ typ typ LPSCARD_READERSTATEA rgReaderStates,
/*605*/ typ DWORD cReaders);
/*606*/ extern LONG typ
/*607*/ SCardLocateCardsByATRW(
/*608*/ typ SCARDCONTEXT hContext,
/*609*/ typ LPSCARD_ATRMASK rgAtrMasks,
/*610*/ typ DWORD cAtrs,
/*611*/ typ typ LPSCARD_READERSTATEW rgReaderStates,
/*612*/ typ DWORD cReaders);
/*620*/ extern LONG typ
/*621*/ SCardGetStatusChangeA(
/*622*/ typ SCARDCONTEXT hContext,
/*623*/ typ DWORD dwTimeout,
/*624*/ typ typ LPSCARD_READERSTATEA rgReaderStates,
/*625*/ typ DWORD cReaders);
/*626*/ extern LONG typ
/*627*/ SCardGetStatusChangeW(
/*628*/ typ SCARDCONTEXT hContext,
/*629*/ typ DWORD dwTimeout,
/*630*/ typ typ LPSCARD_READERSTATEW rgReaderStates,
/*631*/ typ DWORD cReaders);
/*638*/ extern LONG typ
/*639*/ SCardCancel(
/*640*/ typ SCARDCONTEXT hContext);
/*664*/ extern LONG typ
/*665*/ SCardConnectA(
/*666*/ typ SCARDCONTEXT hContext,
/*667*/ typ LPCSTR szReader,
/*668*/ typ DWORD dwShareMode,
/*669*/ typ DWORD dwPreferredProtocols,
/*670*/ typ LPSCARDHANDLE phCard,
/*671*/ typ LPDWORD pdwActiveProtocol);
/*672*/ extern LONG typ
/*673*/ SCardConnectW(
/*674*/ typ SCARDCONTEXT hContext,
/*675*/ typ LPCWSTR szReader,
/*676*/ typ DWORD dwShareMode,
/*677*/ typ DWORD dwPreferredProtocols,
/*678*/ typ LPSCARDHANDLE phCard,
/*679*/ typ LPDWORD pdwActiveProtocol);
/*686*/ extern LONG typ
/*687*/ SCardReconnect(
/*688*/ typ SCARDHANDLE hCard,
/*689*/ typ DWORD dwShareMode,
/*690*/ typ DWORD dwPreferredProtocols,
/*691*/ typ DWORD dwInitialization,
/*692*/ typ LPDWORD pdwActiveProtocol);
/*694*/ extern LONG typ
/*695*/ SCardDisconnect(
/*696*/ typ SCARDHANDLE hCard,
/*697*/ typ DWORD dwDisposition);
/*699*/ extern LONG typ
/*700*/ SCardBeginTransaction(
/*701*/ typ SCARDHANDLE hCard);
/*703*/ extern LONG typ
/*704*/ SCardEndTransaction(
/*705*/ typ SCARDHANDLE hCard,
/*706*/ typ DWORD dwDisposition);
/*708*/ extern LONG typ
/*709*/ SCardCancelTransaction(
/*710*/ typ SCARDHANDLE hCard);
/*717*/ extern LONG typ
/*718*/ SCardState(
/*719*/ typ SCARDHANDLE hCard,
/*720*/ typ LPDWORD pdwState,
/*721*/ typ LPDWORD pdwProtocol,
/*722*/ typ LPBYTE pbAtr,
/*723*/ typ typ LPDWORD pcbAtrLen);
/*729*/ extern LONG typ
/*730*/ SCardStatusA(
/*731*/ typ SCARDHANDLE hCard,
/*732*/ typ LPSTR szReaderName,
/*733*/ typ typ LPDWORD pcchReaderLen,
/*734*/ typ LPDWORD pdwState,
/*735*/ typ LPDWORD pdwProtocol,
/*736*/ typ LPBYTE pbAtr,
/*737*/ typ typ LPDWORD pcbAtrLen);
/*738*/ extern LONG typ
/*739*/ SCardStatusW(
/*740*/ typ SCARDHANDLE hCard,
/*741*/ typ LPWSTR szReaderName,
/*742*/ typ typ LPDWORD pcchReaderLen,
/*743*/ typ LPDWORD pdwState,
/*744*/ typ LPDWORD pdwProtocol,
/*745*/ typ LPBYTE pbAtr,
/*746*/ typ typ LPDWORD pcbAtrLen);
/*753*/ extern LONG typ
/*754*/ SCardTransmit(
/*755*/ typ SCARDHANDLE hCard,
/*756*/ typ LPCSCARD_IO_REQUEST pioSendPci,
/*757*/ typ LPCBYTE pbSendBuffer,
/*758*/ typ DWORD cbSendLength,
/*759*/ typ typ LPSCARD_IO_REQUEST pioRecvPci,
/*760*/ typ LPBYTE pbRecvBuffer,
/*761*/ typ typ LPDWORD pcbRecvLength);
/*764*/ extern LONG typ
/*765*/ SCardGetTransmitCount(
/*766*/ typ SCARDHANDLE hCard,
/*767*/ typ LPDWORD pcTransmitCount);
/*780*/ extern LONG typ
/*781*/ SCardControl(
/*782*/ typ SCARDHANDLE hCard,
/*783*/ typ DWORD dwControlCode,
/*784*/ typ LPCVOID lpInBuffer,
/*785*/ typ DWORD nInBufferSize,
/*786*/ typ LPVOID lpOutBuffer,
/*787*/ typ DWORD nOutBufferSize,
/*788*/ typ LPDWORD lpBytesReturned);
/*790*/ extern LONG typ
/*791*/ SCardGetAttrib(
/*792*/ typ SCARDHANDLE hCard,
/*793*/ typ DWORD dwAttrId,
/*794*/ typ LPBYTE pbAttr,
/*795*/ typ typ LPDWORD pcbAttrLen);
/*810*/ extern LONG typ
/*811*/ SCardSetAttrib(
/*812*/ typ SCARDHANDLE hCard,
/*813*/ typ DWORD dwAttrId,
/*814*/ typ LPCBYTE pbAttr,
/*815*/ typ DWORD cbAttrLen);
/*849*/ typedef SCARDHANDLE(typ*LPOCNCONNPROCA)(typ SCARDCONTEXT,typ LPSTR,typ LPSTR,typ PVOID);
/*850*/ typedef SCARDHANDLE(typ*LPOCNCONNPROCW)(typ SCARDCONTEXT,typ LPWSTR,typ LPWSTR,typ PVOID);
/*856*/ typedef BOOL(typ*LPOCNCHKPROC)(typ SCARDCONTEXT,typ SCARDHANDLE,typ PVOID);
/*857*/ typedef void(typ*LPOCNDSCPROC)(typ SCARDCONTEXT,typ SCARDHANDLE,typ PVOID);
/*869*/ typedef struct{
/*870*/ DWORD dwStructSize;
/*871*/ LPSTR lpstrGroupNames;
/*872*/ DWORD nMaxGroupNames;
/*874*/ LPCGUID rgguidInterfaces;
/*875*/ DWORD cguidInterfaces;
/*876*/ LPSTR lpstrCardNames;
/*877*/ DWORD nMaxCardNames;
/*878*/ LPOCNCHKPROC lpfnCheck;
/*879*/ LPOCNCONNPROCA lpfnConnect;
/*880*/ LPOCNDSCPROC lpfnDisconnect;
/*881*/ LPVOID pvUserData;
/*882*/ DWORD dwShareMode;
/*883*/ DWORD dwPreferredProtocols;
/*884*/ }OPENCARD_SEARCH_CRITERIAA,*POPENCARD_SEARCH_CRITERIAA,*LPOPENCARD_SEARCH_CRITERIAA;
/*885*/ typedef struct{
/*886*/ DWORD dwStructSize;
/*887*/ LPWSTR lpstrGroupNames;
/*888*/ DWORD nMaxGroupNames;
/*890*/ LPCGUID rgguidInterfaces;
/*891*/ DWORD cguidInterfaces;
/*892*/ LPWSTR lpstrCardNames;
/*893*/ DWORD nMaxCardNames;
/*894*/ LPOCNCHKPROC lpfnCheck;
/*895*/ LPOCNCONNPROCW lpfnConnect;
/*896*/ LPOCNDSCPROC lpfnDisconnect;
/*897*/ LPVOID pvUserData;
/*898*/ DWORD dwShareMode;
/*899*/ DWORD dwPreferredProtocols;
/*900*/ }OPENCARD_SEARCH_CRITERIAW,*POPENCARD_SEARCH_CRITERIAW,*LPOPENCARD_SEARCH_CRITERIAW;
/*906*/ typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
/*907*/ typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
/*908*/ typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
/*916*/ typedef struct{
/*917*/ DWORD dwStructSize;
/*918*/ SCARDCONTEXT hSCardContext;
/*919*/ HWND hwndOwner;
/*920*/ DWORD dwFlags;
/*921*/ LPCSTR lpstrTitle;
/*922*/ LPCSTR lpstrSearchDesc;
/*923*/ HICON hIcon;
/*924*/ POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
/*925*/ LPOCNCONNPROCA lpfnConnect;
/*926*/ LPVOID pvUserData;
/*927*/ DWORD dwShareMode;
/*928*/ DWORD dwPreferredProtocols;
/*930*/ LPSTR lpstrRdr;
/*931*/ DWORD nMaxRdr;
/*932*/ LPSTR lpstrCard;
/*933*/ DWORD nMaxCard;
/*934*/ DWORD dwActiveProtocol;
/*935*/ SCARDHANDLE hCardHandle;
/*936*/ }OPENCARDNAME_EXA,*POPENCARDNAME_EXA,*LPOPENCARDNAME_EXA;
/*937*/ typedef struct{
/*938*/ DWORD dwStructSize;
/*939*/ SCARDCONTEXT hSCardContext;
/*940*/ HWND hwndOwner;
/*941*/ DWORD dwFlags;
/*942*/ LPCWSTR lpstrTitle;
/*943*/ LPCWSTR lpstrSearchDesc;
/*944*/ HICON hIcon;
/*945*/ POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
/*946*/ LPOCNCONNPROCW lpfnConnect;
/*947*/ LPVOID pvUserData;
/*948*/ DWORD dwShareMode;
/*949*/ DWORD dwPreferredProtocols;
/*951*/ LPWSTR lpstrRdr;
/*952*/ DWORD nMaxRdr;
/*953*/ LPWSTR lpstrCard;
/*954*/ DWORD nMaxCard;
/*955*/ DWORD dwActiveProtocol;
/*956*/ SCARDHANDLE hCardHandle;
/*957*/ }OPENCARDNAME_EXW,*POPENCARDNAME_EXW,*LPOPENCARDNAME_EXW;
/*963*/ typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
/*964*/ typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
/*965*/ typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
/*980*/ extern LONG typ
/*981*/ SCardUIDlgSelectCardA(
/*982*/ LPOPENCARDNAME_EXA);
/*983*/ extern LONG typ
/*984*/ SCardUIDlgSelectCardW(
/*985*/ LPOPENCARDNAME_EXW);
/*998*/ typedef struct{
/*999*/ DWORD dwStructSize;
/*1000*/ HWND hwndOwner;
/*1001*/ SCARDCONTEXT hSCardContext;
/*1002*/ LPSTR lpstrGroupNames;
/*1003*/ DWORD nMaxGroupNames;
/*1004*/ LPSTR lpstrCardNames;
/*1005*/ DWORD nMaxCardNames;
/*1006*/ LPCGUID rgguidInterfaces;
/*1007*/ DWORD cguidInterfaces;
/*1008*/ LPSTR lpstrRdr;
/*1009*/ DWORD nMaxRdr;
/*1010*/ LPSTR lpstrCard;
/*1011*/ DWORD nMaxCard;
/*1012*/ LPCSTR lpstrTitle;
/*1013*/ DWORD dwFlags;
/*1014*/ LPVOID pvUserData;
/*1015*/ DWORD dwShareMode;
/*1016*/ DWORD dwPreferredProtocols;
/*1017*/ DWORD dwActiveProtocol;
/*1018*/ LPOCNCONNPROCA lpfnConnect;
/*1019*/ LPOCNCHKPROC lpfnCheck;
/*1020*/ LPOCNDSCPROC lpfnDisconnect;
/*1021*/ SCARDHANDLE hCardHandle;
/*1022*/ }OPENCARDNAMEA,*POPENCARDNAMEA,*LPOPENCARDNAMEA;
/*1023*/ typedef struct{
/*1024*/ DWORD dwStructSize;
/*1025*/ HWND hwndOwner;
/*1026*/ SCARDCONTEXT hSCardContext;
/*1027*/ LPWSTR lpstrGroupNames;
/*1028*/ DWORD nMaxGroupNames;
/*1029*/ LPWSTR lpstrCardNames;
/*1030*/ DWORD nMaxCardNames;
/*1031*/ LPCGUID rgguidInterfaces;
/*1032*/ DWORD cguidInterfaces;
/*1033*/ LPWSTR lpstrRdr;
/*1034*/ DWORD nMaxRdr;
/*1035*/ LPWSTR lpstrCard;
/*1036*/ DWORD nMaxCard;
/*1037*/ LPCWSTR lpstrTitle;
/*1038*/ DWORD dwFlags;
/*1039*/ LPVOID pvUserData;
/*1040*/ DWORD dwShareMode;
/*1041*/ DWORD dwPreferredProtocols;
/*1042*/ DWORD dwActiveProtocol;
/*1043*/ LPOCNCONNPROCW lpfnConnect;
/*1044*/ LPOCNCHKPROC lpfnCheck;
/*1045*/ LPOCNDSCPROC lpfnDisconnect;
/*1046*/ SCARDHANDLE hCardHandle;
/*1047*/ }OPENCARDNAMEW,*POPENCARDNAMEW,*LPOPENCARDNAMEW;
/*1053*/ typedef OPENCARDNAMEA OPENCARDNAME;
/*1054*/ typedef POPENCARDNAMEA POPENCARDNAME;
/*1055*/ typedef LPOPENCARDNAMEA LPOPENCARDNAME;
/*1066*/ extern LONG typ
/*1067*/ GetOpenCardNameA(
/*1068*/ LPOPENCARDNAMEA);
/*1069*/ extern LONG typ
/*1070*/ GetOpenCardNameW(
/*1071*/ LPOPENCARDNAMEW);
/*1078*/ extern LONG typ
/*1079*/ SCardDlgExtendedError(void);
/*1087*/ extern LONG typ
/*1088*/ SCardReadCacheA(
/*1089*/ typ SCARDCONTEXT hContext,
/*1090*/ typ UUID*CardIdentifier,
/*1091*/ typ DWORD FreshnessCounter,
/*1092*/ typ LPSTR LookupName,
/*1093*/ typ PBYTE Data,
/*1094*/ typ DWORD*DataLen);
/*1095*/ extern LONG typ
/*1096*/ SCardReadCacheW(
/*1097*/ typ SCARDCONTEXT hContext,
/*1098*/ typ UUID*CardIdentifier,
/*1099*/ typ DWORD FreshnessCounter,
/*1100*/ typ LPWSTR LookupName,
/*1101*/ typ PBYTE Data,
/*1102*/ typ DWORD*DataLen);
/*1109*/ extern LONG typ
/*1110*/ SCardWriteCacheA(
/*1111*/ typ SCARDCONTEXT hContext,
/*1112*/ typ UUID*CardIdentifier,
/*1113*/ typ DWORD FreshnessCounter,
/*1114*/ typ LPSTR LookupName,
/*1115*/ typ PBYTE Data,
/*1116*/ typ DWORD DataLen);
/*1117*/ extern LONG typ
/*1118*/ SCardWriteCacheW(
/*1119*/ typ SCARDCONTEXT hContext,
/*1120*/ typ UUID*CardIdentifier,
/*1121*/ typ DWORD FreshnessCounter,
/*1122*/ typ LPWSTR LookupName,
/*1123*/ typ PBYTE Data,
/*1124*/ typ DWORD DataLen);
/*"prsht.h"89*/ struct _PSP;
/*90*/ typedef struct _PSP*HPROPSHEETPAGE;
/*93*/ struct _PROPSHEETPAGEA;
/*94*/ struct _PROPSHEETPAGEW;
/*97*/ typedef UINT(typ*LPFNPSPCALLBACKA)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEA*ppsp);
/*98*/ typedef UINT(typ*LPFNPSPCALLBACKW)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEW*ppsp);
/*137*/ typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
/*196*/ typedef struct _PROPSHEETPAGEA_V1
/*197*/ {
/*198*/ DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCSTR pszIcon;}u2;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT*pcRefParent;"define"PROPSHEETPAGEW_V1_FIELDS DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCWSTR pszIcon;}u2;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT*pcRefParent;"if"_WIN32_WINNT>=0x0600
/*199*/ }PROPSHEETPAGEA_V1,*LPPROPSHEETPAGEA_V1;
/*200*/ typedef const PROPSHEETPAGEA_V1*LPCPROPSHEETPAGEA_V1;
/*202*/ typedef struct _PROPSHEETPAGEA
/*203*/ {
/*204*/ DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCSTR pszIcon;}u2;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT*pcRefParent;"define"PROPSHEETPAGEW_V1_FIELDS DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCWSTR pszIcon;}u2;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT*pcRefParent;"if"_WIN32_WINNT>=0x0600
/*206*/ LPCSTR pszHeaderTitle;
/*207*/ LPCSTR pszHeaderSubTitle;
/*208*/ }PROPSHEETPAGEA_V2,*LPPROPSHEETPAGEA_V2;
/*209*/ typedef const PROPSHEETPAGEA_V2*LPCPROPSHEETPAGEA_V2;
/*211*/ typedef struct _PROPSHEETPAGEA_V3
/*212*/ {
/*213*/ DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCSTR pszIcon;}u2;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT*pcRefParent;"define"PROPSHEETPAGEW_V1_FIELDS DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCWSTR pszIcon;}u2;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT*pcRefParent;"if"_WIN32_WINNT>=0x0600
/*215*/ LPCSTR pszHeaderTitle;
/*216*/ LPCSTR pszHeaderSubTitle;
/*218*/ HANDLE hActCtx;
/*219*/ }PROPSHEETPAGEA_V3,*LPPROPSHEETPAGEA_V3;
/*220*/ typedef const PROPSHEETPAGEA_V3*LPCPROPSHEETPAGEA_V3;
/*242*/ typedef struct _PROPSHEETPAGEW_V1
/*243*/ {
/*244*/ PROPSHEETPAGEW_V1_FIELDS
/*245*/ }PROPSHEETPAGEW_V1,*LPPROPSHEETPAGEW_V1;
/*246*/ typedef const PROPSHEETPAGEW_V1*LPCPROPSHEETPAGEW_V1;
/*248*/ typedef struct _PROPSHEETPAGEW
/*249*/ {
/*250*/ PROPSHEETPAGEW_V1_FIELDS
/*252*/ LPCWSTR pszHeaderTitle;
/*253*/ LPCWSTR pszHeaderSubTitle;
/*254*/ }PROPSHEETPAGEW_V2,*LPPROPSHEETPAGEW_V2;
/*255*/ typedef const PROPSHEETPAGEW_V2*LPCPROPSHEETPAGEW_V2;
/*257*/ typedef struct _PROPSHEETPAGEW_V3
/*258*/ {
/*259*/ PROPSHEETPAGEW_V1_FIELDS
/*261*/ LPCWSTR pszHeaderTitle;
/*262*/ LPCWSTR pszHeaderSubTitle;
/*264*/ HANDLE hActCtx;
/*265*/ }PROPSHEETPAGEW_V3,*LPPROPSHEETPAGEW_V3;
/*266*/ typedef const PROPSHEETPAGEW_V3*LPCPROPSHEETPAGEW_V3;
/*311*/ typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA_LATEST;
/*312*/ typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW_LATEST;
/*313*/ typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA_LATEST;
/*314*/ typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW_LATEST;
/*315*/ typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
/*316*/ typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;
/*335*/ typedef PROPSHEETPAGEA_V2 PROPSHEETPAGEA;
/*336*/ typedef PROPSHEETPAGEW_V2 PROPSHEETPAGEW;
/*337*/ typedef LPPROPSHEETPAGEA_V2 LPPROPSHEETPAGEA;
/*338*/ typedef LPPROPSHEETPAGEW_V2 LPPROPSHEETPAGEW;
/*339*/ typedef LPCPROPSHEETPAGEA_V2 LPCPROPSHEETPAGEA;
/*340*/ typedef LPCPROPSHEETPAGEW_V2 LPCPROPSHEETPAGEW;
/*466*/ typedef int(typ*PFNPROPSHEETCALLBACK)(HWND,UINT,LPARAM);
/*492*/ typedef struct _PROPSHEETHEADERA_V1
/*493*/ {
/*494*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCSTR pszIcon;}u;LPCSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCSTR pStartPage;}u2;union{LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*495*/ }PROPSHEETHEADERA_V1,*LPPROPSHEETHEADERA_V1;
/*496*/ typedef const PROPSHEETHEADERA_V1*LPCPROPSHEETHEADERA_V1;
/*499*/ typedef struct _PROPSHEETHEADERA_V2
/*500*/ {
/*501*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCSTR pszIcon;}u;LPCSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCSTR pStartPage;}u2;union{LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*502*/ union
/*503*/ {
/*504*/ HBITMAP hbmWatermark;
/*505*/ LPCSTR pszbmWatermark;
/*506*/ }u4;
/*507*/ HPALETTE hplWatermark;
/*508*/ union
/*509*/ {
/*510*/ HBITMAP hbmHeader;
/*511*/ LPCSTR pszbmHeader;
/*512*/ }u5;
/*513*/ }PROPSHEETHEADERA_V2,*LPPROPSHEETHEADERA_V2;
/*514*/ typedef const PROPSHEETHEADERA_V2*LPCPROPSHEETHEADERA_V2;
/*541*/ typedef struct _PROPSHEETHEADERW_V1
/*542*/ {
/*543*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCWSTR pszIcon;}u;LPCWSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCWSTR pStartPage;}u2;union{LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*544*/ }PROPSHEETHEADERW_V1,*LPPROPSHEETHEADERW_V1;
/*545*/ typedef const PROPSHEETHEADERW_V1*LPCPROPSHEETHEADERW_V1;
/*548*/ typedef struct _PROPSHEETHEADERW_V2
/*549*/ {
/*550*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCWSTR pszIcon;}u;LPCWSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCWSTR pStartPage;}u2;union{LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*551*/ union
/*552*/ {
/*553*/ HBITMAP hbmWatermark;
/*554*/ LPCWSTR pszbmWatermark;
/*555*/ }u4;
/*556*/ HPALETTE hplWatermark;
/*557*/ union
/*558*/ {
/*559*/ HBITMAP hbmHeader;
/*560*/ LPCWSTR pszbmHeader;
/*561*/ }u5;
/*562*/ }PROPSHEETHEADERW_V2,*LPPROPSHEETHEADERW_V2;
/*563*/ typedef const PROPSHEETHEADERW_V2*LPCPROPSHEETHEADERW_V2;
/*590*/ typedef PROPSHEETHEADERA_V2 PROPSHEETHEADERA;
/*591*/ typedef PROPSHEETHEADERW_V2 PROPSHEETHEADERW;
/*592*/ typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA;
/*593*/ typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW;
/*594*/ typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA;
/*595*/ typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW;
/*642*/ HPROPSHEETPAGE typ CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
/*643*/ HPROPSHEETPAGE typ CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
/*644*/ BOOL typ DestroyPropertySheetPage(HPROPSHEETPAGE);
/*646*/ INT_PTR typ PropertySheetA(LPCPROPSHEETHEADERA);
/*648*/ INT_PTR typ PropertySheetW(LPCPROPSHEETHEADERW);
/*660*/ typedef BOOL(typ*LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE,LPARAM);
/*661*/ typedef BOOL(typ*LPFNADDPROPSHEETPAGES)(LPVOID,LPFNADDPROPSHEETPAGE,LPARAM);
/*664*/ typedef struct _PSHNOTIFY
/*665*/ {
/*666*/ NMHDR hdr;
/*667*/ LPARAM lParam;
/*668*/ }PSHNOTIFY,*LPPSHNOTIFY;
/*"winspool.h"49*/ typedef struct _PRINTER_INFO_1A{
/*50*/ DWORD Flags;
/*51*/ LPSTR pDescription;
/*52*/ LPSTR pName;
/*53*/ LPSTR pComment;
/*54*/ }PRINTER_INFO_1A,*PPRINTER_INFO_1A,*LPPRINTER_INFO_1A;
/*55*/ typedef struct _PRINTER_INFO_1W{
/*56*/ DWORD Flags;
/*57*/ LPWSTR pDescription;
/*58*/ LPWSTR pName;
/*59*/ LPWSTR pComment;
/*60*/ }PRINTER_INFO_1W,*PPRINTER_INFO_1W,*LPPRINTER_INFO_1W;
/*66*/ typedef PRINTER_INFO_1A PRINTER_INFO_1;
/*67*/ typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
/*68*/ typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
/*71*/ typedef struct _PRINTER_INFO_2A{
/*72*/ LPSTR pServerName;
/*73*/ LPSTR pPrinterName;
/*74*/ LPSTR pShareName;
/*75*/ LPSTR pPortName;
/*76*/ LPSTR pDriverName;
/*77*/ LPSTR pComment;
/*78*/ LPSTR pLocation;
/*79*/ LPDEVMODEA pDevMode;
/*80*/ LPSTR pSepFile;
/*81*/ LPSTR pPrintProcessor;
/*82*/ LPSTR pDatatype;
/*83*/ LPSTR pParameters;
/*84*/ PSECURITY_DESCRIPTOR pSecurityDescriptor;
/*85*/ DWORD Attributes;
/*86*/ DWORD Priority;
/*87*/ DWORD DefaultPriority;
/*88*/ DWORD StartTime;
/*89*/ DWORD UntilTime;
/*90*/ DWORD Status;
/*91*/ DWORD cJobs;
/*92*/ DWORD AveragePPM;
/*93*/ }PRINTER_INFO_2A,*PPRINTER_INFO_2A,*LPPRINTER_INFO_2A;
/*94*/ typedef struct _PRINTER_INFO_2W{
/*95*/ LPWSTR pServerName;
/*96*/ LPWSTR pPrinterName;
/*97*/ LPWSTR pShareName;
/*98*/ LPWSTR pPortName;
/*99*/ LPWSTR pDriverName;
/*100*/ LPWSTR pComment;
/*101*/ LPWSTR pLocation;
/*102*/ LPDEVMODEW pDevMode;
/*103*/ LPWSTR pSepFile;
/*104*/ LPWSTR pPrintProcessor;
/*105*/ LPWSTR pDatatype;
/*106*/ LPWSTR pParameters;
/*107*/ PSECURITY_DESCRIPTOR pSecurityDescriptor;
/*108*/ DWORD Attributes;
/*109*/ DWORD Priority;
/*110*/ DWORD DefaultPriority;
/*111*/ DWORD StartTime;
/*112*/ DWORD UntilTime;
/*113*/ DWORD Status;
/*114*/ DWORD cJobs;
/*115*/ DWORD AveragePPM;
/*116*/ }PRINTER_INFO_2W,*PPRINTER_INFO_2W,*LPPRINTER_INFO_2W;
/*122*/ typedef PRINTER_INFO_2A PRINTER_INFO_2;
/*123*/ typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
/*124*/ typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
/*127*/ typedef struct _PRINTER_INFO_3{
/*128*/ PSECURITY_DESCRIPTOR pSecurityDescriptor;
/*129*/ }PRINTER_INFO_3,*PPRINTER_INFO_3,*LPPRINTER_INFO_3;
/*131*/ typedef struct _PRINTER_INFO_4A{
/*132*/ LPSTR pPrinterName;
/*133*/ LPSTR pServerName;
/*134*/ DWORD Attributes;
/*135*/ }PRINTER_INFO_4A,*PPRINTER_INFO_4A,*LPPRINTER_INFO_4A;
/*136*/ typedef struct _PRINTER_INFO_4W{
/*137*/ LPWSTR pPrinterName;
/*138*/ LPWSTR pServerName;
/*139*/ DWORD Attributes;
/*140*/ }PRINTER_INFO_4W,*PPRINTER_INFO_4W,*LPPRINTER_INFO_4W;
/*146*/ typedef PRINTER_INFO_4A PRINTER_INFO_4;
/*147*/ typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
/*148*/ typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
/*151*/ typedef struct _PRINTER_INFO_5A{
/*152*/ LPSTR pPrinterName;
/*153*/ LPSTR pPortName;
/*154*/ DWORD Attributes;
/*155*/ DWORD DeviceNotSelectedTimeout;
/*156*/ DWORD TransmissionRetryTimeout;
/*157*/ }PRINTER_INFO_5A,*PPRINTER_INFO_5A,*LPPRINTER_INFO_5A;
/*158*/ typedef struct _PRINTER_INFO_5W{
/*159*/ LPWSTR pPrinterName;
/*160*/ LPWSTR pPortName;
/*161*/ DWORD Attributes;
/*162*/ DWORD DeviceNotSelectedTimeout;
/*163*/ DWORD TransmissionRetryTimeout;
/*164*/ }PRINTER_INFO_5W,*PPRINTER_INFO_5W,*LPPRINTER_INFO_5W;
/*170*/ typedef PRINTER_INFO_5A PRINTER_INFO_5;
/*171*/ typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
/*172*/ typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
/*175*/ typedef struct _PRINTER_INFO_6{
/*176*/ DWORD dwStatus;
/*177*/ }PRINTER_INFO_6,*PPRINTER_INFO_6,*LPPRINTER_INFO_6;
/*180*/ typedef struct _PRINTER_INFO_7A{
/*181*/ LPSTR pszObjectGUID;
/*182*/ DWORD dwAction;
/*183*/ }PRINTER_INFO_7A,*PPRINTER_INFO_7A,*LPPRINTER_INFO_7A;
/*184*/ typedef struct _PRINTER_INFO_7W{
/*185*/ LPWSTR pszObjectGUID;
/*186*/ DWORD dwAction;
/*187*/ }PRINTER_INFO_7W,*PPRINTER_INFO_7W,*LPPRINTER_INFO_7W;
/*193*/ typedef PRINTER_INFO_7A PRINTER_INFO_7;
/*194*/ typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
/*195*/ typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
/*204*/ typedef struct _PRINTER_INFO_8A{
/*205*/ LPDEVMODEA pDevMode;
/*206*/ }PRINTER_INFO_8A,*PPRINTER_INFO_8A,*LPPRINTER_INFO_8A;
/*207*/ typedef struct _PRINTER_INFO_8W{
/*208*/ LPDEVMODEW pDevMode;
/*209*/ }PRINTER_INFO_8W,*PPRINTER_INFO_8W,*LPPRINTER_INFO_8W;
/*215*/ typedef PRINTER_INFO_8A PRINTER_INFO_8;
/*216*/ typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
/*217*/ typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
/*220*/ typedef struct _PRINTER_INFO_9A{
/*221*/ LPDEVMODEA pDevMode;
/*222*/ }PRINTER_INFO_9A,*PPRINTER_INFO_9A,*LPPRINTER_INFO_9A;
/*223*/ typedef struct _PRINTER_INFO_9W{
/*224*/ LPDEVMODEW pDevMode;
/*225*/ }PRINTER_INFO_9W,*PPRINTER_INFO_9W,*LPPRINTER_INFO_9W;
/*231*/ typedef PRINTER_INFO_9A PRINTER_INFO_9;
/*232*/ typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
/*233*/ typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
/*326*/ typedef struct _JOB_INFO_1A{
/*327*/ DWORD JobId;
/*328*/ LPSTR pPrinterName;
/*329*/ LPSTR pMachineName;
/*330*/ LPSTR pUserName;
/*331*/ LPSTR pDocument;
/*332*/ LPSTR pDatatype;
/*333*/ LPSTR pStatus;
/*334*/ DWORD Status;
/*335*/ DWORD Priority;
/*336*/ DWORD Position;
/*337*/ DWORD TotalPages;
/*338*/ DWORD PagesPrinted;
/*339*/ SYSTEMTIME Submitted;
/*340*/ }JOB_INFO_1A,*PJOB_INFO_1A,*LPJOB_INFO_1A;
/*341*/ typedef struct _JOB_INFO_1W{
/*342*/ DWORD JobId;
/*343*/ LPWSTR pPrinterName;
/*344*/ LPWSTR pMachineName;
/*345*/ LPWSTR pUserName;
/*346*/ LPWSTR pDocument;
/*347*/ LPWSTR pDatatype;
/*348*/ LPWSTR pStatus;
/*349*/ DWORD Status;
/*350*/ DWORD Priority;
/*351*/ DWORD Position;
/*352*/ DWORD TotalPages;
/*353*/ DWORD PagesPrinted;
/*354*/ SYSTEMTIME Submitted;
/*355*/ }JOB_INFO_1W,*PJOB_INFO_1W,*LPJOB_INFO_1W;
/*361*/ typedef JOB_INFO_1A JOB_INFO_1;
/*362*/ typedef PJOB_INFO_1A PJOB_INFO_1;
/*363*/ typedef LPJOB_INFO_1A LPJOB_INFO_1;
/*366*/ typedef struct _JOB_INFO_2A{
/*367*/ DWORD JobId;
/*368*/ LPSTR pPrinterName;
/*369*/ LPSTR pMachineName;
/*370*/ LPSTR pUserName;
/*371*/ LPSTR pDocument;
/*372*/ LPSTR pNotifyName;
/*373*/ LPSTR pDatatype;
/*374*/ LPSTR pPrintProcessor;
/*375*/ LPSTR pParameters;
/*376*/ LPSTR pDriverName;
/*377*/ LPDEVMODEA pDevMode;
/*378*/ LPSTR pStatus;
/*379*/ PSECURITY_DESCRIPTOR pSecurityDescriptor;
/*380*/ DWORD Status;
/*381*/ DWORD Priority;
/*382*/ DWORD Position;
/*383*/ DWORD StartTime;
/*384*/ DWORD UntilTime;
/*385*/ DWORD TotalPages;
/*386*/ DWORD Size;
/*387*/ SYSTEMTIME Submitted;
/*388*/ DWORD Time;
/*389*/ DWORD PagesPrinted;
/*390*/ }JOB_INFO_2A,*PJOB_INFO_2A,*LPJOB_INFO_2A;
/*391*/ typedef struct _JOB_INFO_2W{
/*392*/ DWORD JobId;
/*393*/ LPWSTR pPrinterName;
/*394*/ LPWSTR pMachineName;
/*395*/ LPWSTR pUserName;
/*396*/ LPWSTR pDocument;
/*397*/ LPWSTR pNotifyName;
/*398*/ LPWSTR pDatatype;
/*399*/ LPWSTR pPrintProcessor;
/*400*/ LPWSTR pParameters;
/*401*/ LPWSTR pDriverName;
/*402*/ LPDEVMODEW pDevMode;
/*403*/ LPWSTR pStatus;
/*404*/ PSECURITY_DESCRIPTOR pSecurityDescriptor;
/*405*/ DWORD Status;
/*406*/ DWORD Priority;
/*407*/ DWORD Position;
/*408*/ DWORD StartTime;
/*409*/ DWORD UntilTime;
/*410*/ DWORD TotalPages;
/*411*/ DWORD Size;
/*412*/ SYSTEMTIME Submitted;
/*413*/ DWORD Time;
/*414*/ DWORD PagesPrinted;
/*415*/ }JOB_INFO_2W,*PJOB_INFO_2W,*LPJOB_INFO_2W;
/*421*/ typedef JOB_INFO_2A JOB_INFO_2;
/*422*/ typedef PJOB_INFO_2A PJOB_INFO_2;
/*423*/ typedef LPJOB_INFO_2A LPJOB_INFO_2;
/*426*/ typedef struct _JOB_INFO_3{
/*427*/ DWORD JobId;
/*428*/ DWORD NextJobId;
/*429*/ DWORD Reserved;
/*430*/ }JOB_INFO_3,*PJOB_INFO_3,*LPJOB_INFO_3;
/*432*/ typedef struct _JOB_INFO_4A{
/*433*/ DWORD JobId;
/*434*/ LPSTR pPrinterName;
/*435*/ LPSTR pMachineName;
/*436*/ LPSTR pUserName;
/*437*/ LPSTR pDocument;
/*438*/ LPSTR pNotifyName;
/*439*/ LPSTR pDatatype;
/*440*/ LPSTR pPrintProcessor;
/*441*/ LPSTR pParameters;
/*442*/ LPSTR pDriverName;
/*443*/ LPDEVMODEA pDevMode;
/*444*/ LPSTR pStatus;
/*445*/ PSECURITY_DESCRIPTOR pSecurityDescriptor;
/*446*/ DWORD Status;
/*447*/ DWORD Priority;
/*448*/ DWORD Position;
/*449*/ DWORD StartTime;
/*450*/ DWORD UntilTime;
/*451*/ DWORD TotalPages;
/*452*/ DWORD Size;
/*453*/ SYSTEMTIME Submitted;
/*454*/ DWORD Time;
/*455*/ DWORD PagesPrinted;
/*456*/ LONG SizeHigh;
/*457*/ }JOB_INFO_4A,*PJOB_INFO_4A,*LPJOB_INFO_4A;
/*458*/ typedef struct _JOB_INFO_4W{
/*459*/ DWORD JobId;
/*460*/ LPWSTR pPrinterName;
/*461*/ LPWSTR pMachineName;
/*462*/ LPWSTR pUserName;
/*463*/ LPWSTR pDocument;
/*464*/ LPWSTR pNotifyName;
/*465*/ LPWSTR pDatatype;
/*466*/ LPWSTR pPrintProcessor;
/*467*/ LPWSTR pParameters;
/*468*/ LPWSTR pDriverName;
/*469*/ LPDEVMODEW pDevMode;
/*470*/ LPWSTR pStatus;
/*471*/ PSECURITY_DESCRIPTOR pSecurityDescriptor;
/*472*/ DWORD Status;
/*473*/ DWORD Priority;
/*474*/ DWORD Position;
/*475*/ DWORD StartTime;
/*476*/ DWORD UntilTime;
/*477*/ DWORD TotalPages;
/*478*/ DWORD Size;
/*479*/ SYSTEMTIME Submitted;
/*480*/ DWORD Time;
/*481*/ DWORD PagesPrinted;
/*482*/ LONG SizeHigh;
/*483*/ }JOB_INFO_4W,*PJOB_INFO_4W,*LPJOB_INFO_4W;
/*489*/ typedef JOB_INFO_4A JOB_INFO_4;
/*490*/ typedef PJOB_INFO_4A PJOB_INFO_4;
/*491*/ typedef LPJOB_INFO_4A LPJOB_INFO_4;
/*531*/ typedef struct _ADDJOB_INFO_1A{
/*532*/ LPSTR Path;
/*533*/ DWORD JobId;
/*534*/ }ADDJOB_INFO_1A,*PADDJOB_INFO_1A,*LPADDJOB_INFO_1A;
/*535*/ typedef struct _ADDJOB_INFO_1W{
/*536*/ LPWSTR Path;
/*537*/ DWORD JobId;
/*538*/ }ADDJOB_INFO_1W,*PADDJOB_INFO_1W,*LPADDJOB_INFO_1W;
/*544*/ typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
/*545*/ typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
/*546*/ typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
/*550*/ typedef struct _DRIVER_INFO_1A{
/*551*/ LPSTR pName;
/*552*/ }DRIVER_INFO_1A,*PDRIVER_INFO_1A,*LPDRIVER_INFO_1A;
/*553*/ typedef struct _DRIVER_INFO_1W{
/*554*/ LPWSTR pName;
/*555*/ }DRIVER_INFO_1W,*PDRIVER_INFO_1W,*LPDRIVER_INFO_1W;
/*561*/ typedef DRIVER_INFO_1A DRIVER_INFO_1;
/*562*/ typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
/*563*/ typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
/*566*/ typedef struct _DRIVER_INFO_2A{
/*567*/ DWORD cVersion;
/*568*/ LPSTR pName;
/*569*/ LPSTR pEnvironment;
/*570*/ LPSTR pDriverPath;
/*571*/ LPSTR pDataFile;
/*572*/ LPSTR pConfigFile;
/*573*/ }DRIVER_INFO_2A,*PDRIVER_INFO_2A,*LPDRIVER_INFO_2A;
/*574*/ typedef struct _DRIVER_INFO_2W{
/*575*/ DWORD cVersion;
/*576*/ LPWSTR pName;
/*577*/ LPWSTR pEnvironment;
/*578*/ LPWSTR pDriverPath;
/*579*/ LPWSTR pDataFile;
/*580*/ LPWSTR pConfigFile;
/*581*/ }DRIVER_INFO_2W,*PDRIVER_INFO_2W,*LPDRIVER_INFO_2W;
/*587*/ typedef DRIVER_INFO_2A DRIVER_INFO_2;
/*588*/ typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
/*589*/ typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
/*592*/ typedef struct _DRIVER_INFO_3A{
/*593*/ DWORD cVersion;
/*594*/ LPSTR pName;
/*595*/ LPSTR pEnvironment;
/*596*/ LPSTR pDriverPath;
/*597*/ LPSTR pDataFile;
/*598*/ LPSTR pConfigFile;
/*599*/ LPSTR pHelpFile;
/*600*/ LPSTR pDependentFiles;
/*601*/ LPSTR pMonitorName;
/*602*/ LPSTR pDefaultDataType;
/*603*/ }DRIVER_INFO_3A,*PDRIVER_INFO_3A,*LPDRIVER_INFO_3A;
/*604*/ typedef struct _DRIVER_INFO_3W{
/*605*/ DWORD cVersion;
/*606*/ LPWSTR pName;
/*607*/ LPWSTR pEnvironment;
/*608*/ LPWSTR pDriverPath;
/*609*/ LPWSTR pDataFile;
/*610*/ LPWSTR pConfigFile;
/*611*/ LPWSTR pHelpFile;
/*612*/ LPWSTR pDependentFiles;
/*613*/ LPWSTR pMonitorName;
/*614*/ LPWSTR pDefaultDataType;
/*615*/ }DRIVER_INFO_3W,*PDRIVER_INFO_3W,*LPDRIVER_INFO_3W;
/*621*/ typedef DRIVER_INFO_3A DRIVER_INFO_3;
/*622*/ typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
/*623*/ typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
/*626*/ typedef struct _DRIVER_INFO_4A{
/*627*/ DWORD cVersion;
/*628*/ LPSTR pName;
/*629*/ LPSTR pEnvironment;
/*630*/ LPSTR pDriverPath;
/*631*/ LPSTR pDataFile;
/*632*/ LPSTR pConfigFile;
/*633*/ LPSTR pHelpFile;
/*634*/ LPSTR pDependentFiles;
/*635*/ LPSTR pMonitorName;
/*636*/ LPSTR pDefaultDataType;
/*637*/ LPSTR pszzPreviousNames;
/*638*/ }DRIVER_INFO_4A,*PDRIVER_INFO_4A,*LPDRIVER_INFO_4A;
/*639*/ typedef struct _DRIVER_INFO_4W{
/*640*/ DWORD cVersion;
/*641*/ LPWSTR pName;
/*642*/ LPWSTR pEnvironment;
/*643*/ LPWSTR pDriverPath;
/*644*/ LPWSTR pDataFile;
/*645*/ LPWSTR pConfigFile;
/*646*/ LPWSTR pHelpFile;
/*647*/ LPWSTR pDependentFiles;
/*648*/ LPWSTR pMonitorName;
/*649*/ LPWSTR pDefaultDataType;
/*650*/ LPWSTR pszzPreviousNames;
/*651*/ }DRIVER_INFO_4W,*PDRIVER_INFO_4W,*LPDRIVER_INFO_4W;
/*657*/ typedef DRIVER_INFO_4A DRIVER_INFO_4;
/*658*/ typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
/*659*/ typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
/*662*/ typedef struct _DRIVER_INFO_5A{
/*663*/ DWORD cVersion;
/*664*/ LPSTR pName;
/*665*/ LPSTR pEnvironment;
/*666*/ LPSTR pDriverPath;
/*667*/ LPSTR pDataFile;
/*668*/ LPSTR pConfigFile;
/*669*/ DWORD dwDriverAttributes;
/*670*/ DWORD dwConfigVersion;
/*671*/ DWORD dwDriverVersion;
/*672*/ }DRIVER_INFO_5A,*PDRIVER_INFO_5A,*LPDRIVER_INFO_5A;
/*673*/ typedef struct _DRIVER_INFO_5W{
/*674*/ DWORD cVersion;
/*675*/ LPWSTR pName;
/*676*/ LPWSTR pEnvironment;
/*677*/ LPWSTR pDriverPath;
/*678*/ LPWSTR pDataFile;
/*679*/ LPWSTR pConfigFile;
/*680*/ DWORD dwDriverAttributes;
/*681*/ DWORD dwConfigVersion;
/*682*/ DWORD dwDriverVersion;
/*683*/ }DRIVER_INFO_5W,*PDRIVER_INFO_5W,*LPDRIVER_INFO_5W;
/*689*/ typedef DRIVER_INFO_5A DRIVER_INFO_5;
/*690*/ typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
/*691*/ typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
/*694*/ typedef struct _DRIVER_INFO_6A{
/*695*/ DWORD cVersion;
/*696*/ LPSTR pName;
/*697*/ LPSTR pEnvironment;
/*698*/ LPSTR pDriverPath;
/*699*/ LPSTR pDataFile;
/*700*/ LPSTR pConfigFile;
/*701*/ LPSTR pHelpFile;
/*702*/ LPSTR pDependentFiles;
/*703*/ LPSTR pMonitorName;
/*704*/ LPSTR pDefaultDataType;
/*705*/ LPSTR pszzPreviousNames;
/*706*/ FILETIME ftDriverDate;
/*707*/ DWORDLONG dwlDriverVersion;
/*708*/ LPSTR pszMfgName;
/*709*/ LPSTR pszOEMUrl;
/*710*/ LPSTR pszHardwareID;
/*711*/ LPSTR pszProvider;
/*712*/ }DRIVER_INFO_6A,*PDRIVER_INFO_6A,*LPDRIVER_INFO_6A;
/*713*/ typedef struct _DRIVER_INFO_6W{
/*714*/ DWORD cVersion;
/*715*/ LPWSTR pName;
/*716*/ LPWSTR pEnvironment;
/*717*/ LPWSTR pDriverPath;
/*718*/ LPWSTR pDataFile;
/*719*/ LPWSTR pConfigFile;
/*720*/ LPWSTR pHelpFile;
/*721*/ LPWSTR pDependentFiles;
/*722*/ LPWSTR pMonitorName;
/*723*/ LPWSTR pDefaultDataType;
/*724*/ LPWSTR pszzPreviousNames;
/*725*/ FILETIME ftDriverDate;
/*726*/ DWORDLONG dwlDriverVersion;
/*727*/ LPWSTR pszMfgName;
/*728*/ LPWSTR pszOEMUrl;
/*729*/ LPWSTR pszHardwareID;
/*730*/ LPWSTR pszProvider;
/*731*/ }DRIVER_INFO_6W,*PDRIVER_INFO_6W,*LPDRIVER_INFO_6W;
/*737*/ typedef DRIVER_INFO_6A DRIVER_INFO_6;
/*738*/ typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
/*739*/ typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
/*744*/ typedef struct _DRIVER_INFO_8A{
/*745*/ DWORD cVersion;
/*746*/ LPSTR pName;
/*747*/ LPSTR pEnvironment;
/*748*/ LPSTR pDriverPath;
/*749*/ LPSTR pDataFile;
/*750*/ LPSTR pConfigFile;
/*751*/ LPSTR pHelpFile;
/*752*/ LPSTR pDependentFiles;
/*753*/ LPSTR pMonitorName;
/*754*/ LPSTR pDefaultDataType;
/*755*/ LPSTR pszzPreviousNames;
/*756*/ FILETIME ftDriverDate;
/*757*/ DWORDLONG dwlDriverVersion;
/*758*/ LPSTR pszMfgName;
/*759*/ LPSTR pszOEMUrl;
/*760*/ LPSTR pszHardwareID;
/*761*/ LPSTR pszProvider;
/*762*/ LPSTR pszPrintProcessor;
/*763*/ LPSTR pszVendorSetup;
/*764*/ LPSTR pszzColorProfiles;
/*765*/ LPSTR pszInfPath;
/*766*/ DWORD dwPrinterDriverAttributes;
/*767*/ LPSTR pszzCoreDriverDependencies;
/*768*/ FILETIME ftMinInboxDriverVerDate;
/*769*/ DWORDLONG dwlMinInboxDriverVerVersion;
/*770*/ }DRIVER_INFO_8A,*PDRIVER_INFO_8A,*LPDRIVER_INFO_8A;
/*771*/ typedef struct _DRIVER_INFO_8W{
/*772*/ DWORD cVersion;
/*773*/ LPWSTR pName;
/*774*/ LPWSTR pEnvironment;
/*775*/ LPWSTR pDriverPath;
/*776*/ LPWSTR pDataFile;
/*777*/ LPWSTR pConfigFile;
/*778*/ LPWSTR pHelpFile;
/*779*/ LPWSTR pDependentFiles;
/*780*/ LPWSTR pMonitorName;
/*781*/ LPWSTR pDefaultDataType;
/*782*/ LPWSTR pszzPreviousNames;
/*783*/ FILETIME ftDriverDate;
/*784*/ DWORDLONG dwlDriverVersion;
/*785*/ LPWSTR pszMfgName;
/*786*/ LPWSTR pszOEMUrl;
/*787*/ LPWSTR pszHardwareID;
/*788*/ LPWSTR pszProvider;
/*789*/ LPWSTR pszPrintProcessor;
/*790*/ LPWSTR pszVendorSetup;
/*791*/ LPWSTR pszzColorProfiles;
/*792*/ LPWSTR pszInfPath;
/*793*/ DWORD dwPrinterDriverAttributes;
/*794*/ LPWSTR pszzCoreDriverDependencies;
/*795*/ FILETIME ftMinInboxDriverVerDate;
/*796*/ DWORDLONG dwlMinInboxDriverVerVersion;
/*797*/ }DRIVER_INFO_8W,*PDRIVER_INFO_8W,*LPDRIVER_INFO_8W;
/*803*/ typedef DRIVER_INFO_8A DRIVER_INFO_8;
/*804*/ typedef PDRIVER_INFO_8A PDRIVER_INFO_8;
/*805*/ typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8;
/*831*/ typedef struct _DOC_INFO_1A{
/*832*/ LPSTR pDocName;
/*833*/ LPSTR pOutputFile;
/*834*/ LPSTR pDatatype;
/*835*/ }DOC_INFO_1A,*PDOC_INFO_1A,*LPDOC_INFO_1A;
/*836*/ typedef struct _DOC_INFO_1W{
/*837*/ LPWSTR pDocName;
/*838*/ LPWSTR pOutputFile;
/*839*/ LPWSTR pDatatype;
/*840*/ }DOC_INFO_1W,*PDOC_INFO_1W,*LPDOC_INFO_1W;
/*846*/ typedef DOC_INFO_1A DOC_INFO_1;
/*847*/ typedef PDOC_INFO_1A PDOC_INFO_1;
/*848*/ typedef LPDOC_INFO_1A LPDOC_INFO_1;
/*851*/ typedef struct _FORM_INFO_1A{
/*852*/ DWORD Flags;
/*853*/ LPSTR pName;
/*854*/ SIZEL Size;
/*855*/ RECTL ImageableArea;
/*856*/ }FORM_INFO_1A,*PFORM_INFO_1A,*LPFORM_INFO_1A;
/*857*/ typedef struct _FORM_INFO_1W{
/*858*/ DWORD Flags;
/*859*/ LPWSTR pName;
/*860*/ SIZEL Size;
/*861*/ RECTL ImageableArea;
/*862*/ }FORM_INFO_1W,*PFORM_INFO_1W,*LPFORM_INFO_1W;
/*868*/ typedef FORM_INFO_1A FORM_INFO_1;
/*869*/ typedef PFORM_INFO_1A PFORM_INFO_1;
/*870*/ typedef LPFORM_INFO_1A LPFORM_INFO_1;
/*880*/ typedef struct _FORM_INFO_2A{
/*881*/ DWORD Flags;
/*882*/ LPCSTR pName;
/*883*/ SIZEL Size;
/*884*/ RECTL ImageableArea;
/*885*/ LPCSTR pKeyword;
/*886*/ DWORD StringType;
/*887*/ LPCSTR pMuiDll;
/*888*/ DWORD dwResourceId;
/*889*/ LPCSTR pDisplayName;
/*890*/ LANGID wLangId;
/*891*/ }FORM_INFO_2A,*PFORM_INFO_2A,*LPFORM_INFO_2A;
/*892*/ typedef struct _FORM_INFO_2W{
/*893*/ DWORD Flags;
/*894*/ LPCWSTR pName;
/*895*/ SIZEL Size;
/*896*/ RECTL ImageableArea;
/*897*/ LPCSTR pKeyword;
/*898*/ DWORD StringType;
/*899*/ LPCWSTR pMuiDll;
/*900*/ DWORD dwResourceId;
/*901*/ LPCWSTR pDisplayName;
/*902*/ LANGID wLangId;
/*903*/ }FORM_INFO_2W,*PFORM_INFO_2W,*LPFORM_INFO_2W;
/*909*/ typedef FORM_INFO_2A FORM_INFO_2;
/*910*/ typedef PFORM_INFO_2A PFORM_INFO_2;
/*911*/ typedef LPFORM_INFO_2A LPFORM_INFO_2;
/*915*/ typedef struct _DOC_INFO_2A{
/*916*/ LPSTR pDocName;
/*917*/ LPSTR pOutputFile;
/*918*/ LPSTR pDatatype;
/*919*/ DWORD dwMode;
/*920*/ DWORD JobId;
/*921*/ }DOC_INFO_2A,*PDOC_INFO_2A,*LPDOC_INFO_2A;
/*922*/ typedef struct _DOC_INFO_2W{
/*923*/ LPWSTR pDocName;
/*924*/ LPWSTR pOutputFile;
/*925*/ LPWSTR pDatatype;
/*926*/ DWORD dwMode;
/*927*/ DWORD JobId;
/*928*/ }DOC_INFO_2W,*PDOC_INFO_2W,*LPDOC_INFO_2W;
/*934*/ typedef DOC_INFO_2A DOC_INFO_2;
/*935*/ typedef PDOC_INFO_2A PDOC_INFO_2;
/*936*/ typedef LPDOC_INFO_2A LPDOC_INFO_2;
/*944*/ typedef struct _DOC_INFO_3A{
/*945*/ LPSTR pDocName;
/*946*/ LPSTR pOutputFile;
/*947*/ LPSTR pDatatype;
/*948*/ DWORD dwFlags;
/*949*/ }DOC_INFO_3A,*PDOC_INFO_3A,*LPDOC_INFO_3A;
/*950*/ typedef struct _DOC_INFO_3W{
/*951*/ LPWSTR pDocName;
/*952*/ LPWSTR pOutputFile;
/*953*/ LPWSTR pDatatype;
/*954*/ DWORD dwFlags;
/*955*/ }DOC_INFO_3W,*PDOC_INFO_3W,*LPDOC_INFO_3W;
/*961*/ typedef DOC_INFO_3A DOC_INFO_3;
/*962*/ typedef PDOC_INFO_3A PDOC_INFO_3;
/*963*/ typedef LPDOC_INFO_3A LPDOC_INFO_3;
/*972*/ typedef struct _PRINTPROCESSOR_INFO_1A{
/*973*/ LPSTR pName;
/*974*/ }PRINTPROCESSOR_INFO_1A,*PPRINTPROCESSOR_INFO_1A,*LPPRINTPROCESSOR_INFO_1A;
/*975*/ typedef struct _PRINTPROCESSOR_INFO_1W{
/*976*/ LPWSTR pName;
/*977*/ }PRINTPROCESSOR_INFO_1W,*PPRINTPROCESSOR_INFO_1W,*LPPRINTPROCESSOR_INFO_1W;
/*983*/ typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
/*984*/ typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
/*985*/ typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
/*989*/ typedef struct _PRINTPROCESSOR_CAPS_1{
/*990*/ DWORD dwLevel;
/*991*/ DWORD dwNupOptions;
/*992*/ DWORD dwPageOrderFlags;
/*993*/ DWORD dwNumberOfCopies;
/*994*/ }PRINTPROCESSOR_CAPS_1,*PPRINTPROCESSOR_CAPS_1;
/*1001*/ typedef struct _PRINTPROCESSOR_CAPS_2{
/*1002*/ DWORD dwLevel;
/*1003*/ DWORD dwNupOptions;
/*1004*/ DWORD dwPageOrderFlags;
/*1005*/ DWORD dwNumberOfCopies;
/*1008*/ DWORD dwDuplexHandlingCaps;
/*1009*/ DWORD dwNupDirectionCaps;
/*1010*/ DWORD dwNupBorderCaps;
/*1011*/ DWORD dwBookletHandlingCaps;
/*1012*/ DWORD dwScalingCaps;
/*1014*/ }PRINTPROCESSOR_CAPS_2,*PPRINTPROCESSOR_CAPS_2;
/*1041*/ typedef struct _PORT_INFO_1A{
/*1042*/ LPSTR pName;
/*1043*/ }PORT_INFO_1A,*PPORT_INFO_1A,*LPPORT_INFO_1A;
/*1044*/ typedef struct _PORT_INFO_1W{
/*1045*/ LPWSTR pName;
/*1046*/ }PORT_INFO_1W,*PPORT_INFO_1W,*LPPORT_INFO_1W;
/*1052*/ typedef PORT_INFO_1A PORT_INFO_1;
/*1053*/ typedef PPORT_INFO_1A PPORT_INFO_1;
/*1054*/ typedef LPPORT_INFO_1A LPPORT_INFO_1;
/*1057*/ typedef struct _PORT_INFO_2A{
/*1058*/ LPSTR pPortName;
/*1059*/ LPSTR pMonitorName;
/*1060*/ LPSTR pDescription;
/*1061*/ DWORD fPortType;
/*1062*/ DWORD Reserved;
/*1063*/ }PORT_INFO_2A,*PPORT_INFO_2A,*LPPORT_INFO_2A;
/*1064*/ typedef struct _PORT_INFO_2W{
/*1065*/ LPWSTR pPortName;
/*1066*/ LPWSTR pMonitorName;
/*1067*/ LPWSTR pDescription;
/*1068*/ DWORD fPortType;
/*1069*/ DWORD Reserved;
/*1070*/ }PORT_INFO_2W,*PPORT_INFO_2W,*LPPORT_INFO_2W;
/*1076*/ typedef PORT_INFO_2A PORT_INFO_2;
/*1077*/ typedef PPORT_INFO_2A PPORT_INFO_2;
/*1078*/ typedef LPPORT_INFO_2A LPPORT_INFO_2;
/*1086*/ typedef struct _PORT_INFO_3A{
/*1087*/ DWORD dwStatus;
/*1088*/ LPSTR pszStatus;
/*1089*/ DWORD dwSeverity;
/*1090*/ }PORT_INFO_3A,*PPORT_INFO_3A,*LPPORT_INFO_3A;
/*1091*/ typedef struct _PORT_INFO_3W{
/*1092*/ DWORD dwStatus;
/*1093*/ LPWSTR pszStatus;
/*1094*/ DWORD dwSeverity;
/*1095*/ }PORT_INFO_3W,*PPORT_INFO_3W,*LPPORT_INFO_3W;
/*1101*/ typedef PORT_INFO_3A PORT_INFO_3;
/*1102*/ typedef PPORT_INFO_3A PPORT_INFO_3;
/*1103*/ typedef LPPORT_INFO_3A LPPORT_INFO_3;
/*1126*/ typedef struct _MONITOR_INFO_1A{
/*1127*/ LPSTR pName;
/*1128*/ }MONITOR_INFO_1A,*PMONITOR_INFO_1A,*LPMONITOR_INFO_1A;
/*1129*/ typedef struct _MONITOR_INFO_1W{
/*1130*/ LPWSTR pName;
/*1131*/ }MONITOR_INFO_1W,*PMONITOR_INFO_1W,*LPMONITOR_INFO_1W;
/*1137*/ typedef MONITOR_INFO_1A MONITOR_INFO_1;
/*1138*/ typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
/*1139*/ typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
/*1142*/ typedef struct _MONITOR_INFO_2A{
/*1143*/ LPSTR pName;
/*1144*/ LPSTR pEnvironment;
/*1145*/ LPSTR pDLLName;
/*1146*/ }MONITOR_INFO_2A,*PMONITOR_INFO_2A,*LPMONITOR_INFO_2A;
/*1147*/ typedef struct _MONITOR_INFO_2W{
/*1148*/ LPWSTR pName;
/*1149*/ LPWSTR pEnvironment;
/*1150*/ LPWSTR pDLLName;
/*1151*/ }MONITOR_INFO_2W,*PMONITOR_INFO_2W,*LPMONITOR_INFO_2W;
/*1157*/ typedef MONITOR_INFO_2A MONITOR_INFO_2;
/*1158*/ typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
/*1159*/ typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
/*1162*/ typedef struct _DATATYPES_INFO_1A{
/*1163*/ LPSTR pName;
/*1164*/ }DATATYPES_INFO_1A,*PDATATYPES_INFO_1A,*LPDATATYPES_INFO_1A;
/*1165*/ typedef struct _DATATYPES_INFO_1W{
/*1166*/ LPWSTR pName;
/*1167*/ }DATATYPES_INFO_1W,*PDATATYPES_INFO_1W,*LPDATATYPES_INFO_1W;
/*1173*/ typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
/*1174*/ typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
/*1175*/ typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
/*1178*/ typedef struct _PRINTER_DEFAULTSA{
/*1179*/ LPSTR pDatatype;
/*1180*/ LPDEVMODEA pDevMode;
/*1181*/ ACCESS_MASK DesiredAccess;
/*1182*/ }PRINTER_DEFAULTSA,*PPRINTER_DEFAULTSA,*LPPRINTER_DEFAULTSA;
/*1183*/ typedef struct _PRINTER_DEFAULTSW{
/*1184*/ LPWSTR pDatatype;
/*1185*/ LPDEVMODEW pDevMode;
/*1186*/ ACCESS_MASK DesiredAccess;
/*1187*/ }PRINTER_DEFAULTSW,*PPRINTER_DEFAULTSW,*LPPRINTER_DEFAULTSW;
/*1193*/ typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
/*1194*/ typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
/*1195*/ typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
/*1198*/ typedef struct _PRINTER_ENUM_VALUESA{
/*1199*/ LPSTR pValueName;
/*1200*/ DWORD cbValueName;
/*1201*/ DWORD dwType;
/*1202*/ LPBYTE pData;
/*1203*/ DWORD cbData;
/*1204*/ }PRINTER_ENUM_VALUESA,*PPRINTER_ENUM_VALUESA,*LPPRINTER_ENUM_VALUESA;
/*1205*/ typedef struct _PRINTER_ENUM_VALUESW{
/*1206*/ LPWSTR pValueName;
/*1207*/ DWORD cbValueName;
/*1208*/ DWORD dwType;
/*1209*/ LPBYTE pData;
/*1210*/ DWORD cbData;
/*1211*/ }PRINTER_ENUM_VALUESW,*PPRINTER_ENUM_VALUESW,*LPPRINTER_ENUM_VALUESW;
/*1217*/ typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
/*1218*/ typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
/*1219*/ typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
/*1222*/ BOOL
/*1223*/ typ
/*1224*/ EnumPrintersA(
/*1225*/ typ typ typ typ typ DWORD Flags,
/*1226*/ typ typ typ typ typ typ typ LPSTR Name,
/*1227*/ DWORD Level,
/*1228*/ typ typ typ typ typ typ typ
/*1229*/ LPBYTE pPrinterEnum,
/*1230*/ DWORD cbBuf,
/*1231*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1232*/ typ typ typ typ typ LPDWORD pcReturned
/*1233*/ );
/*1234*/ BOOL
/*1235*/ typ
/*1236*/ EnumPrintersW(
/*1237*/ typ typ typ typ typ DWORD Flags,
/*1238*/ typ typ typ typ typ typ typ LPWSTR Name,
/*1239*/ DWORD Level,
/*1240*/ typ typ typ typ typ typ typ
/*1241*/ LPBYTE pPrinterEnum,
/*1242*/ DWORD cbBuf,
/*1243*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1244*/ typ typ typ typ typ LPDWORD pcReturned
/*1245*/ );
/*1281*/ HANDLE
/*1282*/ typ
/*1283*/ GetSpoolFileHandle(
/*1284*/ typ typ typ typ typ HANDLE hPrinter
/*1285*/ );
/*1287*/ HANDLE
/*1288*/ typ
/*1289*/ CommitSpoolData(
/*1290*/ typ typ typ typ typ HANDLE hPrinter,
/*1291*/ typ typ typ typ typ HANDLE hSpoolFile,
/*1292*/ DWORD cbCommit
/*1293*/ );
/*1295*/ BOOL
/*1296*/ typ
/*1297*/ CloseSpoolFileHandle(
/*1298*/ typ typ typ typ typ HANDLE hPrinter,
/*1299*/ typ typ typ typ typ HANDLE hSpoolFile
/*1300*/ );
/*1302*/ BOOL
/*1303*/ typ
/*1304*/ OpenPrinterA(
/*1305*/ typ typ typ typ typ typ typ LPSTR pPrinterName,
/*1306*/ typ typ typ typ typ LPHANDLE phPrinter,
/*1307*/ typ typ typ typ typ typ typ LPPRINTER_DEFAULTSA pDefault
/*1308*/ );
/*1309*/ BOOL
/*1310*/ typ
/*1311*/ OpenPrinterW(
/*1312*/ typ typ typ typ typ typ typ LPWSTR pPrinterName,
/*1313*/ typ typ typ typ typ LPHANDLE phPrinter,
/*1314*/ typ typ typ typ typ typ typ LPPRINTER_DEFAULTSW pDefault
/*1315*/ );
/*1322*/ BOOL
/*1323*/ typ
/*1324*/ ResetPrinterA(
/*1325*/ typ typ typ typ typ HANDLE hPrinter,
/*1326*/ typ typ typ typ typ typ typ LPPRINTER_DEFAULTSA pDefault
/*1327*/ );
/*1328*/ BOOL
/*1329*/ typ
/*1330*/ ResetPrinterW(
/*1331*/ typ typ typ typ typ HANDLE hPrinter,
/*1332*/ typ typ typ typ typ typ typ LPPRINTER_DEFAULTSW pDefault
/*1333*/ );
/*1340*/ BOOL
/*1341*/ typ
/*1342*/ SetJobA(
/*1343*/ typ typ typ typ typ HANDLE hPrinter,
/*1344*/ DWORD JobId,
/*1345*/ DWORD Level,
/*1346*/ typ typ typ typ typ typ typ LPBYTE pJob,
/*1347*/ DWORD Command
/*1348*/ );
/*1349*/ BOOL
/*1350*/ typ
/*1351*/ SetJobW(
/*1352*/ typ typ typ typ typ HANDLE hPrinter,
/*1353*/ DWORD JobId,
/*1354*/ DWORD Level,
/*1355*/ typ typ typ typ typ typ typ LPBYTE pJob,
/*1356*/ DWORD Command
/*1357*/ );
/*1364*/ BOOL
/*1365*/ typ
/*1366*/ GetJobA(
/*1367*/ typ typ typ typ typ HANDLE hPrinter,
/*1368*/ DWORD JobId,
/*1369*/ DWORD Level,
/*1370*/ typ typ typ typ typ typ typ
/*1371*/ LPBYTE pJob,
/*1372*/ DWORD cbBuf,
/*1373*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1374*/ );
/*1375*/ BOOL
/*1376*/ typ
/*1377*/ GetJobW(
/*1378*/ typ typ typ typ typ HANDLE hPrinter,
/*1379*/ DWORD JobId,
/*1380*/ DWORD Level,
/*1381*/ typ typ typ typ typ typ typ
/*1382*/ LPBYTE pJob,
/*1383*/ DWORD cbBuf,
/*1384*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1385*/ );
/*1392*/ BOOL
/*1393*/ typ
/*1394*/ EnumJobsA(
/*1395*/ typ typ typ typ typ HANDLE hPrinter,
/*1396*/ DWORD FirstJob,
/*1397*/ DWORD NoJobs,
/*1398*/ DWORD Level,
/*1399*/ typ typ typ typ typ typ typ
/*1400*/ LPBYTE pJob,
/*1401*/ DWORD cbBuf,
/*1402*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1403*/ typ typ typ typ typ LPDWORD pcReturned
/*1404*/ );
/*1405*/ BOOL
/*1406*/ typ
/*1407*/ EnumJobsW(
/*1408*/ typ typ typ typ typ HANDLE hPrinter,
/*1409*/ DWORD FirstJob,
/*1410*/ DWORD NoJobs,
/*1411*/ DWORD Level,
/*1412*/ typ typ typ typ typ typ typ
/*1413*/ LPBYTE pJob,
/*1414*/ DWORD cbBuf,
/*1415*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1416*/ typ typ typ typ typ LPDWORD pcReturned
/*1417*/ );
/*1424*/ HANDLE
/*1425*/ typ
/*1426*/ AddPrinterA(
/*1427*/ typ typ typ typ typ typ typ LPSTR pName,
/*1428*/ DWORD Level,
/*1429*/ typ typ typ typ typ LPBYTE pPrinter
/*1430*/ );
/*1431*/ HANDLE
/*1432*/ typ
/*1433*/ AddPrinterW(
/*1434*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1435*/ DWORD Level,
/*1436*/ typ typ typ typ typ LPBYTE pPrinter
/*1437*/ );
/*1444*/ BOOL
/*1445*/ typ
/*1446*/ DeletePrinter(
/*1447*/ typ typ typ typ typ HANDLE hPrinter
/*1448*/ );
/*1450*/ BOOL
/*1451*/ typ
/*1452*/ SetPrinterA(
/*1453*/ typ typ typ typ typ HANDLE hPrinter,
/*1454*/ DWORD Level,
/*1455*/ typ typ typ typ typ typ typ LPBYTE pPrinter,
/*1456*/ DWORD Command
/*1457*/ );
/*1458*/ BOOL
/*1459*/ typ
/*1460*/ SetPrinterW(
/*1461*/ typ typ typ typ typ HANDLE hPrinter,
/*1462*/ DWORD Level,
/*1463*/ typ typ typ typ typ typ typ LPBYTE pPrinter,
/*1464*/ DWORD Command
/*1465*/ );
/*1472*/ BOOL
/*1473*/ typ
/*1474*/ GetPrinterA(
/*1475*/ typ typ typ typ typ HANDLE hPrinter,
/*1476*/ DWORD Level,
/*1477*/ typ typ typ typ typ typ typ
/*1478*/ LPBYTE pPrinter,
/*1479*/ DWORD cbBuf,
/*1480*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1481*/ );
/*1482*/ BOOL
/*1483*/ typ
/*1484*/ GetPrinterW(
/*1485*/ typ typ typ typ typ HANDLE hPrinter,
/*1486*/ DWORD Level,
/*1487*/ typ typ typ typ typ typ typ
/*1488*/ LPBYTE pPrinter,
/*1489*/ DWORD cbBuf,
/*1490*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1491*/ );
/*1498*/ BOOL
/*1499*/ typ
/*1500*/ AddPrinterDriverA(
/*1501*/ typ typ typ typ typ typ typ LPSTR pName,
/*1502*/ DWORD Level,
/*1503*/ typ typ typ typ typ LPBYTE pDriverInfo
/*1504*/ );
/*1505*/ BOOL
/*1506*/ typ
/*1507*/ AddPrinterDriverW(
/*1508*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1509*/ DWORD Level,
/*1510*/ typ typ typ typ typ LPBYTE pDriverInfo
/*1511*/ );
/*1518*/ BOOL
/*1519*/ typ
/*1520*/ AddPrinterDriverExA(
/*1521*/ typ typ typ typ typ typ typ LPSTR pName,
/*1522*/ DWORD Level,
/*1523*/ typ typ typ typ typ LPBYTE pDriverInfo,
/*1524*/ DWORD dwFileCopyFlags
/*1525*/ );
/*1526*/ BOOL
/*1527*/ typ
/*1528*/ AddPrinterDriverExW(
/*1529*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1530*/ DWORD Level,
/*1531*/ typ typ typ typ typ LPBYTE pDriverInfo,
/*1532*/ DWORD dwFileCopyFlags
/*1533*/ );
/*1540*/ BOOL
/*1541*/ typ
/*1542*/ EnumPrinterDriversA(
/*1543*/ typ typ typ typ typ typ typ LPSTR pName,
/*1544*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1545*/ DWORD Level,
/*1546*/ typ typ typ typ typ typ typ
/*1547*/ LPBYTE pDriverInfo,
/*1548*/ DWORD cbBuf,
/*1549*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1550*/ typ typ typ typ typ LPDWORD pcReturned
/*1551*/ );
/*1552*/ BOOL
/*1553*/ typ
/*1554*/ EnumPrinterDriversW(
/*1555*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1556*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1557*/ DWORD Level,
/*1558*/ typ typ typ typ typ typ typ
/*1559*/ LPBYTE pDriverInfo,
/*1560*/ DWORD cbBuf,
/*1561*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1562*/ typ typ typ typ typ LPDWORD pcReturned
/*1563*/ );
/*1570*/ BOOL
/*1571*/ typ
/*1572*/ GetPrinterDriverA(
/*1573*/ typ typ typ typ typ HANDLE hPrinter,
/*1574*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1575*/ DWORD Level,
/*1576*/ typ typ typ typ typ typ typ
/*1577*/ LPBYTE pDriverInfo,
/*1578*/ DWORD cbBuf,
/*1579*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1580*/ );
/*1581*/ BOOL
/*1582*/ typ
/*1583*/ GetPrinterDriverW(
/*1584*/ typ typ typ typ typ HANDLE hPrinter,
/*1585*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1586*/ DWORD Level,
/*1587*/ typ typ typ typ typ typ typ
/*1588*/ LPBYTE pDriverInfo,
/*1589*/ DWORD cbBuf,
/*1590*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1591*/ );
/*1598*/ BOOL
/*1599*/ typ
/*1600*/ GetPrinterDriverDirectoryA(
/*1601*/ typ typ typ typ typ typ typ LPSTR pName,
/*1602*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1603*/ DWORD Level,
/*1604*/ typ typ typ typ typ typ typ
/*1605*/ LPBYTE pDriverDirectory,
/*1606*/ DWORD cbBuf,
/*1607*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1608*/ );
/*1609*/ BOOL
/*1610*/ typ
/*1611*/ GetPrinterDriverDirectoryW(
/*1612*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1613*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1614*/ DWORD Level,
/*1615*/ typ typ typ typ typ typ typ
/*1616*/ LPBYTE pDriverDirectory,
/*1617*/ DWORD cbBuf,
/*1618*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1619*/ );
/*1626*/ BOOL
/*1627*/ typ
/*1628*/ DeletePrinterDriverA(
/*1629*/ typ typ typ typ typ typ typ LPSTR pName,
/*1630*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1631*/ typ typ typ typ typ LPSTR pDriverName
/*1632*/ );
/*1633*/ BOOL
/*1634*/ typ
/*1635*/ DeletePrinterDriverW(
/*1636*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1637*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1638*/ typ typ typ typ typ LPWSTR pDriverName
/*1639*/ );
/*1646*/ BOOL
/*1647*/ typ
/*1648*/ DeletePrinterDriverExA(
/*1649*/ typ typ typ typ typ typ typ LPSTR pName,
/*1650*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1651*/ typ typ typ typ typ LPSTR pDriverName,
/*1652*/ DWORD dwDeleteFlag,
/*1653*/ DWORD dwVersionFlag
/*1654*/ );
/*1655*/ BOOL
/*1656*/ typ
/*1657*/ DeletePrinterDriverExW(
/*1658*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1659*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1660*/ typ typ typ typ typ LPWSTR pDriverName,
/*1661*/ DWORD dwDeleteFlag,
/*1662*/ DWORD dwVersionFlag
/*1663*/ );
/*1672*/ BOOL
/*1673*/ typ
/*1674*/ AddPrintProcessorA(
/*1675*/ typ typ typ typ typ typ typ LPSTR pName,
/*1676*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1677*/ typ typ typ typ typ LPSTR pPathName,
/*1678*/ typ typ typ typ typ LPSTR pPrintProcessorName
/*1679*/ );
/*1680*/ BOOL
/*1681*/ typ
/*1682*/ AddPrintProcessorW(
/*1683*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1684*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1685*/ typ typ typ typ typ LPWSTR pPathName,
/*1686*/ typ typ typ typ typ LPWSTR pPrintProcessorName
/*1687*/ );
/*1694*/ BOOL
/*1695*/ typ
/*1696*/ EnumPrintProcessorsA(
/*1697*/ typ typ typ typ typ typ typ LPSTR pName,
/*1698*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1699*/ DWORD Level,
/*1700*/ typ typ typ typ typ typ typ
/*1701*/ LPBYTE pPrintProcessorInfo,
/*1702*/ DWORD cbBuf,
/*1703*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1704*/ typ typ typ typ typ LPDWORD pcReturned
/*1705*/ );
/*1706*/ BOOL
/*1707*/ typ
/*1708*/ EnumPrintProcessorsW(
/*1709*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1710*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1711*/ DWORD Level,
/*1712*/ typ typ typ typ typ typ typ
/*1713*/ LPBYTE pPrintProcessorInfo,
/*1714*/ DWORD cbBuf,
/*1715*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1716*/ typ typ typ typ typ LPDWORD pcReturned
/*1717*/ );
/*1726*/ BOOL
/*1727*/ typ
/*1728*/ GetPrintProcessorDirectoryA(
/*1729*/ typ typ typ typ typ typ typ LPSTR pName,
/*1730*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1731*/ DWORD Level,
/*1732*/ typ typ typ typ typ typ typ
/*1733*/ LPBYTE pPrintProcessorInfo,
/*1734*/ DWORD cbBuf,
/*1735*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1736*/ );
/*1737*/ BOOL
/*1738*/ typ
/*1739*/ GetPrintProcessorDirectoryW(
/*1740*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1741*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1742*/ DWORD Level,
/*1743*/ typ typ typ typ typ typ typ
/*1744*/ LPBYTE pPrintProcessorInfo,
/*1745*/ DWORD cbBuf,
/*1746*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1747*/ );
/*1754*/ BOOL
/*1755*/ typ
/*1756*/ EnumPrintProcessorDatatypesA(
/*1757*/ typ typ typ typ typ typ typ LPSTR pName,
/*1758*/ typ typ typ typ typ LPSTR pPrintProcessorName,
/*1759*/ DWORD Level,
/*1760*/ typ typ typ typ typ typ typ
/*1761*/ LPBYTE pDatatypes,
/*1762*/ DWORD cbBuf,
/*1763*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1764*/ typ typ typ typ typ LPDWORD pcReturned
/*1765*/ );
/*1766*/ BOOL
/*1767*/ typ
/*1768*/ EnumPrintProcessorDatatypesW(
/*1769*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1770*/ typ typ typ typ typ LPWSTR pPrintProcessorName,
/*1771*/ DWORD Level,
/*1772*/ typ typ typ typ typ typ typ
/*1773*/ LPBYTE pDatatypes,
/*1774*/ DWORD cbBuf,
/*1775*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*1776*/ typ typ typ typ typ LPDWORD pcReturned
/*1777*/ );
/*1784*/ BOOL
/*1785*/ typ
/*1786*/ DeletePrintProcessorA(
/*1787*/ typ typ typ typ typ typ typ LPSTR pName,
/*1788*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*1789*/ typ typ typ typ typ LPSTR pPrintProcessorName
/*1790*/ );
/*1791*/ BOOL
/*1792*/ typ
/*1793*/ DeletePrintProcessorW(
/*1794*/ typ typ typ typ typ typ typ LPWSTR pName,
/*1795*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*1796*/ typ typ typ typ typ LPWSTR pPrintProcessorName
/*1797*/ );
/*1804*/ DWORD
/*1805*/ typ
/*1806*/ StartDocPrinterA(
/*1807*/ typ typ typ typ typ HANDLE hPrinter,
/*1808*/ DWORD Level,
/*1809*/ typ typ typ typ typ LPBYTE pDocInfo
/*1810*/ );
/*1811*/ DWORD
/*1812*/ typ
/*1813*/ StartDocPrinterW(
/*1814*/ typ typ typ typ typ HANDLE hPrinter,
/*1815*/ DWORD Level,
/*1816*/ typ typ typ typ typ LPBYTE pDocInfo
/*1817*/ );
/*1824*/ BOOL
/*1825*/ typ
/*1826*/ StartPagePrinter(
/*1827*/ typ typ typ typ typ HANDLE hPrinter
/*1828*/ );
/*1830*/ BOOL
/*1831*/ typ
/*1832*/ WritePrinter(
/*1833*/ typ typ typ typ typ HANDLE hPrinter,
/*1834*/ typ typ typ typ typ typ typ
/*1835*/ LPVOID pBuf,
/*1836*/ DWORD cbBuf,
/*1837*/ typ typ typ typ typ LPDWORD pcWritten
/*1838*/ );
/*1841*/ BOOL
/*1842*/ typ
/*1843*/ FlushPrinter(
/*1844*/ typ typ typ typ typ HANDLE hPrinter,
/*1845*/ typ typ typ typ typ typ typ typ typ
/*1846*/ LPVOID pBuf,
/*1847*/ DWORD cbBuf,
/*1848*/ typ typ typ typ typ LPDWORD pcWritten,
/*1849*/ DWORD cSleep
/*1850*/ );
/*1852*/ BOOL
/*1853*/ typ
/*1854*/ EndPagePrinter(
/*1855*/ typ typ typ typ typ HANDLE hPrinter
/*1856*/ );
/*1858*/ BOOL
/*1859*/ typ
/*1860*/ AbortPrinter(
/*1861*/ typ typ typ typ typ HANDLE hPrinter
/*1862*/ );
/*1864*/ BOOL
/*1865*/ typ
/*1866*/ ReadPrinter(
/*1867*/ typ typ typ typ typ HANDLE hPrinter,
/*1868*/ typ typ typ typ typ
/*1869*/ LPVOID pBuf,
/*1870*/ DWORD cbBuf,
/*1871*/ typ typ typ typ typ LPDWORD pNoBytesRead
/*1872*/ );
/*1874*/ BOOL
/*1875*/ typ
/*1876*/ EndDocPrinter(
/*1877*/ typ HANDLE hPrinter
/*1878*/ );
/*1880*/ BOOL
/*1881*/ typ
/*1882*/ AddJobA(
/*1883*/ typ typ typ typ typ HANDLE hPrinter,
/*1884*/ DWORD Level,
/*1885*/ typ typ typ typ typ typ typ
/*1886*/ LPBYTE pData,
/*1887*/ DWORD cbBuf,
/*1888*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1889*/ );
/*1890*/ BOOL
/*1891*/ typ
/*1892*/ AddJobW(
/*1893*/ typ typ typ typ typ HANDLE hPrinter,
/*1894*/ DWORD Level,
/*1895*/ typ typ typ typ typ typ typ
/*1896*/ LPBYTE pData,
/*1897*/ DWORD cbBuf,
/*1898*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1899*/ );
/*1906*/ BOOL
/*1907*/ typ
/*1908*/ ScheduleJob(
/*1909*/ typ typ typ typ typ HANDLE hPrinter,
/*1910*/ DWORD JobId
/*1911*/ );
/*1913*/ BOOL
/*1914*/ typ
/*1915*/ PrinterProperties(
/*1916*/ typ typ typ typ typ HWND hWnd,
/*1917*/ typ typ typ typ typ HANDLE hPrinter
/*1918*/ );
/*1920*/ LONG
/*1921*/ typ
/*1922*/ DocumentPropertiesA(
/*1923*/ typ typ typ typ typ typ typ HWND hWnd,
/*1924*/ typ typ typ typ typ HANDLE hPrinter,
/*1925*/ typ typ typ typ typ LPSTR pDeviceName,
/*1926*/ typ typ typ typ typ typ typ PDEVMODEA pDevModeOutput,
/*1927*/ typ typ typ typ typ typ typ PDEVMODEA pDevModeInput,
/*1928*/ DWORD fMode
/*1929*/ );
/*1930*/ LONG
/*1931*/ typ
/*1932*/ DocumentPropertiesW(
/*1933*/ typ typ typ typ typ typ typ HWND hWnd,
/*1934*/ typ typ typ typ typ HANDLE hPrinter,
/*1935*/ typ typ typ typ typ LPWSTR pDeviceName,
/*1936*/ typ typ typ typ typ typ typ PDEVMODEW pDevModeOutput,
/*1937*/ typ typ typ typ typ typ typ PDEVMODEW pDevModeInput,
/*1938*/ DWORD fMode
/*1939*/ );
/*1946*/ LONG
/*1947*/ typ
/*1948*/ AdvancedDocumentPropertiesA(
/*1949*/ typ typ typ typ typ HWND hWnd,
/*1950*/ typ typ typ typ typ HANDLE hPrinter,
/*1951*/ typ typ typ typ typ LPSTR pDeviceName,
/*1952*/ typ typ typ typ typ typ typ PDEVMODEA pDevModeOutput,
/*1953*/ typ typ typ typ typ typ typ PDEVMODEA pDevModeInput
/*1954*/ );
/*1955*/ LONG
/*1956*/ typ
/*1957*/ AdvancedDocumentPropertiesW(
/*1958*/ typ typ typ typ typ HWND hWnd,
/*1959*/ typ typ typ typ typ HANDLE hPrinter,
/*1960*/ typ typ typ typ typ LPWSTR pDeviceName,
/*1961*/ typ typ typ typ typ typ typ PDEVMODEW pDevModeOutput,
/*1962*/ typ typ typ typ typ typ typ PDEVMODEW pDevModeInput
/*1963*/ );
/*1971*/ LONG
/*1972*/ ExtDeviceMode(
/*1973*/ typ typ typ typ typ HWND hWnd,
/*1974*/ typ typ typ typ typ HANDLE hInst,
/*1975*/ typ typ typ typ typ typ typ LPDEVMODEA pDevModeOutput,
/*1976*/ typ typ typ typ typ typ typ LPSTR pDeviceName,
/*1977*/ typ typ typ typ typ typ typ LPSTR pPort,
/*1978*/ typ typ typ typ typ typ typ LPDEVMODEA pDevModeInput,
/*1979*/ typ typ typ typ typ typ typ LPSTR pProfile,
/*1980*/ DWORD fMode
/*1981*/ );
/*1985*/ DWORD
/*1986*/ typ
/*1987*/ GetPrinterDataA(
/*1988*/ typ typ typ typ typ HANDLE hPrinter,
/*1989*/ typ typ typ typ typ LPSTR pValueName,
/*1990*/ typ typ typ typ typ typ typ LPDWORD pType,
/*1991*/ typ typ typ typ typ typ typ
/*1992*/ LPBYTE pData,
/*1993*/ DWORD nSize,
/*1994*/ typ typ typ typ typ LPDWORD pcbNeeded
/*1995*/ );
/*1996*/ DWORD
/*1997*/ typ
/*1998*/ GetPrinterDataW(
/*1999*/ typ typ typ typ typ HANDLE hPrinter,
/*2000*/ typ typ typ typ typ LPWSTR pValueName,
/*2001*/ typ typ typ typ typ typ typ LPDWORD pType,
/*2002*/ typ typ typ typ typ typ typ
/*2003*/ LPBYTE pData,
/*2004*/ DWORD nSize,
/*2005*/ typ typ typ typ typ LPDWORD pcbNeeded
/*2006*/ );
/*2013*/ DWORD
/*2014*/ typ
/*2015*/ GetPrinterDataExA(
/*2016*/ typ typ typ typ typ HANDLE hPrinter,
/*2017*/ typ typ typ typ typ LPCSTR pKeyName,
/*2018*/ typ typ typ typ typ LPCSTR pValueName,
/*2019*/ typ typ typ typ typ typ typ LPDWORD pType,
/*2020*/ typ typ typ typ typ typ typ
/*2021*/ LPBYTE pData,
/*2022*/ DWORD nSize,
/*2023*/ typ typ typ typ typ LPDWORD pcbNeeded
/*2024*/ );
/*2025*/ DWORD
/*2026*/ typ
/*2027*/ GetPrinterDataExW(
/*2028*/ typ typ typ typ typ HANDLE hPrinter,
/*2029*/ typ typ typ typ typ LPCWSTR pKeyName,
/*2030*/ typ typ typ typ typ LPCWSTR pValueName,
/*2031*/ typ typ typ typ typ typ typ LPDWORD pType,
/*2032*/ typ typ typ typ typ typ typ
/*2033*/ LPBYTE pData,
/*2034*/ DWORD nSize,
/*2035*/ typ typ typ typ typ LPDWORD pcbNeeded
/*2036*/ );
/*2043*/ DWORD
/*2044*/ typ
/*2045*/ EnumPrinterDataA(
/*2046*/ typ typ typ typ typ HANDLE hPrinter,
/*2047*/ DWORD dwIndex,
/*2048*/ typ typ typ typ typ
/*2049*/ LPSTR pValueName,
/*2050*/ DWORD cbValueName,
/*2051*/ typ typ typ typ typ LPDWORD pcbValueName,
/*2052*/ typ typ typ typ typ typ typ LPDWORD pType,
/*2053*/ LPBYTE pData,
/*2054*/ DWORD cbData,
/*2055*/ typ typ typ typ typ typ typ LPDWORD pcbData
/*2056*/ );
/*2057*/ DWORD
/*2058*/ typ
/*2059*/ EnumPrinterDataW(
/*2060*/ typ typ typ typ typ HANDLE hPrinter,
/*2061*/ DWORD dwIndex,
/*2062*/ typ typ typ typ typ
/*2063*/ LPWSTR pValueName,
/*2064*/ DWORD cbValueName,
/*2065*/ typ typ typ typ typ LPDWORD pcbValueName,
/*2066*/ typ typ typ typ typ typ typ LPDWORD pType,
/*2067*/ LPBYTE pData,
/*2068*/ DWORD cbData,
/*2069*/ typ typ typ typ typ typ typ LPDWORD pcbData
/*2070*/ );
/*2077*/ DWORD
/*2078*/ typ
/*2079*/ EnumPrinterDataExA(
/*2080*/ typ typ typ typ typ HANDLE hPrinter,
/*2081*/ typ typ typ typ typ LPCSTR pKeyName,
/*2082*/ typ typ typ typ typ typ typ
/*2083*/ LPBYTE pEnumValues,
/*2084*/ DWORD cbEnumValues,
/*2085*/ typ typ typ typ typ LPDWORD pcbEnumValues,
/*2086*/ typ typ typ typ typ LPDWORD pnEnumValues
/*2087*/ );
/*2088*/ DWORD
/*2089*/ typ
/*2090*/ EnumPrinterDataExW(
/*2091*/ typ typ typ typ typ HANDLE hPrinter,
/*2092*/ typ typ typ typ typ LPCWSTR pKeyName,
/*2093*/ typ typ typ typ typ typ typ
/*2094*/ LPBYTE pEnumValues,
/*2095*/ DWORD cbEnumValues,
/*2096*/ typ typ typ typ typ LPDWORD pcbEnumValues,
/*2097*/ typ typ typ typ typ LPDWORD pnEnumValues
/*2098*/ );
/*2105*/ DWORD
/*2106*/ typ
/*2107*/ EnumPrinterKeyA(
/*2108*/ typ typ typ typ typ HANDLE hPrinter,
/*2109*/ typ typ typ typ typ LPCSTR pKeyName,
/*2110*/ typ typ typ typ typ typ typ
/*2111*/ LPSTR pSubkey,
/*2112*/ DWORD cbSubkey,
/*2113*/ typ typ typ typ typ LPDWORD pcbSubkey
/*2114*/ );
/*2115*/ DWORD
/*2116*/ typ
/*2117*/ EnumPrinterKeyW(
/*2118*/ typ typ typ typ typ HANDLE hPrinter,
/*2119*/ typ typ typ typ typ LPCWSTR pKeyName,
/*2120*/ typ typ typ typ typ typ typ
/*2121*/ LPWSTR pSubkey,
/*2122*/ DWORD cbSubkey,
/*2123*/ typ typ typ typ typ LPDWORD pcbSubkey
/*2124*/ );
/*2132*/ DWORD
/*2133*/ typ
/*2134*/ SetPrinterDataA(
/*2135*/ typ typ typ typ typ HANDLE hPrinter,
/*2136*/ typ typ typ typ typ LPSTR pValueName,
/*2137*/ DWORD Type,
/*2138*/ typ typ typ typ typ typ typ
/*2139*/ LPBYTE pData,
/*2140*/ DWORD cbData
/*2141*/ );
/*2142*/ DWORD
/*2143*/ typ
/*2144*/ SetPrinterDataW(
/*2145*/ typ typ typ typ typ HANDLE hPrinter,
/*2146*/ typ typ typ typ typ LPWSTR pValueName,
/*2147*/ DWORD Type,
/*2148*/ typ typ typ typ typ typ typ
/*2149*/ LPBYTE pData,
/*2150*/ DWORD cbData
/*2151*/ );
/*2159*/ DWORD
/*2160*/ typ
/*2161*/ SetPrinterDataExA(
/*2162*/ typ typ typ typ typ HANDLE hPrinter,
/*2163*/ typ typ typ typ typ LPCSTR pKeyName,
/*2164*/ typ typ typ typ typ LPCSTR pValueName,
/*2165*/ DWORD Type,
/*2166*/ typ typ typ typ typ typ typ
/*2167*/ LPBYTE pData,
/*2168*/ DWORD cbData
/*2169*/ );
/*2170*/ DWORD
/*2171*/ typ
/*2172*/ SetPrinterDataExW(
/*2173*/ typ typ typ typ typ HANDLE hPrinter,
/*2174*/ typ typ typ typ typ LPCWSTR pKeyName,
/*2175*/ typ typ typ typ typ LPCWSTR pValueName,
/*2176*/ DWORD Type,
/*2177*/ typ typ typ typ typ typ typ
/*2178*/ LPBYTE pData,
/*2179*/ DWORD cbData
/*2180*/ );
/*2189*/ DWORD
/*2190*/ typ
/*2191*/ DeletePrinterDataA(
/*2192*/ typ typ typ typ typ HANDLE hPrinter,
/*2193*/ typ typ typ typ typ LPSTR pValueName
/*2194*/ );
/*2195*/ DWORD
/*2196*/ typ
/*2197*/ DeletePrinterDataW(
/*2198*/ typ typ typ typ typ HANDLE hPrinter,
/*2199*/ typ typ typ typ typ LPWSTR pValueName
/*2200*/ );
/*2208*/ DWORD
/*2209*/ typ
/*2210*/ DeletePrinterDataExA(
/*2211*/ typ typ typ typ typ HANDLE hPrinter,
/*2212*/ typ typ typ typ typ LPCSTR pKeyName,
/*2213*/ typ typ typ typ typ LPCSTR pValueName
/*2214*/ );
/*2215*/ DWORD
/*2216*/ typ
/*2217*/ DeletePrinterDataExW(
/*2218*/ typ typ typ typ typ HANDLE hPrinter,
/*2219*/ typ typ typ typ typ LPCWSTR pKeyName,
/*2220*/ typ typ typ typ typ LPCWSTR pValueName
/*2221*/ );
/*2229*/ DWORD
/*2230*/ typ
/*2231*/ DeletePrinterKeyA(
/*2232*/ typ typ typ typ typ HANDLE hPrinter,
/*2233*/ typ typ typ typ typ LPCSTR pKeyName
/*2234*/ );
/*2235*/ DWORD
/*2236*/ typ
/*2237*/ DeletePrinterKeyW(
/*2238*/ typ typ typ typ typ HANDLE hPrinter,
/*2239*/ typ typ typ typ typ LPCWSTR pKeyName
/*2240*/ );
/*2310*/ typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE{
/*2311*/ WORD Type;
/*2312*/ WORD Reserved0;
/*2313*/ DWORD Reserved1;
/*2314*/ DWORD Reserved2;
/*2315*/ DWORD Count;
/*2316*/ PWORD pFields;
/*2317*/ }PRINTER_NOTIFY_OPTIONS_TYPE,*PPRINTER_NOTIFY_OPTIONS_TYPE,*LPPRINTER_NOTIFY_OPTIONS_TYPE;
/*2322*/ typedef struct _PRINTER_NOTIFY_OPTIONS{
/*2323*/ DWORD Version;
/*2324*/ DWORD Flags;
/*2325*/ DWORD Count;
/*2326*/ PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
/*2327*/ }PRINTER_NOTIFY_OPTIONS,*PPRINTER_NOTIFY_OPTIONS,*LPPRINTER_NOTIFY_OPTIONS;
/*2333*/ typedef struct _PRINTER_NOTIFY_INFO_DATA{
/*2334*/ WORD Type;
/*2335*/ WORD Field;
/*2336*/ DWORD Reserved;
/*2337*/ DWORD Id;
/*2338*/ union{
/*2339*/ DWORD adwData[2];
/*2340*/ struct{
/*2341*/ DWORD cbBuf;
/*2342*/ LPVOID pBuf;
/*2343*/ }Data;
/*2344*/ }NotifyData;
/*2345*/ }PRINTER_NOTIFY_INFO_DATA,*PPRINTER_NOTIFY_INFO_DATA,*LPPRINTER_NOTIFY_INFO_DATA;
/*2347*/ typedef struct _PRINTER_NOTIFY_INFO{
/*2348*/ DWORD Version;
/*2349*/ DWORD Flags;
/*2350*/ DWORD Count;
/*2351*/ PRINTER_NOTIFY_INFO_DATA aData[1];
/*2352*/ }PRINTER_NOTIFY_INFO,*PPRINTER_NOTIFY_INFO,*LPPRINTER_NOTIFY_INFO;
/*2355*/ typedef struct _BINARY_CONTAINER{
/*2356*/ DWORD cbBuf;
/*2357*/ LPBYTE pData;
/*2358*/ }BINARY_CONTAINER,*PBINARY_CONTAINER;
/*2361*/ typedef struct _BIDI_DATA{
/*2362*/ DWORD dwBidiType;
/*2363*/ union{
/*2364*/ BOOL bData;
/*2365*/ LONG iData;
/*2366*/ LPWSTR sData;
/*2367*/ FLOAT fData;
/*2368*/ BINARY_CONTAINER biData;
/*2369*/ }u;
/*2370*/ }BIDI_DATA,*PBIDI_DATA,*LPBIDI_DATA;
/*2373*/ typedef struct _BIDI_REQUEST_DATA{
/*2374*/ DWORD dwReqNumber;
/*2375*/ LPWSTR pSchema;
/*2376*/ BIDI_DATA data;
/*2377*/ }BIDI_REQUEST_DATA,*PBIDI_REQUEST_DATA,*LPBIDI_REQUEST_DATA;
/*2380*/ typedef struct _BIDI_REQUEST_CONTAINER{
/*2381*/ DWORD Version;
/*2382*/ DWORD Flags;
/*2383*/ DWORD Count;
/*2384*/ BIDI_REQUEST_DATA aData[1];
/*2385*/ }BIDI_REQUEST_CONTAINER,*PBIDI_REQUEST_CONTAINER,*LPBIDI_REQUEST_CONTAINER;
/*2387*/ typedef struct _BIDI_RESPONSE_DATA{
/*2388*/ DWORD dwResult;
/*2389*/ DWORD dwReqNumber;
/*2390*/ LPWSTR pSchema;
/*2391*/ BIDI_DATA data;
/*2392*/ }BIDI_RESPONSE_DATA,*PBIDI_RESPONSE_DATA,*LPBIDI_RESPONSE_DATA;
/*2394*/ typedef struct _BIDI_RESPONSE_CONTAINER{
/*2395*/ DWORD Version;
/*2396*/ DWORD Flags;
/*2397*/ DWORD Count;
/*2398*/ BIDI_RESPONSE_DATA aData[1];
/*2399*/ }BIDI_RESPONSE_CONTAINER,*PBIDI_RESPONSE_CONTAINER,*LPBIDI_RESPONSE_CONTAINER;
/*2406*/ typedef enum{
/*2407*/ BIDI_NULL=0,
/*2408*/ BIDI_INT=1,
/*2409*/ BIDI_FLOAT=2,
/*2410*/ BIDI_BOOL=3,
/*2411*/ BIDI_STRING=4,
/*2412*/ BIDI_TEXT=5,
/*2413*/ BIDI_ENUM=6,
/*2414*/ BIDI_BLOB=7
/*2415*/ }BIDI_TYPE;
/*2436*/ DWORD
/*2437*/ typ
/*2438*/ WaitForPrinterChange(
/*2439*/ typ typ typ typ typ HANDLE hPrinter,
/*2440*/ DWORD Flags
/*2441*/ );
/*2443*/ HANDLE
/*2444*/ typ
/*2445*/ FindFirstPrinterChangeNotification(
/*2446*/ typ typ typ typ typ HANDLE hPrinter,
/*2447*/ DWORD fdwFilter,
/*2448*/ DWORD fdwOptions,
/*2449*/ typ typ typ typ typ typ typ PVOID pPrinterNotifyOptions
/*2450*/ );
/*2453*/ BOOL
/*2454*/ typ
/*2455*/ FindNextPrinterChangeNotification(
/*2456*/ typ typ typ typ typ HANDLE hChange,
/*2457*/ typ typ typ typ typ typ typ PDWORD pdwChange,
/*2458*/ typ typ typ typ typ typ typ LPVOID pvReserved,
/*2459*/ typ typ typ typ typ typ typ LPVOID*ppPrinterNotifyInfo
/*2460*/ );
/*2462*/ BOOL
/*2463*/ typ
/*2464*/ FreePrinterNotifyInfo(
/*2465*/ typ typ typ typ typ PPRINTER_NOTIFY_INFO pPrinterNotifyInfo
/*2466*/ );
/*2468*/ BOOL
/*2469*/ typ
/*2470*/ FindClosePrinterChangeNotification(
/*2471*/ typ typ typ typ typ HANDLE hChange
/*2472*/ );
/*2502*/ DWORD
/*2503*/ typ
/*2504*/ PrinterMessageBoxA(
/*2505*/ typ typ typ typ typ HANDLE hPrinter,
/*2506*/ DWORD Error,
/*2507*/ typ typ typ typ typ HWND hWnd,
/*2508*/ typ typ typ typ typ LPSTR pText,
/*2509*/ typ typ typ typ typ LPSTR pCaption,
/*2510*/ DWORD dwType
/*2511*/ );
/*2512*/ DWORD
/*2513*/ typ
/*2514*/ PrinterMessageBoxW(
/*2515*/ typ typ typ typ typ HANDLE hPrinter,
/*2516*/ DWORD Error,
/*2517*/ typ typ typ typ typ HWND hWnd,
/*2518*/ typ typ typ typ typ LPWSTR pText,
/*2519*/ typ typ typ typ typ LPWSTR pCaption,
/*2520*/ DWORD dwType
/*2521*/ );
/*2538*/ BOOL
/*2539*/ typ
/*2540*/ ClosePrinter(
/*2541*/ typ typ typ typ typ HANDLE hPrinter
/*2542*/ );
/*2544*/ BOOL
/*2545*/ typ
/*2546*/ AddFormA(
/*2547*/ typ typ typ typ typ HANDLE hPrinter,
/*2548*/ DWORD Level,
/*2549*/ typ typ typ typ typ LPBYTE pForm
/*2550*/ );
/*2551*/ BOOL
/*2552*/ typ
/*2553*/ AddFormW(
/*2554*/ typ typ typ typ typ HANDLE hPrinter,
/*2555*/ DWORD Level,
/*2556*/ typ typ typ typ typ LPBYTE pForm
/*2557*/ );
/*2566*/ BOOL
/*2567*/ typ
/*2568*/ DeleteFormA(
/*2569*/ typ typ typ typ typ HANDLE hPrinter,
/*2570*/ typ typ typ typ typ LPSTR pFormName
/*2571*/ );
/*2572*/ BOOL
/*2573*/ typ
/*2574*/ DeleteFormW(
/*2575*/ typ typ typ typ typ HANDLE hPrinter,
/*2576*/ typ typ typ typ typ LPWSTR pFormName
/*2577*/ );
/*2586*/ BOOL
/*2587*/ typ
/*2588*/ GetFormA(
/*2589*/ typ typ typ typ typ HANDLE hPrinter,
/*2590*/ typ typ typ typ typ LPSTR pFormName,
/*2591*/ DWORD Level,
/*2592*/ typ typ typ typ typ typ typ
/*2593*/ LPBYTE pForm,
/*2594*/ DWORD cbBuf,
/*2595*/ typ typ typ typ typ LPDWORD pcbNeeded
/*2596*/ );
/*2597*/ BOOL
/*2598*/ typ
/*2599*/ GetFormW(
/*2600*/ typ typ typ typ typ HANDLE hPrinter,
/*2601*/ typ typ typ typ typ LPWSTR pFormName,
/*2602*/ DWORD Level,
/*2603*/ typ typ typ typ typ typ typ
/*2604*/ LPBYTE pForm,
/*2605*/ DWORD cbBuf,
/*2606*/ typ typ typ typ typ LPDWORD pcbNeeded
/*2607*/ );
/*2616*/ BOOL
/*2617*/ typ
/*2618*/ SetFormA(
/*2619*/ typ typ typ typ typ HANDLE hPrinter,
/*2620*/ typ typ typ typ typ LPSTR pFormName,
/*2621*/ DWORD Level,
/*2622*/ typ typ typ typ typ LPBYTE pForm
/*2623*/ );
/*2624*/ BOOL
/*2625*/ typ
/*2626*/ SetFormW(
/*2627*/ typ typ typ typ typ HANDLE hPrinter,
/*2628*/ typ typ typ typ typ LPWSTR pFormName,
/*2629*/ DWORD Level,
/*2630*/ typ typ typ typ typ LPBYTE pForm
/*2631*/ );
/*2640*/ BOOL
/*2641*/ typ
/*2642*/ EnumFormsA(
/*2643*/ typ typ typ typ typ HANDLE hPrinter,
/*2644*/ DWORD Level,
/*2645*/ typ typ typ typ typ typ typ
/*2646*/ LPBYTE pForm,
/*2647*/ DWORD cbBuf,
/*2648*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*2649*/ typ typ typ typ typ LPDWORD pcReturned
/*2650*/ );
/*2651*/ BOOL
/*2652*/ typ
/*2653*/ EnumFormsW(
/*2654*/ typ typ typ typ typ HANDLE hPrinter,
/*2655*/ DWORD Level,
/*2656*/ typ typ typ typ typ typ typ
/*2657*/ LPBYTE pForm,
/*2658*/ DWORD cbBuf,
/*2659*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*2660*/ typ typ typ typ typ LPDWORD pcReturned
/*2661*/ );
/*2669*/ BOOL
/*2670*/ typ
/*2671*/ EnumMonitorsA(
/*2672*/ typ typ typ typ typ typ typ LPSTR pName,
/*2673*/ DWORD Level,
/*2674*/ typ typ typ typ typ typ typ
/*2675*/ LPBYTE pMonitor,
/*2676*/ DWORD cbBuf,
/*2677*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*2678*/ typ typ typ typ typ LPDWORD pcReturned
/*2679*/ );
/*2680*/ BOOL
/*2681*/ typ
/*2682*/ EnumMonitorsW(
/*2683*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2684*/ DWORD Level,
/*2685*/ typ typ typ typ typ typ typ
/*2686*/ LPBYTE pMonitor,
/*2687*/ DWORD cbBuf,
/*2688*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*2689*/ typ typ typ typ typ LPDWORD pcReturned
/*2690*/ );
/*2699*/ BOOL
/*2700*/ typ
/*2701*/ AddMonitorA(
/*2702*/ typ typ typ typ typ typ typ LPSTR pName,
/*2703*/ DWORD Level,
/*2704*/ typ typ typ typ typ LPBYTE pMonitors
/*2705*/ );
/*2706*/ BOOL
/*2707*/ typ
/*2708*/ AddMonitorW(
/*2709*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2710*/ DWORD Level,
/*2711*/ typ typ typ typ typ LPBYTE pMonitors
/*2712*/ );
/*2721*/ BOOL
/*2722*/ typ
/*2723*/ DeleteMonitorA(
/*2724*/ typ typ typ typ typ typ typ LPSTR pName,
/*2725*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*2726*/ typ typ typ typ typ LPSTR pMonitorName
/*2727*/ );
/*2728*/ BOOL
/*2729*/ typ
/*2730*/ DeleteMonitorW(
/*2731*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2732*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*2733*/ typ typ typ typ typ LPWSTR pMonitorName
/*2734*/ );
/*2743*/ BOOL
/*2744*/ typ
/*2745*/ EnumPortsA(
/*2746*/ typ typ typ typ typ typ typ LPSTR pName,
/*2747*/ DWORD Level,
/*2748*/ typ typ typ typ typ typ typ
/*2749*/ LPBYTE pPort,
/*2750*/ DWORD cbBuf,
/*2751*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*2752*/ typ typ typ typ typ LPDWORD pcReturned
/*2753*/ );
/*2754*/ BOOL
/*2755*/ typ
/*2756*/ EnumPortsW(
/*2757*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2758*/ DWORD Level,
/*2759*/ typ typ typ typ typ typ typ
/*2760*/ LPBYTE pPort,
/*2761*/ DWORD cbBuf,
/*2762*/ typ typ typ typ typ LPDWORD pcbNeeded,
/*2763*/ typ typ typ typ typ LPDWORD pcReturned
/*2764*/ );
/*2772*/ BOOL
/*2773*/ typ
/*2774*/ AddPortA(
/*2775*/ typ typ typ typ typ typ typ LPSTR pName,
/*2776*/ typ typ typ typ typ HWND hWnd,
/*2777*/ typ typ typ typ typ LPSTR pMonitorName
/*2778*/ );
/*2779*/ BOOL
/*2780*/ typ
/*2781*/ AddPortW(
/*2782*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2783*/ typ typ typ typ typ HWND hWnd,
/*2784*/ typ typ typ typ typ LPWSTR pMonitorName
/*2785*/ );
/*2794*/ BOOL
/*2795*/ typ
/*2796*/ ConfigurePortA(
/*2797*/ typ typ typ typ typ typ typ LPSTR pName,
/*2798*/ typ typ typ typ typ HWND hWnd,
/*2799*/ typ typ typ typ typ LPSTR pPortName
/*2800*/ );
/*2801*/ BOOL
/*2802*/ typ
/*2803*/ ConfigurePortW(
/*2804*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2805*/ typ typ typ typ typ HWND hWnd,
/*2806*/ typ typ typ typ typ LPWSTR pPortName
/*2807*/ );
/*2814*/ BOOL
/*2815*/ typ
/*2816*/ DeletePortA(
/*2817*/ typ typ typ typ typ typ typ LPSTR pName,
/*2818*/ typ typ typ typ typ HWND hWnd,
/*2819*/ typ typ typ typ typ LPSTR pPortName
/*2820*/ );
/*2821*/ BOOL
/*2822*/ typ
/*2823*/ DeletePortW(
/*2824*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2825*/ typ typ typ typ typ HWND hWnd,
/*2826*/ typ typ typ typ typ LPWSTR pPortName
/*2827*/ );
/*2834*/ BOOL
/*2835*/ typ
/*2836*/ XcvDataW(
/*2837*/ typ typ typ typ typ HANDLE hXcv,
/*2838*/ typ typ typ typ typ PCWSTR pszDataName,
/*2839*/ typ typ typ typ typ typ typ typ typ
/*2840*/ PBYTE pInputData,
/*2841*/ DWORD cbInputData,
/*2842*/ typ typ typ typ typ typ typ
/*2843*/ PBYTE pOutputData,
/*2844*/ DWORD cbOutputData,
/*2845*/ typ typ typ typ typ PDWORD pcbOutputNeeded,
/*2846*/ typ typ typ typ typ typ typ PDWORD pdwStatus
/*2847*/ );
/*2850*/ BOOL
/*2851*/ typ
/*2852*/ GetDefaultPrinterA(
/*2853*/ typ typ typ typ typ typ typ LPSTR pszBuffer,
/*2854*/ typ typ typ typ typ LPDWORD pcchBuffer
/*2855*/ );
/*2856*/ BOOL
/*2857*/ typ
/*2858*/ GetDefaultPrinterW(
/*2859*/ typ typ typ typ typ typ typ LPWSTR pszBuffer,
/*2860*/ typ typ typ typ typ LPDWORD pcchBuffer
/*2861*/ );
/*2868*/ BOOL
/*2869*/ typ
/*2870*/ SetDefaultPrinterA(
/*2871*/ typ typ typ typ typ LPCSTR pszPrinter
/*2872*/ );
/*2873*/ BOOL
/*2874*/ typ
/*2875*/ SetDefaultPrinterW(
/*2876*/ typ typ typ typ typ LPCWSTR pszPrinter
/*2877*/ );
/*2885*/ BOOL
/*2886*/ typ
/*2887*/ SetPortA(
/*2888*/ typ typ typ typ typ typ typ LPSTR pName,
/*2889*/ typ typ typ typ typ LPSTR pPortName,
/*2890*/ DWORD dwLevel,
/*2891*/ typ typ typ typ typ LPBYTE pPortInfo
/*2892*/ );
/*2893*/ BOOL
/*2894*/ typ
/*2895*/ SetPortW(
/*2896*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2897*/ typ typ typ typ typ LPWSTR pPortName,
/*2898*/ DWORD dwLevel,
/*2899*/ typ typ typ typ typ LPBYTE pPortInfo
/*2900*/ );
/*2909*/ BOOL
/*2910*/ typ
/*2911*/ AddPrinterConnectionA(
/*2912*/ typ typ typ typ typ LPSTR pName
/*2913*/ );
/*2914*/ BOOL
/*2915*/ typ
/*2916*/ AddPrinterConnectionW(
/*2917*/ typ typ typ typ typ LPWSTR pName
/*2918*/ );
/*2927*/ BOOL
/*2928*/ typ
/*2929*/ DeletePrinterConnectionA(
/*2930*/ typ typ typ typ typ LPSTR pName
/*2931*/ );
/*2932*/ BOOL
/*2933*/ typ
/*2934*/ DeletePrinterConnectionW(
/*2935*/ typ typ typ typ typ LPWSTR pName
/*2936*/ );
/*2945*/ HANDLE
/*2946*/ typ
/*2947*/ ConnectToPrinterDlg(
/*2948*/ typ typ typ typ typ HWND hwnd,
/*2949*/ DWORD Flags
/*2950*/ );
/*2952*/ typedef struct _PROVIDOR_INFO_1A{
/*2953*/ LPSTR pName;
/*2954*/ LPSTR pEnvironment;
/*2955*/ LPSTR pDLLName;
/*2956*/ }PROVIDOR_INFO_1A,*PPROVIDOR_INFO_1A,*LPPROVIDOR_INFO_1A;
/*2957*/ typedef struct _PROVIDOR_INFO_1W{
/*2958*/ LPWSTR pName;
/*2959*/ LPWSTR pEnvironment;
/*2960*/ LPWSTR pDLLName;
/*2961*/ }PROVIDOR_INFO_1W,*PPROVIDOR_INFO_1W,*LPPROVIDOR_INFO_1W;
/*2967*/ typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
/*2968*/ typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
/*2969*/ typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
/*2972*/ typedef struct _PROVIDOR_INFO_2A{
/*2973*/ LPSTR pOrder;
/*2974*/ }PROVIDOR_INFO_2A,*PPROVIDOR_INFO_2A,*LPPROVIDOR_INFO_2A;
/*2975*/ typedef struct _PROVIDOR_INFO_2W{
/*2976*/ LPWSTR pOrder;
/*2977*/ }PROVIDOR_INFO_2W,*PPROVIDOR_INFO_2W,*LPPROVIDOR_INFO_2W;
/*2983*/ typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
/*2984*/ typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
/*2985*/ typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
/*2988*/ BOOL
/*2989*/ typ
/*2990*/ AddPrintProvidorA(
/*2991*/ typ typ typ typ typ typ typ LPSTR pName,
/*2992*/ DWORD level,
/*2993*/ typ typ typ typ typ LPBYTE pProvidorInfo
/*2994*/ );
/*2995*/ BOOL
/*2996*/ typ
/*2997*/ AddPrintProvidorW(
/*2998*/ typ typ typ typ typ typ typ LPWSTR pName,
/*2999*/ DWORD level,
/*3000*/ typ typ typ typ typ LPBYTE pProvidorInfo
/*3001*/ );
/*3008*/ BOOL
/*3009*/ typ
/*3010*/ DeletePrintProvidorA(
/*3011*/ typ typ typ typ typ typ typ LPSTR pName,
/*3012*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*3013*/ typ typ typ typ typ LPSTR pPrintProvidorName
/*3014*/ );
/*3015*/ BOOL
/*3016*/ typ
/*3017*/ DeletePrintProvidorW(
/*3018*/ typ typ typ typ typ typ typ LPWSTR pName,
/*3019*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*3020*/ typ typ typ typ typ LPWSTR pPrintProvidorName
/*3021*/ );
/*3029*/ BOOL
/*3030*/ typ
/*3031*/ IsValidDevmodeA(
/*3032*/ typ typ typ typ typ typ typ PDEVMODEA pDevmode,
/*3033*/ size_t DevmodeSize
/*3034*/ );
/*3035*/ BOOL
/*3036*/ typ
/*3037*/ IsValidDevmodeW(
/*3038*/ typ typ typ typ typ typ typ PDEVMODEW pDevmode,
/*3039*/ size_t DevmodeSize
/*3040*/ );
/*3248*/ typedef enum _PRINTER_OPTION_FLAGS
/*3249*/ {
/*3250*/ PRINTER_OPTION_NO_CACHE=1<<0,
/*3251*/ PRINTER_OPTION_CACHE=1<<1,
/*3252*/ PRINTER_OPTION_CLIENT_CHANGE=1<<2,
/*3253*/ PRINTER_OPTION_NO_CLIENT_DATA=1<<3,
/*3254*/ }PRINTER_OPTION_FLAGS;
/*3257*/ typedef struct _PRINTER_OPTIONSA
/*3258*/ {
/*3259*/ UINT cbSize;
/*3260*/ DWORD dwFlags;
/*3261*/ }PRINTER_OPTIONSA,*PPRINTER_OPTIONSA,*LPPRINTER_OPTIONSA;
/*3262*/ typedef struct _PRINTER_OPTIONSW
/*3263*/ {
/*3264*/ UINT cbSize;
/*3265*/ DWORD dwFlags;
/*3266*/ }PRINTER_OPTIONSW,*PPRINTER_OPTIONSW,*LPPRINTER_OPTIONSW;
/*3272*/ typedef PRINTER_OPTIONSA PRINTER_OPTIONS;
/*3273*/ typedef PPRINTER_OPTIONSA PPRINTER_OPTIONS;
/*3274*/ typedef LPPRINTER_OPTIONSA LPPRINTER_OPTIONS;
/*3277*/ BOOL
/*3278*/ typ
/*3279*/ OpenPrinter2A(
/*3280*/ typ typ typ typ typ typ typ LPCSTR pPrinterName,
/*3281*/ typ typ typ typ typ LPHANDLE phPrinter,
/*3282*/ typ typ typ typ typ typ typ PPRINTER_DEFAULTSA pDefault,
/*3283*/ typ typ typ typ typ typ typ PPRINTER_OPTIONSA pOptions
/*3284*/ );
/*3285*/ BOOL
/*3286*/ typ
/*3287*/ OpenPrinter2W(
/*3288*/ typ typ typ typ typ typ typ LPCWSTR pPrinterName,
/*3289*/ typ typ typ typ typ LPHANDLE phPrinter,
/*3290*/ typ typ typ typ typ typ typ PPRINTER_DEFAULTSW pDefault,
/*3291*/ typ typ typ typ typ typ typ PPRINTER_OPTIONSW pOptions
/*3292*/ );
/*3302*/ typedef struct _PRINTER_CONNECTION_INFO_1A
/*3303*/ {
/*3304*/ DWORD dwFlags;
/*3305*/ LPSTR pszDriverName;
/*3306*/ }PRINTER_CONNECTION_INFO_1A,*PPRINTER_CONNECTION_INFO_1A;
/*3307*/ typedef struct _PRINTER_CONNECTION_INFO_1W
/*3308*/ {
/*3309*/ DWORD dwFlags;
/*3310*/ LPWSTR pszDriverName;
/*3311*/ }PRINTER_CONNECTION_INFO_1W,*PPRINTER_CONNECTION_INFO_1W;
/*3316*/ typedef PRINTER_CONNECTION_INFO_1A PRINTER_CONNECTION_INFO_1;
/*3317*/ typedef PPRINTER_CONNECTION_INFO_1A PPRINTER_CONNECTION_INFO_1;
/*3320*/ BOOL
/*3321*/ typ
/*3322*/ AddPrinterConnection2A(
/*3323*/ typ typ typ typ typ typ typ HWND hWnd,
/*3324*/ typ typ typ typ typ LPCSTR pszName,
/*3325*/ DWORD dwLevel,
/*3326*/ typ typ typ typ typ PVOID pConnectionInfo
/*3327*/ );
/*3328*/ BOOL
/*3329*/ typ
/*3330*/ AddPrinterConnection2W(
/*3331*/ typ typ typ typ typ typ typ HWND hWnd,
/*3332*/ typ typ typ typ typ LPCWSTR pszName,
/*3333*/ DWORD dwLevel,
/*3334*/ typ typ typ typ typ PVOID pConnectionInfo
/*3335*/ );
/*3349*/ HRESULT
/*3350*/ typ
/*3351*/ InstallPrinterDriverFromPackageA(
/*3352*/ typ typ typ typ typ typ typ LPCSTR pszServer,
/*3353*/ typ typ typ typ typ typ typ LPCSTR pszInfPath,
/*3354*/ typ typ typ typ typ LPCSTR pszDriverName,
/*3355*/ typ typ typ typ typ typ typ LPCSTR pszEnvironment,
/*3356*/ typ typ typ typ typ DWORD dwFlags
/*3357*/ );
/*3358*/ HRESULT
/*3359*/ typ
/*3360*/ InstallPrinterDriverFromPackageW(
/*3361*/ typ typ typ typ typ typ typ LPCWSTR pszServer,
/*3362*/ typ typ typ typ typ typ typ LPCWSTR pszInfPath,
/*3363*/ typ typ typ typ typ LPCWSTR pszDriverName,
/*3364*/ typ typ typ typ typ typ typ LPCWSTR pszEnvironment,
/*3365*/ typ typ typ typ typ DWORD dwFlags
/*3366*/ );
/*3378*/ HRESULT
/*3379*/ typ
/*3380*/ UploadPrinterDriverPackageA(
/*3381*/ typ typ typ typ typ typ typ LPCSTR pszServer,
/*3382*/ typ typ typ typ typ LPCSTR pszInfPath,
/*3383*/ typ typ typ typ typ typ typ LPCSTR pszEnvironment,
/*3384*/ typ typ typ typ typ DWORD dwFlags,
/*3385*/ typ typ typ typ typ HWND hwnd,
/*3386*/ typ typ typ typ typ
/*3387*/ LPSTR pszDestInfPath,
/*3388*/ typ typ typ typ typ PULONG pcchDestInfPath
/*3389*/ );
/*3390*/ HRESULT
/*3391*/ typ
/*3392*/ UploadPrinterDriverPackageW(
/*3393*/ typ typ typ typ typ typ typ LPCWSTR pszServer,
/*3394*/ typ typ typ typ typ LPCWSTR pszInfPath,
/*3395*/ typ typ typ typ typ typ typ LPCWSTR pszEnvironment,
/*3396*/ typ typ typ typ typ DWORD dwFlags,
/*3397*/ typ typ typ typ typ HWND hwnd,
/*3398*/ typ typ typ typ typ
/*3399*/ LPWSTR pszDestInfPath,
/*3400*/ typ typ typ typ typ PULONG pcchDestInfPath
/*3401*/ );
/*3408*/ typedef struct _CORE_PRINTER_DRIVERA
/*3409*/ {
/*3410*/ GUID CoreDriverGUID;
/*3411*/ FILETIME ftDriverDate;
/*3412*/ DWORDLONG dwlDriverVersion;
/*3413*/ CHAR szPackageID[260];
/*3414*/ }CORE_PRINTER_DRIVERA,*PCORE_PRINTER_DRIVERA;
/*3415*/ typedef struct _CORE_PRINTER_DRIVERW
/*3416*/ {
/*3417*/ GUID CoreDriverGUID;
/*3418*/ FILETIME ftDriverDate;
/*3419*/ DWORDLONG dwlDriverVersion;
/*3420*/ WCHAR szPackageID[260];
/*3421*/ }CORE_PRINTER_DRIVERW,*PCORE_PRINTER_DRIVERW;
/*3426*/ typedef CORE_PRINTER_DRIVERA CORE_PRINTER_DRIVER;
/*3427*/ typedef PCORE_PRINTER_DRIVERA PCORE_PRINTER_DRIVER;
/*3430*/ HRESULT
/*3431*/ typ
/*3432*/ GetCorePrinterDriversA(
/*3433*/ typ typ typ typ typ typ typ LPCSTR pszServer,
/*3434*/ typ typ typ typ typ typ typ LPCSTR pszEnvironment,
/*3435*/ typ typ typ typ typ LPCSTR pszzCoreDriverDependencies,
/*3436*/ typ typ typ typ typ DWORD cCorePrinterDrivers,
/*3437*/ typ typ typ typ typ PCORE_PRINTER_DRIVERA pCorePrinterDrivers
/*3438*/ );
/*3439*/ HRESULT
/*3440*/ typ
/*3441*/ GetCorePrinterDriversW(
/*3442*/ typ typ typ typ typ typ typ LPCWSTR pszServer,
/*3443*/ typ typ typ typ typ typ typ LPCWSTR pszEnvironment,
/*3444*/ typ typ typ typ typ LPCWSTR pszzCoreDriverDependencies,
/*3445*/ typ typ typ typ typ DWORD cCorePrinterDrivers,
/*3446*/ typ typ typ typ typ PCORE_PRINTER_DRIVERW pCorePrinterDrivers
/*3447*/ );
/*3454*/ HRESULT
/*3455*/ typ
/*3456*/ CorePrinterDriverInstalledA(
/*3457*/ typ typ typ typ typ typ typ LPCSTR pszServer,
/*3458*/ typ typ typ typ typ typ typ LPCSTR pszEnvironment,
/*3459*/ typ typ typ typ typ GUID CoreDriverGUID,
/*3460*/ typ typ typ typ typ FILETIME ftDriverDate,
/*3461*/ typ typ typ typ typ DWORDLONG dwlDriverVersion,
/*3462*/ typ typ typ typ typ BOOL*pbDriverInstalled
/*3463*/ );
/*3464*/ HRESULT
/*3465*/ typ
/*3466*/ CorePrinterDriverInstalledW(
/*3467*/ typ typ typ typ typ typ typ LPCWSTR pszServer,
/*3468*/ typ typ typ typ typ typ typ LPCWSTR pszEnvironment,
/*3469*/ typ typ typ typ typ GUID CoreDriverGUID,
/*3470*/ typ typ typ typ typ FILETIME ftDriverDate,
/*3471*/ typ typ typ typ typ DWORDLONG dwlDriverVersion,
/*3472*/ typ typ typ typ typ BOOL*pbDriverInstalled
/*3473*/ );
/*3480*/ HRESULT
/*3481*/ typ
/*3482*/ GetPrinterDriverPackagePathA(
/*3483*/ typ typ typ typ typ typ typ LPCSTR pszServer,
/*3484*/ typ typ typ typ typ typ typ LPCSTR pszEnvironment,
/*3485*/ typ typ typ typ typ typ typ LPCSTR pszLanguage,
/*3486*/ typ typ typ typ typ LPCSTR pszPackageID,
/*3487*/ typ typ typ typ typ typ typ typ typ LPSTR pszDriverPackageCab,
/*3488*/ typ typ typ typ typ typ typ DWORD cchDriverPackageCab,
/*3489*/ typ typ typ typ typ LPDWORD pcchRequiredSize
/*3490*/ );
/*3491*/ HRESULT
/*3492*/ typ
/*3493*/ GetPrinterDriverPackagePathW(
/*3494*/ typ typ typ typ typ typ typ LPCWSTR pszServer,
/*3495*/ typ typ typ typ typ typ typ LPCWSTR pszEnvironment,
/*3496*/ typ typ typ typ typ typ typ LPCWSTR pszLanguage,
/*3497*/ typ typ typ typ typ LPCWSTR pszPackageID,
/*3498*/ typ typ typ typ typ typ typ typ typ LPWSTR pszDriverPackageCab,
/*3499*/ typ typ typ typ typ typ typ DWORD cchDriverPackageCab,
/*3500*/ typ typ typ typ typ LPDWORD pcchRequiredSize
/*3501*/ );
/*3508*/ HRESULT
/*3509*/ typ
/*3510*/ DeletePrinterDriverPackageA(
/*3511*/ typ typ typ typ typ typ typ LPCSTR pszServer,
/*3512*/ typ typ typ typ typ LPCSTR pszInfPath,
/*3513*/ typ typ typ typ typ typ typ LPCSTR pszEnvironment
/*3514*/ );
/*3515*/ HRESULT
/*3516*/ typ
/*3517*/ DeletePrinterDriverPackageW(
/*3518*/ typ typ typ typ typ typ typ LPCWSTR pszServer,
/*3519*/ typ typ typ typ typ LPCWSTR pszInfPath,
/*3520*/ typ typ typ typ typ typ typ LPCWSTR pszEnvironment
/*3521*/ );
/*3528*/ typedef enum
/*3529*/ {
/*3530*/ kPropertyTypeString=1,
/*3531*/ kPropertyTypeInt32,
/*3532*/ kPropertyTypeInt64,
/*3533*/ kPropertyTypeByte,
/*3534*/ kPropertyTypeTime,
/*3535*/ kPropertyTypeDevMode,
/*3536*/ kPropertyTypeSD,
/*3537*/ kPropertyTypeNotificationReply,
/*3538*/ kPropertyTypeNotificationOptions,
/*3539*/ kPropertyTypeBuffer
/*3541*/ }EPrintPropertyType;
/*3543*/ typedef enum
/*3544*/ {
/*3545*/ kAddingDocumentSequence=0,
/*3546*/ kDocumentSequenceAdded=1,
/*3547*/ kAddingFixedDocument=2,
/*3548*/ kFixedDocumentAdded=3,
/*3549*/ kAddingFixedPage=4,
/*3550*/ kFixedPageAdded=5,
/*3551*/ kResourceAdded=6,
/*3552*/ kFontAdded=7,
/*3553*/ kImageAdded=8,
/*3554*/ kXpsDocumentCommitted=9
/*3556*/ }EPrintXPSJobProgress;
/*3558*/ typedef enum
/*3559*/ {
/*3560*/ kJobProduction=1,
/*3561*/ kJobConsumption
/*3563*/ }EPrintXPSJobOperation;
/*3565*/ typedef struct
/*3566*/ {
/*3567*/ EPrintPropertyType ePropertyType;
/*3568*/ union
/*3569*/ {
/*3570*/ BYTE propertyByte;
/*3571*/ PWSTR propertyString;
/*3572*/ LONG propertyInt32;
/*3573*/ LONGLONG propertyInt64;
/*3574*/ struct{
/*3575*/ DWORD cbBuf;
/*3576*/ LPVOID pBuf;
/*3577*/ }propertyBlob;
/*3578*/ }value;
/*3580*/ }PrintPropertyValue;
/*3582*/ typedef struct
/*3583*/ {
/*3584*/ WCHAR*propertyName;
/*3585*/ PrintPropertyValue propertyValue;
/*3587*/ }PrintNamedProperty;
/*3589*/ typedef struct
/*3590*/ {
/*3591*/ ULONG numberOfProperties;
/*3592*/ PrintNamedProperty*propertiesCollection;
/*3594*/ }PrintPropertiesCollection;
/*3596*/ HRESULT
/*3597*/ typ
/*3598*/ ReportJobProcessingProgress(
/*3599*/ typ typ typ typ typ HANDLE printerHandle,
/*3600*/ ULONG jobId,
/*3601*/ EPrintXPSJobOperation jobOperation,
/*3602*/ EPrintXPSJobProgress jobProgress
/*3603*/ );
/*3605*/ BOOL
/*3606*/ typ
/*3607*/ GetPrinterDriver2A(
/*3608*/ typ typ typ typ typ typ typ HWND hWnd,
/*3609*/ typ typ typ typ typ HANDLE hPrinter,
/*3610*/ typ typ typ typ typ typ typ LPSTR pEnvironment,
/*3611*/ DWORD Level,
/*3612*/ typ typ typ typ typ typ typ
/*3613*/ LPBYTE pDriverInfo,
/*3614*/ DWORD cbBuf,
/*3615*/ typ typ typ typ typ LPDWORD pcbNeeded
/*3616*/ );
/*3617*/ BOOL
/*3618*/ typ
/*3619*/ GetPrinterDriver2W(
/*3620*/ typ typ typ typ typ typ typ HWND hWnd,
/*3621*/ typ typ typ typ typ HANDLE hPrinter,
/*3622*/ typ typ typ typ typ typ typ LPWSTR pEnvironment,
/*3623*/ DWORD Level,
/*3624*/ typ typ typ typ typ typ typ
/*3625*/ LPBYTE pDriverInfo,
/*3626*/ DWORD cbBuf,
/*3627*/ typ typ typ typ typ LPDWORD pcbNeeded
/*3628*/ );
/*"stdlib.h"56*/ typedef int(*_onexit_t)(void);
/*79*/ typedef struct _div_t{
/*80*/ int quot;
/*81*/ int rem;
/*82*/ }div_t;
/*84*/ typedef struct _ldiv_t{
/*85*/ long quot;
/*86*/ long rem;
/*87*/ }ldiv_t;
/*102*/ typedef struct{
/*103*/ unsigned char ld[10];
/*104*/ }_LDOUBLE;
/*121*/ typedef struct{
/*122*/ double x;
/*123*/ }_CRT_DOUBLE;
/*125*/ typedef struct{
/*126*/ float f;
/*127*/ }_CRT_FLOAT;
/*133*/ typedef struct{
/*137*/ long double x;
/*138*/ }_LONGDOUBLE;
/*143*/ typedef struct{
/*144*/ unsigned char ld12[12];
/*145*/ }_LDBL12;
/*211*/ typedef void(*_purecall_handler)(void);
/*214*/ typ _purecall_handler _set_purecall_handler(typ typ typ _purecall_handler _Handler);
/*215*/ typ _purecall_handler _get_purecall_handler();
/*239*/ typedef void(*_invalid_parameter_handler)(const wchar_t*,const wchar_t*,const wchar_t*,unsigned int,uintptr_t);
/*242*/ typ _invalid_parameter_handler _set_invalid_parameter_handler(typ typ typ _invalid_parameter_handler _Handler);
/*243*/ typ _invalid_parameter_handler _get_invalid_parameter_handler(void);
/*267*/ typ extern int*_errno(void);
/*270*/ errno_t _set_errno(typ typ int _Value);
/*271*/ errno_t _get_errno(typ typ int*_Value);
/*274*/ typ unsigned long*__doserrno(void);
/*277*/ errno_t _set_doserrno(typ typ unsigned long _Value);
/*278*/ errno_t _get_doserrno(typ typ unsigned long*_Value);
/*281*/ typ typ char**__sys_errlist(void);
/*284*/ typ typ int*__sys_nerr(void);
/*301*/ typ extern int __argc;
/*302*/ typ extern char**__argv;
/*303*/ typ extern wchar_t**__wargv;
/*317*/ typ extern char**_environ;
/*318*/ typ extern wchar_t**_wenviron;
/*321*/ typ typ extern char*_pgmptr;
/*322*/ typ typ extern wchar_t*_wpgmptr;
/*339*/ errno_t _get_pgmptr(typ typ typ typ typ char**_Value);
/*340*/ errno_t _get_wpgmptr(typ typ typ typ typ wchar_t**_Value);
/*344*/ typ typ extern int _fmode;
/*350*/ typ errno_t _set_fmode(typ typ int _Mode);
/*351*/ typ errno_t _get_fmode(typ typ int*_PMode);
/*371*/ typ typ void exit(typ typ int _Code);
/*372*/ typ typ void _exit(typ typ int _Code);
/*373*/ typ void abort(void);
/*376*/ typ unsigned int _set_abort_behavior(typ typ unsigned int _Flags,typ typ unsigned int _Mask);
/*380*/ int abs(typ typ int _X);
/*381*/ long labs(typ typ long _X);
/*384*/ __int64 _abs64(__int64);
/*412*/ int atexit(void(*)(void));
/*416*/ typ typ double atof(typ typ typ const char*_String);
/*417*/ typ typ double _atof_l(typ typ typ const char*_String,typ typ typ _locale_t _Locale);
/*419*/ typ typ typ int atoi(typ typ typ const char*_Str);
/*420*/ typ typ int _atoi_l(typ typ typ const char*_Str,typ typ typ _locale_t _Locale);
/*421*/ typ typ long atol(typ typ typ const char*_Str);
/*422*/ typ typ long _atol_l(typ typ typ const char*_Str,typ typ typ _locale_t _Locale);
/*426*/ typ typ void*bsearch_s(typ typ const void*_Key,typ typ typ const void*_Base,
/*427*/ typ typ rsize_t _NumOfElements,typ typ rsize_t _SizeOfElements,
/*428*/ typ typ int(*_PtFuncCompare)(void*,const void*,const void*),void*_Context);
/*430*/ typ typ void*bsearch(typ typ const void*_Key,typ typ typ const void*_Base,
/*431*/ typ typ size_t _NumOfElements,typ typ size_t _SizeOfElements,
/*432*/ typ typ int(*_PtFuncCompare)(const void*,const void*));
/*435*/ typ void qsort_s(typ typ typ void*_Base,
/*436*/ typ typ rsize_t _NumOfElements,typ typ rsize_t _SizeOfElements,
/*437*/ typ typ int(*_PtFuncCompare)(void*,const void*,const void*),void*_Context);
/*439*/ typ void qsort(typ typ typ void*_Base,
/*440*/ typ typ size_t _NumOfElements,typ typ size_t _SizeOfElements,
/*441*/ typ typ int(*_PtFuncCompare)(const void*,const void*));
/*443*/ typ unsigned short _byteswap_ushort(typ typ unsigned short _Short);
/*444*/ typ unsigned long _byteswap_ulong(typ typ unsigned long _Long);
/*445*/ typ unsigned __int64 _byteswap_uint64(typ typ unsigned __int64 _Int64);
/*446*/ typ typ div_t div(typ typ int _Numerator,typ typ int _Denominator);
/*447*/ typ typ typ char*getenv(typ typ typ const char*_VarName);
/*449*/ typ typ errno_t getenv_s(typ typ size_t*_ReturnSize,typ typ typ typ char*_DstBuf,typ typ rsize_t _DstSize,typ typ typ const char*_VarName);
/*451*/ typ
/*457*/ typ typ errno_t _dupenv_s(typ typ typ typ char**_PBuffer,typ typ size_t*_PBufferSizeInBytes,typ typ typ const char*_VarName);
/*463*/ typ typ errno_t _itoa_s(typ typ int _Value,typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ int _Radix);
/*464*/ typ
/*465*/ typ typ char*_itoa(typ typ int _Value,typ typ typ char*_Dest,typ typ int _Radix);
/*466*/ typ typ errno_t _i64toa_s(typ typ __int64 _Val,typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ int _Radix);
/*467*/ typ typ char*_i64toa(typ typ __int64 _Val,typ typ typ char*_DstBuf,typ typ int _Radix);
/*468*/ typ typ errno_t _ui64toa_s(typ typ unsigned __int64 _Val,typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ int _Radix);
/*469*/ typ typ char*_ui64toa(typ typ unsigned __int64 _Val,typ typ typ char*_DstBuf,typ typ int _Radix);
/*470*/ typ typ __int64 _atoi64(typ typ typ const char*_String);
/*471*/ typ typ __int64 _atoi64_l(typ typ typ const char*_String,typ typ typ _locale_t _Locale);
/*472*/ typ typ __int64 _strtoi64(typ typ typ const char*_String,typ typ typ typ char**_EndPtr,typ typ int _Radix);
/*473*/ typ typ __int64 _strtoi64_l(typ typ typ const char*_String,typ typ typ typ char**_EndPtr,typ typ int _Radix,typ typ typ _locale_t _Locale);
/*474*/ typ typ unsigned __int64 _strtoui64(typ typ typ const char*_String,typ typ typ typ char**_EndPtr,typ typ int _Radix);
/*475*/ typ typ unsigned __int64 _strtoui64_l(typ typ typ const char*_String,typ typ typ typ char**_EndPtr,typ typ int _Radix,typ typ typ _locale_t _Locale);
/*476*/ typ typ ldiv_t ldiv(typ typ long _Numerator,typ typ long _Denominator);
/*486*/ typ typ errno_t _ltoa_s(typ typ long _Val,typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ int _Radix);
/*487*/ typ
/*488*/ typ typ char*_ltoa(typ typ long _Value,typ typ typ char*_Dest,typ typ int _Radix);
/*489*/ typ typ int mblen(typ typ typ typ typ const char*_Ch,typ typ size_t _MaxCount);
/*490*/ typ typ int _mblen_l(typ typ typ typ typ const char*_Ch,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*491*/ typ typ size_t _mbstrlen(typ typ typ const char*_Str);
/*492*/ typ typ size_t _mbstrlen_l(typ typ typ const char*_Str,typ typ typ _locale_t _Locale);
/*493*/ typ typ size_t _mbstrnlen(typ typ typ const char*_Str,typ typ size_t _MaxCount);
/*494*/ typ typ size_t _mbstrnlen_l(typ typ typ const char*_Str,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*495*/ typ int mbtowc(typ typ typ wchar_t*_DstCh,typ typ typ typ typ const char*_SrcCh,typ typ size_t _SrcSizeInBytes);
/*496*/ typ int _mbtowc_l(typ typ typ wchar_t*_DstCh,typ typ typ typ typ const char*_SrcCh,typ typ size_t _SrcSizeInBytes,typ typ typ _locale_t _Locale);
/*497*/ typ typ errno_t mbstowcs_s(typ typ size_t*_PtNumOfCharConverted,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _SizeInWords,typ typ typ typ typ const char*_SrcBuf,typ typ size_t _MaxCount);
/*498*/ typ
/*499*/ typ typ size_t mbstowcs(typ typ typ typ wchar_t*_Dest,typ typ typ const char*_Source,typ typ size_t _MaxCount);
/*501*/ typ typ errno_t _mbstowcs_s_l(typ typ size_t*_PtNumOfCharConverted,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _SizeInWords,typ typ typ typ typ const char*_SrcBuf,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*502*/ typ
/*503*/ typ typ size_t _mbstowcs_l(typ typ typ typ wchar_t*_Dest,typ typ typ const char*_Source,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*505*/ typ typ int rand(void);
/*510*/ typ typ int _set_error_mode(typ typ int _Mode);
/*512*/ typ void srand(typ typ unsigned int _Seed);
/*513*/ typ typ double strtod(typ typ typ const char*_Str,typ typ typ typ char**_EndPtr);
/*514*/ typ typ double _strtod_l(typ typ typ const char*_Str,typ typ typ typ char**_EndPtr,typ typ typ _locale_t _Locale);
/*515*/ typ typ long strtol(typ typ typ const char*_Str,typ typ typ typ char**_EndPtr,typ typ int _Radix);
/*516*/ typ typ long _strtol_l(typ typ typ const char*_Str,typ typ typ typ char**_EndPtr,typ typ int _Radix,typ typ typ _locale_t _Locale);
/*517*/ typ typ unsigned long strtoul(typ typ typ const char*_Str,typ typ typ typ char**_EndPtr,typ typ int _Radix);
/*518*/ typ typ unsigned long _strtoul_l(const char*_Str,typ typ typ typ char**_EndPtr,typ typ int _Radix,typ typ typ _locale_t _Locale);
/*521*/ typ int system(typ typ typ const char*_Command);
/*523*/ typ typ errno_t _ultoa_s(typ typ unsigned long _Val,typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ int _Radix);
/*524*/ typ
/*525*/ typ typ char*_ultoa(typ typ unsigned long _Value,typ typ typ char*_Dest,typ typ int _Radix);
/*526*/ typ typ int wctomb(typ typ typ typ char*_MbCh,typ typ wchar_t _WCh);
/*527*/ typ typ int _wctomb_l(typ typ typ char*_MbCh,typ typ wchar_t _WCh,typ typ typ _locale_t _Locale);
/*529*/ typ typ errno_t wctomb_s(typ typ int*_SizeConverted,typ typ typ typ char*_MbCh,typ typ rsize_t _SizeInBytes,typ typ wchar_t _WCh);
/*531*/ typ typ errno_t _wctomb_s_l(typ typ int*_SizeConverted,typ typ typ typ char*_MbCh,typ typ size_t _SizeInBytes,typ typ wchar_t _WCh,typ typ typ _locale_t _Locale);
/*532*/ typ typ errno_t wcstombs_s(typ typ size_t*_PtNumOfCharConverted,typ typ typ typ char*_Dst,typ typ size_t _DstSizeInBytes,typ typ typ const wchar_t*_Src,typ typ size_t _MaxCountInBytes);
/*533*/ typ
/*534*/ typ typ size_t wcstombs(typ typ typ typ char*_Dest,typ typ typ const wchar_t*_Source,typ typ size_t _MaxCount);
/*535*/ typ typ errno_t _wcstombs_s_l(typ typ size_t*_PtNumOfCharConverted,typ typ typ typ char*_Dst,typ typ size_t _DstSizeInBytes,typ typ typ const wchar_t*_Src,typ typ size_t _MaxCountInBytes,typ typ typ _locale_t _Locale);
/*536*/ typ
/*537*/ typ typ size_t _wcstombs_l(typ typ typ typ char*_Dest,typ typ typ const wchar_t*_Source,typ typ size_t _MaxCount,typ typ typ _locale_t _Locale);
/*599*/ typ typ typ typ typ typ void*calloc(typ typ size_t _NumOfElements,typ typ size_t _SizeOfElements);
/*600*/ typ typ void free(typ typ typ void*_Memory);
/*601*/ typ typ typ typ typ typ void*malloc(typ typ size_t _Size);
/*602*/ typ typ typ typ typ void*realloc(typ typ typ void*_Memory,typ typ size_t _NewSize);
/*603*/ typ typ typ typ typ void*_recalloc(typ typ typ void*_Memory,typ typ size_t _Count,typ typ size_t _Size);
/*604*/ typ typ void _aligned_free(typ typ typ void*_Memory);
/*605*/ typ typ typ typ typ void*_aligned_malloc(typ typ size_t _Size,typ typ size_t _Alignment);
/*606*/ typ typ typ typ typ void*_aligned_offset_malloc(typ typ size_t _Size,typ typ size_t _Alignment,typ typ size_t _Offset);
/*607*/ typ typ typ typ typ void*_aligned_realloc(typ typ typ void*_Memory,typ typ size_t _NewSize,typ typ size_t _Alignment);
/*608*/ typ typ typ typ typ void*_aligned_recalloc(typ typ typ void*_Memory,typ typ size_t _Count,typ typ size_t _Size,typ typ size_t _Alignment);
/*609*/ typ typ typ typ typ void*_aligned_offset_realloc(typ typ typ void*_Memory,typ typ size_t _NewSize,typ typ size_t _Alignment,typ typ size_t _Offset);
/*610*/ typ typ typ typ typ void*_aligned_offset_recalloc(typ typ typ void*_Memory,typ typ size_t _Count,typ typ size_t _Size,typ typ size_t _Alignment,typ typ size_t _Offset);
/*611*/ typ typ size_t _aligned_msize(typ typ void*_Memory,typ typ size_t _Alignment,typ typ size_t _Offset);
/*638*/ typ typ errno_t _itow_s(typ typ int _Val,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _SizeInWords,typ typ int _Radix);
/*639*/ typ
/*640*/ typ typ wchar_t*_itow(typ typ int _Value,typ typ typ wchar_t*_Dest,typ typ int _Radix);
/*641*/ typ typ errno_t _ltow_s(typ typ long _Val,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _SizeInWords,typ typ int _Radix);
/*642*/ typ
/*643*/ typ typ wchar_t*_ltow(typ typ long _Value,typ typ typ wchar_t*_Dest,typ typ int _Radix);
/*644*/ typ typ errno_t _ultow_s(typ typ unsigned long _Val,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _SizeInWords,typ typ int _Radix);
/*645*/ typ
/*646*/ typ typ wchar_t*_ultow(typ typ unsigned long _Value,typ typ typ wchar_t*_Dest,typ typ int _Radix);
/*647*/ typ typ double wcstod(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr);
/*648*/ typ typ double _wcstod_l(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,typ typ typ _locale_t _Locale);
/*649*/ typ typ long wcstol(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,int _Radix);
/*650*/ typ typ long _wcstol_l(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,int _Radix,typ typ typ _locale_t _Locale);
/*651*/ typ typ unsigned long wcstoul(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,int _Radix);
/*652*/ typ typ unsigned long _wcstoul_l(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,int _Radix,typ typ typ _locale_t _Locale);
/*653*/ typ typ typ wchar_t*_wgetenv(typ typ typ const wchar_t*_VarName);
/*654*/ typ typ errno_t _wgetenv_s(typ typ size_t*_ReturnSize,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _DstSizeInWords,typ typ typ const wchar_t*_VarName);
/*655*/ typ
/*662*/ typ typ errno_t _wdupenv_s(typ typ typ typ wchar_t**_Buffer,typ typ size_t*_BufferSizeInWords,typ typ typ const wchar_t*_VarName);
/*670*/ typ int _wsystem(typ typ typ const wchar_t*_Command);
/*672*/ typ typ double _wtof(typ typ typ const wchar_t*_Str);
/*673*/ typ typ double _wtof_l(typ typ typ const wchar_t*_Str,typ typ typ _locale_t _Locale);
/*674*/ typ typ int _wtoi(typ typ typ const wchar_t*_Str);
/*675*/ typ typ int _wtoi_l(typ typ typ const wchar_t*_Str,typ typ typ _locale_t _Locale);
/*676*/ typ typ long _wtol(typ typ typ const wchar_t*_Str);
/*677*/ typ typ long _wtol_l(typ typ typ const wchar_t*_Str,typ typ typ _locale_t _Locale);
/*679*/ typ typ errno_t _i64tow_s(typ typ __int64 _Val,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _SizeInWords,typ typ int _Radix);
/*680*/ typ typ wchar_t*_i64tow(typ typ __int64 _Val,typ typ typ wchar_t*_DstBuf,typ typ int _Radix);
/*681*/ typ typ errno_t _ui64tow_s(typ typ unsigned __int64 _Val,typ typ typ typ wchar_t*_DstBuf,typ typ size_t _SizeInWords,typ typ int _Radix);
/*682*/ typ typ wchar_t*_ui64tow(typ typ unsigned __int64 _Val,typ typ typ wchar_t*_DstBuf,typ typ int _Radix);
/*683*/ typ typ __int64 _wtoi64(typ typ typ const wchar_t*_Str);
/*684*/ typ typ __int64 _wtoi64_l(typ typ typ const wchar_t*_Str,typ typ typ _locale_t _Locale);
/*685*/ typ typ __int64 _wcstoi64(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,typ typ int _Radix);
/*686*/ typ typ __int64 _wcstoi64_l(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,typ typ int _Radix,typ typ typ _locale_t _Locale);
/*687*/ typ typ unsigned __int64 _wcstoui64(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,typ typ int _Radix);
/*688*/ typ typ unsigned __int64 _wcstoui64_l(typ typ typ const wchar_t*_Str,typ typ typ typ wchar_t**_EndPtr,typ typ int _Radix,typ typ typ _locale_t _Locale);
/*708*/ typ typ char*_fullpath(typ typ typ typ char*_FullPath,typ typ typ const char*_Path,typ typ size_t _SizeInBytes);
/*716*/ typ typ errno_t _ecvt_s(typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ double _Val,typ typ int _NumOfDights,typ typ int*_PtDec,typ typ int*_PtSign);
/*717*/ typ
/*718*/ typ typ typ char*_ecvt(typ typ double _Val,typ typ int _NumOfDigits,typ typ int*_PtDec,typ typ int*_PtSign);
/*719*/ typ typ errno_t _fcvt_s(typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ double _Val,typ typ int _NumOfDec,typ typ int*_PtDec,typ typ int*_PtSign);
/*720*/ typ
/*721*/ typ typ typ char*_fcvt(typ typ double _Val,typ typ int _NumOfDec,typ typ int*_PtDec,typ typ int*_PtSign);
/*722*/ typ errno_t _gcvt_s(typ typ typ typ char*_DstBuf,typ typ size_t _Size,typ typ double _Val,typ typ int _NumOfDigits);
/*723*/ typ
/*724*/ typ typ char*_gcvt(typ typ double _Val,typ typ int _NumOfDigits,typ typ typ char*_DstBuf);
/*726*/ typ typ int _atodbl(typ typ _CRT_DOUBLE*_Result,typ typ typ char*_Str);
/*727*/ typ typ int _atoldbl(typ typ _LDOUBLE*_Result,typ typ typ char*_Str);
/*728*/ typ typ int _atoflt(typ typ _CRT_FLOAT*_Result,typ typ typ char*_Str);
/*729*/ typ typ int _atodbl_l(typ typ _CRT_DOUBLE*_Result,typ typ typ char*_Str,typ typ typ _locale_t _Locale);
/*730*/ typ typ int _atoldbl_l(typ typ _LDOUBLE*_Result,typ typ typ char*_Str,typ typ typ _locale_t _Locale);
/*731*/ typ typ int _atoflt_l(typ typ _CRT_FLOAT*_Result,typ typ typ char*_Str,typ typ typ _locale_t _Locale);
/*732*/ typ unsigned long _lrotl(typ typ unsigned long _Val,typ typ int _Shift);
/*733*/ typ unsigned long _lrotr(typ typ unsigned long _Val,typ typ int _Shift);
/*734*/ typ typ errno_t _makepath_s(typ typ typ typ char*_PathResult,typ typ size_t _SizeInWords,typ typ typ const char*_Drive,typ typ typ const char*_Dir,typ typ typ const char*_Filename,
/*735*/ typ typ typ const char*_Ext);
/*736*/ typ
/*737*/ typ typ void _makepath(typ typ typ char*_Path,typ typ typ const char*_Drive,typ typ typ const char*_Dir,typ typ typ const char*_Filename,typ typ typ const char*_Ext);
/*764*/ _onexit_t _onexit(typ typ typ _onexit_t _Func);
/*769*/ typ void perror(typ typ typ const char*_ErrMsg);
/*774*/ typ typ int _putenv(typ typ typ const char*_EnvString);
/*775*/ typ typ errno_t _putenv_s(typ typ typ const char*_Name,typ typ typ const char*_Value);
/*776*/ typ unsigned int _rotl(typ typ unsigned int _Val,typ typ int _Shift);
/*777*/ typ unsigned __int64 _rotl64(typ typ unsigned __int64 _Val,typ typ int _Shift);
/*778*/ typ unsigned int _rotr(typ typ unsigned int _Val,typ typ int _Shift);
/*779*/ typ unsigned __int64 _rotr64(typ typ unsigned __int64 _Val,typ typ int _Shift);
/*782*/ typ errno_t _searchenv_s(typ typ typ const char*_Filename,typ typ typ const char*_EnvVar,typ typ typ typ char*_ResultPath,typ typ size_t _SizeInBytes);
/*783*/ typ
/*784*/ typ typ void _searchenv(typ typ typ const char*_Filename,typ typ typ const char*_EnvVar,typ typ typ char*_ResultPath);
/*786*/ typ typ void _splitpath(typ typ typ const char*_FullPath,typ typ typ char*_Drive,typ typ typ char*_Dir,typ typ typ char*_Filename,typ typ typ char*_Ext);
/*787*/ typ typ errno_t _splitpath_s(typ typ typ const char*_FullPath,
/*788*/ typ typ typ typ char*_Drive,typ typ size_t _DriveSize,
/*789*/ typ typ typ typ char*_Dir,typ typ size_t _DirSize,
/*790*/ typ typ typ typ char*_Filename,typ typ size_t _FilenameSize,
/*791*/ typ typ typ typ char*_Ext,typ typ size_t _ExtSize);
/*792*/ typ
/*794*/ typ void _swab(typ typ typ typ typ char*_Buf1,typ typ typ typ typ char*_Buf2,int _SizeInBytes);
/*805*/ typ typ wchar_t*_wfullpath(typ typ typ typ wchar_t*_FullPath,typ typ typ const wchar_t*_Path,typ typ size_t _SizeInWords);
/*811*/ typ typ errno_t _wmakepath_s(typ typ typ typ wchar_t*_PathResult,typ typ size_t _SIZE,typ typ typ const wchar_t*_Drive,typ typ typ const wchar_t*_Dir,typ typ typ const wchar_t*_Filename,
/*812*/ typ typ typ const wchar_t*_Ext);
/*813*/ typ
/*814*/ typ typ void _wmakepath(typ typ typ wchar_t*_ResultPath,typ typ typ const wchar_t*_Drive,typ typ typ const wchar_t*_Dir,typ typ typ const wchar_t*_Filename,typ typ typ const wchar_t*_Ext);
/*817*/ typ void _wperror(typ typ typ const wchar_t*_ErrMsg);
/*819*/ typ typ int _wputenv(typ typ typ const wchar_t*_EnvString);
/*820*/ typ typ errno_t _wputenv_s(typ typ typ const wchar_t*_Name,typ typ typ const wchar_t*_Value);
/*821*/ typ errno_t _wsearchenv_s(typ typ typ const wchar_t*_Filename,typ typ typ const wchar_t*_EnvVar,typ typ typ typ wchar_t*_ResultPath,typ typ size_t _SizeInWords);
/*822*/ typ
/*823*/ typ typ void _wsearchenv(typ typ typ const wchar_t*_Filename,typ typ typ const wchar_t*_EnvVar,typ typ typ wchar_t*_ResultPath);
/*824*/ typ typ void _wsplitpath(typ typ typ const wchar_t*_FullPath,typ typ typ wchar_t*_Drive,typ typ typ wchar_t*_Dir,typ typ typ wchar_t*_Filename,typ typ typ wchar_t*_Ext);
/*825*/ typ errno_t _wsplitpath_s(typ typ typ const wchar_t*_FullPath,
/*826*/ typ typ typ typ wchar_t*_Drive,typ typ size_t _DriveSize,
/*827*/ typ typ typ typ wchar_t*_Dir,typ typ size_t _DirSize,
/*828*/ typ typ typ typ wchar_t*_Filename,typ typ size_t _FilenameSize,
/*829*/ typ typ typ typ wchar_t*_Ext,typ typ size_t _ExtSize);
/*830*/ typ
/*836*/ typ typ void _seterrormode(typ typ int _Mode);
/*837*/ typ typ void _beep(typ typ unsigned _Frequency,typ typ unsigned _Duration);
/*838*/ typ typ void _sleep(typ typ unsigned long _Duration);
/*"objbase.h"360*/ typedef enum tagREGCLS
/*361*/ {
/*362*/ REGCLS_SINGLEUSE=0,
/*363*/ REGCLS_MULTIPLEUSE=1,
/*365*/ REGCLS_MULTI_SEPARATE=2,
/*367*/ REGCLS_SUSPENDED=4,
/*369*/ REGCLS_SURROGATE=8
/*372*/ }REGCLS;
/*426*/ typedef DWORD STGFMT;
/*438*/ typedef struct IRpcStubBuffer IRpcStubBuffer;
/*439*/ typedef struct IRpcChannelBuffer IRpcChannelBuffer;
/*"unknwn.h"53*/ typedef struct IUnknown IUnknown;
/*59*/ typedef struct AsyncIUnknown AsyncIUnknown;
/*65*/ typedef struct IClassFactory IClassFactory;
/*91*/ extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
/*92*/ extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;
/*100*/ typedef IUnknown*LPUNKNOWN;
/*169*/ extern const IID IID_IUnknown;
/*192*/ typedef struct IUnknownVtbl
/*193*/ {
/*194*/ 
/*196*/ HRESULT(__stdcall*QueryInterface)(
/*197*/ IUnknown*This,
/*198*/ const IID*const riid,
/*200*/ void**ppvObject);
/*202*/ ULONG(__stdcall*AddRef)(
/*203*/ IUnknown*This);
/*205*/ ULONG(__stdcall*Release)(
/*206*/ IUnknown*This);
/*208*/ 
/*209*/ }IUnknownVtbl;
/*211*/ struct IUnknown
/*212*/ {
/*213*/ struct IUnknownVtbl*lpVtbl;
/*214*/ };
/*237*/ HRESULT __stdcall IUnknown_QueryInterface_Proxy(
/*238*/ IUnknown*This,
/*239*/ const IID*const riid,
/*241*/ void**ppvObject);
/*244*/ void IUnknown_QueryInterface_Stub(
/*245*/ IRpcStubBuffer*This,
/*246*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*247*/ PRPC_MESSAGE _pRpcMessage,
/*248*/ DWORD*_pdwStubPhase);
/*251*/ ULONG __stdcall IUnknown_AddRef_Proxy(
/*252*/ IUnknown*This);
/*255*/ void IUnknown_AddRef_Stub(
/*256*/ IRpcStubBuffer*This,
/*257*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*258*/ PRPC_MESSAGE _pRpcMessage,
/*259*/ DWORD*_pdwStubPhase);
/*262*/ ULONG __stdcall IUnknown_Release_Proxy(
/*263*/ IUnknown*This);
/*266*/ void IUnknown_Release_Stub(
/*267*/ IRpcStubBuffer*This,
/*268*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*269*/ PRPC_MESSAGE _pRpcMessage,
/*270*/ DWORD*_pdwStubPhase);
/*283*/ extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
/*284*/ extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;
/*293*/ extern const IID IID_AsyncIUnknown;
/*320*/ typedef struct AsyncIUnknownVtbl
/*321*/ {
/*322*/ 
/*324*/ HRESULT(__stdcall*QueryInterface)(
/*325*/ AsyncIUnknown*This,
/*326*/ const IID*const riid,
/*328*/ void**ppvObject);
/*330*/ ULONG(__stdcall*AddRef)(
/*331*/ AsyncIUnknown*This);
/*333*/ ULONG(__stdcall*Release)(
/*334*/ AsyncIUnknown*This);
/*336*/ HRESULT(__stdcall*Begin_QueryInterface)(
/*337*/ AsyncIUnknown*This,
/*338*/ const IID*const riid);
/*340*/ HRESULT(__stdcall*Finish_QueryInterface)(
/*341*/ AsyncIUnknown*This,
/*343*/ void**ppvObject);
/*345*/ HRESULT(__stdcall*Begin_AddRef)(
/*346*/ AsyncIUnknown*This);
/*348*/ ULONG(__stdcall*Finish_AddRef)(
/*349*/ AsyncIUnknown*This);
/*351*/ HRESULT(__stdcall*Begin_Release)(
/*352*/ AsyncIUnknown*This);
/*354*/ ULONG(__stdcall*Finish_Release)(
/*355*/ AsyncIUnknown*This);
/*357*/ 
/*358*/ }AsyncIUnknownVtbl;
/*360*/ struct AsyncIUnknown
/*361*/ {
/*362*/ struct AsyncIUnknownVtbl*lpVtbl;
/*363*/ };
/*415*/ typedef IClassFactory*LPCLASSFACTORY;
/*418*/ extern const IID IID_IClassFactory;
/*438*/ typedef struct IClassFactoryVtbl
/*439*/ {
/*440*/ 
/*442*/ HRESULT(__stdcall*QueryInterface)(
/*443*/ IClassFactory*This,
/*444*/ const IID*const riid,
/*446*/ void**ppvObject);
/*448*/ ULONG(__stdcall*AddRef)(
/*449*/ IClassFactory*This);
/*451*/ ULONG(__stdcall*Release)(
/*452*/ IClassFactory*This);
/*454*/ HRESULT(__stdcall*CreateInstance)(
/*455*/ IClassFactory*This,
/*456*/ IUnknown*pUnkOuter,
/*457*/ const IID*const riid,
/*458*/ void**ppvObject);
/*460*/ HRESULT(__stdcall*LockServer)(
/*461*/ IClassFactory*This,
/*462*/ BOOL fLock);
/*464*/ 
/*465*/ }IClassFactoryVtbl;
/*467*/ struct IClassFactory
/*468*/ {
/*469*/ struct IClassFactoryVtbl*lpVtbl;
/*470*/ };
/*500*/ HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy(
/*501*/ IClassFactory*This,
/*502*/ const IID*const riid,
/*503*/ IUnknown**ppvObject);
/*506*/ void IClassFactory_RemoteCreateInstance_Stub(
/*507*/ IRpcStubBuffer*This,
/*508*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*509*/ PRPC_MESSAGE _pRpcMessage,
/*510*/ DWORD*_pdwStubPhase);
/*513*/ HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy(
/*514*/ IClassFactory*This,
/*515*/ BOOL fLock);
/*518*/ void IClassFactory_RemoteLockServer_Stub(
/*519*/ IRpcStubBuffer*This,
/*520*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*521*/ PRPC_MESSAGE _pRpcMessage,
/*522*/ DWORD*_pdwStubPhase);
/*531*/ HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
/*532*/ IClassFactory*This,
/*533*/ IUnknown*pUnkOuter,
/*534*/ const IID*const riid,
/*535*/ void**ppvObject);
/*538*/ HRESULT __stdcall IClassFactory_CreateInstance_Stub(
/*539*/ IClassFactory*This,
/*540*/ const IID*const riid,
/*541*/ IUnknown**ppvObject);
/*543*/ HRESULT __stdcall IClassFactory_LockServer_Proxy(
/*544*/ IClassFactory*This,
/*545*/ BOOL fLock);
/*548*/ HRESULT __stdcall IClassFactory_LockServer_Stub(
/*549*/ IClassFactory*This,
/*550*/ BOOL fLock);
/*53*/ typedef struct IMarshal IMarshal;
/*59*/ typedef struct IMarshal2 IMarshal2;
/*65*/ typedef struct IMalloc IMalloc;
/*71*/ typedef struct IMallocSpy IMallocSpy;
/*77*/ typedef struct IStdMarshalInfo IStdMarshalInfo;
/*83*/ typedef struct IExternalConnection IExternalConnection;
/*89*/ typedef struct IMultiQI IMultiQI;
/*95*/ typedef struct AsyncIMultiQI AsyncIMultiQI;
/*101*/ typedef struct IInternalUnknown IInternalUnknown;
/*107*/ typedef struct IEnumUnknown IEnumUnknown;
/*113*/ typedef struct IBindCtx IBindCtx;
/*119*/ typedef struct IEnumMoniker IEnumMoniker;
/*125*/ typedef struct IRunnableObject IRunnableObject;
/*131*/ typedef struct IRunningObjectTable IRunningObjectTable;
/*137*/ typedef struct IPersist IPersist;
/*143*/ typedef struct IPersistStream IPersistStream;
/*149*/ typedef struct IMoniker IMoniker;
/*155*/ typedef struct IROTData IROTData;
/*161*/ typedef struct IEnumString IEnumString;
/*167*/ typedef struct ISequentialStream ISequentialStream;
/*173*/ typedef struct IStream IStream;
/*179*/ typedef struct IEnumSTATSTG IEnumSTATSTG;
/*185*/ typedef struct IStorage IStorage;
/*191*/ typedef struct IPersistFile IPersistFile;
/*197*/ typedef struct IPersistStorage IPersistStorage;
/*203*/ typedef struct ILockBytes ILockBytes;
/*209*/ typedef struct IEnumFORMATETC IEnumFORMATETC;
/*215*/ typedef struct IEnumSTATDATA IEnumSTATDATA;
/*221*/ typedef struct IRootStorage IRootStorage;
/*227*/ typedef struct IAdviseSink IAdviseSink;
/*233*/ typedef struct AsyncIAdviseSink AsyncIAdviseSink;
/*239*/ typedef struct IAdviseSink2 IAdviseSink2;
/*245*/ typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;
/*251*/ typedef struct IDataObject IDataObject;
/*257*/ typedef struct IDataAdviseHolder IDataAdviseHolder;
/*263*/ typedef struct IMessageFilter IMessageFilter;
/*269*/ typedef struct IRpcChannelBuffer IRpcChannelBuffer;
/*275*/ typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;
/*281*/ typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;
/*287*/ typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;
/*293*/ typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;
/*299*/ typedef struct IRpcProxyBuffer IRpcProxyBuffer;
/*305*/ typedef struct IRpcStubBuffer IRpcStubBuffer;
/*311*/ typedef struct IPSFactoryBuffer IPSFactoryBuffer;
/*317*/ typedef struct IChannelHook IChannelHook;
/*323*/ typedef struct IClientSecurity IClientSecurity;
/*329*/ typedef struct IServerSecurity IServerSecurity;
/*335*/ typedef struct IClassActivator IClassActivator;
/*341*/ typedef struct IRpcOptions IRpcOptions;
/*347*/ typedef struct IGlobalOptions IGlobalOptions;
/*353*/ typedef struct IFillLockBytes IFillLockBytes;
/*359*/ typedef struct IProgressNotify IProgressNotify;
/*365*/ typedef struct ILayoutStorage ILayoutStorage;
/*371*/ typedef struct IBlockingLock IBlockingLock;
/*377*/ typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;
/*383*/ typedef struct IOplockStorage IOplockStorage;
/*389*/ typedef struct ISurrogate ISurrogate;
/*395*/ typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;
/*401*/ typedef struct IDirectWriterLock IDirectWriterLock;
/*407*/ typedef struct ISynchronize ISynchronize;
/*413*/ typedef struct ISynchronizeHandle ISynchronizeHandle;
/*419*/ typedef struct ISynchronizeEvent ISynchronizeEvent;
/*425*/ typedef struct ISynchronizeContainer ISynchronizeContainer;
/*431*/ typedef struct ISynchronizeMutex ISynchronizeMutex;
/*437*/ typedef struct ICancelMethodCalls ICancelMethodCalls;
/*443*/ typedef struct IAsyncManager IAsyncManager;
/*449*/ typedef struct ICallFactory ICallFactory;
/*455*/ typedef struct IRpcHelper IRpcHelper;
/*461*/ typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;
/*467*/ typedef struct IWaitMultiple IWaitMultiple;
/*473*/ typedef struct IUrlMon IUrlMon;
/*479*/ typedef struct IForegroundTransfer IForegroundTransfer;
/*485*/ typedef struct IAddrTrackingControl IAddrTrackingControl;
/*491*/ typedef struct IAddrExclusionControl IAddrExclusionControl;
/*497*/ typedef struct IPipeByte IPipeByte;
/*503*/ typedef struct AsyncIPipeByte AsyncIPipeByte;
/*509*/ typedef struct IPipeLong IPipeLong;
/*515*/ typedef struct AsyncIPipeLong AsyncIPipeLong;
/*521*/ typedef struct IPipeDouble IPipeDouble;
/*527*/ typedef struct AsyncIPipeDouble AsyncIPipeDouble;
/*533*/ typedef struct IThumbnailExtractor IThumbnailExtractor;
/*539*/ typedef struct IDummyHICONIncluder IDummyHICONIncluder;
/*545*/ typedef struct IEnumContextProps IEnumContextProps;
/*551*/ typedef struct IContext IContext;
/*557*/ typedef struct IObjContext IObjContext;
/*563*/ typedef struct IProcessLock IProcessLock;
/*569*/ typedef struct ISurrogateService ISurrogateService;
/*575*/ typedef struct IComThreadingInfo IComThreadingInfo;
/*581*/ typedef struct IProcessInitControl IProcessInitControl;
/*587*/ typedef struct IInitializeSpy IInitializeSpy;
/*647*/ typedef struct _COSERVERINFO
/*648*/ {
/*649*/ DWORD dwReserved1;
/*650*/ LPWSTR pwszName;
/*651*/ COAUTHINFO*pAuthInfo;
/*652*/ DWORD dwReserved2;
/*653*/ }COSERVERINFO;
/*658*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_c_ifspec;
/*659*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0000_v0_0_s_ifspec;
/*667*/ typedef IMarshal*LPMARSHAL;
/*670*/ extern const IID IID_IMarshal;
/*717*/ typedef struct IMarshalVtbl
/*718*/ {
/*719*/ 
/*721*/ HRESULT(__stdcall*QueryInterface)(
/*722*/ IMarshal*This,
/*723*/ const IID*const riid,
/*725*/ void**ppvObject);
/*727*/ ULONG(__stdcall*AddRef)(
/*728*/ IMarshal*This);
/*730*/ ULONG(__stdcall*Release)(
/*731*/ IMarshal*This);
/*733*/ HRESULT(__stdcall*GetUnmarshalClass)(
/*734*/ IMarshal*This,
/*735*/ const IID*const riid,
/*736*/ void*pv,
/*737*/ DWORD dwDestContext,
/*738*/ void*pvDestContext,
/*739*/ DWORD mshlflags,
/*740*/ CLSID*pCid);
/*742*/ HRESULT(__stdcall*GetMarshalSizeMax)(
/*743*/ IMarshal*This,
/*744*/ const IID*const riid,
/*745*/ void*pv,
/*746*/ DWORD dwDestContext,
/*747*/ void*pvDestContext,
/*748*/ DWORD mshlflags,
/*749*/ DWORD*pSize);
/*751*/ HRESULT(__stdcall*MarshalInterface)(
/*752*/ IMarshal*This,
/*753*/ IStream*pStm,
/*754*/ const IID*const riid,
/*755*/ void*pv,
/*756*/ DWORD dwDestContext,
/*757*/ void*pvDestContext,
/*758*/ DWORD mshlflags);
/*760*/ HRESULT(__stdcall*UnmarshalInterface)(
/*761*/ IMarshal*This,
/*762*/ IStream*pStm,
/*763*/ const IID*const riid,
/*764*/ void**ppv);
/*766*/ HRESULT(__stdcall*ReleaseMarshalData)(
/*767*/ IMarshal*This,
/*768*/ IStream*pStm);
/*770*/ HRESULT(__stdcall*DisconnectObject)(
/*771*/ IMarshal*This,
/*772*/ DWORD dwReserved);
/*774*/ 
/*775*/ }IMarshalVtbl;
/*777*/ struct IMarshal
/*778*/ {
/*779*/ struct IMarshalVtbl*lpVtbl;
/*780*/ };
/*832*/ typedef IMarshal2*LPMARSHAL2;
/*835*/ extern const IID IID_IMarshal2;
/*847*/ typedef struct IMarshal2Vtbl
/*848*/ {
/*849*/ 
/*851*/ HRESULT(__stdcall*QueryInterface)(
/*852*/ IMarshal2*This,
/*853*/ const IID*const riid,
/*855*/ void**ppvObject);
/*857*/ ULONG(__stdcall*AddRef)(
/*858*/ IMarshal2*This);
/*860*/ ULONG(__stdcall*Release)(
/*861*/ IMarshal2*This);
/*863*/ HRESULT(__stdcall*GetUnmarshalClass)(
/*864*/ IMarshal2*This,
/*865*/ const IID*const riid,
/*866*/ void*pv,
/*867*/ DWORD dwDestContext,
/*868*/ void*pvDestContext,
/*869*/ DWORD mshlflags,
/*870*/ CLSID*pCid);
/*872*/ HRESULT(__stdcall*GetMarshalSizeMax)(
/*873*/ IMarshal2*This,
/*874*/ const IID*const riid,
/*875*/ void*pv,
/*876*/ DWORD dwDestContext,
/*877*/ void*pvDestContext,
/*878*/ DWORD mshlflags,
/*879*/ DWORD*pSize);
/*881*/ HRESULT(__stdcall*MarshalInterface)(
/*882*/ IMarshal2*This,
/*883*/ IStream*pStm,
/*884*/ const IID*const riid,
/*885*/ void*pv,
/*886*/ DWORD dwDestContext,
/*887*/ void*pvDestContext,
/*888*/ DWORD mshlflags);
/*890*/ HRESULT(__stdcall*UnmarshalInterface)(
/*891*/ IMarshal2*This,
/*892*/ IStream*pStm,
/*893*/ const IID*const riid,
/*894*/ void**ppv);
/*896*/ HRESULT(__stdcall*ReleaseMarshalData)(
/*897*/ IMarshal2*This,
/*898*/ IStream*pStm);
/*900*/ HRESULT(__stdcall*DisconnectObject)(
/*901*/ IMarshal2*This,
/*902*/ DWORD dwReserved);
/*904*/ 
/*905*/ }IMarshal2Vtbl;
/*907*/ struct IMarshal2
/*908*/ {
/*909*/ struct IMarshal2Vtbl*lpVtbl;
/*910*/ };
/*963*/ typedef IMalloc*LPMALLOC;
/*966*/ extern const IID IID_IMalloc;
/*996*/ typedef struct IMallocVtbl
/*997*/ {
/*998*/ 
/*1000*/ HRESULT(__stdcall*QueryInterface)(
/*1001*/ IMalloc*This,
/*1002*/ const IID*const riid,
/*1004*/ void**ppvObject);
/*1006*/ ULONG(__stdcall*AddRef)(
/*1007*/ IMalloc*This);
/*1009*/ ULONG(__stdcall*Release)(
/*1010*/ IMalloc*This);
/*1012*/ void*(__stdcall*Alloc)(
/*1013*/ IMalloc*This,
/*1014*/ SIZE_T cb);
/*1016*/ void*(__stdcall*Realloc)(
/*1017*/ IMalloc*This,
/*1018*/ void*pv,
/*1019*/ SIZE_T cb);
/*1021*/ void(__stdcall*Free)(
/*1022*/ IMalloc*This,
/*1023*/ void*pv);
/*1025*/ SIZE_T(__stdcall*GetSize)(
/*1026*/ IMalloc*This,
/*1027*/ void*pv);
/*1029*/ int(__stdcall*DidAlloc)(
/*1030*/ IMalloc*This,
/*1031*/ void*pv);
/*1033*/ void(__stdcall*HeapMinimize)(
/*1034*/ IMalloc*This);
/*1036*/ 
/*1037*/ }IMallocVtbl;
/*1039*/ struct IMalloc
/*1040*/ {
/*1041*/ struct IMallocVtbl*lpVtbl;
/*1042*/ };
/*1094*/ typedef IMallocSpy*LPMALLOCSPY;
/*1097*/ extern const IID IID_IMallocSpy;
/*1153*/ typedef struct IMallocSpyVtbl
/*1154*/ {
/*1155*/ 
/*1157*/ HRESULT(__stdcall*QueryInterface)(
/*1158*/ IMallocSpy*This,
/*1159*/ const IID*const riid,
/*1161*/ void**ppvObject);
/*1163*/ ULONG(__stdcall*AddRef)(
/*1164*/ IMallocSpy*This);
/*1166*/ ULONG(__stdcall*Release)(
/*1167*/ IMallocSpy*This);
/*1169*/ SIZE_T(__stdcall*PreAlloc)(
/*1170*/ IMallocSpy*This,
/*1171*/ SIZE_T cbRequest);
/*1173*/ void*(__stdcall*PostAlloc)(
/*1174*/ IMallocSpy*This,
/*1175*/ void*pActual);
/*1177*/ void*(__stdcall*PreFree)(
/*1178*/ IMallocSpy*This,
/*1179*/ void*pRequest,
/*1180*/ BOOL fSpyed);
/*1182*/ void(__stdcall*PostFree)(
/*1183*/ IMallocSpy*This,
/*1184*/ BOOL fSpyed);
/*1186*/ SIZE_T(__stdcall*PreRealloc)(
/*1187*/ IMallocSpy*This,
/*1188*/ void*pRequest,
/*1189*/ SIZE_T cbRequest,
/*1190*/ void**ppNewRequest,
/*1191*/ BOOL fSpyed);
/*1193*/ void*(__stdcall*PostRealloc)(
/*1194*/ IMallocSpy*This,
/*1195*/ void*pActual,
/*1196*/ BOOL fSpyed);
/*1198*/ void*(__stdcall*PreGetSize)(
/*1199*/ IMallocSpy*This,
/*1200*/ void*pRequest,
/*1201*/ BOOL fSpyed);
/*1203*/ SIZE_T(__stdcall*PostGetSize)(
/*1204*/ IMallocSpy*This,
/*1205*/ SIZE_T cbActual,
/*1206*/ BOOL fSpyed);
/*1208*/ void*(__stdcall*PreDidAlloc)(
/*1209*/ IMallocSpy*This,
/*1210*/ void*pRequest,
/*1211*/ BOOL fSpyed);
/*1213*/ int(__stdcall*PostDidAlloc)(
/*1214*/ IMallocSpy*This,
/*1215*/ void*pRequest,
/*1216*/ BOOL fSpyed,
/*1217*/ int fActual);
/*1219*/ void(__stdcall*PreHeapMinimize)(
/*1220*/ IMallocSpy*This);
/*1222*/ void(__stdcall*PostHeapMinimize)(
/*1223*/ IMallocSpy*This);
/*1225*/ 
/*1226*/ }IMallocSpyVtbl;
/*1228*/ struct IMallocSpy
/*1229*/ {
/*1230*/ struct IMallocSpyVtbl*lpVtbl;
/*1231*/ };
/*1301*/ typedef IStdMarshalInfo*LPSTDMARSHALINFO;
/*1304*/ extern const IID IID_IStdMarshalInfo;
/*1321*/ typedef struct IStdMarshalInfoVtbl
/*1322*/ {
/*1323*/ 
/*1325*/ HRESULT(__stdcall*QueryInterface)(
/*1326*/ IStdMarshalInfo*This,
/*1327*/ const IID*const riid,
/*1329*/ void**ppvObject);
/*1331*/ ULONG(__stdcall*AddRef)(
/*1332*/ IStdMarshalInfo*This);
/*1334*/ ULONG(__stdcall*Release)(
/*1335*/ IStdMarshalInfo*This);
/*1337*/ HRESULT(__stdcall*GetClassForHandler)(
/*1338*/ IStdMarshalInfo*This,
/*1339*/ DWORD dwDestContext,
/*1340*/ void*pvDestContext,
/*1341*/ CLSID*pClsid);
/*1343*/ 
/*1344*/ }IStdMarshalInfoVtbl;
/*1346*/ struct IStdMarshalInfo
/*1347*/ {
/*1348*/ struct IStdMarshalInfoVtbl*lpVtbl;
/*1349*/ };
/*1386*/ typedef IExternalConnection*LPEXTERNALCONNECTION;
/*1388*/ typedef
/*1389*/ enum tagEXTCONN
/*1390*/ {EXTCONN_STRONG=0x1,
/*1391*/ EXTCONN_WEAK=0x2,
/*1392*/ EXTCONN_CALLABLE=0x4
/*1393*/ }EXTCONN;
/*1396*/ extern const IID IID_IExternalConnection;
/*1417*/ typedef struct IExternalConnectionVtbl
/*1418*/ {
/*1419*/ 
/*1421*/ HRESULT(__stdcall*QueryInterface)(
/*1422*/ IExternalConnection*This,
/*1423*/ const IID*const riid,
/*1425*/ void**ppvObject);
/*1427*/ ULONG(__stdcall*AddRef)(
/*1428*/ IExternalConnection*This);
/*1430*/ ULONG(__stdcall*Release)(
/*1431*/ IExternalConnection*This);
/*1433*/ DWORD(__stdcall*AddConnection)(
/*1434*/ IExternalConnection*This,
/*1435*/ DWORD extconn,
/*1436*/ DWORD reserved);
/*1438*/ DWORD(__stdcall*ReleaseConnection)(
/*1439*/ IExternalConnection*This,
/*1440*/ DWORD extconn,
/*1441*/ DWORD reserved,
/*1442*/ BOOL fLastReleaseCloses);
/*1444*/ 
/*1445*/ }IExternalConnectionVtbl;
/*1447*/ struct IExternalConnection
/*1448*/ {
/*1449*/ struct IExternalConnectionVtbl*lpVtbl;
/*1450*/ };
/*1487*/ typedef IMultiQI*LPMULTIQI;
/*1489*/ typedef struct tagMULTI_QI
/*1490*/ {
/*1491*/ const IID*pIID;
/*1492*/ IUnknown*pItf;
/*1493*/ HRESULT hr;
/*1494*/ }MULTI_QI;
/*1498*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_c_ifspec;
/*1499*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0006_v0_0_s_ifspec;
/*1508*/ extern const IID IID_IMultiQI;
/*1524*/ typedef struct IMultiQIVtbl
/*1525*/ {
/*1526*/ 
/*1528*/ HRESULT(__stdcall*QueryInterface)(
/*1529*/ IMultiQI*This,
/*1530*/ const IID*const riid,
/*1532*/ void**ppvObject);
/*1534*/ ULONG(__stdcall*AddRef)(
/*1535*/ IMultiQI*This);
/*1537*/ ULONG(__stdcall*Release)(
/*1538*/ IMultiQI*This);
/*1540*/ HRESULT(__stdcall*QueryMultipleInterfaces)(
/*1541*/ IMultiQI*This,
/*1542*/ ULONG cMQIs,
/*1543*/ MULTI_QI*pMQIs);
/*1545*/ 
/*1546*/ }IMultiQIVtbl;
/*1548*/ struct IMultiQI
/*1549*/ {
/*1550*/ struct IMultiQIVtbl*lpVtbl;
/*1551*/ };
/*1589*/ extern const IID IID_AsyncIMultiQI;
/*1608*/ typedef struct AsyncIMultiQIVtbl
/*1609*/ {
/*1610*/ 
/*1612*/ HRESULT(__stdcall*QueryInterface)(
/*1613*/ AsyncIMultiQI*This,
/*1614*/ const IID*const riid,
/*1616*/ void**ppvObject);
/*1618*/ ULONG(__stdcall*AddRef)(
/*1619*/ AsyncIMultiQI*This);
/*1621*/ ULONG(__stdcall*Release)(
/*1622*/ AsyncIMultiQI*This);
/*1624*/ HRESULT(__stdcall*Begin_QueryMultipleInterfaces)(
/*1625*/ AsyncIMultiQI*This,
/*1626*/ ULONG cMQIs,
/*1627*/ MULTI_QI*pMQIs);
/*1629*/ HRESULT(__stdcall*Finish_QueryMultipleInterfaces)(
/*1630*/ AsyncIMultiQI*This,
/*1631*/ MULTI_QI*pMQIs);
/*1633*/ 
/*1634*/ }AsyncIMultiQIVtbl;
/*1636*/ struct AsyncIMultiQI
/*1637*/ {
/*1638*/ struct AsyncIMultiQIVtbl*lpVtbl;
/*1639*/ };
/*1680*/ extern const IID IID_IInternalUnknown;
/*1696*/ typedef struct IInternalUnknownVtbl
/*1697*/ {
/*1698*/ 
/*1700*/ HRESULT(__stdcall*QueryInterface)(
/*1701*/ IInternalUnknown*This,
/*1702*/ const IID*const riid,
/*1704*/ void**ppvObject);
/*1706*/ ULONG(__stdcall*AddRef)(
/*1707*/ IInternalUnknown*This);
/*1709*/ ULONG(__stdcall*Release)(
/*1710*/ IInternalUnknown*This);
/*1712*/ HRESULT(__stdcall*QueryInternalInterface)(
/*1713*/ IInternalUnknown*This,
/*1714*/ const IID*const riid,
/*1715*/ void**ppv);
/*1717*/ 
/*1718*/ }IInternalUnknownVtbl;
/*1720*/ struct IInternalUnknown
/*1721*/ {
/*1722*/ struct IInternalUnknownVtbl*lpVtbl;
/*1723*/ };
/*1760*/ typedef IEnumUnknown*LPENUMUNKNOWN;
/*1763*/ extern const IID IID_IEnumUnknown;
/*1788*/ typedef struct IEnumUnknownVtbl
/*1789*/ {
/*1790*/ 
/*1792*/ HRESULT(__stdcall*QueryInterface)(
/*1793*/ IEnumUnknown*This,
/*1794*/ const IID*const riid,
/*1796*/ void**ppvObject);
/*1798*/ ULONG(__stdcall*AddRef)(
/*1799*/ IEnumUnknown*This);
/*1801*/ ULONG(__stdcall*Release)(
/*1802*/ IEnumUnknown*This);
/*1804*/ HRESULT(__stdcall*Next)(
/*1805*/ IEnumUnknown*This,
/*1806*/ ULONG celt,
/*1807*/ IUnknown**rgelt,
/*1808*/ ULONG*pceltFetched);
/*1810*/ HRESULT(__stdcall*Skip)(
/*1811*/ IEnumUnknown*This,
/*1812*/ ULONG celt);
/*1814*/ HRESULT(__stdcall*Reset)(
/*1815*/ IEnumUnknown*This);
/*1817*/ HRESULT(__stdcall*Clone)(
/*1818*/ IEnumUnknown*This,
/*1819*/ IEnumUnknown**ppenum);
/*1821*/ 
/*1822*/ }IEnumUnknownVtbl;
/*1824*/ struct IEnumUnknown
/*1825*/ {
/*1826*/ struct IEnumUnknownVtbl*lpVtbl;
/*1827*/ };
/*1863*/ HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy(
/*1864*/ IEnumUnknown*This,
/*1865*/ ULONG celt,
/*1866*/ IUnknown**rgelt,
/*1867*/ ULONG*pceltFetched);
/*1870*/ void IEnumUnknown_RemoteNext_Stub(
/*1871*/ IRpcStubBuffer*This,
/*1872*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*1873*/ PRPC_MESSAGE _pRpcMessage,
/*1874*/ DWORD*_pdwStubPhase);
/*1887*/ typedef IBindCtx*LPBC;
/*1889*/ typedef IBindCtx*LPBINDCTX;
/*1899*/ typedef struct tagBIND_OPTS
/*1900*/ {
/*1901*/ DWORD cbStruct;
/*1902*/ DWORD grfFlags;
/*1903*/ DWORD grfMode;
/*1904*/ DWORD dwTickCountDeadline;
/*1905*/ }BIND_OPTS;
/*1907*/ typedef struct tagBIND_OPTS*LPBIND_OPTS;
/*1919*/ typedef struct tagBIND_OPTS2
/*1920*/ {
/*1921*/ DWORD cbStruct;
/*1922*/ DWORD grfFlags;
/*1923*/ DWORD grfMode;
/*1924*/ DWORD dwTickCountDeadline;
/*1925*/ DWORD dwTrackFlags;
/*1926*/ DWORD dwClassContext;
/*1927*/ LCID locale;
/*1928*/ COSERVERINFO*pServerInfo;
/*1929*/ }BIND_OPTS2;
/*1931*/ typedef struct tagBIND_OPTS2*LPBIND_OPTS2;
/*1939*/ typedef struct tagBIND_OPTS3
/*1940*/ {
/*1941*/ DWORD cbStruct;
/*1942*/ DWORD grfFlags;
/*1943*/ DWORD grfMode;
/*1944*/ DWORD dwTickCountDeadline;
/*1945*/ DWORD dwTrackFlags;
/*1946*/ DWORD dwClassContext;
/*1947*/ LCID locale;
/*1948*/ COSERVERINFO*pServerInfo;
/*1949*/ HWND hwnd;
/*1950*/ }BIND_OPTS3;
/*1952*/ typedef struct tagBIND_OPTS3*LPBIND_OPTS3;
/*1955*/ typedef
/*1956*/ enum tagBIND_FLAGS
/*1957*/ {BIND_MAYBOTHERUSER=1,
/*1958*/ BIND_JUSTTESTEXISTENCE=2
/*1959*/ }BIND_FLAGS;
/*1962*/ extern const IID IID_IBindCtx;
/*2005*/ typedef struct IBindCtxVtbl
/*2006*/ {
/*2007*/ 
/*2009*/ HRESULT(__stdcall*QueryInterface)(
/*2010*/ IBindCtx*This,
/*2011*/ const IID*const riid,
/*2013*/ void**ppvObject);
/*2015*/ ULONG(__stdcall*AddRef)(
/*2016*/ IBindCtx*This);
/*2018*/ ULONG(__stdcall*Release)(
/*2019*/ IBindCtx*This);
/*2021*/ HRESULT(__stdcall*RegisterObjectBound)(
/*2022*/ IBindCtx*This,
/*2023*/ IUnknown*punk);
/*2025*/ HRESULT(__stdcall*RevokeObjectBound)(
/*2026*/ IBindCtx*This,
/*2027*/ IUnknown*punk);
/*2029*/ HRESULT(__stdcall*ReleaseBoundObjects)(
/*2030*/ IBindCtx*This);
/*2032*/ HRESULT(__stdcall*SetBindOptions)(
/*2033*/ IBindCtx*This,
/*2034*/ BIND_OPTS*pbindopts);
/*2036*/ HRESULT(__stdcall*GetBindOptions)(
/*2037*/ IBindCtx*This,
/*2038*/ BIND_OPTS*pbindopts);
/*2040*/ HRESULT(__stdcall*GetRunningObjectTable)(
/*2041*/ IBindCtx*This,
/*2042*/ IRunningObjectTable**pprot);
/*2044*/ HRESULT(__stdcall*RegisterObjectParam)(
/*2045*/ IBindCtx*This,
/*2046*/ LPOLESTR pszKey,
/*2047*/ IUnknown*punk);
/*2049*/ HRESULT(__stdcall*GetObjectParam)(
/*2050*/ IBindCtx*This,
/*2051*/ LPOLESTR pszKey,
/*2052*/ IUnknown**ppunk);
/*2054*/ HRESULT(__stdcall*EnumObjectParam)(
/*2055*/ IBindCtx*This,
/*2056*/ IEnumString**ppenum);
/*2058*/ HRESULT(__stdcall*RevokeObjectParam)(
/*2059*/ IBindCtx*This,
/*2060*/ LPOLESTR pszKey);
/*2062*/ 
/*2063*/ }IBindCtxVtbl;
/*2065*/ struct IBindCtx
/*2066*/ {
/*2067*/ struct IBindCtxVtbl*lpVtbl;
/*2068*/ };
/*2122*/ HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy(
/*2123*/ IBindCtx*This,
/*2124*/ BIND_OPTS2*pbindopts);
/*2127*/ void IBindCtx_RemoteSetBindOptions_Stub(
/*2128*/ IRpcStubBuffer*This,
/*2129*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2130*/ PRPC_MESSAGE _pRpcMessage,
/*2131*/ DWORD*_pdwStubPhase);
/*2134*/ HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy(
/*2135*/ IBindCtx*This,
/*2136*/ BIND_OPTS2*pbindopts);
/*2139*/ void IBindCtx_RemoteGetBindOptions_Stub(
/*2140*/ IRpcStubBuffer*This,
/*2141*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2142*/ PRPC_MESSAGE _pRpcMessage,
/*2143*/ DWORD*_pdwStubPhase);
/*2156*/ typedef IEnumMoniker*LPENUMMONIKER;
/*2159*/ extern const IID IID_IEnumMoniker;
/*2184*/ typedef struct IEnumMonikerVtbl
/*2185*/ {
/*2186*/ 
/*2188*/ HRESULT(__stdcall*QueryInterface)(
/*2189*/ IEnumMoniker*This,
/*2190*/ const IID*const riid,
/*2192*/ void**ppvObject);
/*2194*/ ULONG(__stdcall*AddRef)(
/*2195*/ IEnumMoniker*This);
/*2197*/ ULONG(__stdcall*Release)(
/*2198*/ IEnumMoniker*This);
/*2200*/ HRESULT(__stdcall*Next)(
/*2201*/ IEnumMoniker*This,
/*2202*/ ULONG celt,
/*2203*/ IMoniker**rgelt,
/*2204*/ ULONG*pceltFetched);
/*2206*/ HRESULT(__stdcall*Skip)(
/*2207*/ IEnumMoniker*This,
/*2208*/ ULONG celt);
/*2210*/ HRESULT(__stdcall*Reset)(
/*2211*/ IEnumMoniker*This);
/*2213*/ HRESULT(__stdcall*Clone)(
/*2214*/ IEnumMoniker*This,
/*2215*/ IEnumMoniker**ppenum);
/*2217*/ 
/*2218*/ }IEnumMonikerVtbl;
/*2220*/ struct IEnumMoniker
/*2221*/ {
/*2222*/ struct IEnumMonikerVtbl*lpVtbl;
/*2223*/ };
/*2259*/ HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy(
/*2260*/ IEnumMoniker*This,
/*2261*/ ULONG celt,
/*2262*/ IMoniker**rgelt,
/*2263*/ ULONG*pceltFetched);
/*2266*/ void IEnumMoniker_RemoteNext_Stub(
/*2267*/ IRpcStubBuffer*This,
/*2268*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2269*/ PRPC_MESSAGE _pRpcMessage,
/*2270*/ DWORD*_pdwStubPhase);
/*2283*/ typedef IRunnableObject*LPRUNNABLEOBJECT;
/*2286*/ extern const IID IID_IRunnableObject;
/*2313*/ typedef struct IRunnableObjectVtbl
/*2314*/ {
/*2315*/ 
/*2317*/ HRESULT(__stdcall*QueryInterface)(
/*2318*/ IRunnableObject*This,
/*2319*/ const IID*const riid,
/*2321*/ void**ppvObject);
/*2323*/ ULONG(__stdcall*AddRef)(
/*2324*/ IRunnableObject*This);
/*2326*/ ULONG(__stdcall*Release)(
/*2327*/ IRunnableObject*This);
/*2329*/ HRESULT(__stdcall*GetRunningClass)(
/*2330*/ IRunnableObject*This,
/*2331*/ LPCLSID lpClsid);
/*2333*/ HRESULT(__stdcall*Run)(
/*2334*/ IRunnableObject*This,
/*2335*/ LPBINDCTX pbc);
/*2337*/ BOOL(__stdcall*IsRunning)(
/*2338*/ IRunnableObject*This);
/*2340*/ HRESULT(__stdcall*LockRunning)(
/*2341*/ IRunnableObject*This,
/*2342*/ BOOL fLock,
/*2343*/ BOOL fLastUnlockCloses);
/*2345*/ HRESULT(__stdcall*SetContainedObject)(
/*2346*/ IRunnableObject*This,
/*2347*/ BOOL fContained);
/*2349*/ 
/*2350*/ }IRunnableObjectVtbl;
/*2352*/ struct IRunnableObject
/*2353*/ {
/*2354*/ struct IRunnableObjectVtbl*lpVtbl;
/*2355*/ };
/*2394*/ HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy(
/*2395*/ IRunnableObject*This);
/*2398*/ void IRunnableObject_RemoteIsRunning_Stub(
/*2399*/ IRpcStubBuffer*This,
/*2400*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2401*/ PRPC_MESSAGE _pRpcMessage,
/*2402*/ DWORD*_pdwStubPhase);
/*2415*/ typedef IRunningObjectTable*LPRUNNINGOBJECTTABLE;
/*2418*/ extern const IID IID_IRunningObjectTable;
/*2457*/ typedef struct IRunningObjectTableVtbl
/*2458*/ {
/*2459*/ 
/*2461*/ HRESULT(__stdcall*QueryInterface)(
/*2462*/ IRunningObjectTable*This,
/*2463*/ const IID*const riid,
/*2465*/ void**ppvObject);
/*2467*/ ULONG(__stdcall*AddRef)(
/*2468*/ IRunningObjectTable*This);
/*2470*/ ULONG(__stdcall*Release)(
/*2471*/ IRunningObjectTable*This);
/*2473*/ HRESULT(__stdcall*Register)(
/*2474*/ IRunningObjectTable*This,
/*2475*/ DWORD grfFlags,
/*2476*/ IUnknown*punkObject,
/*2477*/ IMoniker*pmkObjectName,
/*2478*/ DWORD*pdwRegister);
/*2480*/ HRESULT(__stdcall*Revoke)(
/*2481*/ IRunningObjectTable*This,
/*2482*/ DWORD dwRegister);
/*2484*/ HRESULT(__stdcall*IsRunning)(
/*2485*/ IRunningObjectTable*This,
/*2486*/ IMoniker*pmkObjectName);
/*2488*/ HRESULT(__stdcall*GetObjectA)(
/*2489*/ IRunningObjectTable*This,
/*2490*/ IMoniker*pmkObjectName,
/*2491*/ IUnknown**ppunkObject);
/*2493*/ HRESULT(__stdcall*NoteChangeTime)(
/*2494*/ IRunningObjectTable*This,
/*2495*/ DWORD dwRegister,
/*2496*/ FILETIME*pfiletime);
/*2498*/ HRESULT(__stdcall*GetTimeOfLastChange)(
/*2499*/ IRunningObjectTable*This,
/*2500*/ IMoniker*pmkObjectName,
/*2501*/ FILETIME*pfiletime);
/*2503*/ HRESULT(__stdcall*EnumRunning)(
/*2504*/ IRunningObjectTable*This,
/*2505*/ IEnumMoniker**ppenumMoniker);
/*2507*/ 
/*2508*/ }IRunningObjectTableVtbl;
/*2510*/ struct IRunningObjectTable
/*2511*/ {
/*2512*/ struct IRunningObjectTableVtbl*lpVtbl;
/*2513*/ };
/*2568*/ typedef IPersist*LPPERSIST;
/*2571*/ extern const IID IID_IPersist;
/*2586*/ typedef struct IPersistVtbl
/*2587*/ {
/*2588*/ 
/*2590*/ HRESULT(__stdcall*QueryInterface)(
/*2591*/ IPersist*This,
/*2592*/ const IID*const riid,
/*2594*/ void**ppvObject);
/*2596*/ ULONG(__stdcall*AddRef)(
/*2597*/ IPersist*This);
/*2599*/ ULONG(__stdcall*Release)(
/*2600*/ IPersist*This);
/*2602*/ HRESULT(__stdcall*GetClassID)(
/*2603*/ IPersist*This,
/*2604*/ CLSID*pClassID);
/*2606*/ 
/*2607*/ }IPersistVtbl;
/*2609*/ struct IPersist
/*2610*/ {
/*2611*/ struct IPersistVtbl*lpVtbl;
/*2612*/ };
/*2649*/ typedef IPersistStream*LPPERSISTSTREAM;
/*2652*/ extern const IID IID_IPersistStream;
/*2676*/ typedef struct IPersistStreamVtbl
/*2677*/ {
/*2678*/ 
/*2680*/ HRESULT(__stdcall*QueryInterface)(
/*2681*/ IPersistStream*This,
/*2682*/ const IID*const riid,
/*2684*/ void**ppvObject);
/*2686*/ ULONG(__stdcall*AddRef)(
/*2687*/ IPersistStream*This);
/*2689*/ ULONG(__stdcall*Release)(
/*2690*/ IPersistStream*This);
/*2692*/ HRESULT(__stdcall*GetClassID)(
/*2693*/ IPersistStream*This,
/*2694*/ CLSID*pClassID);
/*2696*/ HRESULT(__stdcall*IsDirty)(
/*2697*/ IPersistStream*This);
/*2699*/ HRESULT(__stdcall*Load)(
/*2700*/ IPersistStream*This,
/*2701*/ IStream*pStm);
/*2703*/ HRESULT(__stdcall*Save)(
/*2704*/ IPersistStream*This,
/*2705*/ IStream*pStm,
/*2706*/ BOOL fClearDirty);
/*2708*/ HRESULT(__stdcall*GetSizeMax)(
/*2709*/ IPersistStream*This,
/*2710*/ ULARGE_INTEGER*pcbSize);
/*2712*/ 
/*2713*/ }IPersistStreamVtbl;
/*2715*/ struct IPersistStream
/*2716*/ {
/*2717*/ struct IPersistStreamVtbl*lpVtbl;
/*2718*/ };
/*2768*/ typedef IMoniker*LPMONIKER;
/*2770*/ typedef
/*2771*/ enum tagMKSYS
/*2772*/ {MKSYS_NONE=0,
/*2773*/ MKSYS_GENERICCOMPOSITE=1,
/*2774*/ MKSYS_FILEMONIKER=2,
/*2775*/ MKSYS_ANTIMONIKER=3,
/*2776*/ MKSYS_ITEMMONIKER=4,
/*2777*/ MKSYS_POINTERMONIKER=5,
/*2778*/ MKSYS_CLASSMONIKER=7,
/*2779*/ MKSYS_OBJREFMONIKER=8,
/*2780*/ MKSYS_SESSIONMONIKER=9,
/*2781*/ MKSYS_LUAMONIKER=10
/*2782*/ }MKSYS;
/*2784*/ typedef
/*2785*/ enum tagMKREDUCE
/*2786*/ {MKRREDUCE_ONE=(3<<16),
/*2787*/ MKRREDUCE_TOUSER=(2<<16),
/*2788*/ MKRREDUCE_THROUGHUSER=(1<<16),
/*2789*/ MKRREDUCE_ALL=0
/*2790*/ }MKRREDUCE;
/*2793*/ extern const IID IID_IMoniker;
/*2874*/ typedef struct IMonikerVtbl
/*2875*/ {
/*2876*/ 
/*2878*/ HRESULT(__stdcall*QueryInterface)(
/*2879*/ IMoniker*This,
/*2880*/ const IID*const riid,
/*2882*/ void**ppvObject);
/*2884*/ ULONG(__stdcall*AddRef)(
/*2885*/ IMoniker*This);
/*2887*/ ULONG(__stdcall*Release)(
/*2888*/ IMoniker*This);
/*2890*/ HRESULT(__stdcall*GetClassID)(
/*2891*/ IMoniker*This,
/*2892*/ CLSID*pClassID);
/*2894*/ HRESULT(__stdcall*IsDirty)(
/*2895*/ IMoniker*This);
/*2897*/ HRESULT(__stdcall*Load)(
/*2898*/ IMoniker*This,
/*2899*/ IStream*pStm);
/*2901*/ HRESULT(__stdcall*Save)(
/*2902*/ IMoniker*This,
/*2903*/ IStream*pStm,
/*2904*/ BOOL fClearDirty);
/*2906*/ HRESULT(__stdcall*GetSizeMax)(
/*2907*/ IMoniker*This,
/*2908*/ ULARGE_INTEGER*pcbSize);
/*2910*/ HRESULT(__stdcall*BindToObject)(
/*2911*/ IMoniker*This,
/*2912*/ IBindCtx*pbc,
/*2913*/ IMoniker*pmkToLeft,
/*2914*/ const IID*const riidResult,
/*2915*/ void**ppvResult);
/*2917*/ HRESULT(__stdcall*BindToStorage)(
/*2918*/ IMoniker*This,
/*2919*/ IBindCtx*pbc,
/*2920*/ IMoniker*pmkToLeft,
/*2921*/ const IID*const riid,
/*2922*/ void**ppvObj);
/*2924*/ HRESULT(__stdcall*Reduce)(
/*2925*/ IMoniker*This,
/*2926*/ IBindCtx*pbc,
/*2927*/ DWORD dwReduceHowFar,
/*2928*/ IMoniker**ppmkToLeft,
/*2929*/ IMoniker**ppmkReduced);
/*2931*/ HRESULT(__stdcall*ComposeWith)(
/*2932*/ IMoniker*This,
/*2933*/ IMoniker*pmkRight,
/*2934*/ BOOL fOnlyIfNotGeneric,
/*2935*/ IMoniker**ppmkComposite);
/*2937*/ HRESULT(__stdcall*Enum)(
/*2938*/ IMoniker*This,
/*2939*/ BOOL fForward,
/*2940*/ IEnumMoniker**ppenumMoniker);
/*2942*/ HRESULT(__stdcall*IsEqual)(
/*2943*/ IMoniker*This,
/*2944*/ IMoniker*pmkOtherMoniker);
/*2946*/ HRESULT(__stdcall*Hash)(
/*2947*/ IMoniker*This,
/*2948*/ DWORD*pdwHash);
/*2950*/ HRESULT(__stdcall*IsRunning)(
/*2951*/ IMoniker*This,
/*2952*/ IBindCtx*pbc,
/*2953*/ IMoniker*pmkToLeft,
/*2954*/ IMoniker*pmkNewlyRunning);
/*2956*/ HRESULT(__stdcall*GetTimeOfLastChange)(
/*2957*/ IMoniker*This,
/*2958*/ IBindCtx*pbc,
/*2959*/ IMoniker*pmkToLeft,
/*2960*/ FILETIME*pFileTime);
/*2962*/ HRESULT(__stdcall*Inverse)(
/*2963*/ IMoniker*This,
/*2964*/ IMoniker**ppmk);
/*2966*/ HRESULT(__stdcall*CommonPrefixWith)(
/*2967*/ IMoniker*This,
/*2968*/ IMoniker*pmkOther,
/*2969*/ IMoniker**ppmkPrefix);
/*2971*/ HRESULT(__stdcall*RelativePathTo)(
/*2972*/ IMoniker*This,
/*2973*/ IMoniker*pmkOther,
/*2974*/ IMoniker**ppmkRelPath);
/*2976*/ HRESULT(__stdcall*GetDisplayName)(
/*2977*/ IMoniker*This,
/*2978*/ IBindCtx*pbc,
/*2979*/ IMoniker*pmkToLeft,
/*2980*/ LPOLESTR*ppszDisplayName);
/*2982*/ HRESULT(__stdcall*ParseDisplayName)(
/*2983*/ IMoniker*This,
/*2984*/ IBindCtx*pbc,
/*2985*/ IMoniker*pmkToLeft,
/*2986*/ LPOLESTR pszDisplayName,
/*2987*/ ULONG*pchEaten,
/*2988*/ IMoniker**ppmkOut);
/*2990*/ HRESULT(__stdcall*IsSystemMoniker)(
/*2991*/ IMoniker*This,
/*2992*/ DWORD*pdwMksys);
/*2994*/ 
/*2995*/ }IMonikerVtbl;
/*2997*/ struct IMoniker
/*2998*/ {
/*2999*/ struct IMonikerVtbl*lpVtbl;
/*3000*/ };
/*3086*/ HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy(
/*3087*/ IMoniker*This,
/*3088*/ IBindCtx*pbc,
/*3089*/ IMoniker*pmkToLeft,
/*3090*/ const IID*const riidResult,
/*3091*/ IUnknown**ppvResult);
/*3094*/ void IMoniker_RemoteBindToObject_Stub(
/*3095*/ IRpcStubBuffer*This,
/*3096*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3097*/ PRPC_MESSAGE _pRpcMessage,
/*3098*/ DWORD*_pdwStubPhase);
/*3101*/ HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy(
/*3102*/ IMoniker*This,
/*3103*/ IBindCtx*pbc,
/*3104*/ IMoniker*pmkToLeft,
/*3105*/ const IID*const riid,
/*3106*/ IUnknown**ppvObj);
/*3109*/ void IMoniker_RemoteBindToStorage_Stub(
/*3110*/ IRpcStubBuffer*This,
/*3111*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3112*/ PRPC_MESSAGE _pRpcMessage,
/*3113*/ DWORD*_pdwStubPhase);
/*3127*/ extern const IID IID_IROTData;
/*3144*/ typedef struct IROTDataVtbl
/*3145*/ {
/*3146*/ 
/*3148*/ HRESULT(__stdcall*QueryInterface)(
/*3149*/ IROTData*This,
/*3150*/ const IID*const riid,
/*3152*/ void**ppvObject);
/*3154*/ ULONG(__stdcall*AddRef)(
/*3155*/ IROTData*This);
/*3157*/ ULONG(__stdcall*Release)(
/*3158*/ IROTData*This);
/*3160*/ HRESULT(__stdcall*GetComparisonData)(
/*3161*/ IROTData*This,
/*3162*/ byte*pbData,
/*3163*/ ULONG cbMax,
/*3164*/ ULONG*pcbData);
/*3166*/ 
/*3167*/ }IROTDataVtbl;
/*3169*/ struct IROTData
/*3170*/ {
/*3171*/ struct IROTDataVtbl*lpVtbl;
/*3172*/ };
/*3209*/ typedef IEnumString*LPENUMSTRING;
/*3212*/ extern const IID IID_IEnumString;
/*3238*/ typedef struct IEnumStringVtbl
/*3239*/ {
/*3240*/ 
/*3242*/ HRESULT(__stdcall*QueryInterface)(
/*3243*/ IEnumString*This,
/*3244*/ const IID*const riid,
/*3246*/ void**ppvObject);
/*3248*/ ULONG(__stdcall*AddRef)(
/*3249*/ IEnumString*This);
/*3251*/ ULONG(__stdcall*Release)(
/*3252*/ IEnumString*This);
/*3254*/ HRESULT(__stdcall*Next)(
/*3255*/ IEnumString*This,
/*3256*/ ULONG celt,
/*3258*/ LPOLESTR*rgelt,
/*3259*/ ULONG*pceltFetched);
/*3261*/ HRESULT(__stdcall*Skip)(
/*3262*/ IEnumString*This,
/*3263*/ ULONG celt);
/*3265*/ HRESULT(__stdcall*Reset)(
/*3266*/ IEnumString*This);
/*3268*/ HRESULT(__stdcall*Clone)(
/*3269*/ IEnumString*This,
/*3270*/ IEnumString**ppenum);
/*3272*/ 
/*3273*/ }IEnumStringVtbl;
/*3275*/ struct IEnumString
/*3276*/ {
/*3277*/ struct IEnumStringVtbl*lpVtbl;
/*3278*/ };
/*3314*/ HRESULT __stdcall IEnumString_RemoteNext_Proxy(
/*3315*/ IEnumString*This,
/*3316*/ ULONG celt,
/*3317*/ LPOLESTR*rgelt,
/*3318*/ ULONG*pceltFetched);
/*3321*/ void IEnumString_RemoteNext_Stub(
/*3322*/ IRpcStubBuffer*This,
/*3323*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3324*/ PRPC_MESSAGE _pRpcMessage,
/*3325*/ DWORD*_pdwStubPhase);
/*3339*/ extern const IID IID_ISequentialStream;
/*3361*/ typedef struct ISequentialStreamVtbl
/*3362*/ {
/*3363*/ 
/*3365*/ HRESULT(__stdcall*QueryInterface)(
/*3366*/ ISequentialStream*This,
/*3367*/ const IID*const riid,
/*3369*/ void**ppvObject);
/*3371*/ ULONG(__stdcall*AddRef)(
/*3372*/ ISequentialStream*This);
/*3374*/ ULONG(__stdcall*Release)(
/*3375*/ ISequentialStream*This);
/*3377*/ HRESULT(__stdcall*Read)(
/*3378*/ ISequentialStream*This,
/*3379*/ void*pv,
/*3380*/ ULONG cb,
/*3381*/ ULONG*pcbRead);
/*3383*/ HRESULT(__stdcall*Write)(
/*3384*/ ISequentialStream*This,
/*3385*/ const void*pv,
/*3386*/ ULONG cb,
/*3387*/ ULONG*pcbWritten);
/*3389*/ 
/*3390*/ }ISequentialStreamVtbl;
/*3392*/ struct ISequentialStream
/*3393*/ {
/*3394*/ struct ISequentialStreamVtbl*lpVtbl;
/*3395*/ };
/*3425*/ HRESULT __stdcall ISequentialStream_RemoteRead_Proxy(
/*3426*/ ISequentialStream*This,
/*3427*/ byte*pv,
/*3428*/ ULONG cb,
/*3429*/ ULONG*pcbRead);
/*3432*/ void ISequentialStream_RemoteRead_Stub(
/*3433*/ IRpcStubBuffer*This,
/*3434*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3435*/ PRPC_MESSAGE _pRpcMessage,
/*3436*/ DWORD*_pdwStubPhase);
/*3439*/ HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy(
/*3440*/ ISequentialStream*This,
/*3441*/ const byte*pv,
/*3442*/ ULONG cb,
/*3443*/ ULONG*pcbWritten);
/*3446*/ void ISequentialStream_RemoteWrite_Stub(
/*3447*/ IRpcStubBuffer*This,
/*3448*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3449*/ PRPC_MESSAGE _pRpcMessage,
/*3450*/ DWORD*_pdwStubPhase);
/*3463*/ typedef IStream*LPSTREAM;
/*3483*/ typedef struct tagSTATSTG
/*3484*/ {
/*3485*/ LPOLESTR pwcsName;
/*3486*/ DWORD type;
/*3487*/ ULARGE_INTEGER cbSize;
/*3488*/ FILETIME mtime;
/*3489*/ FILETIME ctime;
/*3490*/ FILETIME atime;
/*3491*/ DWORD grfMode;
/*3492*/ DWORD grfLocksSupported;
/*3493*/ CLSID clsid;
/*3494*/ DWORD grfStateBits;
/*3495*/ DWORD reserved;
/*3496*/ }STATSTG;
/*3499*/ typedef
/*3500*/ enum tagSTGTY
/*3501*/ {STGTY_STORAGE=1,
/*3502*/ STGTY_STREAM=2,
/*3503*/ STGTY_LOCKBYTES=3,
/*3504*/ STGTY_PROPERTY=4
/*3505*/ }STGTY;
/*3507*/ typedef
/*3508*/ enum tagSTREAM_SEEK
/*3509*/ {STREAM_SEEK_SET=0,
/*3510*/ STREAM_SEEK_CUR=1,
/*3511*/ STREAM_SEEK_END=2
/*3512*/ }STREAM_SEEK;
/*3514*/ typedef
/*3515*/ enum tagLOCKTYPE
/*3516*/ {LOCK_WRITE=1,
/*3517*/ LOCK_EXCLUSIVE=2,
/*3518*/ LOCK_ONLYONCE=4
/*3519*/ }LOCKTYPE;
/*3522*/ extern const IID IID_IStream;
/*3570*/ typedef struct IStreamVtbl
/*3571*/ {
/*3572*/ 
/*3574*/ HRESULT(__stdcall*QueryInterface)(
/*3575*/ IStream*This,
/*3576*/ const IID*const riid,
/*3578*/ void**ppvObject);
/*3580*/ ULONG(__stdcall*AddRef)(
/*3581*/ IStream*This);
/*3583*/ ULONG(__stdcall*Release)(
/*3584*/ IStream*This);
/*3586*/ HRESULT(__stdcall*Read)(
/*3587*/ IStream*This,
/*3588*/ void*pv,
/*3589*/ ULONG cb,
/*3590*/ ULONG*pcbRead);
/*3592*/ HRESULT(__stdcall*Write)(
/*3593*/ IStream*This,
/*3594*/ const void*pv,
/*3595*/ ULONG cb,
/*3596*/ ULONG*pcbWritten);
/*3598*/ HRESULT(__stdcall*Seek)(
/*3599*/ IStream*This,
/*3600*/ LARGE_INTEGER dlibMove,
/*3601*/ DWORD dwOrigin,
/*3602*/ ULARGE_INTEGER*plibNewPosition);
/*3604*/ HRESULT(__stdcall*SetSize)(
/*3605*/ IStream*This,
/*3606*/ ULARGE_INTEGER libNewSize);
/*3608*/ HRESULT(__stdcall*CopyTo)(
/*3609*/ IStream*This,
/*3610*/ IStream*pstm,
/*3611*/ ULARGE_INTEGER cb,
/*3612*/ ULARGE_INTEGER*pcbRead,
/*3613*/ ULARGE_INTEGER*pcbWritten);
/*3615*/ HRESULT(__stdcall*Commit)(
/*3616*/ IStream*This,
/*3617*/ DWORD grfCommitFlags);
/*3619*/ HRESULT(__stdcall*Revert)(
/*3620*/ IStream*This);
/*3622*/ HRESULT(__stdcall*LockRegion)(
/*3623*/ IStream*This,
/*3624*/ ULARGE_INTEGER libOffset,
/*3625*/ ULARGE_INTEGER cb,
/*3626*/ DWORD dwLockType);
/*3628*/ HRESULT(__stdcall*UnlockRegion)(
/*3629*/ IStream*This,
/*3630*/ ULARGE_INTEGER libOffset,
/*3631*/ ULARGE_INTEGER cb,
/*3632*/ DWORD dwLockType);
/*3634*/ HRESULT(__stdcall*Stat)(
/*3635*/ IStream*This,
/*3636*/ STATSTG*pstatstg,
/*3637*/ DWORD grfStatFlag);
/*3639*/ HRESULT(__stdcall*Clone)(
/*3640*/ IStream*This,
/*3641*/ IStream**ppstm);
/*3643*/ 
/*3644*/ }IStreamVtbl;
/*3646*/ struct IStream
/*3647*/ {
/*3648*/ struct IStreamVtbl*lpVtbl;
/*3649*/ };
/*3707*/ HRESULT __stdcall IStream_RemoteSeek_Proxy(
/*3708*/ IStream*This,
/*3709*/ LARGE_INTEGER dlibMove,
/*3710*/ DWORD dwOrigin,
/*3711*/ ULARGE_INTEGER*plibNewPosition);
/*3714*/ void IStream_RemoteSeek_Stub(
/*3715*/ IRpcStubBuffer*This,
/*3716*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3717*/ PRPC_MESSAGE _pRpcMessage,
/*3718*/ DWORD*_pdwStubPhase);
/*3721*/ HRESULT __stdcall IStream_RemoteCopyTo_Proxy(
/*3722*/ IStream*This,
/*3723*/ IStream*pstm,
/*3724*/ ULARGE_INTEGER cb,
/*3725*/ ULARGE_INTEGER*pcbRead,
/*3726*/ ULARGE_INTEGER*pcbWritten);
/*3729*/ void IStream_RemoteCopyTo_Stub(
/*3730*/ IRpcStubBuffer*This,
/*3731*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3732*/ PRPC_MESSAGE _pRpcMessage,
/*3733*/ DWORD*_pdwStubPhase);
/*3746*/ typedef IEnumSTATSTG*LPENUMSTATSTG;
/*3749*/ extern const IID IID_IEnumSTATSTG;
/*3774*/ typedef struct IEnumSTATSTGVtbl
/*3775*/ {
/*3776*/ 
/*3778*/ HRESULT(__stdcall*QueryInterface)(
/*3779*/ IEnumSTATSTG*This,
/*3780*/ const IID*const riid,
/*3782*/ void**ppvObject);
/*3784*/ ULONG(__stdcall*AddRef)(
/*3785*/ IEnumSTATSTG*This);
/*3787*/ ULONG(__stdcall*Release)(
/*3788*/ IEnumSTATSTG*This);
/*3790*/ HRESULT(__stdcall*Next)(
/*3791*/ IEnumSTATSTG*This,
/*3792*/ ULONG celt,
/*3793*/ STATSTG*rgelt,
/*3794*/ ULONG*pceltFetched);
/*3796*/ HRESULT(__stdcall*Skip)(
/*3797*/ IEnumSTATSTG*This,
/*3798*/ ULONG celt);
/*3800*/ HRESULT(__stdcall*Reset)(
/*3801*/ IEnumSTATSTG*This);
/*3803*/ HRESULT(__stdcall*Clone)(
/*3804*/ IEnumSTATSTG*This,
/*3805*/ IEnumSTATSTG**ppenum);
/*3807*/ 
/*3808*/ }IEnumSTATSTGVtbl;
/*3810*/ struct IEnumSTATSTG
/*3811*/ {
/*3812*/ struct IEnumSTATSTGVtbl*lpVtbl;
/*3813*/ };
/*3849*/ HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy(
/*3850*/ IEnumSTATSTG*This,
/*3851*/ ULONG celt,
/*3852*/ STATSTG*rgelt,
/*3853*/ ULONG*pceltFetched);
/*3856*/ void IEnumSTATSTG_RemoteNext_Stub(
/*3857*/ IRpcStubBuffer*This,
/*3858*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3859*/ PRPC_MESSAGE _pRpcMessage,
/*3860*/ DWORD*_pdwStubPhase);
/*3873*/ typedef IStorage*LPSTORAGE;
/*3875*/ typedef struct tagRemSNB
/*3876*/ {
/*3877*/ unsigned long ulCntStr;
/*3878*/ unsigned long ulCntChar;
/*3879*/ OLECHAR rgString[1];
/*3880*/ }RemSNB;
/*3882*/ typedef RemSNB*wireSNB;
/*3884*/ typedef OLECHAR**SNB;
/*3887*/ extern const IID IID_IStorage;
/*3975*/ typedef struct IStorageVtbl
/*3976*/ {
/*3977*/ 
/*3979*/ HRESULT(__stdcall*QueryInterface)(
/*3980*/ IStorage*This,
/*3981*/ const IID*const riid,
/*3983*/ void**ppvObject);
/*3985*/ ULONG(__stdcall*AddRef)(
/*3986*/ IStorage*This);
/*3988*/ ULONG(__stdcall*Release)(
/*3989*/ IStorage*This);
/*3991*/ HRESULT(__stdcall*CreateStream)(
/*3992*/ IStorage*This,
/*3993*/ const OLECHAR*pwcsName,
/*3994*/ DWORD grfMode,
/*3995*/ DWORD reserved1,
/*3996*/ DWORD reserved2,
/*3997*/ IStream**ppstm);
/*3999*/ HRESULT(__stdcall*OpenStream)(
/*4000*/ IStorage*This,
/*4001*/ const OLECHAR*pwcsName,
/*4002*/ void*reserved1,
/*4003*/ DWORD grfMode,
/*4004*/ DWORD reserved2,
/*4005*/ IStream**ppstm);
/*4007*/ HRESULT(__stdcall*CreateStorage)(
/*4008*/ IStorage*This,
/*4009*/ const OLECHAR*pwcsName,
/*4010*/ DWORD grfMode,
/*4011*/ DWORD reserved1,
/*4012*/ DWORD reserved2,
/*4013*/ IStorage**ppstg);
/*4015*/ HRESULT(__stdcall*OpenStorage)(
/*4016*/ IStorage*This,
/*4017*/ const OLECHAR*pwcsName,
/*4018*/ IStorage*pstgPriority,
/*4019*/ DWORD grfMode,
/*4020*/ SNB snbExclude,
/*4021*/ DWORD reserved,
/*4022*/ IStorage**ppstg);
/*4024*/ HRESULT(__stdcall*CopyTo)(
/*4025*/ IStorage*This,
/*4026*/ DWORD ciidExclude,
/*4027*/ const IID*rgiidExclude,
/*4028*/ SNB snbExclude,
/*4029*/ IStorage*pstgDest);
/*4031*/ HRESULT(__stdcall*MoveElementTo)(
/*4032*/ IStorage*This,
/*4033*/ const OLECHAR*pwcsName,
/*4034*/ IStorage*pstgDest,
/*4035*/ const OLECHAR*pwcsNewName,
/*4036*/ DWORD grfFlags);
/*4038*/ HRESULT(__stdcall*Commit)(
/*4039*/ IStorage*This,
/*4040*/ DWORD grfCommitFlags);
/*4042*/ HRESULT(__stdcall*Revert)(
/*4043*/ IStorage*This);
/*4045*/ HRESULT(__stdcall*EnumElements)(
/*4046*/ IStorage*This,
/*4047*/ DWORD reserved1,
/*4048*/ void*reserved2,
/*4049*/ DWORD reserved3,
/*4050*/ IEnumSTATSTG**ppenum);
/*4052*/ HRESULT(__stdcall*DestroyElement)(
/*4053*/ IStorage*This,
/*4054*/ const OLECHAR*pwcsName);
/*4056*/ HRESULT(__stdcall*RenameElement)(
/*4057*/ IStorage*This,
/*4058*/ const OLECHAR*pwcsOldName,
/*4059*/ const OLECHAR*pwcsNewName);
/*4061*/ HRESULT(__stdcall*SetElementTimes)(
/*4062*/ IStorage*This,
/*4063*/ const OLECHAR*pwcsName,
/*4064*/ const FILETIME*pctime,
/*4065*/ const FILETIME*patime,
/*4066*/ const FILETIME*pmtime);
/*4068*/ HRESULT(__stdcall*SetClass)(
/*4069*/ IStorage*This,
/*4070*/ const IID*const clsid);
/*4072*/ HRESULT(__stdcall*SetStateBits)(
/*4073*/ IStorage*This,
/*4074*/ DWORD grfStateBits,
/*4075*/ DWORD grfMask);
/*4077*/ HRESULT(__stdcall*Stat)(
/*4078*/ IStorage*This,
/*4079*/ STATSTG*pstatstg,
/*4080*/ DWORD grfStatFlag);
/*4082*/ 
/*4083*/ }IStorageVtbl;
/*4085*/ struct IStorage
/*4086*/ {
/*4087*/ struct IStorageVtbl*lpVtbl;
/*4088*/ };
/*4157*/ HRESULT __stdcall IStorage_RemoteOpenStream_Proxy(
/*4158*/ IStorage*This,
/*4159*/ const OLECHAR*pwcsName,
/*4160*/ unsigned long cbReserved1,
/*4161*/ byte*reserved1,
/*4162*/ DWORD grfMode,
/*4163*/ DWORD reserved2,
/*4164*/ IStream**ppstm);
/*4167*/ void IStorage_RemoteOpenStream_Stub(
/*4168*/ IRpcStubBuffer*This,
/*4169*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*4170*/ PRPC_MESSAGE _pRpcMessage,
/*4171*/ DWORD*_pdwStubPhase);
/*4174*/ HRESULT __stdcall IStorage_RemoteCopyTo_Proxy(
/*4175*/ IStorage*This,
/*4176*/ DWORD ciidExclude,
/*4177*/ const IID*rgiidExclude,
/*4178*/ SNB snbExclude,
/*4179*/ IStorage*pstgDest);
/*4182*/ void IStorage_RemoteCopyTo_Stub(
/*4183*/ IRpcStubBuffer*This,
/*4184*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*4185*/ PRPC_MESSAGE _pRpcMessage,
/*4186*/ DWORD*_pdwStubPhase);
/*4189*/ HRESULT __stdcall IStorage_RemoteEnumElements_Proxy(
/*4190*/ IStorage*This,
/*4191*/ DWORD reserved1,
/*4192*/ unsigned long cbReserved2,
/*4193*/ byte*reserved2,
/*4194*/ DWORD reserved3,
/*4195*/ IEnumSTATSTG**ppenum);
/*4198*/ void IStorage_RemoteEnumElements_Stub(
/*4199*/ IRpcStubBuffer*This,
/*4200*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*4201*/ PRPC_MESSAGE _pRpcMessage,
/*4202*/ DWORD*_pdwStubPhase);
/*4215*/ typedef IPersistFile*LPPERSISTFILE;
/*4218*/ extern const IID IID_IPersistFile;
/*4246*/ typedef struct IPersistFileVtbl
/*4247*/ {
/*4248*/ 
/*4250*/ HRESULT(__stdcall*QueryInterface)(
/*4251*/ IPersistFile*This,
/*4252*/ const IID*const riid,
/*4254*/ void**ppvObject);
/*4256*/ ULONG(__stdcall*AddRef)(
/*4257*/ IPersistFile*This);
/*4259*/ ULONG(__stdcall*Release)(
/*4260*/ IPersistFile*This);
/*4262*/ HRESULT(__stdcall*GetClassID)(
/*4263*/ IPersistFile*This,
/*4264*/ CLSID*pClassID);
/*4266*/ HRESULT(__stdcall*IsDirty)(
/*4267*/ IPersistFile*This);
/*4269*/ HRESULT(__stdcall*Load)(
/*4270*/ IPersistFile*This,
/*4271*/ LPCOLESTR pszFileName,
/*4272*/ DWORD dwMode);
/*4274*/ HRESULT(__stdcall*Save)(
/*4275*/ IPersistFile*This,
/*4276*/ LPCOLESTR pszFileName,
/*4277*/ BOOL fRemember);
/*4279*/ HRESULT(__stdcall*SaveCompleted)(
/*4280*/ IPersistFile*This,
/*4281*/ LPCOLESTR pszFileName);
/*4283*/ HRESULT(__stdcall*GetCurFile)(
/*4284*/ IPersistFile*This,
/*4285*/ LPOLESTR*ppszFileName);
/*4287*/ 
/*4288*/ }IPersistFileVtbl;
/*4290*/ struct IPersistFile
/*4291*/ {
/*4292*/ struct IPersistFileVtbl*lpVtbl;
/*4293*/ };
/*4346*/ typedef IPersistStorage*LPPERSISTSTORAGE;
/*4349*/ extern const IID IID_IPersistStorage;
/*4378*/ typedef struct IPersistStorageVtbl
/*4379*/ {
/*4380*/ 
/*4382*/ HRESULT(__stdcall*QueryInterface)(
/*4383*/ IPersistStorage*This,
/*4384*/ const IID*const riid,
/*4386*/ void**ppvObject);
/*4388*/ ULONG(__stdcall*AddRef)(
/*4389*/ IPersistStorage*This);
/*4391*/ ULONG(__stdcall*Release)(
/*4392*/ IPersistStorage*This);
/*4394*/ HRESULT(__stdcall*GetClassID)(
/*4395*/ IPersistStorage*This,
/*4396*/ CLSID*pClassID);
/*4398*/ HRESULT(__stdcall*IsDirty)(
/*4399*/ IPersistStorage*This);
/*4401*/ HRESULT(__stdcall*InitNew)(
/*4402*/ IPersistStorage*This,
/*4403*/ IStorage*pStg);
/*4405*/ HRESULT(__stdcall*Load)(
/*4406*/ IPersistStorage*This,
/*4407*/ IStorage*pStg);
/*4409*/ HRESULT(__stdcall*Save)(
/*4410*/ IPersistStorage*This,
/*4411*/ IStorage*pStgSave,
/*4412*/ BOOL fSameAsLoad);
/*4414*/ HRESULT(__stdcall*SaveCompleted)(
/*4415*/ IPersistStorage*This,
/*4416*/ IStorage*pStgNew);
/*4418*/ HRESULT(__stdcall*HandsOffStorage)(
/*4419*/ IPersistStorage*This);
/*4421*/ 
/*4422*/ }IPersistStorageVtbl;
/*4424*/ struct IPersistStorage
/*4425*/ {
/*4426*/ struct IPersistStorageVtbl*lpVtbl;
/*4427*/ };
/*4483*/ typedef ILockBytes*LPLOCKBYTES;
/*4486*/ extern const IID IID_ILockBytes;
/*4529*/ typedef struct ILockBytesVtbl
/*4530*/ {
/*4531*/ 
/*4533*/ HRESULT(__stdcall*QueryInterface)(
/*4534*/ ILockBytes*This,
/*4535*/ const IID*const riid,
/*4537*/ void**ppvObject);
/*4539*/ ULONG(__stdcall*AddRef)(
/*4540*/ ILockBytes*This);
/*4542*/ ULONG(__stdcall*Release)(
/*4543*/ ILockBytes*This);
/*4545*/ HRESULT(__stdcall*ReadAt)(
/*4546*/ ILockBytes*This,
/*4547*/ ULARGE_INTEGER ulOffset,
/*4548*/ void*pv,
/*4549*/ ULONG cb,
/*4550*/ ULONG*pcbRead);
/*4552*/ HRESULT(__stdcall*WriteAt)(
/*4553*/ ILockBytes*This,
/*4554*/ ULARGE_INTEGER ulOffset,
/*4555*/ const void*pv,
/*4556*/ ULONG cb,
/*4557*/ ULONG*pcbWritten);
/*4559*/ HRESULT(__stdcall*Flush)(
/*4560*/ ILockBytes*This);
/*4562*/ HRESULT(__stdcall*SetSize)(
/*4563*/ ILockBytes*This,
/*4564*/ ULARGE_INTEGER cb);
/*4566*/ HRESULT(__stdcall*LockRegion)(
/*4567*/ ILockBytes*This,
/*4568*/ ULARGE_INTEGER libOffset,
/*4569*/ ULARGE_INTEGER cb,
/*4570*/ DWORD dwLockType);
/*4572*/ HRESULT(__stdcall*UnlockRegion)(
/*4573*/ ILockBytes*This,
/*4574*/ ULARGE_INTEGER libOffset,
/*4575*/ ULARGE_INTEGER cb,
/*4576*/ DWORD dwLockType);
/*4578*/ HRESULT(__stdcall*Stat)(
/*4579*/ ILockBytes*This,
/*4580*/ STATSTG*pstatstg,
/*4581*/ DWORD grfStatFlag);
/*4583*/ 
/*4584*/ }ILockBytesVtbl;
/*4586*/ struct ILockBytes
/*4587*/ {
/*4588*/ struct ILockBytesVtbl*lpVtbl;
/*4589*/ };
/*4634*/ HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy(
/*4635*/ ILockBytes*This,
/*4636*/ ULARGE_INTEGER ulOffset,
/*4637*/ byte*pv,
/*4638*/ ULONG cb,
/*4639*/ ULONG*pcbRead);
/*4642*/ void ILockBytes_RemoteReadAt_Stub(
/*4643*/ IRpcStubBuffer*This,
/*4644*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*4645*/ PRPC_MESSAGE _pRpcMessage,
/*4646*/ DWORD*_pdwStubPhase);
/*4649*/ HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy(
/*4650*/ ILockBytes*This,
/*4651*/ ULARGE_INTEGER ulOffset,
/*4652*/ const byte*pv,
/*4653*/ ULONG cb,
/*4654*/ ULONG*pcbWritten);
/*4657*/ void ILockBytes_RemoteWriteAt_Stub(
/*4658*/ IRpcStubBuffer*This,
/*4659*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*4660*/ PRPC_MESSAGE _pRpcMessage,
/*4661*/ DWORD*_pdwStubPhase);
/*4674*/ typedef IEnumFORMATETC*LPENUMFORMATETC;
/*4677*/ typedef struct tagDVTARGETDEVICE
/*4678*/ {
/*4679*/ DWORD tdSize;
/*4680*/ WORD tdDriverNameOffset;
/*4681*/ WORD tdDeviceNameOffset;
/*4682*/ WORD tdPortNameOffset;
/*4683*/ WORD tdExtDevmodeOffset;
/*4684*/ BYTE tdData[1];
/*4685*/ }DVTARGETDEVICE;
/*4688*/ typedef CLIPFORMAT*LPCLIPFORMAT;
/*4690*/ typedef struct tagFORMATETC
/*4691*/ {
/*4692*/ CLIPFORMAT cfFormat;
/*4693*/ DVTARGETDEVICE*ptd;
/*4694*/ DWORD dwAspect;
/*4695*/ LONG lindex;
/*4696*/ DWORD tymed;
/*4697*/ }FORMATETC;
/*4699*/ typedef struct tagFORMATETC*LPFORMATETC;
/*4702*/ extern const IID IID_IEnumFORMATETC;
/*4727*/ typedef struct IEnumFORMATETCVtbl
/*4728*/ {
/*4729*/ 
/*4731*/ HRESULT(__stdcall*QueryInterface)(
/*4732*/ IEnumFORMATETC*This,
/*4733*/ const IID*const riid,
/*4735*/ void**ppvObject);
/*4737*/ ULONG(__stdcall*AddRef)(
/*4738*/ IEnumFORMATETC*This);
/*4740*/ ULONG(__stdcall*Release)(
/*4741*/ IEnumFORMATETC*This);
/*4743*/ HRESULT(__stdcall*Next)(
/*4744*/ IEnumFORMATETC*This,
/*4745*/ ULONG celt,
/*4746*/ FORMATETC*rgelt,
/*4747*/ ULONG*pceltFetched);
/*4749*/ HRESULT(__stdcall*Skip)(
/*4750*/ IEnumFORMATETC*This,
/*4751*/ ULONG celt);
/*4753*/ HRESULT(__stdcall*Reset)(
/*4754*/ IEnumFORMATETC*This);
/*4756*/ HRESULT(__stdcall*Clone)(
/*4757*/ IEnumFORMATETC*This,
/*4758*/ IEnumFORMATETC**ppenum);
/*4760*/ 
/*4761*/ }IEnumFORMATETCVtbl;
/*4763*/ struct IEnumFORMATETC
/*4764*/ {
/*4765*/ struct IEnumFORMATETCVtbl*lpVtbl;
/*4766*/ };
/*4802*/ HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy(
/*4803*/ IEnumFORMATETC*This,
/*4804*/ ULONG celt,
/*4805*/ FORMATETC*rgelt,
/*4806*/ ULONG*pceltFetched);
/*4809*/ void IEnumFORMATETC_RemoteNext_Stub(
/*4810*/ IRpcStubBuffer*This,
/*4811*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*4812*/ PRPC_MESSAGE _pRpcMessage,
/*4813*/ DWORD*_pdwStubPhase);
/*4826*/ typedef IEnumSTATDATA*LPENUMSTATDATA;
/*4828*/ typedef
/*4829*/ enum tagADVF
/*4830*/ {ADVF_NODATA=1,
/*4831*/ ADVF_PRIMEFIRST=2,
/*4832*/ ADVF_ONLYONCE=4,
/*4833*/ ADVF_DATAONSTOP=64,
/*4834*/ ADVFCACHE_NOHANDLER=8,
/*4835*/ ADVFCACHE_FORCEBUILTIN=16,
/*4836*/ ADVFCACHE_ONSAVE=32
/*4837*/ }ADVF;
/*4839*/ typedef struct tagSTATDATA
/*4840*/ {
/*4841*/ FORMATETC formatetc;
/*4842*/ DWORD advf;
/*4843*/ IAdviseSink*pAdvSink;
/*4844*/ DWORD dwConnection;
/*4845*/ }STATDATA;
/*4847*/ typedef STATDATA*LPSTATDATA;
/*4850*/ extern const IID IID_IEnumSTATDATA;
/*4875*/ typedef struct IEnumSTATDATAVtbl
/*4876*/ {
/*4877*/ 
/*4879*/ HRESULT(__stdcall*QueryInterface)(
/*4880*/ IEnumSTATDATA*This,
/*4881*/ const IID*const riid,
/*4883*/ void**ppvObject);
/*4885*/ ULONG(__stdcall*AddRef)(
/*4886*/ IEnumSTATDATA*This);
/*4888*/ ULONG(__stdcall*Release)(
/*4889*/ IEnumSTATDATA*This);
/*4891*/ HRESULT(__stdcall*Next)(
/*4892*/ IEnumSTATDATA*This,
/*4893*/ ULONG celt,
/*4894*/ STATDATA*rgelt,
/*4895*/ ULONG*pceltFetched);
/*4897*/ HRESULT(__stdcall*Skip)(
/*4898*/ IEnumSTATDATA*This,
/*4899*/ ULONG celt);
/*4901*/ HRESULT(__stdcall*Reset)(
/*4902*/ IEnumSTATDATA*This);
/*4904*/ HRESULT(__stdcall*Clone)(
/*4905*/ IEnumSTATDATA*This,
/*4906*/ IEnumSTATDATA**ppenum);
/*4908*/ 
/*4909*/ }IEnumSTATDATAVtbl;
/*4911*/ struct IEnumSTATDATA
/*4912*/ {
/*4913*/ struct IEnumSTATDATAVtbl*lpVtbl;
/*4914*/ };
/*4950*/ HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy(
/*4951*/ IEnumSTATDATA*This,
/*4952*/ ULONG celt,
/*4953*/ STATDATA*rgelt,
/*4954*/ ULONG*pceltFetched);
/*4957*/ void IEnumSTATDATA_RemoteNext_Stub(
/*4958*/ IRpcStubBuffer*This,
/*4959*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*4960*/ PRPC_MESSAGE _pRpcMessage,
/*4961*/ DWORD*_pdwStubPhase);
/*4974*/ typedef IRootStorage*LPROOTSTORAGE;
/*4977*/ extern const IID IID_IRootStorage;
/*4992*/ typedef struct IRootStorageVtbl
/*4993*/ {
/*4994*/ 
/*4996*/ HRESULT(__stdcall*QueryInterface)(
/*4997*/ IRootStorage*This,
/*4998*/ const IID*const riid,
/*5000*/ void**ppvObject);
/*5002*/ ULONG(__stdcall*AddRef)(
/*5003*/ IRootStorage*This);
/*5005*/ ULONG(__stdcall*Release)(
/*5006*/ IRootStorage*This);
/*5008*/ HRESULT(__stdcall*SwitchToFile)(
/*5009*/ IRootStorage*This,
/*5010*/ LPOLESTR pszFile);
/*5012*/ 
/*5013*/ }IRootStorageVtbl;
/*5015*/ struct IRootStorage
/*5016*/ {
/*5017*/ struct IRootStorageVtbl*lpVtbl;
/*5018*/ };
/*5055*/ typedef IAdviseSink*LPADVISESINK;
/*5057*/ typedef
/*5058*/ enum tagTYMED
/*5059*/ {TYMED_HGLOBAL=1,
/*5060*/ TYMED_FILE=2,
/*5061*/ TYMED_ISTREAM=4,
/*5062*/ TYMED_ISTORAGE=8,
/*5063*/ TYMED_GDI=16,
/*5064*/ TYMED_MFPICT=32,
/*5065*/ TYMED_ENHMF=64,
/*5066*/ TYMED_NULL=0
/*5067*/ }TYMED;
/*5075*/ typedef struct tagRemSTGMEDIUM
/*5076*/ {
/*5077*/ DWORD tymed;
/*5078*/ DWORD dwHandleType;
/*5079*/ unsigned long pData;
/*5080*/ unsigned long pUnkForRelease;
/*5081*/ unsigned long cbData;
/*5082*/ byte data[1];
/*5083*/ }RemSTGMEDIUM;
/*5107*/ typedef struct tagSTGMEDIUM
/*5108*/ {
/*5109*/ DWORD tymed;
/*5110*/ union
/*5111*/ {
/*5112*/ HBITMAP hBitmap;
/*5113*/ HMETAFILEPICT hMetaFilePict;
/*5114*/ HENHMETAFILE hEnhMetaFile;
/*5115*/ HGLOBAL hGlobal;
/*5116*/ LPOLESTR lpszFileName;
/*5117*/ IStream*pstm;
/*5118*/ IStorage*pstg;
/*5120*/ }u;
/*5121*/ IUnknown*pUnkForRelease;
/*5122*/ }uSTGMEDIUM;
/*5125*/ typedef struct _GDI_OBJECT
/*5126*/ {
/*5127*/ DWORD ObjectType;
/*5128*/ union __MIDL_IAdviseSink_0002
/*5129*/ {
/*5130*/ wireHBITMAP hBitmap;
/*5131*/ wireHPALETTE hPalette;
/*5132*/ wireHGLOBAL hGeneric;
/*5133*/ }u;
/*5134*/ }GDI_OBJECT;
/*5136*/ typedef struct _userSTGMEDIUM
/*5137*/ {
/*5138*/ struct _STGMEDIUM_UNION
/*5139*/ {
/*5140*/ DWORD tymed;
/*5141*/ union __MIDL_IAdviseSink_0003
/*5142*/ {
/*5144*/ wireHMETAFILEPICT hMetaFilePict;
/*5145*/ wireHENHMETAFILE hHEnhMetaFile;
/*5146*/ GDI_OBJECT*hGdiHandle;
/*5147*/ wireHGLOBAL hGlobal;
/*5148*/ LPOLESTR lpszFileName;
/*5149*/ BYTE_BLOB*pstm;
/*5150*/ BYTE_BLOB*pstg;
/*5151*/ }u;
/*5152*/ }u;
/*5153*/ IUnknown*pUnkForRelease;
/*5154*/ }userSTGMEDIUM;
/*5156*/ typedef userSTGMEDIUM*wireSTGMEDIUM;
/*5158*/ typedef uSTGMEDIUM STGMEDIUM;
/*5160*/ typedef userSTGMEDIUM*wireASYNC_STGMEDIUM;
/*5162*/ typedef STGMEDIUM ASYNC_STGMEDIUM;
/*5164*/ typedef STGMEDIUM*LPSTGMEDIUM;
/*5166*/ typedef struct _userFLAG_STGMEDIUM
/*5167*/ {
/*5168*/ long ContextFlags;
/*5169*/ long fPassOwnership;
/*5170*/ userSTGMEDIUM Stgmed;
/*5171*/ }userFLAG_STGMEDIUM;
/*5173*/ typedef userFLAG_STGMEDIUM*wireFLAG_STGMEDIUM;
/*5175*/ typedef struct _FLAG_STGMEDIUM
/*5176*/ {
/*5177*/ long ContextFlags;
/*5178*/ long fPassOwnership;
/*5179*/ STGMEDIUM Stgmed;
/*5180*/ }FLAG_STGMEDIUM;
/*5183*/ extern const IID IID_IAdviseSink;
/*5210*/ typedef struct IAdviseSinkVtbl
/*5211*/ {
/*5212*/ 
/*5214*/ HRESULT(__stdcall*QueryInterface)(
/*5215*/ IAdviseSink*This,
/*5216*/ const IID*const riid,
/*5218*/ void**ppvObject);
/*5220*/ ULONG(__stdcall*AddRef)(
/*5221*/ IAdviseSink*This);
/*5223*/ ULONG(__stdcall*Release)(
/*5224*/ IAdviseSink*This);
/*5226*/ void(__stdcall*OnDataChange)(
/*5227*/ IAdviseSink*This,
/*5228*/ FORMATETC*pFormatetc,
/*5229*/ STGMEDIUM*pStgmed);
/*5231*/ void(__stdcall*OnViewChange)(
/*5232*/ IAdviseSink*This,
/*5233*/ DWORD dwAspect,
/*5234*/ LONG lindex);
/*5236*/ void(__stdcall*OnRename)(
/*5237*/ IAdviseSink*This,
/*5238*/ IMoniker*pmk);
/*5240*/ void(__stdcall*OnSave)(
/*5241*/ IAdviseSink*This);
/*5243*/ void(__stdcall*OnClose)(
/*5244*/ IAdviseSink*This);
/*5246*/ 
/*5247*/ }IAdviseSinkVtbl;
/*5249*/ struct IAdviseSink
/*5250*/ {
/*5251*/ struct IAdviseSinkVtbl*lpVtbl;
/*5252*/ };
/*5291*/ HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy(
/*5292*/ IAdviseSink*This,
/*5293*/ FORMATETC*pFormatetc,
/*5294*/ ASYNC_STGMEDIUM*pStgmed);
/*5297*/ void IAdviseSink_RemoteOnDataChange_Stub(
/*5298*/ IRpcStubBuffer*This,
/*5299*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5300*/ PRPC_MESSAGE _pRpcMessage,
/*5301*/ DWORD*_pdwStubPhase);
/*5304*/ HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy(
/*5305*/ IAdviseSink*This,
/*5306*/ DWORD dwAspect,
/*5307*/ LONG lindex);
/*5310*/ void IAdviseSink_RemoteOnViewChange_Stub(
/*5311*/ IRpcStubBuffer*This,
/*5312*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5313*/ PRPC_MESSAGE _pRpcMessage,
/*5314*/ DWORD*_pdwStubPhase);
/*5317*/ HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy(
/*5318*/ IAdviseSink*This,
/*5319*/ IMoniker*pmk);
/*5322*/ void IAdviseSink_RemoteOnRename_Stub(
/*5323*/ IRpcStubBuffer*This,
/*5324*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5325*/ PRPC_MESSAGE _pRpcMessage,
/*5326*/ DWORD*_pdwStubPhase);
/*5329*/ HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy(
/*5330*/ IAdviseSink*This);
/*5333*/ void IAdviseSink_RemoteOnSave_Stub(
/*5334*/ IRpcStubBuffer*This,
/*5335*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5336*/ PRPC_MESSAGE _pRpcMessage,
/*5337*/ DWORD*_pdwStubPhase);
/*5340*/ HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy(
/*5341*/ IAdviseSink*This);
/*5344*/ void IAdviseSink_RemoteOnClose_Stub(
/*5345*/ IRpcStubBuffer*This,
/*5346*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5347*/ PRPC_MESSAGE _pRpcMessage,
/*5348*/ DWORD*_pdwStubPhase);
/*5362*/ extern const IID IID_AsyncIAdviseSink;
/*5399*/ typedef struct AsyncIAdviseSinkVtbl
/*5400*/ {
/*5401*/ 
/*5403*/ HRESULT(__stdcall*QueryInterface)(
/*5404*/ AsyncIAdviseSink*This,
/*5405*/ const IID*const riid,
/*5407*/ void**ppvObject);
/*5409*/ ULONG(__stdcall*AddRef)(
/*5410*/ AsyncIAdviseSink*This);
/*5412*/ ULONG(__stdcall*Release)(
/*5413*/ AsyncIAdviseSink*This);
/*5415*/ void(__stdcall*Begin_OnDataChange)(
/*5416*/ AsyncIAdviseSink*This,
/*5417*/ FORMATETC*pFormatetc,
/*5418*/ STGMEDIUM*pStgmed);
/*5420*/ void(__stdcall*Finish_OnDataChange)(
/*5421*/ AsyncIAdviseSink*This);
/*5423*/ void(__stdcall*Begin_OnViewChange)(
/*5424*/ AsyncIAdviseSink*This,
/*5425*/ DWORD dwAspect,
/*5426*/ LONG lindex);
/*5428*/ void(__stdcall*Finish_OnViewChange)(
/*5429*/ AsyncIAdviseSink*This);
/*5431*/ void(__stdcall*Begin_OnRename)(
/*5432*/ AsyncIAdviseSink*This,
/*5433*/ IMoniker*pmk);
/*5435*/ void(__stdcall*Finish_OnRename)(
/*5436*/ AsyncIAdviseSink*This);
/*5438*/ void(__stdcall*Begin_OnSave)(
/*5439*/ AsyncIAdviseSink*This);
/*5441*/ void(__stdcall*Finish_OnSave)(
/*5442*/ AsyncIAdviseSink*This);
/*5444*/ void(__stdcall*Begin_OnClose)(
/*5445*/ AsyncIAdviseSink*This);
/*5447*/ void(__stdcall*Finish_OnClose)(
/*5448*/ AsyncIAdviseSink*This);
/*5450*/ 
/*5451*/ }AsyncIAdviseSinkVtbl;
/*5453*/ struct AsyncIAdviseSink
/*5454*/ {
/*5455*/ struct AsyncIAdviseSinkVtbl*lpVtbl;
/*5456*/ };
/*5510*/ HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
/*5511*/ AsyncIAdviseSink*This,
/*5512*/ FORMATETC*pFormatetc,
/*5513*/ ASYNC_STGMEDIUM*pStgmed);
/*5516*/ void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
/*5517*/ IRpcStubBuffer*This,
/*5518*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5519*/ PRPC_MESSAGE _pRpcMessage,
/*5520*/ DWORD*_pdwStubPhase);
/*5523*/ HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
/*5524*/ AsyncIAdviseSink*This);
/*5527*/ void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
/*5528*/ IRpcStubBuffer*This,
/*5529*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5530*/ PRPC_MESSAGE _pRpcMessage,
/*5531*/ DWORD*_pdwStubPhase);
/*5534*/ HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
/*5535*/ AsyncIAdviseSink*This,
/*5536*/ DWORD dwAspect,
/*5537*/ LONG lindex);
/*5540*/ void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
/*5541*/ IRpcStubBuffer*This,
/*5542*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5543*/ PRPC_MESSAGE _pRpcMessage,
/*5544*/ DWORD*_pdwStubPhase);
/*5547*/ HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
/*5548*/ AsyncIAdviseSink*This);
/*5551*/ void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
/*5552*/ IRpcStubBuffer*This,
/*5553*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5554*/ PRPC_MESSAGE _pRpcMessage,
/*5555*/ DWORD*_pdwStubPhase);
/*5558*/ HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
/*5559*/ AsyncIAdviseSink*This,
/*5560*/ IMoniker*pmk);
/*5563*/ void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
/*5564*/ IRpcStubBuffer*This,
/*5565*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5566*/ PRPC_MESSAGE _pRpcMessage,
/*5567*/ DWORD*_pdwStubPhase);
/*5570*/ HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
/*5571*/ AsyncIAdviseSink*This);
/*5574*/ void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
/*5575*/ IRpcStubBuffer*This,
/*5576*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5577*/ PRPC_MESSAGE _pRpcMessage,
/*5578*/ DWORD*_pdwStubPhase);
/*5581*/ HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
/*5582*/ AsyncIAdviseSink*This);
/*5585*/ void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
/*5586*/ IRpcStubBuffer*This,
/*5587*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5588*/ PRPC_MESSAGE _pRpcMessage,
/*5589*/ DWORD*_pdwStubPhase);
/*5592*/ HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
/*5593*/ AsyncIAdviseSink*This);
/*5596*/ void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
/*5597*/ IRpcStubBuffer*This,
/*5598*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5599*/ PRPC_MESSAGE _pRpcMessage,
/*5600*/ DWORD*_pdwStubPhase);
/*5603*/ HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
/*5604*/ AsyncIAdviseSink*This);
/*5607*/ void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
/*5608*/ IRpcStubBuffer*This,
/*5609*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5610*/ PRPC_MESSAGE _pRpcMessage,
/*5611*/ DWORD*_pdwStubPhase);
/*5614*/ HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
/*5615*/ AsyncIAdviseSink*This);
/*5618*/ void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
/*5619*/ IRpcStubBuffer*This,
/*5620*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5621*/ PRPC_MESSAGE _pRpcMessage,
/*5622*/ DWORD*_pdwStubPhase);
/*5635*/ typedef IAdviseSink2*LPADVISESINK2;
/*5638*/ extern const IID IID_IAdviseSink2;
/*5653*/ typedef struct IAdviseSink2Vtbl
/*5654*/ {
/*5655*/ 
/*5657*/ HRESULT(__stdcall*QueryInterface)(
/*5658*/ IAdviseSink2*This,
/*5659*/ const IID*const riid,
/*5661*/ void**ppvObject);
/*5663*/ ULONG(__stdcall*AddRef)(
/*5664*/ IAdviseSink2*This);
/*5666*/ ULONG(__stdcall*Release)(
/*5667*/ IAdviseSink2*This);
/*5669*/ void(__stdcall*OnDataChange)(
/*5670*/ IAdviseSink2*This,
/*5671*/ FORMATETC*pFormatetc,
/*5672*/ STGMEDIUM*pStgmed);
/*5674*/ void(__stdcall*OnViewChange)(
/*5675*/ IAdviseSink2*This,
/*5676*/ DWORD dwAspect,
/*5677*/ LONG lindex);
/*5679*/ void(__stdcall*OnRename)(
/*5680*/ IAdviseSink2*This,
/*5681*/ IMoniker*pmk);
/*5683*/ void(__stdcall*OnSave)(
/*5684*/ IAdviseSink2*This);
/*5686*/ void(__stdcall*OnClose)(
/*5687*/ IAdviseSink2*This);
/*5689*/ void(__stdcall*OnLinkSrcChange)(
/*5690*/ IAdviseSink2*This,
/*5691*/ IMoniker*pmk);
/*5693*/ 
/*5694*/ }IAdviseSink2Vtbl;
/*5696*/ struct IAdviseSink2
/*5697*/ {
/*5698*/ struct IAdviseSink2Vtbl*lpVtbl;
/*5699*/ };
/*5742*/ HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
/*5743*/ IAdviseSink2*This,
/*5744*/ IMoniker*pmk);
/*5747*/ void IAdviseSink2_RemoteOnLinkSrcChange_Stub(
/*5748*/ IRpcStubBuffer*This,
/*5749*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5750*/ PRPC_MESSAGE _pRpcMessage,
/*5751*/ DWORD*_pdwStubPhase);
/*5765*/ extern const IID IID_AsyncIAdviseSink2;
/*5782*/ typedef struct AsyncIAdviseSink2Vtbl
/*5783*/ {
/*5784*/ 
/*5786*/ HRESULT(__stdcall*QueryInterface)(
/*5787*/ AsyncIAdviseSink2*This,
/*5788*/ const IID*const riid,
/*5790*/ void**ppvObject);
/*5792*/ ULONG(__stdcall*AddRef)(
/*5793*/ AsyncIAdviseSink2*This);
/*5795*/ ULONG(__stdcall*Release)(
/*5796*/ AsyncIAdviseSink2*This);
/*5798*/ void(__stdcall*Begin_OnDataChange)(
/*5799*/ AsyncIAdviseSink2*This,
/*5800*/ FORMATETC*pFormatetc,
/*5801*/ STGMEDIUM*pStgmed);
/*5803*/ void(__stdcall*Finish_OnDataChange)(
/*5804*/ AsyncIAdviseSink2*This);
/*5806*/ void(__stdcall*Begin_OnViewChange)(
/*5807*/ AsyncIAdviseSink2*This,
/*5808*/ DWORD dwAspect,
/*5809*/ LONG lindex);
/*5811*/ void(__stdcall*Finish_OnViewChange)(
/*5812*/ AsyncIAdviseSink2*This);
/*5814*/ void(__stdcall*Begin_OnRename)(
/*5815*/ AsyncIAdviseSink2*This,
/*5816*/ IMoniker*pmk);
/*5818*/ void(__stdcall*Finish_OnRename)(
/*5819*/ AsyncIAdviseSink2*This);
/*5821*/ void(__stdcall*Begin_OnSave)(
/*5822*/ AsyncIAdviseSink2*This);
/*5824*/ void(__stdcall*Finish_OnSave)(
/*5825*/ AsyncIAdviseSink2*This);
/*5827*/ void(__stdcall*Begin_OnClose)(
/*5828*/ AsyncIAdviseSink2*This);
/*5830*/ void(__stdcall*Finish_OnClose)(
/*5831*/ AsyncIAdviseSink2*This);
/*5833*/ void(__stdcall*Begin_OnLinkSrcChange)(
/*5834*/ AsyncIAdviseSink2*This,
/*5835*/ IMoniker*pmk);
/*5837*/ void(__stdcall*Finish_OnLinkSrcChange)(
/*5838*/ AsyncIAdviseSink2*This);
/*5840*/ 
/*5841*/ }AsyncIAdviseSink2Vtbl;
/*5843*/ struct AsyncIAdviseSink2
/*5844*/ {
/*5845*/ struct AsyncIAdviseSink2Vtbl*lpVtbl;
/*5846*/ };
/*5907*/ HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
/*5908*/ AsyncIAdviseSink2*This,
/*5909*/ IMoniker*pmk);
/*5912*/ void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
/*5913*/ IRpcStubBuffer*This,
/*5914*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5915*/ PRPC_MESSAGE _pRpcMessage,
/*5916*/ DWORD*_pdwStubPhase);
/*5919*/ HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
/*5920*/ AsyncIAdviseSink2*This);
/*5923*/ void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
/*5924*/ IRpcStubBuffer*This,
/*5925*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5926*/ PRPC_MESSAGE _pRpcMessage,
/*5927*/ DWORD*_pdwStubPhase);
/*5940*/ typedef IDataObject*LPDATAOBJECT;
/*5942*/ typedef
/*5943*/ enum tagDATADIR
/*5944*/ {DATADIR_GET=1,
/*5945*/ DATADIR_SET=2
/*5946*/ }DATADIR;
/*5949*/ extern const IID IID_IDataObject;
/*5997*/ typedef struct IDataObjectVtbl
/*5998*/ {
/*5999*/ 
/*6001*/ HRESULT(__stdcall*QueryInterface)(
/*6002*/ IDataObject*This,
/*6003*/ const IID*const riid,
/*6005*/ void**ppvObject);
/*6007*/ ULONG(__stdcall*AddRef)(
/*6008*/ IDataObject*This);
/*6010*/ ULONG(__stdcall*Release)(
/*6011*/ IDataObject*This);
/*6013*/ HRESULT(__stdcall*GetData)(
/*6014*/ IDataObject*This,
/*6015*/ FORMATETC*pformatetcIn,
/*6016*/ STGMEDIUM*pmedium);
/*6018*/ HRESULT(__stdcall*GetDataHere)(
/*6019*/ IDataObject*This,
/*6020*/ FORMATETC*pformatetc,
/*6021*/ STGMEDIUM*pmedium);
/*6023*/ HRESULT(__stdcall*QueryGetData)(
/*6024*/ IDataObject*This,
/*6025*/ FORMATETC*pformatetc);
/*6027*/ HRESULT(__stdcall*GetCanonicalFormatEtc)(
/*6028*/ IDataObject*This,
/*6029*/ FORMATETC*pformatectIn,
/*6030*/ FORMATETC*pformatetcOut);
/*6032*/ HRESULT(__stdcall*SetData)(
/*6033*/ IDataObject*This,
/*6034*/ FORMATETC*pformatetc,
/*6035*/ STGMEDIUM*pmedium,
/*6036*/ BOOL fRelease);
/*6038*/ HRESULT(__stdcall*EnumFormatEtc)(
/*6039*/ IDataObject*This,
/*6040*/ DWORD dwDirection,
/*6041*/ IEnumFORMATETC**ppenumFormatEtc);
/*6043*/ HRESULT(__stdcall*DAdvise)(
/*6044*/ IDataObject*This,
/*6045*/ FORMATETC*pformatetc,
/*6046*/ DWORD advf,
/*6047*/ IAdviseSink*pAdvSink,
/*6048*/ DWORD*pdwConnection);
/*6050*/ HRESULT(__stdcall*DUnadvise)(
/*6051*/ IDataObject*This,
/*6052*/ DWORD dwConnection);
/*6054*/ HRESULT(__stdcall*EnumDAdvise)(
/*6055*/ IDataObject*This,
/*6056*/ IEnumSTATDATA**ppenumAdvise);
/*6058*/ 
/*6059*/ }IDataObjectVtbl;
/*6061*/ struct IDataObject
/*6062*/ {
/*6063*/ struct IDataObjectVtbl*lpVtbl;
/*6064*/ };
/*6115*/ HRESULT __stdcall IDataObject_RemoteGetData_Proxy(
/*6116*/ IDataObject*This,
/*6117*/ FORMATETC*pformatetcIn,
/*6118*/ STGMEDIUM*pRemoteMedium);
/*6121*/ void IDataObject_RemoteGetData_Stub(
/*6122*/ IRpcStubBuffer*This,
/*6123*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*6124*/ PRPC_MESSAGE _pRpcMessage,
/*6125*/ DWORD*_pdwStubPhase);
/*6128*/ HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy(
/*6129*/ IDataObject*This,
/*6130*/ FORMATETC*pformatetc,
/*6131*/ STGMEDIUM*pRemoteMedium);
/*6134*/ void IDataObject_RemoteGetDataHere_Stub(
/*6135*/ IRpcStubBuffer*This,
/*6136*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*6137*/ PRPC_MESSAGE _pRpcMessage,
/*6138*/ DWORD*_pdwStubPhase);
/*6141*/ HRESULT __stdcall IDataObject_RemoteSetData_Proxy(
/*6142*/ IDataObject*This,
/*6143*/ FORMATETC*pformatetc,
/*6144*/ FLAG_STGMEDIUM*pmedium,
/*6145*/ BOOL fRelease);
/*6148*/ void IDataObject_RemoteSetData_Stub(
/*6149*/ IRpcStubBuffer*This,
/*6150*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*6151*/ PRPC_MESSAGE _pRpcMessage,
/*6152*/ DWORD*_pdwStubPhase);
/*6165*/ typedef IDataAdviseHolder*LPDATAADVISEHOLDER;
/*6168*/ extern const IID IID_IDataAdviseHolder;
/*6198*/ typedef struct IDataAdviseHolderVtbl
/*6199*/ {
/*6200*/ 
/*6202*/ HRESULT(__stdcall*QueryInterface)(
/*6203*/ IDataAdviseHolder*This,
/*6204*/ const IID*const riid,
/*6206*/ void**ppvObject);
/*6208*/ ULONG(__stdcall*AddRef)(
/*6209*/ IDataAdviseHolder*This);
/*6211*/ ULONG(__stdcall*Release)(
/*6212*/ IDataAdviseHolder*This);
/*6214*/ HRESULT(__stdcall*Advise)(
/*6215*/ IDataAdviseHolder*This,
/*6216*/ IDataObject*pDataObject,
/*6217*/ FORMATETC*pFetc,
/*6218*/ DWORD advf,
/*6219*/ IAdviseSink*pAdvise,
/*6220*/ DWORD*pdwConnection);
/*6222*/ HRESULT(__stdcall*Unadvise)(
/*6223*/ IDataAdviseHolder*This,
/*6224*/ DWORD dwConnection);
/*6226*/ HRESULT(__stdcall*EnumAdvise)(
/*6227*/ IDataAdviseHolder*This,
/*6228*/ IEnumSTATDATA**ppenumAdvise);
/*6230*/ HRESULT(__stdcall*SendOnDataChange)(
/*6231*/ IDataAdviseHolder*This,
/*6232*/ IDataObject*pDataObject,
/*6233*/ DWORD dwReserved,
/*6234*/ DWORD advf);
/*6236*/ 
/*6237*/ }IDataAdviseHolderVtbl;
/*6239*/ struct IDataAdviseHolder
/*6240*/ {
/*6241*/ struct IDataAdviseHolderVtbl*lpVtbl;
/*6242*/ };
/*6288*/ typedef IMessageFilter*LPMESSAGEFILTER;
/*6290*/ typedef
/*6291*/ enum tagCALLTYPE
/*6292*/ {CALLTYPE_TOPLEVEL=1,
/*6293*/ CALLTYPE_NESTED=2,
/*6294*/ CALLTYPE_ASYNC=3,
/*6295*/ CALLTYPE_TOPLEVEL_CALLPENDING=4,
/*6296*/ CALLTYPE_ASYNC_CALLPENDING=5
/*6297*/ }CALLTYPE;
/*6299*/ typedef
/*6300*/ enum tagSERVERCALL
/*6301*/ {SERVERCALL_ISHANDLED=0,
/*6302*/ SERVERCALL_REJECTED=1,
/*6303*/ SERVERCALL_RETRYLATER=2
/*6304*/ }SERVERCALL;
/*6306*/ typedef
/*6307*/ enum tagPENDINGTYPE
/*6308*/ {PENDINGTYPE_TOPLEVEL=1,
/*6309*/ PENDINGTYPE_NESTED=2
/*6310*/ }PENDINGTYPE;
/*6312*/ typedef
/*6313*/ enum tagPENDINGMSG
/*6314*/ {PENDINGMSG_CANCELCALL=0,
/*6315*/ PENDINGMSG_WAITNOPROCESS=1,
/*6316*/ PENDINGMSG_WAITDEFPROCESS=2
/*6317*/ }PENDINGMSG;
/*6319*/ typedef struct tagINTERFACEINFO
/*6320*/ {
/*6321*/ IUnknown*pUnk;
/*6322*/ IID iid;
/*6323*/ WORD wMethod;
/*6324*/ }INTERFACEINFO;
/*6326*/ typedef struct tagINTERFACEINFO*LPINTERFACEINFO;
/*6329*/ extern const IID IID_IMessageFilter;
/*6357*/ typedef struct IMessageFilterVtbl
/*6358*/ {
/*6359*/ 
/*6361*/ HRESULT(__stdcall*QueryInterface)(
/*6362*/ IMessageFilter*This,
/*6363*/ const IID*const riid,
/*6365*/ void**ppvObject);
/*6367*/ ULONG(__stdcall*AddRef)(
/*6368*/ IMessageFilter*This);
/*6370*/ ULONG(__stdcall*Release)(
/*6371*/ IMessageFilter*This);
/*6373*/ DWORD(__stdcall*HandleInComingCall)(
/*6374*/ IMessageFilter*This,
/*6375*/ DWORD dwCallType,
/*6376*/ HTASK htaskCaller,
/*6377*/ DWORD dwTickCount,
/*6378*/ LPINTERFACEINFO lpInterfaceInfo);
/*6380*/ DWORD(__stdcall*RetryRejectedCall)(
/*6381*/ IMessageFilter*This,
/*6382*/ HTASK htaskCallee,
/*6383*/ DWORD dwTickCount,
/*6384*/ DWORD dwRejectType);
/*6386*/ DWORD(__stdcall*MessagePending)(
/*6387*/ IMessageFilter*This,
/*6388*/ HTASK htaskCallee,
/*6389*/ DWORD dwTickCount,
/*6390*/ DWORD dwPendingType);
/*6392*/ 
/*6393*/ }IMessageFilterVtbl;
/*6395*/ struct IMessageFilter
/*6396*/ {
/*6397*/ struct IMessageFilterVtbl*lpVtbl;
/*6398*/ };
/*6441*/ typedef unsigned long RPCOLEDATAREP;
/*6443*/ typedef struct tagRPCOLEMESSAGE
/*6444*/ {
/*6445*/ void*reserved1;
/*6446*/ RPCOLEDATAREP dataRepresentation;
/*6447*/ void*Buffer;
/*6448*/ ULONG cbBuffer;
/*6449*/ ULONG iMethod;
/*6450*/ void*reserved2[5];
/*6451*/ ULONG rpcFlags;
/*6452*/ }RPCOLEMESSAGE;
/*6454*/ typedef RPCOLEMESSAGE*PRPCOLEMESSAGE;
/*6457*/ extern const IID IID_IRpcChannelBuffer;
/*6486*/ typedef struct IRpcChannelBufferVtbl
/*6487*/ {
/*6488*/ 
/*6490*/ HRESULT(__stdcall*QueryInterface)(
/*6491*/ IRpcChannelBuffer*This,
/*6492*/ const IID*const riid,
/*6494*/ void**ppvObject);
/*6496*/ ULONG(__stdcall*AddRef)(
/*6497*/ IRpcChannelBuffer*This);
/*6499*/ ULONG(__stdcall*Release)(
/*6500*/ IRpcChannelBuffer*This);
/*6502*/ HRESULT(__stdcall*GetBuffer)(
/*6503*/ IRpcChannelBuffer*This,
/*6504*/ RPCOLEMESSAGE*pMessage,
/*6505*/ const IID*const riid);
/*6507*/ HRESULT(__stdcall*SendReceive)(
/*6508*/ IRpcChannelBuffer*This,
/*6509*/ RPCOLEMESSAGE*pMessage,
/*6510*/ ULONG*pStatus);
/*6512*/ HRESULT(__stdcall*FreeBuffer)(
/*6513*/ IRpcChannelBuffer*This,
/*6514*/ RPCOLEMESSAGE*pMessage);
/*6516*/ HRESULT(__stdcall*GetDestCtx)(
/*6517*/ IRpcChannelBuffer*This,
/*6518*/ DWORD*pdwDestContext,
/*6519*/ void**ppvDestContext);
/*6521*/ HRESULT(__stdcall*IsConnected)(
/*6522*/ IRpcChannelBuffer*This);
/*6524*/ 
/*6525*/ }IRpcChannelBufferVtbl;
/*6527*/ struct IRpcChannelBuffer
/*6528*/ {
/*6529*/ struct IRpcChannelBufferVtbl*lpVtbl;
/*6530*/ };
/*6580*/ extern const IID IID_IRpcChannelBuffer2;
/*6595*/ typedef struct IRpcChannelBuffer2Vtbl
/*6596*/ {
/*6597*/ 
/*6599*/ HRESULT(__stdcall*QueryInterface)(
/*6600*/ IRpcChannelBuffer2*This,
/*6601*/ const IID*const riid,
/*6603*/ void**ppvObject);
/*6605*/ ULONG(__stdcall*AddRef)(
/*6606*/ IRpcChannelBuffer2*This);
/*6608*/ ULONG(__stdcall*Release)(
/*6609*/ IRpcChannelBuffer2*This);
/*6611*/ HRESULT(__stdcall*GetBuffer)(
/*6612*/ IRpcChannelBuffer2*This,
/*6613*/ RPCOLEMESSAGE*pMessage,
/*6614*/ const IID*const riid);
/*6616*/ HRESULT(__stdcall*SendReceive)(
/*6617*/ IRpcChannelBuffer2*This,
/*6618*/ RPCOLEMESSAGE*pMessage,
/*6619*/ ULONG*pStatus);
/*6621*/ HRESULT(__stdcall*FreeBuffer)(
/*6622*/ IRpcChannelBuffer2*This,
/*6623*/ RPCOLEMESSAGE*pMessage);
/*6625*/ HRESULT(__stdcall*GetDestCtx)(
/*6626*/ IRpcChannelBuffer2*This,
/*6627*/ DWORD*pdwDestContext,
/*6628*/ void**ppvDestContext);
/*6630*/ HRESULT(__stdcall*IsConnected)(
/*6631*/ IRpcChannelBuffer2*This);
/*6633*/ HRESULT(__stdcall*GetProtocolVersion)(
/*6634*/ IRpcChannelBuffer2*This,
/*6635*/ DWORD*pdwVersion);
/*6637*/ 
/*6638*/ }IRpcChannelBuffer2Vtbl;
/*6640*/ struct IRpcChannelBuffer2
/*6641*/ {
/*6642*/ struct IRpcChannelBuffer2Vtbl*lpVtbl;
/*6643*/ };
/*6697*/ extern const IID IID_IAsyncRpcChannelBuffer;
/*6723*/ typedef struct IAsyncRpcChannelBufferVtbl
/*6724*/ {
/*6725*/ 
/*6727*/ HRESULT(__stdcall*QueryInterface)(
/*6728*/ IAsyncRpcChannelBuffer*This,
/*6729*/ const IID*const riid,
/*6731*/ void**ppvObject);
/*6733*/ ULONG(__stdcall*AddRef)(
/*6734*/ IAsyncRpcChannelBuffer*This);
/*6736*/ ULONG(__stdcall*Release)(
/*6737*/ IAsyncRpcChannelBuffer*This);
/*6739*/ HRESULT(__stdcall*GetBuffer)(
/*6740*/ IAsyncRpcChannelBuffer*This,
/*6741*/ RPCOLEMESSAGE*pMessage,
/*6742*/ const IID*const riid);
/*6744*/ HRESULT(__stdcall*SendReceive)(
/*6745*/ IAsyncRpcChannelBuffer*This,
/*6746*/ RPCOLEMESSAGE*pMessage,
/*6747*/ ULONG*pStatus);
/*6749*/ HRESULT(__stdcall*FreeBuffer)(
/*6750*/ IAsyncRpcChannelBuffer*This,
/*6751*/ RPCOLEMESSAGE*pMessage);
/*6753*/ HRESULT(__stdcall*GetDestCtx)(
/*6754*/ IAsyncRpcChannelBuffer*This,
/*6755*/ DWORD*pdwDestContext,
/*6756*/ void**ppvDestContext);
/*6758*/ HRESULT(__stdcall*IsConnected)(
/*6759*/ IAsyncRpcChannelBuffer*This);
/*6761*/ HRESULT(__stdcall*GetProtocolVersion)(
/*6762*/ IAsyncRpcChannelBuffer*This,
/*6763*/ DWORD*pdwVersion);
/*6765*/ HRESULT(__stdcall*Send)(
/*6766*/ IAsyncRpcChannelBuffer*This,
/*6767*/ RPCOLEMESSAGE*pMsg,
/*6768*/ ISynchronize*pSync,
/*6769*/ ULONG*pulStatus);
/*6771*/ HRESULT(__stdcall*Receive)(
/*6772*/ IAsyncRpcChannelBuffer*This,
/*6773*/ RPCOLEMESSAGE*pMsg,
/*6774*/ ULONG*pulStatus);
/*6776*/ HRESULT(__stdcall*GetDestCtxEx)(
/*6777*/ IAsyncRpcChannelBuffer*This,
/*6778*/ RPCOLEMESSAGE*pMsg,
/*6779*/ DWORD*pdwDestContext,
/*6780*/ void**ppvDestContext);
/*6782*/ 
/*6783*/ }IAsyncRpcChannelBufferVtbl;
/*6785*/ struct IAsyncRpcChannelBuffer
/*6786*/ {
/*6787*/ struct IAsyncRpcChannelBufferVtbl*lpVtbl;
/*6788*/ };
/*6852*/ extern const IID IID_IRpcChannelBuffer3;
/*6894*/ typedef struct IRpcChannelBuffer3Vtbl
/*6895*/ {
/*6896*/ 
/*6898*/ HRESULT(__stdcall*QueryInterface)(
/*6899*/ IRpcChannelBuffer3*This,
/*6900*/ const IID*const riid,
/*6902*/ void**ppvObject);
/*6904*/ ULONG(__stdcall*AddRef)(
/*6905*/ IRpcChannelBuffer3*This);
/*6907*/ ULONG(__stdcall*Release)(
/*6908*/ IRpcChannelBuffer3*This);
/*6910*/ HRESULT(__stdcall*GetBuffer)(
/*6911*/ IRpcChannelBuffer3*This,
/*6912*/ RPCOLEMESSAGE*pMessage,
/*6913*/ const IID*const riid);
/*6915*/ HRESULT(__stdcall*SendReceive)(
/*6916*/ IRpcChannelBuffer3*This,
/*6917*/ RPCOLEMESSAGE*pMessage,
/*6918*/ ULONG*pStatus);
/*6920*/ HRESULT(__stdcall*FreeBuffer)(
/*6921*/ IRpcChannelBuffer3*This,
/*6922*/ RPCOLEMESSAGE*pMessage);
/*6924*/ HRESULT(__stdcall*GetDestCtx)(
/*6925*/ IRpcChannelBuffer3*This,
/*6926*/ DWORD*pdwDestContext,
/*6927*/ void**ppvDestContext);
/*6929*/ HRESULT(__stdcall*IsConnected)(
/*6930*/ IRpcChannelBuffer3*This);
/*6932*/ HRESULT(__stdcall*GetProtocolVersion)(
/*6933*/ IRpcChannelBuffer3*This,
/*6934*/ DWORD*pdwVersion);
/*6936*/ HRESULT(__stdcall*Send)(
/*6937*/ IRpcChannelBuffer3*This,
/*6938*/ RPCOLEMESSAGE*pMsg,
/*6939*/ ULONG*pulStatus);
/*6941*/ HRESULT(__stdcall*Receive)(
/*6942*/ IRpcChannelBuffer3*This,
/*6943*/ RPCOLEMESSAGE*pMsg,
/*6944*/ ULONG ulSize,
/*6945*/ ULONG*pulStatus);
/*6947*/ HRESULT(__stdcall*Cancel)(
/*6948*/ IRpcChannelBuffer3*This,
/*6949*/ RPCOLEMESSAGE*pMsg);
/*6951*/ HRESULT(__stdcall*GetCallContext)(
/*6952*/ IRpcChannelBuffer3*This,
/*6953*/ RPCOLEMESSAGE*pMsg,
/*6954*/ const IID*const riid,
/*6955*/ void**pInterface);
/*6957*/ HRESULT(__stdcall*GetDestCtxEx)(
/*6958*/ IRpcChannelBuffer3*This,
/*6959*/ RPCOLEMESSAGE*pMsg,
/*6960*/ DWORD*pdwDestContext,
/*6961*/ void**ppvDestContext);
/*6963*/ HRESULT(__stdcall*GetState)(
/*6964*/ IRpcChannelBuffer3*This,
/*6965*/ RPCOLEMESSAGE*pMsg,
/*6966*/ DWORD*pState);
/*6968*/ HRESULT(__stdcall*RegisterAsync)(
/*6969*/ IRpcChannelBuffer3*This,
/*6970*/ RPCOLEMESSAGE*pMsg,
/*6971*/ IAsyncManager*pAsyncMgr);
/*6973*/ 
/*6974*/ }IRpcChannelBuffer3Vtbl;
/*6976*/ struct IRpcChannelBuffer3
/*6977*/ {
/*6978*/ struct IRpcChannelBuffer3Vtbl*lpVtbl;
/*6979*/ };
/*7055*/ extern const IID IID_IRpcSyntaxNegotiate;
/*7070*/ typedef struct IRpcSyntaxNegotiateVtbl
/*7071*/ {
/*7072*/ 
/*7074*/ HRESULT(__stdcall*QueryInterface)(
/*7075*/ IRpcSyntaxNegotiate*This,
/*7076*/ const IID*const riid,
/*7078*/ void**ppvObject);
/*7080*/ ULONG(__stdcall*AddRef)(
/*7081*/ IRpcSyntaxNegotiate*This);
/*7083*/ ULONG(__stdcall*Release)(
/*7084*/ IRpcSyntaxNegotiate*This);
/*7086*/ HRESULT(__stdcall*NegotiateSyntax)(
/*7087*/ IRpcSyntaxNegotiate*This,
/*7088*/ RPCOLEMESSAGE*pMsg);
/*7090*/ 
/*7091*/ }IRpcSyntaxNegotiateVtbl;
/*7093*/ struct IRpcSyntaxNegotiate
/*7094*/ {
/*7095*/ struct IRpcSyntaxNegotiateVtbl*lpVtbl;
/*7096*/ };
/*7134*/ extern const IID IID_IRpcProxyBuffer;
/*7151*/ typedef struct IRpcProxyBufferVtbl
/*7152*/ {
/*7153*/ 
/*7155*/ HRESULT(__stdcall*QueryInterface)(
/*7156*/ IRpcProxyBuffer*This,
/*7157*/ const IID*const riid,
/*7159*/ void**ppvObject);
/*7161*/ ULONG(__stdcall*AddRef)(
/*7162*/ IRpcProxyBuffer*This);
/*7164*/ ULONG(__stdcall*Release)(
/*7165*/ IRpcProxyBuffer*This);
/*7167*/ HRESULT(__stdcall*Connect)(
/*7168*/ IRpcProxyBuffer*This,
/*7169*/ IRpcChannelBuffer*pRpcChannelBuffer);
/*7171*/ void(__stdcall*Disconnect)(
/*7172*/ IRpcProxyBuffer*This);
/*7174*/ 
/*7175*/ }IRpcProxyBufferVtbl;
/*7177*/ struct IRpcProxyBuffer
/*7178*/ {
/*7179*/ struct IRpcProxyBufferVtbl*lpVtbl;
/*7180*/ };
/*7221*/ extern const IID IID_IRpcStubBuffer;
/*7253*/ typedef struct IRpcStubBufferVtbl
/*7254*/ {
/*7255*/ 
/*7257*/ HRESULT(__stdcall*QueryInterface)(
/*7258*/ IRpcStubBuffer*This,
/*7259*/ const IID*const riid,
/*7261*/ void**ppvObject);
/*7263*/ ULONG(__stdcall*AddRef)(
/*7264*/ IRpcStubBuffer*This);
/*7266*/ ULONG(__stdcall*Release)(
/*7267*/ IRpcStubBuffer*This);
/*7269*/ HRESULT(__stdcall*Connect)(
/*7270*/ IRpcStubBuffer*This,
/*7271*/ IUnknown*pUnkServer);
/*7273*/ void(__stdcall*Disconnect)(
/*7274*/ IRpcStubBuffer*This);
/*7276*/ HRESULT(__stdcall*Invoke)(
/*7277*/ IRpcStubBuffer*This,
/*7278*/ RPCOLEMESSAGE*_prpcmsg,
/*7279*/ IRpcChannelBuffer*_pRpcChannelBuffer);
/*7281*/ IRpcStubBuffer*(__stdcall*IsIIDSupported)(
/*7282*/ IRpcStubBuffer*This,
/*7283*/ const IID*const riid);
/*7285*/ ULONG(__stdcall*CountRefs)(
/*7286*/ IRpcStubBuffer*This);
/*7288*/ HRESULT(__stdcall*DebugServerQueryInterface)(
/*7289*/ IRpcStubBuffer*This,
/*7290*/ void**ppv);
/*7292*/ void(__stdcall*DebugServerRelease)(
/*7293*/ IRpcStubBuffer*This,
/*7294*/ void*pv);
/*7296*/ 
/*7297*/ }IRpcStubBufferVtbl;
/*7299*/ struct IRpcStubBuffer
/*7300*/ {
/*7301*/ struct IRpcStubBufferVtbl*lpVtbl;
/*7302*/ };
/*7358*/ extern const IID IID_IPSFactoryBuffer;
/*7381*/ typedef struct IPSFactoryBufferVtbl
/*7382*/ {
/*7383*/ 
/*7385*/ HRESULT(__stdcall*QueryInterface)(
/*7386*/ IPSFactoryBuffer*This,
/*7387*/ const IID*const riid,
/*7389*/ void**ppvObject);
/*7391*/ ULONG(__stdcall*AddRef)(
/*7392*/ IPSFactoryBuffer*This);
/*7394*/ ULONG(__stdcall*Release)(
/*7395*/ IPSFactoryBuffer*This);
/*7397*/ HRESULT(__stdcall*CreateProxy)(
/*7398*/ IPSFactoryBuffer*This,
/*7399*/ IUnknown*pUnkOuter,
/*7400*/ const IID*const riid,
/*7401*/ IRpcProxyBuffer**ppProxy,
/*7402*/ void**ppv);
/*7404*/ HRESULT(__stdcall*CreateStub)(
/*7405*/ IPSFactoryBuffer*This,
/*7406*/ const IID*const riid,
/*7407*/ IUnknown*pUnkServer,
/*7408*/ IRpcStubBuffer**ppStub);
/*7410*/ 
/*7411*/ }IPSFactoryBufferVtbl;
/*7413*/ struct IPSFactoryBuffer
/*7414*/ {
/*7415*/ struct IPSFactoryBufferVtbl*lpVtbl;
/*7416*/ };
/*7647*/ extern const FMTID FMTID_SummaryInformation;
/*7649*/ extern const FMTID FMTID_DocSummaryInformation;
/*7651*/ extern const FMTID FMTID_UserDefinedProperties;
/*7653*/ extern const FMTID FMTID_DiscardableInformation;
/*7655*/ extern const FMTID FMTID_ImageSummaryInformation;
/*7657*/ extern const FMTID FMTID_AudioSummaryInformation;
/*7659*/ extern const FMTID FMTID_VideoSummaryInformation;
/*7661*/ extern const FMTID FMTID_MediaFileSummaryInformation;
/*8282*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0047_v0_0_c_ifspec;
/*8283*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0047_v0_0_s_ifspec;
/*8292*/ extern const IID IID_IFillLockBytes;
/*8321*/ typedef struct IFillLockBytesVtbl
/*8322*/ {
/*8323*/ 
/*8325*/ HRESULT(__stdcall*QueryInterface)(
/*8326*/ IFillLockBytes*This,
/*8327*/ const IID*const riid,
/*8329*/ void**ppvObject);
/*8331*/ ULONG(__stdcall*AddRef)(
/*8332*/ IFillLockBytes*This);
/*8334*/ ULONG(__stdcall*Release)(
/*8335*/ IFillLockBytes*This);
/*8337*/ HRESULT(__stdcall*FillAppend)(
/*8338*/ IFillLockBytes*This,
/*8339*/ const void*pv,
/*8340*/ ULONG cb,
/*8341*/ ULONG*pcbWritten);
/*8343*/ HRESULT(__stdcall*FillAt)(
/*8344*/ IFillLockBytes*This,
/*8345*/ ULARGE_INTEGER ulOffset,
/*8346*/ const void*pv,
/*8347*/ ULONG cb,
/*8348*/ ULONG*pcbWritten);
/*8350*/ HRESULT(__stdcall*SetFillSize)(
/*8351*/ IFillLockBytes*This,
/*8352*/ ULARGE_INTEGER ulSize);
/*8354*/ HRESULT(__stdcall*Terminate)(
/*8355*/ IFillLockBytes*This,
/*8356*/ BOOL bCanceled);
/*8358*/ 
/*8359*/ }IFillLockBytesVtbl;
/*8361*/ struct IFillLockBytes
/*8362*/ {
/*8363*/ struct IFillLockBytesVtbl*lpVtbl;
/*8364*/ };
/*8400*/ HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy(
/*8401*/ IFillLockBytes*This,
/*8402*/ const byte*pv,
/*8403*/ ULONG cb,
/*8404*/ ULONG*pcbWritten);
/*8407*/ void IFillLockBytes_RemoteFillAppend_Stub(
/*8408*/ IRpcStubBuffer*This,
/*8409*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*8410*/ PRPC_MESSAGE _pRpcMessage,
/*8411*/ DWORD*_pdwStubPhase);
/*8414*/ HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy(
/*8415*/ IFillLockBytes*This,
/*8416*/ ULARGE_INTEGER ulOffset,
/*8417*/ const byte*pv,
/*8418*/ ULONG cb,
/*8419*/ ULONG*pcbWritten);
/*8422*/ void IFillLockBytes_RemoteFillAt_Stub(
/*8423*/ IRpcStubBuffer*This,
/*8424*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*8425*/ PRPC_MESSAGE _pRpcMessage,
/*8426*/ DWORD*_pdwStubPhase);
/*8440*/ extern const IID IID_IProgressNotify;
/*8458*/ typedef struct IProgressNotifyVtbl
/*8459*/ {
/*8460*/ 
/*8462*/ HRESULT(__stdcall*QueryInterface)(
/*8463*/ IProgressNotify*This,
/*8464*/ const IID*const riid,
/*8466*/ void**ppvObject);
/*8468*/ ULONG(__stdcall*AddRef)(
/*8469*/ IProgressNotify*This);
/*8471*/ ULONG(__stdcall*Release)(
/*8472*/ IProgressNotify*This);
/*8474*/ HRESULT(__stdcall*OnProgress)(
/*8475*/ IProgressNotify*This,
/*8476*/ DWORD dwProgressCurrent,
/*8477*/ DWORD dwProgressMaximum,
/*8478*/ BOOL fAccurate,
/*8479*/ BOOL fOwner);
/*8481*/ 
/*8482*/ }IProgressNotifyVtbl;
/*8484*/ struct IProgressNotify
/*8485*/ {
/*8486*/ struct IProgressNotifyVtbl*lpVtbl;
/*8487*/ };
/*8524*/ typedef struct tagStorageLayout
/*8525*/ {
/*8526*/ DWORD LayoutType;
/*8527*/ OLECHAR*pwcsElementName;
/*8528*/ LARGE_INTEGER cOffset;
/*8529*/ LARGE_INTEGER cBytes;
/*8530*/ }StorageLayout;
/*8533*/ extern const IID IID_ILayoutStorage;
/*8561*/ typedef struct ILayoutStorageVtbl
/*8562*/ {
/*8563*/ 
/*8565*/ HRESULT(__stdcall*QueryInterface)(
/*8566*/ ILayoutStorage*This,
/*8567*/ const IID*const riid,
/*8569*/ void**ppvObject);
/*8571*/ ULONG(__stdcall*AddRef)(
/*8572*/ ILayoutStorage*This);
/*8574*/ ULONG(__stdcall*Release)(
/*8575*/ ILayoutStorage*This);
/*8577*/ HRESULT(__stdcall*LayoutScript)(
/*8578*/ ILayoutStorage*This,
/*8579*/ StorageLayout*pStorageLayout,
/*8580*/ DWORD nEntries,
/*8581*/ DWORD glfInterleavedFlag);
/*8583*/ HRESULT(__stdcall*BeginMonitor)(
/*8584*/ ILayoutStorage*This);
/*8586*/ HRESULT(__stdcall*EndMonitor)(
/*8587*/ ILayoutStorage*This);
/*8589*/ HRESULT(__stdcall*ReLayoutDocfile)(
/*8590*/ ILayoutStorage*This,
/*8592*/ OLECHAR*pwcsNewDfName);
/*8594*/ HRESULT(__stdcall*ReLayoutDocfileOnILockBytes)(
/*8595*/ ILayoutStorage*This,
/*8596*/ ILockBytes*pILockBytes);
/*8598*/ 
/*8599*/ }ILayoutStorageVtbl;
/*8601*/ struct ILayoutStorage
/*8602*/ {
/*8603*/ struct ILayoutStorageVtbl*lpVtbl;
/*8604*/ };
/*8654*/ extern const IID IID_IBlockingLock;
/*8671*/ typedef struct IBlockingLockVtbl
/*8672*/ {
/*8673*/ 
/*8675*/ HRESULT(__stdcall*QueryInterface)(
/*8676*/ IBlockingLock*This,
/*8677*/ const IID*const riid,
/*8679*/ void**ppvObject);
/*8681*/ ULONG(__stdcall*AddRef)(
/*8682*/ IBlockingLock*This);
/*8684*/ ULONG(__stdcall*Release)(
/*8685*/ IBlockingLock*This);
/*8687*/ HRESULT(__stdcall*Lock)(
/*8688*/ IBlockingLock*This,
/*8689*/ DWORD dwTimeout);
/*8691*/ HRESULT(__stdcall*Unlock)(
/*8692*/ IBlockingLock*This);
/*8694*/ 
/*8695*/ }IBlockingLockVtbl;
/*8697*/ struct IBlockingLock
/*8698*/ {
/*8699*/ struct IBlockingLockVtbl*lpVtbl;
/*8700*/ };
/*8741*/ extern const IID IID_ITimeAndNoticeControl;
/*8757*/ typedef struct ITimeAndNoticeControlVtbl
/*8758*/ {
/*8759*/ 
/*8761*/ HRESULT(__stdcall*QueryInterface)(
/*8762*/ ITimeAndNoticeControl*This,
/*8763*/ const IID*const riid,
/*8765*/ void**ppvObject);
/*8767*/ ULONG(__stdcall*AddRef)(
/*8768*/ ITimeAndNoticeControl*This);
/*8770*/ ULONG(__stdcall*Release)(
/*8771*/ ITimeAndNoticeControl*This);
/*8773*/ HRESULT(__stdcall*SuppressChanges)(
/*8774*/ ITimeAndNoticeControl*This,
/*8775*/ DWORD res1,
/*8776*/ DWORD res2);
/*8778*/ 
/*8779*/ }ITimeAndNoticeControlVtbl;
/*8781*/ struct ITimeAndNoticeControl
/*8782*/ {
/*8783*/ struct ITimeAndNoticeControlVtbl*lpVtbl;
/*8784*/ };
/*8822*/ extern const IID IID_IOplockStorage;
/*8850*/ typedef struct IOplockStorageVtbl
/*8851*/ {
/*8852*/ 
/*8854*/ HRESULT(__stdcall*QueryInterface)(
/*8855*/ IOplockStorage*This,
/*8856*/ const IID*const riid,
/*8858*/ void**ppvObject);
/*8860*/ ULONG(__stdcall*AddRef)(
/*8861*/ IOplockStorage*This);
/*8863*/ ULONG(__stdcall*Release)(
/*8864*/ IOplockStorage*This);
/*8866*/ HRESULT(__stdcall*CreateStorageEx)(
/*8867*/ IOplockStorage*This,
/*8868*/ LPCWSTR pwcsName,
/*8869*/ DWORD grfMode,
/*8870*/ DWORD stgfmt,
/*8871*/ DWORD grfAttrs,
/*8872*/ const IID*const riid,
/*8873*/ void**ppstgOpen);
/*8875*/ HRESULT(__stdcall*OpenStorageEx)(
/*8876*/ IOplockStorage*This,
/*8877*/ LPCWSTR pwcsName,
/*8878*/ DWORD grfMode,
/*8879*/ DWORD stgfmt,
/*8880*/ DWORD grfAttrs,
/*8881*/ const IID*const riid,
/*8882*/ void**ppstgOpen);
/*8884*/ 
/*8885*/ }IOplockStorageVtbl;
/*8887*/ struct IOplockStorage
/*8888*/ {
/*8889*/ struct IOplockStorageVtbl*lpVtbl;
/*8890*/ };
/*8930*/ typedef ISurrogate*LPSURROGATE;
/*8933*/ extern const IID IID_ISurrogate;
/*8950*/ typedef struct ISurrogateVtbl
/*8951*/ {
/*8952*/ 
/*8954*/ HRESULT(__stdcall*QueryInterface)(
/*8955*/ ISurrogate*This,
/*8956*/ const IID*const riid,
/*8958*/ void**ppvObject);
/*8960*/ ULONG(__stdcall*AddRef)(
/*8961*/ ISurrogate*This);
/*8963*/ ULONG(__stdcall*Release)(
/*8964*/ ISurrogate*This);
/*8966*/ HRESULT(__stdcall*LoadDllServer)(
/*8967*/ ISurrogate*This,
/*8968*/ const IID*const Clsid);
/*8970*/ HRESULT(__stdcall*FreeSurrogate)(
/*8971*/ ISurrogate*This);
/*8973*/ 
/*8974*/ }ISurrogateVtbl;
/*8976*/ struct ISurrogate
/*8977*/ {
/*8978*/ struct ISurrogateVtbl*lpVtbl;
/*8979*/ };
/*9019*/ typedef IGlobalInterfaceTable*LPGLOBALINTERFACETABLE;
/*9022*/ extern const IID IID_IGlobalInterfaceTable;
/*9047*/ typedef struct IGlobalInterfaceTableVtbl
/*9048*/ {
/*9049*/ 
/*9051*/ HRESULT(__stdcall*QueryInterface)(
/*9052*/ IGlobalInterfaceTable*This,
/*9053*/ const IID*const riid,
/*9055*/ void**ppvObject);
/*9057*/ ULONG(__stdcall*AddRef)(
/*9058*/ IGlobalInterfaceTable*This);
/*9060*/ ULONG(__stdcall*Release)(
/*9061*/ IGlobalInterfaceTable*This);
/*9063*/ HRESULT(__stdcall*RegisterInterfaceInGlobal)(
/*9064*/ IGlobalInterfaceTable*This,
/*9065*/ IUnknown*pUnk,
/*9066*/ const IID*const riid,
/*9067*/ DWORD*pdwCookie);
/*9069*/ HRESULT(__stdcall*RevokeInterfaceFromGlobal)(
/*9070*/ IGlobalInterfaceTable*This,
/*9071*/ DWORD dwCookie);
/*9073*/ HRESULT(__stdcall*GetInterfaceFromGlobal)(
/*9074*/ IGlobalInterfaceTable*This,
/*9075*/ DWORD dwCookie,
/*9076*/ const IID*const riid,
/*9077*/ void**ppv);
/*9079*/ 
/*9080*/ }IGlobalInterfaceTableVtbl;
/*9082*/ struct IGlobalInterfaceTable
/*9083*/ {
/*9084*/ struct IGlobalInterfaceTableVtbl*lpVtbl;
/*9085*/ };
/*9129*/ extern const IID IID_IDirectWriterLock;
/*9148*/ typedef struct IDirectWriterLockVtbl
/*9149*/ {
/*9150*/ 
/*9152*/ HRESULT(__stdcall*QueryInterface)(
/*9153*/ IDirectWriterLock*This,
/*9154*/ const IID*const riid,
/*9156*/ void**ppvObject);
/*9158*/ ULONG(__stdcall*AddRef)(
/*9159*/ IDirectWriterLock*This);
/*9161*/ ULONG(__stdcall*Release)(
/*9162*/ IDirectWriterLock*This);
/*9164*/ HRESULT(__stdcall*WaitForWriteAccess)(
/*9165*/ IDirectWriterLock*This,
/*9166*/ DWORD dwTimeout);
/*9168*/ HRESULT(__stdcall*ReleaseWriteAccess)(
/*9169*/ IDirectWriterLock*This);
/*9171*/ HRESULT(__stdcall*HaveWriteAccess)(
/*9172*/ IDirectWriterLock*This);
/*9174*/ 
/*9175*/ }IDirectWriterLockVtbl;
/*9177*/ struct IDirectWriterLock
/*9178*/ {
/*9179*/ struct IDirectWriterLockVtbl*lpVtbl;
/*9180*/ };
/*9224*/ extern const IID IID_ISynchronize;
/*9244*/ typedef struct ISynchronizeVtbl
/*9245*/ {
/*9246*/ 
/*9248*/ HRESULT(__stdcall*QueryInterface)(
/*9249*/ ISynchronize*This,
/*9250*/ const IID*const riid,
/*9252*/ void**ppvObject);
/*9254*/ ULONG(__stdcall*AddRef)(
/*9255*/ ISynchronize*This);
/*9257*/ ULONG(__stdcall*Release)(
/*9258*/ ISynchronize*This);
/*9260*/ HRESULT(__stdcall*Wait)(
/*9261*/ ISynchronize*This,
/*9262*/ DWORD dwFlags,
/*9263*/ DWORD dwMilliseconds);
/*9265*/ HRESULT(__stdcall*Signal)(
/*9266*/ ISynchronize*This);
/*9268*/ HRESULT(__stdcall*Reset)(
/*9269*/ ISynchronize*This);
/*9271*/ 
/*9272*/ }ISynchronizeVtbl;
/*9274*/ struct ISynchronize
/*9275*/ {
/*9276*/ struct ISynchronizeVtbl*lpVtbl;
/*9277*/ };
/*9321*/ extern const IID IID_ISynchronizeHandle;
/*9336*/ typedef struct ISynchronizeHandleVtbl
/*9337*/ {
/*9338*/ 
/*9340*/ HRESULT(__stdcall*QueryInterface)(
/*9341*/ ISynchronizeHandle*This,
/*9342*/ const IID*const riid,
/*9344*/ void**ppvObject);
/*9346*/ ULONG(__stdcall*AddRef)(
/*9347*/ ISynchronizeHandle*This);
/*9349*/ ULONG(__stdcall*Release)(
/*9350*/ ISynchronizeHandle*This);
/*9352*/ HRESULT(__stdcall*GetHandle)(
/*9353*/ ISynchronizeHandle*This,
/*9354*/ HANDLE*ph);
/*9356*/ 
/*9357*/ }ISynchronizeHandleVtbl;
/*9359*/ struct ISynchronizeHandle
/*9360*/ {
/*9361*/ struct ISynchronizeHandleVtbl*lpVtbl;
/*9362*/ };
/*9400*/ extern const IID IID_ISynchronizeEvent;
/*9415*/ typedef struct ISynchronizeEventVtbl
/*9416*/ {
/*9417*/ 
/*9419*/ HRESULT(__stdcall*QueryInterface)(
/*9420*/ ISynchronizeEvent*This,
/*9421*/ const IID*const riid,
/*9423*/ void**ppvObject);
/*9425*/ ULONG(__stdcall*AddRef)(
/*9426*/ ISynchronizeEvent*This);
/*9428*/ ULONG(__stdcall*Release)(
/*9429*/ ISynchronizeEvent*This);
/*9431*/ HRESULT(__stdcall*GetHandle)(
/*9432*/ ISynchronizeEvent*This,
/*9433*/ HANDLE*ph);
/*9435*/ HRESULT(__stdcall*SetEventHandle)(
/*9436*/ ISynchronizeEvent*This,
/*9437*/ HANDLE*ph);
/*9439*/ 
/*9440*/ }ISynchronizeEventVtbl;
/*9442*/ struct ISynchronizeEvent
/*9443*/ {
/*9444*/ struct ISynchronizeEventVtbl*lpVtbl;
/*9445*/ };
/*9487*/ extern const IID IID_ISynchronizeContainer;
/*9507*/ typedef struct ISynchronizeContainerVtbl
/*9508*/ {
/*9509*/ 
/*9511*/ HRESULT(__stdcall*QueryInterface)(
/*9512*/ ISynchronizeContainer*This,
/*9513*/ const IID*const riid,
/*9515*/ void**ppvObject);
/*9517*/ ULONG(__stdcall*AddRef)(
/*9518*/ ISynchronizeContainer*This);
/*9520*/ ULONG(__stdcall*Release)(
/*9521*/ ISynchronizeContainer*This);
/*9523*/ HRESULT(__stdcall*AddSynchronize)(
/*9524*/ ISynchronizeContainer*This,
/*9525*/ ISynchronize*pSync);
/*9527*/ HRESULT(__stdcall*WaitMultiple)(
/*9528*/ ISynchronizeContainer*This,
/*9529*/ DWORD dwFlags,
/*9530*/ DWORD dwTimeOut,
/*9531*/ ISynchronize**ppSync);
/*9533*/ 
/*9534*/ }ISynchronizeContainerVtbl;
/*9536*/ struct ISynchronizeContainer
/*9537*/ {
/*9538*/ struct ISynchronizeContainerVtbl*lpVtbl;
/*9539*/ };
/*9580*/ extern const IID IID_ISynchronizeMutex;
/*9594*/ typedef struct ISynchronizeMutexVtbl
/*9595*/ {
/*9596*/ 
/*9598*/ HRESULT(__stdcall*QueryInterface)(
/*9599*/ ISynchronizeMutex*This,
/*9600*/ const IID*const riid,
/*9602*/ void**ppvObject);
/*9604*/ ULONG(__stdcall*AddRef)(
/*9605*/ ISynchronizeMutex*This);
/*9607*/ ULONG(__stdcall*Release)(
/*9608*/ ISynchronizeMutex*This);
/*9610*/ HRESULT(__stdcall*Wait)(
/*9611*/ ISynchronizeMutex*This,
/*9612*/ DWORD dwFlags,
/*9613*/ DWORD dwMilliseconds);
/*9615*/ HRESULT(__stdcall*Signal)(
/*9616*/ ISynchronizeMutex*This);
/*9618*/ HRESULT(__stdcall*Reset)(
/*9619*/ ISynchronizeMutex*This);
/*9621*/ HRESULT(__stdcall*ReleaseMutex)(
/*9622*/ ISynchronizeMutex*This);
/*9624*/ 
/*9625*/ }ISynchronizeMutexVtbl;
/*9627*/ struct ISynchronizeMutex
/*9628*/ {
/*9629*/ struct ISynchronizeMutexVtbl*lpVtbl;
/*9630*/ };
/*9677*/ typedef ICancelMethodCalls*LPCANCELMETHODCALLS;
/*9680*/ extern const IID IID_ICancelMethodCalls;
/*9697*/ typedef struct ICancelMethodCallsVtbl
/*9698*/ {
/*9699*/ 
/*9701*/ HRESULT(__stdcall*QueryInterface)(
/*9702*/ ICancelMethodCalls*This,
/*9703*/ const IID*const riid,
/*9705*/ void**ppvObject);
/*9707*/ ULONG(__stdcall*AddRef)(
/*9708*/ ICancelMethodCalls*This);
/*9710*/ ULONG(__stdcall*Release)(
/*9711*/ ICancelMethodCalls*This);
/*9713*/ HRESULT(__stdcall*Cancel)(
/*9714*/ ICancelMethodCalls*This,
/*9715*/ ULONG ulSeconds);
/*9717*/ HRESULT(__stdcall*TestCancel)(
/*9718*/ ICancelMethodCalls*This);
/*9720*/ 
/*9721*/ }ICancelMethodCallsVtbl;
/*9723*/ struct ICancelMethodCalls
/*9724*/ {
/*9725*/ struct ICancelMethodCallsVtbl*lpVtbl;
/*9726*/ };
/*9766*/ typedef
/*9767*/ enum tagDCOM_CALL_STATE
/*9768*/ {DCOM_NONE=0,
/*9769*/ DCOM_CALL_COMPLETE=0x1,
/*9770*/ DCOM_CALL_CANCELED=0x2
/*9771*/ }DCOM_CALL_STATE;
/*9774*/ extern const IID IID_IAsyncManager;
/*9796*/ typedef struct IAsyncManagerVtbl
/*9797*/ {
/*9798*/ 
/*9800*/ HRESULT(__stdcall*QueryInterface)(
/*9801*/ IAsyncManager*This,
/*9802*/ const IID*const riid,
/*9804*/ void**ppvObject);
/*9806*/ ULONG(__stdcall*AddRef)(
/*9807*/ IAsyncManager*This);
/*9809*/ ULONG(__stdcall*Release)(
/*9810*/ IAsyncManager*This);
/*9812*/ HRESULT(__stdcall*CompleteCall)(
/*9813*/ IAsyncManager*This,
/*9814*/ HRESULT Result);
/*9816*/ HRESULT(__stdcall*GetCallContext)(
/*9817*/ IAsyncManager*This,
/*9818*/ const IID*const riid,
/*9819*/ void**pInterface);
/*9821*/ HRESULT(__stdcall*GetState)(
/*9822*/ IAsyncManager*This,
/*9823*/ ULONG*pulStateFlags);
/*9825*/ 
/*9826*/ }IAsyncManagerVtbl;
/*9828*/ struct IAsyncManager
/*9829*/ {
/*9830*/ struct IAsyncManagerVtbl*lpVtbl;
/*9831*/ };
/*9875*/ extern const IID IID_ICallFactory;
/*9893*/ typedef struct ICallFactoryVtbl
/*9894*/ {
/*9895*/ 
/*9897*/ HRESULT(__stdcall*QueryInterface)(
/*9898*/ ICallFactory*This,
/*9899*/ const IID*const riid,
/*9901*/ void**ppvObject);
/*9903*/ ULONG(__stdcall*AddRef)(
/*9904*/ ICallFactory*This);
/*9906*/ ULONG(__stdcall*Release)(
/*9907*/ ICallFactory*This);
/*9909*/ HRESULT(__stdcall*CreateCall)(
/*9910*/ ICallFactory*This,
/*9911*/ const IID*const riid,
/*9912*/ IUnknown*pCtrlUnk,
/*9913*/ const IID*const riid2,
/*9914*/ IUnknown**ppv);
/*9916*/ 
/*9917*/ }ICallFactoryVtbl;
/*9919*/ struct ICallFactory
/*9920*/ {
/*9921*/ struct ICallFactoryVtbl*lpVtbl;
/*9922*/ };
/*9960*/ extern const IID IID_IRpcHelper;
/*9979*/ typedef struct IRpcHelperVtbl
/*9980*/ {
/*9981*/ 
/*9983*/ HRESULT(__stdcall*QueryInterface)(
/*9984*/ IRpcHelper*This,
/*9985*/ const IID*const riid,
/*9987*/ void**ppvObject);
/*9989*/ ULONG(__stdcall*AddRef)(
/*9990*/ IRpcHelper*This);
/*9992*/ ULONG(__stdcall*Release)(
/*9993*/ IRpcHelper*This);
/*9995*/ HRESULT(__stdcall*GetDCOMProtocolVersion)(
/*9996*/ IRpcHelper*This,
/*9997*/ DWORD*pComVersion);
/*9999*/ HRESULT(__stdcall*GetIIDFromOBJREF)(
/*10000*/ IRpcHelper*This,
/*10001*/ void*pObjRef,
/*10002*/ IID**piid);
/*10004*/ 
/*10005*/ }IRpcHelperVtbl;
/*10007*/ struct IRpcHelper
/*10008*/ {
/*10009*/ struct IRpcHelperVtbl*lpVtbl;
/*10010*/ };
/*10051*/ extern const IID IID_IReleaseMarshalBuffers;
/*10068*/ typedef struct IReleaseMarshalBuffersVtbl
/*10069*/ {
/*10070*/ 
/*10072*/ HRESULT(__stdcall*QueryInterface)(
/*10073*/ IReleaseMarshalBuffers*This,
/*10074*/ const IID*const riid,
/*10076*/ void**ppvObject);
/*10078*/ ULONG(__stdcall*AddRef)(
/*10079*/ IReleaseMarshalBuffers*This);
/*10081*/ ULONG(__stdcall*Release)(
/*10082*/ IReleaseMarshalBuffers*This);
/*10084*/ HRESULT(__stdcall*ReleaseMarshalBuffer)(
/*10085*/ IReleaseMarshalBuffers*This,
/*10086*/ RPCOLEMESSAGE*pMsg,
/*10087*/ DWORD dwFlags,
/*10088*/ IUnknown*pChnl);
/*10090*/ 
/*10091*/ }IReleaseMarshalBuffersVtbl;
/*10093*/ struct IReleaseMarshalBuffers
/*10094*/ {
/*10095*/ struct IReleaseMarshalBuffersVtbl*lpVtbl;
/*10096*/ };
/*10134*/ extern const IID IID_IWaitMultiple;
/*10153*/ typedef struct IWaitMultipleVtbl
/*10154*/ {
/*10155*/ 
/*10157*/ HRESULT(__stdcall*QueryInterface)(
/*10158*/ IWaitMultiple*This,
/*10159*/ const IID*const riid,
/*10161*/ void**ppvObject);
/*10163*/ ULONG(__stdcall*AddRef)(
/*10164*/ IWaitMultiple*This);
/*10166*/ ULONG(__stdcall*Release)(
/*10167*/ IWaitMultiple*This);
/*10169*/ HRESULT(__stdcall*WaitMultiple)(
/*10170*/ IWaitMultiple*This,
/*10171*/ DWORD timeout,
/*10172*/ ISynchronize**pSync);
/*10174*/ HRESULT(__stdcall*AddSynchronize)(
/*10175*/ IWaitMultiple*This,
/*10176*/ ISynchronize*pSync);
/*10178*/ 
/*10179*/ }IWaitMultipleVtbl;
/*10181*/ struct IWaitMultiple
/*10182*/ {
/*10183*/ struct IWaitMultipleVtbl*lpVtbl;
/*10184*/ };
/*10225*/ extern const IID IID_IUrlMon;
/*10249*/ typedef struct IUrlMonVtbl
/*10250*/ {
/*10251*/ 
/*10253*/ HRESULT(__stdcall*QueryInterface)(
/*10254*/ IUrlMon*This,
/*10255*/ const IID*const riid,
/*10257*/ void**ppvObject);
/*10259*/ ULONG(__stdcall*AddRef)(
/*10260*/ IUrlMon*This);
/*10262*/ ULONG(__stdcall*Release)(
/*10263*/ IUrlMon*This);
/*10265*/ HRESULT(__stdcall*AsyncGetClassBits)(
/*10266*/ IUrlMon*This,
/*10267*/ const IID*const rclsid,
/*10268*/ LPCWSTR pszTYPE,
/*10269*/ LPCWSTR pszExt,
/*10270*/ DWORD dwFileVersionMS,
/*10271*/ DWORD dwFileVersionLS,
/*10272*/ LPCWSTR pszCodeBase,
/*10273*/ IBindCtx*pbc,
/*10274*/ DWORD dwClassContext,
/*10275*/ const IID*const riid,
/*10276*/ DWORD flags);
/*10278*/ 
/*10279*/ }IUrlMonVtbl;
/*10281*/ struct IUrlMon
/*10282*/ {
/*10283*/ struct IUrlMonVtbl*lpVtbl;
/*10284*/ };
/*10322*/ extern const IID IID_IForegroundTransfer;
/*10337*/ typedef struct IForegroundTransferVtbl
/*10338*/ {
/*10339*/ 
/*10341*/ HRESULT(__stdcall*QueryInterface)(
/*10342*/ IForegroundTransfer*This,
/*10343*/ const IID*const riid,
/*10345*/ void**ppvObject);
/*10347*/ ULONG(__stdcall*AddRef)(
/*10348*/ IForegroundTransfer*This);
/*10350*/ ULONG(__stdcall*Release)(
/*10351*/ IForegroundTransfer*This);
/*10353*/ HRESULT(__stdcall*AllowForegroundTransfer)(
/*10354*/ IForegroundTransfer*This,
/*10355*/ void*lpvReserved);
/*10357*/ 
/*10358*/ }IForegroundTransferVtbl;
/*10360*/ struct IForegroundTransfer
/*10361*/ {
/*10362*/ struct IForegroundTransferVtbl*lpVtbl;
/*10363*/ };
/*10400*/ typedef IAddrTrackingControl*LPADDRTRACKINGCONTROL;
/*10403*/ extern const IID IID_IAddrTrackingControl;
/*10419*/ typedef struct IAddrTrackingControlVtbl
/*10420*/ {
/*10421*/ 
/*10423*/ HRESULT(__stdcall*QueryInterface)(
/*10424*/ IAddrTrackingControl*This,
/*10425*/ const IID*const riid,
/*10427*/ void**ppvObject);
/*10429*/ ULONG(__stdcall*AddRef)(
/*10430*/ IAddrTrackingControl*This);
/*10432*/ ULONG(__stdcall*Release)(
/*10433*/ IAddrTrackingControl*This);
/*10435*/ HRESULT(__stdcall*EnableCOMDynamicAddrTracking)(
/*10436*/ IAddrTrackingControl*This);
/*10438*/ HRESULT(__stdcall*DisableCOMDynamicAddrTracking)(
/*10439*/ IAddrTrackingControl*This);
/*10441*/ 
/*10442*/ }IAddrTrackingControlVtbl;
/*10444*/ struct IAddrTrackingControl
/*10445*/ {
/*10446*/ struct IAddrTrackingControlVtbl*lpVtbl;
/*10447*/ };
/*10487*/ typedef IAddrExclusionControl*LPADDREXCLUSIONCONTROL;
/*10490*/ extern const IID IID_IAddrExclusionControl;
/*10509*/ typedef struct IAddrExclusionControlVtbl
/*10510*/ {
/*10511*/ 
/*10513*/ HRESULT(__stdcall*QueryInterface)(
/*10514*/ IAddrExclusionControl*This,
/*10515*/ const IID*const riid,
/*10517*/ void**ppvObject);
/*10519*/ ULONG(__stdcall*AddRef)(
/*10520*/ IAddrExclusionControl*This);
/*10522*/ ULONG(__stdcall*Release)(
/*10523*/ IAddrExclusionControl*This);
/*10525*/ HRESULT(__stdcall*GetCurrentAddrExclusionList)(
/*10526*/ IAddrExclusionControl*This,
/*10527*/ const IID*const riid,
/*10528*/ void**ppEnumerator);
/*10530*/ HRESULT(__stdcall*UpdateAddrExclusionList)(
/*10531*/ IAddrExclusionControl*This,
/*10532*/ IUnknown*pEnumerator);
/*10534*/ 
/*10535*/ }IAddrExclusionControlVtbl;
/*10537*/ struct IAddrExclusionControl
/*10538*/ {
/*10539*/ struct IAddrExclusionControlVtbl*lpVtbl;
/*10540*/ };
/*10581*/ extern const IID IID_IPipeByte;
/*10602*/ typedef struct IPipeByteVtbl
/*10603*/ {
/*10604*/ 
/*10606*/ HRESULT(__stdcall*QueryInterface)(
/*10607*/ IPipeByte*This,
/*10608*/ const IID*const riid,
/*10610*/ void**ppvObject);
/*10612*/ ULONG(__stdcall*AddRef)(
/*10613*/ IPipeByte*This);
/*10615*/ ULONG(__stdcall*Release)(
/*10616*/ IPipeByte*This);
/*10618*/ HRESULT(__stdcall*Pull)(
/*10619*/ IPipeByte*This,
/*10620*/ BYTE*buf,
/*10621*/ ULONG cRequest,
/*10622*/ ULONG*pcReturned);
/*10624*/ HRESULT(__stdcall*Push)(
/*10625*/ IPipeByte*This,
/*10626*/ BYTE*buf,
/*10627*/ ULONG cSent);
/*10629*/ 
/*10630*/ }IPipeByteVtbl;
/*10632*/ struct IPipeByte
/*10633*/ {
/*10634*/ struct IPipeByteVtbl*lpVtbl;
/*10635*/ };
/*10676*/ extern const IID IID_AsyncIPipeByte;
/*10701*/ typedef struct AsyncIPipeByteVtbl
/*10702*/ {
/*10703*/ 
/*10705*/ HRESULT(__stdcall*QueryInterface)(
/*10706*/ AsyncIPipeByte*This,
/*10707*/ const IID*const riid,
/*10709*/ void**ppvObject);
/*10711*/ ULONG(__stdcall*AddRef)(
/*10712*/ AsyncIPipeByte*This);
/*10714*/ ULONG(__stdcall*Release)(
/*10715*/ AsyncIPipeByte*This);
/*10717*/ HRESULT(__stdcall*Begin_Pull)(
/*10718*/ AsyncIPipeByte*This,
/*10719*/ ULONG cRequest);
/*10721*/ HRESULT(__stdcall*Finish_Pull)(
/*10722*/ AsyncIPipeByte*This,
/*10723*/ BYTE*buf,
/*10724*/ ULONG*pcReturned);
/*10726*/ HRESULT(__stdcall*Begin_Push)(
/*10727*/ AsyncIPipeByte*This,
/*10728*/ BYTE*buf,
/*10729*/ ULONG cSent);
/*10731*/ HRESULT(__stdcall*Finish_Push)(
/*10732*/ AsyncIPipeByte*This);
/*10734*/ 
/*10735*/ }AsyncIPipeByteVtbl;
/*10737*/ struct AsyncIPipeByte
/*10738*/ {
/*10739*/ struct AsyncIPipeByteVtbl*lpVtbl;
/*10740*/ };
/*10787*/ extern const IID IID_IPipeLong;
/*10808*/ typedef struct IPipeLongVtbl
/*10809*/ {
/*10810*/ 
/*10812*/ HRESULT(__stdcall*QueryInterface)(
/*10813*/ IPipeLong*This,
/*10814*/ const IID*const riid,
/*10816*/ void**ppvObject);
/*10818*/ ULONG(__stdcall*AddRef)(
/*10819*/ IPipeLong*This);
/*10821*/ ULONG(__stdcall*Release)(
/*10822*/ IPipeLong*This);
/*10824*/ HRESULT(__stdcall*Pull)(
/*10825*/ IPipeLong*This,
/*10826*/ LONG*buf,
/*10827*/ ULONG cRequest,
/*10828*/ ULONG*pcReturned);
/*10830*/ HRESULT(__stdcall*Push)(
/*10831*/ IPipeLong*This,
/*10832*/ LONG*buf,
/*10833*/ ULONG cSent);
/*10835*/ 
/*10836*/ }IPipeLongVtbl;
/*10838*/ struct IPipeLong
/*10839*/ {
/*10840*/ struct IPipeLongVtbl*lpVtbl;
/*10841*/ };
/*10882*/ extern const IID IID_AsyncIPipeLong;
/*10907*/ typedef struct AsyncIPipeLongVtbl
/*10908*/ {
/*10909*/ 
/*10911*/ HRESULT(__stdcall*QueryInterface)(
/*10912*/ AsyncIPipeLong*This,
/*10913*/ const IID*const riid,
/*10915*/ void**ppvObject);
/*10917*/ ULONG(__stdcall*AddRef)(
/*10918*/ AsyncIPipeLong*This);
/*10920*/ ULONG(__stdcall*Release)(
/*10921*/ AsyncIPipeLong*This);
/*10923*/ HRESULT(__stdcall*Begin_Pull)(
/*10924*/ AsyncIPipeLong*This,
/*10925*/ ULONG cRequest);
/*10927*/ HRESULT(__stdcall*Finish_Pull)(
/*10928*/ AsyncIPipeLong*This,
/*10929*/ LONG*buf,
/*10930*/ ULONG*pcReturned);
/*10932*/ HRESULT(__stdcall*Begin_Push)(
/*10933*/ AsyncIPipeLong*This,
/*10934*/ LONG*buf,
/*10935*/ ULONG cSent);
/*10937*/ HRESULT(__stdcall*Finish_Push)(
/*10938*/ AsyncIPipeLong*This);
/*10940*/ 
/*10941*/ }AsyncIPipeLongVtbl;
/*10943*/ struct AsyncIPipeLong
/*10944*/ {
/*10945*/ struct AsyncIPipeLongVtbl*lpVtbl;
/*10946*/ };
/*10993*/ extern const IID IID_IPipeDouble;
/*11014*/ typedef struct IPipeDoubleVtbl
/*11015*/ {
/*11016*/ 
/*11018*/ HRESULT(__stdcall*QueryInterface)(
/*11019*/ IPipeDouble*This,
/*11020*/ const IID*const riid,
/*11022*/ void**ppvObject);
/*11024*/ ULONG(__stdcall*AddRef)(
/*11025*/ IPipeDouble*This);
/*11027*/ ULONG(__stdcall*Release)(
/*11028*/ IPipeDouble*This);
/*11030*/ HRESULT(__stdcall*Pull)(
/*11031*/ IPipeDouble*This,
/*11032*/ DOUBLE*buf,
/*11033*/ ULONG cRequest,
/*11034*/ ULONG*pcReturned);
/*11036*/ HRESULT(__stdcall*Push)(
/*11037*/ IPipeDouble*This,
/*11038*/ DOUBLE*buf,
/*11039*/ ULONG cSent);
/*11041*/ 
/*11042*/ }IPipeDoubleVtbl;
/*11044*/ struct IPipeDouble
/*11045*/ {
/*11046*/ struct IPipeDoubleVtbl*lpVtbl;
/*11047*/ };
/*11088*/ extern const IID IID_AsyncIPipeDouble;
/*11113*/ typedef struct AsyncIPipeDoubleVtbl
/*11114*/ {
/*11115*/ 
/*11117*/ HRESULT(__stdcall*QueryInterface)(
/*11118*/ AsyncIPipeDouble*This,
/*11119*/ const IID*const riid,
/*11121*/ void**ppvObject);
/*11123*/ ULONG(__stdcall*AddRef)(
/*11124*/ AsyncIPipeDouble*This);
/*11126*/ ULONG(__stdcall*Release)(
/*11127*/ AsyncIPipeDouble*This);
/*11129*/ HRESULT(__stdcall*Begin_Pull)(
/*11130*/ AsyncIPipeDouble*This,
/*11131*/ ULONG cRequest);
/*11133*/ HRESULT(__stdcall*Finish_Pull)(
/*11134*/ AsyncIPipeDouble*This,
/*11135*/ DOUBLE*buf,
/*11136*/ ULONG*pcReturned);
/*11138*/ HRESULT(__stdcall*Begin_Push)(
/*11139*/ AsyncIPipeDouble*This,
/*11140*/ DOUBLE*buf,
/*11141*/ ULONG cSent);
/*11143*/ HRESULT(__stdcall*Finish_Push)(
/*11144*/ AsyncIPipeDouble*This);
/*11146*/ 
/*11147*/ }AsyncIPipeDoubleVtbl;
/*11149*/ struct AsyncIPipeDouble
/*11150*/ {
/*11151*/ struct AsyncIPipeDoubleVtbl*lpVtbl;
/*11152*/ };
/*11199*/ extern const IID IID_IThumbnailExtractor;
/*11222*/ typedef struct IThumbnailExtractorVtbl
/*11223*/ {
/*11224*/ 
/*11226*/ HRESULT(__stdcall*QueryInterface)(
/*11227*/ IThumbnailExtractor*This,
/*11228*/ const IID*const riid,
/*11230*/ void**ppvObject);
/*11232*/ ULONG(__stdcall*AddRef)(
/*11233*/ IThumbnailExtractor*This);
/*11235*/ ULONG(__stdcall*Release)(
/*11236*/ IThumbnailExtractor*This);
/*11238*/ HRESULT(__stdcall*ExtractThumbnail)(
/*11239*/ IThumbnailExtractor*This,
/*11240*/ IStorage*pStg,
/*11241*/ ULONG ulLength,
/*11242*/ ULONG ulHeight,
/*11243*/ ULONG*pulOutputLength,
/*11244*/ ULONG*pulOutputHeight,
/*11245*/ HBITMAP*phOutputBitmap);
/*11247*/ HRESULT(__stdcall*OnFileUpdated)(
/*11248*/ IThumbnailExtractor*This,
/*11249*/ IStorage*pStg);
/*11251*/ 
/*11252*/ }IThumbnailExtractorVtbl;
/*11254*/ struct IThumbnailExtractor
/*11255*/ {
/*11256*/ struct IThumbnailExtractorVtbl*lpVtbl;
/*11257*/ };
/*11298*/ extern const IID IID_IDummyHICONIncluder;
/*11314*/ typedef struct IDummyHICONIncluderVtbl
/*11315*/ {
/*11316*/ 
/*11318*/ HRESULT(__stdcall*QueryInterface)(
/*11319*/ IDummyHICONIncluder*This,
/*11320*/ const IID*const riid,
/*11322*/ void**ppvObject);
/*11324*/ ULONG(__stdcall*AddRef)(
/*11325*/ IDummyHICONIncluder*This);
/*11327*/ ULONG(__stdcall*Release)(
/*11328*/ IDummyHICONIncluder*This);
/*11330*/ HRESULT(__stdcall*Dummy)(
/*11331*/ IDummyHICONIncluder*This,
/*11332*/ HICON h1,
/*11333*/ HDC h2);
/*11335*/ 
/*11336*/ }IDummyHICONIncluderVtbl;
/*11338*/ struct IDummyHICONIncluder
/*11339*/ {
/*11340*/ struct IDummyHICONIncluderVtbl*lpVtbl;
/*11341*/ };
/*11802*/ typedef
/*11803*/ enum tagApplicationType
/*11804*/ {ServerApplication=0,
/*11805*/ LibraryApplication=(ServerApplication+1)
/*11806*/ }ApplicationType;
/*11808*/ typedef
/*11809*/ enum tagShutdownType
/*11810*/ {IdleShutdown=0,
/*11811*/ ForcedShutdown=(IdleShutdown+1)
/*11812*/ }ShutdownType;
/*11816*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec;
/*11817*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec;
/*11826*/ extern const IID IID_IProcessLock;
/*11842*/ typedef struct IProcessLockVtbl
/*11843*/ {
/*11844*/ 
/*11846*/ HRESULT(__stdcall*QueryInterface)(
/*11847*/ IProcessLock*This,
/*11848*/ const IID*const riid,
/*11850*/ void**ppvObject);
/*11852*/ ULONG(__stdcall*AddRef)(
/*11853*/ IProcessLock*This);
/*11855*/ ULONG(__stdcall*Release)(
/*11856*/ IProcessLock*This);
/*11858*/ ULONG(__stdcall*AddRefOnProcess)(
/*11859*/ IProcessLock*This);
/*11861*/ ULONG(__stdcall*ReleaseRefOnProcess)(
/*11862*/ IProcessLock*This);
/*11864*/ 
/*11865*/ }IProcessLockVtbl;
/*11867*/ struct IProcessLock
/*11868*/ {
/*11869*/ struct IProcessLockVtbl*lpVtbl;
/*11870*/ };
/*11911*/ extern const IID IID_ISurrogateService;
/*11941*/ typedef struct ISurrogateServiceVtbl
/*11942*/ {
/*11943*/ 
/*11945*/ HRESULT(__stdcall*QueryInterface)(
/*11946*/ ISurrogateService*This,
/*11947*/ const IID*const riid,
/*11949*/ void**ppvObject);
/*11951*/ ULONG(__stdcall*AddRef)(
/*11952*/ ISurrogateService*This);
/*11954*/ ULONG(__stdcall*Release)(
/*11955*/ ISurrogateService*This);
/*11957*/ HRESULT(__stdcall*Init)(
/*11958*/ ISurrogateService*This,
/*11959*/ const GUID*const rguidProcessID,
/*11960*/ IProcessLock*pProcessLock,
/*11961*/ BOOL*pfApplicationAware);
/*11963*/ HRESULT(__stdcall*ApplicationLaunch)(
/*11964*/ ISurrogateService*This,
/*11965*/ const GUID*const rguidApplID,
/*11966*/ ApplicationType appType);
/*11968*/ HRESULT(__stdcall*ApplicationFree)(
/*11969*/ ISurrogateService*This,
/*11970*/ const GUID*const rguidApplID);
/*11972*/ HRESULT(__stdcall*CatalogRefresh)(
/*11973*/ ISurrogateService*This,
/*11974*/ ULONG ulReserved);
/*11976*/ HRESULT(__stdcall*ProcessShutdown)(
/*11977*/ ISurrogateService*This,
/*11978*/ ShutdownType shutdownType);
/*11980*/ 
/*11981*/ }ISurrogateServiceVtbl;
/*11983*/ struct ISurrogateService
/*11984*/ {
/*11985*/ struct ISurrogateServiceVtbl*lpVtbl;
/*11986*/ };
/*12032*/ typedef
/*12033*/ enum _APTTYPE
/*12034*/ {APTTYPE_CURRENT=-1,
/*12035*/ APTTYPE_STA=0,
/*12036*/ APTTYPE_MTA=1,
/*12037*/ APTTYPE_NA=2,
/*12038*/ APTTYPE_MAINSTA=3
/*12039*/ }APTTYPE;
/*12041*/ typedef
/*12042*/ enum _THDTYPE
/*12043*/ {THDTYPE_BLOCKMESSAGES=0,
/*12044*/ THDTYPE_PROCESSMESSAGES=1
/*12045*/ }THDTYPE;
/*12047*/ typedef DWORD APARTMENTID;
/*12051*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec;
/*12052*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec;
/*12061*/ extern const IID IID_IComThreadingInfo;
/*12085*/ typedef struct IComThreadingInfoVtbl
/*12086*/ {
/*12087*/ 
/*12089*/ HRESULT(__stdcall*QueryInterface)(
/*12090*/ IComThreadingInfo*This,
/*12091*/ const IID*const riid,
/*12093*/ void**ppvObject);
/*12095*/ ULONG(__stdcall*AddRef)(
/*12096*/ IComThreadingInfo*This);
/*12098*/ ULONG(__stdcall*Release)(
/*12099*/ IComThreadingInfo*This);
/*12101*/ HRESULT(__stdcall*GetCurrentApartmentType)(
/*12102*/ IComThreadingInfo*This,
/*12103*/ APTTYPE*pAptType);
/*12105*/ HRESULT(__stdcall*GetCurrentThreadType)(
/*12106*/ IComThreadingInfo*This,
/*12107*/ THDTYPE*pThreadType);
/*12109*/ HRESULT(__stdcall*GetCurrentLogicalThreadId)(
/*12110*/ IComThreadingInfo*This,
/*12111*/ GUID*pguidLogicalThreadId);
/*12113*/ HRESULT(__stdcall*SetCurrentLogicalThreadId)(
/*12114*/ IComThreadingInfo*This,
/*12115*/ const GUID*const rguid);
/*12117*/ 
/*12118*/ }IComThreadingInfoVtbl;
/*12120*/ struct IComThreadingInfo
/*12121*/ {
/*12122*/ struct IComThreadingInfoVtbl*lpVtbl;
/*12123*/ };
/*12170*/ extern const IID IID_IProcessInitControl;
/*12185*/ typedef struct IProcessInitControlVtbl
/*12186*/ {
/*12187*/ 
/*12189*/ HRESULT(__stdcall*QueryInterface)(
/*12190*/ IProcessInitControl*This,
/*12191*/ const IID*const riid,
/*12193*/ void**ppvObject);
/*12195*/ ULONG(__stdcall*AddRef)(
/*12196*/ IProcessInitControl*This);
/*12198*/ ULONG(__stdcall*Release)(
/*12199*/ IProcessInitControl*This);
/*12201*/ HRESULT(__stdcall*ResetInitializerTimeout)(
/*12202*/ IProcessInitControl*This,
/*12203*/ DWORD dwSecondsRemaining);
/*12205*/ 
/*12206*/ }IProcessInitControlVtbl;
/*12208*/ struct IProcessInitControl
/*12209*/ {
/*12210*/ struct IProcessInitControlVtbl*lpVtbl;
/*12211*/ };
/*12381*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec;
/*12382*/ extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec;
/*12386*/ unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long*,unsigned long,ASYNC_STGMEDIUM*);
/*12387*/ unsigned char*ASYNC_STGMEDIUM_UserMarshal(unsigned long*,unsigned char*,ASYNC_STGMEDIUM*);
/*12388*/ unsigned char*ASYNC_STGMEDIUM_UserUnmarshal(unsigned long*,unsigned char*,ASYNC_STGMEDIUM*);
/*12389*/ void ASYNC_STGMEDIUM_UserFree(unsigned long*,ASYNC_STGMEDIUM*);
/*12391*/ unsigned long CLIPFORMAT_UserSize(unsigned long*,unsigned long,CLIPFORMAT*);
/*12392*/ unsigned char*CLIPFORMAT_UserMarshal(unsigned long*,unsigned char*,CLIPFORMAT*);
/*12393*/ unsigned char*CLIPFORMAT_UserUnmarshal(unsigned long*,unsigned char*,CLIPFORMAT*);
/*12394*/ void CLIPFORMAT_UserFree(unsigned long*,CLIPFORMAT*);
/*12396*/ unsigned long FLAG_STGMEDIUM_UserSize(unsigned long*,unsigned long,FLAG_STGMEDIUM*);
/*12397*/ unsigned char*FLAG_STGMEDIUM_UserMarshal(unsigned long*,unsigned char*,FLAG_STGMEDIUM*);
/*12398*/ unsigned char*FLAG_STGMEDIUM_UserUnmarshal(unsigned long*,unsigned char*,FLAG_STGMEDIUM*);
/*12399*/ void FLAG_STGMEDIUM_UserFree(unsigned long*,FLAG_STGMEDIUM*);
/*12401*/ unsigned long HBITMAP_UserSize(unsigned long*,unsigned long,HBITMAP*);
/*12402*/ unsigned char*HBITMAP_UserMarshal(unsigned long*,unsigned char*,HBITMAP*);
/*12403*/ unsigned char*HBITMAP_UserUnmarshal(unsigned long*,unsigned char*,HBITMAP*);
/*12404*/ void HBITMAP_UserFree(unsigned long*,HBITMAP*);
/*12406*/ unsigned long HDC_UserSize(unsigned long*,unsigned long,HDC*);
/*12407*/ unsigned char*HDC_UserMarshal(unsigned long*,unsigned char*,HDC*);
/*12408*/ unsigned char*HDC_UserUnmarshal(unsigned long*,unsigned char*,HDC*);
/*12409*/ void HDC_UserFree(unsigned long*,HDC*);
/*12411*/ unsigned long HICON_UserSize(unsigned long*,unsigned long,HICON*);
/*12412*/ unsigned char*HICON_UserMarshal(unsigned long*,unsigned char*,HICON*);
/*12413*/ unsigned char*HICON_UserUnmarshal(unsigned long*,unsigned char*,HICON*);
/*12414*/ void HICON_UserFree(unsigned long*,HICON*);
/*12416*/ unsigned long SNB_UserSize(unsigned long*,unsigned long,SNB*);
/*12417*/ unsigned char*SNB_UserMarshal(unsigned long*,unsigned char*,SNB*);
/*12418*/ unsigned char*SNB_UserUnmarshal(unsigned long*,unsigned char*,SNB*);
/*12419*/ void SNB_UserFree(unsigned long*,SNB*);
/*12421*/ unsigned long STGMEDIUM_UserSize(unsigned long*,unsigned long,STGMEDIUM*);
/*12422*/ unsigned char*STGMEDIUM_UserMarshal(unsigned long*,unsigned char*,STGMEDIUM*);
/*12423*/ unsigned char*STGMEDIUM_UserUnmarshal(unsigned long*,unsigned char*,STGMEDIUM*);
/*12424*/ void STGMEDIUM_UserFree(unsigned long*,STGMEDIUM*);
/*12426*/ unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long*,unsigned long,ASYNC_STGMEDIUM*);
/*12427*/ unsigned char*ASYNC_STGMEDIUM_UserMarshal64(unsigned long*,unsigned char*,ASYNC_STGMEDIUM*);
/*12428*/ unsigned char*ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long*,unsigned char*,ASYNC_STGMEDIUM*);
/*12429*/ void ASYNC_STGMEDIUM_UserFree64(unsigned long*,ASYNC_STGMEDIUM*);
/*12431*/ unsigned long CLIPFORMAT_UserSize64(unsigned long*,unsigned long,CLIPFORMAT*);
/*12432*/ unsigned char*CLIPFORMAT_UserMarshal64(unsigned long*,unsigned char*,CLIPFORMAT*);
/*12433*/ unsigned char*CLIPFORMAT_UserUnmarshal64(unsigned long*,unsigned char*,CLIPFORMAT*);
/*12434*/ void CLIPFORMAT_UserFree64(unsigned long*,CLIPFORMAT*);
/*12436*/ unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long*,unsigned long,FLAG_STGMEDIUM*);
/*12437*/ unsigned char*FLAG_STGMEDIUM_UserMarshal64(unsigned long*,unsigned char*,FLAG_STGMEDIUM*);
/*12438*/ unsigned char*FLAG_STGMEDIUM_UserUnmarshal64(unsigned long*,unsigned char*,FLAG_STGMEDIUM*);
/*12439*/ void FLAG_STGMEDIUM_UserFree64(unsigned long*,FLAG_STGMEDIUM*);
/*12441*/ unsigned long HBITMAP_UserSize64(unsigned long*,unsigned long,HBITMAP*);
/*12442*/ unsigned char*HBITMAP_UserMarshal64(unsigned long*,unsigned char*,HBITMAP*);
/*12443*/ unsigned char*HBITMAP_UserUnmarshal64(unsigned long*,unsigned char*,HBITMAP*);
/*12444*/ void HBITMAP_UserFree64(unsigned long*,HBITMAP*);
/*12446*/ unsigned long HDC_UserSize64(unsigned long*,unsigned long,HDC*);
/*12447*/ unsigned char*HDC_UserMarshal64(unsigned long*,unsigned char*,HDC*);
/*12448*/ unsigned char*HDC_UserUnmarshal64(unsigned long*,unsigned char*,HDC*);
/*12449*/ void HDC_UserFree64(unsigned long*,HDC*);
/*12451*/ unsigned long HICON_UserSize64(unsigned long*,unsigned long,HICON*);
/*12452*/ unsigned char*HICON_UserMarshal64(unsigned long*,unsigned char*,HICON*);
/*12453*/ unsigned char*HICON_UserUnmarshal64(unsigned long*,unsigned char*,HICON*);
/*12454*/ void HICON_UserFree64(unsigned long*,HICON*);
/*12456*/ unsigned long SNB_UserSize64(unsigned long*,unsigned long,SNB*);
/*12457*/ unsigned char*SNB_UserMarshal64(unsigned long*,unsigned char*,SNB*);
/*12458*/ unsigned char*SNB_UserUnmarshal64(unsigned long*,unsigned char*,SNB*);
/*12459*/ void SNB_UserFree64(unsigned long*,SNB*);
/*12461*/ unsigned long STGMEDIUM_UserSize64(unsigned long*,unsigned long,STGMEDIUM*);
/*12462*/ unsigned char*STGMEDIUM_UserMarshal64(unsigned long*,unsigned char*,STGMEDIUM*);
/*12463*/ unsigned char*STGMEDIUM_UserUnmarshal64(unsigned long*,unsigned char*,STGMEDIUM*);
/*12464*/ void STGMEDIUM_UserFree64(unsigned long*,STGMEDIUM*);
/*12466*/ HRESULT __stdcall IEnumUnknown_Next_Proxy(
/*12467*/ IEnumUnknown*This,
/*12468*/ ULONG celt,
/*12469*/ IUnknown**rgelt,
/*12470*/ ULONG*pceltFetched);
/*12473*/ HRESULT __stdcall IEnumUnknown_Next_Stub(
/*12474*/ IEnumUnknown*This,
/*12475*/ ULONG celt,
/*12476*/ IUnknown**rgelt,
/*12477*/ ULONG*pceltFetched);
/*12479*/ HRESULT __stdcall IBindCtx_SetBindOptions_Proxy(
/*12480*/ IBindCtx*This,
/*12481*/ BIND_OPTS*pbindopts);
/*12484*/ HRESULT __stdcall IBindCtx_SetBindOptions_Stub(
/*12485*/ IBindCtx*This,
/*12486*/ BIND_OPTS2*pbindopts);
/*12488*/ HRESULT __stdcall IBindCtx_GetBindOptions_Proxy(
/*12489*/ IBindCtx*This,
/*12490*/ BIND_OPTS*pbindopts);
/*12493*/ HRESULT __stdcall IBindCtx_GetBindOptions_Stub(
/*12494*/ IBindCtx*This,
/*12495*/ BIND_OPTS2*pbindopts);
/*12497*/ HRESULT __stdcall IEnumMoniker_Next_Proxy(
/*12498*/ IEnumMoniker*This,
/*12499*/ ULONG celt,
/*12500*/ IMoniker**rgelt,
/*12501*/ ULONG*pceltFetched);
/*12504*/ HRESULT __stdcall IEnumMoniker_Next_Stub(
/*12505*/ IEnumMoniker*This,
/*12506*/ ULONG celt,
/*12507*/ IMoniker**rgelt,
/*12508*/ ULONG*pceltFetched);
/*12510*/ BOOL __stdcall IRunnableObject_IsRunning_Proxy(
/*12511*/ IRunnableObject*This);
/*12514*/ HRESULT __stdcall IRunnableObject_IsRunning_Stub(
/*12515*/ IRunnableObject*This);
/*12517*/ HRESULT __stdcall IMoniker_BindToObject_Proxy(
/*12518*/ IMoniker*This,
/*12519*/ IBindCtx*pbc,
/*12520*/ IMoniker*pmkToLeft,
/*12521*/ const IID*const riidResult,
/*12522*/ void**ppvResult);
/*12525*/ HRESULT __stdcall IMoniker_BindToObject_Stub(
/*12526*/ IMoniker*This,
/*12527*/ IBindCtx*pbc,
/*12528*/ IMoniker*pmkToLeft,
/*12529*/ const IID*const riidResult,
/*12530*/ IUnknown**ppvResult);
/*12532*/ HRESULT __stdcall IMoniker_BindToStorage_Proxy(
/*12533*/ IMoniker*This,
/*12534*/ IBindCtx*pbc,
/*12535*/ IMoniker*pmkToLeft,
/*12536*/ const IID*const riid,
/*12537*/ void**ppvObj);
/*12540*/ HRESULT __stdcall IMoniker_BindToStorage_Stub(
/*12541*/ IMoniker*This,
/*12542*/ IBindCtx*pbc,
/*12543*/ IMoniker*pmkToLeft,
/*12544*/ const IID*const riid,
/*12545*/ IUnknown**ppvObj);
/*12547*/ HRESULT __stdcall IEnumString_Next_Proxy(
/*12548*/ IEnumString*This,
/*12549*/ ULONG celt,
/*12551*/ LPOLESTR*rgelt,
/*12552*/ ULONG*pceltFetched);
/*12555*/ HRESULT __stdcall IEnumString_Next_Stub(
/*12556*/ IEnumString*This,
/*12557*/ ULONG celt,
/*12558*/ LPOLESTR*rgelt,
/*12559*/ ULONG*pceltFetched);
/*12561*/ HRESULT __stdcall ISequentialStream_Read_Proxy(
/*12562*/ ISequentialStream*This,
/*12563*/ void*pv,
/*12564*/ ULONG cb,
/*12565*/ ULONG*pcbRead);
/*12568*/ HRESULT __stdcall ISequentialStream_Read_Stub(
/*12569*/ ISequentialStream*This,
/*12570*/ byte*pv,
/*12571*/ ULONG cb,
/*12572*/ ULONG*pcbRead);
/*12574*/ HRESULT __stdcall ISequentialStream_Write_Proxy(
/*12575*/ ISequentialStream*This,
/*12576*/ const void*pv,
/*12577*/ ULONG cb,
/*12578*/ ULONG*pcbWritten);
/*12581*/ HRESULT __stdcall ISequentialStream_Write_Stub(
/*12582*/ ISequentialStream*This,
/*12583*/ const byte*pv,
/*12584*/ ULONG cb,
/*12585*/ ULONG*pcbWritten);
/*12587*/ HRESULT __stdcall IStream_Seek_Proxy(
/*12588*/ IStream*This,
/*12589*/ LARGE_INTEGER dlibMove,
/*12590*/ DWORD dwOrigin,
/*12591*/ ULARGE_INTEGER*plibNewPosition);
/*12594*/ HRESULT __stdcall IStream_Seek_Stub(
/*12595*/ IStream*This,
/*12596*/ LARGE_INTEGER dlibMove,
/*12597*/ DWORD dwOrigin,
/*12598*/ ULARGE_INTEGER*plibNewPosition);
/*12600*/ HRESULT __stdcall IStream_CopyTo_Proxy(
/*12601*/ IStream*This,
/*12602*/ IStream*pstm,
/*12603*/ ULARGE_INTEGER cb,
/*12604*/ ULARGE_INTEGER*pcbRead,
/*12605*/ ULARGE_INTEGER*pcbWritten);
/*12608*/ HRESULT __stdcall IStream_CopyTo_Stub(
/*12609*/ IStream*This,
/*12610*/ IStream*pstm,
/*12611*/ ULARGE_INTEGER cb,
/*12612*/ ULARGE_INTEGER*pcbRead,
/*12613*/ ULARGE_INTEGER*pcbWritten);
/*12615*/ HRESULT __stdcall IEnumSTATSTG_Next_Proxy(
/*12616*/ IEnumSTATSTG*This,
/*12617*/ ULONG celt,
/*12618*/ STATSTG*rgelt,
/*12619*/ ULONG*pceltFetched);
/*12622*/ HRESULT __stdcall IEnumSTATSTG_Next_Stub(
/*12623*/ IEnumSTATSTG*This,
/*12624*/ ULONG celt,
/*12625*/ STATSTG*rgelt,
/*12626*/ ULONG*pceltFetched);
/*12628*/ HRESULT __stdcall IStorage_OpenStream_Proxy(
/*12629*/ IStorage*This,
/*12630*/ const OLECHAR*pwcsName,
/*12631*/ void*reserved1,
/*12632*/ DWORD grfMode,
/*12633*/ DWORD reserved2,
/*12634*/ IStream**ppstm);
/*12637*/ HRESULT __stdcall IStorage_OpenStream_Stub(
/*12638*/ IStorage*This,
/*12639*/ const OLECHAR*pwcsName,
/*12640*/ unsigned long cbReserved1,
/*12641*/ byte*reserved1,
/*12642*/ DWORD grfMode,
/*12643*/ DWORD reserved2,
/*12644*/ IStream**ppstm);
/*12646*/ HRESULT __stdcall IStorage_CopyTo_Proxy(
/*12647*/ IStorage*This,
/*12648*/ DWORD ciidExclude,
/*12649*/ const IID*rgiidExclude,
/*12650*/ SNB snbExclude,
/*12651*/ IStorage*pstgDest);
/*12654*/ HRESULT __stdcall IStorage_CopyTo_Stub(
/*12655*/ IStorage*This,
/*12656*/ DWORD ciidExclude,
/*12657*/ const IID*rgiidExclude,
/*12658*/ SNB snbExclude,
/*12659*/ IStorage*pstgDest);
/*12661*/ HRESULT __stdcall IStorage_EnumElements_Proxy(
/*12662*/ IStorage*This,
/*12663*/ DWORD reserved1,
/*12664*/ void*reserved2,
/*12665*/ DWORD reserved3,
/*12666*/ IEnumSTATSTG**ppenum);
/*12669*/ HRESULT __stdcall IStorage_EnumElements_Stub(
/*12670*/ IStorage*This,
/*12671*/ DWORD reserved1,
/*12672*/ unsigned long cbReserved2,
/*12673*/ byte*reserved2,
/*12674*/ DWORD reserved3,
/*12675*/ IEnumSTATSTG**ppenum);
/*12677*/ HRESULT __stdcall ILockBytes_ReadAt_Proxy(
/*12678*/ ILockBytes*This,
/*12679*/ ULARGE_INTEGER ulOffset,
/*12680*/ void*pv,
/*12681*/ ULONG cb,
/*12682*/ ULONG*pcbRead);
/*12685*/ HRESULT __stdcall ILockBytes_ReadAt_Stub(
/*12686*/ ILockBytes*This,
/*12687*/ ULARGE_INTEGER ulOffset,
/*12688*/ byte*pv,
/*12689*/ ULONG cb,
/*12690*/ ULONG*pcbRead);
/*12692*/ HRESULT __stdcall ILockBytes_WriteAt_Proxy(
/*12693*/ ILockBytes*This,
/*12694*/ ULARGE_INTEGER ulOffset,
/*12695*/ const void*pv,
/*12696*/ ULONG cb,
/*12697*/ ULONG*pcbWritten);
/*12700*/ HRESULT __stdcall ILockBytes_WriteAt_Stub(
/*12701*/ ILockBytes*This,
/*12702*/ ULARGE_INTEGER ulOffset,
/*12703*/ const byte*pv,
/*12704*/ ULONG cb,
/*12705*/ ULONG*pcbWritten);
/*12707*/ HRESULT __stdcall IEnumFORMATETC_Next_Proxy(
/*12708*/ IEnumFORMATETC*This,
/*12709*/ ULONG celt,
/*12710*/ FORMATETC*rgelt,
/*12711*/ ULONG*pceltFetched);
/*12714*/ HRESULT __stdcall IEnumFORMATETC_Next_Stub(
/*12715*/ IEnumFORMATETC*This,
/*12716*/ ULONG celt,
/*12717*/ FORMATETC*rgelt,
/*12718*/ ULONG*pceltFetched);
/*12720*/ HRESULT __stdcall IEnumSTATDATA_Next_Proxy(
/*12721*/ IEnumSTATDATA*This,
/*12722*/ ULONG celt,
/*12723*/ STATDATA*rgelt,
/*12724*/ ULONG*pceltFetched);
/*12727*/ HRESULT __stdcall IEnumSTATDATA_Next_Stub(
/*12728*/ IEnumSTATDATA*This,
/*12729*/ ULONG celt,
/*12730*/ STATDATA*rgelt,
/*12731*/ ULONG*pceltFetched);
/*12733*/ void __stdcall IAdviseSink_OnDataChange_Proxy(
/*12734*/ IAdviseSink*This,
/*12735*/ FORMATETC*pFormatetc,
/*12736*/ STGMEDIUM*pStgmed);
/*12739*/ HRESULT __stdcall IAdviseSink_OnDataChange_Stub(
/*12740*/ IAdviseSink*This,
/*12741*/ FORMATETC*pFormatetc,
/*12742*/ ASYNC_STGMEDIUM*pStgmed);
/*12744*/ void __stdcall IAdviseSink_OnViewChange_Proxy(
/*12745*/ IAdviseSink*This,
/*12746*/ DWORD dwAspect,
/*12747*/ LONG lindex);
/*12750*/ HRESULT __stdcall IAdviseSink_OnViewChange_Stub(
/*12751*/ IAdviseSink*This,
/*12752*/ DWORD dwAspect,
/*12753*/ LONG lindex);
/*12755*/ void __stdcall IAdviseSink_OnRename_Proxy(
/*12756*/ IAdviseSink*This,
/*12757*/ IMoniker*pmk);
/*12760*/ HRESULT __stdcall IAdviseSink_OnRename_Stub(
/*12761*/ IAdviseSink*This,
/*12762*/ IMoniker*pmk);
/*12764*/ void __stdcall IAdviseSink_OnSave_Proxy(
/*12765*/ IAdviseSink*This);
/*12768*/ HRESULT __stdcall IAdviseSink_OnSave_Stub(
/*12769*/ IAdviseSink*This);
/*12771*/ void __stdcall IAdviseSink_OnClose_Proxy(
/*12772*/ IAdviseSink*This);
/*12775*/ HRESULT __stdcall IAdviseSink_OnClose_Stub(
/*12776*/ IAdviseSink*This);
/*12778*/ void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy(
/*12779*/ IAdviseSink2*This,
/*12780*/ IMoniker*pmk);
/*12783*/ HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub(
/*12784*/ IAdviseSink2*This,
/*12785*/ IMoniker*pmk);
/*12787*/ HRESULT __stdcall IDataObject_GetData_Proxy(
/*12788*/ IDataObject*This,
/*12789*/ FORMATETC*pformatetcIn,
/*12790*/ STGMEDIUM*pmedium);
/*12793*/ HRESULT __stdcall IDataObject_GetData_Stub(
/*12794*/ IDataObject*This,
/*12795*/ FORMATETC*pformatetcIn,
/*12796*/ STGMEDIUM*pRemoteMedium);
/*12798*/ HRESULT __stdcall IDataObject_GetDataHere_Proxy(
/*12799*/ IDataObject*This,
/*12800*/ FORMATETC*pformatetc,
/*12801*/ STGMEDIUM*pmedium);
/*12804*/ HRESULT __stdcall IDataObject_GetDataHere_Stub(
/*12805*/ IDataObject*This,
/*12806*/ FORMATETC*pformatetc,
/*12807*/ STGMEDIUM*pRemoteMedium);
/*12809*/ HRESULT __stdcall IDataObject_SetData_Proxy(
/*12810*/ IDataObject*This,
/*12811*/ FORMATETC*pformatetc,
/*12812*/ STGMEDIUM*pmedium,
/*12813*/ BOOL fRelease);
/*12816*/ HRESULT __stdcall IDataObject_SetData_Stub(
/*12817*/ IDataObject*This,
/*12818*/ FORMATETC*pformatetc,
/*12819*/ FLAG_STGMEDIUM*pmedium,
/*12820*/ BOOL fRelease);
/*12822*/ HRESULT __stdcall IFillLockBytes_FillAppend_Proxy(
/*12823*/ IFillLockBytes*This,
/*12824*/ const void*pv,
/*12825*/ ULONG cb,
/*12826*/ ULONG*pcbWritten);
/*12829*/ HRESULT __stdcall IFillLockBytes_FillAppend_Stub(
/*12830*/ IFillLockBytes*This,
/*12831*/ const byte*pv,
/*12832*/ ULONG cb,
/*12833*/ ULONG*pcbWritten);
/*12835*/ HRESULT __stdcall IFillLockBytes_FillAt_Proxy(
/*12836*/ IFillLockBytes*This,
/*12837*/ ULARGE_INTEGER ulOffset,
/*12838*/ const void*pv,
/*12839*/ ULONG cb,
/*12840*/ ULONG*pcbWritten);
/*12843*/ HRESULT __stdcall IFillLockBytes_FillAt_Stub(
/*12844*/ IFillLockBytes*This,
/*12845*/ ULARGE_INTEGER ulOffset,
/*12846*/ const byte*pv,
/*12847*/ ULONG cb,
/*12848*/ ULONG*pcbWritten);
/*12850*/ void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy(
/*12851*/ AsyncIAdviseSink*This,
/*12852*/ FORMATETC*pFormatetc,
/*12853*/ STGMEDIUM*pStgmed);
/*12856*/ HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub(
/*12857*/ AsyncIAdviseSink*This,
/*12858*/ FORMATETC*pFormatetc,
/*12859*/ ASYNC_STGMEDIUM*pStgmed);
/*12861*/ void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy(
/*12862*/ AsyncIAdviseSink*This);
/*12865*/ HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub(
/*12866*/ AsyncIAdviseSink*This);
/*12868*/ void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy(
/*12869*/ AsyncIAdviseSink*This,
/*12870*/ DWORD dwAspect,
/*12871*/ LONG lindex);
/*12874*/ HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub(
/*12875*/ AsyncIAdviseSink*This,
/*12876*/ DWORD dwAspect,
/*12877*/ LONG lindex);
/*12879*/ void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy(
/*12880*/ AsyncIAdviseSink*This);
/*12883*/ HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub(
/*12884*/ AsyncIAdviseSink*This);
/*12886*/ void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy(
/*12887*/ AsyncIAdviseSink*This,
/*12888*/ IMoniker*pmk);
/*12891*/ HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub(
/*12892*/ AsyncIAdviseSink*This,
/*12893*/ IMoniker*pmk);
/*12895*/ void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy(
/*12896*/ AsyncIAdviseSink*This);
/*12899*/ HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub(
/*12900*/ AsyncIAdviseSink*This);
/*12902*/ void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy(
/*12903*/ AsyncIAdviseSink*This);
/*12906*/ HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub(
/*12907*/ AsyncIAdviseSink*This);
/*12909*/ void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy(
/*12910*/ AsyncIAdviseSink*This);
/*12913*/ HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub(
/*12914*/ AsyncIAdviseSink*This);
/*12916*/ void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy(
/*12917*/ AsyncIAdviseSink*This);
/*12920*/ HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub(
/*12921*/ AsyncIAdviseSink*This);
/*12923*/ void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy(
/*12924*/ AsyncIAdviseSink*This);
/*12927*/ HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub(
/*12928*/ AsyncIAdviseSink*This);
/*12930*/ void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
/*12931*/ AsyncIAdviseSink2*This,
/*12932*/ IMoniker*pmk);
/*12935*/ HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
/*12936*/ AsyncIAdviseSink2*This,
/*12937*/ IMoniker*pmk);
/*12939*/ void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
/*12940*/ AsyncIAdviseSink2*This);
/*12943*/ HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
/*12944*/ AsyncIAdviseSink2*This);
/*28*/ extern const IID GUID_NULL;
/*31*/ extern const IID CATID_MARSHALER;
/*34*/ extern const IID IID_IRpcChannel;
/*35*/ extern const IID IID_IRpcStub;
/*36*/ extern const IID IID_IStubManager;
/*37*/ extern const IID IID_IRpcProxy;
/*38*/ extern const IID IID_IProxyManager;
/*39*/ extern const IID IID_IPSFactory;
/*40*/ extern const IID IID_IInternalMoniker;
/*41*/ extern const IID IID_IDfReserved1;
/*42*/ extern const IID IID_IDfReserved2;
/*43*/ extern const IID IID_IDfReserved3;
/*44*/ extern const CLSID CLSID_StdMarshal;
/*45*/ extern const CLSID CLSID_AggStdMarshal;
/*46*/ extern const CLSID CLSID_StdAsyncActManager;
/*47*/ extern const IID IID_IStub;
/*48*/ extern const IID IID_IProxy;
/*49*/ extern const IID IID_IEnumGeneric;
/*50*/ extern const IID IID_IEnumHolder;
/*51*/ extern const IID IID_IEnumCallback;
/*52*/ extern const IID IID_IOleManager;
/*53*/ extern const IID IID_IOlePresObj;
/*54*/ extern const IID IID_IDebug;
/*55*/ extern const IID IID_IDebugStream;
/*56*/ extern const CLSID CLSID_PSGenObject;
/*57*/ extern const CLSID CLSID_PSClientSite;
/*58*/ extern const CLSID CLSID_PSClassObject;
/*59*/ extern const CLSID CLSID_PSInPlaceActive;
/*60*/ extern const CLSID CLSID_PSInPlaceFrame;
/*61*/ extern const CLSID CLSID_PSDragDrop;
/*62*/ extern const CLSID CLSID_PSBindCtx;
/*63*/ extern const CLSID CLSID_PSEnumerators;
/*64*/ extern const CLSID CLSID_StaticMetafile;
/*65*/ extern const CLSID CLSID_StaticDib;
/*66*/ extern const CLSID CID_CDfsVolume;
/*67*/ extern const CLSID CLSID_DCOMAccessControl;
/*68*/ extern const CLSID CLSID_GlobalOptions;
/*69*/ extern const CLSID CLSID_StdGlobalInterfaceTable;
/*70*/ extern const CLSID CLSID_ComBinding;
/*71*/ extern const CLSID CLSID_StdEvent;
/*72*/ extern const CLSID CLSID_ManualResetEvent;
/*73*/ extern const CLSID CLSID_SynchronizeContainer;
/*76*/ extern const CLSID CLSID_AddrControl;
/*80*/ extern const CLSID CLSID_ContextSwitcher;
/*92*/ extern const CLSID CLSID_CCDFormKrnl;
/*93*/ extern const CLSID CLSID_CCDPropertyPage;
/*94*/ extern const CLSID CLSID_CCDFormDialog;
/*99*/ extern const CLSID CLSID_CCDCommandButton;
/*100*/ extern const CLSID CLSID_CCDComboBox;
/*101*/ extern const CLSID CLSID_CCDTextBox;
/*102*/ extern const CLSID CLSID_CCDCheckBox;
/*103*/ extern const CLSID CLSID_CCDLabel;
/*104*/ extern const CLSID CLSID_CCDOptionButton;
/*105*/ extern const CLSID CLSID_CCDListBox;
/*106*/ extern const CLSID CLSID_CCDScrollBar;
/*107*/ extern const CLSID CLSID_CCDGroupBox;
/*112*/ extern const CLSID CLSID_CCDGeneralPropertyPage;
/*113*/ extern const CLSID CLSID_CCDGenericPropertyPage;
/*114*/ extern const CLSID CLSID_CCDFontPropertyPage;
/*115*/ extern const CLSID CLSID_CCDColorPropertyPage;
/*116*/ extern const CLSID CLSID_CCDLabelPropertyPage;
/*117*/ extern const CLSID CLSID_CCDCheckBoxPropertyPage;
/*118*/ extern const CLSID CLSID_CCDTextBoxPropertyPage;
/*119*/ extern const CLSID CLSID_CCDOptionButtonPropertyPage;
/*120*/ extern const CLSID CLSID_CCDListBoxPropertyPage;
/*121*/ extern const CLSID CLSID_CCDCommandButtonPropertyPage;
/*122*/ extern const CLSID CLSID_CCDComboBoxPropertyPage;
/*123*/ extern const CLSID CLSID_CCDScrollBarPropertyPage;
/*124*/ extern const CLSID CLSID_CCDGroupBoxPropertyPage;
/*125*/ extern const CLSID CLSID_CCDXObjectPropertyPage;
/*127*/ extern const CLSID CLSID_CStdPropertyFrame;
/*129*/ extern const CLSID CLSID_CFormPropertyPage;
/*130*/ extern const CLSID CLSID_CGridPropertyPage;
/*132*/ extern const CLSID CLSID_CWSJArticlePage;
/*133*/ extern const CLSID CLSID_CSystemPage;
/*135*/ extern const CLSID CLSID_IdentityUnmarshal;
/*136*/ extern const CLSID CLSID_InProcFreeMarshaler;
/*138*/ extern const CLSID CLSID_Picture_Metafile;
/*139*/ extern const CLSID CLSID_Picture_EnhMetafile;
/*140*/ extern const CLSID CLSID_Picture_Dib;
/*145*/ extern const GUID GUID_TRISTATE;
/*"objbase.h"461*/ typedef enum tagCOINIT
/*462*/ {
/*463*/ COINIT_APARTMENTTHREADED=0x2,
/*471*/ }COINIT;
/*479*/ extern DWORD __stdcall CoBuildVersion(void);
/*483*/ typ __inner_checkReturn extern HRESULT __stdcall CoInitialize(typ typ typ typ typ typ typ LPVOID pvReserved);
/*484*/ extern void __stdcall CoUninitialize(void);
/*485*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetMalloc(typ typ typ typ typ DWORD dwMemContext,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMALLOC typ*ppMalloc);
/*486*/ extern DWORD __stdcall CoGetCurrentProcess(void);
/*487*/ extern HRESULT __stdcall CoRegisterMallocSpy(typ typ typ typ typ LPMALLOCSPY pMallocSpy);
/*488*/ extern HRESULT __stdcall CoRevokeMallocSpy(void);
/*489*/ extern HRESULT __stdcall CoCreateStandardMalloc(typ typ typ typ typ DWORD memctx,typ typ typ typ typ typ typ typ typ typ typ typ typ typ IMalloc typ*typ*ppMalloc);
/*545*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetObjectContext(typ typ typ typ typ const IID*const riid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID typ*ppv);
/*549*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetClassObject(typ typ typ typ typ const IID*const rclsid,typ typ typ typ typ DWORD dwClsContext,typ typ typ typ typ typ typ LPVOID pvReserved,
/*550*/ typ typ typ typ typ const IID*const riid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID typ*ppv);
/*551*/ typ __inner_checkReturn extern HRESULT __stdcall CoRegisterClassObject(typ typ typ typ typ const IID*const rclsid,typ typ typ typ typ LPUNKNOWN pUnk,
/*552*/ typ typ typ typ typ DWORD dwClsContext,typ typ typ typ typ DWORD flags,typ typ typ typ typ LPDWORD lpdwRegister);
/*553*/ typ __inner_checkReturn extern HRESULT __stdcall CoRevokeClassObject(typ typ typ typ typ DWORD dwRegister);
/*554*/ typ __inner_checkReturn extern HRESULT __stdcall CoResumeClassObjects(void);
/*555*/ typ __inner_checkReturn extern HRESULT __stdcall CoSuspendClassObjects(void);
/*556*/ extern ULONG __stdcall CoAddRefServerProcess(void);
/*557*/ extern ULONG __stdcall CoReleaseServerProcess(void);
/*558*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetPSClsid(typ typ typ typ typ const IID*const riid,typ typ typ typ typ CLSID*pClsid);
/*559*/ typ __inner_checkReturn extern HRESULT __stdcall CoRegisterPSClsid(typ typ typ typ typ const IID*const riid,typ typ typ typ typ const IID*const rclsid);
/*562*/ typ __inner_checkReturn extern HRESULT __stdcall CoRegisterSurrogate(typ typ typ typ typ LPSURROGATE pSurrogate);
/*566*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetMarshalSizeMax(typ typ typ typ typ ULONG*pulSize,typ typ typ typ typ const IID*const riid,typ typ typ typ typ LPUNKNOWN pUnk,
/*567*/ typ typ typ typ typ DWORD dwDestContext,typ typ typ typ typ typ typ LPVOID pvDestContext,typ typ typ typ typ DWORD mshlflags);
/*568*/ typ __inner_checkReturn extern HRESULT __stdcall CoMarshalInterface(typ typ typ typ typ LPSTREAM pStm,typ typ typ typ typ const IID*const riid,typ typ typ typ typ LPUNKNOWN pUnk,
/*569*/ typ typ typ typ typ DWORD dwDestContext,typ typ typ typ typ typ typ LPVOID pvDestContext,typ typ typ typ typ DWORD mshlflags);
/*570*/ typ __inner_checkReturn extern HRESULT __stdcall CoUnmarshalInterface(typ typ typ typ typ LPSTREAM pStm,typ typ typ typ typ const IID*const riid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID typ*ppv);
/*571*/ extern HRESULT __stdcall CoMarshalHresult(typ typ typ typ typ LPSTREAM pstm,typ typ typ typ typ HRESULT hresult);
/*572*/ extern HRESULT __stdcall CoUnmarshalHresult(typ typ typ typ typ LPSTREAM pstm,typ typ typ typ typ HRESULT typ*phresult);
/*573*/ typ __inner_checkReturn extern HRESULT __stdcall CoReleaseMarshalData(typ typ typ typ typ LPSTREAM pStm);
/*574*/ typ __inner_checkReturn extern HRESULT __stdcall CoDisconnectObject(typ typ typ typ typ LPUNKNOWN pUnk,typ typ typ typ typ DWORD dwReserved);
/*575*/ typ __inner_checkReturn extern HRESULT __stdcall CoLockObjectExternal(typ typ typ typ typ LPUNKNOWN pUnk,typ typ typ typ typ BOOL fLock,typ typ typ typ typ BOOL fLastUnlockReleases);
/*576*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetStandardMarshal(typ typ typ typ typ const IID*const riid,typ typ typ typ typ LPUNKNOWN pUnk,
/*577*/ typ typ typ typ typ DWORD dwDestContext,typ typ typ typ typ typ typ LPVOID pvDestContext,typ typ typ typ typ DWORD mshlflags,
/*578*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMARSHAL typ*ppMarshal);
/*581*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetStdMarshalEx(typ typ typ typ typ LPUNKNOWN pUnkOuter,typ typ typ typ typ DWORD smexflags,
/*582*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPUNKNOWN typ*ppUnkInner);
/*585*/ typedef enum tagSTDMSHLFLAGS
/*586*/ {
/*587*/ SMEXF_SERVER=0x01,
/*588*/ SMEXF_HANDLER=0x02
/*589*/ }STDMSHLFLAGS;
/*592*/ extern BOOL __stdcall CoIsHandlerConnected(typ typ typ typ typ LPUNKNOWN pUnk);
/*595*/ typ __inner_checkReturn extern HRESULT __stdcall CoMarshalInterThreadInterfaceInStream(typ typ typ typ typ const IID*const riid,typ typ typ typ typ LPUNKNOWN pUnk,
/*596*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPSTREAM*ppStm);
/*598*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetInterfaceAndReleaseStream(typ typ typ typ typ LPSTREAM pStm,typ typ typ typ typ const IID*const iid,
/*599*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID typ*ppv);
/*601*/ typ __inner_checkReturn extern HRESULT __stdcall CoCreateFreeThreadedMarshaler(typ typ typ typ typ typ typ LPUNKNOWN punkOuter,
/*602*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPUNKNOWN*ppunkMarshal);
/*606*/ extern HINSTANCE __stdcall CoLoadLibrary(typ typ typ typ typ LPOLESTR lpszLibName,typ typ typ typ typ BOOL bAutoFree);
/*607*/ extern void __stdcall CoFreeLibrary(typ typ typ typ typ HINSTANCE hInst);
/*608*/ extern void __stdcall CoFreeAllLibraries(void);
/*609*/ extern void __stdcall CoFreeUnusedLibraries(void);
/*702*/ typ __inner_checkReturn extern HRESULT __stdcall CoCreateInstance(typ typ typ typ typ const IID*const rclsid,
/*703*/ typ typ typ typ typ typ typ LPUNKNOWN pUnkOuter,
/*704*/ typ typ typ typ typ DWORD dwClsContext,
/*705*/ typ typ typ typ typ const IID*const riid,
/*706*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID typ*ppv);
/*774*/ typ __inner_checkReturn extern HRESULT __stdcall StringFromCLSID(typ typ typ typ typ const IID*const rclsid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPOLESTR typ*lplpsz);
/*775*/ typ __inner_checkReturn extern HRESULT __stdcall CLSIDFromString(typ typ typ typ typ LPOLESTR lpsz,typ typ typ typ typ LPCLSID pclsid);
/*776*/ typ __inner_checkReturn extern HRESULT __stdcall StringFromIID(typ typ typ typ typ const IID*const rclsid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPOLESTR typ*lplpsz);
/*777*/ typ __inner_checkReturn extern HRESULT __stdcall IIDFromString(typ typ typ typ typ LPOLESTR lpsz,typ typ typ typ typ LPIID lpiid);
/*778*/ extern BOOL __stdcall CoIsOle1Class(typ typ typ typ typ const IID*const rclsid);
/*779*/ typ __inner_checkReturn extern HRESULT __stdcall ProgIDFromCLSID(typ typ typ typ typ const IID*const clsid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPOLESTR typ*lplpszProgID);
/*780*/ typ __inner_checkReturn extern HRESULT __stdcall CLSIDFromProgID(typ typ typ typ typ LPCOLESTR lpszProgID,typ typ typ typ typ LPCLSID lpclsid);
/*781*/ typ __inner_checkReturn extern HRESULT __stdcall CLSIDFromProgIDEx(typ typ typ typ typ LPCOLESTR lpszProgID,typ typ typ typ typ LPCLSID lpclsid);
/*782*/ typ __inner_checkReturn extern int __stdcall StringFromGUID2(typ typ typ typ typ const GUID*const rguid,typ typ typ typ typ typ typ LPOLESTR lpsz,typ typ typ typ typ int cchMax);
/*784*/ typ __inner_checkReturn extern HRESULT __stdcall CoCreateGuid(typ typ typ typ typ GUID typ*pguid);
/*786*/ extern BOOL __stdcall CoFileTimeToDosDateTime(
/*787*/ typ typ typ typ typ FILETIME typ*lpFileTime,typ typ typ typ typ LPWORD lpDosDate,typ typ typ typ typ LPWORD lpDosTime);
/*788*/ extern BOOL __stdcall CoDosDateTimeToFileTime(
/*789*/ typ typ typ typ typ WORD nDosDate,typ typ typ typ typ WORD nDosTime,typ typ typ typ typ FILETIME typ*lpFileTime);
/*790*/ extern HRESULT __stdcall CoFileTimeNow(typ typ typ typ typ FILETIME typ*lpFileTime);
/*793*/ typ __inner_checkReturn extern HRESULT __stdcall CoRegisterMessageFilter(typ typ typ typ typ typ typ LPMESSAGEFILTER lpMessageFilter,
/*794*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMESSAGEFILTER typ*lplpMessageFilter);
/*831*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetTreatAsClass(typ typ typ typ typ const IID*const clsidOld,typ typ typ typ typ LPCLSID pClsidNew);
/*832*/ typ __inner_checkReturn extern HRESULT __stdcall CoTreatAsClass(typ typ typ typ typ const IID*const clsidOld,typ typ typ typ typ const IID*const clsidNew);
/*843*/ typedef HRESULT(__stdcall*LPFNGETCLASSOBJECT)(const IID*const,const IID*const,LPVOID*);
/*849*/ typedef HRESULT(__stdcall*LPFNCANUNLOADNOW)(void);
/*852*/ extern HRESULT __stdcall DllGetClassObject(typ typ typ typ typ const IID*const rclsid,typ typ typ typ typ const IID*const riid,LPVOID typ*ppv);
/*854*/ extern HRESULT __stdcall DllCanUnloadNow(void);
/*858*/ extern typ typ typ typ typ LPVOID __stdcall CoTaskMemAlloc(typ typ typ typ typ SIZE_T cb);
/*859*/ extern typ typ typ typ typ LPVOID __stdcall CoTaskMemRealloc(typ typ typ typ typ typ typ LPVOID pv,typ typ typ typ typ SIZE_T cb);
/*860*/ extern void __stdcall CoTaskMemFree(typ typ typ typ typ typ typ LPVOID pv);
/*865*/ extern HRESULT __stdcall CreateDataAdviseHolder(typ typ typ typ typ LPDATAADVISEHOLDER typ*ppDAHolder);
/*867*/ extern HRESULT __stdcall CreateDataCache(typ typ typ typ typ typ typ LPUNKNOWN pUnkOuter,typ typ typ typ typ const IID*const rclsid,
/*868*/ typ typ typ typ typ const IID*const iid,typ typ typ typ typ LPVOID typ*ppv);
/*874*/ typ __inner_checkReturn extern HRESULT __stdcall StgCreateDocfile(typ typ typ typ typ typ typ typ const WCHAR*pwcsName,
/*875*/ typ typ typ typ typ DWORD grfMode,
/*876*/ typ typ DWORD reserved,
/*877*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IStorage**ppstgOpen);
/*879*/ typ __inner_checkReturn extern HRESULT __stdcall StgCreateDocfileOnILockBytes(typ typ typ typ typ ILockBytes*plkbyt,
/*880*/ typ typ typ typ typ DWORD grfMode,
/*881*/ typ typ typ typ typ DWORD reserved,
/*882*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IStorage**ppstgOpen);
/*884*/ typ __inner_checkReturn extern HRESULT __stdcall StgOpenStorage(typ typ typ typ typ typ typ typ const WCHAR*pwcsName,
/*885*/ typ typ typ typ typ typ typ IStorage*pstgPriority,
/*886*/ typ typ typ typ typ DWORD grfMode,
/*887*/ typ typ typ typ typ typ typ SNB snbExclude,
/*888*/ typ typ typ typ typ DWORD reserved,
/*889*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IStorage**ppstgOpen);
/*890*/ typ __inner_checkReturn extern HRESULT __stdcall StgOpenStorageOnILockBytes(typ typ typ typ typ ILockBytes*plkbyt,
/*891*/ typ typ typ typ typ typ typ IStorage*pstgPriority,
/*892*/ typ typ typ typ typ DWORD grfMode,
/*893*/ typ typ typ typ typ typ typ SNB snbExclude,
/*894*/ typ typ DWORD reserved,
/*895*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IStorage**ppstgOpen);
/*897*/ typ __inner_checkReturn extern HRESULT __stdcall StgIsStorageFile(typ typ typ typ typ typ const WCHAR*pwcsName);
/*898*/ typ __inner_checkReturn extern HRESULT __stdcall StgIsStorageILockBytes(typ typ typ typ typ ILockBytes*plkbyt);
/*900*/ typ __inner_checkReturn extern HRESULT __stdcall StgSetTimes(typ typ typ typ typ typ const WCHAR*lpszName,
/*901*/ typ typ typ typ typ typ typ const FILETIME*pctime,
/*902*/ typ typ typ typ typ typ typ const FILETIME*patime,
/*903*/ typ typ typ typ typ typ typ const FILETIME*pmtime);
/*905*/ typ __inner_checkReturn extern HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes(typ typ typ typ typ IFillLockBytes*pflb,
/*906*/ typ typ typ typ typ DWORD grfMode,
/*907*/ typ typ typ typ typ DWORD asyncFlags,
/*908*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IStorage**ppstgOpen);
/*910*/ typ __inner_checkReturn extern HRESULT __stdcall StgGetIFillLockBytesOnILockBytes(typ typ typ typ typ ILockBytes*pilb,
/*911*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IFillLockBytes**ppflb);
/*913*/ typ __inner_checkReturn extern HRESULT __stdcall StgGetIFillLockBytesOnFile(typ typ typ typ typ typ OLECHAR const*pwcsName,
/*914*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IFillLockBytes**ppflb);
/*917*/ typ __inner_checkReturn extern HRESULT __stdcall StgOpenLayoutDocfile(typ typ typ typ typ typ OLECHAR const*pwcsDfName,
/*918*/ typ typ typ typ typ DWORD grfMode,
/*919*/ typ typ typ typ typ DWORD reserved,
/*920*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IStorage**ppstgOpen);
/*931*/ typedef struct tagSTGOPTIONS
/*932*/ {
/*933*/ USHORT usVersion;
/*934*/ USHORT reserved;
/*935*/ ULONG ulSectorSize;
/*939*/ }STGOPTIONS;
/*941*/ typ __inner_checkReturn extern HRESULT __stdcall StgCreateStorageEx(typ typ typ typ typ typ typ typ const WCHAR*pwcsName,
/*942*/ typ typ typ typ typ DWORD grfMode,
/*943*/ typ typ typ typ typ DWORD stgfmt,
/*944*/ typ typ typ typ typ DWORD grfAttrs,
/*945*/ typ typ typ typ typ typ typ STGOPTIONS*pStgOptions,
/*946*/ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*947*/ typ typ typ typ typ const IID*const riid,
/*948*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppObjectOpen);
/*950*/ typ __inner_checkReturn extern HRESULT __stdcall StgOpenStorageEx(typ typ typ typ typ typ const WCHAR*pwcsName,
/*951*/ typ typ typ typ typ DWORD grfMode,
/*952*/ typ typ typ typ typ DWORD stgfmt,
/*953*/ typ typ typ typ typ DWORD grfAttrs,
/*954*/ typ typ typ typ typ typ typ STGOPTIONS*pStgOptions,
/*955*/ typ typ typ typ typ typ typ PSECURITY_DESCRIPTOR pSecurityDescriptor,
/*956*/ typ typ typ typ typ const IID*const riid,
/*957*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppObjectOpen);
/*964*/ typ __inner_checkReturn extern HRESULT __stdcall BindMoniker(typ typ typ typ typ LPMONIKER pmk,typ typ typ typ typ DWORD grfOpt,typ typ typ typ typ const IID*const iidResult,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPVOID typ*ppvResult);
/*966*/ extern HRESULT __stdcall CoInstall(
/*967*/ typ typ typ typ typ IBindCtx*pbc,
/*968*/ typ typ typ typ typ DWORD dwFlags,
/*969*/ typ typ typ typ typ uCLSSPEC*pClassSpec,
/*970*/ typ typ typ typ typ QUERYCONTEXT*pQuery,
/*971*/ typ typ typ typ typ LPWSTR pszCodeBase);
/*973*/ typ __inner_checkReturn extern HRESULT __stdcall CoGetObject(typ typ typ typ typ LPCWSTR pszName,typ typ typ typ typ typ typ BIND_OPTS*pBindOptions,typ typ typ typ typ const IID*const riid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppv);
/*974*/ typ __inner_checkReturn extern HRESULT __stdcall MkParseDisplayName(typ typ typ typ typ LPBC pbc,typ typ typ typ typ LPCOLESTR szUserName,
/*975*/ typ typ typ typ typ ULONG typ*pchEaten,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmk);
/*976*/ typ __inner_checkReturn extern HRESULT __stdcall MonikerRelativePathTo(typ typ typ typ typ LPMONIKER pmkSrc,typ typ typ typ typ LPMONIKER pmkDest,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER
/*977*/ typ*ppmkRelPath,typ typ typ typ typ BOOL dwReserved);
/*978*/ typ __inner_checkReturn extern HRESULT __stdcall MonikerCommonPrefixWith(typ typ typ typ typ LPMONIKER pmkThis,typ typ typ typ typ LPMONIKER pmkOther,
/*979*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmkCommon);
/*980*/ typ __inner_checkReturn extern HRESULT __stdcall CreateBindCtx(typ typ typ typ typ DWORD reserved,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPBC typ*ppbc);
/*981*/ typ __inner_checkReturn extern HRESULT __stdcall CreateGenericComposite(typ typ typ typ typ typ typ LPMONIKER pmkFirst,typ typ typ typ typ typ typ LPMONIKER pmkRest,
/*982*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmkComposite);
/*983*/ typ __inner_checkReturn extern HRESULT __stdcall GetClassFile(typ typ typ typ typ LPCOLESTR szFilename,typ typ typ typ typ CLSID typ*pclsid);
/*985*/ typ __inner_checkReturn extern HRESULT __stdcall CreateClassMoniker(typ typ typ typ typ const IID*const rclsid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmk);
/*987*/ typ __inner_checkReturn extern HRESULT __stdcall CreateFileMoniker(typ typ typ typ typ LPCOLESTR lpszPathName,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmk);
/*989*/ typ __inner_checkReturn extern HRESULT __stdcall CreateItemMoniker(typ typ typ typ typ LPCOLESTR lpszDelim,typ typ typ typ typ LPCOLESTR lpszItem,
/*990*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmk);
/*991*/ typ __inner_checkReturn extern HRESULT __stdcall CreateAntiMoniker(typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmk);
/*992*/ typ __inner_checkReturn extern HRESULT __stdcall CreatePointerMoniker(typ typ typ typ typ typ typ LPUNKNOWN punk,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmk);
/*993*/ typ __inner_checkReturn extern HRESULT __stdcall CreateObjrefMoniker(typ typ typ typ typ typ typ LPUNKNOWN punk,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPMONIKER typ*ppmk);
/*995*/ typ __inner_checkReturn extern HRESULT __stdcall GetRunningObjectTable(typ typ typ typ typ DWORD reserved,typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPRUNNINGOBJECTTABLE typ*pprot);
/*"urlmon.h"53*/ typedef struct IPersistMoniker IPersistMoniker;
/*59*/ typedef struct IMonikerProp IMonikerProp;
/*65*/ typedef struct IBindProtocol IBindProtocol;
/*71*/ typedef struct IBinding IBinding;
/*77*/ typedef struct IBindStatusCallback IBindStatusCallback;
/*83*/ typedef struct IAuthenticate IAuthenticate;
/*89*/ typedef struct IHttpNegotiate IHttpNegotiate;
/*95*/ typedef struct IHttpNegotiate2 IHttpNegotiate2;
/*101*/ typedef struct IWinInetFileStream IWinInetFileStream;
/*107*/ typedef struct IWindowForBindingUI IWindowForBindingUI;
/*113*/ typedef struct ICodeInstall ICodeInstall;
/*119*/ typedef struct IUri IUri;
/*125*/ typedef struct IUriContainer IUriContainer;
/*131*/ typedef struct IUriBuilder IUriBuilder;
/*137*/ typedef struct IUriBuilderFactory IUriBuilderFactory;
/*143*/ typedef struct IWinInetInfo IWinInetInfo;
/*149*/ typedef struct IHttpSecurity IHttpSecurity;
/*155*/ typedef struct IWinInetHttpInfo IWinInetHttpInfo;
/*161*/ typedef struct IWinInetCacheHints IWinInetCacheHints;
/*167*/ typedef struct IWinInetCacheHints2 IWinInetCacheHints2;
/*173*/ typedef struct IBindHost IBindHost;
/*179*/ typedef struct IInternet IInternet;
/*185*/ typedef struct IInternetBindInfo IInternetBindInfo;
/*191*/ typedef struct IInternetProtocolRoot IInternetProtocolRoot;
/*197*/ typedef struct IInternetProtocol IInternetProtocol;
/*203*/ typedef struct IInternetProtocolEx IInternetProtocolEx;
/*209*/ typedef struct IInternetProtocolSink IInternetProtocolSink;
/*215*/ typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;
/*221*/ typedef struct IInternetSession IInternetSession;
/*227*/ typedef struct IInternetThreadSwitch IInternetThreadSwitch;
/*233*/ typedef struct IInternetPriority IInternetPriority;
/*239*/ typedef struct IInternetProtocolInfo IInternetProtocolInfo;
/*245*/ typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;
/*251*/ typedef struct IInternetSecurityManager IInternetSecurityManager;
/*257*/ typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;
/*263*/ typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;
/*269*/ typedef struct IZoneIdentifier IZoneIdentifier;
/*275*/ typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;
/*281*/ typedef struct IInternetZoneManager IInternetZoneManager;
/*287*/ typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;
/*293*/ typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;
/*299*/ typedef struct ISoftDistExt ISoftDistExt;
/*305*/ typedef struct ICatalogFileInfo ICatalogFileInfo;
/*311*/ typedef struct IDataFilter IDataFilter;
/*317*/ typedef struct IEncodingFilterFactory IEncodingFilterFactory;
/*323*/ typedef struct IWrappedProtocol IWrappedProtocol;
/*"oleidl.h"53*/ typedef struct IOleAdviseHolder IOleAdviseHolder;
/*59*/ typedef struct IOleCache IOleCache;
/*65*/ typedef struct IOleCache2 IOleCache2;
/*71*/ typedef struct IOleCacheControl IOleCacheControl;
/*77*/ typedef struct IParseDisplayName IParseDisplayName;
/*83*/ typedef struct IOleContainer IOleContainer;
/*89*/ typedef struct IOleClientSite IOleClientSite;
/*95*/ typedef struct IOleObject IOleObject;
/*101*/ typedef struct IOleWindow IOleWindow;
/*107*/ typedef struct IOleLink IOleLink;
/*113*/ typedef struct IOleItemContainer IOleItemContainer;
/*119*/ typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;
/*125*/ typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;
/*131*/ typedef struct IOleInPlaceFrame IOleInPlaceFrame;
/*137*/ typedef struct IOleInPlaceObject IOleInPlaceObject;
/*143*/ typedef struct IOleInPlaceSite IOleInPlaceSite;
/*149*/ typedef struct IContinue IContinue;
/*155*/ typedef struct IViewObject IViewObject;
/*161*/ typedef struct IViewObject2 IViewObject2;
/*167*/ typedef struct IDropSource IDropSource;
/*173*/ typedef struct IDropTarget IDropTarget;
/*179*/ typedef struct IDropSourceNotify IDropSourceNotify;
/*185*/ typedef struct IEnumOLEVERB IEnumOLEVERB;
/*213*/ extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
/*214*/ extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;
/*222*/ typedef IOleAdviseHolder*LPOLEADVISEHOLDER;
/*225*/ extern const IID IID_IOleAdviseHolder;
/*254*/ typedef struct IOleAdviseHolderVtbl
/*255*/ {
/*256*/ 
/*258*/ HRESULT(__stdcall*QueryInterface)(
/*259*/ IOleAdviseHolder*This,
/*260*/ const IID*const riid,
/*262*/ void**ppvObject);
/*264*/ ULONG(__stdcall*AddRef)(
/*265*/ IOleAdviseHolder*This);
/*267*/ ULONG(__stdcall*Release)(
/*268*/ IOleAdviseHolder*This);
/*270*/ HRESULT(__stdcall*Advise)(
/*271*/ IOleAdviseHolder*This,
/*272*/ IAdviseSink*pAdvise,
/*273*/ DWORD*pdwConnection);
/*275*/ HRESULT(__stdcall*Unadvise)(
/*276*/ IOleAdviseHolder*This,
/*277*/ DWORD dwConnection);
/*279*/ HRESULT(__stdcall*EnumAdvise)(
/*280*/ IOleAdviseHolder*This,
/*281*/ IEnumSTATDATA**ppenumAdvise);
/*283*/ HRESULT(__stdcall*SendOnRename)(
/*284*/ IOleAdviseHolder*This,
/*285*/ IMoniker*pmk);
/*287*/ HRESULT(__stdcall*SendOnSave)(
/*288*/ IOleAdviseHolder*This);
/*290*/ HRESULT(__stdcall*SendOnClose)(
/*291*/ IOleAdviseHolder*This);
/*293*/ 
/*294*/ }IOleAdviseHolderVtbl;
/*296*/ struct IOleAdviseHolder
/*297*/ {
/*298*/ struct IOleAdviseHolderVtbl*lpVtbl;
/*299*/ };
/*351*/ typedef IOleCache*LPOLECACHE;
/*354*/ extern const IID IID_IOleCache;
/*385*/ typedef struct IOleCacheVtbl
/*386*/ {
/*387*/ 
/*389*/ HRESULT(__stdcall*QueryInterface)(
/*390*/ IOleCache*This,
/*391*/ const IID*const riid,
/*393*/ void**ppvObject);
/*395*/ ULONG(__stdcall*AddRef)(
/*396*/ IOleCache*This);
/*398*/ ULONG(__stdcall*Release)(
/*399*/ IOleCache*This);
/*401*/ HRESULT(__stdcall*Cache)(
/*402*/ IOleCache*This,
/*403*/ FORMATETC*pformatetc,
/*404*/ DWORD advf,
/*405*/ DWORD*pdwConnection);
/*407*/ HRESULT(__stdcall*Uncache)(
/*408*/ IOleCache*This,
/*409*/ DWORD dwConnection);
/*411*/ HRESULT(__stdcall*EnumCache)(
/*412*/ IOleCache*This,
/*413*/ IEnumSTATDATA**ppenumSTATDATA);
/*415*/ HRESULT(__stdcall*InitCache)(
/*416*/ IOleCache*This,
/*417*/ IDataObject*pDataObject);
/*419*/ HRESULT(__stdcall*SetData)(
/*420*/ IOleCache*This,
/*421*/ FORMATETC*pformatetc,
/*422*/ STGMEDIUM*pmedium,
/*423*/ BOOL fRelease);
/*425*/ 
/*426*/ }IOleCacheVtbl;
/*428*/ struct IOleCache
/*429*/ {
/*430*/ struct IOleCacheVtbl*lpVtbl;
/*431*/ };
/*480*/ typedef IOleCache2*LPOLECACHE2;
/*500*/ typedef
/*501*/ enum tagDISCARDCACHE
/*502*/ {DISCARDCACHE_SAVEIFDIRTY=0,
/*503*/ DISCARDCACHE_NOSAVE=1
/*504*/ }DISCARDCACHE;
/*507*/ extern const IID IID_IOleCache2;
/*527*/ typedef struct IOleCache2Vtbl
/*528*/ {
/*529*/ 
/*531*/ HRESULT(__stdcall*QueryInterface)(
/*532*/ IOleCache2*This,
/*533*/ const IID*const riid,
/*535*/ void**ppvObject);
/*537*/ ULONG(__stdcall*AddRef)(
/*538*/ IOleCache2*This);
/*540*/ ULONG(__stdcall*Release)(
/*541*/ IOleCache2*This);
/*543*/ HRESULT(__stdcall*Cache)(
/*544*/ IOleCache2*This,
/*545*/ FORMATETC*pformatetc,
/*546*/ DWORD advf,
/*547*/ DWORD*pdwConnection);
/*549*/ HRESULT(__stdcall*Uncache)(
/*550*/ IOleCache2*This,
/*551*/ DWORD dwConnection);
/*553*/ HRESULT(__stdcall*EnumCache)(
/*554*/ IOleCache2*This,
/*555*/ IEnumSTATDATA**ppenumSTATDATA);
/*557*/ HRESULT(__stdcall*InitCache)(
/*558*/ IOleCache2*This,
/*559*/ IDataObject*pDataObject);
/*561*/ HRESULT(__stdcall*SetData)(
/*562*/ IOleCache2*This,
/*563*/ FORMATETC*pformatetc,
/*564*/ STGMEDIUM*pmedium,
/*565*/ BOOL fRelease);
/*567*/ HRESULT(__stdcall*UpdateCache)(
/*568*/ IOleCache2*This,
/*569*/ LPDATAOBJECT pDataObject,
/*570*/ DWORD grfUpdf,
/*571*/ LPVOID pReserved);
/*573*/ HRESULT(__stdcall*DiscardCache)(
/*574*/ IOleCache2*This,
/*575*/ DWORD dwDiscardOptions);
/*577*/ 
/*578*/ }IOleCache2Vtbl;
/*580*/ struct IOleCache2
/*581*/ {
/*582*/ struct IOleCache2Vtbl*lpVtbl;
/*583*/ };
/*629*/ HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy(
/*630*/ IOleCache2*This,
/*631*/ LPDATAOBJECT pDataObject,
/*632*/ DWORD grfUpdf,
/*633*/ LONG_PTR pReserved);
/*636*/ void IOleCache2_RemoteUpdateCache_Stub(
/*637*/ IRpcStubBuffer*This,
/*638*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*639*/ PRPC_MESSAGE _pRpcMessage,
/*640*/ DWORD*_pdwStubPhase);
/*653*/ typedef IOleCacheControl*LPOLECACHECONTROL;
/*656*/ extern const IID IID_IOleCacheControl;
/*673*/ typedef struct IOleCacheControlVtbl
/*674*/ {
/*675*/ 
/*677*/ HRESULT(__stdcall*QueryInterface)(
/*678*/ IOleCacheControl*This,
/*679*/ const IID*const riid,
/*681*/ void**ppvObject);
/*683*/ ULONG(__stdcall*AddRef)(
/*684*/ IOleCacheControl*This);
/*686*/ ULONG(__stdcall*Release)(
/*687*/ IOleCacheControl*This);
/*689*/ HRESULT(__stdcall*OnRun)(
/*690*/ IOleCacheControl*This,
/*691*/ LPDATAOBJECT pDataObject);
/*693*/ HRESULT(__stdcall*OnStop)(
/*694*/ IOleCacheControl*This);
/*696*/ 
/*697*/ }IOleCacheControlVtbl;
/*699*/ struct IOleCacheControl
/*700*/ {
/*701*/ struct IOleCacheControlVtbl*lpVtbl;
/*702*/ };
/*742*/ typedef IParseDisplayName*LPPARSEDISPLAYNAME;
/*745*/ extern const IID IID_IParseDisplayName;
/*763*/ typedef struct IParseDisplayNameVtbl
/*764*/ {
/*765*/ 
/*767*/ HRESULT(__stdcall*QueryInterface)(
/*768*/ IParseDisplayName*This,
/*769*/ const IID*const riid,
/*771*/ void**ppvObject);
/*773*/ ULONG(__stdcall*AddRef)(
/*774*/ IParseDisplayName*This);
/*776*/ ULONG(__stdcall*Release)(
/*777*/ IParseDisplayName*This);
/*779*/ HRESULT(__stdcall*ParseDisplayName)(
/*780*/ IParseDisplayName*This,
/*781*/ IBindCtx*pbc,
/*782*/ LPOLESTR pszDisplayName,
/*783*/ ULONG*pchEaten,
/*784*/ IMoniker**ppmkOut);
/*786*/ 
/*787*/ }IParseDisplayNameVtbl;
/*789*/ struct IParseDisplayName
/*790*/ {
/*791*/ struct IParseDisplayNameVtbl*lpVtbl;
/*792*/ };
/*829*/ typedef IOleContainer*LPOLECONTAINER;
/*832*/ extern const IID IID_IOleContainer;
/*851*/ typedef struct IOleContainerVtbl
/*852*/ {
/*853*/ 
/*855*/ HRESULT(__stdcall*QueryInterface)(
/*856*/ IOleContainer*This,
/*857*/ const IID*const riid,
/*859*/ void**ppvObject);
/*861*/ ULONG(__stdcall*AddRef)(
/*862*/ IOleContainer*This);
/*864*/ ULONG(__stdcall*Release)(
/*865*/ IOleContainer*This);
/*867*/ HRESULT(__stdcall*ParseDisplayName)(
/*868*/ IOleContainer*This,
/*869*/ IBindCtx*pbc,
/*870*/ LPOLESTR pszDisplayName,
/*871*/ ULONG*pchEaten,
/*872*/ IMoniker**ppmkOut);
/*874*/ HRESULT(__stdcall*EnumObjects)(
/*875*/ IOleContainer*This,
/*876*/ DWORD grfFlags,
/*877*/ IEnumUnknown**ppenum);
/*879*/ HRESULT(__stdcall*LockContainer)(
/*880*/ IOleContainer*This,
/*881*/ BOOL fLock);
/*883*/ 
/*884*/ }IOleContainerVtbl;
/*886*/ struct IOleContainer
/*887*/ {
/*888*/ struct IOleContainerVtbl*lpVtbl;
/*889*/ };
/*933*/ typedef IOleClientSite*LPOLECLIENTSITE;
/*936*/ extern const IID IID_IOleClientSite;
/*965*/ typedef struct IOleClientSiteVtbl
/*966*/ {
/*967*/ 
/*969*/ HRESULT(__stdcall*QueryInterface)(
/*970*/ IOleClientSite*This,
/*971*/ const IID*const riid,
/*973*/ void**ppvObject);
/*975*/ ULONG(__stdcall*AddRef)(
/*976*/ IOleClientSite*This);
/*978*/ ULONG(__stdcall*Release)(
/*979*/ IOleClientSite*This);
/*981*/ HRESULT(__stdcall*SaveObject)(
/*982*/ IOleClientSite*This);
/*984*/ HRESULT(__stdcall*GetMoniker)(
/*985*/ IOleClientSite*This,
/*986*/ DWORD dwAssign,
/*987*/ DWORD dwWhichMoniker,
/*988*/ IMoniker**ppmk);
/*990*/ HRESULT(__stdcall*GetContainer)(
/*991*/ IOleClientSite*This,
/*992*/ IOleContainer**ppContainer);
/*994*/ HRESULT(__stdcall*ShowObject)(
/*995*/ IOleClientSite*This);
/*997*/ HRESULT(__stdcall*OnShowWindow)(
/*998*/ IOleClientSite*This,
/*999*/ BOOL fShow);
/*1001*/ HRESULT(__stdcall*RequestNewObjectLayout)(
/*1002*/ IOleClientSite*This);
/*1004*/ 
/*1005*/ }IOleClientSiteVtbl;
/*1007*/ struct IOleClientSite
/*1008*/ {
/*1009*/ struct IOleClientSiteVtbl*lpVtbl;
/*1010*/ };
/*1062*/ typedef IOleObject*LPOLEOBJECT;
/*1064*/ typedef
/*1065*/ enum tagOLEGETMONIKER
/*1066*/ {OLEGETMONIKER_ONLYIFTHERE=1,
/*1067*/ OLEGETMONIKER_FORCEASSIGN=2,
/*1068*/ OLEGETMONIKER_UNASSIGN=3,
/*1069*/ OLEGETMONIKER_TEMPFORUSER=4
/*1070*/ }OLEGETMONIKER;
/*1072*/ typedef
/*1073*/ enum tagOLEWHICHMK
/*1074*/ {OLEWHICHMK_CONTAINER=1,
/*1075*/ OLEWHICHMK_OBJREL=2,
/*1076*/ OLEWHICHMK_OBJFULL=3
/*1077*/ }OLEWHICHMK;
/*1079*/ typedef
/*1080*/ enum tagUSERCLASSTYPE
/*1081*/ {USERCLASSTYPE_FULL=1,
/*1082*/ USERCLASSTYPE_SHORT=2,
/*1083*/ USERCLASSTYPE_APPNAME=3
/*1084*/ }USERCLASSTYPE;
/*1086*/ typedef
/*1087*/ enum tagOLEMISC
/*1088*/ {OLEMISC_RECOMPOSEONRESIZE=0x1,
/*1089*/ OLEMISC_ONLYICONIC=0x2,
/*1090*/ OLEMISC_INSERTNOTREPLACE=0x4,
/*1091*/ OLEMISC_STATIC=0x8,
/*1092*/ OLEMISC_CANTLINKINSIDE=0x10,
/*1093*/ OLEMISC_CANLINKBYOLE1=0x20,
/*1094*/ OLEMISC_ISLINKOBJECT=0x40,
/*1095*/ OLEMISC_INSIDEOUT=0x80,
/*1096*/ OLEMISC_ACTIVATEWHENVISIBLE=0x100,
/*1097*/ OLEMISC_RENDERINGISDEVICEINDEPENDENT=0x200,
/*1098*/ OLEMISC_INVISIBLEATRUNTIME=0x400,
/*1099*/ OLEMISC_ALWAYSRUN=0x800,
/*1100*/ OLEMISC_ACTSLIKEBUTTON=0x1000,
/*1101*/ OLEMISC_ACTSLIKELABEL=0x2000,
/*1102*/ OLEMISC_NOUIACTIVATE=0x4000,
/*1103*/ OLEMISC_ALIGNABLE=0x8000,
/*1104*/ OLEMISC_SIMPLEFRAME=0x10000,
/*1105*/ OLEMISC_SETCLIENTSITEFIRST=0x20000,
/*1106*/ OLEMISC_IMEMODE=0x40000,
/*1107*/ OLEMISC_IGNOREACTIVATEWHENVISIBLE=0x80000,
/*1108*/ OLEMISC_WANTSTOMENUMERGE=0x100000,
/*1109*/ OLEMISC_SUPPORTSMULTILEVELUNDO=0x200000
/*1110*/ }OLEMISC;
/*1112*/ typedef
/*1113*/ enum tagOLECLOSE
/*1114*/ {OLECLOSE_SAVEIFDIRTY=0,
/*1115*/ OLECLOSE_NOSAVE=1,
/*1116*/ OLECLOSE_PROMPTSAVE=2
/*1117*/ }OLECLOSE;
/*1120*/ extern const IID IID_IOleObject;
/*1210*/ typedef struct IOleObjectVtbl
/*1211*/ {
/*1212*/ 
/*1214*/ HRESULT(__stdcall*QueryInterface)(
/*1215*/ IOleObject*This,
/*1216*/ const IID*const riid,
/*1218*/ void**ppvObject);
/*1220*/ ULONG(__stdcall*AddRef)(
/*1221*/ IOleObject*This);
/*1223*/ ULONG(__stdcall*Release)(
/*1224*/ IOleObject*This);
/*1226*/ HRESULT(__stdcall*SetClientSite)(
/*1227*/ IOleObject*This,
/*1228*/ IOleClientSite*pClientSite);
/*1230*/ HRESULT(__stdcall*GetClientSite)(
/*1231*/ IOleObject*This,
/*1232*/ IOleClientSite**ppClientSite);
/*1234*/ HRESULT(__stdcall*SetHostNames)(
/*1235*/ IOleObject*This,
/*1236*/ LPCOLESTR szContainerApp,
/*1237*/ LPCOLESTR szContainerObj);
/*1239*/ HRESULT(__stdcall*Close)(
/*1240*/ IOleObject*This,
/*1241*/ DWORD dwSaveOption);
/*1243*/ HRESULT(__stdcall*SetMoniker)(
/*1244*/ IOleObject*This,
/*1245*/ DWORD dwWhichMoniker,
/*1246*/ IMoniker*pmk);
/*1248*/ HRESULT(__stdcall*GetMoniker)(
/*1249*/ IOleObject*This,
/*1250*/ DWORD dwAssign,
/*1251*/ DWORD dwWhichMoniker,
/*1252*/ IMoniker**ppmk);
/*1254*/ HRESULT(__stdcall*InitFromData)(
/*1255*/ IOleObject*This,
/*1256*/ IDataObject*pDataObject,
/*1257*/ BOOL fCreation,
/*1258*/ DWORD dwReserved);
/*1260*/ HRESULT(__stdcall*GetClipboardData)(
/*1261*/ IOleObject*This,
/*1262*/ DWORD dwReserved,
/*1263*/ IDataObject**ppDataObject);
/*1265*/ HRESULT(__stdcall*DoVerb)(
/*1266*/ IOleObject*This,
/*1267*/ LONG iVerb,
/*1268*/ LPMSG lpmsg,
/*1269*/ IOleClientSite*pActiveSite,
/*1270*/ LONG lindex,
/*1271*/ HWND hwndParent,
/*1272*/ LPCRECT lprcPosRect);
/*1274*/ HRESULT(__stdcall*EnumVerbs)(
/*1275*/ IOleObject*This,
/*1276*/ IEnumOLEVERB**ppEnumOleVerb);
/*1278*/ HRESULT(__stdcall*Update)(
/*1279*/ IOleObject*This);
/*1281*/ HRESULT(__stdcall*IsUpToDate)(
/*1282*/ IOleObject*This);
/*1284*/ HRESULT(__stdcall*GetUserClassID)(
/*1285*/ IOleObject*This,
/*1286*/ CLSID*pClsid);
/*1288*/ HRESULT(__stdcall*GetUserType)(
/*1289*/ IOleObject*This,
/*1290*/ DWORD dwFormOfType,
/*1291*/ LPOLESTR*pszUserType);
/*1293*/ HRESULT(__stdcall*SetExtent)(
/*1294*/ IOleObject*This,
/*1295*/ DWORD dwDrawAspect,
/*1296*/ SIZEL*psizel);
/*1298*/ HRESULT(__stdcall*GetExtent)(
/*1299*/ IOleObject*This,
/*1300*/ DWORD dwDrawAspect,
/*1301*/ SIZEL*psizel);
/*1303*/ HRESULT(__stdcall*Advise)(
/*1304*/ IOleObject*This,
/*1305*/ IAdviseSink*pAdvSink,
/*1306*/ DWORD*pdwConnection);
/*1308*/ HRESULT(__stdcall*Unadvise)(
/*1309*/ IOleObject*This,
/*1310*/ DWORD dwConnection);
/*1312*/ HRESULT(__stdcall*EnumAdvise)(
/*1313*/ IOleObject*This,
/*1314*/ IEnumSTATDATA**ppenumAdvise);
/*1316*/ HRESULT(__stdcall*GetMiscStatus)(
/*1317*/ IOleObject*This,
/*1318*/ DWORD dwAspect,
/*1319*/ DWORD*pdwStatus);
/*1321*/ HRESULT(__stdcall*SetColorScheme)(
/*1322*/ IOleObject*This,
/*1323*/ LOGPALETTE*pLogpal);
/*1325*/ 
/*1326*/ }IOleObjectVtbl;
/*1328*/ struct IOleObject
/*1329*/ {
/*1330*/ struct IOleObjectVtbl*lpVtbl;
/*1331*/ };
/*1428*/ typedef
/*1429*/ enum tagOLERENDER
/*1430*/ {OLERENDER_NONE=0,
/*1431*/ OLERENDER_DRAW=1,
/*1432*/ OLERENDER_FORMAT=2,
/*1433*/ OLERENDER_ASIS=3
/*1434*/ }OLERENDER;
/*1436*/ typedef OLERENDER*LPOLERENDER;
/*1438*/ typedef struct tagOBJECTDESCRIPTOR
/*1439*/ {
/*1440*/ ULONG cbSize;
/*1441*/ CLSID clsid;
/*1442*/ DWORD dwDrawAspect;
/*1443*/ SIZEL sizel;
/*1444*/ POINTL pointl;
/*1445*/ DWORD dwStatus;
/*1446*/ DWORD dwFullUserTypeName;
/*1447*/ DWORD dwSrcOfCopy;
/*1448*/ }OBJECTDESCRIPTOR;
/*1450*/ typedef struct tagOBJECTDESCRIPTOR*POBJECTDESCRIPTOR;
/*1452*/ typedef struct tagOBJECTDESCRIPTOR*LPOBJECTDESCRIPTOR;
/*1454*/ typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
/*1456*/ typedef struct tagOBJECTDESCRIPTOR*PLINKSRCDESCRIPTOR;
/*1458*/ typedef struct tagOBJECTDESCRIPTOR*LPLINKSRCDESCRIPTOR;
/*1462*/ extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
/*1463*/ extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
/*1472*/ typedef IOleWindow*LPOLEWINDOW;
/*1475*/ extern const IID IID_IOleWindow;
/*1493*/ typedef struct IOleWindowVtbl
/*1494*/ {
/*1495*/ 
/*1497*/ HRESULT(__stdcall*QueryInterface)(
/*1498*/ IOleWindow*This,
/*1499*/ const IID*const riid,
/*1501*/ void**ppvObject);
/*1503*/ ULONG(__stdcall*AddRef)(
/*1504*/ IOleWindow*This);
/*1506*/ ULONG(__stdcall*Release)(
/*1507*/ IOleWindow*This);
/*1509*/ HRESULT(__stdcall*GetWindow)(
/*1510*/ IOleWindow*This,
/*1511*/ HWND*phwnd);
/*1513*/ HRESULT(__stdcall*ContextSensitiveHelp)(
/*1514*/ IOleWindow*This,
/*1515*/ BOOL fEnterMode);
/*1517*/ 
/*1518*/ }IOleWindowVtbl;
/*1520*/ struct IOleWindow
/*1521*/ {
/*1522*/ struct IOleWindowVtbl*lpVtbl;
/*1523*/ };
/*1563*/ typedef IOleLink*LPOLELINK;
/*1565*/ typedef
/*1566*/ enum tagOLEUPDATE
/*1567*/ {OLEUPDATE_ALWAYS=1,
/*1568*/ OLEUPDATE_ONCALL=3
/*1569*/ }OLEUPDATE;
/*1571*/ typedef OLEUPDATE*LPOLEUPDATE;
/*1573*/ typedef OLEUPDATE*POLEUPDATE;
/*1575*/ typedef
/*1576*/ enum tagOLELINKBIND
/*1577*/ {OLELINKBIND_EVENIFCLASSDIFF=1
/*1578*/ }OLELINKBIND;
/*1581*/ extern const IID IID_IOleLink;
/*1626*/ typedef struct IOleLinkVtbl
/*1627*/ {
/*1628*/ 
/*1630*/ HRESULT(__stdcall*QueryInterface)(
/*1631*/ IOleLink*This,
/*1632*/ const IID*const riid,
/*1634*/ void**ppvObject);
/*1636*/ ULONG(__stdcall*AddRef)(
/*1637*/ IOleLink*This);
/*1639*/ ULONG(__stdcall*Release)(
/*1640*/ IOleLink*This);
/*1642*/ HRESULT(__stdcall*SetUpdateOptions)(
/*1643*/ IOleLink*This,
/*1644*/ DWORD dwUpdateOpt);
/*1646*/ HRESULT(__stdcall*GetUpdateOptions)(
/*1647*/ IOleLink*This,
/*1648*/ DWORD*pdwUpdateOpt);
/*1650*/ HRESULT(__stdcall*SetSourceMoniker)(
/*1651*/ IOleLink*This,
/*1652*/ IMoniker*pmk,
/*1653*/ const IID*const rclsid);
/*1655*/ HRESULT(__stdcall*GetSourceMoniker)(
/*1656*/ IOleLink*This,
/*1657*/ IMoniker**ppmk);
/*1659*/ HRESULT(__stdcall*SetSourceDisplayName)(
/*1660*/ IOleLink*This,
/*1661*/ LPCOLESTR pszStatusText);
/*1663*/ HRESULT(__stdcall*GetSourceDisplayName)(
/*1664*/ IOleLink*This,
/*1665*/ LPOLESTR*ppszDisplayName);
/*1667*/ HRESULT(__stdcall*BindToSource)(
/*1668*/ IOleLink*This,
/*1669*/ DWORD bindflags,
/*1670*/ IBindCtx*pbc);
/*1672*/ HRESULT(__stdcall*BindIfRunning)(
/*1673*/ IOleLink*This);
/*1675*/ HRESULT(__stdcall*GetBoundSource)(
/*1676*/ IOleLink*This,
/*1677*/ IUnknown**ppunk);
/*1679*/ HRESULT(__stdcall*UnbindSource)(
/*1680*/ IOleLink*This);
/*1682*/ HRESULT(__stdcall*Update)(
/*1683*/ IOleLink*This,
/*1684*/ IBindCtx*pbc);
/*1686*/ 
/*1687*/ }IOleLinkVtbl;
/*1689*/ struct IOleLink
/*1690*/ {
/*1691*/ struct IOleLinkVtbl*lpVtbl;
/*1692*/ };
/*1759*/ typedef IOleItemContainer*LPOLEITEMCONTAINER;
/*1761*/ typedef
/*1762*/ enum tagBINDSPEED
/*1763*/ {BINDSPEED_INDEFINITE=1,
/*1764*/ BINDSPEED_MODERATE=2,
/*1765*/ BINDSPEED_IMMEDIATE=3
/*1766*/ }BINDSPEED;
/*1768*/ typedef
/*1769*/ enum tagOLECONTF
/*1770*/ {OLECONTF_EMBEDDINGS=1,
/*1771*/ OLECONTF_LINKS=2,
/*1772*/ OLECONTF_OTHERS=4,
/*1773*/ OLECONTF_ONLYUSER=8,
/*1774*/ OLECONTF_ONLYIFRUNNING=16
/*1775*/ }OLECONTF;
/*1778*/ extern const IID IID_IOleItemContainer;
/*1806*/ typedef struct IOleItemContainerVtbl
/*1807*/ {
/*1808*/ 
/*1810*/ HRESULT(__stdcall*QueryInterface)(
/*1811*/ IOleItemContainer*This,
/*1812*/ const IID*const riid,
/*1814*/ void**ppvObject);
/*1816*/ ULONG(__stdcall*AddRef)(
/*1817*/ IOleItemContainer*This);
/*1819*/ ULONG(__stdcall*Release)(
/*1820*/ IOleItemContainer*This);
/*1822*/ HRESULT(__stdcall*ParseDisplayName)(
/*1823*/ IOleItemContainer*This,
/*1824*/ IBindCtx*pbc,
/*1825*/ LPOLESTR pszDisplayName,
/*1826*/ ULONG*pchEaten,
/*1827*/ IMoniker**ppmkOut);
/*1829*/ HRESULT(__stdcall*EnumObjects)(
/*1830*/ IOleItemContainer*This,
/*1831*/ DWORD grfFlags,
/*1832*/ IEnumUnknown**ppenum);
/*1834*/ HRESULT(__stdcall*LockContainer)(
/*1835*/ IOleItemContainer*This,
/*1836*/ BOOL fLock);
/*1838*/ HRESULT(__stdcall*GetObjectA)(
/*1839*/ IOleItemContainer*This,
/*1840*/ LPOLESTR pszItem,
/*1841*/ DWORD dwSpeedNeeded,
/*1842*/ IBindCtx*pbc,
/*1843*/ const IID*const riid,
/*1844*/ void**ppvObject);
/*1846*/ HRESULT(__stdcall*GetObjectStorage)(
/*1847*/ IOleItemContainer*This,
/*1848*/ LPOLESTR pszItem,
/*1849*/ IBindCtx*pbc,
/*1850*/ const IID*const riid,
/*1851*/ void**ppvStorage);
/*1853*/ HRESULT(__stdcall*IsRunning)(
/*1854*/ IOleItemContainer*This,
/*1855*/ LPOLESTR pszItem);
/*1857*/ 
/*1858*/ }IOleItemContainerVtbl;
/*1860*/ struct IOleItemContainer
/*1861*/ {
/*1862*/ struct IOleItemContainerVtbl*lpVtbl;
/*1863*/ };
/*1917*/ typedef IOleInPlaceUIWindow*LPOLEINPLACEUIWINDOW;
/*1919*/ typedef RECT BORDERWIDTHS;
/*1921*/ typedef LPRECT LPBORDERWIDTHS;
/*1923*/ typedef LPCRECT LPCBORDERWIDTHS;
/*1926*/ extern const IID IID_IOleInPlaceUIWindow;
/*1951*/ typedef struct IOleInPlaceUIWindowVtbl
/*1952*/ {
/*1953*/ 
/*1955*/ HRESULT(__stdcall*QueryInterface)(
/*1956*/ IOleInPlaceUIWindow*This,
/*1957*/ const IID*const riid,
/*1959*/ void**ppvObject);
/*1961*/ ULONG(__stdcall*AddRef)(
/*1962*/ IOleInPlaceUIWindow*This);
/*1964*/ ULONG(__stdcall*Release)(
/*1965*/ IOleInPlaceUIWindow*This);
/*1967*/ HRESULT(__stdcall*GetWindow)(
/*1968*/ IOleInPlaceUIWindow*This,
/*1969*/ HWND*phwnd);
/*1971*/ HRESULT(__stdcall*ContextSensitiveHelp)(
/*1972*/ IOleInPlaceUIWindow*This,
/*1973*/ BOOL fEnterMode);
/*1975*/ HRESULT(__stdcall*GetBorder)(
/*1976*/ IOleInPlaceUIWindow*This,
/*1977*/ LPRECT lprectBorder);
/*1979*/ HRESULT(__stdcall*RequestBorderSpace)(
/*1980*/ IOleInPlaceUIWindow*This,
/*1981*/ LPCBORDERWIDTHS pborderwidths);
/*1983*/ HRESULT(__stdcall*SetBorderSpace)(
/*1984*/ IOleInPlaceUIWindow*This,
/*1985*/ LPCBORDERWIDTHS pborderwidths);
/*1987*/ HRESULT(__stdcall*SetActiveObject)(
/*1988*/ IOleInPlaceUIWindow*This,
/*1989*/ IOleInPlaceActiveObject*pActiveObject,
/*1990*/ LPCOLESTR pszObjName);
/*1992*/ 
/*1993*/ }IOleInPlaceUIWindowVtbl;
/*1995*/ struct IOleInPlaceUIWindow
/*1996*/ {
/*1997*/ struct IOleInPlaceUIWindowVtbl*lpVtbl;
/*1998*/ };
/*2051*/ typedef IOleInPlaceActiveObject*LPOLEINPLACEACTIVEOBJECT;
/*2054*/ extern const IID IID_IOleInPlaceActiveObject;
/*2083*/ typedef struct IOleInPlaceActiveObjectVtbl
/*2084*/ {
/*2085*/ 
/*2087*/ HRESULT(__stdcall*QueryInterface)(
/*2088*/ IOleInPlaceActiveObject*This,
/*2089*/ const IID*const riid,
/*2091*/ void**ppvObject);
/*2093*/ ULONG(__stdcall*AddRef)(
/*2094*/ IOleInPlaceActiveObject*This);
/*2096*/ ULONG(__stdcall*Release)(
/*2097*/ IOleInPlaceActiveObject*This);
/*2099*/ HRESULT(__stdcall*GetWindow)(
/*2100*/ IOleInPlaceActiveObject*This,
/*2101*/ HWND*phwnd);
/*2103*/ HRESULT(__stdcall*ContextSensitiveHelp)(
/*2104*/ IOleInPlaceActiveObject*This,
/*2105*/ BOOL fEnterMode);
/*2107*/ HRESULT(__stdcall*TranslateAcceleratorA)(
/*2108*/ IOleInPlaceActiveObject*This,
/*2109*/ LPMSG lpmsg);
/*2111*/ HRESULT(__stdcall*OnFrameWindowActivate)(
/*2112*/ IOleInPlaceActiveObject*This,
/*2113*/ BOOL fActivate);
/*2115*/ HRESULT(__stdcall*OnDocWindowActivate)(
/*2116*/ IOleInPlaceActiveObject*This,
/*2117*/ BOOL fActivate);
/*2119*/ HRESULT(__stdcall*ResizeBorder)(
/*2120*/ IOleInPlaceActiveObject*This,
/*2121*/ LPCRECT prcBorder,
/*2122*/ IOleInPlaceUIWindow*pUIWindow,
/*2123*/ BOOL fFrameWindow);
/*2125*/ HRESULT(__stdcall*EnableModeless)(
/*2126*/ IOleInPlaceActiveObject*This,
/*2127*/ BOOL fEnable);
/*2129*/ 
/*2130*/ }IOleInPlaceActiveObjectVtbl;
/*2132*/ struct IOleInPlaceActiveObject
/*2133*/ {
/*2134*/ struct IOleInPlaceActiveObjectVtbl*lpVtbl;
/*2135*/ };
/*2181*/ HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
/*2182*/ IOleInPlaceActiveObject*This);
/*2185*/ void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
/*2186*/ IRpcStubBuffer*This,
/*2187*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2188*/ PRPC_MESSAGE _pRpcMessage,
/*2189*/ DWORD*_pdwStubPhase);
/*2192*/ HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
/*2193*/ IOleInPlaceActiveObject*This,
/*2194*/ LPCRECT prcBorder,
/*2195*/ const IID*const riid,
/*2196*/ IOleInPlaceUIWindow*pUIWindow,
/*2197*/ BOOL fFrameWindow);
/*2200*/ void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
/*2201*/ IRpcStubBuffer*This,
/*2202*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2203*/ PRPC_MESSAGE _pRpcMessage,
/*2204*/ DWORD*_pdwStubPhase);
/*2217*/ typedef IOleInPlaceFrame*LPOLEINPLACEFRAME;
/*2219*/ typedef struct tagOIFI
/*2220*/ {
/*2221*/ UINT cb;
/*2222*/ BOOL fMDIApp;
/*2223*/ HWND hwndFrame;
/*2224*/ HACCEL haccel;
/*2225*/ UINT cAccelEntries;
/*2226*/ }OLEINPLACEFRAMEINFO;
/*2228*/ typedef struct tagOIFI*LPOLEINPLACEFRAMEINFO;
/*2230*/ typedef struct tagOleMenuGroupWidths
/*2231*/ {
/*2232*/ LONG width[6];
/*2233*/ }OLEMENUGROUPWIDTHS;
/*2235*/ typedef struct tagOleMenuGroupWidths*LPOLEMENUGROUPWIDTHS;
/*2237*/ typedef HGLOBAL HOLEMENU;
/*2240*/ extern const IID IID_IOleInPlaceFrame;
/*2274*/ typedef struct IOleInPlaceFrameVtbl
/*2275*/ {
/*2276*/ 
/*2278*/ HRESULT(__stdcall*QueryInterface)(
/*2279*/ IOleInPlaceFrame*This,
/*2280*/ const IID*const riid,
/*2282*/ void**ppvObject);
/*2284*/ ULONG(__stdcall*AddRef)(
/*2285*/ IOleInPlaceFrame*This);
/*2287*/ ULONG(__stdcall*Release)(
/*2288*/ IOleInPlaceFrame*This);
/*2290*/ HRESULT(__stdcall*GetWindow)(
/*2291*/ IOleInPlaceFrame*This,
/*2292*/ HWND*phwnd);
/*2294*/ HRESULT(__stdcall*ContextSensitiveHelp)(
/*2295*/ IOleInPlaceFrame*This,
/*2296*/ BOOL fEnterMode);
/*2298*/ HRESULT(__stdcall*GetBorder)(
/*2299*/ IOleInPlaceFrame*This,
/*2300*/ LPRECT lprectBorder);
/*2302*/ HRESULT(__stdcall*RequestBorderSpace)(
/*2303*/ IOleInPlaceFrame*This,
/*2304*/ LPCBORDERWIDTHS pborderwidths);
/*2306*/ HRESULT(__stdcall*SetBorderSpace)(
/*2307*/ IOleInPlaceFrame*This,
/*2308*/ LPCBORDERWIDTHS pborderwidths);
/*2310*/ HRESULT(__stdcall*SetActiveObject)(
/*2311*/ IOleInPlaceFrame*This,
/*2312*/ IOleInPlaceActiveObject*pActiveObject,
/*2313*/ LPCOLESTR pszObjName);
/*2315*/ HRESULT(__stdcall*InsertMenus)(
/*2316*/ IOleInPlaceFrame*This,
/*2317*/ HMENU hmenuShared,
/*2318*/ LPOLEMENUGROUPWIDTHS lpMenuWidths);
/*2320*/ HRESULT(__stdcall*SetMenu)(
/*2321*/ IOleInPlaceFrame*This,
/*2322*/ HMENU hmenuShared,
/*2323*/ HOLEMENU holemenu,
/*2324*/ HWND hwndActiveObject);
/*2326*/ HRESULT(__stdcall*RemoveMenus)(
/*2327*/ IOleInPlaceFrame*This,
/*2328*/ HMENU hmenuShared);
/*2330*/ HRESULT(__stdcall*SetStatusText)(
/*2331*/ IOleInPlaceFrame*This,
/*2332*/ LPCOLESTR pszStatusText);
/*2334*/ HRESULT(__stdcall*EnableModeless)(
/*2335*/ IOleInPlaceFrame*This,
/*2336*/ BOOL fEnable);
/*2338*/ HRESULT(__stdcall*TranslateAcceleratorA)(
/*2339*/ IOleInPlaceFrame*This,
/*2340*/ LPMSG lpmsg,
/*2341*/ WORD wID);
/*2343*/ 
/*2344*/ }IOleInPlaceFrameVtbl;
/*2346*/ struct IOleInPlaceFrame
/*2347*/ {
/*2348*/ struct IOleInPlaceFrameVtbl*lpVtbl;
/*2349*/ };
/*2421*/ typedef IOleInPlaceObject*LPOLEINPLACEOBJECT;
/*2424*/ extern const IID IID_IOleInPlaceObject;
/*2446*/ typedef struct IOleInPlaceObjectVtbl
/*2447*/ {
/*2448*/ 
/*2450*/ HRESULT(__stdcall*QueryInterface)(
/*2451*/ IOleInPlaceObject*This,
/*2452*/ const IID*const riid,
/*2454*/ void**ppvObject);
/*2456*/ ULONG(__stdcall*AddRef)(
/*2457*/ IOleInPlaceObject*This);
/*2459*/ ULONG(__stdcall*Release)(
/*2460*/ IOleInPlaceObject*This);
/*2462*/ HRESULT(__stdcall*GetWindow)(
/*2463*/ IOleInPlaceObject*This,
/*2464*/ HWND*phwnd);
/*2466*/ HRESULT(__stdcall*ContextSensitiveHelp)(
/*2467*/ IOleInPlaceObject*This,
/*2468*/ BOOL fEnterMode);
/*2470*/ HRESULT(__stdcall*InPlaceDeactivate)(
/*2471*/ IOleInPlaceObject*This);
/*2473*/ HRESULT(__stdcall*UIDeactivate)(
/*2474*/ IOleInPlaceObject*This);
/*2476*/ HRESULT(__stdcall*SetObjectRects)(
/*2477*/ IOleInPlaceObject*This,
/*2478*/ LPCRECT lprcPosRect,
/*2479*/ LPCRECT lprcClipRect);
/*2481*/ HRESULT(__stdcall*ReactivateAndUndo)(
/*2482*/ IOleInPlaceObject*This);
/*2484*/ 
/*2485*/ }IOleInPlaceObjectVtbl;
/*2487*/ struct IOleInPlaceObject
/*2488*/ {
/*2489*/ struct IOleInPlaceObjectVtbl*lpVtbl;
/*2490*/ };
/*2543*/ typedef IOleInPlaceSite*LPOLEINPLACESITE;
/*2546*/ extern const IID IID_IOleInPlaceSite;
/*2586*/ typedef struct IOleInPlaceSiteVtbl
/*2587*/ {
/*2588*/ 
/*2590*/ HRESULT(__stdcall*QueryInterface)(
/*2591*/ IOleInPlaceSite*This,
/*2592*/ const IID*const riid,
/*2594*/ void**ppvObject);
/*2596*/ ULONG(__stdcall*AddRef)(
/*2597*/ IOleInPlaceSite*This);
/*2599*/ ULONG(__stdcall*Release)(
/*2600*/ IOleInPlaceSite*This);
/*2602*/ HRESULT(__stdcall*GetWindow)(
/*2603*/ IOleInPlaceSite*This,
/*2604*/ HWND*phwnd);
/*2606*/ HRESULT(__stdcall*ContextSensitiveHelp)(
/*2607*/ IOleInPlaceSite*This,
/*2608*/ BOOL fEnterMode);
/*2610*/ HRESULT(__stdcall*CanInPlaceActivate)(
/*2611*/ IOleInPlaceSite*This);
/*2613*/ HRESULT(__stdcall*OnInPlaceActivate)(
/*2614*/ IOleInPlaceSite*This);
/*2616*/ HRESULT(__stdcall*OnUIActivate)(
/*2617*/ IOleInPlaceSite*This);
/*2619*/ HRESULT(__stdcall*GetWindowContext)(
/*2620*/ IOleInPlaceSite*This,
/*2621*/ IOleInPlaceFrame**ppFrame,
/*2622*/ IOleInPlaceUIWindow**ppDoc,
/*2623*/ LPRECT lprcPosRect,
/*2624*/ LPRECT lprcClipRect,
/*2625*/ LPOLEINPLACEFRAMEINFO lpFrameInfo);
/*2627*/ HRESULT(__stdcall*Scroll)(
/*2628*/ IOleInPlaceSite*This,
/*2629*/ SIZE scrollExtant);
/*2631*/ HRESULT(__stdcall*OnUIDeactivate)(
/*2632*/ IOleInPlaceSite*This,
/*2633*/ BOOL fUndoable);
/*2635*/ HRESULT(__stdcall*OnInPlaceDeactivate)(
/*2636*/ IOleInPlaceSite*This);
/*2638*/ HRESULT(__stdcall*DiscardUndoState)(
/*2639*/ IOleInPlaceSite*This);
/*2641*/ HRESULT(__stdcall*DeactivateAndUndo)(
/*2642*/ IOleInPlaceSite*This);
/*2644*/ HRESULT(__stdcall*OnPosRectChange)(
/*2645*/ IOleInPlaceSite*This,
/*2646*/ LPCRECT lprcPosRect);
/*2648*/ 
/*2649*/ }IOleInPlaceSiteVtbl;
/*2651*/ struct IOleInPlaceSite
/*2652*/ {
/*2653*/ struct IOleInPlaceSiteVtbl*lpVtbl;
/*2654*/ };
/*2726*/ extern const IID IID_IContinue;
/*2740*/ typedef struct IContinueVtbl
/*2741*/ {
/*2742*/ 
/*2744*/ HRESULT(__stdcall*QueryInterface)(
/*2745*/ IContinue*This,
/*2746*/ const IID*const riid,
/*2748*/ void**ppvObject);
/*2750*/ ULONG(__stdcall*AddRef)(
/*2751*/ IContinue*This);
/*2753*/ ULONG(__stdcall*Release)(
/*2754*/ IContinue*This);
/*2756*/ HRESULT(__stdcall*FContinue)(
/*2757*/ IContinue*This);
/*2759*/ 
/*2760*/ }IContinueVtbl;
/*2762*/ struct IContinue
/*2763*/ {
/*2764*/ struct IContinueVtbl*lpVtbl;
/*2765*/ };
/*2802*/ typedef IViewObject*LPVIEWOBJECT;
/*2805*/ extern const IID IID_IViewObject;
/*2857*/ typedef struct IViewObjectVtbl
/*2858*/ {
/*2859*/ 
/*2861*/ HRESULT(__stdcall*QueryInterface)(
/*2862*/ IViewObject*This,
/*2863*/ const IID*const riid,
/*2865*/ void**ppvObject);
/*2867*/ ULONG(__stdcall*AddRef)(
/*2868*/ IViewObject*This);
/*2870*/ ULONG(__stdcall*Release)(
/*2871*/ IViewObject*This);
/*2873*/ HRESULT(__stdcall*Draw)(
/*2874*/ IViewObject*This,
/*2875*/ DWORD dwDrawAspect,
/*2876*/ LONG lindex,
/*2877*/ void*pvAspect,
/*2878*/ DVTARGETDEVICE*ptd,
/*2879*/ HDC hdcTargetDev,
/*2880*/ HDC hdcDraw,
/*2881*/ LPCRECTL lprcBounds,
/*2882*/ LPCRECTL lprcWBounds,
/*2883*/ BOOL(__stdcall*pfnContinue)(
/*2884*/ ULONG_PTR dwContinue),
/*2885*/ ULONG_PTR dwContinue);
/*2887*/ HRESULT(__stdcall*GetColorSet)(
/*2888*/ IViewObject*This,
/*2889*/ DWORD dwDrawAspect,
/*2890*/ LONG lindex,
/*2891*/ void*pvAspect,
/*2892*/ DVTARGETDEVICE*ptd,
/*2893*/ HDC hicTargetDev,
/*2894*/ LOGPALETTE**ppColorSet);
/*2896*/ HRESULT(__stdcall*Freeze)(
/*2897*/ IViewObject*This,
/*2898*/ DWORD dwDrawAspect,
/*2899*/ LONG lindex,
/*2900*/ void*pvAspect,
/*2901*/ DWORD*pdwFreeze);
/*2903*/ HRESULT(__stdcall*Unfreeze)(
/*2904*/ IViewObject*This,
/*2905*/ DWORD dwFreeze);
/*2907*/ HRESULT(__stdcall*SetAdvise)(
/*2908*/ IViewObject*This,
/*2909*/ DWORD aspects,
/*2910*/ DWORD advf,
/*2911*/ IAdviseSink*pAdvSink);
/*2913*/ HRESULT(__stdcall*GetAdvise)(
/*2914*/ IViewObject*This,
/*2915*/ DWORD*pAspects,
/*2916*/ DWORD*pAdvf,
/*2917*/ IAdviseSink**ppAdvSink);
/*2919*/ 
/*2920*/ }IViewObjectVtbl;
/*2922*/ struct IViewObject
/*2923*/ {
/*2924*/ struct IViewObjectVtbl*lpVtbl;
/*2925*/ };
/*2967*/ HRESULT __stdcall IViewObject_RemoteDraw_Proxy(
/*2968*/ IViewObject*This,
/*2969*/ DWORD dwDrawAspect,
/*2970*/ LONG lindex,
/*2971*/ ULONG_PTR pvAspect,
/*2972*/ DVTARGETDEVICE*ptd,
/*2973*/ HDC hdcTargetDev,
/*2974*/ HDC hdcDraw,
/*2975*/ LPCRECTL lprcBounds,
/*2976*/ LPCRECTL lprcWBounds,
/*2977*/ IContinue*pContinue);
/*2980*/ void IViewObject_RemoteDraw_Stub(
/*2981*/ IRpcStubBuffer*This,
/*2982*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2983*/ PRPC_MESSAGE _pRpcMessage,
/*2984*/ DWORD*_pdwStubPhase);
/*2987*/ HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy(
/*2988*/ IViewObject*This,
/*2989*/ DWORD dwDrawAspect,
/*2990*/ LONG lindex,
/*2991*/ ULONG_PTR pvAspect,
/*2992*/ DVTARGETDEVICE*ptd,
/*2993*/ ULONG_PTR hicTargetDev,
/*2994*/ LOGPALETTE**ppColorSet);
/*2997*/ void IViewObject_RemoteGetColorSet_Stub(
/*2998*/ IRpcStubBuffer*This,
/*2999*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3000*/ PRPC_MESSAGE _pRpcMessage,
/*3001*/ DWORD*_pdwStubPhase);
/*3004*/ HRESULT __stdcall IViewObject_RemoteFreeze_Proxy(
/*3005*/ IViewObject*This,
/*3006*/ DWORD dwDrawAspect,
/*3007*/ LONG lindex,
/*3008*/ ULONG_PTR pvAspect,
/*3009*/ DWORD*pdwFreeze);
/*3012*/ void IViewObject_RemoteFreeze_Stub(
/*3013*/ IRpcStubBuffer*This,
/*3014*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3015*/ PRPC_MESSAGE _pRpcMessage,
/*3016*/ DWORD*_pdwStubPhase);
/*3019*/ HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy(
/*3020*/ IViewObject*This,
/*3021*/ DWORD*pAspects,
/*3022*/ DWORD*pAdvf,
/*3023*/ IAdviseSink**ppAdvSink);
/*3026*/ void IViewObject_RemoteGetAdvise_Stub(
/*3027*/ IRpcStubBuffer*This,
/*3028*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3029*/ PRPC_MESSAGE _pRpcMessage,
/*3030*/ DWORD*_pdwStubPhase);
/*3043*/ typedef IViewObject2*LPVIEWOBJECT2;
/*3046*/ extern const IID IID_IViewObject2;
/*3064*/ typedef struct IViewObject2Vtbl
/*3065*/ {
/*3066*/ 
/*3068*/ HRESULT(__stdcall*QueryInterface)(
/*3069*/ IViewObject2*This,
/*3070*/ const IID*const riid,
/*3072*/ void**ppvObject);
/*3074*/ ULONG(__stdcall*AddRef)(
/*3075*/ IViewObject2*This);
/*3077*/ ULONG(__stdcall*Release)(
/*3078*/ IViewObject2*This);
/*3080*/ HRESULT(__stdcall*Draw)(
/*3081*/ IViewObject2*This,
/*3082*/ DWORD dwDrawAspect,
/*3083*/ LONG lindex,
/*3084*/ void*pvAspect,
/*3085*/ DVTARGETDEVICE*ptd,
/*3086*/ HDC hdcTargetDev,
/*3087*/ HDC hdcDraw,
/*3088*/ LPCRECTL lprcBounds,
/*3089*/ LPCRECTL lprcWBounds,
/*3090*/ BOOL(__stdcall*pfnContinue)(
/*3091*/ ULONG_PTR dwContinue),
/*3092*/ ULONG_PTR dwContinue);
/*3094*/ HRESULT(__stdcall*GetColorSet)(
/*3095*/ IViewObject2*This,
/*3096*/ DWORD dwDrawAspect,
/*3097*/ LONG lindex,
/*3098*/ void*pvAspect,
/*3099*/ DVTARGETDEVICE*ptd,
/*3100*/ HDC hicTargetDev,
/*3101*/ LOGPALETTE**ppColorSet);
/*3103*/ HRESULT(__stdcall*Freeze)(
/*3104*/ IViewObject2*This,
/*3105*/ DWORD dwDrawAspect,
/*3106*/ LONG lindex,
/*3107*/ void*pvAspect,
/*3108*/ DWORD*pdwFreeze);
/*3110*/ HRESULT(__stdcall*Unfreeze)(
/*3111*/ IViewObject2*This,
/*3112*/ DWORD dwFreeze);
/*3114*/ HRESULT(__stdcall*SetAdvise)(
/*3115*/ IViewObject2*This,
/*3116*/ DWORD aspects,
/*3117*/ DWORD advf,
/*3118*/ IAdviseSink*pAdvSink);
/*3120*/ HRESULT(__stdcall*GetAdvise)(
/*3121*/ IViewObject2*This,
/*3122*/ DWORD*pAspects,
/*3123*/ DWORD*pAdvf,
/*3124*/ IAdviseSink**ppAdvSink);
/*3126*/ HRESULT(__stdcall*GetExtent)(
/*3127*/ IViewObject2*This,
/*3128*/ DWORD dwDrawAspect,
/*3129*/ LONG lindex,
/*3130*/ DVTARGETDEVICE*ptd,
/*3131*/ LPSIZEL lpsizel);
/*3133*/ 
/*3134*/ }IViewObject2Vtbl;
/*3136*/ struct IViewObject2
/*3137*/ {
/*3138*/ struct IViewObject2Vtbl*lpVtbl;
/*3139*/ };
/*3195*/ typedef IDropSource*LPDROPSOURCE;
/*3198*/ extern const IID IID_IDropSource;
/*3217*/ typedef struct IDropSourceVtbl
/*3218*/ {
/*3219*/ 
/*3221*/ HRESULT(__stdcall*QueryInterface)(
/*3222*/ IDropSource*This,
/*3223*/ const IID*const riid,
/*3225*/ void**ppvObject);
/*3227*/ ULONG(__stdcall*AddRef)(
/*3228*/ IDropSource*This);
/*3230*/ ULONG(__stdcall*Release)(
/*3231*/ IDropSource*This);
/*3233*/ HRESULT(__stdcall*QueryContinueDrag)(
/*3234*/ IDropSource*This,
/*3235*/ BOOL fEscapePressed,
/*3236*/ DWORD grfKeyState);
/*3238*/ HRESULT(__stdcall*GiveFeedback)(
/*3239*/ IDropSource*This,
/*3240*/ DWORD dwEffect);
/*3242*/ 
/*3243*/ }IDropSourceVtbl;
/*3245*/ struct IDropSource
/*3246*/ {
/*3247*/ struct IDropSourceVtbl*lpVtbl;
/*3248*/ };
/*3288*/ typedef IDropTarget*LPDROPTARGET;
/*3323*/ extern const IID IID_IDropTarget;
/*3354*/ typedef struct IDropTargetVtbl
/*3355*/ {
/*3356*/ 
/*3358*/ HRESULT(__stdcall*QueryInterface)(
/*3359*/ IDropTarget*This,
/*3360*/ const IID*const riid,
/*3362*/ void**ppvObject);
/*3364*/ ULONG(__stdcall*AddRef)(
/*3365*/ IDropTarget*This);
/*3367*/ ULONG(__stdcall*Release)(
/*3368*/ IDropTarget*This);
/*3370*/ HRESULT(__stdcall*DragEnter)(
/*3371*/ IDropTarget*This,
/*3372*/ IDataObject*pDataObj,
/*3373*/ DWORD grfKeyState,
/*3374*/ POINTL pt,
/*3375*/ DWORD*pdwEffect);
/*3377*/ HRESULT(__stdcall*DragOver)(
/*3378*/ IDropTarget*This,
/*3379*/ DWORD grfKeyState,
/*3380*/ POINTL pt,
/*3381*/ DWORD*pdwEffect);
/*3383*/ HRESULT(__stdcall*DragLeave)(
/*3384*/ IDropTarget*This);
/*3386*/ HRESULT(__stdcall*Drop)(
/*3387*/ IDropTarget*This,
/*3388*/ IDataObject*pDataObj,
/*3389*/ DWORD grfKeyState,
/*3390*/ POINTL pt,
/*3391*/ DWORD*pdwEffect);
/*3393*/ 
/*3394*/ }IDropTargetVtbl;
/*3396*/ struct IDropTarget
/*3397*/ {
/*3398*/ struct IDropTargetVtbl*lpVtbl;
/*3399*/ };
/*3446*/ extern const IID IID_IDropSourceNotify;
/*3463*/ typedef struct IDropSourceNotifyVtbl
/*3464*/ {
/*3465*/ 
/*3467*/ HRESULT(__stdcall*QueryInterface)(
/*3468*/ IDropSourceNotify*This,
/*3469*/ const IID*const riid,
/*3471*/ void**ppvObject);
/*3473*/ ULONG(__stdcall*AddRef)(
/*3474*/ IDropSourceNotify*This);
/*3476*/ ULONG(__stdcall*Release)(
/*3477*/ IDropSourceNotify*This);
/*3479*/ HRESULT(__stdcall*DragEnterTarget)(
/*3480*/ IDropSourceNotify*This,
/*3481*/ HWND hwndTarget);
/*3483*/ HRESULT(__stdcall*DragLeaveTarget)(
/*3484*/ IDropSourceNotify*This);
/*3486*/ 
/*3487*/ }IDropSourceNotifyVtbl;
/*3489*/ struct IDropSourceNotify
/*3490*/ {
/*3491*/ struct IDropSourceNotifyVtbl*lpVtbl;
/*3492*/ };
/*3532*/ typedef IEnumOLEVERB*LPENUMOLEVERB;
/*3534*/ typedef struct tagOLEVERB
/*3535*/ {
/*3536*/ LONG lVerb;
/*3537*/ LPOLESTR lpszVerbName;
/*3538*/ DWORD fuFlags;
/*3539*/ DWORD grfAttribs;
/*3540*/ }OLEVERB;
/*3542*/ typedef struct tagOLEVERB*LPOLEVERB;
/*3544*/ typedef
/*3545*/ enum tagOLEVERBATTRIB
/*3546*/ {OLEVERBATTRIB_NEVERDIRTIES=1,
/*3547*/ OLEVERBATTRIB_ONCONTAINERMENU=2
/*3548*/ }OLEVERBATTRIB;
/*3551*/ extern const IID IID_IEnumOLEVERB;
/*3576*/ typedef struct IEnumOLEVERBVtbl
/*3577*/ {
/*3578*/ 
/*3580*/ HRESULT(__stdcall*QueryInterface)(
/*3581*/ IEnumOLEVERB*This,
/*3582*/ const IID*const riid,
/*3584*/ void**ppvObject);
/*3586*/ ULONG(__stdcall*AddRef)(
/*3587*/ IEnumOLEVERB*This);
/*3589*/ ULONG(__stdcall*Release)(
/*3590*/ IEnumOLEVERB*This);
/*3592*/ HRESULT(__stdcall*Next)(
/*3593*/ IEnumOLEVERB*This,
/*3594*/ ULONG celt,
/*3595*/ LPOLEVERB rgelt,
/*3596*/ ULONG*pceltFetched);
/*3598*/ HRESULT(__stdcall*Skip)(
/*3599*/ IEnumOLEVERB*This,
/*3600*/ ULONG celt);
/*3602*/ HRESULT(__stdcall*Reset)(
/*3603*/ IEnumOLEVERB*This);
/*3605*/ HRESULT(__stdcall*Clone)(
/*3606*/ IEnumOLEVERB*This,
/*3607*/ IEnumOLEVERB**ppenum);
/*3609*/ 
/*3610*/ }IEnumOLEVERBVtbl;
/*3612*/ struct IEnumOLEVERB
/*3613*/ {
/*3614*/ struct IEnumOLEVERBVtbl*lpVtbl;
/*3615*/ };
/*3651*/ HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy(
/*3652*/ IEnumOLEVERB*This,
/*3653*/ ULONG celt,
/*3654*/ LPOLEVERB rgelt,
/*3655*/ ULONG*pceltFetched);
/*3658*/ void IEnumOLEVERB_RemoteNext_Stub(
/*3659*/ IRpcStubBuffer*This,
/*3660*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3661*/ PRPC_MESSAGE _pRpcMessage,
/*3662*/ DWORD*_pdwStubPhase);
/*3671*/ unsigned long CLIPFORMAT_UserSize(unsigned long*,unsigned long,CLIPFORMAT*);
/*3672*/ unsigned char*CLIPFORMAT_UserMarshal(unsigned long*,unsigned char*,CLIPFORMAT*);
/*3673*/ unsigned char*CLIPFORMAT_UserUnmarshal(unsigned long*,unsigned char*,CLIPFORMAT*);
/*3674*/ void CLIPFORMAT_UserFree(unsigned long*,CLIPFORMAT*);
/*3676*/ unsigned long HACCEL_UserSize(unsigned long*,unsigned long,HACCEL*);
/*3677*/ unsigned char*HACCEL_UserMarshal(unsigned long*,unsigned char*,HACCEL*);
/*3678*/ unsigned char*HACCEL_UserUnmarshal(unsigned long*,unsigned char*,HACCEL*);
/*3679*/ void HACCEL_UserFree(unsigned long*,HACCEL*);
/*3681*/ unsigned long HDC_UserSize(unsigned long*,unsigned long,HDC*);
/*3682*/ unsigned char*HDC_UserMarshal(unsigned long*,unsigned char*,HDC*);
/*3683*/ unsigned char*HDC_UserUnmarshal(unsigned long*,unsigned char*,HDC*);
/*3684*/ void HDC_UserFree(unsigned long*,HDC*);
/*3686*/ unsigned long HGLOBAL_UserSize(unsigned long*,unsigned long,HGLOBAL*);
/*3687*/ unsigned char*HGLOBAL_UserMarshal(unsigned long*,unsigned char*,HGLOBAL*);
/*3688*/ unsigned char*HGLOBAL_UserUnmarshal(unsigned long*,unsigned char*,HGLOBAL*);
/*3689*/ void HGLOBAL_UserFree(unsigned long*,HGLOBAL*);
/*3691*/ unsigned long HMENU_UserSize(unsigned long*,unsigned long,HMENU*);
/*3692*/ unsigned char*HMENU_UserMarshal(unsigned long*,unsigned char*,HMENU*);
/*3693*/ unsigned char*HMENU_UserUnmarshal(unsigned long*,unsigned char*,HMENU*);
/*3694*/ void HMENU_UserFree(unsigned long*,HMENU*);
/*3696*/ unsigned long HWND_UserSize(unsigned long*,unsigned long,HWND*);
/*3697*/ unsigned char*HWND_UserMarshal(unsigned long*,unsigned char*,HWND*);
/*3698*/ unsigned char*HWND_UserUnmarshal(unsigned long*,unsigned char*,HWND*);
/*3699*/ void HWND_UserFree(unsigned long*,HWND*);
/*3701*/ unsigned long STGMEDIUM_UserSize(unsigned long*,unsigned long,STGMEDIUM*);
/*3702*/ unsigned char*STGMEDIUM_UserMarshal(unsigned long*,unsigned char*,STGMEDIUM*);
/*3703*/ unsigned char*STGMEDIUM_UserUnmarshal(unsigned long*,unsigned char*,STGMEDIUM*);
/*3704*/ void STGMEDIUM_UserFree(unsigned long*,STGMEDIUM*);
/*3706*/ unsigned long CLIPFORMAT_UserSize64(unsigned long*,unsigned long,CLIPFORMAT*);
/*3707*/ unsigned char*CLIPFORMAT_UserMarshal64(unsigned long*,unsigned char*,CLIPFORMAT*);
/*3708*/ unsigned char*CLIPFORMAT_UserUnmarshal64(unsigned long*,unsigned char*,CLIPFORMAT*);
/*3709*/ void CLIPFORMAT_UserFree64(unsigned long*,CLIPFORMAT*);
/*3711*/ unsigned long HACCEL_UserSize64(unsigned long*,unsigned long,HACCEL*);
/*3712*/ unsigned char*HACCEL_UserMarshal64(unsigned long*,unsigned char*,HACCEL*);
/*3713*/ unsigned char*HACCEL_UserUnmarshal64(unsigned long*,unsigned char*,HACCEL*);
/*3714*/ void HACCEL_UserFree64(unsigned long*,HACCEL*);
/*3716*/ unsigned long HDC_UserSize64(unsigned long*,unsigned long,HDC*);
/*3717*/ unsigned char*HDC_UserMarshal64(unsigned long*,unsigned char*,HDC*);
/*3718*/ unsigned char*HDC_UserUnmarshal64(unsigned long*,unsigned char*,HDC*);
/*3719*/ void HDC_UserFree64(unsigned long*,HDC*);
/*3721*/ unsigned long HGLOBAL_UserSize64(unsigned long*,unsigned long,HGLOBAL*);
/*3722*/ unsigned char*HGLOBAL_UserMarshal64(unsigned long*,unsigned char*,HGLOBAL*);
/*3723*/ unsigned char*HGLOBAL_UserUnmarshal64(unsigned long*,unsigned char*,HGLOBAL*);
/*3724*/ void HGLOBAL_UserFree64(unsigned long*,HGLOBAL*);
/*3726*/ unsigned long HMENU_UserSize64(unsigned long*,unsigned long,HMENU*);
/*3727*/ unsigned char*HMENU_UserMarshal64(unsigned long*,unsigned char*,HMENU*);
/*3728*/ unsigned char*HMENU_UserUnmarshal64(unsigned long*,unsigned char*,HMENU*);
/*3729*/ void HMENU_UserFree64(unsigned long*,HMENU*);
/*3731*/ unsigned long HWND_UserSize64(unsigned long*,unsigned long,HWND*);
/*3732*/ unsigned char*HWND_UserMarshal64(unsigned long*,unsigned char*,HWND*);
/*3733*/ unsigned char*HWND_UserUnmarshal64(unsigned long*,unsigned char*,HWND*);
/*3734*/ void HWND_UserFree64(unsigned long*,HWND*);
/*3736*/ unsigned long STGMEDIUM_UserSize64(unsigned long*,unsigned long,STGMEDIUM*);
/*3737*/ unsigned char*STGMEDIUM_UserMarshal64(unsigned long*,unsigned char*,STGMEDIUM*);
/*3738*/ unsigned char*STGMEDIUM_UserUnmarshal64(unsigned long*,unsigned char*,STGMEDIUM*);
/*3739*/ void STGMEDIUM_UserFree64(unsigned long*,STGMEDIUM*);
/*3741*/ HRESULT __stdcall IOleCache2_UpdateCache_Proxy(
/*3742*/ IOleCache2*This,
/*3743*/ LPDATAOBJECT pDataObject,
/*3744*/ DWORD grfUpdf,
/*3745*/ LPVOID pReserved);
/*3748*/ HRESULT __stdcall IOleCache2_UpdateCache_Stub(
/*3749*/ IOleCache2*This,
/*3750*/ LPDATAOBJECT pDataObject,
/*3751*/ DWORD grfUpdf,
/*3752*/ LONG_PTR pReserved);
/*3754*/ HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
/*3755*/ IOleInPlaceActiveObject*This,
/*3756*/ LPMSG lpmsg);
/*3759*/ HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub(
/*3760*/ IOleInPlaceActiveObject*This);
/*3762*/ HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy(
/*3763*/ IOleInPlaceActiveObject*This,
/*3764*/ LPCRECT prcBorder,
/*3765*/ IOleInPlaceUIWindow*pUIWindow,
/*3766*/ BOOL fFrameWindow);
/*3769*/ HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub(
/*3770*/ IOleInPlaceActiveObject*This,
/*3771*/ LPCRECT prcBorder,
/*3772*/ const IID*const riid,
/*3773*/ IOleInPlaceUIWindow*pUIWindow,
/*3774*/ BOOL fFrameWindow);
/*3776*/ HRESULT __stdcall IViewObject_Draw_Proxy(
/*3777*/ IViewObject*This,
/*3778*/ DWORD dwDrawAspect,
/*3779*/ LONG lindex,
/*3780*/ void*pvAspect,
/*3781*/ DVTARGETDEVICE*ptd,
/*3782*/ HDC hdcTargetDev,
/*3783*/ HDC hdcDraw,
/*3784*/ LPCRECTL lprcBounds,
/*3785*/ LPCRECTL lprcWBounds,
/*3786*/ BOOL(__stdcall*pfnContinue)(
/*3787*/ ULONG_PTR dwContinue),
/*3788*/ ULONG_PTR dwContinue);
/*3791*/ HRESULT __stdcall IViewObject_Draw_Stub(
/*3792*/ IViewObject*This,
/*3793*/ DWORD dwDrawAspect,
/*3794*/ LONG lindex,
/*3795*/ ULONG_PTR pvAspect,
/*3796*/ DVTARGETDEVICE*ptd,
/*3797*/ HDC hdcTargetDev,
/*3798*/ HDC hdcDraw,
/*3799*/ LPCRECTL lprcBounds,
/*3800*/ LPCRECTL lprcWBounds,
/*3801*/ IContinue*pContinue);
/*3803*/ HRESULT __stdcall IViewObject_GetColorSet_Proxy(
/*3804*/ IViewObject*This,
/*3805*/ DWORD dwDrawAspect,
/*3806*/ LONG lindex,
/*3807*/ void*pvAspect,
/*3808*/ DVTARGETDEVICE*ptd,
/*3809*/ HDC hicTargetDev,
/*3810*/ LOGPALETTE**ppColorSet);
/*3813*/ HRESULT __stdcall IViewObject_GetColorSet_Stub(
/*3814*/ IViewObject*This,
/*3815*/ DWORD dwDrawAspect,
/*3816*/ LONG lindex,
/*3817*/ ULONG_PTR pvAspect,
/*3818*/ DVTARGETDEVICE*ptd,
/*3819*/ ULONG_PTR hicTargetDev,
/*3820*/ LOGPALETTE**ppColorSet);
/*3822*/ HRESULT __stdcall IViewObject_Freeze_Proxy(
/*3823*/ IViewObject*This,
/*3824*/ DWORD dwDrawAspect,
/*3825*/ LONG lindex,
/*3826*/ void*pvAspect,
/*3827*/ DWORD*pdwFreeze);
/*3830*/ HRESULT __stdcall IViewObject_Freeze_Stub(
/*3831*/ IViewObject*This,
/*3832*/ DWORD dwDrawAspect,
/*3833*/ LONG lindex,
/*3834*/ ULONG_PTR pvAspect,
/*3835*/ DWORD*pdwFreeze);
/*3837*/ HRESULT __stdcall IViewObject_GetAdvise_Proxy(
/*3838*/ IViewObject*This,
/*3839*/ DWORD*pAspects,
/*3840*/ DWORD*pAdvf,
/*3841*/ IAdviseSink**ppAdvSink);
/*3844*/ HRESULT __stdcall IViewObject_GetAdvise_Stub(
/*3845*/ IViewObject*This,
/*3846*/ DWORD*pAspects,
/*3847*/ DWORD*pAdvf,
/*3848*/ IAdviseSink**ppAdvSink);
/*3850*/ HRESULT __stdcall IEnumOLEVERB_Next_Proxy(
/*3851*/ IEnumOLEVERB*This,
/*3852*/ ULONG celt,
/*3853*/ LPOLEVERB rgelt,
/*3854*/ ULONG*pceltFetched);
/*3857*/ HRESULT __stdcall IEnumOLEVERB_Next_Stub(
/*3858*/ IEnumOLEVERB*This,
/*3859*/ ULONG celt,
/*3860*/ LPOLEVERB rgelt,
/*3861*/ ULONG*pceltFetched);
/*53*/ typedef struct IServiceProvider IServiceProvider;
/*87*/ extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
/*88*/ extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;
/*96*/ typedef IServiceProvider*LPSERVICEPROVIDER;
/*133*/ extern const IID IID_IServiceProvider;
/*150*/ typedef struct IServiceProviderVtbl
/*151*/ {
/*152*/ 
/*154*/ HRESULT(__stdcall*QueryInterface)(
/*155*/ IServiceProvider*This,
/*156*/ const IID*const riid,
/*158*/ void**ppvObject);
/*160*/ ULONG(__stdcall*AddRef)(
/*161*/ IServiceProvider*This);
/*163*/ ULONG(__stdcall*Release)(
/*164*/ IServiceProvider*This);
/*166*/ HRESULT(__stdcall*QueryService)(
/*167*/ IServiceProvider*This,
/*168*/ const GUID*const guidService,
/*169*/ const IID*const riid,
/*170*/ void**ppvObject);
/*172*/ 
/*173*/ }IServiceProviderVtbl;
/*175*/ struct IServiceProvider
/*176*/ {
/*177*/ struct IServiceProviderVtbl*lpVtbl;
/*178*/ };
/*205*/ HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy(
/*206*/ IServiceProvider*This,
/*207*/ const GUID*const guidService,
/*208*/ const IID*const riid,
/*209*/ IUnknown**ppvObject);
/*212*/ void IServiceProvider_RemoteQueryService_Stub(
/*213*/ IRpcStubBuffer*This,
/*214*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*215*/ PRPC_MESSAGE _pRpcMessage,
/*216*/ DWORD*_pdwStubPhase);
/*229*/ extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
/*230*/ extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;
/*234*/ HRESULT __stdcall IServiceProvider_QueryService_Proxy(
/*235*/ IServiceProvider*This,
/*236*/ const GUID*const guidService,
/*237*/ const IID*const riid,
/*238*/ void**ppvObject);
/*241*/ HRESULT __stdcall IServiceProvider_QueryService_Stub(
/*242*/ IServiceProvider*This,
/*243*/ const GUID*const guidService,
/*244*/ const IID*const riid,
/*245*/ IUnknown**ppvObject);
/*49*/ typedef struct IXMLDOMImplementation IXMLDOMImplementation;
/*55*/ typedef struct IXMLDOMNode IXMLDOMNode;
/*61*/ typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
/*67*/ typedef struct IXMLDOMDocument IXMLDOMDocument;
/*73*/ typedef struct IXMLDOMNodeList IXMLDOMNodeList;
/*79*/ typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
/*85*/ typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;
/*91*/ typedef struct IXMLDOMAttribute IXMLDOMAttribute;
/*97*/ typedef struct IXMLDOMElement IXMLDOMElement;
/*103*/ typedef struct IXMLDOMText IXMLDOMText;
/*109*/ typedef struct IXMLDOMComment IXMLDOMComment;
/*115*/ typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
/*121*/ typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;
/*127*/ typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;
/*133*/ typedef struct IXMLDOMNotation IXMLDOMNotation;
/*139*/ typedef struct IXMLDOMEntity IXMLDOMEntity;
/*145*/ typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;
/*151*/ typedef struct IXMLDOMParseError IXMLDOMParseError;
/*157*/ typedef struct IXTLRuntime IXTLRuntime;
/*163*/ typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
/*173*/ typedef struct DOMDocument DOMDocument;
/*185*/ typedef struct DOMFreeThreadedDocument DOMFreeThreadedDocument;
/*193*/ typedef struct IXMLHttpRequest IXMLHttpRequest;
/*203*/ typedef struct XMLHTTPRequest XMLHTTPRequest;
/*211*/ typedef struct IXMLDSOControl IXMLDSOControl;
/*221*/ typedef struct XMLDSOControl XMLDSOControl;
/*229*/ typedef struct IXMLElementCollection IXMLElementCollection;
/*235*/ typedef struct IXMLDocument IXMLDocument;
/*241*/ typedef struct IXMLDocument2 IXMLDocument2;
/*247*/ typedef struct IXMLElement IXMLElement;
/*253*/ typedef struct IXMLElement2 IXMLElement2;
/*259*/ typedef struct IXMLAttribute IXMLAttribute;
/*265*/ typedef struct IXMLError IXMLError;
/*275*/ typedef struct XMLDocument XMLDocument;
/*"oaidl.h"53*/ typedef struct ICreateTypeInfo ICreateTypeInfo;
/*59*/ typedef struct ICreateTypeInfo2 ICreateTypeInfo2;
/*65*/ typedef struct ICreateTypeLib ICreateTypeLib;
/*71*/ typedef struct ICreateTypeLib2 ICreateTypeLib2;
/*77*/ typedef struct IDispatch IDispatch;
/*83*/ typedef struct IEnumVARIANT IEnumVARIANT;
/*89*/ typedef struct ITypeComp ITypeComp;
/*95*/ typedef struct ITypeInfo ITypeInfo;
/*101*/ typedef struct ITypeInfo2 ITypeInfo2;
/*107*/ typedef struct ITypeLib ITypeLib;
/*113*/ typedef struct ITypeLib2 ITypeLib2;
/*119*/ typedef struct ITypeChangeEvents ITypeChangeEvents;
/*125*/ typedef struct IErrorInfo IErrorInfo;
/*131*/ typedef struct ICreateErrorInfo ICreateErrorInfo;
/*137*/ typedef struct ISupportErrorInfo ISupportErrorInfo;
/*143*/ typedef struct ITypeFactory ITypeFactory;
/*149*/ typedef struct ITypeMarshal ITypeMarshal;
/*155*/ typedef struct IRecordInfo IRecordInfo;
/*161*/ typedef struct IErrorLog IErrorLog;
/*167*/ typedef struct IPropertyBag IPropertyBag;
/*217*/ extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
/*218*/ extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;
/*226*/ typedef CY CURRENCY;
/*228*/ typedef struct tagSAFEARRAYBOUND
/*229*/ {
/*230*/ ULONG cElements;
/*231*/ LONG lLbound;
/*232*/ }SAFEARRAYBOUND;
/*234*/ typedef struct tagSAFEARRAYBOUND*LPSAFEARRAYBOUND;
/*237*/ typedef struct _wireVARIANT*wireVARIANT;
/*239*/ typedef struct _wireBRECORD*wireBRECORD;
/*241*/ typedef struct _wireSAFEARR_BSTR
/*242*/ {
/*243*/ ULONG Size;
/*244*/ wireBSTR*aBstr;
/*245*/ }SAFEARR_BSTR;
/*247*/ typedef struct _wireSAFEARR_UNKNOWN
/*248*/ {
/*249*/ ULONG Size;
/*250*/ IUnknown**apUnknown;
/*251*/ }SAFEARR_UNKNOWN;
/*253*/ typedef struct _wireSAFEARR_DISPATCH
/*254*/ {
/*255*/ ULONG Size;
/*256*/ IDispatch**apDispatch;
/*257*/ }SAFEARR_DISPATCH;
/*259*/ typedef struct _wireSAFEARR_VARIANT
/*260*/ {
/*261*/ ULONG Size;
/*262*/ wireVARIANT*aVariant;
/*263*/ }SAFEARR_VARIANT;
/*265*/ typedef struct _wireSAFEARR_BRECORD
/*266*/ {
/*267*/ ULONG Size;
/*268*/ wireBRECORD*aRecord;
/*269*/ }SAFEARR_BRECORD;
/*271*/ typedef struct _wireSAFEARR_HAVEIID
/*272*/ {
/*273*/ ULONG Size;
/*274*/ IUnknown**apUnknown;
/*275*/ IID iid;
/*276*/ }SAFEARR_HAVEIID;
/*278*/ typedef
/*279*/ enum tagSF_TYPE
/*280*/ {SF_ERROR=VT_ERROR,
/*281*/ SF_I1=VT_I1,
/*282*/ SF_I2=VT_I2,
/*283*/ SF_I4=VT_I4,
/*284*/ SF_I8=VT_I8,
/*285*/ SF_BSTR=VT_BSTR,
/*286*/ SF_UNKNOWN=VT_UNKNOWN,
/*287*/ SF_DISPATCH=VT_DISPATCH,
/*288*/ SF_VARIANT=VT_VARIANT,
/*289*/ SF_RECORD=VT_RECORD,
/*290*/ SF_HAVEIID=(VT_UNKNOWN|VT_RESERVED)
/*291*/ }SF_TYPE;
/*293*/ typedef struct _wireSAFEARRAY_UNION
/*294*/ {
/*295*/ ULONG sfType;
/*296*/ union __MIDL_IOleAutomationTypes_0001
/*297*/ {
/*298*/ SAFEARR_BSTR BstrStr;
/*299*/ SAFEARR_UNKNOWN UnknownStr;
/*300*/ SAFEARR_DISPATCH DispatchStr;
/*301*/ SAFEARR_VARIANT VariantStr;
/*302*/ SAFEARR_BRECORD RecordStr;
/*303*/ SAFEARR_HAVEIID HaveIidStr;
/*304*/ BYTE_SIZEDARR ByteStr;
/*305*/ WORD_SIZEDARR WordStr;
/*306*/ DWORD_SIZEDARR LongStr;
/*307*/ HYPER_SIZEDARR HyperStr;
/*308*/ }u;
/*309*/ }SAFEARRAYUNION;
/*311*/ typedef struct _wireSAFEARRAY
/*312*/ {
/*313*/ USHORT cDims;
/*314*/ USHORT fFeatures;
/*315*/ ULONG cbElements;
/*316*/ ULONG cLocks;
/*317*/ SAFEARRAYUNION uArrayStructs;
/*318*/ SAFEARRAYBOUND rgsabound[1];
/*319*/ }*wireSAFEARRAY;
/*321*/ typedef wireSAFEARRAY*wirePSAFEARRAY;
/*323*/ typedef struct tagSAFEARRAY
/*324*/ {
/*325*/ USHORT cDims;
/*326*/ USHORT fFeatures;
/*327*/ ULONG cbElements;
/*328*/ ULONG cLocks;
/*329*/ PVOID pvData;
/*330*/ SAFEARRAYBOUND rgsabound[1];
/*331*/ }SAFEARRAY;
/*333*/ typedef SAFEARRAY*LPSAFEARRAY;
/*424*/ typedef struct tagVARIANT VARIANT;
/*426*/ struct tagVARIANT
/*427*/ {
/*428*/ union
/*429*/ {
/*430*/ struct
/*431*/ {
/*432*/ VARTYPE vt;
/*433*/ WORD wReserved1;
/*434*/ WORD wReserved2;
/*435*/ WORD wReserved3;
/*436*/ union
/*437*/ {
/*438*/ LONGLONG llVal;
/*439*/ LONG lVal;
/*440*/ BYTE bVal;
/*441*/ SHORT iVal;
/*442*/ FLOAT fltVal;
/*443*/ DOUBLE dblVal;
/*444*/ VARIANT_BOOL boolVal;
/*445*/ 
/*446*/ SCODE scode;
/*447*/ CY cyVal;
/*448*/ DATE date;
/*449*/ BSTR bstrVal;
/*450*/ IUnknown*punkVal;
/*451*/ IDispatch*pdispVal;
/*452*/ SAFEARRAY*parray;
/*453*/ BYTE*pbVal;
/*454*/ SHORT*piVal;
/*455*/ LONG*plVal;
/*456*/ LONGLONG*pllVal;
/*457*/ FLOAT*pfltVal;
/*458*/ DOUBLE*pdblVal;
/*459*/ VARIANT_BOOL*pboolVal;
/*460*/ /
/*461*/ SCODE*pscode;
/*462*/ CY*pcyVal;
/*463*/ DATE*pdate;
/*464*/ BSTR*pbstrVal;
/*465*/ IUnknown**ppunkVal;
/*466*/ IDispatch**ppdispVal;
/*467*/ SAFEARRAY**pparray;
/*468*/ VARIANT*pvarVal;
/*469*/ PVOID byref;
/*470*/ CHAR cVal;
/*471*/ USHORT uiVal;
/*472*/ ULONG ulVal;
/*473*/ ULONGLONG ullVal;
/*474*/ INT intVal;
/*475*/ UINT uintVal;
/*476*/ DECIMAL*pdecVal;
/*477*/ CHAR*pcVal;
/*478*/ USHORT*puiVal;
/*479*/ ULONG*pulVal;
/*480*/ ULONGLONG*pullVal;
/*481*/ INT*pintVal;
/*482*/ UINT*puintVal;
/*483*/ struct
/*484*/ {
/*485*/ PVOID pvRecord;
/*486*/ IRecordInfo*pRecInfo;
/*487*/ };
/*488*/ };
/*489*/ };
/*490*/ DECIMAL decVal;
/*491*/ };
/*492*/ };
/*493*/ typedef VARIANT*LPVARIANT;
/*495*/ typedef VARIANT VARIANTARG;
/*497*/ typedef VARIANT*LPVARIANTARG;
/*516*/ struct _wireBRECORD
/*517*/ {
/*518*/ ULONG fFlags;
/*519*/ ULONG clSize;
/*520*/ IRecordInfo*pRecInfo;
/*521*/ byte*pRecord;
/*522*/ };
/*523*/ struct _wireVARIANT
/*524*/ {
/*525*/ DWORD clSize;
/*526*/ DWORD rpcReserved;
/*527*/ USHORT vt;
/*528*/ USHORT wReserved1;
/*529*/ USHORT wReserved2;
/*530*/ USHORT wReserved3;
/*531*/ union
/*532*/ {
/*533*/ LONGLONG llVal;
/*534*/ LONG lVal;
/*535*/ BYTE bVal;
/*536*/ SHORT iVal;
/*537*/ FLOAT fltVal;
/*538*/ DOUBLE dblVal;
/*539*/ VARIANT_BOOL boolVal;
/*540*/ SCODE scode;
/*541*/ CY cyVal;
/*542*/ DATE date;
/*543*/ wireBSTR bstrVal;
/*544*/ IUnknown*punkVal;
/*545*/ IDispatch*pdispVal;
/*546*/ wirePSAFEARRAY parray;
/*547*/ wireBRECORD brecVal;
/*548*/ BYTE*pbVal;
/*549*/ SHORT*piVal;
/*550*/ LONG*plVal;
/*551*/ LONGLONG*pllVal;
/*552*/ FLOAT*pfltVal;
/*553*/ DOUBLE*pdblVal;
/*554*/ VARIANT_BOOL*pboolVal;
/*555*/ SCODE*pscode;
/*556*/ CY*pcyVal;
/*557*/ DATE*pdate;
/*558*/ wireBSTR*pbstrVal;
/*559*/ IUnknown**ppunkVal;
/*560*/ IDispatch**ppdispVal;
/*561*/ wirePSAFEARRAY*pparray;
/*562*/ wireVARIANT*pvarVal;
/*563*/ CHAR cVal;
/*564*/ USHORT uiVal;
/*565*/ ULONG ulVal;
/*566*/ ULONGLONG ullVal;
/*567*/ INT intVal;
/*568*/ UINT uintVal;
/*569*/ DECIMAL decVal;
/*570*/ DECIMAL*pdecVal;
/*571*/ CHAR*pcVal;
/*572*/ USHORT*puiVal;
/*573*/ ULONG*pulVal;
/*574*/ ULONGLONG*pullVal;
/*575*/ INT*pintVal;
/*576*/ UINT*puintVal;
/*579*/ }u;
/*580*/ };
/*581*/ typedef LONG DISPID;
/*583*/ typedef DISPID MEMBERID;
/*585*/ typedef DWORD HREFTYPE;
/*587*/ typedef
/*588*/ enum tagTYPEKIND
/*589*/ {TKIND_ENUM=0,
/*590*/ TKIND_RECORD=(TKIND_ENUM+1),
/*591*/ TKIND_MODULE=(TKIND_RECORD+1),
/*592*/ TKIND_INTERFACE=(TKIND_MODULE+1),
/*593*/ TKIND_DISPATCH=(TKIND_INTERFACE+1),
/*594*/ TKIND_COCLASS=(TKIND_DISPATCH+1),
/*595*/ TKIND_ALIAS=(TKIND_COCLASS+1),
/*596*/ TKIND_UNION=(TKIND_ALIAS+1),
/*597*/ TKIND_MAX=(TKIND_UNION+1)
/*598*/ }TYPEKIND;
/*600*/ typedef struct tagTYPEDESC
/*601*/ {
/*602*/ union
/*603*/ {
/*604*/ struct tagTYPEDESC*lptdesc;
/*605*/ struct tagARRAYDESC*lpadesc;
/*606*/ HREFTYPE hreftype;
/*608*/ }u;
/*609*/ VARTYPE vt;
/*610*/ }TYPEDESC;
/*612*/ typedef struct tagARRAYDESC
/*613*/ {
/*614*/ TYPEDESC tdescElem;
/*615*/ USHORT cDims;
/*616*/ SAFEARRAYBOUND rgbounds[1];
/*617*/ }ARRAYDESC;
/*619*/ typedef struct tagPARAMDESCEX
/*620*/ {
/*621*/ ULONG cBytes;
/*622*/ VARIANTARG varDefaultValue;
/*623*/ }PARAMDESCEX;
/*625*/ typedef struct tagPARAMDESCEX*LPPARAMDESCEX;
/*627*/ typedef struct tagPARAMDESC
/*628*/ {
/*629*/ LPPARAMDESCEX pparamdescex;
/*630*/ USHORT wParamFlags;
/*631*/ }PARAMDESC;
/*633*/ typedef struct tagPARAMDESC*LPPARAMDESC;
/*651*/ typedef struct tagIDLDESC
/*652*/ {
/*653*/ ULONG_PTR dwReserved;
/*654*/ USHORT wIDLFlags;
/*655*/ }IDLDESC;
/*657*/ typedef struct tagIDLDESC*LPIDLDESC;
/*680*/ typedef struct tagELEMDESC{
/*681*/ TYPEDESC tdesc;
/*682*/ union{
/*683*/ IDLDESC idldesc;
/*684*/ PARAMDESC paramdesc;
/*685*/ }u;
/*686*/ }ELEMDESC,*LPELEMDESC;
/*690*/ typedef struct tagTYPEATTR
/*691*/ {
/*692*/ GUID guid;
/*693*/ LCID lcid;
/*694*/ DWORD dwReserved;
/*695*/ MEMBERID memidConstructor;
/*696*/ MEMBERID memidDestructor;
/*697*/ LPOLESTR lpstrSchema;
/*698*/ ULONG cbSizeInstance;
/*699*/ TYPEKIND typekind;
/*700*/ WORD cFuncs;
/*701*/ WORD cVars;
/*702*/ WORD cImplTypes;
/*703*/ WORD cbSizeVft;
/*704*/ WORD cbAlignment;
/*705*/ WORD wTypeFlags;
/*706*/ WORD wMajorVerNum;
/*707*/ WORD wMinorVerNum;
/*708*/ TYPEDESC tdescAlias;
/*709*/ IDLDESC idldescType;
/*710*/ }TYPEATTR;
/*712*/ typedef struct tagTYPEATTR*LPTYPEATTR;
/*714*/ typedef struct tagDISPPARAMS
/*715*/ {
/*716*/ VARIANTARG*rgvarg;
/*717*/ DISPID*rgdispidNamedArgs;
/*718*/ UINT cArgs;
/*719*/ UINT cNamedArgs;
/*720*/ }DISPPARAMS;
/*741*/ typedef struct tagEXCEPINFO{
/*742*/ WORD wCode;
/*743*/ WORD wReserved;
/*744*/ BSTR bstrSource;
/*745*/ BSTR bstrDescription;
/*746*/ BSTR bstrHelpFile;
/*747*/ DWORD dwHelpContext;
/*748*/ PVOID pvReserved;
/*749*/ HRESULT(__stdcall*pfnDeferredFillIn)(struct tagEXCEPINFO*);
/*750*/ SCODE scode;
/*751*/ }EXCEPINFO,*LPEXCEPINFO;
/*755*/ typedef
/*756*/ enum tagCALLCONV
/*757*/ {CC_FASTCALL=0,
/*758*/ CC_CDECL=1,
/*759*/ CC_MSCPASCAL=(CC_CDECL+1),
/*760*/ CC_PASCAL=CC_MSCPASCAL,
/*761*/ CC_MACPASCAL=(CC_PASCAL+1),
/*762*/ CC_STDCALL=(CC_MACPASCAL+1),
/*763*/ CC_FPFASTCALL=(CC_STDCALL+1),
/*764*/ CC_SYSCALL=(CC_FPFASTCALL+1),
/*765*/ CC_MPWCDECL=(CC_SYSCALL+1),
/*766*/ CC_MPWPASCAL=(CC_MPWCDECL+1),
/*767*/ CC_MAX=(CC_MPWPASCAL+1)
/*768*/ }CALLCONV;
/*770*/ typedef
/*771*/ enum tagFUNCKIND
/*772*/ {FUNC_VIRTUAL=0,
/*773*/ FUNC_PUREVIRTUAL=(FUNC_VIRTUAL+1),
/*774*/ FUNC_NONVIRTUAL=(FUNC_PUREVIRTUAL+1),
/*775*/ FUNC_STATIC=(FUNC_NONVIRTUAL+1),
/*776*/ FUNC_DISPATCH=(FUNC_STATIC+1)
/*777*/ }FUNCKIND;
/*779*/ typedef
/*780*/ enum tagINVOKEKIND
/*781*/ {INVOKE_FUNC=1,
/*782*/ INVOKE_PROPERTYGET=2,
/*783*/ INVOKE_PROPERTYPUT=4,
/*784*/ INVOKE_PROPERTYPUTREF=8
/*785*/ }INVOKEKIND;
/*787*/ typedef struct tagFUNCDESC
/*788*/ {
/*789*/ MEMBERID memid;
/*790*/ SCODE*lprgscode;
/*791*/ ELEMDESC*lprgelemdescParam;
/*792*/ FUNCKIND funckind;
/*793*/ INVOKEKIND invkind;
/*794*/ CALLCONV callconv;
/*795*/ SHORT cParams;
/*796*/ SHORT cParamsOpt;
/*797*/ SHORT oVft;
/*798*/ SHORT cScodes;
/*799*/ ELEMDESC elemdescFunc;
/*800*/ WORD wFuncFlags;
/*801*/ }FUNCDESC;
/*803*/ typedef struct tagFUNCDESC*LPFUNCDESC;
/*805*/ typedef
/*806*/ enum tagVARKIND
/*807*/ {VAR_PERINSTANCE=0,
/*808*/ VAR_STATIC=(VAR_PERINSTANCE+1),
/*809*/ VAR_CONST=(VAR_STATIC+1),
/*810*/ VAR_DISPATCH=(VAR_CONST+1)
/*811*/ }VARKIND;
/*821*/ typedef struct tagVARDESC
/*822*/ {
/*823*/ MEMBERID memid;
/*824*/ LPOLESTR lpstrSchema;
/*825*/ union
/*826*/ {
/*827*/ ULONG oInst;
/*828*/ VARIANT*lpvarValue;
/*829*/ }u;
/*830*/ ELEMDESC elemdescVar;
/*831*/ WORD wVarFlags;
/*832*/ VARKIND varkind;
/*833*/ }VARDESC;
/*835*/ typedef struct tagVARDESC*LPVARDESC;
/*837*/ typedef
/*838*/ enum tagTYPEFLAGS
/*839*/ {TYPEFLAG_FAPPOBJECT=0x1,
/*840*/ TYPEFLAG_FCANCREATE=0x2,
/*841*/ TYPEFLAG_FLICENSED=0x4,
/*842*/ TYPEFLAG_FPREDECLID=0x8,
/*843*/ TYPEFLAG_FHIDDEN=0x10,
/*844*/ TYPEFLAG_FCONTROL=0x20,
/*845*/ TYPEFLAG_FDUAL=0x40,
/*846*/ TYPEFLAG_FNONEXTENSIBLE=0x80,
/*847*/ TYPEFLAG_FOLEAUTOMATION=0x100,
/*848*/ TYPEFLAG_FRESTRICTED=0x200,
/*849*/ TYPEFLAG_FAGGREGATABLE=0x400,
/*850*/ TYPEFLAG_FREPLACEABLE=0x800,
/*851*/ TYPEFLAG_FDISPATCHABLE=0x1000,
/*852*/ TYPEFLAG_FREVERSEBIND=0x2000,
/*853*/ TYPEFLAG_FPROXY=0x4000
/*854*/ }TYPEFLAGS;
/*856*/ typedef
/*857*/ enum tagFUNCFLAGS
/*858*/ {FUNCFLAG_FRESTRICTED=0x1,
/*859*/ FUNCFLAG_FSOURCE=0x2,
/*860*/ FUNCFLAG_FBINDABLE=0x4,
/*861*/ FUNCFLAG_FREQUESTEDIT=0x8,
/*862*/ FUNCFLAG_FDISPLAYBIND=0x10,
/*863*/ FUNCFLAG_FDEFAULTBIND=0x20,
/*864*/ FUNCFLAG_FHIDDEN=0x40,
/*865*/ FUNCFLAG_FUSESGETLASTERROR=0x80,
/*866*/ FUNCFLAG_FDEFAULTCOLLELEM=0x100,
/*867*/ FUNCFLAG_FUIDEFAULT=0x200,
/*868*/ FUNCFLAG_FNONBROWSABLE=0x400,
/*869*/ FUNCFLAG_FREPLACEABLE=0x800,
/*870*/ FUNCFLAG_FIMMEDIATEBIND=0x1000
/*871*/ }FUNCFLAGS;
/*873*/ typedef
/*874*/ enum tagVARFLAGS
/*875*/ {VARFLAG_FREADONLY=0x1,
/*876*/ VARFLAG_FSOURCE=0x2,
/*877*/ VARFLAG_FBINDABLE=0x4,
/*878*/ VARFLAG_FREQUESTEDIT=0x8,
/*879*/ VARFLAG_FDISPLAYBIND=0x10,
/*880*/ VARFLAG_FDEFAULTBIND=0x20,
/*881*/ VARFLAG_FHIDDEN=0x40,
/*882*/ VARFLAG_FRESTRICTED=0x80,
/*883*/ VARFLAG_FDEFAULTCOLLELEM=0x100,
/*884*/ VARFLAG_FUIDEFAULT=0x200,
/*885*/ VARFLAG_FNONBROWSABLE=0x400,
/*886*/ VARFLAG_FREPLACEABLE=0x800,
/*887*/ VARFLAG_FIMMEDIATEBIND=0x1000
/*888*/ }VARFLAGS;
/*890*/ typedef struct tagCLEANLOCALSTORAGE
/*891*/ {
/*892*/ IUnknown*pInterface;
/*893*/ PVOID pStorage;
/*894*/ DWORD flags;
/*895*/ }CLEANLOCALSTORAGE;
/*897*/ typedef struct tagCUSTDATAITEM
/*898*/ {
/*899*/ GUID guid;
/*900*/ VARIANTARG varValue;
/*901*/ }CUSTDATAITEM;
/*903*/ typedef struct tagCUSTDATAITEM*LPCUSTDATAITEM;
/*905*/ typedef struct tagCUSTDATA
/*906*/ {
/*907*/ DWORD cCustData;
/*908*/ LPCUSTDATAITEM prgCustData;
/*909*/ }CUSTDATA;
/*911*/ typedef struct tagCUSTDATA*LPCUSTDATA;
/*915*/ extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
/*916*/ extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
/*925*/ typedef ICreateTypeInfo*LPCREATETYPEINFO;
/*928*/ extern const IID IID_ICreateTypeInfo;
/*1024*/ typedef struct ICreateTypeInfoVtbl
/*1025*/ {
/*1026*/ 
/*1028*/ HRESULT(__stdcall*QueryInterface)(
/*1029*/ ICreateTypeInfo*This,
/*1030*/ const IID*const riid,
/*1032*/ void**ppvObject);
/*1034*/ ULONG(__stdcall*AddRef)(
/*1035*/ ICreateTypeInfo*This);
/*1037*/ ULONG(__stdcall*Release)(
/*1038*/ ICreateTypeInfo*This);
/*1040*/ HRESULT(__stdcall*SetGuid)(
/*1041*/ ICreateTypeInfo*This,
/*1042*/ const GUID*const guid);
/*1044*/ HRESULT(__stdcall*SetTypeFlags)(
/*1045*/ ICreateTypeInfo*This,
/*1046*/ UINT uTypeFlags);
/*1048*/ HRESULT(__stdcall*SetDocString)(
/*1049*/ ICreateTypeInfo*This,
/*1050*/ LPOLESTR pStrDoc);
/*1052*/ HRESULT(__stdcall*SetHelpContext)(
/*1053*/ ICreateTypeInfo*This,
/*1054*/ DWORD dwHelpContext);
/*1056*/ HRESULT(__stdcall*SetVersion)(
/*1057*/ ICreateTypeInfo*This,
/*1058*/ WORD wMajorVerNum,
/*1059*/ WORD wMinorVerNum);
/*1061*/ HRESULT(__stdcall*AddRefTypeInfo)(
/*1062*/ ICreateTypeInfo*This,
/*1063*/ ITypeInfo*pTInfo,
/*1064*/ HREFTYPE*phRefType);
/*1066*/ HRESULT(__stdcall*AddFuncDesc)(
/*1067*/ ICreateTypeInfo*This,
/*1068*/ UINT index,
/*1069*/ FUNCDESC*pFuncDesc);
/*1071*/ HRESULT(__stdcall*AddImplType)(
/*1072*/ ICreateTypeInfo*This,
/*1073*/ UINT index,
/*1074*/ HREFTYPE hRefType);
/*1076*/ HRESULT(__stdcall*SetImplTypeFlags)(
/*1077*/ ICreateTypeInfo*This,
/*1078*/ UINT index,
/*1079*/ INT implTypeFlags);
/*1081*/ HRESULT(__stdcall*SetAlignment)(
/*1082*/ ICreateTypeInfo*This,
/*1083*/ WORD cbAlignment);
/*1085*/ HRESULT(__stdcall*SetSchema)(
/*1086*/ ICreateTypeInfo*This,
/*1087*/ LPOLESTR pStrSchema);
/*1089*/ HRESULT(__stdcall*AddVarDesc)(
/*1090*/ ICreateTypeInfo*This,
/*1091*/ UINT index,
/*1092*/ VARDESC*pVarDesc);
/*1094*/ HRESULT(__stdcall*SetFuncAndParamNames)(
/*1095*/ ICreateTypeInfo*This,
/*1096*/ UINT index,
/*1097*/ LPOLESTR*rgszNames,
/*1098*/ UINT cNames);
/*1100*/ HRESULT(__stdcall*SetVarName)(
/*1101*/ ICreateTypeInfo*This,
/*1102*/ UINT index,
/*1103*/ LPOLESTR szName);
/*1105*/ HRESULT(__stdcall*SetTypeDescAlias)(
/*1106*/ ICreateTypeInfo*This,
/*1107*/ TYPEDESC*pTDescAlias);
/*1109*/ HRESULT(__stdcall*DefineFuncAsDllEntry)(
/*1110*/ ICreateTypeInfo*This,
/*1111*/ UINT index,
/*1112*/ LPOLESTR szDllName,
/*1113*/ LPOLESTR szProcName);
/*1115*/ HRESULT(__stdcall*SetFuncDocString)(
/*1116*/ ICreateTypeInfo*This,
/*1117*/ UINT index,
/*1118*/ LPOLESTR szDocString);
/*1120*/ HRESULT(__stdcall*SetVarDocString)(
/*1121*/ ICreateTypeInfo*This,
/*1122*/ UINT index,
/*1123*/ LPOLESTR szDocString);
/*1125*/ HRESULT(__stdcall*SetFuncHelpContext)(
/*1126*/ ICreateTypeInfo*This,
/*1127*/ UINT index,
/*1128*/ DWORD dwHelpContext);
/*1130*/ HRESULT(__stdcall*SetVarHelpContext)(
/*1131*/ ICreateTypeInfo*This,
/*1132*/ UINT index,
/*1133*/ DWORD dwHelpContext);
/*1135*/ HRESULT(__stdcall*SetMops)(
/*1136*/ ICreateTypeInfo*This,
/*1137*/ UINT index,
/*1138*/ BSTR bstrMops);
/*1140*/ HRESULT(__stdcall*SetTypeIdldesc)(
/*1141*/ ICreateTypeInfo*This,
/*1142*/ IDLDESC*pIdlDesc);
/*1144*/ HRESULT(__stdcall*LayOut)(
/*1145*/ ICreateTypeInfo*This);
/*1147*/ 
/*1148*/ }ICreateTypeInfoVtbl;
/*1150*/ struct ICreateTypeInfo
/*1151*/ {
/*1152*/ struct ICreateTypeInfoVtbl*lpVtbl;
/*1153*/ };
/*1256*/ typedef ICreateTypeInfo2*LPCREATETYPEINFO2;
/*1259*/ extern const IID IID_ICreateTypeInfo2;
/*1328*/ typedef struct ICreateTypeInfo2Vtbl
/*1329*/ {
/*1330*/ 
/*1332*/ HRESULT(__stdcall*QueryInterface)(
/*1333*/ ICreateTypeInfo2*This,
/*1334*/ const IID*const riid,
/*1336*/ void**ppvObject);
/*1338*/ ULONG(__stdcall*AddRef)(
/*1339*/ ICreateTypeInfo2*This);
/*1341*/ ULONG(__stdcall*Release)(
/*1342*/ ICreateTypeInfo2*This);
/*1344*/ HRESULT(__stdcall*SetGuid)(
/*1345*/ ICreateTypeInfo2*This,
/*1346*/ const GUID*const guid);
/*1348*/ HRESULT(__stdcall*SetTypeFlags)(
/*1349*/ ICreateTypeInfo2*This,
/*1350*/ UINT uTypeFlags);
/*1352*/ HRESULT(__stdcall*SetDocString)(
/*1353*/ ICreateTypeInfo2*This,
/*1354*/ LPOLESTR pStrDoc);
/*1356*/ HRESULT(__stdcall*SetHelpContext)(
/*1357*/ ICreateTypeInfo2*This,
/*1358*/ DWORD dwHelpContext);
/*1360*/ HRESULT(__stdcall*SetVersion)(
/*1361*/ ICreateTypeInfo2*This,
/*1362*/ WORD wMajorVerNum,
/*1363*/ WORD wMinorVerNum);
/*1365*/ HRESULT(__stdcall*AddRefTypeInfo)(
/*1366*/ ICreateTypeInfo2*This,
/*1367*/ ITypeInfo*pTInfo,
/*1368*/ HREFTYPE*phRefType);
/*1370*/ HRESULT(__stdcall*AddFuncDesc)(
/*1371*/ ICreateTypeInfo2*This,
/*1372*/ UINT index,
/*1373*/ FUNCDESC*pFuncDesc);
/*1375*/ HRESULT(__stdcall*AddImplType)(
/*1376*/ ICreateTypeInfo2*This,
/*1377*/ UINT index,
/*1378*/ HREFTYPE hRefType);
/*1380*/ HRESULT(__stdcall*SetImplTypeFlags)(
/*1381*/ ICreateTypeInfo2*This,
/*1382*/ UINT index,
/*1383*/ INT implTypeFlags);
/*1385*/ HRESULT(__stdcall*SetAlignment)(
/*1386*/ ICreateTypeInfo2*This,
/*1387*/ WORD cbAlignment);
/*1389*/ HRESULT(__stdcall*SetSchema)(
/*1390*/ ICreateTypeInfo2*This,
/*1391*/ LPOLESTR pStrSchema);
/*1393*/ HRESULT(__stdcall*AddVarDesc)(
/*1394*/ ICreateTypeInfo2*This,
/*1395*/ UINT index,
/*1396*/ VARDESC*pVarDesc);
/*1398*/ HRESULT(__stdcall*SetFuncAndParamNames)(
/*1399*/ ICreateTypeInfo2*This,
/*1400*/ UINT index,
/*1401*/ LPOLESTR*rgszNames,
/*1402*/ UINT cNames);
/*1404*/ HRESULT(__stdcall*SetVarName)(
/*1405*/ ICreateTypeInfo2*This,
/*1406*/ UINT index,
/*1407*/ LPOLESTR szName);
/*1409*/ HRESULT(__stdcall*SetTypeDescAlias)(
/*1410*/ ICreateTypeInfo2*This,
/*1411*/ TYPEDESC*pTDescAlias);
/*1413*/ HRESULT(__stdcall*DefineFuncAsDllEntry)(
/*1414*/ ICreateTypeInfo2*This,
/*1415*/ UINT index,
/*1416*/ LPOLESTR szDllName,
/*1417*/ LPOLESTR szProcName);
/*1419*/ HRESULT(__stdcall*SetFuncDocString)(
/*1420*/ ICreateTypeInfo2*This,
/*1421*/ UINT index,
/*1422*/ LPOLESTR szDocString);
/*1424*/ HRESULT(__stdcall*SetVarDocString)(
/*1425*/ ICreateTypeInfo2*This,
/*1426*/ UINT index,
/*1427*/ LPOLESTR szDocString);
/*1429*/ HRESULT(__stdcall*SetFuncHelpContext)(
/*1430*/ ICreateTypeInfo2*This,
/*1431*/ UINT index,
/*1432*/ DWORD dwHelpContext);
/*1434*/ HRESULT(__stdcall*SetVarHelpContext)(
/*1435*/ ICreateTypeInfo2*This,
/*1436*/ UINT index,
/*1437*/ DWORD dwHelpContext);
/*1439*/ HRESULT(__stdcall*SetMops)(
/*1440*/ ICreateTypeInfo2*This,
/*1441*/ UINT index,
/*1442*/ BSTR bstrMops);
/*1444*/ HRESULT(__stdcall*SetTypeIdldesc)(
/*1445*/ ICreateTypeInfo2*This,
/*1446*/ IDLDESC*pIdlDesc);
/*1448*/ HRESULT(__stdcall*LayOut)(
/*1449*/ ICreateTypeInfo2*This);
/*1451*/ HRESULT(__stdcall*DeleteFuncDesc)(
/*1452*/ ICreateTypeInfo2*This,
/*1453*/ UINT index);
/*1455*/ HRESULT(__stdcall*DeleteFuncDescByMemId)(
/*1456*/ ICreateTypeInfo2*This,
/*1457*/ MEMBERID memid,
/*1458*/ INVOKEKIND invKind);
/*1460*/ HRESULT(__stdcall*DeleteVarDesc)(
/*1461*/ ICreateTypeInfo2*This,
/*1462*/ UINT index);
/*1464*/ HRESULT(__stdcall*DeleteVarDescByMemId)(
/*1465*/ ICreateTypeInfo2*This,
/*1466*/ MEMBERID memid);
/*1468*/ HRESULT(__stdcall*DeleteImplType)(
/*1469*/ ICreateTypeInfo2*This,
/*1470*/ UINT index);
/*1472*/ HRESULT(__stdcall*SetCustData)(
/*1473*/ ICreateTypeInfo2*This,
/*1474*/ const GUID*const guid,
/*1475*/ VARIANT*pVarVal);
/*1477*/ HRESULT(__stdcall*SetFuncCustData)(
/*1478*/ ICreateTypeInfo2*This,
/*1479*/ UINT index,
/*1480*/ const GUID*const guid,
/*1481*/ VARIANT*pVarVal);
/*1483*/ HRESULT(__stdcall*SetParamCustData)(
/*1484*/ ICreateTypeInfo2*This,
/*1485*/ UINT indexFunc,
/*1486*/ UINT indexParam,
/*1487*/ const GUID*const guid,
/*1488*/ VARIANT*pVarVal);
/*1490*/ HRESULT(__stdcall*SetVarCustData)(
/*1491*/ ICreateTypeInfo2*This,
/*1492*/ UINT index,
/*1493*/ const GUID*const guid,
/*1494*/ VARIANT*pVarVal);
/*1496*/ HRESULT(__stdcall*SetImplTypeCustData)(
/*1497*/ ICreateTypeInfo2*This,
/*1498*/ UINT index,
/*1499*/ const GUID*const guid,
/*1500*/ VARIANT*pVarVal);
/*1502*/ HRESULT(__stdcall*SetHelpStringContext)(
/*1503*/ ICreateTypeInfo2*This,
/*1504*/ ULONG dwHelpStringContext);
/*1506*/ HRESULT(__stdcall*SetFuncHelpStringContext)(
/*1507*/ ICreateTypeInfo2*This,
/*1508*/ UINT index,
/*1509*/ ULONG dwHelpStringContext);
/*1511*/ HRESULT(__stdcall*SetVarHelpStringContext)(
/*1512*/ ICreateTypeInfo2*This,
/*1513*/ UINT index,
/*1514*/ ULONG dwHelpStringContext);
/*1516*/ HRESULT(__stdcall*Invalidate)(
/*1517*/ ICreateTypeInfo2*This);
/*1519*/ HRESULT(__stdcall*SetName)(
/*1520*/ ICreateTypeInfo2*This,
/*1521*/ LPOLESTR szName);
/*1523*/ 
/*1524*/ }ICreateTypeInfo2Vtbl;
/*1526*/ struct ICreateTypeInfo2
/*1527*/ {
/*1528*/ struct ICreateTypeInfo2Vtbl*lpVtbl;
/*1529*/ };
/*1678*/ typedef ICreateTypeLib*LPCREATETYPELIB;
/*1681*/ extern const IID IID_ICreateTypeLib;
/*1725*/ typedef struct ICreateTypeLibVtbl
/*1726*/ {
/*1727*/ 
/*1729*/ HRESULT(__stdcall*QueryInterface)(
/*1730*/ ICreateTypeLib*This,
/*1731*/ const IID*const riid,
/*1733*/ void**ppvObject);
/*1735*/ ULONG(__stdcall*AddRef)(
/*1736*/ ICreateTypeLib*This);
/*1738*/ ULONG(__stdcall*Release)(
/*1739*/ ICreateTypeLib*This);
/*1741*/ HRESULT(__stdcall*CreateTypeInfo)(
/*1742*/ ICreateTypeLib*This,
/*1743*/ LPOLESTR szName,
/*1744*/ TYPEKIND tkind,
/*1745*/ ICreateTypeInfo**ppCTInfo);
/*1747*/ HRESULT(__stdcall*SetName)(
/*1748*/ ICreateTypeLib*This,
/*1749*/ LPOLESTR szName);
/*1751*/ HRESULT(__stdcall*SetVersion)(
/*1752*/ ICreateTypeLib*This,
/*1753*/ WORD wMajorVerNum,
/*1754*/ WORD wMinorVerNum);
/*1756*/ HRESULT(__stdcall*SetGuid)(
/*1757*/ ICreateTypeLib*This,
/*1758*/ const GUID*const guid);
/*1760*/ HRESULT(__stdcall*SetDocString)(
/*1761*/ ICreateTypeLib*This,
/*1762*/ LPOLESTR szDoc);
/*1764*/ HRESULT(__stdcall*SetHelpFileName)(
/*1765*/ ICreateTypeLib*This,
/*1766*/ LPOLESTR szHelpFileName);
/*1768*/ HRESULT(__stdcall*SetHelpContext)(
/*1769*/ ICreateTypeLib*This,
/*1770*/ DWORD dwHelpContext);
/*1772*/ HRESULT(__stdcall*SetLcid)(
/*1773*/ ICreateTypeLib*This,
/*1774*/ LCID lcid);
/*1776*/ HRESULT(__stdcall*SetLibFlags)(
/*1777*/ ICreateTypeLib*This,
/*1778*/ UINT uLibFlags);
/*1780*/ HRESULT(__stdcall*SaveAllChanges)(
/*1781*/ ICreateTypeLib*This);
/*1783*/ 
/*1784*/ }ICreateTypeLibVtbl;
/*1786*/ struct ICreateTypeLib
/*1787*/ {
/*1788*/ struct ICreateTypeLibVtbl*lpVtbl;
/*1789*/ };
/*1853*/ typedef ICreateTypeLib2*LPCREATETYPELIB2;
/*1856*/ extern const IID IID_ICreateTypeLib2;
/*1881*/ typedef struct ICreateTypeLib2Vtbl
/*1882*/ {
/*1883*/ 
/*1885*/ HRESULT(__stdcall*QueryInterface)(
/*1886*/ ICreateTypeLib2*This,
/*1887*/ const IID*const riid,
/*1889*/ void**ppvObject);
/*1891*/ ULONG(__stdcall*AddRef)(
/*1892*/ ICreateTypeLib2*This);
/*1894*/ ULONG(__stdcall*Release)(
/*1895*/ ICreateTypeLib2*This);
/*1897*/ HRESULT(__stdcall*CreateTypeInfo)(
/*1898*/ ICreateTypeLib2*This,
/*1899*/ LPOLESTR szName,
/*1900*/ TYPEKIND tkind,
/*1901*/ ICreateTypeInfo**ppCTInfo);
/*1903*/ HRESULT(__stdcall*SetName)(
/*1904*/ ICreateTypeLib2*This,
/*1905*/ LPOLESTR szName);
/*1907*/ HRESULT(__stdcall*SetVersion)(
/*1908*/ ICreateTypeLib2*This,
/*1909*/ WORD wMajorVerNum,
/*1910*/ WORD wMinorVerNum);
/*1912*/ HRESULT(__stdcall*SetGuid)(
/*1913*/ ICreateTypeLib2*This,
/*1914*/ const GUID*const guid);
/*1916*/ HRESULT(__stdcall*SetDocString)(
/*1917*/ ICreateTypeLib2*This,
/*1918*/ LPOLESTR szDoc);
/*1920*/ HRESULT(__stdcall*SetHelpFileName)(
/*1921*/ ICreateTypeLib2*This,
/*1922*/ LPOLESTR szHelpFileName);
/*1924*/ HRESULT(__stdcall*SetHelpContext)(
/*1925*/ ICreateTypeLib2*This,
/*1926*/ DWORD dwHelpContext);
/*1928*/ HRESULT(__stdcall*SetLcid)(
/*1929*/ ICreateTypeLib2*This,
/*1930*/ LCID lcid);
/*1932*/ HRESULT(__stdcall*SetLibFlags)(
/*1933*/ ICreateTypeLib2*This,
/*1934*/ UINT uLibFlags);
/*1936*/ HRESULT(__stdcall*SaveAllChanges)(
/*1937*/ ICreateTypeLib2*This);
/*1939*/ HRESULT(__stdcall*DeleteTypeInfo)(
/*1940*/ ICreateTypeLib2*This,
/*1941*/ LPOLESTR szName);
/*1943*/ HRESULT(__stdcall*SetCustData)(
/*1944*/ ICreateTypeLib2*This,
/*1945*/ const GUID*const guid,
/*1946*/ VARIANT*pVarVal);
/*1948*/ HRESULT(__stdcall*SetHelpStringContext)(
/*1949*/ ICreateTypeLib2*This,
/*1950*/ ULONG dwHelpStringContext);
/*1952*/ HRESULT(__stdcall*SetHelpStringDll)(
/*1953*/ ICreateTypeLib2*This,
/*1954*/ LPOLESTR szFileName);
/*1956*/ 
/*1957*/ }ICreateTypeLib2Vtbl;
/*1959*/ struct ICreateTypeLib2
/*1960*/ {
/*1961*/ struct ICreateTypeLib2Vtbl*lpVtbl;
/*1962*/ };
/*2039*/ typedef IDispatch*LPDISPATCH;
/*2073*/ extern const IID IID_IDispatch;
/*2110*/ typedef struct IDispatchVtbl
/*2111*/ {
/*2112*/ 
/*2114*/ HRESULT(__stdcall*QueryInterface)(
/*2115*/ IDispatch*This,
/*2116*/ const IID*const riid,
/*2118*/ void**ppvObject);
/*2120*/ ULONG(__stdcall*AddRef)(
/*2121*/ IDispatch*This);
/*2123*/ ULONG(__stdcall*Release)(
/*2124*/ IDispatch*This);
/*2126*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*2127*/ IDispatch*This,
/*2128*/ UINT*pctinfo);
/*2130*/ HRESULT(__stdcall*GetTypeInfo)(
/*2131*/ IDispatch*This,
/*2132*/ UINT iTInfo,
/*2133*/ LCID lcid,
/*2134*/ ITypeInfo**ppTInfo);
/*2136*/ HRESULT(__stdcall*GetIDsOfNames)(
/*2137*/ IDispatch*This,
/*2138*/ const IID*const riid,
/*2139*/ LPOLESTR*rgszNames,
/*2140*/ UINT cNames,
/*2141*/ LCID lcid,
/*2142*/ DISPID*rgDispId);
/*2144*/ HRESULT(__stdcall*Invoke)(
/*2145*/ IDispatch*This,
/*2146*/ DISPID dispIdMember,
/*2147*/ const IID*const riid,
/*2148*/ LCID lcid,
/*2149*/ WORD wFlags,
/*2150*/ DISPPARAMS*pDispParams,
/*2151*/ VARIANT*pVarResult,
/*2152*/ EXCEPINFO*pExcepInfo,
/*2153*/ UINT*puArgErr);
/*2155*/ 
/*2156*/ }IDispatchVtbl;
/*2158*/ struct IDispatch
/*2159*/ {
/*2160*/ struct IDispatchVtbl*lpVtbl;
/*2161*/ };
/*2197*/ HRESULT __stdcall IDispatch_RemoteInvoke_Proxy(
/*2198*/ IDispatch*This,
/*2199*/ DISPID dispIdMember,
/*2200*/ const IID*const riid,
/*2201*/ LCID lcid,
/*2202*/ DWORD dwFlags,
/*2203*/ DISPPARAMS*pDispParams,
/*2204*/ VARIANT*pVarResult,
/*2205*/ EXCEPINFO*pExcepInfo,
/*2206*/ UINT*pArgErr,
/*2207*/ UINT cVarRef,
/*2208*/ UINT*rgVarRefIdx,
/*2209*/ VARIANTARG*rgVarRef);
/*2212*/ void IDispatch_RemoteInvoke_Stub(
/*2213*/ IRpcStubBuffer*This,
/*2214*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2215*/ PRPC_MESSAGE _pRpcMessage,
/*2216*/ DWORD*_pdwStubPhase);
/*2229*/ typedef IEnumVARIANT*LPENUMVARIANT;
/*2232*/ extern const IID IID_IEnumVARIANT;
/*2257*/ typedef struct IEnumVARIANTVtbl
/*2258*/ {
/*2259*/ 
/*2261*/ HRESULT(__stdcall*QueryInterface)(
/*2262*/ IEnumVARIANT*This,
/*2263*/ const IID*const riid,
/*2265*/ void**ppvObject);
/*2267*/ ULONG(__stdcall*AddRef)(
/*2268*/ IEnumVARIANT*This);
/*2270*/ ULONG(__stdcall*Release)(
/*2271*/ IEnumVARIANT*This);
/*2273*/ HRESULT(__stdcall*Next)(
/*2274*/ IEnumVARIANT*This,
/*2275*/ ULONG celt,
/*2276*/ VARIANT*rgVar,
/*2277*/ ULONG*pCeltFetched);
/*2279*/ HRESULT(__stdcall*Skip)(
/*2280*/ IEnumVARIANT*This,
/*2281*/ ULONG celt);
/*2283*/ HRESULT(__stdcall*Reset)(
/*2284*/ IEnumVARIANT*This);
/*2286*/ HRESULT(__stdcall*Clone)(
/*2287*/ IEnumVARIANT*This,
/*2288*/ IEnumVARIANT**ppEnum);
/*2290*/ 
/*2291*/ }IEnumVARIANTVtbl;
/*2293*/ struct IEnumVARIANT
/*2294*/ {
/*2295*/ struct IEnumVARIANTVtbl*lpVtbl;
/*2296*/ };
/*2332*/ HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy(
/*2333*/ IEnumVARIANT*This,
/*2334*/ ULONG celt,
/*2335*/ VARIANT*rgVar,
/*2336*/ ULONG*pCeltFetched);
/*2339*/ void IEnumVARIANT_RemoteNext_Stub(
/*2340*/ IRpcStubBuffer*This,
/*2341*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2342*/ PRPC_MESSAGE _pRpcMessage,
/*2343*/ DWORD*_pdwStubPhase);
/*2356*/ typedef ITypeComp*LPTYPECOMP;
/*2358*/ typedef
/*2359*/ enum tagDESCKIND
/*2360*/ {DESCKIND_NONE=0,
/*2361*/ DESCKIND_FUNCDESC=(DESCKIND_NONE+1),
/*2362*/ DESCKIND_VARDESC=(DESCKIND_FUNCDESC+1),
/*2363*/ DESCKIND_TYPECOMP=(DESCKIND_VARDESC+1),
/*2364*/ DESCKIND_IMPLICITAPPOBJ=(DESCKIND_TYPECOMP+1),
/*2365*/ DESCKIND_MAX=(DESCKIND_IMPLICITAPPOBJ+1)
/*2366*/ }DESCKIND;
/*2368*/ typedef union tagBINDPTR
/*2369*/ {
/*2370*/ FUNCDESC*lpfuncdesc;
/*2371*/ VARDESC*lpvardesc;
/*2372*/ ITypeComp*lptcomp;
/*2373*/ }BINDPTR;
/*2375*/ typedef union tagBINDPTR*LPBINDPTR;
/*2378*/ extern const IID IID_ITypeComp;
/*2404*/ typedef struct ITypeCompVtbl
/*2405*/ {
/*2406*/ 
/*2408*/ HRESULT(__stdcall*QueryInterface)(
/*2409*/ ITypeComp*This,
/*2410*/ const IID*const riid,
/*2412*/ void**ppvObject);
/*2414*/ ULONG(__stdcall*AddRef)(
/*2415*/ ITypeComp*This);
/*2417*/ ULONG(__stdcall*Release)(
/*2418*/ ITypeComp*This);
/*2420*/ HRESULT(__stdcall*Bind)(
/*2421*/ ITypeComp*This,
/*2422*/ LPOLESTR szName,
/*2423*/ ULONG lHashVal,
/*2424*/ WORD wFlags,
/*2425*/ ITypeInfo**ppTInfo,
/*2426*/ DESCKIND*pDescKind,
/*2427*/ BINDPTR*pBindPtr);
/*2429*/ HRESULT(__stdcall*BindType)(
/*2430*/ ITypeComp*This,
/*2431*/ LPOLESTR szName,
/*2432*/ ULONG lHashVal,
/*2433*/ ITypeInfo**ppTInfo,
/*2434*/ ITypeComp**ppTComp);
/*2436*/ 
/*2437*/ }ITypeCompVtbl;
/*2439*/ struct ITypeComp
/*2440*/ {
/*2441*/ struct ITypeCompVtbl*lpVtbl;
/*2442*/ };
/*2472*/ HRESULT __stdcall ITypeComp_RemoteBind_Proxy(
/*2473*/ ITypeComp*This,
/*2474*/ LPOLESTR szName,
/*2475*/ ULONG lHashVal,
/*2476*/ WORD wFlags,
/*2477*/ ITypeInfo**ppTInfo,
/*2478*/ DESCKIND*pDescKind,
/*2479*/ LPFUNCDESC*ppFuncDesc,
/*2480*/ LPVARDESC*ppVarDesc,
/*2481*/ ITypeComp**ppTypeComp,
/*2482*/ CLEANLOCALSTORAGE*pDummy);
/*2485*/ void ITypeComp_RemoteBind_Stub(
/*2486*/ IRpcStubBuffer*This,
/*2487*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2488*/ PRPC_MESSAGE _pRpcMessage,
/*2489*/ DWORD*_pdwStubPhase);
/*2492*/ HRESULT __stdcall ITypeComp_RemoteBindType_Proxy(
/*2493*/ ITypeComp*This,
/*2494*/ LPOLESTR szName,
/*2495*/ ULONG lHashVal,
/*2496*/ ITypeInfo**ppTInfo);
/*2499*/ void ITypeComp_RemoteBindType_Stub(
/*2500*/ IRpcStubBuffer*This,
/*2501*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2502*/ PRPC_MESSAGE _pRpcMessage,
/*2503*/ DWORD*_pdwStubPhase);
/*2516*/ typedef ITypeInfo*LPTYPEINFO;
/*2519*/ extern const IID IID_ITypeInfo;
/*2618*/ typedef struct ITypeInfoVtbl
/*2619*/ {
/*2620*/ 
/*2622*/ HRESULT(__stdcall*QueryInterface)(
/*2623*/ ITypeInfo*This,
/*2624*/ const IID*const riid,
/*2626*/ void**ppvObject);
/*2628*/ ULONG(__stdcall*AddRef)(
/*2629*/ ITypeInfo*This);
/*2631*/ ULONG(__stdcall*Release)(
/*2632*/ ITypeInfo*This);
/*2634*/ HRESULT(__stdcall*GetTypeAttr)(
/*2635*/ ITypeInfo*This,
/*2636*/ TYPEATTR**ppTypeAttr);
/*2638*/ HRESULT(__stdcall*GetTypeComp)(
/*2639*/ ITypeInfo*This,
/*2640*/ ITypeComp**ppTComp);
/*2642*/ HRESULT(__stdcall*GetFuncDesc)(
/*2643*/ ITypeInfo*This,
/*2644*/ UINT index,
/*2645*/ FUNCDESC**ppFuncDesc);
/*2647*/ HRESULT(__stdcall*GetVarDesc)(
/*2648*/ ITypeInfo*This,
/*2649*/ UINT index,
/*2650*/ VARDESC**ppVarDesc);
/*2652*/ HRESULT(__stdcall*GetNames)(
/*2653*/ ITypeInfo*This,
/*2654*/ MEMBERID memid,
/*2655*/ BSTR*rgBstrNames,
/*2656*/ UINT cMaxNames,
/*2657*/ UINT*pcNames);
/*2659*/ HRESULT(__stdcall*GetRefTypeOfImplType)(
/*2660*/ ITypeInfo*This,
/*2661*/ UINT index,
/*2662*/ HREFTYPE*pRefType);
/*2664*/ HRESULT(__stdcall*GetImplTypeFlags)(
/*2665*/ ITypeInfo*This,
/*2666*/ UINT index,
/*2667*/ INT*pImplTypeFlags);
/*2669*/ HRESULT(__stdcall*GetIDsOfNames)(
/*2670*/ ITypeInfo*This,
/*2671*/ LPOLESTR*rgszNames,
/*2672*/ UINT cNames,
/*2673*/ MEMBERID*pMemId);
/*2675*/ HRESULT(__stdcall*Invoke)(
/*2676*/ ITypeInfo*This,
/*2677*/ PVOID pvInstance,
/*2678*/ MEMBERID memid,
/*2679*/ WORD wFlags,
/*2680*/ DISPPARAMS*pDispParams,
/*2681*/ VARIANT*pVarResult,
/*2682*/ EXCEPINFO*pExcepInfo,
/*2683*/ UINT*puArgErr);
/*2685*/ HRESULT(__stdcall*GetDocumentation)(
/*2686*/ ITypeInfo*This,
/*2687*/ MEMBERID memid,
/*2688*/ BSTR*pBstrName,
/*2689*/ BSTR*pBstrDocString,
/*2690*/ DWORD*pdwHelpContext,
/*2691*/ BSTR*pBstrHelpFile);
/*2693*/ HRESULT(__stdcall*GetDllEntry)(
/*2694*/ ITypeInfo*This,
/*2695*/ MEMBERID memid,
/*2696*/ INVOKEKIND invKind,
/*2697*/ BSTR*pBstrDllName,
/*2698*/ BSTR*pBstrName,
/*2699*/ WORD*pwOrdinal);
/*2701*/ HRESULT(__stdcall*GetRefTypeInfo)(
/*2702*/ ITypeInfo*This,
/*2703*/ HREFTYPE hRefType,
/*2704*/ ITypeInfo**ppTInfo);
/*2706*/ HRESULT(__stdcall*AddressOfMember)(
/*2707*/ ITypeInfo*This,
/*2708*/ MEMBERID memid,
/*2709*/ INVOKEKIND invKind,
/*2710*/ PVOID*ppv);
/*2712*/ HRESULT(__stdcall*CreateInstance)(
/*2713*/ ITypeInfo*This,
/*2714*/ IUnknown*pUnkOuter,
/*2715*/ const IID*const riid,
/*2716*/ PVOID*ppvObj);
/*2718*/ HRESULT(__stdcall*GetMops)(
/*2719*/ ITypeInfo*This,
/*2720*/ MEMBERID memid,
/*2721*/ BSTR*pBstrMops);
/*2723*/ HRESULT(__stdcall*GetContainingTypeLib)(
/*2724*/ ITypeInfo*This,
/*2725*/ ITypeLib**ppTLib,
/*2726*/ UINT*pIndex);
/*2728*/ void(__stdcall*ReleaseTypeAttr)(
/*2729*/ ITypeInfo*This,
/*2730*/ TYPEATTR*pTypeAttr);
/*2732*/ void(__stdcall*ReleaseFuncDesc)(
/*2733*/ ITypeInfo*This,
/*2734*/ FUNCDESC*pFuncDesc);
/*2736*/ void(__stdcall*ReleaseVarDesc)(
/*2737*/ ITypeInfo*This,
/*2738*/ VARDESC*pVarDesc);
/*2740*/ 
/*2741*/ }ITypeInfoVtbl;
/*2743*/ struct ITypeInfo
/*2744*/ {
/*2745*/ struct ITypeInfoVtbl*lpVtbl;
/*2746*/ };
/*2827*/ HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy(
/*2828*/ ITypeInfo*This,
/*2829*/ LPTYPEATTR*ppTypeAttr,
/*2830*/ CLEANLOCALSTORAGE*pDummy);
/*2833*/ void ITypeInfo_RemoteGetTypeAttr_Stub(
/*2834*/ IRpcStubBuffer*This,
/*2835*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2836*/ PRPC_MESSAGE _pRpcMessage,
/*2837*/ DWORD*_pdwStubPhase);
/*2840*/ HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy(
/*2841*/ ITypeInfo*This,
/*2842*/ UINT index,
/*2843*/ LPFUNCDESC*ppFuncDesc,
/*2844*/ CLEANLOCALSTORAGE*pDummy);
/*2847*/ void ITypeInfo_RemoteGetFuncDesc_Stub(
/*2848*/ IRpcStubBuffer*This,
/*2849*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2850*/ PRPC_MESSAGE _pRpcMessage,
/*2851*/ DWORD*_pdwStubPhase);
/*2854*/ HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy(
/*2855*/ ITypeInfo*This,
/*2856*/ UINT index,
/*2857*/ LPVARDESC*ppVarDesc,
/*2858*/ CLEANLOCALSTORAGE*pDummy);
/*2861*/ void ITypeInfo_RemoteGetVarDesc_Stub(
/*2862*/ IRpcStubBuffer*This,
/*2863*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2864*/ PRPC_MESSAGE _pRpcMessage,
/*2865*/ DWORD*_pdwStubPhase);
/*2868*/ HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy(
/*2869*/ ITypeInfo*This,
/*2870*/ MEMBERID memid,
/*2871*/ BSTR*rgBstrNames,
/*2872*/ UINT cMaxNames,
/*2873*/ UINT*pcNames);
/*2876*/ void ITypeInfo_RemoteGetNames_Stub(
/*2877*/ IRpcStubBuffer*This,
/*2878*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2879*/ PRPC_MESSAGE _pRpcMessage,
/*2880*/ DWORD*_pdwStubPhase);
/*2883*/ HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy(
/*2884*/ ITypeInfo*This);
/*2887*/ void ITypeInfo_LocalGetIDsOfNames_Stub(
/*2888*/ IRpcStubBuffer*This,
/*2889*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2890*/ PRPC_MESSAGE _pRpcMessage,
/*2891*/ DWORD*_pdwStubPhase);
/*2894*/ HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy(
/*2895*/ ITypeInfo*This);
/*2898*/ void ITypeInfo_LocalInvoke_Stub(
/*2899*/ IRpcStubBuffer*This,
/*2900*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2901*/ PRPC_MESSAGE _pRpcMessage,
/*2902*/ DWORD*_pdwStubPhase);
/*2905*/ HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy(
/*2906*/ ITypeInfo*This,
/*2907*/ MEMBERID memid,
/*2908*/ DWORD refPtrFlags,
/*2909*/ BSTR*pBstrName,
/*2910*/ BSTR*pBstrDocString,
/*2911*/ DWORD*pdwHelpContext,
/*2912*/ BSTR*pBstrHelpFile);
/*2915*/ void ITypeInfo_RemoteGetDocumentation_Stub(
/*2916*/ IRpcStubBuffer*This,
/*2917*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2918*/ PRPC_MESSAGE _pRpcMessage,
/*2919*/ DWORD*_pdwStubPhase);
/*2922*/ HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy(
/*2923*/ ITypeInfo*This,
/*2924*/ MEMBERID memid,
/*2925*/ INVOKEKIND invKind,
/*2926*/ DWORD refPtrFlags,
/*2927*/ BSTR*pBstrDllName,
/*2928*/ BSTR*pBstrName,
/*2929*/ WORD*pwOrdinal);
/*2932*/ void ITypeInfo_RemoteGetDllEntry_Stub(
/*2933*/ IRpcStubBuffer*This,
/*2934*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2935*/ PRPC_MESSAGE _pRpcMessage,
/*2936*/ DWORD*_pdwStubPhase);
/*2939*/ HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy(
/*2940*/ ITypeInfo*This);
/*2943*/ void ITypeInfo_LocalAddressOfMember_Stub(
/*2944*/ IRpcStubBuffer*This,
/*2945*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2946*/ PRPC_MESSAGE _pRpcMessage,
/*2947*/ DWORD*_pdwStubPhase);
/*2950*/ HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy(
/*2951*/ ITypeInfo*This,
/*2952*/ const IID*const riid,
/*2953*/ IUnknown**ppvObj);
/*2956*/ void ITypeInfo_RemoteCreateInstance_Stub(
/*2957*/ IRpcStubBuffer*This,
/*2958*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2959*/ PRPC_MESSAGE _pRpcMessage,
/*2960*/ DWORD*_pdwStubPhase);
/*2963*/ HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy(
/*2964*/ ITypeInfo*This,
/*2965*/ ITypeLib**ppTLib,
/*2966*/ UINT*pIndex);
/*2969*/ void ITypeInfo_RemoteGetContainingTypeLib_Stub(
/*2970*/ IRpcStubBuffer*This,
/*2971*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2972*/ PRPC_MESSAGE _pRpcMessage,
/*2973*/ DWORD*_pdwStubPhase);
/*2976*/ HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy(
/*2977*/ ITypeInfo*This);
/*2980*/ void ITypeInfo_LocalReleaseTypeAttr_Stub(
/*2981*/ IRpcStubBuffer*This,
/*2982*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2983*/ PRPC_MESSAGE _pRpcMessage,
/*2984*/ DWORD*_pdwStubPhase);
/*2987*/ HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy(
/*2988*/ ITypeInfo*This);
/*2991*/ void ITypeInfo_LocalReleaseFuncDesc_Stub(
/*2992*/ IRpcStubBuffer*This,
/*2993*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*2994*/ PRPC_MESSAGE _pRpcMessage,
/*2995*/ DWORD*_pdwStubPhase);
/*2998*/ HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy(
/*2999*/ ITypeInfo*This);
/*3002*/ void ITypeInfo_LocalReleaseVarDesc_Stub(
/*3003*/ IRpcStubBuffer*This,
/*3004*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3005*/ PRPC_MESSAGE _pRpcMessage,
/*3006*/ DWORD*_pdwStubPhase);
/*3019*/ typedef ITypeInfo2*LPTYPEINFO2;
/*3022*/ extern const IID IID_ITypeInfo2;
/*3101*/ typedef struct ITypeInfo2Vtbl
/*3102*/ {
/*3103*/ 
/*3105*/ HRESULT(__stdcall*QueryInterface)(
/*3106*/ ITypeInfo2*This,
/*3107*/ const IID*const riid,
/*3109*/ void**ppvObject);
/*3111*/ ULONG(__stdcall*AddRef)(
/*3112*/ ITypeInfo2*This);
/*3114*/ ULONG(__stdcall*Release)(
/*3115*/ ITypeInfo2*This);
/*3117*/ HRESULT(__stdcall*GetTypeAttr)(
/*3118*/ ITypeInfo2*This,
/*3119*/ TYPEATTR**ppTypeAttr);
/*3121*/ HRESULT(__stdcall*GetTypeComp)(
/*3122*/ ITypeInfo2*This,
/*3123*/ ITypeComp**ppTComp);
/*3125*/ HRESULT(__stdcall*GetFuncDesc)(
/*3126*/ ITypeInfo2*This,
/*3127*/ UINT index,
/*3128*/ FUNCDESC**ppFuncDesc);
/*3130*/ HRESULT(__stdcall*GetVarDesc)(
/*3131*/ ITypeInfo2*This,
/*3132*/ UINT index,
/*3133*/ VARDESC**ppVarDesc);
/*3135*/ HRESULT(__stdcall*GetNames)(
/*3136*/ ITypeInfo2*This,
/*3137*/ MEMBERID memid,
/*3138*/ BSTR*rgBstrNames,
/*3139*/ UINT cMaxNames,
/*3140*/ UINT*pcNames);
/*3142*/ HRESULT(__stdcall*GetRefTypeOfImplType)(
/*3143*/ ITypeInfo2*This,
/*3144*/ UINT index,
/*3145*/ HREFTYPE*pRefType);
/*3147*/ HRESULT(__stdcall*GetImplTypeFlags)(
/*3148*/ ITypeInfo2*This,
/*3149*/ UINT index,
/*3150*/ INT*pImplTypeFlags);
/*3152*/ HRESULT(__stdcall*GetIDsOfNames)(
/*3153*/ ITypeInfo2*This,
/*3154*/ LPOLESTR*rgszNames,
/*3155*/ UINT cNames,
/*3156*/ MEMBERID*pMemId);
/*3158*/ HRESULT(__stdcall*Invoke)(
/*3159*/ ITypeInfo2*This,
/*3160*/ PVOID pvInstance,
/*3161*/ MEMBERID memid,
/*3162*/ WORD wFlags,
/*3163*/ DISPPARAMS*pDispParams,
/*3164*/ VARIANT*pVarResult,
/*3165*/ EXCEPINFO*pExcepInfo,
/*3166*/ UINT*puArgErr);
/*3168*/ HRESULT(__stdcall*GetDocumentation)(
/*3169*/ ITypeInfo2*This,
/*3170*/ MEMBERID memid,
/*3171*/ BSTR*pBstrName,
/*3172*/ BSTR*pBstrDocString,
/*3173*/ DWORD*pdwHelpContext,
/*3174*/ BSTR*pBstrHelpFile);
/*3176*/ HRESULT(__stdcall*GetDllEntry)(
/*3177*/ ITypeInfo2*This,
/*3178*/ MEMBERID memid,
/*3179*/ INVOKEKIND invKind,
/*3180*/ BSTR*pBstrDllName,
/*3181*/ BSTR*pBstrName,
/*3182*/ WORD*pwOrdinal);
/*3184*/ HRESULT(__stdcall*GetRefTypeInfo)(
/*3185*/ ITypeInfo2*This,
/*3186*/ HREFTYPE hRefType,
/*3187*/ ITypeInfo**ppTInfo);
/*3189*/ HRESULT(__stdcall*AddressOfMember)(
/*3190*/ ITypeInfo2*This,
/*3191*/ MEMBERID memid,
/*3192*/ INVOKEKIND invKind,
/*3193*/ PVOID*ppv);
/*3195*/ HRESULT(__stdcall*CreateInstance)(
/*3196*/ ITypeInfo2*This,
/*3197*/ IUnknown*pUnkOuter,
/*3198*/ const IID*const riid,
/*3199*/ PVOID*ppvObj);
/*3201*/ HRESULT(__stdcall*GetMops)(
/*3202*/ ITypeInfo2*This,
/*3203*/ MEMBERID memid,
/*3204*/ BSTR*pBstrMops);
/*3206*/ HRESULT(__stdcall*GetContainingTypeLib)(
/*3207*/ ITypeInfo2*This,
/*3208*/ ITypeLib**ppTLib,
/*3209*/ UINT*pIndex);
/*3211*/ void(__stdcall*ReleaseTypeAttr)(
/*3212*/ ITypeInfo2*This,
/*3213*/ TYPEATTR*pTypeAttr);
/*3215*/ void(__stdcall*ReleaseFuncDesc)(
/*3216*/ ITypeInfo2*This,
/*3217*/ FUNCDESC*pFuncDesc);
/*3219*/ void(__stdcall*ReleaseVarDesc)(
/*3220*/ ITypeInfo2*This,
/*3221*/ VARDESC*pVarDesc);
/*3223*/ HRESULT(__stdcall*GetTypeKind)(
/*3224*/ ITypeInfo2*This,
/*3225*/ TYPEKIND*pTypeKind);
/*3227*/ HRESULT(__stdcall*GetTypeFlags)(
/*3228*/ ITypeInfo2*This,
/*3229*/ ULONG*pTypeFlags);
/*3231*/ HRESULT(__stdcall*GetFuncIndexOfMemId)(
/*3232*/ ITypeInfo2*This,
/*3233*/ MEMBERID memid,
/*3234*/ INVOKEKIND invKind,
/*3235*/ UINT*pFuncIndex);
/*3237*/ HRESULT(__stdcall*GetVarIndexOfMemId)(
/*3238*/ ITypeInfo2*This,
/*3239*/ MEMBERID memid,
/*3240*/ UINT*pVarIndex);
/*3242*/ HRESULT(__stdcall*GetCustData)(
/*3243*/ ITypeInfo2*This,
/*3244*/ const GUID*const guid,
/*3245*/ VARIANT*pVarVal);
/*3247*/ HRESULT(__stdcall*GetFuncCustData)(
/*3248*/ ITypeInfo2*This,
/*3249*/ UINT index,
/*3250*/ const GUID*const guid,
/*3251*/ VARIANT*pVarVal);
/*3253*/ HRESULT(__stdcall*GetParamCustData)(
/*3254*/ ITypeInfo2*This,
/*3255*/ UINT indexFunc,
/*3256*/ UINT indexParam,
/*3257*/ const GUID*const guid,
/*3258*/ VARIANT*pVarVal);
/*3260*/ HRESULT(__stdcall*GetVarCustData)(
/*3261*/ ITypeInfo2*This,
/*3262*/ UINT index,
/*3263*/ const GUID*const guid,
/*3264*/ VARIANT*pVarVal);
/*3266*/ HRESULT(__stdcall*GetImplTypeCustData)(
/*3267*/ ITypeInfo2*This,
/*3268*/ UINT index,
/*3269*/ const GUID*const guid,
/*3270*/ VARIANT*pVarVal);
/*3272*/ HRESULT(__stdcall*GetDocumentation2)(
/*3273*/ ITypeInfo2*This,
/*3274*/ MEMBERID memid,
/*3275*/ LCID lcid,
/*3276*/ BSTR*pbstrHelpString,
/*3277*/ DWORD*pdwHelpStringContext,
/*3278*/ BSTR*pbstrHelpStringDll);
/*3280*/ HRESULT(__stdcall*GetAllCustData)(
/*3281*/ ITypeInfo2*This,
/*3282*/ CUSTDATA*pCustData);
/*3284*/ HRESULT(__stdcall*GetAllFuncCustData)(
/*3285*/ ITypeInfo2*This,
/*3286*/ UINT index,
/*3287*/ CUSTDATA*pCustData);
/*3289*/ HRESULT(__stdcall*GetAllParamCustData)(
/*3290*/ ITypeInfo2*This,
/*3291*/ UINT indexFunc,
/*3292*/ UINT indexParam,
/*3293*/ CUSTDATA*pCustData);
/*3295*/ HRESULT(__stdcall*GetAllVarCustData)(
/*3296*/ ITypeInfo2*This,
/*3297*/ UINT index,
/*3298*/ CUSTDATA*pCustData);
/*3300*/ HRESULT(__stdcall*GetAllImplTypeCustData)(
/*3301*/ ITypeInfo2*This,
/*3302*/ UINT index,
/*3303*/ CUSTDATA*pCustData);
/*3305*/ 
/*3306*/ }ITypeInfo2Vtbl;
/*3308*/ struct ITypeInfo2
/*3309*/ {
/*3310*/ struct ITypeInfo2Vtbl*lpVtbl;
/*3311*/ };
/*3438*/ HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy(
/*3439*/ ITypeInfo2*This,
/*3440*/ MEMBERID memid,
/*3441*/ LCID lcid,
/*3442*/ DWORD refPtrFlags,
/*3443*/ BSTR*pbstrHelpString,
/*3444*/ DWORD*pdwHelpStringContext,
/*3445*/ BSTR*pbstrHelpStringDll);
/*3448*/ void ITypeInfo2_RemoteGetDocumentation2_Stub(
/*3449*/ IRpcStubBuffer*This,
/*3450*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3451*/ PRPC_MESSAGE _pRpcMessage,
/*3452*/ DWORD*_pdwStubPhase);
/*3465*/ typedef
/*3466*/ enum tagSYSKIND
/*3467*/ {SYS_WIN16=0,
/*3468*/ SYS_WIN32=(SYS_WIN16+1),
/*3469*/ SYS_MAC=(SYS_WIN32+1),
/*3470*/ SYS_WIN64=(SYS_MAC+1)
/*3471*/ }SYSKIND;
/*3473*/ typedef
/*3474*/ enum tagLIBFLAGS
/*3475*/ {LIBFLAG_FRESTRICTED=0x1,
/*3476*/ LIBFLAG_FCONTROL=0x2,
/*3477*/ LIBFLAG_FHIDDEN=0x4,
/*3478*/ LIBFLAG_FHASDISKIMAGE=0x8
/*3479*/ }LIBFLAGS;
/*3481*/ typedef ITypeLib*LPTYPELIB;
/*3483*/ typedef struct tagTLIBATTR
/*3484*/ {
/*3485*/ GUID guid;
/*3486*/ LCID lcid;
/*3487*/ SYSKIND syskind;
/*3488*/ WORD wMajorVerNum;
/*3489*/ WORD wMinorVerNum;
/*3490*/ WORD wLibFlags;
/*3491*/ }TLIBATTR;
/*3493*/ typedef struct tagTLIBATTR*LPTLIBATTR;
/*3496*/ extern const IID IID_ITypeLib;
/*3550*/ typedef struct ITypeLibVtbl
/*3551*/ {
/*3552*/ 
/*3554*/ HRESULT(__stdcall*QueryInterface)(
/*3555*/ ITypeLib*This,
/*3556*/ const IID*const riid,
/*3558*/ void**ppvObject);
/*3560*/ ULONG(__stdcall*AddRef)(
/*3561*/ ITypeLib*This);
/*3563*/ ULONG(__stdcall*Release)(
/*3564*/ ITypeLib*This);
/*3566*/ UINT(__stdcall*GetTypeInfoCount)(
/*3567*/ ITypeLib*This);
/*3569*/ HRESULT(__stdcall*GetTypeInfo)(
/*3570*/ ITypeLib*This,
/*3571*/ UINT index,
/*3572*/ ITypeInfo**ppTInfo);
/*3574*/ HRESULT(__stdcall*GetTypeInfoType)(
/*3575*/ ITypeLib*This,
/*3576*/ UINT index,
/*3577*/ TYPEKIND*pTKind);
/*3579*/ HRESULT(__stdcall*GetTypeInfoOfGuid)(
/*3580*/ ITypeLib*This,
/*3581*/ const GUID*const guid,
/*3582*/ ITypeInfo**ppTinfo);
/*3584*/ HRESULT(__stdcall*GetLibAttr)(
/*3585*/ ITypeLib*This,
/*3586*/ TLIBATTR**ppTLibAttr);
/*3588*/ HRESULT(__stdcall*GetTypeComp)(
/*3589*/ ITypeLib*This,
/*3590*/ ITypeComp**ppTComp);
/*3592*/ HRESULT(__stdcall*GetDocumentation)(
/*3593*/ ITypeLib*This,
/*3594*/ INT index,
/*3595*/ BSTR*pBstrName,
/*3596*/ BSTR*pBstrDocString,
/*3597*/ DWORD*pdwHelpContext,
/*3598*/ BSTR*pBstrHelpFile);
/*3600*/ HRESULT(__stdcall*IsName)(
/*3601*/ ITypeLib*This,
/*3602*/ LPOLESTR szNameBuf,
/*3603*/ ULONG lHashVal,
/*3604*/ BOOL*pfName);
/*3606*/ HRESULT(__stdcall*FindName)(
/*3607*/ ITypeLib*This,
/*3608*/ LPOLESTR szNameBuf,
/*3609*/ ULONG lHashVal,
/*3610*/ ITypeInfo**ppTInfo,
/*3611*/ MEMBERID*rgMemId,
/*3612*/ USHORT*pcFound);
/*3614*/ void(__stdcall*ReleaseTLibAttr)(
/*3615*/ ITypeLib*This,
/*3616*/ TLIBATTR*pTLibAttr);
/*3618*/ 
/*3619*/ }ITypeLibVtbl;
/*3621*/ struct ITypeLib
/*3622*/ {
/*3623*/ struct ITypeLibVtbl*lpVtbl;
/*3624*/ };
/*3678*/ HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy(
/*3679*/ ITypeLib*This,
/*3680*/ UINT*pcTInfo);
/*3683*/ void ITypeLib_RemoteGetTypeInfoCount_Stub(
/*3684*/ IRpcStubBuffer*This,
/*3685*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3686*/ PRPC_MESSAGE _pRpcMessage,
/*3687*/ DWORD*_pdwStubPhase);
/*3690*/ HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy(
/*3691*/ ITypeLib*This,
/*3692*/ LPTLIBATTR*ppTLibAttr,
/*3693*/ CLEANLOCALSTORAGE*pDummy);
/*3696*/ void ITypeLib_RemoteGetLibAttr_Stub(
/*3697*/ IRpcStubBuffer*This,
/*3698*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3699*/ PRPC_MESSAGE _pRpcMessage,
/*3700*/ DWORD*_pdwStubPhase);
/*3703*/ HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy(
/*3704*/ ITypeLib*This,
/*3705*/ INT index,
/*3706*/ DWORD refPtrFlags,
/*3707*/ BSTR*pBstrName,
/*3708*/ BSTR*pBstrDocString,
/*3709*/ DWORD*pdwHelpContext,
/*3710*/ BSTR*pBstrHelpFile);
/*3713*/ void ITypeLib_RemoteGetDocumentation_Stub(
/*3714*/ IRpcStubBuffer*This,
/*3715*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3716*/ PRPC_MESSAGE _pRpcMessage,
/*3717*/ DWORD*_pdwStubPhase);
/*3720*/ HRESULT __stdcall ITypeLib_RemoteIsName_Proxy(
/*3721*/ ITypeLib*This,
/*3722*/ LPOLESTR szNameBuf,
/*3723*/ ULONG lHashVal,
/*3724*/ BOOL*pfName,
/*3725*/ BSTR*pBstrLibName);
/*3728*/ void ITypeLib_RemoteIsName_Stub(
/*3729*/ IRpcStubBuffer*This,
/*3730*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3731*/ PRPC_MESSAGE _pRpcMessage,
/*3732*/ DWORD*_pdwStubPhase);
/*3735*/ HRESULT __stdcall ITypeLib_RemoteFindName_Proxy(
/*3736*/ ITypeLib*This,
/*3737*/ LPOLESTR szNameBuf,
/*3738*/ ULONG lHashVal,
/*3739*/ ITypeInfo**ppTInfo,
/*3740*/ MEMBERID*rgMemId,
/*3741*/ USHORT*pcFound,
/*3742*/ BSTR*pBstrLibName);
/*3745*/ void ITypeLib_RemoteFindName_Stub(
/*3746*/ IRpcStubBuffer*This,
/*3747*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3748*/ PRPC_MESSAGE _pRpcMessage,
/*3749*/ DWORD*_pdwStubPhase);
/*3752*/ HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy(
/*3753*/ ITypeLib*This);
/*3756*/ void ITypeLib_LocalReleaseTLibAttr_Stub(
/*3757*/ IRpcStubBuffer*This,
/*3758*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3759*/ PRPC_MESSAGE _pRpcMessage,
/*3760*/ DWORD*_pdwStubPhase);
/*3773*/ typedef ITypeLib2*LPTYPELIB2;
/*3776*/ extern const IID IID_ITypeLib2;
/*3806*/ typedef struct ITypeLib2Vtbl
/*3807*/ {
/*3808*/ 
/*3810*/ HRESULT(__stdcall*QueryInterface)(
/*3811*/ ITypeLib2*This,
/*3812*/ const IID*const riid,
/*3814*/ void**ppvObject);
/*3816*/ ULONG(__stdcall*AddRef)(
/*3817*/ ITypeLib2*This);
/*3819*/ ULONG(__stdcall*Release)(
/*3820*/ ITypeLib2*This);
/*3822*/ UINT(__stdcall*GetTypeInfoCount)(
/*3823*/ ITypeLib2*This);
/*3825*/ HRESULT(__stdcall*GetTypeInfo)(
/*3826*/ ITypeLib2*This,
/*3827*/ UINT index,
/*3828*/ ITypeInfo**ppTInfo);
/*3830*/ HRESULT(__stdcall*GetTypeInfoType)(
/*3831*/ ITypeLib2*This,
/*3832*/ UINT index,
/*3833*/ TYPEKIND*pTKind);
/*3835*/ HRESULT(__stdcall*GetTypeInfoOfGuid)(
/*3836*/ ITypeLib2*This,
/*3837*/ const GUID*const guid,
/*3838*/ ITypeInfo**ppTinfo);
/*3840*/ HRESULT(__stdcall*GetLibAttr)(
/*3841*/ ITypeLib2*This,
/*3842*/ TLIBATTR**ppTLibAttr);
/*3844*/ HRESULT(__stdcall*GetTypeComp)(
/*3845*/ ITypeLib2*This,
/*3846*/ ITypeComp**ppTComp);
/*3848*/ HRESULT(__stdcall*GetDocumentation)(
/*3849*/ ITypeLib2*This,
/*3850*/ INT index,
/*3851*/ BSTR*pBstrName,
/*3852*/ BSTR*pBstrDocString,
/*3853*/ DWORD*pdwHelpContext,
/*3854*/ BSTR*pBstrHelpFile);
/*3856*/ HRESULT(__stdcall*IsName)(
/*3857*/ ITypeLib2*This,
/*3858*/ LPOLESTR szNameBuf,
/*3859*/ ULONG lHashVal,
/*3860*/ BOOL*pfName);
/*3862*/ HRESULT(__stdcall*FindName)(
/*3863*/ ITypeLib2*This,
/*3864*/ LPOLESTR szNameBuf,
/*3865*/ ULONG lHashVal,
/*3866*/ ITypeInfo**ppTInfo,
/*3867*/ MEMBERID*rgMemId,
/*3868*/ USHORT*pcFound);
/*3870*/ void(__stdcall*ReleaseTLibAttr)(
/*3871*/ ITypeLib2*This,
/*3872*/ TLIBATTR*pTLibAttr);
/*3874*/ HRESULT(__stdcall*GetCustData)(
/*3875*/ ITypeLib2*This,
/*3876*/ const GUID*const guid,
/*3877*/ VARIANT*pVarVal);
/*3879*/ HRESULT(__stdcall*GetLibStatistics)(
/*3880*/ ITypeLib2*This,
/*3881*/ ULONG*pcUniqueNames,
/*3882*/ ULONG*pcchUniqueNames);
/*3884*/ HRESULT(__stdcall*GetDocumentation2)(
/*3885*/ ITypeLib2*This,
/*3886*/ INT index,
/*3887*/ LCID lcid,
/*3888*/ BSTR*pbstrHelpString,
/*3889*/ DWORD*pdwHelpStringContext,
/*3890*/ BSTR*pbstrHelpStringDll);
/*3892*/ HRESULT(__stdcall*GetAllCustData)(
/*3893*/ ITypeLib2*This,
/*3894*/ CUSTDATA*pCustData);
/*3896*/ 
/*3897*/ }ITypeLib2Vtbl;
/*3899*/ struct ITypeLib2
/*3900*/ {
/*3901*/ struct ITypeLib2Vtbl*lpVtbl;
/*3902*/ };
/*3969*/ HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy(
/*3970*/ ITypeLib2*This,
/*3971*/ ULONG*pcUniqueNames,
/*3972*/ ULONG*pcchUniqueNames);
/*3975*/ void ITypeLib2_RemoteGetLibStatistics_Stub(
/*3976*/ IRpcStubBuffer*This,
/*3977*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3978*/ PRPC_MESSAGE _pRpcMessage,
/*3979*/ DWORD*_pdwStubPhase);
/*3982*/ HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy(
/*3983*/ ITypeLib2*This,
/*3984*/ INT index,
/*3985*/ LCID lcid,
/*3986*/ DWORD refPtrFlags,
/*3987*/ BSTR*pbstrHelpString,
/*3988*/ DWORD*pdwHelpStringContext,
/*3989*/ BSTR*pbstrHelpStringDll);
/*3992*/ void ITypeLib2_RemoteGetDocumentation2_Stub(
/*3993*/ IRpcStubBuffer*This,
/*3994*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3995*/ PRPC_MESSAGE _pRpcMessage,
/*3996*/ DWORD*_pdwStubPhase);
/*4009*/ typedef ITypeChangeEvents*LPTYPECHANGEEVENTS;
/*4011*/ typedef
/*4012*/ enum tagCHANGEKIND
/*4013*/ {CHANGEKIND_ADDMEMBER=0,
/*4014*/ CHANGEKIND_DELETEMEMBER=(CHANGEKIND_ADDMEMBER+1),
/*4015*/ CHANGEKIND_SETNAMES=(CHANGEKIND_DELETEMEMBER+1),
/*4016*/ CHANGEKIND_SETDOCUMENTATION=(CHANGEKIND_SETNAMES+1),
/*4017*/ CHANGEKIND_GENERAL=(CHANGEKIND_SETDOCUMENTATION+1),
/*4018*/ CHANGEKIND_INVALIDATE=(CHANGEKIND_GENERAL+1),
/*4019*/ CHANGEKIND_CHANGEFAILED=(CHANGEKIND_INVALIDATE+1),
/*4020*/ CHANGEKIND_MAX=(CHANGEKIND_CHANGEFAILED+1)
/*4021*/ }CHANGEKIND;
/*4024*/ extern const IID IID_ITypeChangeEvents;
/*4047*/ typedef struct ITypeChangeEventsVtbl
/*4048*/ {
/*4049*/ 
/*4051*/ HRESULT(__stdcall*QueryInterface)(
/*4052*/ ITypeChangeEvents*This,
/*4053*/ const IID*const riid,
/*4055*/ void**ppvObject);
/*4057*/ ULONG(__stdcall*AddRef)(
/*4058*/ ITypeChangeEvents*This);
/*4060*/ ULONG(__stdcall*Release)(
/*4061*/ ITypeChangeEvents*This);
/*4063*/ HRESULT(__stdcall*RequestTypeChange)(
/*4064*/ ITypeChangeEvents*This,
/*4065*/ CHANGEKIND changeKind,
/*4066*/ ITypeInfo*pTInfoBefore,
/*4067*/ LPOLESTR pStrName,
/*4068*/ INT*pfCancel);
/*4070*/ HRESULT(__stdcall*AfterTypeChange)(
/*4071*/ ITypeChangeEvents*This,
/*4072*/ CHANGEKIND changeKind,
/*4073*/ ITypeInfo*pTInfoAfter,
/*4074*/ LPOLESTR pStrName);
/*4076*/ 
/*4077*/ }ITypeChangeEventsVtbl;
/*4079*/ struct ITypeChangeEvents
/*4080*/ {
/*4081*/ struct ITypeChangeEventsVtbl*lpVtbl;
/*4082*/ };
/*4122*/ typedef IErrorInfo*LPERRORINFO;
/*4125*/ extern const IID IID_IErrorInfo;
/*4152*/ typedef struct IErrorInfoVtbl
/*4153*/ {
/*4154*/ 
/*4156*/ HRESULT(__stdcall*QueryInterface)(
/*4157*/ IErrorInfo*This,
/*4158*/ const IID*const riid,
/*4160*/ void**ppvObject);
/*4162*/ ULONG(__stdcall*AddRef)(
/*4163*/ IErrorInfo*This);
/*4165*/ ULONG(__stdcall*Release)(
/*4166*/ IErrorInfo*This);
/*4168*/ HRESULT(__stdcall*GetGUID)(
/*4169*/ IErrorInfo*This,
/*4170*/ GUID*pGUID);
/*4172*/ HRESULT(__stdcall*GetSource)(
/*4173*/ IErrorInfo*This,
/*4174*/ BSTR*pBstrSource);
/*4176*/ HRESULT(__stdcall*GetDescription)(
/*4177*/ IErrorInfo*This,
/*4178*/ BSTR*pBstrDescription);
/*4180*/ HRESULT(__stdcall*GetHelpFile)(
/*4181*/ IErrorInfo*This,
/*4182*/ BSTR*pBstrHelpFile);
/*4184*/ HRESULT(__stdcall*GetHelpContext)(
/*4185*/ IErrorInfo*This,
/*4186*/ DWORD*pdwHelpContext);
/*4188*/ 
/*4189*/ }IErrorInfoVtbl;
/*4191*/ struct IErrorInfo
/*4192*/ {
/*4193*/ struct IErrorInfoVtbl*lpVtbl;
/*4194*/ };
/*4243*/ typedef ICreateErrorInfo*LPCREATEERRORINFO;
/*4246*/ extern const IID IID_ICreateErrorInfo;
/*4273*/ typedef struct ICreateErrorInfoVtbl
/*4274*/ {
/*4275*/ 
/*4277*/ HRESULT(__stdcall*QueryInterface)(
/*4278*/ ICreateErrorInfo*This,
/*4279*/ const IID*const riid,
/*4281*/ void**ppvObject);
/*4283*/ ULONG(__stdcall*AddRef)(
/*4284*/ ICreateErrorInfo*This);
/*4286*/ ULONG(__stdcall*Release)(
/*4287*/ ICreateErrorInfo*This);
/*4289*/ HRESULT(__stdcall*SetGUID)(
/*4290*/ ICreateErrorInfo*This,
/*4291*/ const GUID*const rguid);
/*4293*/ HRESULT(__stdcall*SetSource)(
/*4294*/ ICreateErrorInfo*This,
/*4295*/ LPOLESTR szSource);
/*4297*/ HRESULT(__stdcall*SetDescription)(
/*4298*/ ICreateErrorInfo*This,
/*4299*/ LPOLESTR szDescription);
/*4301*/ HRESULT(__stdcall*SetHelpFile)(
/*4302*/ ICreateErrorInfo*This,
/*4303*/ LPOLESTR szHelpFile);
/*4305*/ HRESULT(__stdcall*SetHelpContext)(
/*4306*/ ICreateErrorInfo*This,
/*4307*/ DWORD dwHelpContext);
/*4309*/ 
/*4310*/ }ICreateErrorInfoVtbl;
/*4312*/ struct ICreateErrorInfo
/*4313*/ {
/*4314*/ struct ICreateErrorInfoVtbl*lpVtbl;
/*4315*/ };
/*4364*/ typedef ISupportErrorInfo*LPSUPPORTERRORINFO;
/*4367*/ extern const IID IID_ISupportErrorInfo;
/*4382*/ typedef struct ISupportErrorInfoVtbl
/*4383*/ {
/*4384*/ 
/*4386*/ HRESULT(__stdcall*QueryInterface)(
/*4387*/ ISupportErrorInfo*This,
/*4388*/ const IID*const riid,
/*4390*/ void**ppvObject);
/*4392*/ ULONG(__stdcall*AddRef)(
/*4393*/ ISupportErrorInfo*This);
/*4395*/ ULONG(__stdcall*Release)(
/*4396*/ ISupportErrorInfo*This);
/*4398*/ HRESULT(__stdcall*InterfaceSupportsErrorInfo)(
/*4399*/ ISupportErrorInfo*This,
/*4400*/ const IID*const riid);
/*4402*/ 
/*4403*/ }ISupportErrorInfoVtbl;
/*4405*/ struct ISupportErrorInfo
/*4406*/ {
/*4407*/ struct ISupportErrorInfoVtbl*lpVtbl;
/*4408*/ };
/*4446*/ extern const IID IID_ITypeFactory;
/*4463*/ typedef struct ITypeFactoryVtbl
/*4464*/ {
/*4465*/ 
/*4467*/ HRESULT(__stdcall*QueryInterface)(
/*4468*/ ITypeFactory*This,
/*4469*/ const IID*const riid,
/*4471*/ void**ppvObject);
/*4473*/ ULONG(__stdcall*AddRef)(
/*4474*/ ITypeFactory*This);
/*4476*/ ULONG(__stdcall*Release)(
/*4477*/ ITypeFactory*This);
/*4479*/ HRESULT(__stdcall*CreateFromTypeInfo)(
/*4480*/ ITypeFactory*This,
/*4481*/ ITypeInfo*pTypeInfo,
/*4482*/ const IID*const riid,
/*4483*/ IUnknown**ppv);
/*4485*/ 
/*4486*/ }ITypeFactoryVtbl;
/*4488*/ struct ITypeFactory
/*4489*/ {
/*4490*/ struct ITypeFactoryVtbl*lpVtbl;
/*4491*/ };
/*4529*/ extern const IID IID_ITypeMarshal;
/*4565*/ typedef struct ITypeMarshalVtbl
/*4566*/ {
/*4567*/ 
/*4569*/ HRESULT(__stdcall*QueryInterface)(
/*4570*/ ITypeMarshal*This,
/*4571*/ const IID*const riid,
/*4573*/ void**ppvObject);
/*4575*/ ULONG(__stdcall*AddRef)(
/*4576*/ ITypeMarshal*This);
/*4578*/ ULONG(__stdcall*Release)(
/*4579*/ ITypeMarshal*This);
/*4581*/ HRESULT(__stdcall*Size)(
/*4582*/ ITypeMarshal*This,
/*4583*/ PVOID pvType,
/*4584*/ DWORD dwDestContext,
/*4585*/ PVOID pvDestContext,
/*4586*/ ULONG*pSize);
/*4588*/ HRESULT(__stdcall*Marshal)(
/*4589*/ ITypeMarshal*This,
/*4590*/ PVOID pvType,
/*4591*/ DWORD dwDestContext,
/*4592*/ PVOID pvDestContext,
/*4593*/ ULONG cbBufferLength,
/*4594*/ BYTE*pBuffer,
/*4595*/ ULONG*pcbWritten);
/*4597*/ HRESULT(__stdcall*Unmarshal)(
/*4598*/ ITypeMarshal*This,
/*4599*/ PVOID pvType,
/*4600*/ DWORD dwFlags,
/*4601*/ ULONG cbBufferLength,
/*4602*/ BYTE*pBuffer,
/*4603*/ ULONG*pcbRead);
/*4605*/ HRESULT(__stdcall*Free)(
/*4606*/ ITypeMarshal*This,
/*4607*/ PVOID pvType);
/*4609*/ 
/*4610*/ }ITypeMarshalVtbl;
/*4612*/ struct ITypeMarshal
/*4613*/ {
/*4614*/ struct ITypeMarshalVtbl*lpVtbl;
/*4615*/ };
/*4661*/ typedef IRecordInfo*LPRECORDINFO;
/*4664*/ extern const IID IID_IRecordInfo;
/*4737*/ typedef struct IRecordInfoVtbl
/*4738*/ {
/*4739*/ 
/*4741*/ HRESULT(__stdcall*QueryInterface)(
/*4742*/ IRecordInfo*This,
/*4743*/ const IID*const riid,
/*4745*/ void**ppvObject);
/*4747*/ ULONG(__stdcall*AddRef)(
/*4748*/ IRecordInfo*This);
/*4750*/ ULONG(__stdcall*Release)(
/*4751*/ IRecordInfo*This);
/*4753*/ HRESULT(__stdcall*RecordInit)(
/*4754*/ IRecordInfo*This,
/*4755*/ PVOID pvNew);
/*4757*/ HRESULT(__stdcall*RecordClear)(
/*4758*/ IRecordInfo*This,
/*4759*/ PVOID pvExisting);
/*4761*/ HRESULT(__stdcall*RecordCopy)(
/*4762*/ IRecordInfo*This,
/*4763*/ PVOID pvExisting,
/*4764*/ PVOID pvNew);
/*4766*/ HRESULT(__stdcall*GetGuid)(
/*4767*/ IRecordInfo*This,
/*4768*/ GUID*pguid);
/*4770*/ HRESULT(__stdcall*GetName)(
/*4771*/ IRecordInfo*This,
/*4772*/ BSTR*pbstrName);
/*4774*/ HRESULT(__stdcall*GetSize)(
/*4775*/ IRecordInfo*This,
/*4776*/ ULONG*pcbSize);
/*4778*/ HRESULT(__stdcall*GetTypeInfo)(
/*4779*/ IRecordInfo*This,
/*4780*/ ITypeInfo**ppTypeInfo);
/*4782*/ HRESULT(__stdcall*GetField)(
/*4783*/ IRecordInfo*This,
/*4784*/ PVOID pvData,
/*4785*/ LPCOLESTR szFieldName,
/*4786*/ VARIANT*pvarField);
/*4788*/ HRESULT(__stdcall*GetFieldNoCopy)(
/*4789*/ IRecordInfo*This,
/*4790*/ PVOID pvData,
/*4791*/ LPCOLESTR szFieldName,
/*4792*/ VARIANT*pvarField,
/*4793*/ PVOID*ppvDataCArray);
/*4795*/ HRESULT(__stdcall*PutField)(
/*4796*/ IRecordInfo*This,
/*4797*/ ULONG wFlags,
/*4798*/ PVOID pvData,
/*4799*/ LPCOLESTR szFieldName,
/*4800*/ VARIANT*pvarField);
/*4802*/ HRESULT(__stdcall*PutFieldNoCopy)(
/*4803*/ IRecordInfo*This,
/*4804*/ ULONG wFlags,
/*4805*/ PVOID pvData,
/*4806*/ LPCOLESTR szFieldName,
/*4807*/ VARIANT*pvarField);
/*4809*/ HRESULT(__stdcall*GetFieldNames)(
/*4810*/ IRecordInfo*This,
/*4811*/ ULONG*pcNames,
/*4812*/ BSTR*rgBstrNames);
/*4814*/ BOOL(__stdcall*IsMatchingType)(
/*4815*/ IRecordInfo*This,
/*4816*/ IRecordInfo*pRecordInfo);
/*4818*/ PVOID(__stdcall*RecordCreate)(
/*4819*/ IRecordInfo*This);
/*4821*/ HRESULT(__stdcall*RecordCreateCopy)(
/*4822*/ IRecordInfo*This,
/*4823*/ PVOID pvSource,
/*4824*/ PVOID*ppvDest);
/*4826*/ HRESULT(__stdcall*RecordDestroy)(
/*4827*/ IRecordInfo*This,
/*4828*/ PVOID pvRecord);
/*4830*/ 
/*4831*/ }IRecordInfoVtbl;
/*4833*/ struct IRecordInfo
/*4834*/ {
/*4835*/ struct IRecordInfoVtbl*lpVtbl;
/*4836*/ };
/*4918*/ typedef IErrorLog*LPERRORLOG;
/*4921*/ extern const IID IID_IErrorLog;
/*4937*/ typedef struct IErrorLogVtbl
/*4938*/ {
/*4939*/ 
/*4941*/ HRESULT(__stdcall*QueryInterface)(
/*4942*/ IErrorLog*This,
/*4943*/ const IID*const riid,
/*4945*/ void**ppvObject);
/*4947*/ ULONG(__stdcall*AddRef)(
/*4948*/ IErrorLog*This);
/*4950*/ ULONG(__stdcall*Release)(
/*4951*/ IErrorLog*This);
/*4953*/ HRESULT(__stdcall*AddError)(
/*4954*/ IErrorLog*This,
/*4955*/ LPCOLESTR pszPropName,
/*4956*/ EXCEPINFO*pExcepInfo);
/*4958*/ 
/*4959*/ }IErrorLogVtbl;
/*4961*/ struct IErrorLog
/*4962*/ {
/*4963*/ struct IErrorLogVtbl*lpVtbl;
/*4964*/ };
/*5001*/ typedef IPropertyBag*LPPROPERTYBAG;
/*5004*/ extern const IID IID_IPropertyBag;
/*5025*/ typedef struct IPropertyBagVtbl
/*5026*/ {
/*5027*/ 
/*5029*/ HRESULT(__stdcall*QueryInterface)(
/*5030*/ IPropertyBag*This,
/*5031*/ const IID*const riid,
/*5033*/ void**ppvObject);
/*5035*/ ULONG(__stdcall*AddRef)(
/*5036*/ IPropertyBag*This);
/*5038*/ ULONG(__stdcall*Release)(
/*5039*/ IPropertyBag*This);
/*5041*/ HRESULT(__stdcall*Read)(
/*5042*/ IPropertyBag*This,
/*5043*/ LPCOLESTR pszPropName,
/*5044*/ VARIANT*pVar,
/*5045*/ IErrorLog*pErrorLog);
/*5047*/ HRESULT(__stdcall*Write)(
/*5048*/ IPropertyBag*This,
/*5049*/ LPCOLESTR pszPropName,
/*5050*/ VARIANT*pVar);
/*5052*/ 
/*5053*/ }IPropertyBagVtbl;
/*5055*/ struct IPropertyBag
/*5056*/ {
/*5057*/ struct IPropertyBagVtbl*lpVtbl;
/*5058*/ };
/*5088*/ HRESULT __stdcall IPropertyBag_RemoteRead_Proxy(
/*5089*/ IPropertyBag*This,
/*5090*/ LPCOLESTR pszPropName,
/*5091*/ VARIANT*pVar,
/*5092*/ IErrorLog*pErrorLog,
/*5093*/ DWORD varType,
/*5094*/ IUnknown*pUnkObj);
/*5097*/ void IPropertyBag_RemoteRead_Stub(
/*5098*/ IRpcStubBuffer*This,
/*5099*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*5100*/ PRPC_MESSAGE _pRpcMessage,
/*5101*/ DWORD*_pdwStubPhase);
/*5120*/ extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec;
/*5121*/ extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec;
/*5125*/ unsigned long BSTR_UserSize(unsigned long*,unsigned long,BSTR*);
/*5126*/ unsigned char*BSTR_UserMarshal(unsigned long*,unsigned char*,BSTR*);
/*5127*/ unsigned char*BSTR_UserUnmarshal(unsigned long*,unsigned char*,BSTR*);
/*5128*/ void BSTR_UserFree(unsigned long*,BSTR*);
/*5130*/ unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long*,unsigned long,CLEANLOCALSTORAGE*);
/*5131*/ unsigned char*CLEANLOCALSTORAGE_UserMarshal(unsigned long*,unsigned char*,CLEANLOCALSTORAGE*);
/*5132*/ unsigned char*CLEANLOCALSTORAGE_UserUnmarshal(unsigned long*,unsigned char*,CLEANLOCALSTORAGE*);
/*5133*/ void CLEANLOCALSTORAGE_UserFree(unsigned long*,CLEANLOCALSTORAGE*);
/*5135*/ unsigned long VARIANT_UserSize(unsigned long*,unsigned long,VARIANT*);
/*5136*/ unsigned char*VARIANT_UserMarshal(unsigned long*,unsigned char*,VARIANT*);
/*5137*/ unsigned char*VARIANT_UserUnmarshal(unsigned long*,unsigned char*,VARIANT*);
/*5138*/ void VARIANT_UserFree(unsigned long*,VARIANT*);
/*5140*/ unsigned long BSTR_UserSize64(unsigned long*,unsigned long,BSTR*);
/*5141*/ unsigned char*BSTR_UserMarshal64(unsigned long*,unsigned char*,BSTR*);
/*5142*/ unsigned char*BSTR_UserUnmarshal64(unsigned long*,unsigned char*,BSTR*);
/*5143*/ void BSTR_UserFree64(unsigned long*,BSTR*);
/*5145*/ unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long*,unsigned long,CLEANLOCALSTORAGE*);
/*5146*/ unsigned char*CLEANLOCALSTORAGE_UserMarshal64(unsigned long*,unsigned char*,CLEANLOCALSTORAGE*);
/*5147*/ unsigned char*CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long*,unsigned char*,CLEANLOCALSTORAGE*);
/*5148*/ void CLEANLOCALSTORAGE_UserFree64(unsigned long*,CLEANLOCALSTORAGE*);
/*5150*/ unsigned long VARIANT_UserSize64(unsigned long*,unsigned long,VARIANT*);
/*5151*/ unsigned char*VARIANT_UserMarshal64(unsigned long*,unsigned char*,VARIANT*);
/*5152*/ unsigned char*VARIANT_UserUnmarshal64(unsigned long*,unsigned char*,VARIANT*);
/*5153*/ void VARIANT_UserFree64(unsigned long*,VARIANT*);
/*5155*/ HRESULT __stdcall IDispatch_Invoke_Proxy(
/*5156*/ IDispatch*This,
/*5157*/ DISPID dispIdMember,
/*5158*/ const IID*const riid,
/*5159*/ LCID lcid,
/*5160*/ WORD wFlags,
/*5161*/ DISPPARAMS*pDispParams,
/*5162*/ VARIANT*pVarResult,
/*5163*/ EXCEPINFO*pExcepInfo,
/*5164*/ UINT*puArgErr);
/*5167*/ HRESULT __stdcall IDispatch_Invoke_Stub(
/*5168*/ IDispatch*This,
/*5169*/ DISPID dispIdMember,
/*5170*/ const IID*const riid,
/*5171*/ LCID lcid,
/*5172*/ DWORD dwFlags,
/*5173*/ DISPPARAMS*pDispParams,
/*5174*/ VARIANT*pVarResult,
/*5175*/ EXCEPINFO*pExcepInfo,
/*5176*/ UINT*pArgErr,
/*5177*/ UINT cVarRef,
/*5178*/ UINT*rgVarRefIdx,
/*5179*/ VARIANTARG*rgVarRef);
/*5181*/ HRESULT __stdcall IEnumVARIANT_Next_Proxy(
/*5182*/ IEnumVARIANT*This,
/*5183*/ ULONG celt,
/*5184*/ VARIANT*rgVar,
/*5185*/ ULONG*pCeltFetched);
/*5188*/ HRESULT __stdcall IEnumVARIANT_Next_Stub(
/*5189*/ IEnumVARIANT*This,
/*5190*/ ULONG celt,
/*5191*/ VARIANT*rgVar,
/*5192*/ ULONG*pCeltFetched);
/*5194*/ HRESULT __stdcall ITypeComp_Bind_Proxy(
/*5195*/ ITypeComp*This,
/*5196*/ LPOLESTR szName,
/*5197*/ ULONG lHashVal,
/*5198*/ WORD wFlags,
/*5199*/ ITypeInfo**ppTInfo,
/*5200*/ DESCKIND*pDescKind,
/*5201*/ BINDPTR*pBindPtr);
/*5204*/ HRESULT __stdcall ITypeComp_Bind_Stub(
/*5205*/ ITypeComp*This,
/*5206*/ LPOLESTR szName,
/*5207*/ ULONG lHashVal,
/*5208*/ WORD wFlags,
/*5209*/ ITypeInfo**ppTInfo,
/*5210*/ DESCKIND*pDescKind,
/*5211*/ LPFUNCDESC*ppFuncDesc,
/*5212*/ LPVARDESC*ppVarDesc,
/*5213*/ ITypeComp**ppTypeComp,
/*5214*/ CLEANLOCALSTORAGE*pDummy);
/*5216*/ HRESULT __stdcall ITypeComp_BindType_Proxy(
/*5217*/ ITypeComp*This,
/*5218*/ LPOLESTR szName,
/*5219*/ ULONG lHashVal,
/*5220*/ ITypeInfo**ppTInfo,
/*5221*/ ITypeComp**ppTComp);
/*5224*/ HRESULT __stdcall ITypeComp_BindType_Stub(
/*5225*/ ITypeComp*This,
/*5226*/ LPOLESTR szName,
/*5227*/ ULONG lHashVal,
/*5228*/ ITypeInfo**ppTInfo);
/*5230*/ HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy(
/*5231*/ ITypeInfo*This,
/*5232*/ TYPEATTR**ppTypeAttr);
/*5235*/ HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub(
/*5236*/ ITypeInfo*This,
/*5237*/ LPTYPEATTR*ppTypeAttr,
/*5238*/ CLEANLOCALSTORAGE*pDummy);
/*5240*/ HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy(
/*5241*/ ITypeInfo*This,
/*5242*/ UINT index,
/*5243*/ FUNCDESC**ppFuncDesc);
/*5246*/ HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub(
/*5247*/ ITypeInfo*This,
/*5248*/ UINT index,
/*5249*/ LPFUNCDESC*ppFuncDesc,
/*5250*/ CLEANLOCALSTORAGE*pDummy);
/*5252*/ HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy(
/*5253*/ ITypeInfo*This,
/*5254*/ UINT index,
/*5255*/ VARDESC**ppVarDesc);
/*5258*/ HRESULT __stdcall ITypeInfo_GetVarDesc_Stub(
/*5259*/ ITypeInfo*This,
/*5260*/ UINT index,
/*5261*/ LPVARDESC*ppVarDesc,
/*5262*/ CLEANLOCALSTORAGE*pDummy);
/*5264*/ HRESULT __stdcall ITypeInfo_GetNames_Proxy(
/*5265*/ ITypeInfo*This,
/*5266*/ MEMBERID memid,
/*5267*/ BSTR*rgBstrNames,
/*5268*/ UINT cMaxNames,
/*5269*/ UINT*pcNames);
/*5272*/ HRESULT __stdcall ITypeInfo_GetNames_Stub(
/*5273*/ ITypeInfo*This,
/*5274*/ MEMBERID memid,
/*5275*/ BSTR*rgBstrNames,
/*5276*/ UINT cMaxNames,
/*5277*/ UINT*pcNames);
/*5279*/ HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy(
/*5280*/ ITypeInfo*This,
/*5281*/ LPOLESTR*rgszNames,
/*5282*/ UINT cNames,
/*5283*/ MEMBERID*pMemId);
/*5286*/ HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub(
/*5287*/ ITypeInfo*This);
/*5289*/ HRESULT __stdcall ITypeInfo_Invoke_Proxy(
/*5290*/ ITypeInfo*This,
/*5291*/ PVOID pvInstance,
/*5292*/ MEMBERID memid,
/*5293*/ WORD wFlags,
/*5294*/ DISPPARAMS*pDispParams,
/*5295*/ VARIANT*pVarResult,
/*5296*/ EXCEPINFO*pExcepInfo,
/*5297*/ UINT*puArgErr);
/*5300*/ HRESULT __stdcall ITypeInfo_Invoke_Stub(
/*5301*/ ITypeInfo*This);
/*5303*/ HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy(
/*5304*/ ITypeInfo*This,
/*5305*/ MEMBERID memid,
/*5306*/ BSTR*pBstrName,
/*5307*/ BSTR*pBstrDocString,
/*5308*/ DWORD*pdwHelpContext,
/*5309*/ BSTR*pBstrHelpFile);
/*5312*/ HRESULT __stdcall ITypeInfo_GetDocumentation_Stub(
/*5313*/ ITypeInfo*This,
/*5314*/ MEMBERID memid,
/*5315*/ DWORD refPtrFlags,
/*5316*/ BSTR*pBstrName,
/*5317*/ BSTR*pBstrDocString,
/*5318*/ DWORD*pdwHelpContext,
/*5319*/ BSTR*pBstrHelpFile);
/*5321*/ HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy(
/*5322*/ ITypeInfo*This,
/*5323*/ MEMBERID memid,
/*5324*/ INVOKEKIND invKind,
/*5325*/ BSTR*pBstrDllName,
/*5326*/ BSTR*pBstrName,
/*5327*/ WORD*pwOrdinal);
/*5330*/ HRESULT __stdcall ITypeInfo_GetDllEntry_Stub(
/*5331*/ ITypeInfo*This,
/*5332*/ MEMBERID memid,
/*5333*/ INVOKEKIND invKind,
/*5334*/ DWORD refPtrFlags,
/*5335*/ BSTR*pBstrDllName,
/*5336*/ BSTR*pBstrName,
/*5337*/ WORD*pwOrdinal);
/*5339*/ HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy(
/*5340*/ ITypeInfo*This,
/*5341*/ MEMBERID memid,
/*5342*/ INVOKEKIND invKind,
/*5343*/ PVOID*ppv);
/*5346*/ HRESULT __stdcall ITypeInfo_AddressOfMember_Stub(
/*5347*/ ITypeInfo*This);
/*5349*/ HRESULT __stdcall ITypeInfo_CreateInstance_Proxy(
/*5350*/ ITypeInfo*This,
/*5351*/ IUnknown*pUnkOuter,
/*5352*/ const IID*const riid,
/*5353*/ PVOID*ppvObj);
/*5356*/ HRESULT __stdcall ITypeInfo_CreateInstance_Stub(
/*5357*/ ITypeInfo*This,
/*5358*/ const IID*const riid,
/*5359*/ IUnknown**ppvObj);
/*5361*/ HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy(
/*5362*/ ITypeInfo*This,
/*5363*/ ITypeLib**ppTLib,
/*5364*/ UINT*pIndex);
/*5367*/ HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub(
/*5368*/ ITypeInfo*This,
/*5369*/ ITypeLib**ppTLib,
/*5370*/ UINT*pIndex);
/*5372*/ void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy(
/*5373*/ ITypeInfo*This,
/*5374*/ TYPEATTR*pTypeAttr);
/*5377*/ HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub(
/*5378*/ ITypeInfo*This);
/*5380*/ void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy(
/*5381*/ ITypeInfo*This,
/*5382*/ FUNCDESC*pFuncDesc);
/*5385*/ HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub(
/*5386*/ ITypeInfo*This);
/*5388*/ void __stdcall ITypeInfo_ReleaseVarDesc_Proxy(
/*5389*/ ITypeInfo*This,
/*5390*/ VARDESC*pVarDesc);
/*5393*/ HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub(
/*5394*/ ITypeInfo*This);
/*5396*/ HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy(
/*5397*/ ITypeInfo2*This,
/*5398*/ MEMBERID memid,
/*5399*/ LCID lcid,
/*5400*/ BSTR*pbstrHelpString,
/*5401*/ DWORD*pdwHelpStringContext,
/*5402*/ BSTR*pbstrHelpStringDll);
/*5405*/ HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub(
/*5406*/ ITypeInfo2*This,
/*5407*/ MEMBERID memid,
/*5408*/ LCID lcid,
/*5409*/ DWORD refPtrFlags,
/*5410*/ BSTR*pbstrHelpString,
/*5411*/ DWORD*pdwHelpStringContext,
/*5412*/ BSTR*pbstrHelpStringDll);
/*5414*/ UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy(
/*5415*/ ITypeLib*This);
/*5418*/ HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub(
/*5419*/ ITypeLib*This,
/*5420*/ UINT*pcTInfo);
/*5422*/ HRESULT __stdcall ITypeLib_GetLibAttr_Proxy(
/*5423*/ ITypeLib*This,
/*5424*/ TLIBATTR**ppTLibAttr);
/*5427*/ HRESULT __stdcall ITypeLib_GetLibAttr_Stub(
/*5428*/ ITypeLib*This,
/*5429*/ LPTLIBATTR*ppTLibAttr,
/*5430*/ CLEANLOCALSTORAGE*pDummy);
/*5432*/ HRESULT __stdcall ITypeLib_GetDocumentation_Proxy(
/*5433*/ ITypeLib*This,
/*5434*/ INT index,
/*5435*/ BSTR*pBstrName,
/*5436*/ BSTR*pBstrDocString,
/*5437*/ DWORD*pdwHelpContext,
/*5438*/ BSTR*pBstrHelpFile);
/*5441*/ HRESULT __stdcall ITypeLib_GetDocumentation_Stub(
/*5442*/ ITypeLib*This,
/*5443*/ INT index,
/*5444*/ DWORD refPtrFlags,
/*5445*/ BSTR*pBstrName,
/*5446*/ BSTR*pBstrDocString,
/*5447*/ DWORD*pdwHelpContext,
/*5448*/ BSTR*pBstrHelpFile);
/*5450*/ HRESULT __stdcall ITypeLib_IsName_Proxy(
/*5451*/ ITypeLib*This,
/*5452*/ LPOLESTR szNameBuf,
/*5453*/ ULONG lHashVal,
/*5454*/ BOOL*pfName);
/*5457*/ HRESULT __stdcall ITypeLib_IsName_Stub(
/*5458*/ ITypeLib*This,
/*5459*/ LPOLESTR szNameBuf,
/*5460*/ ULONG lHashVal,
/*5461*/ BOOL*pfName,
/*5462*/ BSTR*pBstrLibName);
/*5464*/ HRESULT __stdcall ITypeLib_FindName_Proxy(
/*5465*/ ITypeLib*This,
/*5466*/ LPOLESTR szNameBuf,
/*5467*/ ULONG lHashVal,
/*5468*/ ITypeInfo**ppTInfo,
/*5469*/ MEMBERID*rgMemId,
/*5470*/ USHORT*pcFound);
/*5473*/ HRESULT __stdcall ITypeLib_FindName_Stub(
/*5474*/ ITypeLib*This,
/*5475*/ LPOLESTR szNameBuf,
/*5476*/ ULONG lHashVal,
/*5477*/ ITypeInfo**ppTInfo,
/*5478*/ MEMBERID*rgMemId,
/*5479*/ USHORT*pcFound,
/*5480*/ BSTR*pBstrLibName);
/*5482*/ void __stdcall ITypeLib_ReleaseTLibAttr_Proxy(
/*5483*/ ITypeLib*This,
/*5484*/ TLIBATTR*pTLibAttr);
/*5487*/ HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub(
/*5488*/ ITypeLib*This);
/*5490*/ HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy(
/*5491*/ ITypeLib2*This,
/*5492*/ ULONG*pcUniqueNames,
/*5493*/ ULONG*pcchUniqueNames);
/*5496*/ HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub(
/*5497*/ ITypeLib2*This,
/*5498*/ ULONG*pcUniqueNames,
/*5499*/ ULONG*pcchUniqueNames);
/*5501*/ HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy(
/*5502*/ ITypeLib2*This,
/*5503*/ INT index,
/*5504*/ LCID lcid,
/*5505*/ BSTR*pbstrHelpString,
/*5506*/ DWORD*pdwHelpStringContext,
/*5507*/ BSTR*pbstrHelpStringDll);
/*5510*/ HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub(
/*5511*/ ITypeLib2*This,
/*5512*/ INT index,
/*5513*/ LCID lcid,
/*5514*/ DWORD refPtrFlags,
/*5515*/ BSTR*pbstrHelpString,
/*5516*/ DWORD*pdwHelpStringContext,
/*5517*/ BSTR*pbstrHelpStringDll);
/*5519*/ HRESULT __stdcall IPropertyBag_Read_Proxy(
/*5520*/ IPropertyBag*This,
/*5521*/ LPCOLESTR pszPropName,
/*5522*/ VARIANT*pVar,
/*5523*/ IErrorLog*pErrorLog);
/*5526*/ HRESULT __stdcall IPropertyBag_Read_Stub(
/*5527*/ IPropertyBag*This,
/*5528*/ LPCOLESTR pszPropName,
/*5529*/ VARIANT*pVar,
/*5530*/ IErrorLog*pErrorLog,
/*5531*/ DWORD varType,
/*5532*/ IUnknown*pUnkObj);
/*"msxml.h"300*/ typedef struct _xml_error
/*301*/ {
/*302*/ unsigned int _nLine;
/*303*/ BSTR _pchBuf;
/*304*/ unsigned int _cchBuf;
/*305*/ unsigned int _ich;
/*306*/ BSTR _pszFound;
/*307*/ BSTR _pszExpected;
/*308*/ DWORD _reserved1;
/*309*/ DWORD _reserved2;
/*310*/ }XML_ERROR;
/*314*/ extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
/*315*/ extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;
/*348*/ typedef
/*349*/ enum tagDOMNodeType
/*350*/ {NODE_INVALID=0,
/*351*/ NODE_ELEMENT=(NODE_INVALID+1),
/*352*/ NODE_ATTRIBUTE=(NODE_ELEMENT+1),
/*353*/ NODE_TEXT=(NODE_ATTRIBUTE+1),
/*354*/ NODE_CDATA_SECTION=(NODE_TEXT+1),
/*355*/ NODE_ENTITY_REFERENCE=(NODE_CDATA_SECTION+1),
/*356*/ NODE_ENTITY=(NODE_ENTITY_REFERENCE+1),
/*357*/ NODE_PROCESSING_INSTRUCTION=(NODE_ENTITY+1),
/*358*/ NODE_COMMENT=(NODE_PROCESSING_INSTRUCTION+1),
/*359*/ NODE_DOCUMENT=(NODE_COMMENT+1),
/*360*/ NODE_DOCUMENT_TYPE=(NODE_DOCUMENT+1),
/*361*/ NODE_DOCUMENT_FRAGMENT=(NODE_DOCUMENT_TYPE+1),
/*362*/ NODE_NOTATION=(NODE_DOCUMENT_FRAGMENT+1)
/*363*/ }DOMNodeType;
/*380*/ typedef
/*381*/ enum tagXMLEMEM_TYPE
/*382*/ {XMLELEMTYPE_ELEMENT=0,
/*383*/ XMLELEMTYPE_TEXT=(XMLELEMTYPE_ELEMENT+1),
/*384*/ XMLELEMTYPE_COMMENT=(XMLELEMTYPE_TEXT+1),
/*385*/ XMLELEMTYPE_DOCUMENT=(XMLELEMTYPE_COMMENT+1),
/*386*/ XMLELEMTYPE_DTD=(XMLELEMTYPE_DOCUMENT+1),
/*387*/ XMLELEMTYPE_PI=(XMLELEMTYPE_DTD+1),
/*388*/ XMLELEMTYPE_OTHER=(XMLELEMTYPE_PI+1)
/*389*/ }XMLELEM_TYPE;
/*392*/ extern const IID LIBID_MSXML;
/*401*/ extern const IID IID_IXMLDOMImplementation;
/*418*/ typedef struct IXMLDOMImplementationVtbl
/*419*/ {
/*420*/ 
/*422*/ HRESULT(__stdcall*QueryInterface)(
/*423*/ IXMLDOMImplementation*This,
/*424*/ const IID*const riid,
/*426*/ void**ppvObject);
/*428*/ ULONG(__stdcall*AddRef)(
/*429*/ IXMLDOMImplementation*This);
/*431*/ ULONG(__stdcall*Release)(
/*432*/ IXMLDOMImplementation*This);
/*434*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*435*/ IXMLDOMImplementation*This,
/*436*/ UINT*pctinfo);
/*438*/ HRESULT(__stdcall*GetTypeInfo)(
/*439*/ IXMLDOMImplementation*This,
/*440*/ UINT iTInfo,
/*441*/ LCID lcid,
/*442*/ ITypeInfo**ppTInfo);
/*444*/ HRESULT(__stdcall*GetIDsOfNames)(
/*445*/ IXMLDOMImplementation*This,
/*446*/ const IID*const riid,
/*447*/ LPOLESTR*rgszNames,
/*448*/ UINT cNames,
/*449*/ LCID lcid,
/*450*/ DISPID*rgDispId);
/*452*/ HRESULT(__stdcall*Invoke)(
/*453*/ IXMLDOMImplementation*This,
/*454*/ DISPID dispIdMember,
/*455*/ const IID*const riid,
/*456*/ LCID lcid,
/*457*/ WORD wFlags,
/*458*/ DISPPARAMS*pDispParams,
/*459*/ VARIANT*pVarResult,
/*460*/ EXCEPINFO*pExcepInfo,
/*461*/ UINT*puArgErr);
/*463*/ HRESULT(__stdcall*hasFeature)(
/*464*/ IXMLDOMImplementation*This,
/*465*/ BSTR feature,
/*466*/ BSTR version,
/*467*/ VARIANT_BOOL*hasFeature);
/*469*/ 
/*470*/ }IXMLDOMImplementationVtbl;
/*472*/ struct IXMLDOMImplementation
/*473*/ {
/*474*/ struct IXMLDOMImplementationVtbl*lpVtbl;
/*475*/ };
/*526*/ extern const IID IID_IXMLDOMNode;
/*657*/ typedef struct IXMLDOMNodeVtbl
/*658*/ {
/*659*/ 
/*661*/ HRESULT(__stdcall*QueryInterface)(
/*662*/ IXMLDOMNode*This,
/*663*/ const IID*const riid,
/*665*/ void**ppvObject);
/*667*/ ULONG(__stdcall*AddRef)(
/*668*/ IXMLDOMNode*This);
/*670*/ ULONG(__stdcall*Release)(
/*671*/ IXMLDOMNode*This);
/*673*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*674*/ IXMLDOMNode*This,
/*675*/ UINT*pctinfo);
/*677*/ HRESULT(__stdcall*GetTypeInfo)(
/*678*/ IXMLDOMNode*This,
/*679*/ UINT iTInfo,
/*680*/ LCID lcid,
/*681*/ ITypeInfo**ppTInfo);
/*683*/ HRESULT(__stdcall*GetIDsOfNames)(
/*684*/ IXMLDOMNode*This,
/*685*/ const IID*const riid,
/*686*/ LPOLESTR*rgszNames,
/*687*/ UINT cNames,
/*688*/ LCID lcid,
/*689*/ DISPID*rgDispId);
/*691*/ HRESULT(__stdcall*Invoke)(
/*692*/ IXMLDOMNode*This,
/*693*/ DISPID dispIdMember,
/*694*/ const IID*const riid,
/*695*/ LCID lcid,
/*696*/ WORD wFlags,
/*697*/ DISPPARAMS*pDispParams,
/*698*/ VARIANT*pVarResult,
/*699*/ EXCEPINFO*pExcepInfo,
/*700*/ UINT*puArgErr);
/*702*/ HRESULT(__stdcall*get_nodeName)(
/*703*/ IXMLDOMNode*This,
/*704*/ BSTR*name);
/*706*/ HRESULT(__stdcall*get_nodeValue)(
/*707*/ IXMLDOMNode*This,
/*708*/ VARIANT*value);
/*710*/ HRESULT(__stdcall*put_nodeValue)(
/*711*/ IXMLDOMNode*This,
/*712*/ VARIANT value);
/*714*/ HRESULT(__stdcall*get_nodeType)(
/*715*/ IXMLDOMNode*This,
/*716*/ DOMNodeType*type);
/*718*/ HRESULT(__stdcall*get_parentNode)(
/*719*/ IXMLDOMNode*This,
/*720*/ IXMLDOMNode**parent);
/*722*/ HRESULT(__stdcall*get_childNodes)(
/*723*/ IXMLDOMNode*This,
/*724*/ IXMLDOMNodeList**childList);
/*726*/ HRESULT(__stdcall*get_firstChild)(
/*727*/ IXMLDOMNode*This,
/*728*/ IXMLDOMNode**firstChild);
/*730*/ HRESULT(__stdcall*get_lastChild)(
/*731*/ IXMLDOMNode*This,
/*732*/ IXMLDOMNode**lastChild);
/*734*/ HRESULT(__stdcall*get_previousSibling)(
/*735*/ IXMLDOMNode*This,
/*736*/ IXMLDOMNode**previousSibling);
/*738*/ HRESULT(__stdcall*get_nextSibling)(
/*739*/ IXMLDOMNode*This,
/*740*/ IXMLDOMNode**nextSibling);
/*742*/ HRESULT(__stdcall*get_attributes)(
/*743*/ IXMLDOMNode*This,
/*744*/ IXMLDOMNamedNodeMap**attributeMap);
/*746*/ HRESULT(__stdcall*insertBefore)(
/*747*/ IXMLDOMNode*This,
/*748*/ IXMLDOMNode*newChild,
/*749*/ VARIANT refChild,
/*750*/ IXMLDOMNode**outNewChild);
/*752*/ HRESULT(__stdcall*replaceChild)(
/*753*/ IXMLDOMNode*This,
/*754*/ IXMLDOMNode*newChild,
/*755*/ IXMLDOMNode*oldChild,
/*756*/ IXMLDOMNode**outOldChild);
/*758*/ HRESULT(__stdcall*removeChild)(
/*759*/ IXMLDOMNode*This,
/*760*/ IXMLDOMNode*childNode,
/*761*/ IXMLDOMNode**oldChild);
/*763*/ HRESULT(__stdcall*appendChild)(
/*764*/ IXMLDOMNode*This,
/*765*/ IXMLDOMNode*newChild,
/*766*/ IXMLDOMNode**outNewChild);
/*768*/ HRESULT(__stdcall*hasChildNodes)(
/*769*/ IXMLDOMNode*This,
/*770*/ VARIANT_BOOL*hasChild);
/*772*/ HRESULT(__stdcall*get_ownerDocument)(
/*773*/ IXMLDOMNode*This,
/*774*/ IXMLDOMDocument**XMLDOMDocument);
/*776*/ HRESULT(__stdcall*cloneNode)(
/*777*/ IXMLDOMNode*This,
/*778*/ VARIANT_BOOL deep,
/*779*/ IXMLDOMNode**cloneRoot);
/*781*/ HRESULT(__stdcall*get_nodeTypeString)(
/*782*/ IXMLDOMNode*This,
/*783*/ BSTR*nodeType);
/*785*/ HRESULT(__stdcall*get_text)(
/*786*/ IXMLDOMNode*This,
/*787*/ BSTR*text);
/*789*/ HRESULT(__stdcall*put_text)(
/*790*/ IXMLDOMNode*This,
/*791*/ BSTR text);
/*793*/ HRESULT(__stdcall*get_specified)(
/*794*/ IXMLDOMNode*This,
/*795*/ VARIANT_BOOL*isSpecified);
/*797*/ HRESULT(__stdcall*get_definition)(
/*798*/ IXMLDOMNode*This,
/*799*/ IXMLDOMNode**definitionNode);
/*801*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*802*/ IXMLDOMNode*This,
/*803*/ VARIANT*typedValue);
/*805*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*806*/ IXMLDOMNode*This,
/*807*/ VARIANT typedValue);
/*809*/ HRESULT(__stdcall*get_dataType)(
/*810*/ IXMLDOMNode*This,
/*811*/ VARIANT*dataTypeName);
/*813*/ HRESULT(__stdcall*put_dataType)(
/*814*/ IXMLDOMNode*This,
/*815*/ BSTR dataTypeName);
/*817*/ HRESULT(__stdcall*get_xml)(
/*818*/ IXMLDOMNode*This,
/*819*/ BSTR*xmlString);
/*821*/ HRESULT(__stdcall*transformNode)(
/*822*/ IXMLDOMNode*This,
/*823*/ IXMLDOMNode*stylesheet,
/*824*/ BSTR*xmlString);
/*826*/ HRESULT(__stdcall*selectNodes)(
/*827*/ IXMLDOMNode*This,
/*828*/ BSTR queryString,
/*829*/ IXMLDOMNodeList**resultList);
/*831*/ HRESULT(__stdcall*selectSingleNode)(
/*832*/ IXMLDOMNode*This,
/*833*/ BSTR queryString,
/*834*/ IXMLDOMNode**resultNode);
/*836*/ HRESULT(__stdcall*get_parsed)(
/*837*/ IXMLDOMNode*This,
/*838*/ VARIANT_BOOL*isParsed);
/*840*/ HRESULT(__stdcall*get_namespaceURI)(
/*841*/ IXMLDOMNode*This,
/*842*/ BSTR*namespaceURI);
/*844*/ HRESULT(__stdcall*get_prefix)(
/*845*/ IXMLDOMNode*This,
/*846*/ BSTR*prefixString);
/*848*/ HRESULT(__stdcall*get_baseName)(
/*849*/ IXMLDOMNode*This,
/*850*/ BSTR*nameString);
/*852*/ HRESULT(__stdcall*transformNodeToObject)(
/*853*/ IXMLDOMNode*This,
/*854*/ IXMLDOMNode*stylesheet,
/*855*/ VARIANT outputObject);
/*857*/ 
/*858*/ }IXMLDOMNodeVtbl;
/*860*/ struct IXMLDOMNode
/*861*/ {
/*862*/ struct IXMLDOMNodeVtbl*lpVtbl;
/*863*/ };
/*1019*/ extern const IID IID_IXMLDOMDocumentFragment;
/*1031*/ typedef struct IXMLDOMDocumentFragmentVtbl
/*1032*/ {
/*1033*/ 
/*1035*/ HRESULT(__stdcall*QueryInterface)(
/*1036*/ IXMLDOMDocumentFragment*This,
/*1037*/ const IID*const riid,
/*1039*/ void**ppvObject);
/*1041*/ ULONG(__stdcall*AddRef)(
/*1042*/ IXMLDOMDocumentFragment*This);
/*1044*/ ULONG(__stdcall*Release)(
/*1045*/ IXMLDOMDocumentFragment*This);
/*1047*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*1048*/ IXMLDOMDocumentFragment*This,
/*1049*/ UINT*pctinfo);
/*1051*/ HRESULT(__stdcall*GetTypeInfo)(
/*1052*/ IXMLDOMDocumentFragment*This,
/*1053*/ UINT iTInfo,
/*1054*/ LCID lcid,
/*1055*/ ITypeInfo**ppTInfo);
/*1057*/ HRESULT(__stdcall*GetIDsOfNames)(
/*1058*/ IXMLDOMDocumentFragment*This,
/*1059*/ const IID*const riid,
/*1060*/ LPOLESTR*rgszNames,
/*1061*/ UINT cNames,
/*1062*/ LCID lcid,
/*1063*/ DISPID*rgDispId);
/*1065*/ HRESULT(__stdcall*Invoke)(
/*1066*/ IXMLDOMDocumentFragment*This,
/*1067*/ DISPID dispIdMember,
/*1068*/ const IID*const riid,
/*1069*/ LCID lcid,
/*1070*/ WORD wFlags,
/*1071*/ DISPPARAMS*pDispParams,
/*1072*/ VARIANT*pVarResult,
/*1073*/ EXCEPINFO*pExcepInfo,
/*1074*/ UINT*puArgErr);
/*1076*/ HRESULT(__stdcall*get_nodeName)(
/*1077*/ IXMLDOMDocumentFragment*This,
/*1078*/ BSTR*name);
/*1080*/ HRESULT(__stdcall*get_nodeValue)(
/*1081*/ IXMLDOMDocumentFragment*This,
/*1082*/ VARIANT*value);
/*1084*/ HRESULT(__stdcall*put_nodeValue)(
/*1085*/ IXMLDOMDocumentFragment*This,
/*1086*/ VARIANT value);
/*1088*/ HRESULT(__stdcall*get_nodeType)(
/*1089*/ IXMLDOMDocumentFragment*This,
/*1090*/ DOMNodeType*type);
/*1092*/ HRESULT(__stdcall*get_parentNode)(
/*1093*/ IXMLDOMDocumentFragment*This,
/*1094*/ IXMLDOMNode**parent);
/*1096*/ HRESULT(__stdcall*get_childNodes)(
/*1097*/ IXMLDOMDocumentFragment*This,
/*1098*/ IXMLDOMNodeList**childList);
/*1100*/ HRESULT(__stdcall*get_firstChild)(
/*1101*/ IXMLDOMDocumentFragment*This,
/*1102*/ IXMLDOMNode**firstChild);
/*1104*/ HRESULT(__stdcall*get_lastChild)(
/*1105*/ IXMLDOMDocumentFragment*This,
/*1106*/ IXMLDOMNode**lastChild);
/*1108*/ HRESULT(__stdcall*get_previousSibling)(
/*1109*/ IXMLDOMDocumentFragment*This,
/*1110*/ IXMLDOMNode**previousSibling);
/*1112*/ HRESULT(__stdcall*get_nextSibling)(
/*1113*/ IXMLDOMDocumentFragment*This,
/*1114*/ IXMLDOMNode**nextSibling);
/*1116*/ HRESULT(__stdcall*get_attributes)(
/*1117*/ IXMLDOMDocumentFragment*This,
/*1118*/ IXMLDOMNamedNodeMap**attributeMap);
/*1120*/ HRESULT(__stdcall*insertBefore)(
/*1121*/ IXMLDOMDocumentFragment*This,
/*1122*/ IXMLDOMNode*newChild,
/*1123*/ VARIANT refChild,
/*1124*/ IXMLDOMNode**outNewChild);
/*1126*/ HRESULT(__stdcall*replaceChild)(
/*1127*/ IXMLDOMDocumentFragment*This,
/*1128*/ IXMLDOMNode*newChild,
/*1129*/ IXMLDOMNode*oldChild,
/*1130*/ IXMLDOMNode**outOldChild);
/*1132*/ HRESULT(__stdcall*removeChild)(
/*1133*/ IXMLDOMDocumentFragment*This,
/*1134*/ IXMLDOMNode*childNode,
/*1135*/ IXMLDOMNode**oldChild);
/*1137*/ HRESULT(__stdcall*appendChild)(
/*1138*/ IXMLDOMDocumentFragment*This,
/*1139*/ IXMLDOMNode*newChild,
/*1140*/ IXMLDOMNode**outNewChild);
/*1142*/ HRESULT(__stdcall*hasChildNodes)(
/*1143*/ IXMLDOMDocumentFragment*This,
/*1144*/ VARIANT_BOOL*hasChild);
/*1146*/ HRESULT(__stdcall*get_ownerDocument)(
/*1147*/ IXMLDOMDocumentFragment*This,
/*1148*/ IXMLDOMDocument**XMLDOMDocument);
/*1150*/ HRESULT(__stdcall*cloneNode)(
/*1151*/ IXMLDOMDocumentFragment*This,
/*1152*/ VARIANT_BOOL deep,
/*1153*/ IXMLDOMNode**cloneRoot);
/*1155*/ HRESULT(__stdcall*get_nodeTypeString)(
/*1156*/ IXMLDOMDocumentFragment*This,
/*1157*/ BSTR*nodeType);
/*1159*/ HRESULT(__stdcall*get_text)(
/*1160*/ IXMLDOMDocumentFragment*This,
/*1161*/ BSTR*text);
/*1163*/ HRESULT(__stdcall*put_text)(
/*1164*/ IXMLDOMDocumentFragment*This,
/*1165*/ BSTR text);
/*1167*/ HRESULT(__stdcall*get_specified)(
/*1168*/ IXMLDOMDocumentFragment*This,
/*1169*/ VARIANT_BOOL*isSpecified);
/*1171*/ HRESULT(__stdcall*get_definition)(
/*1172*/ IXMLDOMDocumentFragment*This,
/*1173*/ IXMLDOMNode**definitionNode);
/*1175*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*1176*/ IXMLDOMDocumentFragment*This,
/*1177*/ VARIANT*typedValue);
/*1179*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*1180*/ IXMLDOMDocumentFragment*This,
/*1181*/ VARIANT typedValue);
/*1183*/ HRESULT(__stdcall*get_dataType)(
/*1184*/ IXMLDOMDocumentFragment*This,
/*1185*/ VARIANT*dataTypeName);
/*1187*/ HRESULT(__stdcall*put_dataType)(
/*1188*/ IXMLDOMDocumentFragment*This,
/*1189*/ BSTR dataTypeName);
/*1191*/ HRESULT(__stdcall*get_xml)(
/*1192*/ IXMLDOMDocumentFragment*This,
/*1193*/ BSTR*xmlString);
/*1195*/ HRESULT(__stdcall*transformNode)(
/*1196*/ IXMLDOMDocumentFragment*This,
/*1197*/ IXMLDOMNode*stylesheet,
/*1198*/ BSTR*xmlString);
/*1200*/ HRESULT(__stdcall*selectNodes)(
/*1201*/ IXMLDOMDocumentFragment*This,
/*1202*/ BSTR queryString,
/*1203*/ IXMLDOMNodeList**resultList);
/*1205*/ HRESULT(__stdcall*selectSingleNode)(
/*1206*/ IXMLDOMDocumentFragment*This,
/*1207*/ BSTR queryString,
/*1208*/ IXMLDOMNode**resultNode);
/*1210*/ HRESULT(__stdcall*get_parsed)(
/*1211*/ IXMLDOMDocumentFragment*This,
/*1212*/ VARIANT_BOOL*isParsed);
/*1214*/ HRESULT(__stdcall*get_namespaceURI)(
/*1215*/ IXMLDOMDocumentFragment*This,
/*1216*/ BSTR*namespaceURI);
/*1218*/ HRESULT(__stdcall*get_prefix)(
/*1219*/ IXMLDOMDocumentFragment*This,
/*1220*/ BSTR*prefixString);
/*1222*/ HRESULT(__stdcall*get_baseName)(
/*1223*/ IXMLDOMDocumentFragment*This,
/*1224*/ BSTR*nameString);
/*1226*/ HRESULT(__stdcall*transformNodeToObject)(
/*1227*/ IXMLDOMDocumentFragment*This,
/*1228*/ IXMLDOMNode*stylesheet,
/*1229*/ VARIANT outputObject);
/*1231*/ 
/*1232*/ }IXMLDOMDocumentFragmentVtbl;
/*1234*/ struct IXMLDOMDocumentFragment
/*1235*/ {
/*1236*/ struct IXMLDOMDocumentFragmentVtbl*lpVtbl;
/*1237*/ };
/*1394*/ extern const IID IID_IXMLDOMDocument;
/*1519*/ typedef struct IXMLDOMDocumentVtbl
/*1520*/ {
/*1521*/ 
/*1523*/ HRESULT(__stdcall*QueryInterface)(
/*1524*/ IXMLDOMDocument*This,
/*1525*/ const IID*const riid,
/*1527*/ void**ppvObject);
/*1529*/ ULONG(__stdcall*AddRef)(
/*1530*/ IXMLDOMDocument*This);
/*1532*/ ULONG(__stdcall*Release)(
/*1533*/ IXMLDOMDocument*This);
/*1535*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*1536*/ IXMLDOMDocument*This,
/*1537*/ UINT*pctinfo);
/*1539*/ HRESULT(__stdcall*GetTypeInfo)(
/*1540*/ IXMLDOMDocument*This,
/*1541*/ UINT iTInfo,
/*1542*/ LCID lcid,
/*1543*/ ITypeInfo**ppTInfo);
/*1545*/ HRESULT(__stdcall*GetIDsOfNames)(
/*1546*/ IXMLDOMDocument*This,
/*1547*/ const IID*const riid,
/*1548*/ LPOLESTR*rgszNames,
/*1549*/ UINT cNames,
/*1550*/ LCID lcid,
/*1551*/ DISPID*rgDispId);
/*1553*/ HRESULT(__stdcall*Invoke)(
/*1554*/ IXMLDOMDocument*This,
/*1555*/ DISPID dispIdMember,
/*1556*/ const IID*const riid,
/*1557*/ LCID lcid,
/*1558*/ WORD wFlags,
/*1559*/ DISPPARAMS*pDispParams,
/*1560*/ VARIANT*pVarResult,
/*1561*/ EXCEPINFO*pExcepInfo,
/*1562*/ UINT*puArgErr);
/*1564*/ HRESULT(__stdcall*get_nodeName)(
/*1565*/ IXMLDOMDocument*This,
/*1566*/ BSTR*name);
/*1568*/ HRESULT(__stdcall*get_nodeValue)(
/*1569*/ IXMLDOMDocument*This,
/*1570*/ VARIANT*value);
/*1572*/ HRESULT(__stdcall*put_nodeValue)(
/*1573*/ IXMLDOMDocument*This,
/*1574*/ VARIANT value);
/*1576*/ HRESULT(__stdcall*get_nodeType)(
/*1577*/ IXMLDOMDocument*This,
/*1578*/ DOMNodeType*type);
/*1580*/ HRESULT(__stdcall*get_parentNode)(
/*1581*/ IXMLDOMDocument*This,
/*1582*/ IXMLDOMNode**parent);
/*1584*/ HRESULT(__stdcall*get_childNodes)(
/*1585*/ IXMLDOMDocument*This,
/*1586*/ IXMLDOMNodeList**childList);
/*1588*/ HRESULT(__stdcall*get_firstChild)(
/*1589*/ IXMLDOMDocument*This,
/*1590*/ IXMLDOMNode**firstChild);
/*1592*/ HRESULT(__stdcall*get_lastChild)(
/*1593*/ IXMLDOMDocument*This,
/*1594*/ IXMLDOMNode**lastChild);
/*1596*/ HRESULT(__stdcall*get_previousSibling)(
/*1597*/ IXMLDOMDocument*This,
/*1598*/ IXMLDOMNode**previousSibling);
/*1600*/ HRESULT(__stdcall*get_nextSibling)(
/*1601*/ IXMLDOMDocument*This,
/*1602*/ IXMLDOMNode**nextSibling);
/*1604*/ HRESULT(__stdcall*get_attributes)(
/*1605*/ IXMLDOMDocument*This,
/*1606*/ IXMLDOMNamedNodeMap**attributeMap);
/*1608*/ HRESULT(__stdcall*insertBefore)(
/*1609*/ IXMLDOMDocument*This,
/*1610*/ IXMLDOMNode*newChild,
/*1611*/ VARIANT refChild,
/*1612*/ IXMLDOMNode**outNewChild);
/*1614*/ HRESULT(__stdcall*replaceChild)(
/*1615*/ IXMLDOMDocument*This,
/*1616*/ IXMLDOMNode*newChild,
/*1617*/ IXMLDOMNode*oldChild,
/*1618*/ IXMLDOMNode**outOldChild);
/*1620*/ HRESULT(__stdcall*removeChild)(
/*1621*/ IXMLDOMDocument*This,
/*1622*/ IXMLDOMNode*childNode,
/*1623*/ IXMLDOMNode**oldChild);
/*1625*/ HRESULT(__stdcall*appendChild)(
/*1626*/ IXMLDOMDocument*This,
/*1627*/ IXMLDOMNode*newChild,
/*1628*/ IXMLDOMNode**outNewChild);
/*1630*/ HRESULT(__stdcall*hasChildNodes)(
/*1631*/ IXMLDOMDocument*This,
/*1632*/ VARIANT_BOOL*hasChild);
/*1634*/ HRESULT(__stdcall*get_ownerDocument)(
/*1635*/ IXMLDOMDocument*This,
/*1636*/ IXMLDOMDocument**XMLDOMDocument);
/*1638*/ HRESULT(__stdcall*cloneNode)(
/*1639*/ IXMLDOMDocument*This,
/*1640*/ VARIANT_BOOL deep,
/*1641*/ IXMLDOMNode**cloneRoot);
/*1643*/ HRESULT(__stdcall*get_nodeTypeString)(
/*1644*/ IXMLDOMDocument*This,
/*1645*/ BSTR*nodeType);
/*1647*/ HRESULT(__stdcall*get_text)(
/*1648*/ IXMLDOMDocument*This,
/*1649*/ BSTR*text);
/*1651*/ HRESULT(__stdcall*put_text)(
/*1652*/ IXMLDOMDocument*This,
/*1653*/ BSTR text);
/*1655*/ HRESULT(__stdcall*get_specified)(
/*1656*/ IXMLDOMDocument*This,
/*1657*/ VARIANT_BOOL*isSpecified);
/*1659*/ HRESULT(__stdcall*get_definition)(
/*1660*/ IXMLDOMDocument*This,
/*1661*/ IXMLDOMNode**definitionNode);
/*1663*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*1664*/ IXMLDOMDocument*This,
/*1665*/ VARIANT*typedValue);
/*1667*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*1668*/ IXMLDOMDocument*This,
/*1669*/ VARIANT typedValue);
/*1671*/ HRESULT(__stdcall*get_dataType)(
/*1672*/ IXMLDOMDocument*This,
/*1673*/ VARIANT*dataTypeName);
/*1675*/ HRESULT(__stdcall*put_dataType)(
/*1676*/ IXMLDOMDocument*This,
/*1677*/ BSTR dataTypeName);
/*1679*/ HRESULT(__stdcall*get_xml)(
/*1680*/ IXMLDOMDocument*This,
/*1681*/ BSTR*xmlString);
/*1683*/ HRESULT(__stdcall*transformNode)(
/*1684*/ IXMLDOMDocument*This,
/*1685*/ IXMLDOMNode*stylesheet,
/*1686*/ BSTR*xmlString);
/*1688*/ HRESULT(__stdcall*selectNodes)(
/*1689*/ IXMLDOMDocument*This,
/*1690*/ BSTR queryString,
/*1691*/ IXMLDOMNodeList**resultList);
/*1693*/ HRESULT(__stdcall*selectSingleNode)(
/*1694*/ IXMLDOMDocument*This,
/*1695*/ BSTR queryString,
/*1696*/ IXMLDOMNode**resultNode);
/*1698*/ HRESULT(__stdcall*get_parsed)(
/*1699*/ IXMLDOMDocument*This,
/*1700*/ VARIANT_BOOL*isParsed);
/*1702*/ HRESULT(__stdcall*get_namespaceURI)(
/*1703*/ IXMLDOMDocument*This,
/*1704*/ BSTR*namespaceURI);
/*1706*/ HRESULT(__stdcall*get_prefix)(
/*1707*/ IXMLDOMDocument*This,
/*1708*/ BSTR*prefixString);
/*1710*/ HRESULT(__stdcall*get_baseName)(
/*1711*/ IXMLDOMDocument*This,
/*1712*/ BSTR*nameString);
/*1714*/ HRESULT(__stdcall*transformNodeToObject)(
/*1715*/ IXMLDOMDocument*This,
/*1716*/ IXMLDOMNode*stylesheet,
/*1717*/ VARIANT outputObject);
/*1719*/ HRESULT(__stdcall*get_doctype)(
/*1720*/ IXMLDOMDocument*This,
/*1721*/ IXMLDOMDocumentType**documentType);
/*1723*/ HRESULT(__stdcall*get_implementation)(
/*1724*/ IXMLDOMDocument*This,
/*1725*/ IXMLDOMImplementation**impl);
/*1727*/ HRESULT(__stdcall*get_documentElement)(
/*1728*/ IXMLDOMDocument*This,
/*1729*/ IXMLDOMElement**DOMElement);
/*1731*/ HRESULT(__stdcall*putref_documentElement)(
/*1732*/ IXMLDOMDocument*This,
/*1733*/ IXMLDOMElement*DOMElement);
/*1735*/ HRESULT(__stdcall*createElement)(
/*1736*/ IXMLDOMDocument*This,
/*1737*/ BSTR tagName,
/*1738*/ IXMLDOMElement**element);
/*1740*/ HRESULT(__stdcall*createDocumentFragment)(
/*1741*/ IXMLDOMDocument*This,
/*1742*/ IXMLDOMDocumentFragment**docFrag);
/*1744*/ HRESULT(__stdcall*createTextNode)(
/*1745*/ IXMLDOMDocument*This,
/*1746*/ BSTR data,
/*1747*/ IXMLDOMText**text);
/*1749*/ HRESULT(__stdcall*createComment)(
/*1750*/ IXMLDOMDocument*This,
/*1751*/ BSTR data,
/*1752*/ IXMLDOMComment**comment);
/*1754*/ HRESULT(__stdcall*createCDATASection)(
/*1755*/ IXMLDOMDocument*This,
/*1756*/ BSTR data,
/*1757*/ IXMLDOMCDATASection**cdata);
/*1759*/ HRESULT(__stdcall*createProcessingInstruction)(
/*1760*/ IXMLDOMDocument*This,
/*1761*/ BSTR target,
/*1762*/ BSTR data,
/*1763*/ IXMLDOMProcessingInstruction**pi);
/*1765*/ HRESULT(__stdcall*createAttribute)(
/*1766*/ IXMLDOMDocument*This,
/*1767*/ BSTR name,
/*1768*/ IXMLDOMAttribute**attribute);
/*1770*/ HRESULT(__stdcall*createEntityReference)(
/*1771*/ IXMLDOMDocument*This,
/*1772*/ BSTR name,
/*1773*/ IXMLDOMEntityReference**entityRef);
/*1775*/ HRESULT(__stdcall*getElementsByTagName)(
/*1776*/ IXMLDOMDocument*This,
/*1777*/ BSTR tagName,
/*1778*/ IXMLDOMNodeList**resultList);
/*1780*/ HRESULT(__stdcall*createNode)(
/*1781*/ IXMLDOMDocument*This,
/*1782*/ VARIANT Type,
/*1783*/ BSTR name,
/*1784*/ BSTR namespaceURI,
/*1785*/ IXMLDOMNode**node);
/*1787*/ HRESULT(__stdcall*nodeFromID)(
/*1788*/ IXMLDOMDocument*This,
/*1789*/ BSTR idString,
/*1790*/ IXMLDOMNode**node);
/*1792*/ HRESULT(__stdcall*load)(
/*1793*/ IXMLDOMDocument*This,
/*1794*/ VARIANT xmlSource,
/*1795*/ VARIANT_BOOL*isSuccessful);
/*1797*/ HRESULT(__stdcall*get_readyState)(
/*1798*/ IXMLDOMDocument*This,
/*1799*/ long*value);
/*1801*/ HRESULT(__stdcall*get_parseError)(
/*1802*/ IXMLDOMDocument*This,
/*1803*/ IXMLDOMParseError**errorObj);
/*1805*/ HRESULT(__stdcall*get_url)(
/*1806*/ IXMLDOMDocument*This,
/*1807*/ BSTR*urlString);
/*1809*/ HRESULT(__stdcall*get_async)(
/*1810*/ IXMLDOMDocument*This,
/*1811*/ VARIANT_BOOL*isAsync);
/*1813*/ HRESULT(__stdcall*put_async)(
/*1814*/ IXMLDOMDocument*This,
/*1815*/ VARIANT_BOOL isAsync);
/*1817*/ HRESULT(__stdcall*abort)(
/*1818*/ IXMLDOMDocument*This);
/*1820*/ HRESULT(__stdcall*loadXML)(
/*1821*/ IXMLDOMDocument*This,
/*1822*/ BSTR bstrXML,
/*1823*/ VARIANT_BOOL*isSuccessful);
/*1825*/ HRESULT(__stdcall*save)(
/*1826*/ IXMLDOMDocument*This,
/*1827*/ VARIANT destination);
/*1829*/ HRESULT(__stdcall*get_validateOnParse)(
/*1830*/ IXMLDOMDocument*This,
/*1831*/ VARIANT_BOOL*isValidating);
/*1833*/ HRESULT(__stdcall*put_validateOnParse)(
/*1834*/ IXMLDOMDocument*This,
/*1835*/ VARIANT_BOOL isValidating);
/*1837*/ HRESULT(__stdcall*get_resolveExternals)(
/*1838*/ IXMLDOMDocument*This,
/*1839*/ VARIANT_BOOL*isResolving);
/*1841*/ HRESULT(__stdcall*put_resolveExternals)(
/*1842*/ IXMLDOMDocument*This,
/*1843*/ VARIANT_BOOL isResolving);
/*1845*/ HRESULT(__stdcall*get_preserveWhiteSpace)(
/*1846*/ IXMLDOMDocument*This,
/*1847*/ VARIANT_BOOL*isPreserving);
/*1849*/ HRESULT(__stdcall*put_preserveWhiteSpace)(
/*1850*/ IXMLDOMDocument*This,
/*1851*/ VARIANT_BOOL isPreserving);
/*1853*/ HRESULT(__stdcall*put_onreadystatechange)(
/*1854*/ IXMLDOMDocument*This,
/*1855*/ VARIANT readystatechangeSink);
/*1857*/ HRESULT(__stdcall*put_ondataavailable)(
/*1858*/ IXMLDOMDocument*This,
/*1859*/ VARIANT ondataavailableSink);
/*1861*/ HRESULT(__stdcall*put_ontransformnode)(
/*1862*/ IXMLDOMDocument*This,
/*1863*/ VARIANT ontransformnodeSink);
/*1865*/ 
/*1866*/ }IXMLDOMDocumentVtbl;
/*1868*/ struct IXMLDOMDocument
/*1869*/ {
/*1870*/ struct IXMLDOMDocumentVtbl*lpVtbl;
/*1871*/ };
/*2127*/ extern const IID IID_IXMLDOMNodeList;
/*2154*/ typedef struct IXMLDOMNodeListVtbl
/*2155*/ {
/*2156*/ 
/*2158*/ HRESULT(__stdcall*QueryInterface)(
/*2159*/ IXMLDOMNodeList*This,
/*2160*/ const IID*const riid,
/*2162*/ void**ppvObject);
/*2164*/ ULONG(__stdcall*AddRef)(
/*2165*/ IXMLDOMNodeList*This);
/*2167*/ ULONG(__stdcall*Release)(
/*2168*/ IXMLDOMNodeList*This);
/*2170*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*2171*/ IXMLDOMNodeList*This,
/*2172*/ UINT*pctinfo);
/*2174*/ HRESULT(__stdcall*GetTypeInfo)(
/*2175*/ IXMLDOMNodeList*This,
/*2176*/ UINT iTInfo,
/*2177*/ LCID lcid,
/*2178*/ ITypeInfo**ppTInfo);
/*2180*/ HRESULT(__stdcall*GetIDsOfNames)(
/*2181*/ IXMLDOMNodeList*This,
/*2182*/ const IID*const riid,
/*2183*/ LPOLESTR*rgszNames,
/*2184*/ UINT cNames,
/*2185*/ LCID lcid,
/*2186*/ DISPID*rgDispId);
/*2188*/ HRESULT(__stdcall*Invoke)(
/*2189*/ IXMLDOMNodeList*This,
/*2190*/ DISPID dispIdMember,
/*2191*/ const IID*const riid,
/*2192*/ LCID lcid,
/*2193*/ WORD wFlags,
/*2194*/ DISPPARAMS*pDispParams,
/*2195*/ VARIANT*pVarResult,
/*2196*/ EXCEPINFO*pExcepInfo,
/*2197*/ UINT*puArgErr);
/*2199*/ HRESULT(__stdcall*get_item)(
/*2200*/ IXMLDOMNodeList*This,
/*2201*/ long index,
/*2202*/ IXMLDOMNode**listItem);
/*2204*/ HRESULT(__stdcall*get_length)(
/*2205*/ IXMLDOMNodeList*This,
/*2206*/ long*listLength);
/*2208*/ HRESULT(__stdcall*nextNode)(
/*2209*/ IXMLDOMNodeList*This,
/*2210*/ IXMLDOMNode**nextItem);
/*2212*/ HRESULT(__stdcall*reset)(
/*2213*/ IXMLDOMNodeList*This);
/*2215*/ HRESULT(__stdcall*get__newEnum)(
/*2216*/ IXMLDOMNodeList*This,
/*2217*/ IUnknown**ppUnk);
/*2219*/ 
/*2220*/ }IXMLDOMNodeListVtbl;
/*2222*/ struct IXMLDOMNodeList
/*2223*/ {
/*2224*/ struct IXMLDOMNodeListVtbl*lpVtbl;
/*2225*/ };
/*2288*/ extern const IID IID_IXMLDOMNamedNodeMap;
/*2337*/ typedef struct IXMLDOMNamedNodeMapVtbl
/*2338*/ {
/*2339*/ 
/*2341*/ HRESULT(__stdcall*QueryInterface)(
/*2342*/ IXMLDOMNamedNodeMap*This,
/*2343*/ const IID*const riid,
/*2345*/ void**ppvObject);
/*2347*/ ULONG(__stdcall*AddRef)(
/*2348*/ IXMLDOMNamedNodeMap*This);
/*2350*/ ULONG(__stdcall*Release)(
/*2351*/ IXMLDOMNamedNodeMap*This);
/*2353*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*2354*/ IXMLDOMNamedNodeMap*This,
/*2355*/ UINT*pctinfo);
/*2357*/ HRESULT(__stdcall*GetTypeInfo)(
/*2358*/ IXMLDOMNamedNodeMap*This,
/*2359*/ UINT iTInfo,
/*2360*/ LCID lcid,
/*2361*/ ITypeInfo**ppTInfo);
/*2363*/ HRESULT(__stdcall*GetIDsOfNames)(
/*2364*/ IXMLDOMNamedNodeMap*This,
/*2365*/ const IID*const riid,
/*2366*/ LPOLESTR*rgszNames,
/*2367*/ UINT cNames,
/*2368*/ LCID lcid,
/*2369*/ DISPID*rgDispId);
/*2371*/ HRESULT(__stdcall*Invoke)(
/*2372*/ IXMLDOMNamedNodeMap*This,
/*2373*/ DISPID dispIdMember,
/*2374*/ const IID*const riid,
/*2375*/ LCID lcid,
/*2376*/ WORD wFlags,
/*2377*/ DISPPARAMS*pDispParams,
/*2378*/ VARIANT*pVarResult,
/*2379*/ EXCEPINFO*pExcepInfo,
/*2380*/ UINT*puArgErr);
/*2382*/ HRESULT(__stdcall*getNamedItem)(
/*2383*/ IXMLDOMNamedNodeMap*This,
/*2384*/ BSTR name,
/*2385*/ IXMLDOMNode**namedItem);
/*2387*/ HRESULT(__stdcall*setNamedItem)(
/*2388*/ IXMLDOMNamedNodeMap*This,
/*2389*/ IXMLDOMNode*newItem,
/*2390*/ IXMLDOMNode**nameItem);
/*2392*/ HRESULT(__stdcall*removeNamedItem)(
/*2393*/ IXMLDOMNamedNodeMap*This,
/*2394*/ BSTR name,
/*2395*/ IXMLDOMNode**namedItem);
/*2397*/ HRESULT(__stdcall*get_item)(
/*2398*/ IXMLDOMNamedNodeMap*This,
/*2399*/ long index,
/*2400*/ IXMLDOMNode**listItem);
/*2402*/ HRESULT(__stdcall*get_length)(
/*2403*/ IXMLDOMNamedNodeMap*This,
/*2404*/ long*listLength);
/*2406*/ HRESULT(__stdcall*getQualifiedItem)(
/*2407*/ IXMLDOMNamedNodeMap*This,
/*2408*/ BSTR baseName,
/*2409*/ BSTR namespaceURI,
/*2410*/ IXMLDOMNode**qualifiedItem);
/*2412*/ HRESULT(__stdcall*removeQualifiedItem)(
/*2413*/ IXMLDOMNamedNodeMap*This,
/*2414*/ BSTR baseName,
/*2415*/ BSTR namespaceURI,
/*2416*/ IXMLDOMNode**qualifiedItem);
/*2418*/ HRESULT(__stdcall*nextNode)(
/*2419*/ IXMLDOMNamedNodeMap*This,
/*2420*/ IXMLDOMNode**nextItem);
/*2422*/ HRESULT(__stdcall*reset)(
/*2423*/ IXMLDOMNamedNodeMap*This);
/*2425*/ HRESULT(__stdcall*get__newEnum)(
/*2426*/ IXMLDOMNamedNodeMap*This,
/*2427*/ IUnknown**ppUnk);
/*2429*/ 
/*2430*/ }IXMLDOMNamedNodeMapVtbl;
/*2432*/ struct IXMLDOMNamedNodeMap
/*2433*/ {
/*2434*/ struct IXMLDOMNamedNodeMapVtbl*lpVtbl;
/*2435*/ };
/*2513*/ extern const IID IID_IXMLDOMCharacterData;
/*2555*/ typedef struct IXMLDOMCharacterDataVtbl
/*2556*/ {
/*2557*/ 
/*2559*/ HRESULT(__stdcall*QueryInterface)(
/*2560*/ IXMLDOMCharacterData*This,
/*2561*/ const IID*const riid,
/*2563*/ void**ppvObject);
/*2565*/ ULONG(__stdcall*AddRef)(
/*2566*/ IXMLDOMCharacterData*This);
/*2568*/ ULONG(__stdcall*Release)(
/*2569*/ IXMLDOMCharacterData*This);
/*2571*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*2572*/ IXMLDOMCharacterData*This,
/*2573*/ UINT*pctinfo);
/*2575*/ HRESULT(__stdcall*GetTypeInfo)(
/*2576*/ IXMLDOMCharacterData*This,
/*2577*/ UINT iTInfo,
/*2578*/ LCID lcid,
/*2579*/ ITypeInfo**ppTInfo);
/*2581*/ HRESULT(__stdcall*GetIDsOfNames)(
/*2582*/ IXMLDOMCharacterData*This,
/*2583*/ const IID*const riid,
/*2584*/ LPOLESTR*rgszNames,
/*2585*/ UINT cNames,
/*2586*/ LCID lcid,
/*2587*/ DISPID*rgDispId);
/*2589*/ HRESULT(__stdcall*Invoke)(
/*2590*/ IXMLDOMCharacterData*This,
/*2591*/ DISPID dispIdMember,
/*2592*/ const IID*const riid,
/*2593*/ LCID lcid,
/*2594*/ WORD wFlags,
/*2595*/ DISPPARAMS*pDispParams,
/*2596*/ VARIANT*pVarResult,
/*2597*/ EXCEPINFO*pExcepInfo,
/*2598*/ UINT*puArgErr);
/*2600*/ HRESULT(__stdcall*get_nodeName)(
/*2601*/ IXMLDOMCharacterData*This,
/*2602*/ BSTR*name);
/*2604*/ HRESULT(__stdcall*get_nodeValue)(
/*2605*/ IXMLDOMCharacterData*This,
/*2606*/ VARIANT*value);
/*2608*/ HRESULT(__stdcall*put_nodeValue)(
/*2609*/ IXMLDOMCharacterData*This,
/*2610*/ VARIANT value);
/*2612*/ HRESULT(__stdcall*get_nodeType)(
/*2613*/ IXMLDOMCharacterData*This,
/*2614*/ DOMNodeType*type);
/*2616*/ HRESULT(__stdcall*get_parentNode)(
/*2617*/ IXMLDOMCharacterData*This,
/*2618*/ IXMLDOMNode**parent);
/*2620*/ HRESULT(__stdcall*get_childNodes)(
/*2621*/ IXMLDOMCharacterData*This,
/*2622*/ IXMLDOMNodeList**childList);
/*2624*/ HRESULT(__stdcall*get_firstChild)(
/*2625*/ IXMLDOMCharacterData*This,
/*2626*/ IXMLDOMNode**firstChild);
/*2628*/ HRESULT(__stdcall*get_lastChild)(
/*2629*/ IXMLDOMCharacterData*This,
/*2630*/ IXMLDOMNode**lastChild);
/*2632*/ HRESULT(__stdcall*get_previousSibling)(
/*2633*/ IXMLDOMCharacterData*This,
/*2634*/ IXMLDOMNode**previousSibling);
/*2636*/ HRESULT(__stdcall*get_nextSibling)(
/*2637*/ IXMLDOMCharacterData*This,
/*2638*/ IXMLDOMNode**nextSibling);
/*2640*/ HRESULT(__stdcall*get_attributes)(
/*2641*/ IXMLDOMCharacterData*This,
/*2642*/ IXMLDOMNamedNodeMap**attributeMap);
/*2644*/ HRESULT(__stdcall*insertBefore)(
/*2645*/ IXMLDOMCharacterData*This,
/*2646*/ IXMLDOMNode*newChild,
/*2647*/ VARIANT refChild,
/*2648*/ IXMLDOMNode**outNewChild);
/*2650*/ HRESULT(__stdcall*replaceChild)(
/*2651*/ IXMLDOMCharacterData*This,
/*2652*/ IXMLDOMNode*newChild,
/*2653*/ IXMLDOMNode*oldChild,
/*2654*/ IXMLDOMNode**outOldChild);
/*2656*/ HRESULT(__stdcall*removeChild)(
/*2657*/ IXMLDOMCharacterData*This,
/*2658*/ IXMLDOMNode*childNode,
/*2659*/ IXMLDOMNode**oldChild);
/*2661*/ HRESULT(__stdcall*appendChild)(
/*2662*/ IXMLDOMCharacterData*This,
/*2663*/ IXMLDOMNode*newChild,
/*2664*/ IXMLDOMNode**outNewChild);
/*2666*/ HRESULT(__stdcall*hasChildNodes)(
/*2667*/ IXMLDOMCharacterData*This,
/*2668*/ VARIANT_BOOL*hasChild);
/*2670*/ HRESULT(__stdcall*get_ownerDocument)(
/*2671*/ IXMLDOMCharacterData*This,
/*2672*/ IXMLDOMDocument**XMLDOMDocument);
/*2674*/ HRESULT(__stdcall*cloneNode)(
/*2675*/ IXMLDOMCharacterData*This,
/*2676*/ VARIANT_BOOL deep,
/*2677*/ IXMLDOMNode**cloneRoot);
/*2679*/ HRESULT(__stdcall*get_nodeTypeString)(
/*2680*/ IXMLDOMCharacterData*This,
/*2681*/ BSTR*nodeType);
/*2683*/ HRESULT(__stdcall*get_text)(
/*2684*/ IXMLDOMCharacterData*This,
/*2685*/ BSTR*text);
/*2687*/ HRESULT(__stdcall*put_text)(
/*2688*/ IXMLDOMCharacterData*This,
/*2689*/ BSTR text);
/*2691*/ HRESULT(__stdcall*get_specified)(
/*2692*/ IXMLDOMCharacterData*This,
/*2693*/ VARIANT_BOOL*isSpecified);
/*2695*/ HRESULT(__stdcall*get_definition)(
/*2696*/ IXMLDOMCharacterData*This,
/*2697*/ IXMLDOMNode**definitionNode);
/*2699*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*2700*/ IXMLDOMCharacterData*This,
/*2701*/ VARIANT*typedValue);
/*2703*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*2704*/ IXMLDOMCharacterData*This,
/*2705*/ VARIANT typedValue);
/*2707*/ HRESULT(__stdcall*get_dataType)(
/*2708*/ IXMLDOMCharacterData*This,
/*2709*/ VARIANT*dataTypeName);
/*2711*/ HRESULT(__stdcall*put_dataType)(
/*2712*/ IXMLDOMCharacterData*This,
/*2713*/ BSTR dataTypeName);
/*2715*/ HRESULT(__stdcall*get_xml)(
/*2716*/ IXMLDOMCharacterData*This,
/*2717*/ BSTR*xmlString);
/*2719*/ HRESULT(__stdcall*transformNode)(
/*2720*/ IXMLDOMCharacterData*This,
/*2721*/ IXMLDOMNode*stylesheet,
/*2722*/ BSTR*xmlString);
/*2724*/ HRESULT(__stdcall*selectNodes)(
/*2725*/ IXMLDOMCharacterData*This,
/*2726*/ BSTR queryString,
/*2727*/ IXMLDOMNodeList**resultList);
/*2729*/ HRESULT(__stdcall*selectSingleNode)(
/*2730*/ IXMLDOMCharacterData*This,
/*2731*/ BSTR queryString,
/*2732*/ IXMLDOMNode**resultNode);
/*2734*/ HRESULT(__stdcall*get_parsed)(
/*2735*/ IXMLDOMCharacterData*This,
/*2736*/ VARIANT_BOOL*isParsed);
/*2738*/ HRESULT(__stdcall*get_namespaceURI)(
/*2739*/ IXMLDOMCharacterData*This,
/*2740*/ BSTR*namespaceURI);
/*2742*/ HRESULT(__stdcall*get_prefix)(
/*2743*/ IXMLDOMCharacterData*This,
/*2744*/ BSTR*prefixString);
/*2746*/ HRESULT(__stdcall*get_baseName)(
/*2747*/ IXMLDOMCharacterData*This,
/*2748*/ BSTR*nameString);
/*2750*/ HRESULT(__stdcall*transformNodeToObject)(
/*2751*/ IXMLDOMCharacterData*This,
/*2752*/ IXMLDOMNode*stylesheet,
/*2753*/ VARIANT outputObject);
/*2755*/ HRESULT(__stdcall*get_data)(
/*2756*/ IXMLDOMCharacterData*This,
/*2757*/ BSTR*data);
/*2759*/ HRESULT(__stdcall*put_data)(
/*2760*/ IXMLDOMCharacterData*This,
/*2761*/ BSTR data);
/*2763*/ HRESULT(__stdcall*get_length)(
/*2764*/ IXMLDOMCharacterData*This,
/*2765*/ long*dataLength);
/*2767*/ HRESULT(__stdcall*substringData)(
/*2768*/ IXMLDOMCharacterData*This,
/*2769*/ long offset,
/*2770*/ long count,
/*2771*/ BSTR*data);
/*2773*/ HRESULT(__stdcall*appendData)(
/*2774*/ IXMLDOMCharacterData*This,
/*2775*/ BSTR data);
/*2777*/ HRESULT(__stdcall*insertData)(
/*2778*/ IXMLDOMCharacterData*This,
/*2779*/ long offset,
/*2780*/ BSTR data);
/*2782*/ HRESULT(__stdcall*deleteData)(
/*2783*/ IXMLDOMCharacterData*This,
/*2784*/ long offset,
/*2785*/ long count);
/*2787*/ HRESULT(__stdcall*replaceData)(
/*2788*/ IXMLDOMCharacterData*This,
/*2789*/ long offset,
/*2790*/ long count,
/*2791*/ BSTR data);
/*2793*/ 
/*2794*/ }IXMLDOMCharacterDataVtbl;
/*2796*/ struct IXMLDOMCharacterData
/*2797*/ {
/*2798*/ struct IXMLDOMCharacterDataVtbl*lpVtbl;
/*2799*/ };
/*2980*/ extern const IID IID_IXMLDOMAttribute;
/*3001*/ typedef struct IXMLDOMAttributeVtbl
/*3002*/ {
/*3003*/ 
/*3005*/ HRESULT(__stdcall*QueryInterface)(
/*3006*/ IXMLDOMAttribute*This,
/*3007*/ const IID*const riid,
/*3009*/ void**ppvObject);
/*3011*/ ULONG(__stdcall*AddRef)(
/*3012*/ IXMLDOMAttribute*This);
/*3014*/ ULONG(__stdcall*Release)(
/*3015*/ IXMLDOMAttribute*This);
/*3017*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*3018*/ IXMLDOMAttribute*This,
/*3019*/ UINT*pctinfo);
/*3021*/ HRESULT(__stdcall*GetTypeInfo)(
/*3022*/ IXMLDOMAttribute*This,
/*3023*/ UINT iTInfo,
/*3024*/ LCID lcid,
/*3025*/ ITypeInfo**ppTInfo);
/*3027*/ HRESULT(__stdcall*GetIDsOfNames)(
/*3028*/ IXMLDOMAttribute*This,
/*3029*/ const IID*const riid,
/*3030*/ LPOLESTR*rgszNames,
/*3031*/ UINT cNames,
/*3032*/ LCID lcid,
/*3033*/ DISPID*rgDispId);
/*3035*/ HRESULT(__stdcall*Invoke)(
/*3036*/ IXMLDOMAttribute*This,
/*3037*/ DISPID dispIdMember,
/*3038*/ const IID*const riid,
/*3039*/ LCID lcid,
/*3040*/ WORD wFlags,
/*3041*/ DISPPARAMS*pDispParams,
/*3042*/ VARIANT*pVarResult,
/*3043*/ EXCEPINFO*pExcepInfo,
/*3044*/ UINT*puArgErr);
/*3046*/ HRESULT(__stdcall*get_nodeName)(
/*3047*/ IXMLDOMAttribute*This,
/*3048*/ BSTR*name);
/*3050*/ HRESULT(__stdcall*get_nodeValue)(
/*3051*/ IXMLDOMAttribute*This,
/*3052*/ VARIANT*value);
/*3054*/ HRESULT(__stdcall*put_nodeValue)(
/*3055*/ IXMLDOMAttribute*This,
/*3056*/ VARIANT value);
/*3058*/ HRESULT(__stdcall*get_nodeType)(
/*3059*/ IXMLDOMAttribute*This,
/*3060*/ DOMNodeType*type);
/*3062*/ HRESULT(__stdcall*get_parentNode)(
/*3063*/ IXMLDOMAttribute*This,
/*3064*/ IXMLDOMNode**parent);
/*3066*/ HRESULT(__stdcall*get_childNodes)(
/*3067*/ IXMLDOMAttribute*This,
/*3068*/ IXMLDOMNodeList**childList);
/*3070*/ HRESULT(__stdcall*get_firstChild)(
/*3071*/ IXMLDOMAttribute*This,
/*3072*/ IXMLDOMNode**firstChild);
/*3074*/ HRESULT(__stdcall*get_lastChild)(
/*3075*/ IXMLDOMAttribute*This,
/*3076*/ IXMLDOMNode**lastChild);
/*3078*/ HRESULT(__stdcall*get_previousSibling)(
/*3079*/ IXMLDOMAttribute*This,
/*3080*/ IXMLDOMNode**previousSibling);
/*3082*/ HRESULT(__stdcall*get_nextSibling)(
/*3083*/ IXMLDOMAttribute*This,
/*3084*/ IXMLDOMNode**nextSibling);
/*3086*/ HRESULT(__stdcall*get_attributes)(
/*3087*/ IXMLDOMAttribute*This,
/*3088*/ IXMLDOMNamedNodeMap**attributeMap);
/*3090*/ HRESULT(__stdcall*insertBefore)(
/*3091*/ IXMLDOMAttribute*This,
/*3092*/ IXMLDOMNode*newChild,
/*3093*/ VARIANT refChild,
/*3094*/ IXMLDOMNode**outNewChild);
/*3096*/ HRESULT(__stdcall*replaceChild)(
/*3097*/ IXMLDOMAttribute*This,
/*3098*/ IXMLDOMNode*newChild,
/*3099*/ IXMLDOMNode*oldChild,
/*3100*/ IXMLDOMNode**outOldChild);
/*3102*/ HRESULT(__stdcall*removeChild)(
/*3103*/ IXMLDOMAttribute*This,
/*3104*/ IXMLDOMNode*childNode,
/*3105*/ IXMLDOMNode**oldChild);
/*3107*/ HRESULT(__stdcall*appendChild)(
/*3108*/ IXMLDOMAttribute*This,
/*3109*/ IXMLDOMNode*newChild,
/*3110*/ IXMLDOMNode**outNewChild);
/*3112*/ HRESULT(__stdcall*hasChildNodes)(
/*3113*/ IXMLDOMAttribute*This,
/*3114*/ VARIANT_BOOL*hasChild);
/*3116*/ HRESULT(__stdcall*get_ownerDocument)(
/*3117*/ IXMLDOMAttribute*This,
/*3118*/ IXMLDOMDocument**XMLDOMDocument);
/*3120*/ HRESULT(__stdcall*cloneNode)(
/*3121*/ IXMLDOMAttribute*This,
/*3122*/ VARIANT_BOOL deep,
/*3123*/ IXMLDOMNode**cloneRoot);
/*3125*/ HRESULT(__stdcall*get_nodeTypeString)(
/*3126*/ IXMLDOMAttribute*This,
/*3127*/ BSTR*nodeType);
/*3129*/ HRESULT(__stdcall*get_text)(
/*3130*/ IXMLDOMAttribute*This,
/*3131*/ BSTR*text);
/*3133*/ HRESULT(__stdcall*put_text)(
/*3134*/ IXMLDOMAttribute*This,
/*3135*/ BSTR text);
/*3137*/ HRESULT(__stdcall*get_specified)(
/*3138*/ IXMLDOMAttribute*This,
/*3139*/ VARIANT_BOOL*isSpecified);
/*3141*/ HRESULT(__stdcall*get_definition)(
/*3142*/ IXMLDOMAttribute*This,
/*3143*/ IXMLDOMNode**definitionNode);
/*3145*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*3146*/ IXMLDOMAttribute*This,
/*3147*/ VARIANT*typedValue);
/*3149*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*3150*/ IXMLDOMAttribute*This,
/*3151*/ VARIANT typedValue);
/*3153*/ HRESULT(__stdcall*get_dataType)(
/*3154*/ IXMLDOMAttribute*This,
/*3155*/ VARIANT*dataTypeName);
/*3157*/ HRESULT(__stdcall*put_dataType)(
/*3158*/ IXMLDOMAttribute*This,
/*3159*/ BSTR dataTypeName);
/*3161*/ HRESULT(__stdcall*get_xml)(
/*3162*/ IXMLDOMAttribute*This,
/*3163*/ BSTR*xmlString);
/*3165*/ HRESULT(__stdcall*transformNode)(
/*3166*/ IXMLDOMAttribute*This,
/*3167*/ IXMLDOMNode*stylesheet,
/*3168*/ BSTR*xmlString);
/*3170*/ HRESULT(__stdcall*selectNodes)(
/*3171*/ IXMLDOMAttribute*This,
/*3172*/ BSTR queryString,
/*3173*/ IXMLDOMNodeList**resultList);
/*3175*/ HRESULT(__stdcall*selectSingleNode)(
/*3176*/ IXMLDOMAttribute*This,
/*3177*/ BSTR queryString,
/*3178*/ IXMLDOMNode**resultNode);
/*3180*/ HRESULT(__stdcall*get_parsed)(
/*3181*/ IXMLDOMAttribute*This,
/*3182*/ VARIANT_BOOL*isParsed);
/*3184*/ HRESULT(__stdcall*get_namespaceURI)(
/*3185*/ IXMLDOMAttribute*This,
/*3186*/ BSTR*namespaceURI);
/*3188*/ HRESULT(__stdcall*get_prefix)(
/*3189*/ IXMLDOMAttribute*This,
/*3190*/ BSTR*prefixString);
/*3192*/ HRESULT(__stdcall*get_baseName)(
/*3193*/ IXMLDOMAttribute*This,
/*3194*/ BSTR*nameString);
/*3196*/ HRESULT(__stdcall*transformNodeToObject)(
/*3197*/ IXMLDOMAttribute*This,
/*3198*/ IXMLDOMNode*stylesheet,
/*3199*/ VARIANT outputObject);
/*3201*/ HRESULT(__stdcall*get_name)(
/*3202*/ IXMLDOMAttribute*This,
/*3203*/ BSTR*attributeName);
/*3205*/ HRESULT(__stdcall*get_value)(
/*3206*/ IXMLDOMAttribute*This,
/*3207*/ VARIANT*attributeValue);
/*3209*/ HRESULT(__stdcall*put_value)(
/*3210*/ IXMLDOMAttribute*This,
/*3211*/ VARIANT attributeValue);
/*3213*/ 
/*3214*/ }IXMLDOMAttributeVtbl;
/*3216*/ struct IXMLDOMAttribute
/*3217*/ {
/*3218*/ struct IXMLDOMAttributeVtbl*lpVtbl;
/*3219*/ };
/*3385*/ extern const IID IID_IXMLDOMElement;
/*3429*/ typedef struct IXMLDOMElementVtbl
/*3430*/ {
/*3431*/ 
/*3433*/ HRESULT(__stdcall*QueryInterface)(
/*3434*/ IXMLDOMElement*This,
/*3435*/ const IID*const riid,
/*3437*/ void**ppvObject);
/*3439*/ ULONG(__stdcall*AddRef)(
/*3440*/ IXMLDOMElement*This);
/*3442*/ ULONG(__stdcall*Release)(
/*3443*/ IXMLDOMElement*This);
/*3445*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*3446*/ IXMLDOMElement*This,
/*3447*/ UINT*pctinfo);
/*3449*/ HRESULT(__stdcall*GetTypeInfo)(
/*3450*/ IXMLDOMElement*This,
/*3451*/ UINT iTInfo,
/*3452*/ LCID lcid,
/*3453*/ ITypeInfo**ppTInfo);
/*3455*/ HRESULT(__stdcall*GetIDsOfNames)(
/*3456*/ IXMLDOMElement*This,
/*3457*/ const IID*const riid,
/*3458*/ LPOLESTR*rgszNames,
/*3459*/ UINT cNames,
/*3460*/ LCID lcid,
/*3461*/ DISPID*rgDispId);
/*3463*/ HRESULT(__stdcall*Invoke)(
/*3464*/ IXMLDOMElement*This,
/*3465*/ DISPID dispIdMember,
/*3466*/ const IID*const riid,
/*3467*/ LCID lcid,
/*3468*/ WORD wFlags,
/*3469*/ DISPPARAMS*pDispParams,
/*3470*/ VARIANT*pVarResult,
/*3471*/ EXCEPINFO*pExcepInfo,
/*3472*/ UINT*puArgErr);
/*3474*/ HRESULT(__stdcall*get_nodeName)(
/*3475*/ IXMLDOMElement*This,
/*3476*/ BSTR*name);
/*3478*/ HRESULT(__stdcall*get_nodeValue)(
/*3479*/ IXMLDOMElement*This,
/*3480*/ VARIANT*value);
/*3482*/ HRESULT(__stdcall*put_nodeValue)(
/*3483*/ IXMLDOMElement*This,
/*3484*/ VARIANT value);
/*3486*/ HRESULT(__stdcall*get_nodeType)(
/*3487*/ IXMLDOMElement*This,
/*3488*/ DOMNodeType*type);
/*3490*/ HRESULT(__stdcall*get_parentNode)(
/*3491*/ IXMLDOMElement*This,
/*3492*/ IXMLDOMNode**parent);
/*3494*/ HRESULT(__stdcall*get_childNodes)(
/*3495*/ IXMLDOMElement*This,
/*3496*/ IXMLDOMNodeList**childList);
/*3498*/ HRESULT(__stdcall*get_firstChild)(
/*3499*/ IXMLDOMElement*This,
/*3500*/ IXMLDOMNode**firstChild);
/*3502*/ HRESULT(__stdcall*get_lastChild)(
/*3503*/ IXMLDOMElement*This,
/*3504*/ IXMLDOMNode**lastChild);
/*3506*/ HRESULT(__stdcall*get_previousSibling)(
/*3507*/ IXMLDOMElement*This,
/*3508*/ IXMLDOMNode**previousSibling);
/*3510*/ HRESULT(__stdcall*get_nextSibling)(
/*3511*/ IXMLDOMElement*This,
/*3512*/ IXMLDOMNode**nextSibling);
/*3514*/ HRESULT(__stdcall*get_attributes)(
/*3515*/ IXMLDOMElement*This,
/*3516*/ IXMLDOMNamedNodeMap**attributeMap);
/*3518*/ HRESULT(__stdcall*insertBefore)(
/*3519*/ IXMLDOMElement*This,
/*3520*/ IXMLDOMNode*newChild,
/*3521*/ VARIANT refChild,
/*3522*/ IXMLDOMNode**outNewChild);
/*3524*/ HRESULT(__stdcall*replaceChild)(
/*3525*/ IXMLDOMElement*This,
/*3526*/ IXMLDOMNode*newChild,
/*3527*/ IXMLDOMNode*oldChild,
/*3528*/ IXMLDOMNode**outOldChild);
/*3530*/ HRESULT(__stdcall*removeChild)(
/*3531*/ IXMLDOMElement*This,
/*3532*/ IXMLDOMNode*childNode,
/*3533*/ IXMLDOMNode**oldChild);
/*3535*/ HRESULT(__stdcall*appendChild)(
/*3536*/ IXMLDOMElement*This,
/*3537*/ IXMLDOMNode*newChild,
/*3538*/ IXMLDOMNode**outNewChild);
/*3540*/ HRESULT(__stdcall*hasChildNodes)(
/*3541*/ IXMLDOMElement*This,
/*3542*/ VARIANT_BOOL*hasChild);
/*3544*/ HRESULT(__stdcall*get_ownerDocument)(
/*3545*/ IXMLDOMElement*This,
/*3546*/ IXMLDOMDocument**XMLDOMDocument);
/*3548*/ HRESULT(__stdcall*cloneNode)(
/*3549*/ IXMLDOMElement*This,
/*3550*/ VARIANT_BOOL deep,
/*3551*/ IXMLDOMNode**cloneRoot);
/*3553*/ HRESULT(__stdcall*get_nodeTypeString)(
/*3554*/ IXMLDOMElement*This,
/*3555*/ BSTR*nodeType);
/*3557*/ HRESULT(__stdcall*get_text)(
/*3558*/ IXMLDOMElement*This,
/*3559*/ BSTR*text);
/*3561*/ HRESULT(__stdcall*put_text)(
/*3562*/ IXMLDOMElement*This,
/*3563*/ BSTR text);
/*3565*/ HRESULT(__stdcall*get_specified)(
/*3566*/ IXMLDOMElement*This,
/*3567*/ VARIANT_BOOL*isSpecified);
/*3569*/ HRESULT(__stdcall*get_definition)(
/*3570*/ IXMLDOMElement*This,
/*3571*/ IXMLDOMNode**definitionNode);
/*3573*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*3574*/ IXMLDOMElement*This,
/*3575*/ VARIANT*typedValue);
/*3577*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*3578*/ IXMLDOMElement*This,
/*3579*/ VARIANT typedValue);
/*3581*/ HRESULT(__stdcall*get_dataType)(
/*3582*/ IXMLDOMElement*This,
/*3583*/ VARIANT*dataTypeName);
/*3585*/ HRESULT(__stdcall*put_dataType)(
/*3586*/ IXMLDOMElement*This,
/*3587*/ BSTR dataTypeName);
/*3589*/ HRESULT(__stdcall*get_xml)(
/*3590*/ IXMLDOMElement*This,
/*3591*/ BSTR*xmlString);
/*3593*/ HRESULT(__stdcall*transformNode)(
/*3594*/ IXMLDOMElement*This,
/*3595*/ IXMLDOMNode*stylesheet,
/*3596*/ BSTR*xmlString);
/*3598*/ HRESULT(__stdcall*selectNodes)(
/*3599*/ IXMLDOMElement*This,
/*3600*/ BSTR queryString,
/*3601*/ IXMLDOMNodeList**resultList);
/*3603*/ HRESULT(__stdcall*selectSingleNode)(
/*3604*/ IXMLDOMElement*This,
/*3605*/ BSTR queryString,
/*3606*/ IXMLDOMNode**resultNode);
/*3608*/ HRESULT(__stdcall*get_parsed)(
/*3609*/ IXMLDOMElement*This,
/*3610*/ VARIANT_BOOL*isParsed);
/*3612*/ HRESULT(__stdcall*get_namespaceURI)(
/*3613*/ IXMLDOMElement*This,
/*3614*/ BSTR*namespaceURI);
/*3616*/ HRESULT(__stdcall*get_prefix)(
/*3617*/ IXMLDOMElement*This,
/*3618*/ BSTR*prefixString);
/*3620*/ HRESULT(__stdcall*get_baseName)(
/*3621*/ IXMLDOMElement*This,
/*3622*/ BSTR*nameString);
/*3624*/ HRESULT(__stdcall*transformNodeToObject)(
/*3625*/ IXMLDOMElement*This,
/*3626*/ IXMLDOMNode*stylesheet,
/*3627*/ VARIANT outputObject);
/*3629*/ HRESULT(__stdcall*get_tagName)(
/*3630*/ IXMLDOMElement*This,
/*3631*/ BSTR*tagName);
/*3633*/ HRESULT(__stdcall*getAttribute)(
/*3634*/ IXMLDOMElement*This,
/*3635*/ BSTR name,
/*3636*/ VARIANT*value);
/*3638*/ HRESULT(__stdcall*setAttribute)(
/*3639*/ IXMLDOMElement*This,
/*3640*/ BSTR name,
/*3641*/ VARIANT value);
/*3643*/ HRESULT(__stdcall*removeAttribute)(
/*3644*/ IXMLDOMElement*This,
/*3645*/ BSTR name);
/*3647*/ HRESULT(__stdcall*getAttributeNode)(
/*3648*/ IXMLDOMElement*This,
/*3649*/ BSTR name,
/*3650*/ IXMLDOMAttribute**attributeNode);
/*3652*/ HRESULT(__stdcall*setAttributeNode)(
/*3653*/ IXMLDOMElement*This,
/*3654*/ IXMLDOMAttribute*DOMAttribute,
/*3655*/ IXMLDOMAttribute**attributeNode);
/*3657*/ HRESULT(__stdcall*removeAttributeNode)(
/*3658*/ IXMLDOMElement*This,
/*3659*/ IXMLDOMAttribute*DOMAttribute,
/*3660*/ IXMLDOMAttribute**attributeNode);
/*3662*/ HRESULT(__stdcall*getElementsByTagName)(
/*3663*/ IXMLDOMElement*This,
/*3664*/ BSTR tagName,
/*3665*/ IXMLDOMNodeList**resultList);
/*3667*/ HRESULT(__stdcall*normalize)(
/*3668*/ IXMLDOMElement*This);
/*3670*/ 
/*3671*/ }IXMLDOMElementVtbl;
/*3673*/ struct IXMLDOMElement
/*3674*/ {
/*3675*/ struct IXMLDOMElementVtbl*lpVtbl;
/*3676*/ };
/*3860*/ extern const IID IID_IXMLDOMText;
/*3876*/ typedef struct IXMLDOMTextVtbl
/*3877*/ {
/*3878*/ 
/*3880*/ HRESULT(__stdcall*QueryInterface)(
/*3881*/ IXMLDOMText*This,
/*3882*/ const IID*const riid,
/*3884*/ void**ppvObject);
/*3886*/ ULONG(__stdcall*AddRef)(
/*3887*/ IXMLDOMText*This);
/*3889*/ ULONG(__stdcall*Release)(
/*3890*/ IXMLDOMText*This);
/*3892*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*3893*/ IXMLDOMText*This,
/*3894*/ UINT*pctinfo);
/*3896*/ HRESULT(__stdcall*GetTypeInfo)(
/*3897*/ IXMLDOMText*This,
/*3898*/ UINT iTInfo,
/*3899*/ LCID lcid,
/*3900*/ ITypeInfo**ppTInfo);
/*3902*/ HRESULT(__stdcall*GetIDsOfNames)(
/*3903*/ IXMLDOMText*This,
/*3904*/ const IID*const riid,
/*3905*/ LPOLESTR*rgszNames,
/*3906*/ UINT cNames,
/*3907*/ LCID lcid,
/*3908*/ DISPID*rgDispId);
/*3910*/ HRESULT(__stdcall*Invoke)(
/*3911*/ IXMLDOMText*This,
/*3912*/ DISPID dispIdMember,
/*3913*/ const IID*const riid,
/*3914*/ LCID lcid,
/*3915*/ WORD wFlags,
/*3916*/ DISPPARAMS*pDispParams,
/*3917*/ VARIANT*pVarResult,
/*3918*/ EXCEPINFO*pExcepInfo,
/*3919*/ UINT*puArgErr);
/*3921*/ HRESULT(__stdcall*get_nodeName)(
/*3922*/ IXMLDOMText*This,
/*3923*/ BSTR*name);
/*3925*/ HRESULT(__stdcall*get_nodeValue)(
/*3926*/ IXMLDOMText*This,
/*3927*/ VARIANT*value);
/*3929*/ HRESULT(__stdcall*put_nodeValue)(
/*3930*/ IXMLDOMText*This,
/*3931*/ VARIANT value);
/*3933*/ HRESULT(__stdcall*get_nodeType)(
/*3934*/ IXMLDOMText*This,
/*3935*/ DOMNodeType*type);
/*3937*/ HRESULT(__stdcall*get_parentNode)(
/*3938*/ IXMLDOMText*This,
/*3939*/ IXMLDOMNode**parent);
/*3941*/ HRESULT(__stdcall*get_childNodes)(
/*3942*/ IXMLDOMText*This,
/*3943*/ IXMLDOMNodeList**childList);
/*3945*/ HRESULT(__stdcall*get_firstChild)(
/*3946*/ IXMLDOMText*This,
/*3947*/ IXMLDOMNode**firstChild);
/*3949*/ HRESULT(__stdcall*get_lastChild)(
/*3950*/ IXMLDOMText*This,
/*3951*/ IXMLDOMNode**lastChild);
/*3953*/ HRESULT(__stdcall*get_previousSibling)(
/*3954*/ IXMLDOMText*This,
/*3955*/ IXMLDOMNode**previousSibling);
/*3957*/ HRESULT(__stdcall*get_nextSibling)(
/*3958*/ IXMLDOMText*This,
/*3959*/ IXMLDOMNode**nextSibling);
/*3961*/ HRESULT(__stdcall*get_attributes)(
/*3962*/ IXMLDOMText*This,
/*3963*/ IXMLDOMNamedNodeMap**attributeMap);
/*3965*/ HRESULT(__stdcall*insertBefore)(
/*3966*/ IXMLDOMText*This,
/*3967*/ IXMLDOMNode*newChild,
/*3968*/ VARIANT refChild,
/*3969*/ IXMLDOMNode**outNewChild);
/*3971*/ HRESULT(__stdcall*replaceChild)(
/*3972*/ IXMLDOMText*This,
/*3973*/ IXMLDOMNode*newChild,
/*3974*/ IXMLDOMNode*oldChild,
/*3975*/ IXMLDOMNode**outOldChild);
/*3977*/ HRESULT(__stdcall*removeChild)(
/*3978*/ IXMLDOMText*This,
/*3979*/ IXMLDOMNode*childNode,
/*3980*/ IXMLDOMNode**oldChild);
/*3982*/ HRESULT(__stdcall*appendChild)(
/*3983*/ IXMLDOMText*This,
/*3984*/ IXMLDOMNode*newChild,
/*3985*/ IXMLDOMNode**outNewChild);
/*3987*/ HRESULT(__stdcall*hasChildNodes)(
/*3988*/ IXMLDOMText*This,
/*3989*/ VARIANT_BOOL*hasChild);
/*3991*/ HRESULT(__stdcall*get_ownerDocument)(
/*3992*/ IXMLDOMText*This,
/*3993*/ IXMLDOMDocument**XMLDOMDocument);
/*3995*/ HRESULT(__stdcall*cloneNode)(
/*3996*/ IXMLDOMText*This,
/*3997*/ VARIANT_BOOL deep,
/*3998*/ IXMLDOMNode**cloneRoot);
/*4000*/ HRESULT(__stdcall*get_nodeTypeString)(
/*4001*/ IXMLDOMText*This,
/*4002*/ BSTR*nodeType);
/*4004*/ HRESULT(__stdcall*get_text)(
/*4005*/ IXMLDOMText*This,
/*4006*/ BSTR*text);
/*4008*/ HRESULT(__stdcall*put_text)(
/*4009*/ IXMLDOMText*This,
/*4010*/ BSTR text);
/*4012*/ HRESULT(__stdcall*get_specified)(
/*4013*/ IXMLDOMText*This,
/*4014*/ VARIANT_BOOL*isSpecified);
/*4016*/ HRESULT(__stdcall*get_definition)(
/*4017*/ IXMLDOMText*This,
/*4018*/ IXMLDOMNode**definitionNode);
/*4020*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*4021*/ IXMLDOMText*This,
/*4022*/ VARIANT*typedValue);
/*4024*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*4025*/ IXMLDOMText*This,
/*4026*/ VARIANT typedValue);
/*4028*/ HRESULT(__stdcall*get_dataType)(
/*4029*/ IXMLDOMText*This,
/*4030*/ VARIANT*dataTypeName);
/*4032*/ HRESULT(__stdcall*put_dataType)(
/*4033*/ IXMLDOMText*This,
/*4034*/ BSTR dataTypeName);
/*4036*/ HRESULT(__stdcall*get_xml)(
/*4037*/ IXMLDOMText*This,
/*4038*/ BSTR*xmlString);
/*4040*/ HRESULT(__stdcall*transformNode)(
/*4041*/ IXMLDOMText*This,
/*4042*/ IXMLDOMNode*stylesheet,
/*4043*/ BSTR*xmlString);
/*4045*/ HRESULT(__stdcall*selectNodes)(
/*4046*/ IXMLDOMText*This,
/*4047*/ BSTR queryString,
/*4048*/ IXMLDOMNodeList**resultList);
/*4050*/ HRESULT(__stdcall*selectSingleNode)(
/*4051*/ IXMLDOMText*This,
/*4052*/ BSTR queryString,
/*4053*/ IXMLDOMNode**resultNode);
/*4055*/ HRESULT(__stdcall*get_parsed)(
/*4056*/ IXMLDOMText*This,
/*4057*/ VARIANT_BOOL*isParsed);
/*4059*/ HRESULT(__stdcall*get_namespaceURI)(
/*4060*/ IXMLDOMText*This,
/*4061*/ BSTR*namespaceURI);
/*4063*/ HRESULT(__stdcall*get_prefix)(
/*4064*/ IXMLDOMText*This,
/*4065*/ BSTR*prefixString);
/*4067*/ HRESULT(__stdcall*get_baseName)(
/*4068*/ IXMLDOMText*This,
/*4069*/ BSTR*nameString);
/*4071*/ HRESULT(__stdcall*transformNodeToObject)(
/*4072*/ IXMLDOMText*This,
/*4073*/ IXMLDOMNode*stylesheet,
/*4074*/ VARIANT outputObject);
/*4076*/ HRESULT(__stdcall*get_data)(
/*4077*/ IXMLDOMText*This,
/*4078*/ BSTR*data);
/*4080*/ HRESULT(__stdcall*put_data)(
/*4081*/ IXMLDOMText*This,
/*4082*/ BSTR data);
/*4084*/ HRESULT(__stdcall*get_length)(
/*4085*/ IXMLDOMText*This,
/*4086*/ long*dataLength);
/*4088*/ HRESULT(__stdcall*substringData)(
/*4089*/ IXMLDOMText*This,
/*4090*/ long offset,
/*4091*/ long count,
/*4092*/ BSTR*data);
/*4094*/ HRESULT(__stdcall*appendData)(
/*4095*/ IXMLDOMText*This,
/*4096*/ BSTR data);
/*4098*/ HRESULT(__stdcall*insertData)(
/*4099*/ IXMLDOMText*This,
/*4100*/ long offset,
/*4101*/ BSTR data);
/*4103*/ HRESULT(__stdcall*deleteData)(
/*4104*/ IXMLDOMText*This,
/*4105*/ long offset,
/*4106*/ long count);
/*4108*/ HRESULT(__stdcall*replaceData)(
/*4109*/ IXMLDOMText*This,
/*4110*/ long offset,
/*4111*/ long count,
/*4112*/ BSTR data);
/*4114*/ HRESULT(__stdcall*splitText)(
/*4115*/ IXMLDOMText*This,
/*4116*/ long offset,
/*4117*/ IXMLDOMText**rightHandTextNode);
/*4119*/ 
/*4120*/ }IXMLDOMTextVtbl;
/*4122*/ struct IXMLDOMText
/*4123*/ {
/*4124*/ struct IXMLDOMTextVtbl*lpVtbl;
/*4125*/ };
/*4310*/ extern const IID IID_IXMLDOMComment;
/*4322*/ typedef struct IXMLDOMCommentVtbl
/*4323*/ {
/*4324*/ 
/*4326*/ HRESULT(__stdcall*QueryInterface)(
/*4327*/ IXMLDOMComment*This,
/*4328*/ const IID*const riid,
/*4330*/ void**ppvObject);
/*4332*/ ULONG(__stdcall*AddRef)(
/*4333*/ IXMLDOMComment*This);
/*4335*/ ULONG(__stdcall*Release)(
/*4336*/ IXMLDOMComment*This);
/*4338*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*4339*/ IXMLDOMComment*This,
/*4340*/ UINT*pctinfo);
/*4342*/ HRESULT(__stdcall*GetTypeInfo)(
/*4343*/ IXMLDOMComment*This,
/*4344*/ UINT iTInfo,
/*4345*/ LCID lcid,
/*4346*/ ITypeInfo**ppTInfo);
/*4348*/ HRESULT(__stdcall*GetIDsOfNames)(
/*4349*/ IXMLDOMComment*This,
/*4350*/ const IID*const riid,
/*4351*/ LPOLESTR*rgszNames,
/*4352*/ UINT cNames,
/*4353*/ LCID lcid,
/*4354*/ DISPID*rgDispId);
/*4356*/ HRESULT(__stdcall*Invoke)(
/*4357*/ IXMLDOMComment*This,
/*4358*/ DISPID dispIdMember,
/*4359*/ const IID*const riid,
/*4360*/ LCID lcid,
/*4361*/ WORD wFlags,
/*4362*/ DISPPARAMS*pDispParams,
/*4363*/ VARIANT*pVarResult,
/*4364*/ EXCEPINFO*pExcepInfo,
/*4365*/ UINT*puArgErr);
/*4367*/ HRESULT(__stdcall*get_nodeName)(
/*4368*/ IXMLDOMComment*This,
/*4369*/ BSTR*name);
/*4371*/ HRESULT(__stdcall*get_nodeValue)(
/*4372*/ IXMLDOMComment*This,
/*4373*/ VARIANT*value);
/*4375*/ HRESULT(__stdcall*put_nodeValue)(
/*4376*/ IXMLDOMComment*This,
/*4377*/ VARIANT value);
/*4379*/ HRESULT(__stdcall*get_nodeType)(
/*4380*/ IXMLDOMComment*This,
/*4381*/ DOMNodeType*type);
/*4383*/ HRESULT(__stdcall*get_parentNode)(
/*4384*/ IXMLDOMComment*This,
/*4385*/ IXMLDOMNode**parent);
/*4387*/ HRESULT(__stdcall*get_childNodes)(
/*4388*/ IXMLDOMComment*This,
/*4389*/ IXMLDOMNodeList**childList);
/*4391*/ HRESULT(__stdcall*get_firstChild)(
/*4392*/ IXMLDOMComment*This,
/*4393*/ IXMLDOMNode**firstChild);
/*4395*/ HRESULT(__stdcall*get_lastChild)(
/*4396*/ IXMLDOMComment*This,
/*4397*/ IXMLDOMNode**lastChild);
/*4399*/ HRESULT(__stdcall*get_previousSibling)(
/*4400*/ IXMLDOMComment*This,
/*4401*/ IXMLDOMNode**previousSibling);
/*4403*/ HRESULT(__stdcall*get_nextSibling)(
/*4404*/ IXMLDOMComment*This,
/*4405*/ IXMLDOMNode**nextSibling);
/*4407*/ HRESULT(__stdcall*get_attributes)(
/*4408*/ IXMLDOMComment*This,
/*4409*/ IXMLDOMNamedNodeMap**attributeMap);
/*4411*/ HRESULT(__stdcall*insertBefore)(
/*4412*/ IXMLDOMComment*This,
/*4413*/ IXMLDOMNode*newChild,
/*4414*/ VARIANT refChild,
/*4415*/ IXMLDOMNode**outNewChild);
/*4417*/ HRESULT(__stdcall*replaceChild)(
/*4418*/ IXMLDOMComment*This,
/*4419*/ IXMLDOMNode*newChild,
/*4420*/ IXMLDOMNode*oldChild,
/*4421*/ IXMLDOMNode**outOldChild);
/*4423*/ HRESULT(__stdcall*removeChild)(
/*4424*/ IXMLDOMComment*This,
/*4425*/ IXMLDOMNode*childNode,
/*4426*/ IXMLDOMNode**oldChild);
/*4428*/ HRESULT(__stdcall*appendChild)(
/*4429*/ IXMLDOMComment*This,
/*4430*/ IXMLDOMNode*newChild,
/*4431*/ IXMLDOMNode**outNewChild);
/*4433*/ HRESULT(__stdcall*hasChildNodes)(
/*4434*/ IXMLDOMComment*This,
/*4435*/ VARIANT_BOOL*hasChild);
/*4437*/ HRESULT(__stdcall*get_ownerDocument)(
/*4438*/ IXMLDOMComment*This,
/*4439*/ IXMLDOMDocument**XMLDOMDocument);
/*4441*/ HRESULT(__stdcall*cloneNode)(
/*4442*/ IXMLDOMComment*This,
/*4443*/ VARIANT_BOOL deep,
/*4444*/ IXMLDOMNode**cloneRoot);
/*4446*/ HRESULT(__stdcall*get_nodeTypeString)(
/*4447*/ IXMLDOMComment*This,
/*4448*/ BSTR*nodeType);
/*4450*/ HRESULT(__stdcall*get_text)(
/*4451*/ IXMLDOMComment*This,
/*4452*/ BSTR*text);
/*4454*/ HRESULT(__stdcall*put_text)(
/*4455*/ IXMLDOMComment*This,
/*4456*/ BSTR text);
/*4458*/ HRESULT(__stdcall*get_specified)(
/*4459*/ IXMLDOMComment*This,
/*4460*/ VARIANT_BOOL*isSpecified);
/*4462*/ HRESULT(__stdcall*get_definition)(
/*4463*/ IXMLDOMComment*This,
/*4464*/ IXMLDOMNode**definitionNode);
/*4466*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*4467*/ IXMLDOMComment*This,
/*4468*/ VARIANT*typedValue);
/*4470*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*4471*/ IXMLDOMComment*This,
/*4472*/ VARIANT typedValue);
/*4474*/ HRESULT(__stdcall*get_dataType)(
/*4475*/ IXMLDOMComment*This,
/*4476*/ VARIANT*dataTypeName);
/*4478*/ HRESULT(__stdcall*put_dataType)(
/*4479*/ IXMLDOMComment*This,
/*4480*/ BSTR dataTypeName);
/*4482*/ HRESULT(__stdcall*get_xml)(
/*4483*/ IXMLDOMComment*This,
/*4484*/ BSTR*xmlString);
/*4486*/ HRESULT(__stdcall*transformNode)(
/*4487*/ IXMLDOMComment*This,
/*4488*/ IXMLDOMNode*stylesheet,
/*4489*/ BSTR*xmlString);
/*4491*/ HRESULT(__stdcall*selectNodes)(
/*4492*/ IXMLDOMComment*This,
/*4493*/ BSTR queryString,
/*4494*/ IXMLDOMNodeList**resultList);
/*4496*/ HRESULT(__stdcall*selectSingleNode)(
/*4497*/ IXMLDOMComment*This,
/*4498*/ BSTR queryString,
/*4499*/ IXMLDOMNode**resultNode);
/*4501*/ HRESULT(__stdcall*get_parsed)(
/*4502*/ IXMLDOMComment*This,
/*4503*/ VARIANT_BOOL*isParsed);
/*4505*/ HRESULT(__stdcall*get_namespaceURI)(
/*4506*/ IXMLDOMComment*This,
/*4507*/ BSTR*namespaceURI);
/*4509*/ HRESULT(__stdcall*get_prefix)(
/*4510*/ IXMLDOMComment*This,
/*4511*/ BSTR*prefixString);
/*4513*/ HRESULT(__stdcall*get_baseName)(
/*4514*/ IXMLDOMComment*This,
/*4515*/ BSTR*nameString);
/*4517*/ HRESULT(__stdcall*transformNodeToObject)(
/*4518*/ IXMLDOMComment*This,
/*4519*/ IXMLDOMNode*stylesheet,
/*4520*/ VARIANT outputObject);
/*4522*/ HRESULT(__stdcall*get_data)(
/*4523*/ IXMLDOMComment*This,
/*4524*/ BSTR*data);
/*4526*/ HRESULT(__stdcall*put_data)(
/*4527*/ IXMLDOMComment*This,
/*4528*/ BSTR data);
/*4530*/ HRESULT(__stdcall*get_length)(
/*4531*/ IXMLDOMComment*This,
/*4532*/ long*dataLength);
/*4534*/ HRESULT(__stdcall*substringData)(
/*4535*/ IXMLDOMComment*This,
/*4536*/ long offset,
/*4537*/ long count,
/*4538*/ BSTR*data);
/*4540*/ HRESULT(__stdcall*appendData)(
/*4541*/ IXMLDOMComment*This,
/*4542*/ BSTR data);
/*4544*/ HRESULT(__stdcall*insertData)(
/*4545*/ IXMLDOMComment*This,
/*4546*/ long offset,
/*4547*/ BSTR data);
/*4549*/ HRESULT(__stdcall*deleteData)(
/*4550*/ IXMLDOMComment*This,
/*4551*/ long offset,
/*4552*/ long count);
/*4554*/ HRESULT(__stdcall*replaceData)(
/*4555*/ IXMLDOMComment*This,
/*4556*/ long offset,
/*4557*/ long count,
/*4558*/ BSTR data);
/*4560*/ 
/*4561*/ }IXMLDOMCommentVtbl;
/*4563*/ struct IXMLDOMComment
/*4564*/ {
/*4565*/ struct IXMLDOMCommentVtbl*lpVtbl;
/*4566*/ };
/*4748*/ extern const IID IID_IXMLDOMProcessingInstruction;
/*4769*/ typedef struct IXMLDOMProcessingInstructionVtbl
/*4770*/ {
/*4771*/ 
/*4773*/ HRESULT(__stdcall*QueryInterface)(
/*4774*/ IXMLDOMProcessingInstruction*This,
/*4775*/ const IID*const riid,
/*4777*/ void**ppvObject);
/*4779*/ ULONG(__stdcall*AddRef)(
/*4780*/ IXMLDOMProcessingInstruction*This);
/*4782*/ ULONG(__stdcall*Release)(
/*4783*/ IXMLDOMProcessingInstruction*This);
/*4785*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*4786*/ IXMLDOMProcessingInstruction*This,
/*4787*/ UINT*pctinfo);
/*4789*/ HRESULT(__stdcall*GetTypeInfo)(
/*4790*/ IXMLDOMProcessingInstruction*This,
/*4791*/ UINT iTInfo,
/*4792*/ LCID lcid,
/*4793*/ ITypeInfo**ppTInfo);
/*4795*/ HRESULT(__stdcall*GetIDsOfNames)(
/*4796*/ IXMLDOMProcessingInstruction*This,
/*4797*/ const IID*const riid,
/*4798*/ LPOLESTR*rgszNames,
/*4799*/ UINT cNames,
/*4800*/ LCID lcid,
/*4801*/ DISPID*rgDispId);
/*4803*/ HRESULT(__stdcall*Invoke)(
/*4804*/ IXMLDOMProcessingInstruction*This,
/*4805*/ DISPID dispIdMember,
/*4806*/ const IID*const riid,
/*4807*/ LCID lcid,
/*4808*/ WORD wFlags,
/*4809*/ DISPPARAMS*pDispParams,
/*4810*/ VARIANT*pVarResult,
/*4811*/ EXCEPINFO*pExcepInfo,
/*4812*/ UINT*puArgErr);
/*4814*/ HRESULT(__stdcall*get_nodeName)(
/*4815*/ IXMLDOMProcessingInstruction*This,
/*4816*/ BSTR*name);
/*4818*/ HRESULT(__stdcall*get_nodeValue)(
/*4819*/ IXMLDOMProcessingInstruction*This,
/*4820*/ VARIANT*value);
/*4822*/ HRESULT(__stdcall*put_nodeValue)(
/*4823*/ IXMLDOMProcessingInstruction*This,
/*4824*/ VARIANT value);
/*4826*/ HRESULT(__stdcall*get_nodeType)(
/*4827*/ IXMLDOMProcessingInstruction*This,
/*4828*/ DOMNodeType*type);
/*4830*/ HRESULT(__stdcall*get_parentNode)(
/*4831*/ IXMLDOMProcessingInstruction*This,
/*4832*/ IXMLDOMNode**parent);
/*4834*/ HRESULT(__stdcall*get_childNodes)(
/*4835*/ IXMLDOMProcessingInstruction*This,
/*4836*/ IXMLDOMNodeList**childList);
/*4838*/ HRESULT(__stdcall*get_firstChild)(
/*4839*/ IXMLDOMProcessingInstruction*This,
/*4840*/ IXMLDOMNode**firstChild);
/*4842*/ HRESULT(__stdcall*get_lastChild)(
/*4843*/ IXMLDOMProcessingInstruction*This,
/*4844*/ IXMLDOMNode**lastChild);
/*4846*/ HRESULT(__stdcall*get_previousSibling)(
/*4847*/ IXMLDOMProcessingInstruction*This,
/*4848*/ IXMLDOMNode**previousSibling);
/*4850*/ HRESULT(__stdcall*get_nextSibling)(
/*4851*/ IXMLDOMProcessingInstruction*This,
/*4852*/ IXMLDOMNode**nextSibling);
/*4854*/ HRESULT(__stdcall*get_attributes)(
/*4855*/ IXMLDOMProcessingInstruction*This,
/*4856*/ IXMLDOMNamedNodeMap**attributeMap);
/*4858*/ HRESULT(__stdcall*insertBefore)(
/*4859*/ IXMLDOMProcessingInstruction*This,
/*4860*/ IXMLDOMNode*newChild,
/*4861*/ VARIANT refChild,
/*4862*/ IXMLDOMNode**outNewChild);
/*4864*/ HRESULT(__stdcall*replaceChild)(
/*4865*/ IXMLDOMProcessingInstruction*This,
/*4866*/ IXMLDOMNode*newChild,
/*4867*/ IXMLDOMNode*oldChild,
/*4868*/ IXMLDOMNode**outOldChild);
/*4870*/ HRESULT(__stdcall*removeChild)(
/*4871*/ IXMLDOMProcessingInstruction*This,
/*4872*/ IXMLDOMNode*childNode,
/*4873*/ IXMLDOMNode**oldChild);
/*4875*/ HRESULT(__stdcall*appendChild)(
/*4876*/ IXMLDOMProcessingInstruction*This,
/*4877*/ IXMLDOMNode*newChild,
/*4878*/ IXMLDOMNode**outNewChild);
/*4880*/ HRESULT(__stdcall*hasChildNodes)(
/*4881*/ IXMLDOMProcessingInstruction*This,
/*4882*/ VARIANT_BOOL*hasChild);
/*4884*/ HRESULT(__stdcall*get_ownerDocument)(
/*4885*/ IXMLDOMProcessingInstruction*This,
/*4886*/ IXMLDOMDocument**XMLDOMDocument);
/*4888*/ HRESULT(__stdcall*cloneNode)(
/*4889*/ IXMLDOMProcessingInstruction*This,
/*4890*/ VARIANT_BOOL deep,
/*4891*/ IXMLDOMNode**cloneRoot);
/*4893*/ HRESULT(__stdcall*get_nodeTypeString)(
/*4894*/ IXMLDOMProcessingInstruction*This,
/*4895*/ BSTR*nodeType);
/*4897*/ HRESULT(__stdcall*get_text)(
/*4898*/ IXMLDOMProcessingInstruction*This,
/*4899*/ BSTR*text);
/*4901*/ HRESULT(__stdcall*put_text)(
/*4902*/ IXMLDOMProcessingInstruction*This,
/*4903*/ BSTR text);
/*4905*/ HRESULT(__stdcall*get_specified)(
/*4906*/ IXMLDOMProcessingInstruction*This,
/*4907*/ VARIANT_BOOL*isSpecified);
/*4909*/ HRESULT(__stdcall*get_definition)(
/*4910*/ IXMLDOMProcessingInstruction*This,
/*4911*/ IXMLDOMNode**definitionNode);
/*4913*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*4914*/ IXMLDOMProcessingInstruction*This,
/*4915*/ VARIANT*typedValue);
/*4917*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*4918*/ IXMLDOMProcessingInstruction*This,
/*4919*/ VARIANT typedValue);
/*4921*/ HRESULT(__stdcall*get_dataType)(
/*4922*/ IXMLDOMProcessingInstruction*This,
/*4923*/ VARIANT*dataTypeName);
/*4925*/ HRESULT(__stdcall*put_dataType)(
/*4926*/ IXMLDOMProcessingInstruction*This,
/*4927*/ BSTR dataTypeName);
/*4929*/ HRESULT(__stdcall*get_xml)(
/*4930*/ IXMLDOMProcessingInstruction*This,
/*4931*/ BSTR*xmlString);
/*4933*/ HRESULT(__stdcall*transformNode)(
/*4934*/ IXMLDOMProcessingInstruction*This,
/*4935*/ IXMLDOMNode*stylesheet,
/*4936*/ BSTR*xmlString);
/*4938*/ HRESULT(__stdcall*selectNodes)(
/*4939*/ IXMLDOMProcessingInstruction*This,
/*4940*/ BSTR queryString,
/*4941*/ IXMLDOMNodeList**resultList);
/*4943*/ HRESULT(__stdcall*selectSingleNode)(
/*4944*/ IXMLDOMProcessingInstruction*This,
/*4945*/ BSTR queryString,
/*4946*/ IXMLDOMNode**resultNode);
/*4948*/ HRESULT(__stdcall*get_parsed)(
/*4949*/ IXMLDOMProcessingInstruction*This,
/*4950*/ VARIANT_BOOL*isParsed);
/*4952*/ HRESULT(__stdcall*get_namespaceURI)(
/*4953*/ IXMLDOMProcessingInstruction*This,
/*4954*/ BSTR*namespaceURI);
/*4956*/ HRESULT(__stdcall*get_prefix)(
/*4957*/ IXMLDOMProcessingInstruction*This,
/*4958*/ BSTR*prefixString);
/*4960*/ HRESULT(__stdcall*get_baseName)(
/*4961*/ IXMLDOMProcessingInstruction*This,
/*4962*/ BSTR*nameString);
/*4964*/ HRESULT(__stdcall*transformNodeToObject)(
/*4965*/ IXMLDOMProcessingInstruction*This,
/*4966*/ IXMLDOMNode*stylesheet,
/*4967*/ VARIANT outputObject);
/*4969*/ HRESULT(__stdcall*get_target)(
/*4970*/ IXMLDOMProcessingInstruction*This,
/*4971*/ BSTR*name);
/*4973*/ HRESULT(__stdcall*get_data)(
/*4974*/ IXMLDOMProcessingInstruction*This,
/*4975*/ BSTR*value);
/*4977*/ HRESULT(__stdcall*put_data)(
/*4978*/ IXMLDOMProcessingInstruction*This,
/*4979*/ BSTR value);
/*4981*/ 
/*4982*/ }IXMLDOMProcessingInstructionVtbl;
/*4984*/ struct IXMLDOMProcessingInstruction
/*4985*/ {
/*4986*/ struct IXMLDOMProcessingInstructionVtbl*lpVtbl;
/*4987*/ };
/*5153*/ extern const IID IID_IXMLDOMCDATASection;
/*5165*/ typedef struct IXMLDOMCDATASectionVtbl
/*5166*/ {
/*5167*/ 
/*5169*/ HRESULT(__stdcall*QueryInterface)(
/*5170*/ IXMLDOMCDATASection*This,
/*5171*/ const IID*const riid,
/*5173*/ void**ppvObject);
/*5175*/ ULONG(__stdcall*AddRef)(
/*5176*/ IXMLDOMCDATASection*This);
/*5178*/ ULONG(__stdcall*Release)(
/*5179*/ IXMLDOMCDATASection*This);
/*5181*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*5182*/ IXMLDOMCDATASection*This,
/*5183*/ UINT*pctinfo);
/*5185*/ HRESULT(__stdcall*GetTypeInfo)(
/*5186*/ IXMLDOMCDATASection*This,
/*5187*/ UINT iTInfo,
/*5188*/ LCID lcid,
/*5189*/ ITypeInfo**ppTInfo);
/*5191*/ HRESULT(__stdcall*GetIDsOfNames)(
/*5192*/ IXMLDOMCDATASection*This,
/*5193*/ const IID*const riid,
/*5194*/ LPOLESTR*rgszNames,
/*5195*/ UINT cNames,
/*5196*/ LCID lcid,
/*5197*/ DISPID*rgDispId);
/*5199*/ HRESULT(__stdcall*Invoke)(
/*5200*/ IXMLDOMCDATASection*This,
/*5201*/ DISPID dispIdMember,
/*5202*/ const IID*const riid,
/*5203*/ LCID lcid,
/*5204*/ WORD wFlags,
/*5205*/ DISPPARAMS*pDispParams,
/*5206*/ VARIANT*pVarResult,
/*5207*/ EXCEPINFO*pExcepInfo,
/*5208*/ UINT*puArgErr);
/*5210*/ HRESULT(__stdcall*get_nodeName)(
/*5211*/ IXMLDOMCDATASection*This,
/*5212*/ BSTR*name);
/*5214*/ HRESULT(__stdcall*get_nodeValue)(
/*5215*/ IXMLDOMCDATASection*This,
/*5216*/ VARIANT*value);
/*5218*/ HRESULT(__stdcall*put_nodeValue)(
/*5219*/ IXMLDOMCDATASection*This,
/*5220*/ VARIANT value);
/*5222*/ HRESULT(__stdcall*get_nodeType)(
/*5223*/ IXMLDOMCDATASection*This,
/*5224*/ DOMNodeType*type);
/*5226*/ HRESULT(__stdcall*get_parentNode)(
/*5227*/ IXMLDOMCDATASection*This,
/*5228*/ IXMLDOMNode**parent);
/*5230*/ HRESULT(__stdcall*get_childNodes)(
/*5231*/ IXMLDOMCDATASection*This,
/*5232*/ IXMLDOMNodeList**childList);
/*5234*/ HRESULT(__stdcall*get_firstChild)(
/*5235*/ IXMLDOMCDATASection*This,
/*5236*/ IXMLDOMNode**firstChild);
/*5238*/ HRESULT(__stdcall*get_lastChild)(
/*5239*/ IXMLDOMCDATASection*This,
/*5240*/ IXMLDOMNode**lastChild);
/*5242*/ HRESULT(__stdcall*get_previousSibling)(
/*5243*/ IXMLDOMCDATASection*This,
/*5244*/ IXMLDOMNode**previousSibling);
/*5246*/ HRESULT(__stdcall*get_nextSibling)(
/*5247*/ IXMLDOMCDATASection*This,
/*5248*/ IXMLDOMNode**nextSibling);
/*5250*/ HRESULT(__stdcall*get_attributes)(
/*5251*/ IXMLDOMCDATASection*This,
/*5252*/ IXMLDOMNamedNodeMap**attributeMap);
/*5254*/ HRESULT(__stdcall*insertBefore)(
/*5255*/ IXMLDOMCDATASection*This,
/*5256*/ IXMLDOMNode*newChild,
/*5257*/ VARIANT refChild,
/*5258*/ IXMLDOMNode**outNewChild);
/*5260*/ HRESULT(__stdcall*replaceChild)(
/*5261*/ IXMLDOMCDATASection*This,
/*5262*/ IXMLDOMNode*newChild,
/*5263*/ IXMLDOMNode*oldChild,
/*5264*/ IXMLDOMNode**outOldChild);
/*5266*/ HRESULT(__stdcall*removeChild)(
/*5267*/ IXMLDOMCDATASection*This,
/*5268*/ IXMLDOMNode*childNode,
/*5269*/ IXMLDOMNode**oldChild);
/*5271*/ HRESULT(__stdcall*appendChild)(
/*5272*/ IXMLDOMCDATASection*This,
/*5273*/ IXMLDOMNode*newChild,
/*5274*/ IXMLDOMNode**outNewChild);
/*5276*/ HRESULT(__stdcall*hasChildNodes)(
/*5277*/ IXMLDOMCDATASection*This,
/*5278*/ VARIANT_BOOL*hasChild);
/*5280*/ HRESULT(__stdcall*get_ownerDocument)(
/*5281*/ IXMLDOMCDATASection*This,
/*5282*/ IXMLDOMDocument**XMLDOMDocument);
/*5284*/ HRESULT(__stdcall*cloneNode)(
/*5285*/ IXMLDOMCDATASection*This,
/*5286*/ VARIANT_BOOL deep,
/*5287*/ IXMLDOMNode**cloneRoot);
/*5289*/ HRESULT(__stdcall*get_nodeTypeString)(
/*5290*/ IXMLDOMCDATASection*This,
/*5291*/ BSTR*nodeType);
/*5293*/ HRESULT(__stdcall*get_text)(
/*5294*/ IXMLDOMCDATASection*This,
/*5295*/ BSTR*text);
/*5297*/ HRESULT(__stdcall*put_text)(
/*5298*/ IXMLDOMCDATASection*This,
/*5299*/ BSTR text);
/*5301*/ HRESULT(__stdcall*get_specified)(
/*5302*/ IXMLDOMCDATASection*This,
/*5303*/ VARIANT_BOOL*isSpecified);
/*5305*/ HRESULT(__stdcall*get_definition)(
/*5306*/ IXMLDOMCDATASection*This,
/*5307*/ IXMLDOMNode**definitionNode);
/*5309*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*5310*/ IXMLDOMCDATASection*This,
/*5311*/ VARIANT*typedValue);
/*5313*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*5314*/ IXMLDOMCDATASection*This,
/*5315*/ VARIANT typedValue);
/*5317*/ HRESULT(__stdcall*get_dataType)(
/*5318*/ IXMLDOMCDATASection*This,
/*5319*/ VARIANT*dataTypeName);
/*5321*/ HRESULT(__stdcall*put_dataType)(
/*5322*/ IXMLDOMCDATASection*This,
/*5323*/ BSTR dataTypeName);
/*5325*/ HRESULT(__stdcall*get_xml)(
/*5326*/ IXMLDOMCDATASection*This,
/*5327*/ BSTR*xmlString);
/*5329*/ HRESULT(__stdcall*transformNode)(
/*5330*/ IXMLDOMCDATASection*This,
/*5331*/ IXMLDOMNode*stylesheet,
/*5332*/ BSTR*xmlString);
/*5334*/ HRESULT(__stdcall*selectNodes)(
/*5335*/ IXMLDOMCDATASection*This,
/*5336*/ BSTR queryString,
/*5337*/ IXMLDOMNodeList**resultList);
/*5339*/ HRESULT(__stdcall*selectSingleNode)(
/*5340*/ IXMLDOMCDATASection*This,
/*5341*/ BSTR queryString,
/*5342*/ IXMLDOMNode**resultNode);
/*5344*/ HRESULT(__stdcall*get_parsed)(
/*5345*/ IXMLDOMCDATASection*This,
/*5346*/ VARIANT_BOOL*isParsed);
/*5348*/ HRESULT(__stdcall*get_namespaceURI)(
/*5349*/ IXMLDOMCDATASection*This,
/*5350*/ BSTR*namespaceURI);
/*5352*/ HRESULT(__stdcall*get_prefix)(
/*5353*/ IXMLDOMCDATASection*This,
/*5354*/ BSTR*prefixString);
/*5356*/ HRESULT(__stdcall*get_baseName)(
/*5357*/ IXMLDOMCDATASection*This,
/*5358*/ BSTR*nameString);
/*5360*/ HRESULT(__stdcall*transformNodeToObject)(
/*5361*/ IXMLDOMCDATASection*This,
/*5362*/ IXMLDOMNode*stylesheet,
/*5363*/ VARIANT outputObject);
/*5365*/ HRESULT(__stdcall*get_data)(
/*5366*/ IXMLDOMCDATASection*This,
/*5367*/ BSTR*data);
/*5369*/ HRESULT(__stdcall*put_data)(
/*5370*/ IXMLDOMCDATASection*This,
/*5371*/ BSTR data);
/*5373*/ HRESULT(__stdcall*get_length)(
/*5374*/ IXMLDOMCDATASection*This,
/*5375*/ long*dataLength);
/*5377*/ HRESULT(__stdcall*substringData)(
/*5378*/ IXMLDOMCDATASection*This,
/*5379*/ long offset,
/*5380*/ long count,
/*5381*/ BSTR*data);
/*5383*/ HRESULT(__stdcall*appendData)(
/*5384*/ IXMLDOMCDATASection*This,
/*5385*/ BSTR data);
/*5387*/ HRESULT(__stdcall*insertData)(
/*5388*/ IXMLDOMCDATASection*This,
/*5389*/ long offset,
/*5390*/ BSTR data);
/*5392*/ HRESULT(__stdcall*deleteData)(
/*5393*/ IXMLDOMCDATASection*This,
/*5394*/ long offset,
/*5395*/ long count);
/*5397*/ HRESULT(__stdcall*replaceData)(
/*5398*/ IXMLDOMCDATASection*This,
/*5399*/ long offset,
/*5400*/ long count,
/*5401*/ BSTR data);
/*5403*/ HRESULT(__stdcall*splitText)(
/*5404*/ IXMLDOMCDATASection*This,
/*5405*/ long offset,
/*5406*/ IXMLDOMText**rightHandTextNode);
/*5408*/ 
/*5409*/ }IXMLDOMCDATASectionVtbl;
/*5411*/ struct IXMLDOMCDATASection
/*5412*/ {
/*5413*/ struct IXMLDOMCDATASectionVtbl*lpVtbl;
/*5414*/ };
/*5600*/ extern const IID IID_IXMLDOMDocumentType;
/*5621*/ typedef struct IXMLDOMDocumentTypeVtbl
/*5622*/ {
/*5623*/ 
/*5625*/ HRESULT(__stdcall*QueryInterface)(
/*5626*/ IXMLDOMDocumentType*This,
/*5627*/ const IID*const riid,
/*5629*/ void**ppvObject);
/*5631*/ ULONG(__stdcall*AddRef)(
/*5632*/ IXMLDOMDocumentType*This);
/*5634*/ ULONG(__stdcall*Release)(
/*5635*/ IXMLDOMDocumentType*This);
/*5637*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*5638*/ IXMLDOMDocumentType*This,
/*5639*/ UINT*pctinfo);
/*5641*/ HRESULT(__stdcall*GetTypeInfo)(
/*5642*/ IXMLDOMDocumentType*This,
/*5643*/ UINT iTInfo,
/*5644*/ LCID lcid,
/*5645*/ ITypeInfo**ppTInfo);
/*5647*/ HRESULT(__stdcall*GetIDsOfNames)(
/*5648*/ IXMLDOMDocumentType*This,
/*5649*/ const IID*const riid,
/*5650*/ LPOLESTR*rgszNames,
/*5651*/ UINT cNames,
/*5652*/ LCID lcid,
/*5653*/ DISPID*rgDispId);
/*5655*/ HRESULT(__stdcall*Invoke)(
/*5656*/ IXMLDOMDocumentType*This,
/*5657*/ DISPID dispIdMember,
/*5658*/ const IID*const riid,
/*5659*/ LCID lcid,
/*5660*/ WORD wFlags,
/*5661*/ DISPPARAMS*pDispParams,
/*5662*/ VARIANT*pVarResult,
/*5663*/ EXCEPINFO*pExcepInfo,
/*5664*/ UINT*puArgErr);
/*5666*/ HRESULT(__stdcall*get_nodeName)(
/*5667*/ IXMLDOMDocumentType*This,
/*5668*/ BSTR*name);
/*5670*/ HRESULT(__stdcall*get_nodeValue)(
/*5671*/ IXMLDOMDocumentType*This,
/*5672*/ VARIANT*value);
/*5674*/ HRESULT(__stdcall*put_nodeValue)(
/*5675*/ IXMLDOMDocumentType*This,
/*5676*/ VARIANT value);
/*5678*/ HRESULT(__stdcall*get_nodeType)(
/*5679*/ IXMLDOMDocumentType*This,
/*5680*/ DOMNodeType*type);
/*5682*/ HRESULT(__stdcall*get_parentNode)(
/*5683*/ IXMLDOMDocumentType*This,
/*5684*/ IXMLDOMNode**parent);
/*5686*/ HRESULT(__stdcall*get_childNodes)(
/*5687*/ IXMLDOMDocumentType*This,
/*5688*/ IXMLDOMNodeList**childList);
/*5690*/ HRESULT(__stdcall*get_firstChild)(
/*5691*/ IXMLDOMDocumentType*This,
/*5692*/ IXMLDOMNode**firstChild);
/*5694*/ HRESULT(__stdcall*get_lastChild)(
/*5695*/ IXMLDOMDocumentType*This,
/*5696*/ IXMLDOMNode**lastChild);
/*5698*/ HRESULT(__stdcall*get_previousSibling)(
/*5699*/ IXMLDOMDocumentType*This,
/*5700*/ IXMLDOMNode**previousSibling);
/*5702*/ HRESULT(__stdcall*get_nextSibling)(
/*5703*/ IXMLDOMDocumentType*This,
/*5704*/ IXMLDOMNode**nextSibling);
/*5706*/ HRESULT(__stdcall*get_attributes)(
/*5707*/ IXMLDOMDocumentType*This,
/*5708*/ IXMLDOMNamedNodeMap**attributeMap);
/*5710*/ HRESULT(__stdcall*insertBefore)(
/*5711*/ IXMLDOMDocumentType*This,
/*5712*/ IXMLDOMNode*newChild,
/*5713*/ VARIANT refChild,
/*5714*/ IXMLDOMNode**outNewChild);
/*5716*/ HRESULT(__stdcall*replaceChild)(
/*5717*/ IXMLDOMDocumentType*This,
/*5718*/ IXMLDOMNode*newChild,
/*5719*/ IXMLDOMNode*oldChild,
/*5720*/ IXMLDOMNode**outOldChild);
/*5722*/ HRESULT(__stdcall*removeChild)(
/*5723*/ IXMLDOMDocumentType*This,
/*5724*/ IXMLDOMNode*childNode,
/*5725*/ IXMLDOMNode**oldChild);
/*5727*/ HRESULT(__stdcall*appendChild)(
/*5728*/ IXMLDOMDocumentType*This,
/*5729*/ IXMLDOMNode*newChild,
/*5730*/ IXMLDOMNode**outNewChild);
/*5732*/ HRESULT(__stdcall*hasChildNodes)(
/*5733*/ IXMLDOMDocumentType*This,
/*5734*/ VARIANT_BOOL*hasChild);
/*5736*/ HRESULT(__stdcall*get_ownerDocument)(
/*5737*/ IXMLDOMDocumentType*This,
/*5738*/ IXMLDOMDocument**XMLDOMDocument);
/*5740*/ HRESULT(__stdcall*cloneNode)(
/*5741*/ IXMLDOMDocumentType*This,
/*5742*/ VARIANT_BOOL deep,
/*5743*/ IXMLDOMNode**cloneRoot);
/*5745*/ HRESULT(__stdcall*get_nodeTypeString)(
/*5746*/ IXMLDOMDocumentType*This,
/*5747*/ BSTR*nodeType);
/*5749*/ HRESULT(__stdcall*get_text)(
/*5750*/ IXMLDOMDocumentType*This,
/*5751*/ BSTR*text);
/*5753*/ HRESULT(__stdcall*put_text)(
/*5754*/ IXMLDOMDocumentType*This,
/*5755*/ BSTR text);
/*5757*/ HRESULT(__stdcall*get_specified)(
/*5758*/ IXMLDOMDocumentType*This,
/*5759*/ VARIANT_BOOL*isSpecified);
/*5761*/ HRESULT(__stdcall*get_definition)(
/*5762*/ IXMLDOMDocumentType*This,
/*5763*/ IXMLDOMNode**definitionNode);
/*5765*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*5766*/ IXMLDOMDocumentType*This,
/*5767*/ VARIANT*typedValue);
/*5769*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*5770*/ IXMLDOMDocumentType*This,
/*5771*/ VARIANT typedValue);
/*5773*/ HRESULT(__stdcall*get_dataType)(
/*5774*/ IXMLDOMDocumentType*This,
/*5775*/ VARIANT*dataTypeName);
/*5777*/ HRESULT(__stdcall*put_dataType)(
/*5778*/ IXMLDOMDocumentType*This,
/*5779*/ BSTR dataTypeName);
/*5781*/ HRESULT(__stdcall*get_xml)(
/*5782*/ IXMLDOMDocumentType*This,
/*5783*/ BSTR*xmlString);
/*5785*/ HRESULT(__stdcall*transformNode)(
/*5786*/ IXMLDOMDocumentType*This,
/*5787*/ IXMLDOMNode*stylesheet,
/*5788*/ BSTR*xmlString);
/*5790*/ HRESULT(__stdcall*selectNodes)(
/*5791*/ IXMLDOMDocumentType*This,
/*5792*/ BSTR queryString,
/*5793*/ IXMLDOMNodeList**resultList);
/*5795*/ HRESULT(__stdcall*selectSingleNode)(
/*5796*/ IXMLDOMDocumentType*This,
/*5797*/ BSTR queryString,
/*5798*/ IXMLDOMNode**resultNode);
/*5800*/ HRESULT(__stdcall*get_parsed)(
/*5801*/ IXMLDOMDocumentType*This,
/*5802*/ VARIANT_BOOL*isParsed);
/*5804*/ HRESULT(__stdcall*get_namespaceURI)(
/*5805*/ IXMLDOMDocumentType*This,
/*5806*/ BSTR*namespaceURI);
/*5808*/ HRESULT(__stdcall*get_prefix)(
/*5809*/ IXMLDOMDocumentType*This,
/*5810*/ BSTR*prefixString);
/*5812*/ HRESULT(__stdcall*get_baseName)(
/*5813*/ IXMLDOMDocumentType*This,
/*5814*/ BSTR*nameString);
/*5816*/ HRESULT(__stdcall*transformNodeToObject)(
/*5817*/ IXMLDOMDocumentType*This,
/*5818*/ IXMLDOMNode*stylesheet,
/*5819*/ VARIANT outputObject);
/*5821*/ HRESULT(__stdcall*get_name)(
/*5822*/ IXMLDOMDocumentType*This,
/*5823*/ BSTR*rootName);
/*5825*/ HRESULT(__stdcall*get_entities)(
/*5826*/ IXMLDOMDocumentType*This,
/*5827*/ IXMLDOMNamedNodeMap**entityMap);
/*5829*/ HRESULT(__stdcall*get_notations)(
/*5830*/ IXMLDOMDocumentType*This,
/*5831*/ IXMLDOMNamedNodeMap**notationMap);
/*5833*/ 
/*5834*/ }IXMLDOMDocumentTypeVtbl;
/*5836*/ struct IXMLDOMDocumentType
/*5837*/ {
/*5838*/ struct IXMLDOMDocumentTypeVtbl*lpVtbl;
/*5839*/ };
/*6005*/ extern const IID IID_IXMLDOMNotation;
/*6023*/ typedef struct IXMLDOMNotationVtbl
/*6024*/ {
/*6025*/ 
/*6027*/ HRESULT(__stdcall*QueryInterface)(
/*6028*/ IXMLDOMNotation*This,
/*6029*/ const IID*const riid,
/*6031*/ void**ppvObject);
/*6033*/ ULONG(__stdcall*AddRef)(
/*6034*/ IXMLDOMNotation*This);
/*6036*/ ULONG(__stdcall*Release)(
/*6037*/ IXMLDOMNotation*This);
/*6039*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*6040*/ IXMLDOMNotation*This,
/*6041*/ UINT*pctinfo);
/*6043*/ HRESULT(__stdcall*GetTypeInfo)(
/*6044*/ IXMLDOMNotation*This,
/*6045*/ UINT iTInfo,
/*6046*/ LCID lcid,
/*6047*/ ITypeInfo**ppTInfo);
/*6049*/ HRESULT(__stdcall*GetIDsOfNames)(
/*6050*/ IXMLDOMNotation*This,
/*6051*/ const IID*const riid,
/*6052*/ LPOLESTR*rgszNames,
/*6053*/ UINT cNames,
/*6054*/ LCID lcid,
/*6055*/ DISPID*rgDispId);
/*6057*/ HRESULT(__stdcall*Invoke)(
/*6058*/ IXMLDOMNotation*This,
/*6059*/ DISPID dispIdMember,
/*6060*/ const IID*const riid,
/*6061*/ LCID lcid,
/*6062*/ WORD wFlags,
/*6063*/ DISPPARAMS*pDispParams,
/*6064*/ VARIANT*pVarResult,
/*6065*/ EXCEPINFO*pExcepInfo,
/*6066*/ UINT*puArgErr);
/*6068*/ HRESULT(__stdcall*get_nodeName)(
/*6069*/ IXMLDOMNotation*This,
/*6070*/ BSTR*name);
/*6072*/ HRESULT(__stdcall*get_nodeValue)(
/*6073*/ IXMLDOMNotation*This,
/*6074*/ VARIANT*value);
/*6076*/ HRESULT(__stdcall*put_nodeValue)(
/*6077*/ IXMLDOMNotation*This,
/*6078*/ VARIANT value);
/*6080*/ HRESULT(__stdcall*get_nodeType)(
/*6081*/ IXMLDOMNotation*This,
/*6082*/ DOMNodeType*type);
/*6084*/ HRESULT(__stdcall*get_parentNode)(
/*6085*/ IXMLDOMNotation*This,
/*6086*/ IXMLDOMNode**parent);
/*6088*/ HRESULT(__stdcall*get_childNodes)(
/*6089*/ IXMLDOMNotation*This,
/*6090*/ IXMLDOMNodeList**childList);
/*6092*/ HRESULT(__stdcall*get_firstChild)(
/*6093*/ IXMLDOMNotation*This,
/*6094*/ IXMLDOMNode**firstChild);
/*6096*/ HRESULT(__stdcall*get_lastChild)(
/*6097*/ IXMLDOMNotation*This,
/*6098*/ IXMLDOMNode**lastChild);
/*6100*/ HRESULT(__stdcall*get_previousSibling)(
/*6101*/ IXMLDOMNotation*This,
/*6102*/ IXMLDOMNode**previousSibling);
/*6104*/ HRESULT(__stdcall*get_nextSibling)(
/*6105*/ IXMLDOMNotation*This,
/*6106*/ IXMLDOMNode**nextSibling);
/*6108*/ HRESULT(__stdcall*get_attributes)(
/*6109*/ IXMLDOMNotation*This,
/*6110*/ IXMLDOMNamedNodeMap**attributeMap);
/*6112*/ HRESULT(__stdcall*insertBefore)(
/*6113*/ IXMLDOMNotation*This,
/*6114*/ IXMLDOMNode*newChild,
/*6115*/ VARIANT refChild,
/*6116*/ IXMLDOMNode**outNewChild);
/*6118*/ HRESULT(__stdcall*replaceChild)(
/*6119*/ IXMLDOMNotation*This,
/*6120*/ IXMLDOMNode*newChild,
/*6121*/ IXMLDOMNode*oldChild,
/*6122*/ IXMLDOMNode**outOldChild);
/*6124*/ HRESULT(__stdcall*removeChild)(
/*6125*/ IXMLDOMNotation*This,
/*6126*/ IXMLDOMNode*childNode,
/*6127*/ IXMLDOMNode**oldChild);
/*6129*/ HRESULT(__stdcall*appendChild)(
/*6130*/ IXMLDOMNotation*This,
/*6131*/ IXMLDOMNode*newChild,
/*6132*/ IXMLDOMNode**outNewChild);
/*6134*/ HRESULT(__stdcall*hasChildNodes)(
/*6135*/ IXMLDOMNotation*This,
/*6136*/ VARIANT_BOOL*hasChild);
/*6138*/ HRESULT(__stdcall*get_ownerDocument)(
/*6139*/ IXMLDOMNotation*This,
/*6140*/ IXMLDOMDocument**XMLDOMDocument);
/*6142*/ HRESULT(__stdcall*cloneNode)(
/*6143*/ IXMLDOMNotation*This,
/*6144*/ VARIANT_BOOL deep,
/*6145*/ IXMLDOMNode**cloneRoot);
/*6147*/ HRESULT(__stdcall*get_nodeTypeString)(
/*6148*/ IXMLDOMNotation*This,
/*6149*/ BSTR*nodeType);
/*6151*/ HRESULT(__stdcall*get_text)(
/*6152*/ IXMLDOMNotation*This,
/*6153*/ BSTR*text);
/*6155*/ HRESULT(__stdcall*put_text)(
/*6156*/ IXMLDOMNotation*This,
/*6157*/ BSTR text);
/*6159*/ HRESULT(__stdcall*get_specified)(
/*6160*/ IXMLDOMNotation*This,
/*6161*/ VARIANT_BOOL*isSpecified);
/*6163*/ HRESULT(__stdcall*get_definition)(
/*6164*/ IXMLDOMNotation*This,
/*6165*/ IXMLDOMNode**definitionNode);
/*6167*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*6168*/ IXMLDOMNotation*This,
/*6169*/ VARIANT*typedValue);
/*6171*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*6172*/ IXMLDOMNotation*This,
/*6173*/ VARIANT typedValue);
/*6175*/ HRESULT(__stdcall*get_dataType)(
/*6176*/ IXMLDOMNotation*This,
/*6177*/ VARIANT*dataTypeName);
/*6179*/ HRESULT(__stdcall*put_dataType)(
/*6180*/ IXMLDOMNotation*This,
/*6181*/ BSTR dataTypeName);
/*6183*/ HRESULT(__stdcall*get_xml)(
/*6184*/ IXMLDOMNotation*This,
/*6185*/ BSTR*xmlString);
/*6187*/ HRESULT(__stdcall*transformNode)(
/*6188*/ IXMLDOMNotation*This,
/*6189*/ IXMLDOMNode*stylesheet,
/*6190*/ BSTR*xmlString);
/*6192*/ HRESULT(__stdcall*selectNodes)(
/*6193*/ IXMLDOMNotation*This,
/*6194*/ BSTR queryString,
/*6195*/ IXMLDOMNodeList**resultList);
/*6197*/ HRESULT(__stdcall*selectSingleNode)(
/*6198*/ IXMLDOMNotation*This,
/*6199*/ BSTR queryString,
/*6200*/ IXMLDOMNode**resultNode);
/*6202*/ HRESULT(__stdcall*get_parsed)(
/*6203*/ IXMLDOMNotation*This,
/*6204*/ VARIANT_BOOL*isParsed);
/*6206*/ HRESULT(__stdcall*get_namespaceURI)(
/*6207*/ IXMLDOMNotation*This,
/*6208*/ BSTR*namespaceURI);
/*6210*/ HRESULT(__stdcall*get_prefix)(
/*6211*/ IXMLDOMNotation*This,
/*6212*/ BSTR*prefixString);
/*6214*/ HRESULT(__stdcall*get_baseName)(
/*6215*/ IXMLDOMNotation*This,
/*6216*/ BSTR*nameString);
/*6218*/ HRESULT(__stdcall*transformNodeToObject)(
/*6219*/ IXMLDOMNotation*This,
/*6220*/ IXMLDOMNode*stylesheet,
/*6221*/ VARIANT outputObject);
/*6223*/ HRESULT(__stdcall*get_publicId)(
/*6224*/ IXMLDOMNotation*This,
/*6225*/ VARIANT*publicID);
/*6227*/ HRESULT(__stdcall*get_systemId)(
/*6228*/ IXMLDOMNotation*This,
/*6229*/ VARIANT*systemID);
/*6231*/ 
/*6232*/ }IXMLDOMNotationVtbl;
/*6234*/ struct IXMLDOMNotation
/*6235*/ {
/*6236*/ struct IXMLDOMNotationVtbl*lpVtbl;
/*6237*/ };
/*6400*/ extern const IID IID_IXMLDOMEntity;
/*6421*/ typedef struct IXMLDOMEntityVtbl
/*6422*/ {
/*6423*/ 
/*6425*/ HRESULT(__stdcall*QueryInterface)(
/*6426*/ IXMLDOMEntity*This,
/*6427*/ const IID*const riid,
/*6429*/ void**ppvObject);
/*6431*/ ULONG(__stdcall*AddRef)(
/*6432*/ IXMLDOMEntity*This);
/*6434*/ ULONG(__stdcall*Release)(
/*6435*/ IXMLDOMEntity*This);
/*6437*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*6438*/ IXMLDOMEntity*This,
/*6439*/ UINT*pctinfo);
/*6441*/ HRESULT(__stdcall*GetTypeInfo)(
/*6442*/ IXMLDOMEntity*This,
/*6443*/ UINT iTInfo,
/*6444*/ LCID lcid,
/*6445*/ ITypeInfo**ppTInfo);
/*6447*/ HRESULT(__stdcall*GetIDsOfNames)(
/*6448*/ IXMLDOMEntity*This,
/*6449*/ const IID*const riid,
/*6450*/ LPOLESTR*rgszNames,
/*6451*/ UINT cNames,
/*6452*/ LCID lcid,
/*6453*/ DISPID*rgDispId);
/*6455*/ HRESULT(__stdcall*Invoke)(
/*6456*/ IXMLDOMEntity*This,
/*6457*/ DISPID dispIdMember,
/*6458*/ const IID*const riid,
/*6459*/ LCID lcid,
/*6460*/ WORD wFlags,
/*6461*/ DISPPARAMS*pDispParams,
/*6462*/ VARIANT*pVarResult,
/*6463*/ EXCEPINFO*pExcepInfo,
/*6464*/ UINT*puArgErr);
/*6466*/ HRESULT(__stdcall*get_nodeName)(
/*6467*/ IXMLDOMEntity*This,
/*6468*/ BSTR*name);
/*6470*/ HRESULT(__stdcall*get_nodeValue)(
/*6471*/ IXMLDOMEntity*This,
/*6472*/ VARIANT*value);
/*6474*/ HRESULT(__stdcall*put_nodeValue)(
/*6475*/ IXMLDOMEntity*This,
/*6476*/ VARIANT value);
/*6478*/ HRESULT(__stdcall*get_nodeType)(
/*6479*/ IXMLDOMEntity*This,
/*6480*/ DOMNodeType*type);
/*6482*/ HRESULT(__stdcall*get_parentNode)(
/*6483*/ IXMLDOMEntity*This,
/*6484*/ IXMLDOMNode**parent);
/*6486*/ HRESULT(__stdcall*get_childNodes)(
/*6487*/ IXMLDOMEntity*This,
/*6488*/ IXMLDOMNodeList**childList);
/*6490*/ HRESULT(__stdcall*get_firstChild)(
/*6491*/ IXMLDOMEntity*This,
/*6492*/ IXMLDOMNode**firstChild);
/*6494*/ HRESULT(__stdcall*get_lastChild)(
/*6495*/ IXMLDOMEntity*This,
/*6496*/ IXMLDOMNode**lastChild);
/*6498*/ HRESULT(__stdcall*get_previousSibling)(
/*6499*/ IXMLDOMEntity*This,
/*6500*/ IXMLDOMNode**previousSibling);
/*6502*/ HRESULT(__stdcall*get_nextSibling)(
/*6503*/ IXMLDOMEntity*This,
/*6504*/ IXMLDOMNode**nextSibling);
/*6506*/ HRESULT(__stdcall*get_attributes)(
/*6507*/ IXMLDOMEntity*This,
/*6508*/ IXMLDOMNamedNodeMap**attributeMap);
/*6510*/ HRESULT(__stdcall*insertBefore)(
/*6511*/ IXMLDOMEntity*This,
/*6512*/ IXMLDOMNode*newChild,
/*6513*/ VARIANT refChild,
/*6514*/ IXMLDOMNode**outNewChild);
/*6516*/ HRESULT(__stdcall*replaceChild)(
/*6517*/ IXMLDOMEntity*This,
/*6518*/ IXMLDOMNode*newChild,
/*6519*/ IXMLDOMNode*oldChild,
/*6520*/ IXMLDOMNode**outOldChild);
/*6522*/ HRESULT(__stdcall*removeChild)(
/*6523*/ IXMLDOMEntity*This,
/*6524*/ IXMLDOMNode*childNode,
/*6525*/ IXMLDOMNode**oldChild);
/*6527*/ HRESULT(__stdcall*appendChild)(
/*6528*/ IXMLDOMEntity*This,
/*6529*/ IXMLDOMNode*newChild,
/*6530*/ IXMLDOMNode**outNewChild);
/*6532*/ HRESULT(__stdcall*hasChildNodes)(
/*6533*/ IXMLDOMEntity*This,
/*6534*/ VARIANT_BOOL*hasChild);
/*6536*/ HRESULT(__stdcall*get_ownerDocument)(
/*6537*/ IXMLDOMEntity*This,
/*6538*/ IXMLDOMDocument**XMLDOMDocument);
/*6540*/ HRESULT(__stdcall*cloneNode)(
/*6541*/ IXMLDOMEntity*This,
/*6542*/ VARIANT_BOOL deep,
/*6543*/ IXMLDOMNode**cloneRoot);
/*6545*/ HRESULT(__stdcall*get_nodeTypeString)(
/*6546*/ IXMLDOMEntity*This,
/*6547*/ BSTR*nodeType);
/*6549*/ HRESULT(__stdcall*get_text)(
/*6550*/ IXMLDOMEntity*This,
/*6551*/ BSTR*text);
/*6553*/ HRESULT(__stdcall*put_text)(
/*6554*/ IXMLDOMEntity*This,
/*6555*/ BSTR text);
/*6557*/ HRESULT(__stdcall*get_specified)(
/*6558*/ IXMLDOMEntity*This,
/*6559*/ VARIANT_BOOL*isSpecified);
/*6561*/ HRESULT(__stdcall*get_definition)(
/*6562*/ IXMLDOMEntity*This,
/*6563*/ IXMLDOMNode**definitionNode);
/*6565*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*6566*/ IXMLDOMEntity*This,
/*6567*/ VARIANT*typedValue);
/*6569*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*6570*/ IXMLDOMEntity*This,
/*6571*/ VARIANT typedValue);
/*6573*/ HRESULT(__stdcall*get_dataType)(
/*6574*/ IXMLDOMEntity*This,
/*6575*/ VARIANT*dataTypeName);
/*6577*/ HRESULT(__stdcall*put_dataType)(
/*6578*/ IXMLDOMEntity*This,
/*6579*/ BSTR dataTypeName);
/*6581*/ HRESULT(__stdcall*get_xml)(
/*6582*/ IXMLDOMEntity*This,
/*6583*/ BSTR*xmlString);
/*6585*/ HRESULT(__stdcall*transformNode)(
/*6586*/ IXMLDOMEntity*This,
/*6587*/ IXMLDOMNode*stylesheet,
/*6588*/ BSTR*xmlString);
/*6590*/ HRESULT(__stdcall*selectNodes)(
/*6591*/ IXMLDOMEntity*This,
/*6592*/ BSTR queryString,
/*6593*/ IXMLDOMNodeList**resultList);
/*6595*/ HRESULT(__stdcall*selectSingleNode)(
/*6596*/ IXMLDOMEntity*This,
/*6597*/ BSTR queryString,
/*6598*/ IXMLDOMNode**resultNode);
/*6600*/ HRESULT(__stdcall*get_parsed)(
/*6601*/ IXMLDOMEntity*This,
/*6602*/ VARIANT_BOOL*isParsed);
/*6604*/ HRESULT(__stdcall*get_namespaceURI)(
/*6605*/ IXMLDOMEntity*This,
/*6606*/ BSTR*namespaceURI);
/*6608*/ HRESULT(__stdcall*get_prefix)(
/*6609*/ IXMLDOMEntity*This,
/*6610*/ BSTR*prefixString);
/*6612*/ HRESULT(__stdcall*get_baseName)(
/*6613*/ IXMLDOMEntity*This,
/*6614*/ BSTR*nameString);
/*6616*/ HRESULT(__stdcall*transformNodeToObject)(
/*6617*/ IXMLDOMEntity*This,
/*6618*/ IXMLDOMNode*stylesheet,
/*6619*/ VARIANT outputObject);
/*6621*/ HRESULT(__stdcall*get_publicId)(
/*6622*/ IXMLDOMEntity*This,
/*6623*/ VARIANT*publicID);
/*6625*/ HRESULT(__stdcall*get_systemId)(
/*6626*/ IXMLDOMEntity*This,
/*6627*/ VARIANT*systemID);
/*6629*/ HRESULT(__stdcall*get_notationName)(
/*6630*/ IXMLDOMEntity*This,
/*6631*/ BSTR*name);
/*6633*/ 
/*6634*/ }IXMLDOMEntityVtbl;
/*6636*/ struct IXMLDOMEntity
/*6637*/ {
/*6638*/ struct IXMLDOMEntityVtbl*lpVtbl;
/*6639*/ };
/*6805*/ extern const IID IID_IXMLDOMEntityReference;
/*6817*/ typedef struct IXMLDOMEntityReferenceVtbl
/*6818*/ {
/*6819*/ 
/*6821*/ HRESULT(__stdcall*QueryInterface)(
/*6822*/ IXMLDOMEntityReference*This,
/*6823*/ const IID*const riid,
/*6825*/ void**ppvObject);
/*6827*/ ULONG(__stdcall*AddRef)(
/*6828*/ IXMLDOMEntityReference*This);
/*6830*/ ULONG(__stdcall*Release)(
/*6831*/ IXMLDOMEntityReference*This);
/*6833*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*6834*/ IXMLDOMEntityReference*This,
/*6835*/ UINT*pctinfo);
/*6837*/ HRESULT(__stdcall*GetTypeInfo)(
/*6838*/ IXMLDOMEntityReference*This,
/*6839*/ UINT iTInfo,
/*6840*/ LCID lcid,
/*6841*/ ITypeInfo**ppTInfo);
/*6843*/ HRESULT(__stdcall*GetIDsOfNames)(
/*6844*/ IXMLDOMEntityReference*This,
/*6845*/ const IID*const riid,
/*6846*/ LPOLESTR*rgszNames,
/*6847*/ UINT cNames,
/*6848*/ LCID lcid,
/*6849*/ DISPID*rgDispId);
/*6851*/ HRESULT(__stdcall*Invoke)(
/*6852*/ IXMLDOMEntityReference*This,
/*6853*/ DISPID dispIdMember,
/*6854*/ const IID*const riid,
/*6855*/ LCID lcid,
/*6856*/ WORD wFlags,
/*6857*/ DISPPARAMS*pDispParams,
/*6858*/ VARIANT*pVarResult,
/*6859*/ EXCEPINFO*pExcepInfo,
/*6860*/ UINT*puArgErr);
/*6862*/ HRESULT(__stdcall*get_nodeName)(
/*6863*/ IXMLDOMEntityReference*This,
/*6864*/ BSTR*name);
/*6866*/ HRESULT(__stdcall*get_nodeValue)(
/*6867*/ IXMLDOMEntityReference*This,
/*6868*/ VARIANT*value);
/*6870*/ HRESULT(__stdcall*put_nodeValue)(
/*6871*/ IXMLDOMEntityReference*This,
/*6872*/ VARIANT value);
/*6874*/ HRESULT(__stdcall*get_nodeType)(
/*6875*/ IXMLDOMEntityReference*This,
/*6876*/ DOMNodeType*type);
/*6878*/ HRESULT(__stdcall*get_parentNode)(
/*6879*/ IXMLDOMEntityReference*This,
/*6880*/ IXMLDOMNode**parent);
/*6882*/ HRESULT(__stdcall*get_childNodes)(
/*6883*/ IXMLDOMEntityReference*This,
/*6884*/ IXMLDOMNodeList**childList);
/*6886*/ HRESULT(__stdcall*get_firstChild)(
/*6887*/ IXMLDOMEntityReference*This,
/*6888*/ IXMLDOMNode**firstChild);
/*6890*/ HRESULT(__stdcall*get_lastChild)(
/*6891*/ IXMLDOMEntityReference*This,
/*6892*/ IXMLDOMNode**lastChild);
/*6894*/ HRESULT(__stdcall*get_previousSibling)(
/*6895*/ IXMLDOMEntityReference*This,
/*6896*/ IXMLDOMNode**previousSibling);
/*6898*/ HRESULT(__stdcall*get_nextSibling)(
/*6899*/ IXMLDOMEntityReference*This,
/*6900*/ IXMLDOMNode**nextSibling);
/*6902*/ HRESULT(__stdcall*get_attributes)(
/*6903*/ IXMLDOMEntityReference*This,
/*6904*/ IXMLDOMNamedNodeMap**attributeMap);
/*6906*/ HRESULT(__stdcall*insertBefore)(
/*6907*/ IXMLDOMEntityReference*This,
/*6908*/ IXMLDOMNode*newChild,
/*6909*/ VARIANT refChild,
/*6910*/ IXMLDOMNode**outNewChild);
/*6912*/ HRESULT(__stdcall*replaceChild)(
/*6913*/ IXMLDOMEntityReference*This,
/*6914*/ IXMLDOMNode*newChild,
/*6915*/ IXMLDOMNode*oldChild,
/*6916*/ IXMLDOMNode**outOldChild);
/*6918*/ HRESULT(__stdcall*removeChild)(
/*6919*/ IXMLDOMEntityReference*This,
/*6920*/ IXMLDOMNode*childNode,
/*6921*/ IXMLDOMNode**oldChild);
/*6923*/ HRESULT(__stdcall*appendChild)(
/*6924*/ IXMLDOMEntityReference*This,
/*6925*/ IXMLDOMNode*newChild,
/*6926*/ IXMLDOMNode**outNewChild);
/*6928*/ HRESULT(__stdcall*hasChildNodes)(
/*6929*/ IXMLDOMEntityReference*This,
/*6930*/ VARIANT_BOOL*hasChild);
/*6932*/ HRESULT(__stdcall*get_ownerDocument)(
/*6933*/ IXMLDOMEntityReference*This,
/*6934*/ IXMLDOMDocument**XMLDOMDocument);
/*6936*/ HRESULT(__stdcall*cloneNode)(
/*6937*/ IXMLDOMEntityReference*This,
/*6938*/ VARIANT_BOOL deep,
/*6939*/ IXMLDOMNode**cloneRoot);
/*6941*/ HRESULT(__stdcall*get_nodeTypeString)(
/*6942*/ IXMLDOMEntityReference*This,
/*6943*/ BSTR*nodeType);
/*6945*/ HRESULT(__stdcall*get_text)(
/*6946*/ IXMLDOMEntityReference*This,
/*6947*/ BSTR*text);
/*6949*/ HRESULT(__stdcall*put_text)(
/*6950*/ IXMLDOMEntityReference*This,
/*6951*/ BSTR text);
/*6953*/ HRESULT(__stdcall*get_specified)(
/*6954*/ IXMLDOMEntityReference*This,
/*6955*/ VARIANT_BOOL*isSpecified);
/*6957*/ HRESULT(__stdcall*get_definition)(
/*6958*/ IXMLDOMEntityReference*This,
/*6959*/ IXMLDOMNode**definitionNode);
/*6961*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*6962*/ IXMLDOMEntityReference*This,
/*6963*/ VARIANT*typedValue);
/*6965*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*6966*/ IXMLDOMEntityReference*This,
/*6967*/ VARIANT typedValue);
/*6969*/ HRESULT(__stdcall*get_dataType)(
/*6970*/ IXMLDOMEntityReference*This,
/*6971*/ VARIANT*dataTypeName);
/*6973*/ HRESULT(__stdcall*put_dataType)(
/*6974*/ IXMLDOMEntityReference*This,
/*6975*/ BSTR dataTypeName);
/*6977*/ HRESULT(__stdcall*get_xml)(
/*6978*/ IXMLDOMEntityReference*This,
/*6979*/ BSTR*xmlString);
/*6981*/ HRESULT(__stdcall*transformNode)(
/*6982*/ IXMLDOMEntityReference*This,
/*6983*/ IXMLDOMNode*stylesheet,
/*6984*/ BSTR*xmlString);
/*6986*/ HRESULT(__stdcall*selectNodes)(
/*6987*/ IXMLDOMEntityReference*This,
/*6988*/ BSTR queryString,
/*6989*/ IXMLDOMNodeList**resultList);
/*6991*/ HRESULT(__stdcall*selectSingleNode)(
/*6992*/ IXMLDOMEntityReference*This,
/*6993*/ BSTR queryString,
/*6994*/ IXMLDOMNode**resultNode);
/*6996*/ HRESULT(__stdcall*get_parsed)(
/*6997*/ IXMLDOMEntityReference*This,
/*6998*/ VARIANT_BOOL*isParsed);
/*7000*/ HRESULT(__stdcall*get_namespaceURI)(
/*7001*/ IXMLDOMEntityReference*This,
/*7002*/ BSTR*namespaceURI);
/*7004*/ HRESULT(__stdcall*get_prefix)(
/*7005*/ IXMLDOMEntityReference*This,
/*7006*/ BSTR*prefixString);
/*7008*/ HRESULT(__stdcall*get_baseName)(
/*7009*/ IXMLDOMEntityReference*This,
/*7010*/ BSTR*nameString);
/*7012*/ HRESULT(__stdcall*transformNodeToObject)(
/*7013*/ IXMLDOMEntityReference*This,
/*7014*/ IXMLDOMNode*stylesheet,
/*7015*/ VARIANT outputObject);
/*7017*/ 
/*7018*/ }IXMLDOMEntityReferenceVtbl;
/*7020*/ struct IXMLDOMEntityReference
/*7021*/ {
/*7022*/ struct IXMLDOMEntityReferenceVtbl*lpVtbl;
/*7023*/ };
/*7180*/ extern const IID IID_IXMLDOMParseError;
/*7213*/ typedef struct IXMLDOMParseErrorVtbl
/*7214*/ {
/*7215*/ 
/*7217*/ HRESULT(__stdcall*QueryInterface)(
/*7218*/ IXMLDOMParseError*This,
/*7219*/ const IID*const riid,
/*7221*/ void**ppvObject);
/*7223*/ ULONG(__stdcall*AddRef)(
/*7224*/ IXMLDOMParseError*This);
/*7226*/ ULONG(__stdcall*Release)(
/*7227*/ IXMLDOMParseError*This);
/*7229*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*7230*/ IXMLDOMParseError*This,
/*7231*/ UINT*pctinfo);
/*7233*/ HRESULT(__stdcall*GetTypeInfo)(
/*7234*/ IXMLDOMParseError*This,
/*7235*/ UINT iTInfo,
/*7236*/ LCID lcid,
/*7237*/ ITypeInfo**ppTInfo);
/*7239*/ HRESULT(__stdcall*GetIDsOfNames)(
/*7240*/ IXMLDOMParseError*This,
/*7241*/ const IID*const riid,
/*7242*/ LPOLESTR*rgszNames,
/*7243*/ UINT cNames,
/*7244*/ LCID lcid,
/*7245*/ DISPID*rgDispId);
/*7247*/ HRESULT(__stdcall*Invoke)(
/*7248*/ IXMLDOMParseError*This,
/*7249*/ DISPID dispIdMember,
/*7250*/ const IID*const riid,
/*7251*/ LCID lcid,
/*7252*/ WORD wFlags,
/*7253*/ DISPPARAMS*pDispParams,
/*7254*/ VARIANT*pVarResult,
/*7255*/ EXCEPINFO*pExcepInfo,
/*7256*/ UINT*puArgErr);
/*7258*/ HRESULT(__stdcall*get_errorCode)(
/*7259*/ IXMLDOMParseError*This,
/*7260*/ long*errorCode);
/*7262*/ HRESULT(__stdcall*get_url)(
/*7263*/ IXMLDOMParseError*This,
/*7264*/ BSTR*urlString);
/*7266*/ HRESULT(__stdcall*get_reason)(
/*7267*/ IXMLDOMParseError*This,
/*7268*/ BSTR*reasonString);
/*7270*/ HRESULT(__stdcall*get_srcText)(
/*7271*/ IXMLDOMParseError*This,
/*7272*/ BSTR*sourceString);
/*7274*/ HRESULT(__stdcall*get_line)(
/*7275*/ IXMLDOMParseError*This,
/*7276*/ long*lineNumber);
/*7278*/ HRESULT(__stdcall*get_linepos)(
/*7279*/ IXMLDOMParseError*This,
/*7280*/ long*linePosition);
/*7282*/ HRESULT(__stdcall*get_filepos)(
/*7283*/ IXMLDOMParseError*This,
/*7284*/ long*filePosition);
/*7286*/ 
/*7287*/ }IXMLDOMParseErrorVtbl;
/*7289*/ struct IXMLDOMParseError
/*7290*/ {
/*7291*/ struct IXMLDOMParseErrorVtbl*lpVtbl;
/*7292*/ };
/*7361*/ extern const IID IID_IXTLRuntime;
/*7416*/ typedef struct IXTLRuntimeVtbl
/*7417*/ {
/*7418*/ 
/*7420*/ HRESULT(__stdcall*QueryInterface)(
/*7421*/ IXTLRuntime*This,
/*7422*/ const IID*const riid,
/*7424*/ void**ppvObject);
/*7426*/ ULONG(__stdcall*AddRef)(
/*7427*/ IXTLRuntime*This);
/*7429*/ ULONG(__stdcall*Release)(
/*7430*/ IXTLRuntime*This);
/*7432*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*7433*/ IXTLRuntime*This,
/*7434*/ UINT*pctinfo);
/*7436*/ HRESULT(__stdcall*GetTypeInfo)(
/*7437*/ IXTLRuntime*This,
/*7438*/ UINT iTInfo,
/*7439*/ LCID lcid,
/*7440*/ ITypeInfo**ppTInfo);
/*7442*/ HRESULT(__stdcall*GetIDsOfNames)(
/*7443*/ IXTLRuntime*This,
/*7444*/ const IID*const riid,
/*7445*/ LPOLESTR*rgszNames,
/*7446*/ UINT cNames,
/*7447*/ LCID lcid,
/*7448*/ DISPID*rgDispId);
/*7450*/ HRESULT(__stdcall*Invoke)(
/*7451*/ IXTLRuntime*This,
/*7452*/ DISPID dispIdMember,
/*7453*/ const IID*const riid,
/*7454*/ LCID lcid,
/*7455*/ WORD wFlags,
/*7456*/ DISPPARAMS*pDispParams,
/*7457*/ VARIANT*pVarResult,
/*7458*/ EXCEPINFO*pExcepInfo,
/*7459*/ UINT*puArgErr);
/*7461*/ HRESULT(__stdcall*get_nodeName)(
/*7462*/ IXTLRuntime*This,
/*7463*/ BSTR*name);
/*7465*/ HRESULT(__stdcall*get_nodeValue)(
/*7466*/ IXTLRuntime*This,
/*7467*/ VARIANT*value);
/*7469*/ HRESULT(__stdcall*put_nodeValue)(
/*7470*/ IXTLRuntime*This,
/*7471*/ VARIANT value);
/*7473*/ HRESULT(__stdcall*get_nodeType)(
/*7474*/ IXTLRuntime*This,
/*7475*/ DOMNodeType*type);
/*7477*/ HRESULT(__stdcall*get_parentNode)(
/*7478*/ IXTLRuntime*This,
/*7479*/ IXMLDOMNode**parent);
/*7481*/ HRESULT(__stdcall*get_childNodes)(
/*7482*/ IXTLRuntime*This,
/*7483*/ IXMLDOMNodeList**childList);
/*7485*/ HRESULT(__stdcall*get_firstChild)(
/*7486*/ IXTLRuntime*This,
/*7487*/ IXMLDOMNode**firstChild);
/*7489*/ HRESULT(__stdcall*get_lastChild)(
/*7490*/ IXTLRuntime*This,
/*7491*/ IXMLDOMNode**lastChild);
/*7493*/ HRESULT(__stdcall*get_previousSibling)(
/*7494*/ IXTLRuntime*This,
/*7495*/ IXMLDOMNode**previousSibling);
/*7497*/ HRESULT(__stdcall*get_nextSibling)(
/*7498*/ IXTLRuntime*This,
/*7499*/ IXMLDOMNode**nextSibling);
/*7501*/ HRESULT(__stdcall*get_attributes)(
/*7502*/ IXTLRuntime*This,
/*7503*/ IXMLDOMNamedNodeMap**attributeMap);
/*7505*/ HRESULT(__stdcall*insertBefore)(
/*7506*/ IXTLRuntime*This,
/*7507*/ IXMLDOMNode*newChild,
/*7508*/ VARIANT refChild,
/*7509*/ IXMLDOMNode**outNewChild);
/*7511*/ HRESULT(__stdcall*replaceChild)(
/*7512*/ IXTLRuntime*This,
/*7513*/ IXMLDOMNode*newChild,
/*7514*/ IXMLDOMNode*oldChild,
/*7515*/ IXMLDOMNode**outOldChild);
/*7517*/ HRESULT(__stdcall*removeChild)(
/*7518*/ IXTLRuntime*This,
/*7519*/ IXMLDOMNode*childNode,
/*7520*/ IXMLDOMNode**oldChild);
/*7522*/ HRESULT(__stdcall*appendChild)(
/*7523*/ IXTLRuntime*This,
/*7524*/ IXMLDOMNode*newChild,
/*7525*/ IXMLDOMNode**outNewChild);
/*7527*/ HRESULT(__stdcall*hasChildNodes)(
/*7528*/ IXTLRuntime*This,
/*7529*/ VARIANT_BOOL*hasChild);
/*7531*/ HRESULT(__stdcall*get_ownerDocument)(
/*7532*/ IXTLRuntime*This,
/*7533*/ IXMLDOMDocument**XMLDOMDocument);
/*7535*/ HRESULT(__stdcall*cloneNode)(
/*7536*/ IXTLRuntime*This,
/*7537*/ VARIANT_BOOL deep,
/*7538*/ IXMLDOMNode**cloneRoot);
/*7540*/ HRESULT(__stdcall*get_nodeTypeString)(
/*7541*/ IXTLRuntime*This,
/*7542*/ BSTR*nodeType);
/*7544*/ HRESULT(__stdcall*get_text)(
/*7545*/ IXTLRuntime*This,
/*7546*/ BSTR*text);
/*7548*/ HRESULT(__stdcall*put_text)(
/*7549*/ IXTLRuntime*This,
/*7550*/ BSTR text);
/*7552*/ HRESULT(__stdcall*get_specified)(
/*7553*/ IXTLRuntime*This,
/*7554*/ VARIANT_BOOL*isSpecified);
/*7556*/ HRESULT(__stdcall*get_definition)(
/*7557*/ IXTLRuntime*This,
/*7558*/ IXMLDOMNode**definitionNode);
/*7560*/ HRESULT(__stdcall*get_nodeTypedValue)(
/*7561*/ IXTLRuntime*This,
/*7562*/ VARIANT*typedValue);
/*7564*/ HRESULT(__stdcall*put_nodeTypedValue)(
/*7565*/ IXTLRuntime*This,
/*7566*/ VARIANT typedValue);
/*7568*/ HRESULT(__stdcall*get_dataType)(
/*7569*/ IXTLRuntime*This,
/*7570*/ VARIANT*dataTypeName);
/*7572*/ HRESULT(__stdcall*put_dataType)(
/*7573*/ IXTLRuntime*This,
/*7574*/ BSTR dataTypeName);
/*7576*/ HRESULT(__stdcall*get_xml)(
/*7577*/ IXTLRuntime*This,
/*7578*/ BSTR*xmlString);
/*7580*/ HRESULT(__stdcall*transformNode)(
/*7581*/ IXTLRuntime*This,
/*7582*/ IXMLDOMNode*stylesheet,
/*7583*/ BSTR*xmlString);
/*7585*/ HRESULT(__stdcall*selectNodes)(
/*7586*/ IXTLRuntime*This,
/*7587*/ BSTR queryString,
/*7588*/ IXMLDOMNodeList**resultList);
/*7590*/ HRESULT(__stdcall*selectSingleNode)(
/*7591*/ IXTLRuntime*This,
/*7592*/ BSTR queryString,
/*7593*/ IXMLDOMNode**resultNode);
/*7595*/ HRESULT(__stdcall*get_parsed)(
/*7596*/ IXTLRuntime*This,
/*7597*/ VARIANT_BOOL*isParsed);
/*7599*/ HRESULT(__stdcall*get_namespaceURI)(
/*7600*/ IXTLRuntime*This,
/*7601*/ BSTR*namespaceURI);
/*7603*/ HRESULT(__stdcall*get_prefix)(
/*7604*/ IXTLRuntime*This,
/*7605*/ BSTR*prefixString);
/*7607*/ HRESULT(__stdcall*get_baseName)(
/*7608*/ IXTLRuntime*This,
/*7609*/ BSTR*nameString);
/*7611*/ HRESULT(__stdcall*transformNodeToObject)(
/*7612*/ IXTLRuntime*This,
/*7613*/ IXMLDOMNode*stylesheet,
/*7614*/ VARIANT outputObject);
/*7616*/ HRESULT(__stdcall*uniqueID)(
/*7617*/ IXTLRuntime*This,
/*7618*/ IXMLDOMNode*pNode,
/*7619*/ long*pID);
/*7621*/ HRESULT(__stdcall*depth)(
/*7622*/ IXTLRuntime*This,
/*7623*/ IXMLDOMNode*pNode,
/*7624*/ long*pDepth);
/*7626*/ HRESULT(__stdcall*childNumber)(
/*7627*/ IXTLRuntime*This,
/*7628*/ IXMLDOMNode*pNode,
/*7629*/ long*pNumber);
/*7631*/ HRESULT(__stdcall*ancestorChildNumber)(
/*7632*/ IXTLRuntime*This,
/*7633*/ BSTR bstrNodeName,
/*7634*/ IXMLDOMNode*pNode,
/*7635*/ long*pNumber);
/*7637*/ HRESULT(__stdcall*absoluteChildNumber)(
/*7638*/ IXTLRuntime*This,
/*7639*/ IXMLDOMNode*pNode,
/*7640*/ long*pNumber);
/*7642*/ HRESULT(__stdcall*formatIndex)(
/*7643*/ IXTLRuntime*This,
/*7644*/ long lIndex,
/*7645*/ BSTR bstrFormat,
/*7646*/ BSTR*pbstrFormattedString);
/*7648*/ HRESULT(__stdcall*formatNumber)(
/*7649*/ IXTLRuntime*This,
/*7650*/ double dblNumber,
/*7651*/ BSTR bstrFormat,
/*7652*/ BSTR*pbstrFormattedString);
/*7654*/ HRESULT(__stdcall*formatDate)(
/*7655*/ IXTLRuntime*This,
/*7656*/ VARIANT varDate,
/*7657*/ BSTR bstrFormat,
/*7658*/ VARIANT varDestLocale,
/*7659*/ BSTR*pbstrFormattedString);
/*7661*/ HRESULT(__stdcall*formatTime)(
/*7662*/ IXTLRuntime*This,
/*7663*/ VARIANT varTime,
/*7664*/ BSTR bstrFormat,
/*7665*/ VARIANT varDestLocale,
/*7666*/ BSTR*pbstrFormattedString);
/*7668*/ 
/*7669*/ }IXTLRuntimeVtbl;
/*7671*/ struct IXTLRuntime
/*7672*/ {
/*7673*/ struct IXTLRuntimeVtbl*lpVtbl;
/*7674*/ };
/*7858*/ extern const IID DIID_XMLDOMDocumentEvents;
/*7869*/ typedef struct XMLDOMDocumentEventsVtbl
/*7870*/ {
/*7871*/ 
/*7873*/ HRESULT(__stdcall*QueryInterface)(
/*7874*/ XMLDOMDocumentEvents*This,
/*7875*/ const IID*const riid,
/*7877*/ void**ppvObject);
/*7879*/ ULONG(__stdcall*AddRef)(
/*7880*/ XMLDOMDocumentEvents*This);
/*7882*/ ULONG(__stdcall*Release)(
/*7883*/ XMLDOMDocumentEvents*This);
/*7885*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*7886*/ XMLDOMDocumentEvents*This,
/*7887*/ UINT*pctinfo);
/*7889*/ HRESULT(__stdcall*GetTypeInfo)(
/*7890*/ XMLDOMDocumentEvents*This,
/*7891*/ UINT iTInfo,
/*7892*/ LCID lcid,
/*7893*/ ITypeInfo**ppTInfo);
/*7895*/ HRESULT(__stdcall*GetIDsOfNames)(
/*7896*/ XMLDOMDocumentEvents*This,
/*7897*/ const IID*const riid,
/*7898*/ LPOLESTR*rgszNames,
/*7899*/ UINT cNames,
/*7900*/ LCID lcid,
/*7901*/ DISPID*rgDispId);
/*7903*/ HRESULT(__stdcall*Invoke)(
/*7904*/ XMLDOMDocumentEvents*This,
/*7905*/ DISPID dispIdMember,
/*7906*/ const IID*const riid,
/*7907*/ LCID lcid,
/*7908*/ WORD wFlags,
/*7909*/ DISPPARAMS*pDispParams,
/*7910*/ VARIANT*pVarResult,
/*7911*/ EXCEPINFO*pExcepInfo,
/*7912*/ UINT*puArgErr);
/*7914*/ 
/*7915*/ }XMLDOMDocumentEventsVtbl;
/*7917*/ struct XMLDOMDocumentEvents
/*7918*/ {
/*7919*/ struct XMLDOMDocumentEventsVtbl*lpVtbl;
/*7920*/ };
/*7958*/ extern const CLSID CLSID_DOMDocument;
/*7966*/ extern const CLSID CLSID_DOMFreeThreadedDocument;
/*7981*/ extern const IID IID_IXMLHttpRequest;
/*8040*/ typedef struct IXMLHttpRequestVtbl
/*8041*/ {
/*8042*/ 
/*8044*/ HRESULT(__stdcall*QueryInterface)(
/*8045*/ IXMLHttpRequest*This,
/*8046*/ const IID*const riid,
/*8048*/ void**ppvObject);
/*8050*/ ULONG(__stdcall*AddRef)(
/*8051*/ IXMLHttpRequest*This);
/*8053*/ ULONG(__stdcall*Release)(
/*8054*/ IXMLHttpRequest*This);
/*8056*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*8057*/ IXMLHttpRequest*This,
/*8058*/ UINT*pctinfo);
/*8060*/ HRESULT(__stdcall*GetTypeInfo)(
/*8061*/ IXMLHttpRequest*This,
/*8062*/ UINT iTInfo,
/*8063*/ LCID lcid,
/*8064*/ ITypeInfo**ppTInfo);
/*8066*/ HRESULT(__stdcall*GetIDsOfNames)(
/*8067*/ IXMLHttpRequest*This,
/*8068*/ const IID*const riid,
/*8069*/ LPOLESTR*rgszNames,
/*8070*/ UINT cNames,
/*8071*/ LCID lcid,
/*8072*/ DISPID*rgDispId);
/*8074*/ HRESULT(__stdcall*Invoke)(
/*8075*/ IXMLHttpRequest*This,
/*8076*/ DISPID dispIdMember,
/*8077*/ const IID*const riid,
/*8078*/ LCID lcid,
/*8079*/ WORD wFlags,
/*8080*/ DISPPARAMS*pDispParams,
/*8081*/ VARIANT*pVarResult,
/*8082*/ EXCEPINFO*pExcepInfo,
/*8083*/ UINT*puArgErr);
/*8085*/ HRESULT(__stdcall*open)(
/*8086*/ IXMLHttpRequest*This,
/*8087*/ BSTR bstrMethod,
/*8088*/ BSTR bstrUrl,
/*8089*/ VARIANT varAsync,
/*8090*/ VARIANT bstrUser,
/*8091*/ VARIANT bstrPassword);
/*8093*/ HRESULT(__stdcall*setRequestHeader)(
/*8094*/ IXMLHttpRequest*This,
/*8095*/ BSTR bstrHeader,
/*8096*/ BSTR bstrValue);
/*8098*/ HRESULT(__stdcall*getResponseHeader)(
/*8099*/ IXMLHttpRequest*This,
/*8100*/ BSTR bstrHeader,
/*8101*/ BSTR*pbstrValue);
/*8103*/ HRESULT(__stdcall*getAllResponseHeaders)(
/*8104*/ IXMLHttpRequest*This,
/*8105*/ BSTR*pbstrHeaders);
/*8107*/ HRESULT(__stdcall*send)(
/*8108*/ IXMLHttpRequest*This,
/*8109*/ VARIANT varBody);
/*8111*/ HRESULT(__stdcall*abort)(
/*8112*/ IXMLHttpRequest*This);
/*8114*/ HRESULT(__stdcall*get_status)(
/*8115*/ IXMLHttpRequest*This,
/*8116*/ long*plStatus);
/*8118*/ HRESULT(__stdcall*get_statusText)(
/*8119*/ IXMLHttpRequest*This,
/*8120*/ BSTR*pbstrStatus);
/*8122*/ HRESULT(__stdcall*get_responseXML)(
/*8123*/ IXMLHttpRequest*This,
/*8124*/ IDispatch**ppBody);
/*8126*/ HRESULT(__stdcall*get_responseText)(
/*8127*/ IXMLHttpRequest*This,
/*8128*/ BSTR*pbstrBody);
/*8130*/ HRESULT(__stdcall*get_responseBody)(
/*8131*/ IXMLHttpRequest*This,
/*8132*/ VARIANT*pvarBody);
/*8134*/ HRESULT(__stdcall*get_responseStream)(
/*8135*/ IXMLHttpRequest*This,
/*8136*/ VARIANT*pvarBody);
/*8138*/ HRESULT(__stdcall*get_readyState)(
/*8139*/ IXMLHttpRequest*This,
/*8140*/ long*plState);
/*8142*/ HRESULT(__stdcall*put_onreadystatechange)(
/*8143*/ IXMLHttpRequest*This,
/*8144*/ IDispatch*pReadyStateSink);
/*8146*/ 
/*8147*/ }IXMLHttpRequestVtbl;
/*8149*/ struct IXMLHttpRequest
/*8150*/ {
/*8151*/ struct IXMLHttpRequestVtbl*lpVtbl;
/*8152*/ };
/*8235*/ extern const CLSID CLSID_XMLHTTPRequest;
/*8250*/ extern const IID IID_IXMLDSOControl;
/*8277*/ typedef struct IXMLDSOControlVtbl
/*8278*/ {
/*8279*/ 
/*8281*/ HRESULT(__stdcall*QueryInterface)(
/*8282*/ IXMLDSOControl*This,
/*8283*/ const IID*const riid,
/*8285*/ void**ppvObject);
/*8287*/ ULONG(__stdcall*AddRef)(
/*8288*/ IXMLDSOControl*This);
/*8290*/ ULONG(__stdcall*Release)(
/*8291*/ IXMLDSOControl*This);
/*8293*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*8294*/ IXMLDSOControl*This,
/*8295*/ UINT*pctinfo);
/*8297*/ HRESULT(__stdcall*GetTypeInfo)(
/*8298*/ IXMLDSOControl*This,
/*8299*/ UINT iTInfo,
/*8300*/ LCID lcid,
/*8301*/ ITypeInfo**ppTInfo);
/*8303*/ HRESULT(__stdcall*GetIDsOfNames)(
/*8304*/ IXMLDSOControl*This,
/*8305*/ const IID*const riid,
/*8306*/ LPOLESTR*rgszNames,
/*8307*/ UINT cNames,
/*8308*/ LCID lcid,
/*8309*/ DISPID*rgDispId);
/*8311*/ HRESULT(__stdcall*Invoke)(
/*8312*/ IXMLDSOControl*This,
/*8313*/ DISPID dispIdMember,
/*8314*/ const IID*const riid,
/*8315*/ LCID lcid,
/*8316*/ WORD wFlags,
/*8317*/ DISPPARAMS*pDispParams,
/*8318*/ VARIANT*pVarResult,
/*8319*/ EXCEPINFO*pExcepInfo,
/*8320*/ UINT*puArgErr);
/*8322*/ HRESULT(__stdcall*get_XMLDocument)(
/*8323*/ IXMLDSOControl*This,
/*8324*/ IXMLDOMDocument**ppDoc);
/*8326*/ HRESULT(__stdcall*put_XMLDocument)(
/*8327*/ IXMLDSOControl*This,
/*8328*/ IXMLDOMDocument*ppDoc);
/*8330*/ HRESULT(__stdcall*get_JavaDSOCompatible)(
/*8331*/ IXMLDSOControl*This,
/*8332*/ BOOL*fJavaDSOCompatible);
/*8334*/ HRESULT(__stdcall*put_JavaDSOCompatible)(
/*8335*/ IXMLDSOControl*This,
/*8336*/ BOOL fJavaDSOCompatible);
/*8338*/ HRESULT(__stdcall*get_readyState)(
/*8339*/ IXMLDSOControl*This,
/*8340*/ long*state);
/*8342*/ 
/*8343*/ }IXMLDSOControlVtbl;
/*8345*/ struct IXMLDSOControl
/*8346*/ {
/*8347*/ struct IXMLDSOControlVtbl*lpVtbl;
/*8348*/ };
/*8404*/ extern const CLSID CLSID_XMLDSOControl;
/*8419*/ extern const IID IID_IXMLElementCollection;
/*8445*/ typedef struct IXMLElementCollectionVtbl
/*8446*/ {
/*8447*/ 
/*8449*/ HRESULT(__stdcall*QueryInterface)(
/*8450*/ IXMLElementCollection*This,
/*8451*/ const IID*const riid,
/*8453*/ void**ppvObject);
/*8455*/ ULONG(__stdcall*AddRef)(
/*8456*/ IXMLElementCollection*This);
/*8458*/ ULONG(__stdcall*Release)(
/*8459*/ IXMLElementCollection*This);
/*8461*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*8462*/ IXMLElementCollection*This,
/*8463*/ UINT*pctinfo);
/*8465*/ HRESULT(__stdcall*GetTypeInfo)(
/*8466*/ IXMLElementCollection*This,
/*8467*/ UINT iTInfo,
/*8468*/ LCID lcid,
/*8469*/ ITypeInfo**ppTInfo);
/*8471*/ HRESULT(__stdcall*GetIDsOfNames)(
/*8472*/ IXMLElementCollection*This,
/*8473*/ const IID*const riid,
/*8474*/ LPOLESTR*rgszNames,
/*8475*/ UINT cNames,
/*8476*/ LCID lcid,
/*8477*/ DISPID*rgDispId);
/*8479*/ HRESULT(__stdcall*Invoke)(
/*8480*/ IXMLElementCollection*This,
/*8481*/ DISPID dispIdMember,
/*8482*/ const IID*const riid,
/*8483*/ LCID lcid,
/*8484*/ WORD wFlags,
/*8485*/ DISPPARAMS*pDispParams,
/*8486*/ VARIANT*pVarResult,
/*8487*/ EXCEPINFO*pExcepInfo,
/*8488*/ UINT*puArgErr);
/*8490*/ HRESULT(__stdcall*put_length)(
/*8491*/ IXMLElementCollection*This,
/*8492*/ long v);
/*8494*/ HRESULT(__stdcall*get_length)(
/*8495*/ IXMLElementCollection*This,
/*8496*/ long*p);
/*8498*/ HRESULT(__stdcall*get__newEnum)(
/*8499*/ IXMLElementCollection*This,
/*8500*/ IUnknown**ppUnk);
/*8502*/ HRESULT(__stdcall*item)(
/*8503*/ IXMLElementCollection*This,
/*8504*/ VARIANT var1,
/*8505*/ VARIANT var2,
/*8506*/ IDispatch**ppDisp);
/*8508*/ 
/*8509*/ }IXMLElementCollectionVtbl;
/*8511*/ struct IXMLElementCollection
/*8512*/ {
/*8513*/ struct IXMLElementCollectionVtbl*lpVtbl;
/*8514*/ };
/*8574*/ extern const IID IID_IXMLDocument;
/*8630*/ typedef struct IXMLDocumentVtbl
/*8631*/ {
/*8632*/ 
/*8634*/ HRESULT(__stdcall*QueryInterface)(
/*8635*/ IXMLDocument*This,
/*8636*/ const IID*const riid,
/*8638*/ void**ppvObject);
/*8640*/ ULONG(__stdcall*AddRef)(
/*8641*/ IXMLDocument*This);
/*8643*/ ULONG(__stdcall*Release)(
/*8644*/ IXMLDocument*This);
/*8646*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*8647*/ IXMLDocument*This,
/*8648*/ UINT*pctinfo);
/*8650*/ HRESULT(__stdcall*GetTypeInfo)(
/*8651*/ IXMLDocument*This,
/*8652*/ UINT iTInfo,
/*8653*/ LCID lcid,
/*8654*/ ITypeInfo**ppTInfo);
/*8656*/ HRESULT(__stdcall*GetIDsOfNames)(
/*8657*/ IXMLDocument*This,
/*8658*/ const IID*const riid,
/*8659*/ LPOLESTR*rgszNames,
/*8660*/ UINT cNames,
/*8661*/ LCID lcid,
/*8662*/ DISPID*rgDispId);
/*8664*/ HRESULT(__stdcall*Invoke)(
/*8665*/ IXMLDocument*This,
/*8666*/ DISPID dispIdMember,
/*8667*/ const IID*const riid,
/*8668*/ LCID lcid,
/*8669*/ WORD wFlags,
/*8670*/ DISPPARAMS*pDispParams,
/*8671*/ VARIANT*pVarResult,
/*8672*/ EXCEPINFO*pExcepInfo,
/*8673*/ UINT*puArgErr);
/*8675*/ HRESULT(__stdcall*get_root)(
/*8676*/ IXMLDocument*This,
/*8677*/ IXMLElement**p);
/*8679*/ HRESULT(__stdcall*get_fileSize)(
/*8680*/ IXMLDocument*This,
/*8681*/ BSTR*p);
/*8683*/ HRESULT(__stdcall*get_fileModifiedDate)(
/*8684*/ IXMLDocument*This,
/*8685*/ BSTR*p);
/*8687*/ HRESULT(__stdcall*get_fileUpdatedDate)(
/*8688*/ IXMLDocument*This,
/*8689*/ BSTR*p);
/*8691*/ HRESULT(__stdcall*get_URL)(
/*8692*/ IXMLDocument*This,
/*8693*/ BSTR*p);
/*8695*/ HRESULT(__stdcall*put_URL)(
/*8696*/ IXMLDocument*This,
/*8697*/ BSTR p);
/*8699*/ HRESULT(__stdcall*get_mimeType)(
/*8700*/ IXMLDocument*This,
/*8701*/ BSTR*p);
/*8703*/ HRESULT(__stdcall*get_readyState)(
/*8704*/ IXMLDocument*This,
/*8705*/ long*pl);
/*8707*/ HRESULT(__stdcall*get_charset)(
/*8708*/ IXMLDocument*This,
/*8709*/ BSTR*p);
/*8711*/ HRESULT(__stdcall*put_charset)(
/*8712*/ IXMLDocument*This,
/*8713*/ BSTR p);
/*8715*/ HRESULT(__stdcall*get_version)(
/*8716*/ IXMLDocument*This,
/*8717*/ BSTR*p);
/*8719*/ HRESULT(__stdcall*get_doctype)(
/*8720*/ IXMLDocument*This,
/*8721*/ BSTR*p);
/*8723*/ HRESULT(__stdcall*get_dtdURL)(
/*8724*/ IXMLDocument*This,
/*8725*/ BSTR*p);
/*8727*/ HRESULT(__stdcall*createElement)(
/*8728*/ IXMLDocument*This,
/*8729*/ VARIANT vType,
/*8730*/ VARIANT var1,
/*8731*/ IXMLElement**ppElem);
/*8733*/ 
/*8734*/ }IXMLDocumentVtbl;
/*8736*/ struct IXMLDocument
/*8737*/ {
/*8738*/ struct IXMLDocumentVtbl*lpVtbl;
/*8739*/ };
/*8829*/ extern const IID IID_IXMLDocument2;
/*8891*/ typedef struct IXMLDocument2Vtbl
/*8892*/ {
/*8893*/ 
/*8895*/ HRESULT(__stdcall*QueryInterface)(
/*8896*/ IXMLDocument2*This,
/*8897*/ const IID*const riid,
/*8899*/ void**ppvObject);
/*8901*/ ULONG(__stdcall*AddRef)(
/*8902*/ IXMLDocument2*This);
/*8904*/ ULONG(__stdcall*Release)(
/*8905*/ IXMLDocument2*This);
/*8907*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*8908*/ IXMLDocument2*This,
/*8909*/ UINT*pctinfo);
/*8911*/ HRESULT(__stdcall*GetTypeInfo)(
/*8912*/ IXMLDocument2*This,
/*8913*/ UINT iTInfo,
/*8914*/ LCID lcid,
/*8915*/ ITypeInfo**ppTInfo);
/*8917*/ HRESULT(__stdcall*GetIDsOfNames)(
/*8918*/ IXMLDocument2*This,
/*8919*/ const IID*const riid,
/*8920*/ LPOLESTR*rgszNames,
/*8921*/ UINT cNames,
/*8922*/ LCID lcid,
/*8923*/ DISPID*rgDispId);
/*8925*/ HRESULT(__stdcall*Invoke)(
/*8926*/ IXMLDocument2*This,
/*8927*/ DISPID dispIdMember,
/*8928*/ const IID*const riid,
/*8929*/ LCID lcid,
/*8930*/ WORD wFlags,
/*8931*/ DISPPARAMS*pDispParams,
/*8932*/ VARIANT*pVarResult,
/*8933*/ EXCEPINFO*pExcepInfo,
/*8934*/ UINT*puArgErr);
/*8936*/ HRESULT(__stdcall*get_root)(
/*8937*/ IXMLDocument2*This,
/*8938*/ IXMLElement2**p);
/*8940*/ HRESULT(__stdcall*get_fileSize)(
/*8941*/ IXMLDocument2*This,
/*8942*/ BSTR*p);
/*8944*/ HRESULT(__stdcall*get_fileModifiedDate)(
/*8945*/ IXMLDocument2*This,
/*8946*/ BSTR*p);
/*8948*/ HRESULT(__stdcall*get_fileUpdatedDate)(
/*8949*/ IXMLDocument2*This,
/*8950*/ BSTR*p);
/*8952*/ HRESULT(__stdcall*get_URL)(
/*8953*/ IXMLDocument2*This,
/*8954*/ BSTR*p);
/*8956*/ HRESULT(__stdcall*put_URL)(
/*8957*/ IXMLDocument2*This,
/*8958*/ BSTR p);
/*8960*/ HRESULT(__stdcall*get_mimeType)(
/*8961*/ IXMLDocument2*This,
/*8962*/ BSTR*p);
/*8964*/ HRESULT(__stdcall*get_readyState)(
/*8965*/ IXMLDocument2*This,
/*8966*/ long*pl);
/*8968*/ HRESULT(__stdcall*get_charset)(
/*8969*/ IXMLDocument2*This,
/*8970*/ BSTR*p);
/*8972*/ HRESULT(__stdcall*put_charset)(
/*8973*/ IXMLDocument2*This,
/*8974*/ BSTR p);
/*8976*/ HRESULT(__stdcall*get_version)(
/*8977*/ IXMLDocument2*This,
/*8978*/ BSTR*p);
/*8980*/ HRESULT(__stdcall*get_doctype)(
/*8981*/ IXMLDocument2*This,
/*8982*/ BSTR*p);
/*8984*/ HRESULT(__stdcall*get_dtdURL)(
/*8985*/ IXMLDocument2*This,
/*8986*/ BSTR*p);
/*8988*/ HRESULT(__stdcall*createElement)(
/*8989*/ IXMLDocument2*This,
/*8990*/ VARIANT vType,
/*8991*/ VARIANT var1,
/*8992*/ IXMLElement2**ppElem);
/*8994*/ HRESULT(__stdcall*get_async)(
/*8995*/ IXMLDocument2*This,
/*8996*/ VARIANT_BOOL*pf);
/*8998*/ HRESULT(__stdcall*put_async)(
/*8999*/ IXMLDocument2*This,
/*9000*/ VARIANT_BOOL f);
/*9002*/ 
/*9003*/ }IXMLDocument2Vtbl;
/*9005*/ struct IXMLDocument2
/*9006*/ {
/*9007*/ struct IXMLDocument2Vtbl*lpVtbl;
/*9008*/ };
/*9104*/ extern const IID IID_IXMLElement;
/*9156*/ typedef struct IXMLElementVtbl
/*9157*/ {
/*9158*/ 
/*9160*/ HRESULT(__stdcall*QueryInterface)(
/*9161*/ IXMLElement*This,
/*9162*/ const IID*const riid,
/*9164*/ void**ppvObject);
/*9166*/ ULONG(__stdcall*AddRef)(
/*9167*/ IXMLElement*This);
/*9169*/ ULONG(__stdcall*Release)(
/*9170*/ IXMLElement*This);
/*9172*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*9173*/ IXMLElement*This,
/*9174*/ UINT*pctinfo);
/*9176*/ HRESULT(__stdcall*GetTypeInfo)(
/*9177*/ IXMLElement*This,
/*9178*/ UINT iTInfo,
/*9179*/ LCID lcid,
/*9180*/ ITypeInfo**ppTInfo);
/*9182*/ HRESULT(__stdcall*GetIDsOfNames)(
/*9183*/ IXMLElement*This,
/*9184*/ const IID*const riid,
/*9185*/ LPOLESTR*rgszNames,
/*9186*/ UINT cNames,
/*9187*/ LCID lcid,
/*9188*/ DISPID*rgDispId);
/*9190*/ HRESULT(__stdcall*Invoke)(
/*9191*/ IXMLElement*This,
/*9192*/ DISPID dispIdMember,
/*9193*/ const IID*const riid,
/*9194*/ LCID lcid,
/*9195*/ WORD wFlags,
/*9196*/ DISPPARAMS*pDispParams,
/*9197*/ VARIANT*pVarResult,
/*9198*/ EXCEPINFO*pExcepInfo,
/*9199*/ UINT*puArgErr);
/*9201*/ HRESULT(__stdcall*get_tagName)(
/*9202*/ IXMLElement*This,
/*9203*/ BSTR*p);
/*9205*/ HRESULT(__stdcall*put_tagName)(
/*9206*/ IXMLElement*This,
/*9207*/ BSTR p);
/*9209*/ HRESULT(__stdcall*get_parent)(
/*9210*/ IXMLElement*This,
/*9211*/ IXMLElement**ppParent);
/*9213*/ HRESULT(__stdcall*setAttribute)(
/*9214*/ IXMLElement*This,
/*9215*/ BSTR strPropertyName,
/*9216*/ VARIANT PropertyValue);
/*9218*/ HRESULT(__stdcall*getAttribute)(
/*9219*/ IXMLElement*This,
/*9220*/ BSTR strPropertyName,
/*9221*/ VARIANT*PropertyValue);
/*9223*/ HRESULT(__stdcall*removeAttribute)(
/*9224*/ IXMLElement*This,
/*9225*/ BSTR strPropertyName);
/*9227*/ HRESULT(__stdcall*get_children)(
/*9228*/ IXMLElement*This,
/*9229*/ IXMLElementCollection**pp);
/*9231*/ HRESULT(__stdcall*get_type)(
/*9232*/ IXMLElement*This,
/*9233*/ long*plType);
/*9235*/ HRESULT(__stdcall*get_text)(
/*9236*/ IXMLElement*This,
/*9237*/ BSTR*p);
/*9239*/ HRESULT(__stdcall*put_text)(
/*9240*/ IXMLElement*This,
/*9241*/ BSTR p);
/*9243*/ HRESULT(__stdcall*addChild)(
/*9244*/ IXMLElement*This,
/*9245*/ IXMLElement*pChildElem,
/*9246*/ long lIndex,
/*9247*/ long lReserved);
/*9249*/ HRESULT(__stdcall*removeChild)(
/*9250*/ IXMLElement*This,
/*9251*/ IXMLElement*pChildElem);
/*9253*/ 
/*9254*/ }IXMLElementVtbl;
/*9256*/ struct IXMLElement
/*9257*/ {
/*9258*/ struct IXMLElementVtbl*lpVtbl;
/*9259*/ };
/*9343*/ extern const IID IID_IXMLElement2;
/*9398*/ typedef struct IXMLElement2Vtbl
/*9399*/ {
/*9400*/ 
/*9402*/ HRESULT(__stdcall*QueryInterface)(
/*9403*/ IXMLElement2*This,
/*9404*/ const IID*const riid,
/*9406*/ void**ppvObject);
/*9408*/ ULONG(__stdcall*AddRef)(
/*9409*/ IXMLElement2*This);
/*9411*/ ULONG(__stdcall*Release)(
/*9412*/ IXMLElement2*This);
/*9414*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*9415*/ IXMLElement2*This,
/*9416*/ UINT*pctinfo);
/*9418*/ HRESULT(__stdcall*GetTypeInfo)(
/*9419*/ IXMLElement2*This,
/*9420*/ UINT iTInfo,
/*9421*/ LCID lcid,
/*9422*/ ITypeInfo**ppTInfo);
/*9424*/ HRESULT(__stdcall*GetIDsOfNames)(
/*9425*/ IXMLElement2*This,
/*9426*/ const IID*const riid,
/*9427*/ LPOLESTR*rgszNames,
/*9428*/ UINT cNames,
/*9429*/ LCID lcid,
/*9430*/ DISPID*rgDispId);
/*9432*/ HRESULT(__stdcall*Invoke)(
/*9433*/ IXMLElement2*This,
/*9434*/ DISPID dispIdMember,
/*9435*/ const IID*const riid,
/*9436*/ LCID lcid,
/*9437*/ WORD wFlags,
/*9438*/ DISPPARAMS*pDispParams,
/*9439*/ VARIANT*pVarResult,
/*9440*/ EXCEPINFO*pExcepInfo,
/*9441*/ UINT*puArgErr);
/*9443*/ HRESULT(__stdcall*get_tagName)(
/*9444*/ IXMLElement2*This,
/*9445*/ BSTR*p);
/*9447*/ HRESULT(__stdcall*put_tagName)(
/*9448*/ IXMLElement2*This,
/*9449*/ BSTR p);
/*9451*/ HRESULT(__stdcall*get_parent)(
/*9452*/ IXMLElement2*This,
/*9453*/ IXMLElement2**ppParent);
/*9455*/ HRESULT(__stdcall*setAttribute)(
/*9456*/ IXMLElement2*This,
/*9457*/ BSTR strPropertyName,
/*9458*/ VARIANT PropertyValue);
/*9460*/ HRESULT(__stdcall*getAttribute)(
/*9461*/ IXMLElement2*This,
/*9462*/ BSTR strPropertyName,
/*9463*/ VARIANT*PropertyValue);
/*9465*/ HRESULT(__stdcall*removeAttribute)(
/*9466*/ IXMLElement2*This,
/*9467*/ BSTR strPropertyName);
/*9469*/ HRESULT(__stdcall*get_children)(
/*9470*/ IXMLElement2*This,
/*9471*/ IXMLElementCollection**pp);
/*9473*/ HRESULT(__stdcall*get_type)(
/*9474*/ IXMLElement2*This,
/*9475*/ long*plType);
/*9477*/ HRESULT(__stdcall*get_text)(
/*9478*/ IXMLElement2*This,
/*9479*/ BSTR*p);
/*9481*/ HRESULT(__stdcall*put_text)(
/*9482*/ IXMLElement2*This,
/*9483*/ BSTR p);
/*9485*/ HRESULT(__stdcall*addChild)(
/*9486*/ IXMLElement2*This,
/*9487*/ IXMLElement2*pChildElem,
/*9488*/ long lIndex,
/*9489*/ long lReserved);
/*9491*/ HRESULT(__stdcall*removeChild)(
/*9492*/ IXMLElement2*This,
/*9493*/ IXMLElement2*pChildElem);
/*9495*/ HRESULT(__stdcall*get_attributes)(
/*9496*/ IXMLElement2*This,
/*9497*/ IXMLElementCollection**pp);
/*9499*/ 
/*9500*/ }IXMLElement2Vtbl;
/*9502*/ struct IXMLElement2
/*9503*/ {
/*9504*/ struct IXMLElement2Vtbl*lpVtbl;
/*9505*/ };
/*9592*/ extern const IID IID_IXMLAttribute;
/*9610*/ typedef struct IXMLAttributeVtbl
/*9611*/ {
/*9612*/ 
/*9614*/ HRESULT(__stdcall*QueryInterface)(
/*9615*/ IXMLAttribute*This,
/*9616*/ const IID*const riid,
/*9618*/ void**ppvObject);
/*9620*/ ULONG(__stdcall*AddRef)(
/*9621*/ IXMLAttribute*This);
/*9623*/ ULONG(__stdcall*Release)(
/*9624*/ IXMLAttribute*This);
/*9626*/ HRESULT(__stdcall*GetTypeInfoCount)(
/*9627*/ IXMLAttribute*This,
/*9628*/ UINT*pctinfo);
/*9630*/ HRESULT(__stdcall*GetTypeInfo)(
/*9631*/ IXMLAttribute*This,
/*9632*/ UINT iTInfo,
/*9633*/ LCID lcid,
/*9634*/ ITypeInfo**ppTInfo);
/*9636*/ HRESULT(__stdcall*GetIDsOfNames)(
/*9637*/ IXMLAttribute*This,
/*9638*/ const IID*const riid,
/*9639*/ LPOLESTR*rgszNames,
/*9640*/ UINT cNames,
/*9641*/ LCID lcid,
/*9642*/ DISPID*rgDispId);
/*9644*/ HRESULT(__stdcall*Invoke)(
/*9645*/ IXMLAttribute*This,
/*9646*/ DISPID dispIdMember,
/*9647*/ const IID*const riid,
/*9648*/ LCID lcid,
/*9649*/ WORD wFlags,
/*9650*/ DISPPARAMS*pDispParams,
/*9651*/ VARIANT*pVarResult,
/*9652*/ EXCEPINFO*pExcepInfo,
/*9653*/ UINT*puArgErr);
/*9655*/ HRESULT(__stdcall*get_name)(
/*9656*/ IXMLAttribute*This,
/*9657*/ BSTR*n);
/*9659*/ HRESULT(__stdcall*get_value)(
/*9660*/ IXMLAttribute*This,
/*9661*/ BSTR*v);
/*9663*/ 
/*9664*/ }IXMLAttributeVtbl;
/*9666*/ struct IXMLAttribute
/*9667*/ {
/*9668*/ struct IXMLAttributeVtbl*lpVtbl;
/*9669*/ };
/*9723*/ extern const IID IID_IXMLError;
/*9738*/ typedef struct IXMLErrorVtbl
/*9739*/ {
/*9740*/ 
/*9742*/ HRESULT(__stdcall*QueryInterface)(
/*9743*/ IXMLError*This,
/*9744*/ const IID*const riid,
/*9746*/ void**ppvObject);
/*9748*/ ULONG(__stdcall*AddRef)(
/*9749*/ IXMLError*This);
/*9751*/ ULONG(__stdcall*Release)(
/*9752*/ IXMLError*This);
/*9754*/ HRESULT(__stdcall*GetErrorInfo)(
/*9755*/ IXMLError*This,
/*9756*/ XML_ERROR*pErrorReturn);
/*9758*/ 
/*9759*/ }IXMLErrorVtbl;
/*9761*/ struct IXMLError
/*9762*/ {
/*9763*/ struct IXMLErrorVtbl*lpVtbl;
/*9764*/ };
/*9795*/ extern const CLSID CLSID_XMLDocument;
/*"urlmon.h"369*/ extern const IID CLSID_SBS_StdURLMoniker;
/*370*/ extern const IID CLSID_SBS_HttpProtocol;
/*371*/ extern const IID CLSID_SBS_FtpProtocol;
/*372*/ extern const IID CLSID_SBS_GopherProtocol;
/*373*/ extern const IID CLSID_SBS_HttpSProtocol;
/*374*/ extern const IID CLSID_SBS_FileProtocol;
/*375*/ extern const IID CLSID_SBS_MkProtocol;
/*376*/ extern const IID CLSID_SBS_UrlMkBindCtx;
/*377*/ extern const IID CLSID_SBS_SoftDistExt;
/*378*/ extern const IID CLSID_SBS_StdEncodingFilterFac;
/*379*/ extern const IID CLSID_SBS_DeCompMimeFilter;
/*380*/ extern const IID CLSID_SBS_CdlProtocol;
/*381*/ extern const IID CLSID_SBS_ClassInstallFilter;
/*382*/ extern const IID CLSID_SBS_InternetSecurityManager;
/*383*/ extern const IID CLSID_SBS_InternetZoneManager;
/*391*/ extern const IID IID_IAsyncMoniker;
/*392*/ extern const IID CLSID_StdURLMoniker;
/*393*/ extern const IID CLSID_HttpProtocol;
/*394*/ extern const IID CLSID_FtpProtocol;
/*395*/ extern const IID CLSID_GopherProtocol;
/*396*/ extern const IID CLSID_HttpSProtocol;
/*397*/ extern const IID CLSID_FileProtocol;
/*398*/ extern const IID CLSID_MkProtocol;
/*399*/ extern const IID CLSID_StdURLProtocol;
/*400*/ extern const IID CLSID_UrlMkBindCtx;
/*401*/ extern const IID CLSID_StdEncodingFilterFac;
/*402*/ extern const IID CLSID_DeCompMimeFilter;
/*403*/ extern const IID CLSID_CdlProtocol;
/*404*/ extern const IID CLSID_ClassInstallFilter;
/*405*/ extern const IID IID_IAsyncBindCtx;
/*414*/ extern HRESULT __stdcall CreateURLMoniker(LPMONIKER pMkCtx,LPCWSTR szURL,LPMONIKER typ*ppmk);
/*415*/ extern HRESULT __stdcall CreateURLMonikerEx(LPMONIKER pMkCtx,LPCWSTR szURL,LPMONIKER typ*ppmk,DWORD dwFlags);
/*416*/ extern HRESULT __stdcall GetClassURL(LPCWSTR szURL,CLSID*pClsID);
/*417*/ extern HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved,IBindStatusCallback*pBSCb,
/*418*/ IEnumFORMATETC*pEFetc,IBindCtx**ppBC);
/*420*/ extern HRESULT __stdcall CreateURLMonikerEx2(LPMONIKER pMkCtx,IUri*pUri,LPMONIKER typ*ppmk,DWORD dwFlags);
/*422*/ extern HRESULT __stdcall CreateAsyncBindCtxEx(IBindCtx*pbc,DWORD dwOptions,IBindStatusCallback*pBSCb,IEnumFORMATETC*pEnum,
/*423*/ IBindCtx**ppBC,DWORD reserved);
/*424*/ extern HRESULT __stdcall MkParseDisplayNameEx(IBindCtx*pbc,LPCWSTR szDisplayName,ULONG*pchEaten,
/*425*/ LPMONIKER*ppmk);
/*426*/ extern HRESULT __stdcall RegisterBindStatusCallback(LPBC pBC,IBindStatusCallback*pBSCb,
/*427*/ IBindStatusCallback**ppBSCBPrev,DWORD dwReserved);
/*428*/ extern HRESULT __stdcall RevokeBindStatusCallback(LPBC pBC,IBindStatusCallback*pBSCb);
/*429*/ extern HRESULT __stdcall GetClassFileOrMime(LPBC pBC,LPCWSTR szFilename,LPVOID pBuffer,DWORD cbSize,LPCWSTR szMime,DWORD dwReserved,CLSID*pclsid);
/*430*/ extern HRESULT __stdcall IsValidURL(LPBC pBC,LPCWSTR szURL,DWORD dwReserved);
/*431*/ extern HRESULT __stdcall CoGetClassObjectFromURL(const IID*const rCLASSID,
/*432*/ LPCWSTR szCODE,DWORD dwFileVersionMS,
/*433*/ DWORD dwFileVersionLS,LPCWSTR szTYPE,
/*434*/ LPBINDCTX pBindCtx,DWORD dwClsContext,
/*435*/ LPVOID pvReserved,const IID*const riid,LPVOID*ppv);
/*436*/ extern HRESULT __stdcall FaultInIEFeature(HWND hWnd,
/*437*/ typ typ typ typ typ uCLSSPEC*pClassSpec,
/*438*/ typ typ typ typ typ typ typ QUERYCONTEXT*pQuery,DWORD dwFlags);
/*439*/ extern HRESULT __stdcall GetComponentIDFromCLSSPEC(typ typ typ typ typ uCLSSPEC*pClassspec,
/*440*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPSTR*ppszComponentID);
/*450*/ extern HRESULT __stdcall IsAsyncMoniker(IMoniker*pmk);
/*451*/ extern HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl,typ typ typ typ typ IBindCtx*pbc,typ typ typ typ typ typ typ typ typ IBinding**ppBdg);
/*453*/ extern HRESULT __stdcall RegisterMediaTypes(UINT ctypes,const LPCSTR*rgszTypes,CLIPFORMAT*rgcfTypes);
/*454*/ extern HRESULT __stdcall FindMediaType(LPCSTR rgszTypes,typ typ typ typ typ CLIPFORMAT*rgcfTypes);
/*455*/ extern HRESULT __stdcall CreateFormatEnumerator(UINT cfmtetc,FORMATETC*rgfmtetc,IEnumFORMATETC**ppenumfmtetc);
/*456*/ extern HRESULT __stdcall RegisterFormatEnumerator(LPBC pBC,IEnumFORMATETC*pEFetc,DWORD reserved);
/*457*/ extern HRESULT __stdcall RevokeFormatEnumerator(LPBC pBC,IEnumFORMATETC*pEFetc);
/*458*/ extern HRESULT __stdcall RegisterMediaTypeClass(LPBC pBC,UINT ctypes,const LPCSTR*rgszTypes,CLSID*rgclsID,DWORD reserved);
/*459*/ extern HRESULT __stdcall FindMediaTypeClass(LPBC pBC,LPCSTR szType,CLSID*pclsID,DWORD reserved);
/*460*/ extern HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD dwReserved);
/*461*/ extern HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD*pdwBufferLength,DWORD dwReserved);
/*462*/ extern HRESULT __stdcall FindMimeFromData(
/*463*/ typ typ typ typ typ typ typ LPBC pBC,
/*464*/ typ typ typ typ typ typ typ LPCWSTR pwzUrl,
/*465*/ typ typ typ typ typ typ typ typ typ LPVOID pBuffer,
/*466*/ DWORD cbSize,
/*467*/ typ typ typ typ typ typ typ LPCWSTR pwzMimeProposed,
/*468*/ DWORD dwMimeFlags,
/*469*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPWSTR*ppwzMimeOut,
/*470*/ typ typ DWORD dwReserved);
/*477*/ extern HRESULT __stdcall ObtainUserAgentString(
/*478*/ DWORD dwOption,
/*479*/ typ typ typ typ typ typ typ LPSTR pszUAOut,
/*480*/ typ typ typ typ typ DWORD*cbSize);
/*481*/ extern HRESULT __stdcall CompareSecurityIds(BYTE*pbSecurityId1,DWORD dwLen1,BYTE*pbSecurityId2,DWORD dwLen2,DWORD dwReserved);
/*482*/ extern HRESULT __stdcall CompatFlagsFromClsid(CLSID*pclsid,LPDWORD pdwCompatFlags,LPDWORD pdwMiscStatusFlags);
/*588*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
/*589*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;
/*597*/ typedef IPersistMoniker*LPPERSISTMONIKER;
/*600*/ extern const IID IID_IPersistMoniker;
/*635*/ typedef struct IPersistMonikerVtbl
/*636*/ {
/*637*/ 
/*639*/ HRESULT(__stdcall*QueryInterface)(
/*640*/ IPersistMoniker*This,
/*641*/ const IID*const riid,
/*643*/ void**ppvObject);
/*645*/ ULONG(__stdcall*AddRef)(
/*646*/ IPersistMoniker*This);
/*648*/ ULONG(__stdcall*Release)(
/*649*/ IPersistMoniker*This);
/*651*/ HRESULT(__stdcall*GetClassID)(
/*652*/ IPersistMoniker*This,
/*653*/ CLSID*pClassID);
/*655*/ HRESULT(__stdcall*IsDirty)(
/*656*/ IPersistMoniker*This);
/*658*/ HRESULT(__stdcall*Load)(
/*659*/ IPersistMoniker*This,
/*660*/ BOOL fFullyAvailable,
/*661*/ IMoniker*pimkName,
/*662*/ LPBC pibc,
/*663*/ DWORD grfMode);
/*665*/ HRESULT(__stdcall*Save)(
/*666*/ IPersistMoniker*This,
/*667*/ IMoniker*pimkName,
/*668*/ LPBC pbc,
/*669*/ BOOL fRemember);
/*671*/ HRESULT(__stdcall*SaveCompleted)(
/*672*/ IPersistMoniker*This,
/*673*/ IMoniker*pimkName,
/*674*/ LPBC pibc);
/*676*/ HRESULT(__stdcall*GetCurMoniker)(
/*677*/ IPersistMoniker*This,
/*678*/ IMoniker**ppimkName);
/*680*/ 
/*681*/ }IPersistMonikerVtbl;
/*683*/ struct IPersistMoniker
/*684*/ {
/*685*/ struct IPersistMonikerVtbl*lpVtbl;
/*686*/ };
/*740*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
/*741*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;
/*749*/ typedef IMonikerProp*LPMONIKERPROP;
/*751*/ typedef
/*752*/ enum __MIDL_IMonikerProp_0001
/*753*/ {MIMETYPEPROP=0,
/*754*/ USE_SRC_URL=0x1,
/*755*/ CLASSIDPROP=0x2,
/*756*/ TRUSTEDDOWNLOADPROP=0x3,
/*757*/ POPUPLEVELPROP=0x4
/*758*/ }MONIKERPROPERTY;
/*761*/ extern const IID IID_IMonikerProp;
/*777*/ typedef struct IMonikerPropVtbl
/*778*/ {
/*779*/ 
/*781*/ HRESULT(__stdcall*QueryInterface)(
/*782*/ IMonikerProp*This,
/*783*/ const IID*const riid,
/*785*/ void**ppvObject);
/*787*/ ULONG(__stdcall*AddRef)(
/*788*/ IMonikerProp*This);
/*790*/ ULONG(__stdcall*Release)(
/*791*/ IMonikerProp*This);
/*793*/ HRESULT(__stdcall*PutProperty)(
/*794*/ IMonikerProp*This,
/*795*/ MONIKERPROPERTY mkp,
/*796*/ LPCWSTR val);
/*798*/ 
/*799*/ }IMonikerPropVtbl;
/*801*/ struct IMonikerProp
/*802*/ {
/*803*/ struct IMonikerPropVtbl*lpVtbl;
/*804*/ };
/*843*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
/*844*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;
/*852*/ typedef IBindProtocol*LPBINDPROTOCOL;
/*855*/ extern const IID IID_IBindProtocol;
/*872*/ typedef struct IBindProtocolVtbl
/*873*/ {
/*874*/ 
/*876*/ HRESULT(__stdcall*QueryInterface)(
/*877*/ IBindProtocol*This,
/*878*/ const IID*const riid,
/*880*/ void**ppvObject);
/*882*/ ULONG(__stdcall*AddRef)(
/*883*/ IBindProtocol*This);
/*885*/ ULONG(__stdcall*Release)(
/*886*/ IBindProtocol*This);
/*888*/ HRESULT(__stdcall*CreateBinding)(
/*889*/ IBindProtocol*This,
/*890*/ LPCWSTR szUrl,
/*891*/ IBindCtx*pbc,
/*892*/ IBinding**ppb);
/*894*/ 
/*895*/ }IBindProtocolVtbl;
/*897*/ struct IBindProtocol
/*898*/ {
/*899*/ struct IBindProtocolVtbl*lpVtbl;
/*900*/ };
/*939*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
/*940*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;
/*948*/ typedef IBinding*LPBINDING;
/*951*/ extern const IID IID_IBinding;
/*981*/ typedef struct IBindingVtbl
/*982*/ {
/*983*/ 
/*985*/ HRESULT(__stdcall*QueryInterface)(
/*986*/ IBinding*This,
/*987*/ const IID*const riid,
/*989*/ void**ppvObject);
/*991*/ ULONG(__stdcall*AddRef)(
/*992*/ IBinding*This);
/*994*/ ULONG(__stdcall*Release)(
/*995*/ IBinding*This);
/*997*/ HRESULT(__stdcall*Abort)(
/*998*/ IBinding*This);
/*1000*/ HRESULT(__stdcall*Suspend)(
/*1001*/ IBinding*This);
/*1003*/ HRESULT(__stdcall*Resume)(
/*1004*/ IBinding*This);
/*1006*/ HRESULT(__stdcall*SetPriority)(
/*1007*/ IBinding*This,
/*1008*/ LONG nPriority);
/*1010*/ HRESULT(__stdcall*GetPriority)(
/*1011*/ IBinding*This,
/*1012*/ LONG*pnPriority);
/*1014*/ HRESULT(__stdcall*GetBindResult)(
/*1015*/ IBinding*This,
/*1016*/ CLSID*pclsidProtocol,
/*1017*/ DWORD*pdwResult,
/*1018*/ LPOLESTR*pszResult,
/*1019*/ DWORD*pdwReserved);
/*1021*/ 
/*1022*/ }IBindingVtbl;
/*1024*/ struct IBinding
/*1025*/ {
/*1026*/ struct IBindingVtbl*lpVtbl;
/*1027*/ };
/*1069*/ HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy(
/*1070*/ IBinding*This,
/*1071*/ CLSID*pclsidProtocol,
/*1072*/ DWORD*pdwResult,
/*1073*/ LPOLESTR*pszResult,
/*1074*/ DWORD dwReserved);
/*1077*/ void IBinding_RemoteGetBindResult_Stub(
/*1078*/ IRpcStubBuffer*This,
/*1079*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*1080*/ PRPC_MESSAGE _pRpcMessage,
/*1081*/ DWORD*_pdwStubPhase);
/*1096*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
/*1097*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;
/*1105*/ typedef IBindStatusCallback*LPBINDSTATUSCALLBACK;
/*1107*/ typedef
/*1108*/ enum __MIDL_IBindStatusCallback_0001
/*1109*/ {BINDVERB_GET=0,
/*1110*/ BINDVERB_POST=0x1,
/*1111*/ BINDVERB_PUT=0x2,
/*1112*/ BINDVERB_CUSTOM=0x3
/*1113*/ }BINDVERB;
/*1115*/ typedef
/*1116*/ enum __MIDL_IBindStatusCallback_0002
/*1117*/ {BINDINFOF_URLENCODESTGMEDDATA=0x1,
/*1118*/ BINDINFOF_URLENCODEDEXTRAINFO=0x2
/*1119*/ }BINDINFOF;
/*1121*/ typedef
/*1122*/ enum __MIDL_IBindStatusCallback_0003
/*1123*/ {BINDF_ASYNCHRONOUS=0x1,
/*1124*/ BINDF_ASYNCSTORAGE=0x2,
/*1125*/ BINDF_NOPROGRESSIVERENDERING=0x4,
/*1126*/ BINDF_OFFLINEOPERATION=0x8,
/*1127*/ BINDF_GETNEWESTVERSION=0x10,
/*1128*/ BINDF_NOWRITECACHE=0x20,
/*1129*/ BINDF_NEEDFILE=0x40,
/*1130*/ BINDF_PULLDATA=0x80,
/*1131*/ BINDF_IGNORESECURITYPROBLEM=0x100,
/*1132*/ BINDF_RESYNCHRONIZE=0x200,
/*1133*/ BINDF_HYPERLINK=0x400,
/*1134*/ BINDF_NO_UI=0x800,
/*1135*/ BINDF_SILENTOPERATION=0x1000,
/*1136*/ BINDF_PRAGMA_NO_CACHE=0x2000,
/*1137*/ BINDF_GETCLASSOBJECT=0x4000,
/*1138*/ BINDF_RESERVED_1=0x8000,
/*1139*/ BINDF_FREE_THREADED=0x10000,
/*1140*/ BINDF_DIRECT_READ=0x20000,
/*1141*/ BINDF_FORMS_SUBMIT=0x40000,
/*1142*/ BINDF_GETFROMCACHE_IF_NET_FAIL=0x80000,
/*1143*/ BINDF_FROMURLMON=0x100000,
/*1144*/ BINDF_FWD_BACK=0x200000,
/*1145*/ BINDF_PREFERDEFAULTHANDLER=0x400000,
/*1146*/ BINDF_ENFORCERESTRICTED=0x800000
/*1147*/ }BINDF;
/*1149*/ typedef
/*1150*/ enum __MIDL_IBindStatusCallback_0004
/*1151*/ {URL_ENCODING_NONE=0,
/*1152*/ URL_ENCODING_ENABLE_UTF8=0x10000000,
/*1153*/ URL_ENCODING_DISABLE_UTF8=0x20000000
/*1154*/ }URL_ENCODING;
/*1156*/ typedef struct _tagBINDINFO
/*1157*/ {
/*1158*/ ULONG cbSize;
/*1159*/ LPWSTR szExtraInfo;
/*1160*/ STGMEDIUM stgmedData;
/*1161*/ DWORD grfBindInfoF;
/*1162*/ DWORD dwBindVerb;
/*1163*/ LPWSTR szCustomVerb;
/*1164*/ DWORD cbstgmedData;
/*1165*/ DWORD dwOptions;
/*1166*/ DWORD dwOptionsFlags;
/*1167*/ DWORD dwCodePage;
/*1168*/ SECURITY_ATTRIBUTES securityAttributes;
/*1169*/ IID iid;
/*1170*/ IUnknown*pUnk;
/*1171*/ DWORD dwReserved;
/*1172*/ }BINDINFO;
/*1174*/ typedef struct _REMSECURITY_ATTRIBUTES
/*1175*/ {
/*1176*/ DWORD nLength;
/*1177*/ DWORD lpSecurityDescriptor;
/*1178*/ BOOL bInheritHandle;
/*1179*/ }REMSECURITY_ATTRIBUTES;
/*1181*/ typedef struct _REMSECURITY_ATTRIBUTES*PREMSECURITY_ATTRIBUTES;
/*1183*/ typedef struct _REMSECURITY_ATTRIBUTES*LPREMSECURITY_ATTRIBUTES;
/*1185*/ typedef struct _tagRemBINDINFO
/*1186*/ {
/*1187*/ ULONG cbSize;
/*1188*/ LPWSTR szExtraInfo;
/*1189*/ DWORD grfBindInfoF;
/*1190*/ DWORD dwBindVerb;
/*1191*/ LPWSTR szCustomVerb;
/*1192*/ DWORD cbstgmedData;
/*1193*/ DWORD dwOptions;
/*1194*/ DWORD dwOptionsFlags;
/*1195*/ DWORD dwCodePage;
/*1196*/ REMSECURITY_ATTRIBUTES securityAttributes;
/*1197*/ IID iid;
/*1198*/ IUnknown*pUnk;
/*1199*/ DWORD dwReserved;
/*1200*/ }RemBINDINFO;
/*1202*/ typedef struct tagRemFORMATETC
/*1203*/ {
/*1204*/ DWORD cfFormat;
/*1205*/ DWORD ptd;
/*1206*/ DWORD dwAspect;
/*1207*/ LONG lindex;
/*1208*/ DWORD tymed;
/*1209*/ }RemFORMATETC;
/*1211*/ typedef struct tagRemFORMATETC*LPREMFORMATETC;
/*1213*/ typedef
/*1214*/ enum __MIDL_IBindStatusCallback_0005
/*1215*/ {BINDINFO_OPTIONS_WININETFLAG=0x10000,
/*1216*/ BINDINFO_OPTIONS_ENABLE_UTF8=0x20000,
/*1217*/ BINDINFO_OPTIONS_DISABLE_UTF8=0x40000,
/*1218*/ BINDINFO_OPTIONS_USE_IE_ENCODING=0x80000,
/*1219*/ BINDINFO_OPTIONS_BINDTOOBJECT=0x100000,
/*1220*/ BINDINFO_OPTIONS_SECURITYOPTOUT=0x200000,
/*1221*/ BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN=0x400000,
/*1222*/ BINDINFO_OPTIONS_USEBINDSTRINGCREDS=0x800000,
/*1223*/ BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS=0x1000000,
/*1224*/ BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE=0x2000000,
/*1225*/ BINDINFO_WPC_DOWNLOADBLOCKED=0x8000000,
/*1226*/ BINDINFO_WPC_LOGGING_ENABLED=0x10000000,
/*1227*/ BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS=0x40000000,
/*1228*/ BINDINFO_OPTIONS_SHDOCVW_NAVIGATE=(int)0x80000000
/*1229*/ }BINDINFO_OPTIONS;
/*1231*/ typedef
/*1232*/ enum __MIDL_IBindStatusCallback_0006
/*1233*/ {BSCF_FIRSTDATANOTIFICATION=0x1,
/*1234*/ BSCF_INTERMEDIATEDATANOTIFICATION=0x2,
/*1235*/ BSCF_LASTDATANOTIFICATION=0x4,
/*1236*/ BSCF_DATAFULLYAVAILABLE=0x8,
/*1237*/ BSCF_AVAILABLEDATASIZEUNKNOWN=0x10
/*1238*/ }BSCF;
/*1240*/ typedef
/*1241*/ enum tagBINDSTATUS
/*1242*/ {BINDSTATUS_FINDINGRESOURCE=1,
/*1243*/ BINDSTATUS_CONNECTING=(BINDSTATUS_FINDINGRESOURCE+1),
/*1244*/ BINDSTATUS_REDIRECTING=(BINDSTATUS_CONNECTING+1),
/*1245*/ BINDSTATUS_BEGINDOWNLOADDATA=(BINDSTATUS_REDIRECTING+1),
/*1246*/ BINDSTATUS_DOWNLOADINGDATA=(BINDSTATUS_BEGINDOWNLOADDATA+1),
/*1247*/ BINDSTATUS_ENDDOWNLOADDATA=(BINDSTATUS_DOWNLOADINGDATA+1),
/*1248*/ BINDSTATUS_BEGINDOWNLOADCOMPONENTS=(BINDSTATUS_ENDDOWNLOADDATA+1),
/*1249*/ BINDSTATUS_INSTALLINGCOMPONENTS=(BINDSTATUS_BEGINDOWNLOADCOMPONENTS+1),
/*1250*/ BINDSTATUS_ENDDOWNLOADCOMPONENTS=(BINDSTATUS_INSTALLINGCOMPONENTS+1),
/*1251*/ BINDSTATUS_USINGCACHEDCOPY=(BINDSTATUS_ENDDOWNLOADCOMPONENTS+1),
/*1252*/ BINDSTATUS_SENDINGREQUEST=(BINDSTATUS_USINGCACHEDCOPY+1),
/*1253*/ BINDSTATUS_CLASSIDAVAILABLE=(BINDSTATUS_SENDINGREQUEST+1),
/*1254*/ BINDSTATUS_MIMETYPEAVAILABLE=(BINDSTATUS_CLASSIDAVAILABLE+1),
/*1255*/ BINDSTATUS_CACHEFILENAMEAVAILABLE=(BINDSTATUS_MIMETYPEAVAILABLE+1),
/*1256*/ BINDSTATUS_BEGINSYNCOPERATION=(BINDSTATUS_CACHEFILENAMEAVAILABLE+1),
/*1257*/ BINDSTATUS_ENDSYNCOPERATION=(BINDSTATUS_BEGINSYNCOPERATION+1),
/*1258*/ BINDSTATUS_BEGINUPLOADDATA=(BINDSTATUS_ENDSYNCOPERATION+1),
/*1259*/ BINDSTATUS_UPLOADINGDATA=(BINDSTATUS_BEGINUPLOADDATA+1),
/*1260*/ BINDSTATUS_ENDUPLOADDATA=(BINDSTATUS_UPLOADINGDATA+1),
/*1261*/ BINDSTATUS_PROTOCOLCLASSID=(BINDSTATUS_ENDUPLOADDATA+1),
/*1262*/ BINDSTATUS_ENCODING=(BINDSTATUS_PROTOCOLCLASSID+1),
/*1263*/ BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE=(BINDSTATUS_ENCODING+1),
/*1264*/ BINDSTATUS_CLASSINSTALLLOCATION=(BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE+1),
/*1265*/ BINDSTATUS_DECODING=(BINDSTATUS_CLASSINSTALLLOCATION+1),
/*1266*/ BINDSTATUS_LOADINGMIMEHANDLER=(BINDSTATUS_DECODING+1),
/*1267*/ BINDSTATUS_CONTENTDISPOSITIONATTACH=(BINDSTATUS_LOADINGMIMEHANDLER+1),
/*1268*/ BINDSTATUS_FILTERREPORTMIMETYPE=(BINDSTATUS_CONTENTDISPOSITIONATTACH+1),
/*1269*/ BINDSTATUS_CLSIDCANINSTANTIATE=(BINDSTATUS_FILTERREPORTMIMETYPE+1),
/*1270*/ BINDSTATUS_IUNKNOWNAVAILABLE=(BINDSTATUS_CLSIDCANINSTANTIATE+1),
/*1271*/ BINDSTATUS_DIRECTBIND=(BINDSTATUS_IUNKNOWNAVAILABLE+1),
/*1272*/ BINDSTATUS_RAWMIMETYPE=(BINDSTATUS_DIRECTBIND+1),
/*1273*/ BINDSTATUS_PROXYDETECTING=(BINDSTATUS_RAWMIMETYPE+1),
/*1274*/ BINDSTATUS_ACCEPTRANGES=(BINDSTATUS_PROXYDETECTING+1),
/*1275*/ BINDSTATUS_COOKIE_SENT=(BINDSTATUS_ACCEPTRANGES+1),
/*1276*/ BINDSTATUS_COMPACT_POLICY_RECEIVED=(BINDSTATUS_COOKIE_SENT+1),
/*1277*/ BINDSTATUS_COOKIE_SUPPRESSED=(BINDSTATUS_COMPACT_POLICY_RECEIVED+1),
/*1278*/ BINDSTATUS_COOKIE_STATE_UNKNOWN=(BINDSTATUS_COOKIE_SUPPRESSED+1),
/*1279*/ BINDSTATUS_COOKIE_STATE_ACCEPT=(BINDSTATUS_COOKIE_STATE_UNKNOWN+1),
/*1280*/ BINDSTATUS_COOKIE_STATE_REJECT=(BINDSTATUS_COOKIE_STATE_ACCEPT+1),
/*1281*/ BINDSTATUS_COOKIE_STATE_PROMPT=(BINDSTATUS_COOKIE_STATE_REJECT+1),
/*1282*/ BINDSTATUS_COOKIE_STATE_LEASH=(BINDSTATUS_COOKIE_STATE_PROMPT+1),
/*1283*/ BINDSTATUS_COOKIE_STATE_DOWNGRADE=(BINDSTATUS_COOKIE_STATE_LEASH+1),
/*1284*/ BINDSTATUS_POLICY_HREF=(BINDSTATUS_COOKIE_STATE_DOWNGRADE+1),
/*1285*/ BINDSTATUS_P3P_HEADER=(BINDSTATUS_POLICY_HREF+1),
/*1286*/ BINDSTATUS_SESSION_COOKIE_RECEIVED=(BINDSTATUS_P3P_HEADER+1),
/*1287*/ BINDSTATUS_PERSISTENT_COOKIE_RECEIVED=(BINDSTATUS_SESSION_COOKIE_RECEIVED+1),
/*1288*/ BINDSTATUS_SESSION_COOKIES_ALLOWED=(BINDSTATUS_PERSISTENT_COOKIE_RECEIVED+1),
/*1289*/ BINDSTATUS_CACHECONTROL=(BINDSTATUS_SESSION_COOKIES_ALLOWED+1),
/*1290*/ BINDSTATUS_CONTENTDISPOSITIONFILENAME=(BINDSTATUS_CACHECONTROL+1),
/*1291*/ BINDSTATUS_MIMETEXTPLAINMISMATCH=(BINDSTATUS_CONTENTDISPOSITIONFILENAME+1),
/*1292*/ BINDSTATUS_PUBLISHERAVAILABLE=(BINDSTATUS_MIMETEXTPLAINMISMATCH+1),
/*1293*/ BINDSTATUS_DISPLAYNAMEAVAILABLE=(BINDSTATUS_PUBLISHERAVAILABLE+1),
/*1294*/ BINDSTATUS_SSLUX_NAVBLOCKED=(BINDSTATUS_DISPLAYNAMEAVAILABLE+1)
/*1295*/ }BINDSTATUS;
/*1298*/ extern const IID IID_IBindStatusCallback;
/*1344*/ typedef struct IBindStatusCallbackVtbl
/*1345*/ {
/*1346*/ 
/*1348*/ HRESULT(__stdcall*QueryInterface)(
/*1349*/ IBindStatusCallback*This,
/*1350*/ const IID*const riid,
/*1352*/ void**ppvObject);
/*1354*/ ULONG(__stdcall*AddRef)(
/*1355*/ IBindStatusCallback*This);
/*1357*/ ULONG(__stdcall*Release)(
/*1358*/ IBindStatusCallback*This);
/*1360*/ HRESULT(__stdcall*OnStartBinding)(
/*1361*/ IBindStatusCallback*This,
/*1362*/ DWORD dwReserved,
/*1363*/ IBinding*pib);
/*1365*/ HRESULT(__stdcall*GetPriority)(
/*1366*/ IBindStatusCallback*This,
/*1367*/ LONG*pnPriority);
/*1369*/ HRESULT(__stdcall*OnLowResource)(
/*1370*/ IBindStatusCallback*This,
/*1371*/ DWORD reserved);
/*1373*/ HRESULT(__stdcall*OnProgress)(
/*1374*/ IBindStatusCallback*This,
/*1375*/ ULONG ulProgress,
/*1376*/ ULONG ulProgressMax,
/*1377*/ ULONG ulStatusCode,
/*1378*/ LPCWSTR szStatusText);
/*1380*/ HRESULT(__stdcall*OnStopBinding)(
/*1381*/ IBindStatusCallback*This,
/*1382*/ HRESULT hresult,
/*1383*/ LPCWSTR szError);
/*1385*/ HRESULT(__stdcall*GetBindInfo)(
/*1386*/ IBindStatusCallback*This,
/*1387*/ DWORD*grfBINDF,
/*1388*/ BINDINFO*pbindinfo);
/*1390*/ HRESULT(__stdcall*OnDataAvailable)(
/*1391*/ IBindStatusCallback*This,
/*1392*/ DWORD grfBSCF,
/*1393*/ DWORD dwSize,
/*1394*/ FORMATETC*pformatetc,
/*1395*/ STGMEDIUM*pstgmed);
/*1397*/ HRESULT(__stdcall*OnObjectAvailable)(
/*1398*/ IBindStatusCallback*This,
/*1399*/ const IID*const riid,
/*1400*/ IUnknown*punk);
/*1402*/ 
/*1403*/ }IBindStatusCallbackVtbl;
/*1405*/ struct IBindStatusCallback
/*1406*/ {
/*1407*/ struct IBindStatusCallbackVtbl*lpVtbl;
/*1408*/ };
/*1456*/ HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy(
/*1457*/ IBindStatusCallback*This,
/*1458*/ DWORD*grfBINDF,
/*1459*/ RemBINDINFO*pbindinfo,
/*1460*/ RemSTGMEDIUM*pstgmed);
/*1463*/ void IBindStatusCallback_RemoteGetBindInfo_Stub(
/*1464*/ IRpcStubBuffer*This,
/*1465*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*1466*/ PRPC_MESSAGE _pRpcMessage,
/*1467*/ DWORD*_pdwStubPhase);
/*1470*/ HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy(
/*1471*/ IBindStatusCallback*This,
/*1472*/ DWORD grfBSCF,
/*1473*/ DWORD dwSize,
/*1474*/ RemFORMATETC*pformatetc,
/*1475*/ RemSTGMEDIUM*pstgmed);
/*1478*/ void IBindStatusCallback_RemoteOnDataAvailable_Stub(
/*1479*/ IRpcStubBuffer*This,
/*1480*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*1481*/ PRPC_MESSAGE _pRpcMessage,
/*1482*/ DWORD*_pdwStubPhase);
/*1497*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
/*1498*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;
/*1506*/ typedef IAuthenticate*LPAUTHENTICATION;
/*1509*/ extern const IID IID_IAuthenticate;
/*1526*/ typedef struct IAuthenticateVtbl
/*1527*/ {
/*1528*/ 
/*1530*/ HRESULT(__stdcall*QueryInterface)(
/*1531*/ IAuthenticate*This,
/*1532*/ const IID*const riid,
/*1534*/ void**ppvObject);
/*1536*/ ULONG(__stdcall*AddRef)(
/*1537*/ IAuthenticate*This);
/*1539*/ ULONG(__stdcall*Release)(
/*1540*/ IAuthenticate*This);
/*1542*/ HRESULT(__stdcall*Authenticate)(
/*1543*/ IAuthenticate*This,
/*1544*/ HWND*phwnd,
/*1545*/ LPWSTR*pszUsername,
/*1546*/ LPWSTR*pszPassword);
/*1548*/ 
/*1549*/ }IAuthenticateVtbl;
/*1551*/ struct IAuthenticate
/*1552*/ {
/*1553*/ struct IAuthenticateVtbl*lpVtbl;
/*1554*/ };
/*1593*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
/*1594*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;
/*1602*/ typedef IHttpNegotiate*LPHTTPNEGOTIATE;
/*1605*/ extern const IID IID_IHttpNegotiate;
/*1629*/ typedef struct IHttpNegotiateVtbl
/*1630*/ {
/*1631*/ 
/*1633*/ HRESULT(__stdcall*QueryInterface)(
/*1634*/ IHttpNegotiate*This,
/*1635*/ const IID*const riid,
/*1637*/ void**ppvObject);
/*1639*/ ULONG(__stdcall*AddRef)(
/*1640*/ IHttpNegotiate*This);
/*1642*/ ULONG(__stdcall*Release)(
/*1643*/ IHttpNegotiate*This);
/*1645*/ HRESULT(__stdcall*BeginningTransaction)(
/*1646*/ IHttpNegotiate*This,
/*1647*/ LPCWSTR szURL,
/*1648*/ LPCWSTR szHeaders,
/*1649*/ DWORD dwReserved,
/*1650*/ LPWSTR*pszAdditionalHeaders);
/*1652*/ HRESULT(__stdcall*OnResponse)(
/*1653*/ IHttpNegotiate*This,
/*1654*/ DWORD dwResponseCode,
/*1655*/ LPCWSTR szResponseHeaders,
/*1656*/ LPCWSTR szRequestHeaders,
/*1657*/ LPWSTR*pszAdditionalRequestHeaders);
/*1659*/ 
/*1660*/ }IHttpNegotiateVtbl;
/*1662*/ struct IHttpNegotiate
/*1663*/ {
/*1664*/ struct IHttpNegotiateVtbl*lpVtbl;
/*1665*/ };
/*1707*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
/*1708*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;
/*1716*/ typedef IHttpNegotiate2*LPHTTPNEGOTIATE2;
/*1719*/ extern const IID IID_IHttpNegotiate2;
/*1736*/ typedef struct IHttpNegotiate2Vtbl
/*1737*/ {
/*1738*/ 
/*1740*/ HRESULT(__stdcall*QueryInterface)(
/*1741*/ IHttpNegotiate2*This,
/*1742*/ const IID*const riid,
/*1744*/ void**ppvObject);
/*1746*/ ULONG(__stdcall*AddRef)(
/*1747*/ IHttpNegotiate2*This);
/*1749*/ ULONG(__stdcall*Release)(
/*1750*/ IHttpNegotiate2*This);
/*1752*/ HRESULT(__stdcall*BeginningTransaction)(
/*1753*/ IHttpNegotiate2*This,
/*1754*/ LPCWSTR szURL,
/*1755*/ LPCWSTR szHeaders,
/*1756*/ DWORD dwReserved,
/*1757*/ LPWSTR*pszAdditionalHeaders);
/*1759*/ HRESULT(__stdcall*OnResponse)(
/*1760*/ IHttpNegotiate2*This,
/*1761*/ DWORD dwResponseCode,
/*1762*/ LPCWSTR szResponseHeaders,
/*1763*/ LPCWSTR szRequestHeaders,
/*1764*/ LPWSTR*pszAdditionalRequestHeaders);
/*1766*/ HRESULT(__stdcall*GetRootSecurityId)(
/*1767*/ IHttpNegotiate2*This,
/*1768*/ BYTE*pbSecurityId,
/*1769*/ DWORD*pcbSecurityId,
/*1770*/ DWORD_PTR dwReserved);
/*1772*/ 
/*1773*/ }IHttpNegotiate2Vtbl;
/*1775*/ struct IHttpNegotiate2
/*1776*/ {
/*1777*/ struct IHttpNegotiate2Vtbl*lpVtbl;
/*1778*/ };
/*1824*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
/*1825*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;
/*1833*/ typedef IWinInetFileStream*LPWININETFILESTREAM;
/*1836*/ extern const IID IID_IWinInetFileStream;
/*1855*/ typedef struct IWinInetFileStreamVtbl
/*1856*/ {
/*1857*/ 
/*1859*/ HRESULT(__stdcall*QueryInterface)(
/*1860*/ IWinInetFileStream*This,
/*1861*/ const IID*const riid,
/*1863*/ void**ppvObject);
/*1865*/ ULONG(__stdcall*AddRef)(
/*1866*/ IWinInetFileStream*This);
/*1868*/ ULONG(__stdcall*Release)(
/*1869*/ IWinInetFileStream*This);
/*1871*/ HRESULT(__stdcall*SetHandleForUnlock)(
/*1872*/ IWinInetFileStream*This,
/*1873*/ DWORD_PTR hWinInetLockHandle,
/*1874*/ DWORD_PTR dwReserved);
/*1876*/ HRESULT(__stdcall*SetDeleteFile)(
/*1877*/ IWinInetFileStream*This,
/*1878*/ DWORD_PTR dwReserved);
/*1880*/ 
/*1881*/ }IWinInetFileStreamVtbl;
/*1883*/ struct IWinInetFileStream
/*1884*/ {
/*1885*/ struct IWinInetFileStreamVtbl*lpVtbl;
/*1886*/ };
/*1928*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
/*1929*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;
/*1937*/ typedef IWindowForBindingUI*LPWINDOWFORBINDINGUI;
/*1940*/ extern const IID IID_IWindowForBindingUI;
/*1956*/ typedef struct IWindowForBindingUIVtbl
/*1957*/ {
/*1958*/ 
/*1960*/ HRESULT(__stdcall*QueryInterface)(
/*1961*/ IWindowForBindingUI*This,
/*1962*/ const IID*const riid,
/*1964*/ void**ppvObject);
/*1966*/ ULONG(__stdcall*AddRef)(
/*1967*/ IWindowForBindingUI*This);
/*1969*/ ULONG(__stdcall*Release)(
/*1970*/ IWindowForBindingUI*This);
/*1972*/ HRESULT(__stdcall*GetWindow)(
/*1973*/ IWindowForBindingUI*This,
/*1974*/ const GUID*const rguidReason,
/*1975*/ HWND*phwnd);
/*1977*/ 
/*1978*/ }IWindowForBindingUIVtbl;
/*1980*/ struct IWindowForBindingUI
/*1981*/ {
/*1982*/ struct IWindowForBindingUIVtbl*lpVtbl;
/*1983*/ };
/*2022*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
/*2023*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;
/*2031*/ typedef ICodeInstall*LPCODEINSTALL;
/*2033*/ typedef
/*2034*/ enum __MIDL_ICodeInstall_0001
/*2035*/ {CIP_DISK_FULL=0,
/*2036*/ CIP_ACCESS_DENIED=(CIP_DISK_FULL+1),
/*2037*/ CIP_NEWER_VERSION_EXISTS=(CIP_ACCESS_DENIED+1),
/*2038*/ CIP_OLDER_VERSION_EXISTS=(CIP_NEWER_VERSION_EXISTS+1),
/*2039*/ CIP_NAME_CONFLICT=(CIP_OLDER_VERSION_EXISTS+1),
/*2040*/ CIP_TRUST_VERIFICATION_COMPONENT_MISSING=(CIP_NAME_CONFLICT+1),
/*2041*/ CIP_EXE_SELF_REGISTERATION_TIMEOUT=(CIP_TRUST_VERIFICATION_COMPONENT_MISSING+1),
/*2042*/ CIP_UNSAFE_TO_ABORT=(CIP_EXE_SELF_REGISTERATION_TIMEOUT+1),
/*2043*/ CIP_NEED_REBOOT=(CIP_UNSAFE_TO_ABORT+1),
/*2044*/ CIP_NEED_REBOOT_UI_PERMISSION=(CIP_NEED_REBOOT+1)
/*2045*/ }CIP_STATUS;
/*2048*/ extern const IID IID_ICodeInstall;
/*2066*/ typedef struct ICodeInstallVtbl
/*2067*/ {
/*2068*/ 
/*2070*/ HRESULT(__stdcall*QueryInterface)(
/*2071*/ ICodeInstall*This,
/*2072*/ const IID*const riid,
/*2074*/ void**ppvObject);
/*2076*/ ULONG(__stdcall*AddRef)(
/*2077*/ ICodeInstall*This);
/*2079*/ ULONG(__stdcall*Release)(
/*2080*/ ICodeInstall*This);
/*2082*/ HRESULT(__stdcall*GetWindow)(
/*2083*/ ICodeInstall*This,
/*2084*/ const GUID*const rguidReason,
/*2085*/ HWND*phwnd);
/*2087*/ HRESULT(__stdcall*OnCodeInstallProblem)(
/*2088*/ ICodeInstall*This,
/*2089*/ ULONG ulStatusCode,
/*2090*/ LPCWSTR szDestination,
/*2091*/ LPCWSTR szSource,
/*2092*/ DWORD dwReserved);
/*2094*/ 
/*2095*/ }ICodeInstallVtbl;
/*2097*/ struct ICodeInstall
/*2098*/ {
/*2099*/ struct ICodeInstallVtbl*lpVtbl;
/*2100*/ };
/*2144*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
/*2145*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;
/*2153*/ typedef
/*2154*/ enum __MIDL_IUri_0001
/*2155*/ {Uri_PROPERTY_ABSOLUTE_URI=0,
/*2156*/ Uri_PROPERTY_STRING_START=Uri_PROPERTY_ABSOLUTE_URI,
/*2157*/ Uri_PROPERTY_AUTHORITY=(Uri_PROPERTY_STRING_START+1),
/*2158*/ Uri_PROPERTY_DISPLAY_URI=(Uri_PROPERTY_AUTHORITY+1),
/*2159*/ Uri_PROPERTY_DOMAIN=(Uri_PROPERTY_DISPLAY_URI+1),
/*2160*/ Uri_PROPERTY_EXTENSION=(Uri_PROPERTY_DOMAIN+1),
/*2161*/ Uri_PROPERTY_FRAGMENT=(Uri_PROPERTY_EXTENSION+1),
/*2162*/ Uri_PROPERTY_HOST=(Uri_PROPERTY_FRAGMENT+1),
/*2163*/ Uri_PROPERTY_PASSWORD=(Uri_PROPERTY_HOST+1),
/*2164*/ Uri_PROPERTY_PATH=(Uri_PROPERTY_PASSWORD+1),
/*2165*/ Uri_PROPERTY_PATH_AND_QUERY=(Uri_PROPERTY_PATH+1),
/*2166*/ Uri_PROPERTY_QUERY=(Uri_PROPERTY_PATH_AND_QUERY+1),
/*2167*/ Uri_PROPERTY_RAW_URI=(Uri_PROPERTY_QUERY+1),
/*2168*/ Uri_PROPERTY_SCHEME_NAME=(Uri_PROPERTY_RAW_URI+1),
/*2169*/ Uri_PROPERTY_USER_INFO=(Uri_PROPERTY_SCHEME_NAME+1),
/*2170*/ Uri_PROPERTY_USER_NAME=(Uri_PROPERTY_USER_INFO+1),
/*2171*/ Uri_PROPERTY_STRING_LAST=Uri_PROPERTY_USER_NAME,
/*2172*/ Uri_PROPERTY_HOST_TYPE=(Uri_PROPERTY_STRING_LAST+1),
/*2173*/ Uri_PROPERTY_DWORD_START=Uri_PROPERTY_HOST_TYPE,
/*2174*/ Uri_PROPERTY_PORT=(Uri_PROPERTY_DWORD_START+1),
/*2175*/ Uri_PROPERTY_SCHEME=(Uri_PROPERTY_PORT+1),
/*2176*/ Uri_PROPERTY_ZONE=(Uri_PROPERTY_SCHEME+1),
/*2177*/ Uri_PROPERTY_DWORD_LAST=Uri_PROPERTY_ZONE
/*2178*/ }Uri_PROPERTY;
/*2180*/ typedef
/*2181*/ enum __MIDL_IUri_0002
/*2182*/ {Uri_HOST_UNKNOWN=0,
/*2183*/ Uri_HOST_DNS=(Uri_HOST_UNKNOWN+1),
/*2184*/ Uri_HOST_IPV4=(Uri_HOST_DNS+1),
/*2185*/ Uri_HOST_IPV6=(Uri_HOST_IPV4+1),
/*2186*/ Uri_HOST_IDN=(Uri_HOST_IPV6+1)
/*2187*/ }Uri_HOST_TYPE;
/*2190*/ extern const IID IID_IUri;
/*2285*/ typedef struct IUriVtbl
/*2286*/ {
/*2287*/ 
/*2289*/ HRESULT(__stdcall*QueryInterface)(
/*2290*/ IUri*This,
/*2291*/ const IID*const riid,
/*2293*/ void**ppvObject);
/*2295*/ ULONG(__stdcall*AddRef)(
/*2296*/ IUri*This);
/*2298*/ ULONG(__stdcall*Release)(
/*2299*/ IUri*This);
/*2301*/ HRESULT(__stdcall*GetPropertyBSTR)(
/*2302*/ IUri*This,
/*2303*/ Uri_PROPERTY uriProp,
/*2304*/ BSTR*pbstrProperty,
/*2305*/ DWORD dwFlags);
/*2307*/ HRESULT(__stdcall*GetPropertyLength)(
/*2308*/ IUri*This,
/*2309*/ Uri_PROPERTY uriProp,
/*2310*/ DWORD*pcchProperty,
/*2311*/ DWORD dwFlags);
/*2313*/ HRESULT(__stdcall*GetPropertyDWORD)(
/*2314*/ IUri*This,
/*2315*/ Uri_PROPERTY uriProp,
/*2316*/ DWORD*pdwProperty,
/*2317*/ DWORD dwFlags);
/*2319*/ HRESULT(__stdcall*HasProperty)(
/*2320*/ IUri*This,
/*2321*/ Uri_PROPERTY uriProp,
/*2322*/ BOOL*pfHasProperty);
/*2324*/ HRESULT(__stdcall*GetAbsoluteUri)(
/*2325*/ IUri*This,
/*2326*/ BSTR*pbstrAbsoluteUri);
/*2328*/ HRESULT(__stdcall*GetAuthority)(
/*2329*/ IUri*This,
/*2330*/ BSTR*pbstrAuthority);
/*2332*/ HRESULT(__stdcall*GetDisplayUri)(
/*2333*/ IUri*This,
/*2334*/ BSTR*pbstrDisplayString);
/*2336*/ HRESULT(__stdcall*GetDomain)(
/*2337*/ IUri*This,
/*2338*/ BSTR*pbstrDomain);
/*2340*/ HRESULT(__stdcall*GetExtension)(
/*2341*/ IUri*This,
/*2342*/ BSTR*pbstrExtension);
/*2344*/ HRESULT(__stdcall*GetFragment)(
/*2345*/ IUri*This,
/*2346*/ BSTR*pbstrFragment);
/*2348*/ HRESULT(__stdcall*GetHost)(
/*2349*/ IUri*This,
/*2350*/ BSTR*pbstrHost);
/*2352*/ HRESULT(__stdcall*GetPassword)(
/*2353*/ IUri*This,
/*2354*/ BSTR*pbstrPassword);
/*2356*/ HRESULT(__stdcall*GetPath)(
/*2357*/ IUri*This,
/*2358*/ BSTR*pbstrPath);
/*2360*/ HRESULT(__stdcall*GetPathAndQuery)(
/*2361*/ IUri*This,
/*2362*/ BSTR*pbstrPathAndQuery);
/*2364*/ HRESULT(__stdcall*GetQuery)(
/*2365*/ IUri*This,
/*2366*/ BSTR*pbstrQuery);
/*2368*/ HRESULT(__stdcall*GetRawUri)(
/*2369*/ IUri*This,
/*2370*/ BSTR*pbstrRawUri);
/*2372*/ HRESULT(__stdcall*GetSchemeName)(
/*2373*/ IUri*This,
/*2374*/ BSTR*pbstrSchemeName);
/*2376*/ HRESULT(__stdcall*GetUserInfo)(
/*2377*/ IUri*This,
/*2378*/ BSTR*pbstrUserInfo);
/*2380*/ HRESULT(__stdcall*GetUserNameA)(
/*2381*/ IUri*This,
/*2382*/ BSTR*pbstrUserName);
/*2384*/ HRESULT(__stdcall*GetHostType)(
/*2385*/ IUri*This,
/*2386*/ DWORD*pdwHostType);
/*2388*/ HRESULT(__stdcall*GetPort)(
/*2389*/ IUri*This,
/*2390*/ DWORD*pdwPort);
/*2392*/ HRESULT(__stdcall*GetScheme)(
/*2393*/ IUri*This,
/*2394*/ DWORD*pdwScheme);
/*2396*/ HRESULT(__stdcall*GetZone)(
/*2397*/ IUri*This,
/*2398*/ DWORD*pdwZone);
/*2400*/ HRESULT(__stdcall*GetProperties)(
/*2401*/ IUri*This,
/*2402*/ LPDWORD pdwFlags);
/*2404*/ HRESULT(__stdcall*IsEqual)(
/*2405*/ IUri*This,
/*2406*/ IUri*pUri,
/*2407*/ BOOL*pfEqual);
/*2409*/ 
/*2410*/ }IUriVtbl;
/*2412*/ struct IUri
/*2413*/ {
/*2414*/ struct IUriVtbl*lpVtbl;
/*2415*/ };
/*2521*/ extern HRESULT __stdcall CreateUri(typ typ typ typ typ LPCWSTR pwzURI,
/*2522*/ typ typ typ typ typ DWORD dwFlags,
/*2523*/ typ typ typ typ typ typ typ DWORD_PTR dwReserved,
/*2524*/ typ typ typ typ typ IUri**ppURI);
/*2526*/ extern HRESULT __stdcall CreateUriWithFragment(
/*2527*/ typ typ typ typ typ LPCWSTR pwzURI,
/*2528*/ typ typ typ typ typ typ typ LPCWSTR pwzFragment,
/*2529*/ typ typ typ typ typ DWORD dwFlags,
/*2530*/ typ typ typ typ typ typ typ DWORD_PTR dwReserved,
/*2531*/ typ typ typ typ typ IUri**ppURI);
/*2533*/ extern HRESULT __stdcall CreateUriFromMultiByteString(
/*2534*/ typ typ typ typ typ LPCSTR pszANSIInputUri,
/*2535*/ DWORD dwEncodingFlags,
/*2536*/ DWORD dwCodePage,
/*2537*/ DWORD dwCreateFlags,
/*2538*/ typ typ DWORD_PTR dwReserved,
/*2539*/ typ typ typ typ typ IUri**ppUri);
/*2604*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
/*2605*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;
/*2614*/ extern const IID IID_IUriContainer;
/*2629*/ typedef struct IUriContainerVtbl
/*2630*/ {
/*2631*/ 
/*2633*/ HRESULT(__stdcall*QueryInterface)(
/*2634*/ IUriContainer*This,
/*2635*/ const IID*const riid,
/*2637*/ void**ppvObject);
/*2639*/ ULONG(__stdcall*AddRef)(
/*2640*/ IUriContainer*This);
/*2642*/ ULONG(__stdcall*Release)(
/*2643*/ IUriContainer*This);
/*2645*/ HRESULT(__stdcall*GetIUri)(
/*2646*/ IUriContainer*This,
/*2647*/ IUri**ppIUri);
/*2649*/ 
/*2650*/ }IUriContainerVtbl;
/*2652*/ struct IUriContainer
/*2653*/ {
/*2654*/ struct IUriContainerVtbl*lpVtbl;
/*2655*/ };
/*2694*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
/*2695*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;
/*2704*/ extern const IID IID_IUriBuilder;
/*2832*/ typedef struct IUriBuilderVtbl
/*2833*/ {
/*2834*/ 
/*2836*/ HRESULT(__stdcall*QueryInterface)(
/*2837*/ IUriBuilder*This,
/*2838*/ const IID*const riid,
/*2840*/ void**ppvObject);
/*2842*/ ULONG(__stdcall*AddRef)(
/*2843*/ IUriBuilder*This);
/*2845*/ ULONG(__stdcall*Release)(
/*2846*/ IUriBuilder*This);
/*2848*/ HRESULT(__stdcall*CreateUriSimple)(
/*2849*/ IUriBuilder*This,
/*2850*/ DWORD dwAllowEncodingPropertyMask,
/*2851*/ DWORD_PTR dwReserved,
/*2853*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUri**ppIUri);
/*2855*/ HRESULT(__stdcall*CreateUri)(
/*2856*/ IUriBuilder*This,
/*2857*/ DWORD dwCreateFlags,
/*2858*/ DWORD dwAllowEncodingPropertyMask,
/*2859*/ DWORD_PTR dwReserved,
/*2861*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUri**ppIUri);
/*2863*/ HRESULT(__stdcall*CreateUriWithFlags)(
/*2864*/ IUriBuilder*This,
/*2865*/ DWORD dwCreateFlags,
/*2866*/ DWORD dwUriBuilderFlags,
/*2867*/ DWORD dwAllowEncodingPropertyMask,
/*2868*/ DWORD_PTR dwReserved,
/*2870*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUri**ppIUri);
/*2872*/ HRESULT(__stdcall*GetIUri)(
/*2873*/ IUriBuilder*This,
/*2875*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUri**ppIUri);
/*2877*/ HRESULT(__stdcall*SetIUri)(
/*2878*/ IUriBuilder*This,
/*2880*/ typ typ typ typ typ typ typ IUri*pIUri);
/*2882*/ HRESULT(__stdcall*GetFragment)(
/*2883*/ IUriBuilder*This,
/*2885*/ typ typ typ typ typ DWORD*pcchFragment,
/*2887*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppwzFragment);
/*2889*/ HRESULT(__stdcall*GetHost)(
/*2890*/ IUriBuilder*This,
/*2892*/ typ typ typ typ typ DWORD*pcchHost,
/*2894*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppwzHost);
/*2896*/ HRESULT(__stdcall*GetPassword)(
/*2897*/ IUriBuilder*This,
/*2899*/ typ typ typ typ typ DWORD*pcchPassword,
/*2901*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppwzPassword);
/*2903*/ HRESULT(__stdcall*GetPath)(
/*2904*/ IUriBuilder*This,
/*2906*/ typ typ typ typ typ DWORD*pcchPath,
/*2908*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppwzPath);
/*2910*/ HRESULT(__stdcall*GetPort)(
/*2911*/ IUriBuilder*This,
/*2913*/ typ typ typ typ typ BOOL*pfHasPort,
/*2915*/ typ typ typ typ typ DWORD*pdwPort);
/*2917*/ HRESULT(__stdcall*GetQuery)(
/*2918*/ IUriBuilder*This,
/*2920*/ typ typ typ typ typ DWORD*pcchQuery,
/*2922*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppwzQuery);
/*2924*/ HRESULT(__stdcall*GetSchemeName)(
/*2925*/ IUriBuilder*This,
/*2927*/ typ typ typ typ typ DWORD*pcchSchemeName,
/*2929*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppwzSchemeName);
/*2931*/ HRESULT(__stdcall*GetUserNameA)(
/*2932*/ IUriBuilder*This,
/*2934*/ typ typ typ typ typ DWORD*pcchUserName,
/*2936*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPCWSTR*ppwzUserName);
/*2938*/ HRESULT(__stdcall*SetFragment)(
/*2939*/ IUriBuilder*This,
/*2941*/ typ typ typ typ typ typ typ LPCWSTR pwzNewValue);
/*2943*/ HRESULT(__stdcall*SetHost)(
/*2944*/ IUriBuilder*This,
/*2946*/ typ typ typ typ typ LPCWSTR pwzNewValue);
/*2948*/ HRESULT(__stdcall*SetPassword)(
/*2949*/ IUriBuilder*This,
/*2951*/ typ typ typ typ typ typ typ LPCWSTR pwzNewValue);
/*2953*/ HRESULT(__stdcall*SetPath)(
/*2954*/ IUriBuilder*This,
/*2956*/ typ typ typ typ typ typ typ LPCWSTR pwzNewValue);
/*2958*/ HRESULT(__stdcall*SetPortA)(
/*2959*/ IUriBuilder*This,
/*2960*/ BOOL fHasPort,
/*2961*/ DWORD dwNewValue);
/*2963*/ HRESULT(__stdcall*SetQuery)(
/*2964*/ IUriBuilder*This,
/*2966*/ typ typ typ typ typ typ typ LPCWSTR pwzNewValue);
/*2968*/ HRESULT(__stdcall*SetSchemeName)(
/*2969*/ IUriBuilder*This,
/*2971*/ typ typ typ typ typ LPCWSTR pwzNewValue);
/*2973*/ HRESULT(__stdcall*SetUserName)(
/*2974*/ IUriBuilder*This,
/*2976*/ typ typ typ typ typ typ typ LPCWSTR pwzNewValue);
/*2978*/ HRESULT(__stdcall*RemoveProperties)(
/*2979*/ IUriBuilder*This,
/*2980*/ DWORD dwPropertyMask);
/*2982*/ HRESULT(__stdcall*HasBeenModified)(
/*2983*/ IUriBuilder*This,
/*2985*/ typ typ typ typ typ BOOL*pfModified);
/*2987*/ 
/*2988*/ }IUriBuilderVtbl;
/*2990*/ struct IUriBuilder
/*2991*/ {
/*2992*/ struct IUriBuilderVtbl*lpVtbl;
/*2993*/ };
/*3097*/ extern const IID IID_IUriBuilderFactory;
/*3125*/ typedef struct IUriBuilderFactoryVtbl
/*3126*/ {
/*3127*/ 
/*3129*/ HRESULT(__stdcall*QueryInterface)(
/*3130*/ IUriBuilderFactory*This,
/*3131*/ const IID*const riid,
/*3133*/ void**ppvObject);
/*3135*/ ULONG(__stdcall*AddRef)(
/*3136*/ IUriBuilderFactory*This);
/*3138*/ ULONG(__stdcall*Release)(
/*3139*/ IUriBuilderFactory*This);
/*3141*/ HRESULT(__stdcall*CreateIUriBuilder)(
/*3142*/ IUriBuilderFactory*This,
/*3144*/ typ typ typ typ typ DWORD dwFlags,
/*3146*/ typ typ typ typ typ DWORD_PTR dwReserved,
/*3148*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUriBuilder**ppIUriBuilder);
/*3150*/ HRESULT(__stdcall*CreateInitializedIUriBuilder)(
/*3151*/ IUriBuilderFactory*This,
/*3153*/ typ typ typ typ typ DWORD dwFlags,
/*3155*/ typ typ typ typ typ DWORD_PTR dwReserved,
/*3157*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUriBuilder**ppIUriBuilder);
/*3159*/ 
/*3160*/ }IUriBuilderFactoryVtbl;
/*3162*/ struct IUriBuilderFactory
/*3163*/ {
/*3164*/ struct IUriBuilderFactoryVtbl*lpVtbl;
/*3165*/ };
/*3202*/ extern HRESULT __stdcall CreateIUriBuilder(
/*3203*/ typ typ typ typ typ typ typ IUri*pIUri,
/*3204*/ typ typ typ typ typ DWORD dwFlags,
/*3205*/ typ typ typ typ typ DWORD_PTR dwReserved,
/*3206*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUriBuilder**ppIUriBuilder
/*3207*/ );
/*3214*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec;
/*3215*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec;
/*3223*/ typedef IWinInetInfo*LPWININETINFO;
/*3226*/ extern const IID IID_IWinInetInfo;
/*3243*/ typedef struct IWinInetInfoVtbl
/*3244*/ {
/*3245*/ 
/*3247*/ HRESULT(__stdcall*QueryInterface)(
/*3248*/ IWinInetInfo*This,
/*3249*/ const IID*const riid,
/*3251*/ void**ppvObject);
/*3253*/ ULONG(__stdcall*AddRef)(
/*3254*/ IWinInetInfo*This);
/*3256*/ ULONG(__stdcall*Release)(
/*3257*/ IWinInetInfo*This);
/*3259*/ HRESULT(__stdcall*QueryOption)(
/*3260*/ IWinInetInfo*This,
/*3261*/ DWORD dwOption,
/*3262*/ LPVOID pBuffer,
/*3263*/ DWORD*pcbBuf);
/*3265*/ 
/*3266*/ }IWinInetInfoVtbl;
/*3268*/ struct IWinInetInfo
/*3269*/ {
/*3270*/ struct IWinInetInfoVtbl*lpVtbl;
/*3271*/ };
/*3298*/ HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy(
/*3299*/ IWinInetInfo*This,
/*3300*/ DWORD dwOption,
/*3301*/ BYTE*pBuffer,
/*3302*/ DWORD*pcbBuf);
/*3305*/ void IWinInetInfo_RemoteQueryOption_Stub(
/*3306*/ IRpcStubBuffer*This,
/*3307*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3308*/ PRPC_MESSAGE _pRpcMessage,
/*3309*/ DWORD*_pdwStubPhase);
/*3325*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0016_v0_0_c_ifspec;
/*3326*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0016_v0_0_s_ifspec;
/*3334*/ typedef IHttpSecurity*LPHTTPSECURITY;
/*3337*/ extern const IID IID_IHttpSecurity;
/*3352*/ typedef struct IHttpSecurityVtbl
/*3353*/ {
/*3354*/ 
/*3356*/ HRESULT(__stdcall*QueryInterface)(
/*3357*/ IHttpSecurity*This,
/*3358*/ const IID*const riid,
/*3360*/ void**ppvObject);
/*3362*/ ULONG(__stdcall*AddRef)(
/*3363*/ IHttpSecurity*This);
/*3365*/ ULONG(__stdcall*Release)(
/*3366*/ IHttpSecurity*This);
/*3368*/ HRESULT(__stdcall*GetWindow)(
/*3369*/ IHttpSecurity*This,
/*3370*/ const GUID*const rguidReason,
/*3371*/ HWND*phwnd);
/*3373*/ HRESULT(__stdcall*OnSecurityProblem)(
/*3374*/ IHttpSecurity*This,
/*3375*/ DWORD dwProblem);
/*3377*/ 
/*3378*/ }IHttpSecurityVtbl;
/*3380*/ struct IHttpSecurity
/*3381*/ {
/*3382*/ struct IHttpSecurityVtbl*lpVtbl;
/*3383*/ };
/*3426*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0017_v0_0_c_ifspec;
/*3427*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0017_v0_0_s_ifspec;
/*3435*/ typedef IWinInetHttpInfo*LPWININETHTTPINFO;
/*3438*/ extern const IID IID_IWinInetHttpInfo;
/*3457*/ typedef struct IWinInetHttpInfoVtbl
/*3458*/ {
/*3459*/ 
/*3461*/ HRESULT(__stdcall*QueryInterface)(
/*3462*/ IWinInetHttpInfo*This,
/*3463*/ const IID*const riid,
/*3465*/ void**ppvObject);
/*3467*/ ULONG(__stdcall*AddRef)(
/*3468*/ IWinInetHttpInfo*This);
/*3470*/ ULONG(__stdcall*Release)(
/*3471*/ IWinInetHttpInfo*This);
/*3473*/ HRESULT(__stdcall*QueryOption)(
/*3474*/ IWinInetHttpInfo*This,
/*3475*/ DWORD dwOption,
/*3476*/ LPVOID pBuffer,
/*3477*/ DWORD*pcbBuf);
/*3479*/ HRESULT(__stdcall*QueryInfo)(
/*3480*/ IWinInetHttpInfo*This,
/*3481*/ DWORD dwOption,
/*3482*/ LPVOID pBuffer,
/*3483*/ DWORD*pcbBuf,
/*3484*/ DWORD*pdwFlags,
/*3485*/ DWORD*pdwReserved);
/*3487*/ 
/*3488*/ }IWinInetHttpInfoVtbl;
/*3490*/ struct IWinInetHttpInfo
/*3491*/ {
/*3492*/ struct IWinInetHttpInfoVtbl*lpVtbl;
/*3493*/ };
/*3524*/ HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy(
/*3525*/ IWinInetHttpInfo*This,
/*3526*/ DWORD dwOption,
/*3527*/ BYTE*pBuffer,
/*3528*/ DWORD*pcbBuf,
/*3529*/ DWORD*pdwFlags,
/*3530*/ DWORD*pdwReserved);
/*3533*/ void IWinInetHttpInfo_RemoteQueryInfo_Stub(
/*3534*/ IRpcStubBuffer*This,
/*3535*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3536*/ PRPC_MESSAGE _pRpcMessage,
/*3537*/ DWORD*_pdwStubPhase);
/*3553*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
/*3554*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;
/*3562*/ typedef IWinInetCacheHints*LPWININETCACHEHINTS;
/*3565*/ extern const IID IID_IWinInetCacheHints;
/*3584*/ typedef struct IWinInetCacheHintsVtbl
/*3585*/ {
/*3586*/ 
/*3588*/ HRESULT(__stdcall*QueryInterface)(
/*3589*/ IWinInetCacheHints*This,
/*3590*/ const IID*const riid,
/*3592*/ void**ppvObject);
/*3594*/ ULONG(__stdcall*AddRef)(
/*3595*/ IWinInetCacheHints*This);
/*3597*/ ULONG(__stdcall*Release)(
/*3598*/ IWinInetCacheHints*This);
/*3600*/ HRESULT(__stdcall*SetCacheExtension)(
/*3601*/ IWinInetCacheHints*This,
/*3602*/ LPCWSTR pwzExt,
/*3603*/ LPVOID pszCacheFile,
/*3604*/ DWORD*pcbCacheFile,
/*3605*/ DWORD*pdwWinInetError,
/*3606*/ DWORD*pdwReserved);
/*3608*/ 
/*3609*/ }IWinInetCacheHintsVtbl;
/*3611*/ struct IWinInetCacheHints
/*3612*/ {
/*3613*/ struct IWinInetCacheHintsVtbl*lpVtbl;
/*3614*/ };
/*3655*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
/*3656*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;
/*3664*/ typedef IWinInetCacheHints2*LPWININETCACHEHINTS2;
/*3667*/ extern const IID IID_IWinInetCacheHints2;
/*3686*/ typedef struct IWinInetCacheHints2Vtbl
/*3687*/ {
/*3688*/ 
/*3690*/ HRESULT(__stdcall*QueryInterface)(
/*3691*/ IWinInetCacheHints2*This,
/*3692*/ const IID*const riid,
/*3694*/ void**ppvObject);
/*3696*/ ULONG(__stdcall*AddRef)(
/*3697*/ IWinInetCacheHints2*This);
/*3699*/ ULONG(__stdcall*Release)(
/*3700*/ IWinInetCacheHints2*This);
/*3702*/ HRESULT(__stdcall*SetCacheExtension)(
/*3703*/ IWinInetCacheHints2*This,
/*3704*/ LPCWSTR pwzExt,
/*3705*/ LPVOID pszCacheFile,
/*3706*/ DWORD*pcbCacheFile,
/*3707*/ DWORD*pdwWinInetError,
/*3708*/ DWORD*pdwReserved);
/*3710*/ HRESULT(__stdcall*SetCacheExtension2)(
/*3711*/ IWinInetCacheHints2*This,
/*3712*/ LPCWSTR pwzExt,
/*3713*/ WCHAR*pwzCacheFile,
/*3714*/ DWORD*pcchCacheFile,
/*3715*/ DWORD*pdwWinInetError,
/*3716*/ DWORD*pdwReserved);
/*3718*/ 
/*3719*/ }IWinInetCacheHints2Vtbl;
/*3721*/ struct IWinInetCacheHints2
/*3722*/ {
/*3723*/ struct IWinInetCacheHints2Vtbl*lpVtbl;
/*3724*/ };
/*3768*/ extern const GUID SID_BindHost;
/*3771*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
/*3772*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;
/*3780*/ typedef IBindHost*LPBINDHOST;
/*3783*/ extern const IID IID_IBindHost;
/*3815*/ typedef struct IBindHostVtbl
/*3816*/ {
/*3817*/ 
/*3819*/ HRESULT(__stdcall*QueryInterface)(
/*3820*/ IBindHost*This,
/*3821*/ const IID*const riid,
/*3823*/ void**ppvObject);
/*3825*/ ULONG(__stdcall*AddRef)(
/*3826*/ IBindHost*This);
/*3828*/ ULONG(__stdcall*Release)(
/*3829*/ IBindHost*This);
/*3831*/ HRESULT(__stdcall*CreateMoniker)(
/*3832*/ IBindHost*This,
/*3833*/ LPOLESTR szName,
/*3834*/ IBindCtx*pBC,
/*3835*/ IMoniker**ppmk,
/*3836*/ DWORD dwReserved);
/*3838*/ HRESULT(__stdcall*MonikerBindToStorage)(
/*3839*/ IBindHost*This,
/*3840*/ IMoniker*pMk,
/*3841*/ IBindCtx*pBC,
/*3842*/ IBindStatusCallback*pBSC,
/*3843*/ const IID*const riid,
/*3844*/ void**ppvObj);
/*3846*/ HRESULT(__stdcall*MonikerBindToObject)(
/*3847*/ IBindHost*This,
/*3848*/ IMoniker*pMk,
/*3849*/ IBindCtx*pBC,
/*3850*/ IBindStatusCallback*pBSC,
/*3851*/ const IID*const riid,
/*3852*/ void**ppvObj);
/*3854*/ 
/*3855*/ }IBindHostVtbl;
/*3857*/ struct IBindHost
/*3858*/ {
/*3859*/ struct IBindHostVtbl*lpVtbl;
/*3860*/ };
/*3893*/ HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy(
/*3894*/ IBindHost*This,
/*3895*/ IMoniker*pMk,
/*3896*/ IBindCtx*pBC,
/*3897*/ IBindStatusCallback*pBSC,
/*3898*/ const IID*const riid,
/*3899*/ IUnknown**ppvObj);
/*3902*/ void IBindHost_RemoteMonikerBindToStorage_Stub(
/*3903*/ IRpcStubBuffer*This,
/*3904*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3905*/ PRPC_MESSAGE _pRpcMessage,
/*3906*/ DWORD*_pdwStubPhase);
/*3909*/ HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy(
/*3910*/ IBindHost*This,
/*3911*/ IMoniker*pMk,
/*3912*/ IBindCtx*pBC,
/*3913*/ IBindStatusCallback*pBSC,
/*3914*/ const IID*const riid,
/*3915*/ IUnknown**ppvObj);
/*3918*/ void IBindHost_RemoteMonikerBindToObject_Stub(
/*3919*/ IRpcStubBuffer*This,
/*3920*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*3921*/ PRPC_MESSAGE _pRpcMessage,
/*3922*/ DWORD*_pdwStubPhase);
/*3941*/ struct IBindStatusCallback;
/*3942*/ extern HRESULT __stdcall HlinkSimpleNavigateToString(
/*3943*/ LPCWSTR szTarget,
/*3944*/ LPCWSTR szLocation,
/*3945*/ LPCWSTR szTargetFrameName,
/*3946*/ IUnknown*pUnk,
/*3947*/ IBindCtx*pbc,
/*3948*/ IBindStatusCallback*,
/*3949*/ DWORD grfHLNF,
/*3950*/ DWORD dwReserved
/*3951*/ );
/*3953*/ extern HRESULT __stdcall HlinkSimpleNavigateToMoniker(
/*3954*/ IMoniker*pmkTarget,
/*3955*/ LPCWSTR szLocation,
/*3956*/ LPCWSTR szTargetFrameName,
/*3957*/ IUnknown*pUnk,
/*3958*/ IBindCtx*pbc,
/*3959*/ IBindStatusCallback*,
/*3960*/ DWORD grfHLNF,
/*3961*/ DWORD dwReserved
/*3962*/ );
/*3964*/ extern HRESULT __stdcall URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
/*3965*/ extern HRESULT __stdcall URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
/*3966*/ extern HRESULT __stdcall URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
/*3967*/ extern HRESULT __stdcall URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
/*3968*/ extern HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
/*3969*/ extern HRESULT __stdcall URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
/*3970*/ extern HRESULT __stdcall URLDownloadToCacheFileA(typ typ typ typ typ LPUNKNOWN,typ typ typ typ typ LPCSTR,typ typ typ typ typ LPSTR,DWORD cchFileName,DWORD,typ typ typ typ typ LPBINDSTATUSCALLBACK);
/*3971*/ extern HRESULT __stdcall URLDownloadToCacheFileW(typ typ typ typ typ LPUNKNOWN,typ typ typ typ typ LPCWSTR,typ typ typ typ typ LPWSTR,DWORD cchFileName,DWORD,typ typ typ typ typ LPBINDSTATUSCALLBACK);
/*3972*/ extern HRESULT __stdcall URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
/*3973*/ extern HRESULT __stdcall URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
/*3990*/ extern HRESULT __stdcall HlinkGoBack(IUnknown*pUnk);
/*3991*/ extern HRESULT __stdcall HlinkGoForward(IUnknown*pUnk);
/*3992*/ extern HRESULT __stdcall HlinkNavigateString(IUnknown*pUnk,LPCWSTR szTarget);
/*3993*/ extern HRESULT __stdcall HlinkNavigateMoniker(IUnknown*pUnk,IMoniker*pmkTarget);
/*4009*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
/*4010*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;
/*4018*/ typedef IInternet*LPIINTERNET;
/*4021*/ extern const IID IID_IInternet;
/*4033*/ typedef struct IInternetVtbl
/*4034*/ {
/*4035*/ 
/*4037*/ HRESULT(__stdcall*QueryInterface)(
/*4038*/ IInternet*This,
/*4039*/ const IID*const riid,
/*4041*/ void**ppvObject);
/*4043*/ ULONG(__stdcall*AddRef)(
/*4044*/ IInternet*This);
/*4046*/ ULONG(__stdcall*Release)(
/*4047*/ IInternet*This);
/*4049*/ 
/*4050*/ }IInternetVtbl;
/*4052*/ struct IInternet
/*4053*/ {
/*4054*/ struct IInternetVtbl*lpVtbl;
/*4055*/ };
/*4091*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec;
/*4092*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec;
/*4100*/ typedef IInternetBindInfo*LPIINTERNETBINDINFO;
/*4102*/ typedef
/*4103*/ enum tagBINDSTRING
/*4104*/ {BINDSTRING_HEADERS=1,
/*4105*/ BINDSTRING_ACCEPT_MIMES=(BINDSTRING_HEADERS+1),
/*4106*/ BINDSTRING_EXTRA_URL=(BINDSTRING_ACCEPT_MIMES+1),
/*4107*/ BINDSTRING_LANGUAGE=(BINDSTRING_EXTRA_URL+1),
/*4108*/ BINDSTRING_USERNAME=(BINDSTRING_LANGUAGE+1),
/*4109*/ BINDSTRING_PASSWORD=(BINDSTRING_USERNAME+1),
/*4110*/ BINDSTRING_UA_PIXELS=(BINDSTRING_PASSWORD+1),
/*4111*/ BINDSTRING_UA_COLOR=(BINDSTRING_UA_PIXELS+1),
/*4112*/ BINDSTRING_OS=(BINDSTRING_UA_COLOR+1),
/*4113*/ BINDSTRING_USER_AGENT=(BINDSTRING_OS+1),
/*4114*/ BINDSTRING_ACCEPT_ENCODINGS=(BINDSTRING_USER_AGENT+1),
/*4115*/ BINDSTRING_POST_COOKIE=(BINDSTRING_ACCEPT_ENCODINGS+1),
/*4116*/ BINDSTRING_POST_DATA_MIME=(BINDSTRING_POST_COOKIE+1),
/*4117*/ BINDSTRING_URL=(BINDSTRING_POST_DATA_MIME+1),
/*4118*/ BINDSTRING_IID=(BINDSTRING_URL+1),
/*4119*/ BINDSTRING_FLAG_BIND_TO_OBJECT=(BINDSTRING_IID+1),
/*4120*/ BINDSTRING_PTR_BIND_CONTEXT=(BINDSTRING_FLAG_BIND_TO_OBJECT+1)
/*4121*/ }BINDSTRING;
/*4124*/ extern const IID IID_IInternetBindInfo;
/*4146*/ typedef struct IInternetBindInfoVtbl
/*4147*/ {
/*4148*/ 
/*4150*/ HRESULT(__stdcall*QueryInterface)(
/*4151*/ IInternetBindInfo*This,
/*4152*/ const IID*const riid,
/*4154*/ void**ppvObject);
/*4156*/ ULONG(__stdcall*AddRef)(
/*4157*/ IInternetBindInfo*This);
/*4159*/ ULONG(__stdcall*Release)(
/*4160*/ IInternetBindInfo*This);
/*4162*/ HRESULT(__stdcall*GetBindInfo)(
/*4163*/ IInternetBindInfo*This,
/*4164*/ DWORD*grfBINDF,
/*4165*/ BINDINFO*pbindinfo);
/*4167*/ HRESULT(__stdcall*GetBindString)(
/*4168*/ IInternetBindInfo*This,
/*4169*/ ULONG ulStringType,
/*4170*/ LPOLESTR*ppwzStr,
/*4171*/ ULONG cEl,
/*4172*/ ULONG*pcElFetched);
/*4174*/ 
/*4175*/ }IInternetBindInfoVtbl;
/*4177*/ struct IInternetBindInfo
/*4178*/ {
/*4179*/ struct IInternetBindInfoVtbl*lpVtbl;
/*4180*/ };
/*4222*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec;
/*4223*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec;
/*4231*/ typedef IInternetProtocolRoot*LPIINTERNETPROTOCOLROOT;
/*4233*/ typedef
/*4234*/ enum _tagPI_FLAGS
/*4235*/ {PI_PARSE_URL=0x1,
/*4236*/ PI_FILTER_MODE=0x2,
/*4237*/ PI_FORCE_ASYNC=0x4,
/*4238*/ PI_USE_WORKERTHREAD=0x8,
/*4239*/ PI_MIMEVERIFICATION=0x10,
/*4240*/ PI_CLSIDLOOKUP=0x20,
/*4241*/ PI_DATAPROGRESS=0x40,
/*4242*/ PI_SYNCHRONOUS=0x80,
/*4243*/ PI_APARTMENTTHREADED=0x100,
/*4244*/ PI_CLASSINSTALL=0x200,
/*4245*/ PI_PASSONBINDCTX=0x2000,
/*4246*/ PI_NOMIMEHANDLER=0x8000,
/*4247*/ PI_LOADAPPDIRECT=0x4000,
/*4248*/ PD_FORCE_SWITCH=0x10000,
/*4249*/ PI_PREFERDEFAULTHANDLER=0x20000
/*4250*/ }PI_FLAGS;
/*4252*/ typedef struct _tagPROTOCOLDATA
/*4253*/ {
/*4254*/ DWORD grfFlags;
/*4255*/ DWORD dwState;
/*4256*/ LPVOID pData;
/*4257*/ ULONG cbData;
/*4258*/ }PROTOCOLDATA;
/*4260*/ typedef struct _tagStartParam
/*4261*/ {
/*4262*/ IID iid;
/*4263*/ IBindCtx*pIBindCtx;
/*4264*/ IUnknown*pItf;
/*4265*/ }StartParam;
/*4268*/ extern const IID IID_IInternetProtocolRoot;
/*4301*/ typedef struct IInternetProtocolRootVtbl
/*4302*/ {
/*4303*/ 
/*4305*/ HRESULT(__stdcall*QueryInterface)(
/*4306*/ IInternetProtocolRoot*This,
/*4307*/ const IID*const riid,
/*4309*/ void**ppvObject);
/*4311*/ ULONG(__stdcall*AddRef)(
/*4312*/ IInternetProtocolRoot*This);
/*4314*/ ULONG(__stdcall*Release)(
/*4315*/ IInternetProtocolRoot*This);
/*4317*/ HRESULT(__stdcall*Start)(
/*4318*/ IInternetProtocolRoot*This,
/*4319*/ LPCWSTR szUrl,
/*4320*/ IInternetProtocolSink*pOIProtSink,
/*4321*/ IInternetBindInfo*pOIBindInfo,
/*4322*/ DWORD grfPI,
/*4323*/ HANDLE_PTR dwReserved);
/*4325*/ HRESULT(__stdcall*Continue)(
/*4326*/ IInternetProtocolRoot*This,
/*4327*/ PROTOCOLDATA*pProtocolData);
/*4329*/ HRESULT(__stdcall*Abort)(
/*4330*/ IInternetProtocolRoot*This,
/*4331*/ HRESULT hrReason,
/*4332*/ DWORD dwOptions);
/*4334*/ HRESULT(__stdcall*Terminate)(
/*4335*/ IInternetProtocolRoot*This,
/*4336*/ DWORD dwOptions);
/*4338*/ HRESULT(__stdcall*Suspend)(
/*4339*/ IInternetProtocolRoot*This);
/*4341*/ HRESULT(__stdcall*Resume)(
/*4342*/ IInternetProtocolRoot*This);
/*4344*/ 
/*4345*/ }IInternetProtocolRootVtbl;
/*4347*/ struct IInternetProtocolRoot
/*4348*/ {
/*4349*/ struct IInternetProtocolRootVtbl*lpVtbl;
/*4350*/ };
/*4404*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
/*4405*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;
/*4413*/ typedef IInternetProtocol*LPIINTERNETPROTOCOL;
/*4416*/ extern const IID IID_IInternetProtocol;
/*4443*/ typedef struct IInternetProtocolVtbl
/*4444*/ {
/*4445*/ 
/*4447*/ HRESULT(__stdcall*QueryInterface)(
/*4448*/ IInternetProtocol*This,
/*4449*/ const IID*const riid,
/*4451*/ void**ppvObject);
/*4453*/ ULONG(__stdcall*AddRef)(
/*4454*/ IInternetProtocol*This);
/*4456*/ ULONG(__stdcall*Release)(
/*4457*/ IInternetProtocol*This);
/*4459*/ HRESULT(__stdcall*Start)(
/*4460*/ IInternetProtocol*This,
/*4461*/ LPCWSTR szUrl,
/*4462*/ IInternetProtocolSink*pOIProtSink,
/*4463*/ IInternetBindInfo*pOIBindInfo,
/*4464*/ DWORD grfPI,
/*4465*/ HANDLE_PTR dwReserved);
/*4467*/ HRESULT(__stdcall*Continue)(
/*4468*/ IInternetProtocol*This,
/*4469*/ PROTOCOLDATA*pProtocolData);
/*4471*/ HRESULT(__stdcall*Abort)(
/*4472*/ IInternetProtocol*This,
/*4473*/ HRESULT hrReason,
/*4474*/ DWORD dwOptions);
/*4476*/ HRESULT(__stdcall*Terminate)(
/*4477*/ IInternetProtocol*This,
/*4478*/ DWORD dwOptions);
/*4480*/ HRESULT(__stdcall*Suspend)(
/*4481*/ IInternetProtocol*This);
/*4483*/ HRESULT(__stdcall*Resume)(
/*4484*/ IInternetProtocol*This);
/*4486*/ HRESULT(__stdcall*Read)(
/*4487*/ IInternetProtocol*This,
/*4488*/ void*pv,
/*4489*/ ULONG cb,
/*4490*/ ULONG*pcbRead);
/*4492*/ HRESULT(__stdcall*Seek)(
/*4493*/ IInternetProtocol*This,
/*4494*/ LARGE_INTEGER dlibMove,
/*4495*/ DWORD dwOrigin,
/*4496*/ ULARGE_INTEGER*plibNewPosition);
/*4498*/ HRESULT(__stdcall*LockRequest)(
/*4499*/ IInternetProtocol*This,
/*4500*/ DWORD dwOptions);
/*4502*/ HRESULT(__stdcall*UnlockRequest)(
/*4503*/ IInternetProtocol*This);
/*4505*/ 
/*4506*/ }IInternetProtocolVtbl;
/*4508*/ struct IInternetProtocol
/*4509*/ {
/*4510*/ struct IInternetProtocolVtbl*lpVtbl;
/*4511*/ };
/*4579*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
/*4580*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;
/*4589*/ extern const IID IID_IInternetProtocolEx;
/*4608*/ typedef struct IInternetProtocolExVtbl
/*4609*/ {
/*4610*/ 
/*4612*/ HRESULT(__stdcall*QueryInterface)(
/*4613*/ IInternetProtocolEx*This,
/*4614*/ const IID*const riid,
/*4616*/ void**ppvObject);
/*4618*/ ULONG(__stdcall*AddRef)(
/*4619*/ IInternetProtocolEx*This);
/*4621*/ ULONG(__stdcall*Release)(
/*4622*/ IInternetProtocolEx*This);
/*4624*/ HRESULT(__stdcall*Start)(
/*4625*/ IInternetProtocolEx*This,
/*4626*/ LPCWSTR szUrl,
/*4627*/ IInternetProtocolSink*pOIProtSink,
/*4628*/ IInternetBindInfo*pOIBindInfo,
/*4629*/ DWORD grfPI,
/*4630*/ HANDLE_PTR dwReserved);
/*4632*/ HRESULT(__stdcall*Continue)(
/*4633*/ IInternetProtocolEx*This,
/*4634*/ PROTOCOLDATA*pProtocolData);
/*4636*/ HRESULT(__stdcall*Abort)(
/*4637*/ IInternetProtocolEx*This,
/*4638*/ HRESULT hrReason,
/*4639*/ DWORD dwOptions);
/*4641*/ HRESULT(__stdcall*Terminate)(
/*4642*/ IInternetProtocolEx*This,
/*4643*/ DWORD dwOptions);
/*4645*/ HRESULT(__stdcall*Suspend)(
/*4646*/ IInternetProtocolEx*This);
/*4648*/ HRESULT(__stdcall*Resume)(
/*4649*/ IInternetProtocolEx*This);
/*4651*/ HRESULT(__stdcall*Read)(
/*4652*/ IInternetProtocolEx*This,
/*4653*/ void*pv,
/*4654*/ ULONG cb,
/*4655*/ ULONG*pcbRead);
/*4657*/ HRESULT(__stdcall*Seek)(
/*4658*/ IInternetProtocolEx*This,
/*4659*/ LARGE_INTEGER dlibMove,
/*4660*/ DWORD dwOrigin,
/*4661*/ ULARGE_INTEGER*plibNewPosition);
/*4663*/ HRESULT(__stdcall*LockRequest)(
/*4664*/ IInternetProtocolEx*This,
/*4665*/ DWORD dwOptions);
/*4667*/ HRESULT(__stdcall*UnlockRequest)(
/*4668*/ IInternetProtocolEx*This);
/*4670*/ HRESULT(__stdcall*StartEx)(
/*4671*/ IInternetProtocolEx*This,
/*4672*/ IUri*pUri,
/*4673*/ IInternetProtocolSink*pOIProtSink,
/*4674*/ IInternetBindInfo*pOIBindInfo,
/*4675*/ DWORD grfPI,
/*4676*/ HANDLE_PTR dwReserved);
/*4678*/ 
/*4679*/ }IInternetProtocolExVtbl;
/*4681*/ struct IInternetProtocolEx
/*4682*/ {
/*4683*/ struct IInternetProtocolExVtbl*lpVtbl;
/*4684*/ };
/*4756*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
/*4757*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;
/*4765*/ typedef IInternetProtocolSink*LPIINTERNETPROTOCOLSINK;
/*4768*/ extern const IID IID_IInternetProtocolSink;
/*4797*/ typedef struct IInternetProtocolSinkVtbl
/*4798*/ {
/*4799*/ 
/*4801*/ HRESULT(__stdcall*QueryInterface)(
/*4802*/ IInternetProtocolSink*This,
/*4803*/ const IID*const riid,
/*4805*/ void**ppvObject);
/*4807*/ ULONG(__stdcall*AddRef)(
/*4808*/ IInternetProtocolSink*This);
/*4810*/ ULONG(__stdcall*Release)(
/*4811*/ IInternetProtocolSink*This);
/*4813*/ HRESULT(__stdcall*Switch)(
/*4814*/ IInternetProtocolSink*This,
/*4815*/ PROTOCOLDATA*pProtocolData);
/*4817*/ HRESULT(__stdcall*ReportProgress)(
/*4818*/ IInternetProtocolSink*This,
/*4819*/ ULONG ulStatusCode,
/*4820*/ LPCWSTR szStatusText);
/*4822*/ HRESULT(__stdcall*ReportData)(
/*4823*/ IInternetProtocolSink*This,
/*4824*/ DWORD grfBSCF,
/*4825*/ ULONG ulProgress,
/*4826*/ ULONG ulProgressMax);
/*4828*/ HRESULT(__stdcall*ReportResult)(
/*4829*/ IInternetProtocolSink*This,
/*4830*/ HRESULT hrResult,
/*4831*/ DWORD dwError,
/*4832*/ LPCWSTR szResult);
/*4834*/ 
/*4835*/ }IInternetProtocolSinkVtbl;
/*4837*/ struct IInternetProtocolSink
/*4838*/ {
/*4839*/ struct IInternetProtocolSinkVtbl*lpVtbl;
/*4840*/ };
/*4888*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
/*4889*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;
/*4897*/ typedef IInternetProtocolSinkStackable*LPIINTERNETPROTOCOLSINKStackable;
/*4900*/ extern const IID IID_IInternetProtocolSinkStackable;
/*4919*/ typedef struct IInternetProtocolSinkStackableVtbl
/*4920*/ {
/*4921*/ 
/*4923*/ HRESULT(__stdcall*QueryInterface)(
/*4924*/ IInternetProtocolSinkStackable*This,
/*4925*/ const IID*const riid,
/*4927*/ void**ppvObject);
/*4929*/ ULONG(__stdcall*AddRef)(
/*4930*/ IInternetProtocolSinkStackable*This);
/*4932*/ ULONG(__stdcall*Release)(
/*4933*/ IInternetProtocolSinkStackable*This);
/*4935*/ HRESULT(__stdcall*SwitchSink)(
/*4936*/ IInternetProtocolSinkStackable*This,
/*4937*/ IInternetProtocolSink*pOIProtSink);
/*4939*/ HRESULT(__stdcall*CommitSwitch)(
/*4940*/ IInternetProtocolSinkStackable*This);
/*4942*/ HRESULT(__stdcall*RollbackSwitch)(
/*4943*/ IInternetProtocolSinkStackable*This);
/*4945*/ 
/*4946*/ }IInternetProtocolSinkStackableVtbl;
/*4948*/ struct IInternetProtocolSinkStackable
/*4949*/ {
/*4950*/ struct IInternetProtocolSinkStackableVtbl*lpVtbl;
/*4951*/ };
/*4996*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
/*4997*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;
/*5005*/ typedef IInternetSession*LPIINTERNETSESSION;
/*5007*/ typedef
/*5008*/ enum _tagOIBDG_FLAGS
/*5009*/ {OIBDG_APARTMENTTHREADED=0x100,
/*5010*/ OIBDG_DATAONLY=0x1000
/*5011*/ }OIBDG_FLAGS;
/*5014*/ extern const IID IID_IInternetSession;
/*5067*/ typedef struct IInternetSessionVtbl
/*5068*/ {
/*5069*/ 
/*5071*/ HRESULT(__stdcall*QueryInterface)(
/*5072*/ IInternetSession*This,
/*5073*/ const IID*const riid,
/*5075*/ void**ppvObject);
/*5077*/ ULONG(__stdcall*AddRef)(
/*5078*/ IInternetSession*This);
/*5080*/ ULONG(__stdcall*Release)(
/*5081*/ IInternetSession*This);
/*5083*/ HRESULT(__stdcall*RegisterNameSpace)(
/*5084*/ IInternetSession*This,
/*5085*/ IClassFactory*pCF,
/*5086*/ const IID*const rclsid,
/*5087*/ LPCWSTR pwzProtocol,
/*5088*/ ULONG cPatterns,
/*5089*/ const LPCWSTR*ppwzPatterns,
/*5090*/ DWORD dwReserved);
/*5092*/ HRESULT(__stdcall*UnregisterNameSpace)(
/*5093*/ IInternetSession*This,
/*5094*/ IClassFactory*pCF,
/*5095*/ LPCWSTR pszProtocol);
/*5097*/ HRESULT(__stdcall*RegisterMimeFilter)(
/*5098*/ IInternetSession*This,
/*5099*/ IClassFactory*pCF,
/*5100*/ const IID*const rclsid,
/*5101*/ LPCWSTR pwzType);
/*5103*/ HRESULT(__stdcall*UnregisterMimeFilter)(
/*5104*/ IInternetSession*This,
/*5105*/ IClassFactory*pCF,
/*5106*/ LPCWSTR pwzType);
/*5108*/ HRESULT(__stdcall*CreateBinding)(
/*5109*/ IInternetSession*This,
/*5110*/ LPBC pBC,
/*5111*/ LPCWSTR szUrl,
/*5112*/ IUnknown*pUnkOuter,
/*5113*/ IUnknown**ppUnk,
/*5114*/ IInternetProtocol**ppOInetProt,
/*5115*/ DWORD dwOption);
/*5117*/ HRESULT(__stdcall*SetSessionOption)(
/*5118*/ IInternetSession*This,
/*5119*/ DWORD dwOption,
/*5120*/ LPVOID pBuffer,
/*5121*/ DWORD dwBufferLength,
/*5122*/ DWORD dwReserved);
/*5124*/ HRESULT(__stdcall*GetSessionOption)(
/*5125*/ IInternetSession*This,
/*5126*/ DWORD dwOption,
/*5127*/ LPVOID pBuffer,
/*5128*/ DWORD*pdwBufferLength,
/*5129*/ DWORD dwReserved);
/*5131*/ 
/*5132*/ }IInternetSessionVtbl;
/*5134*/ struct IInternetSession
/*5135*/ {
/*5136*/ struct IInternetSessionVtbl*lpVtbl;
/*5137*/ };
/*5194*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
/*5195*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;
/*5203*/ typedef IInternetThreadSwitch*LPIINTERNETTHREADSWITCH;
/*5206*/ extern const IID IID_IInternetThreadSwitch;
/*5222*/ typedef struct IInternetThreadSwitchVtbl
/*5223*/ {
/*5224*/ 
/*5226*/ HRESULT(__stdcall*QueryInterface)(
/*5227*/ IInternetThreadSwitch*This,
/*5228*/ const IID*const riid,
/*5230*/ void**ppvObject);
/*5232*/ ULONG(__stdcall*AddRef)(
/*5233*/ IInternetThreadSwitch*This);
/*5235*/ ULONG(__stdcall*Release)(
/*5236*/ IInternetThreadSwitch*This);
/*5238*/ HRESULT(__stdcall*Prepare)(
/*5239*/ IInternetThreadSwitch*This);
/*5241*/ HRESULT(__stdcall*Continue)(
/*5242*/ IInternetThreadSwitch*This);
/*5244*/ 
/*5245*/ }IInternetThreadSwitchVtbl;
/*5247*/ struct IInternetThreadSwitch
/*5248*/ {
/*5249*/ struct IInternetThreadSwitchVtbl*lpVtbl;
/*5250*/ };
/*5292*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec;
/*5293*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec;
/*5301*/ typedef IInternetPriority*LPIINTERNETPRIORITY;
/*5304*/ extern const IID IID_IInternetPriority;
/*5322*/ typedef struct IInternetPriorityVtbl
/*5323*/ {
/*5324*/ 
/*5326*/ HRESULT(__stdcall*QueryInterface)(
/*5327*/ IInternetPriority*This,
/*5328*/ const IID*const riid,
/*5330*/ void**ppvObject);
/*5332*/ ULONG(__stdcall*AddRef)(
/*5333*/ IInternetPriority*This);
/*5335*/ ULONG(__stdcall*Release)(
/*5336*/ IInternetPriority*This);
/*5338*/ HRESULT(__stdcall*SetPriority)(
/*5339*/ IInternetPriority*This,
/*5340*/ LONG nPriority);
/*5342*/ HRESULT(__stdcall*GetPriority)(
/*5343*/ IInternetPriority*This,
/*5344*/ LONG*pnPriority);
/*5346*/ 
/*5347*/ }IInternetPriorityVtbl;
/*5349*/ struct IInternetPriority
/*5350*/ {
/*5351*/ struct IInternetPriorityVtbl*lpVtbl;
/*5352*/ };
/*5394*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
/*5395*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;
/*5403*/ typedef IInternetProtocolInfo*LPIINTERNETPROTOCOLINFO;
/*5405*/ typedef
/*5406*/ enum _tagPARSEACTION
/*5407*/ {PARSE_CANONICALIZE=1,
/*5408*/ PARSE_FRIENDLY=(PARSE_CANONICALIZE+1),
/*5409*/ PARSE_SECURITY_URL=(PARSE_FRIENDLY+1),
/*5410*/ PARSE_ROOTDOCUMENT=(PARSE_SECURITY_URL+1),
/*5411*/ PARSE_DOCUMENT=(PARSE_ROOTDOCUMENT+1),
/*5412*/ PARSE_ANCHOR=(PARSE_DOCUMENT+1),
/*5413*/ PARSE_ENCODE=(PARSE_ANCHOR+1),
/*5414*/ PARSE_DECODE=(PARSE_ENCODE+1),
/*5415*/ PARSE_PATH_FROM_URL=(PARSE_DECODE+1),
/*5416*/ PARSE_URL_FROM_PATH=(PARSE_PATH_FROM_URL+1),
/*5417*/ PARSE_MIME=(PARSE_URL_FROM_PATH+1),
/*5418*/ PARSE_SERVER=(PARSE_MIME+1),
/*5419*/ PARSE_SCHEMA=(PARSE_SERVER+1),
/*5420*/ PARSE_SITE=(PARSE_SCHEMA+1),
/*5421*/ PARSE_DOMAIN=(PARSE_SITE+1),
/*5422*/ PARSE_LOCATION=(PARSE_DOMAIN+1),
/*5423*/ PARSE_SECURITY_DOMAIN=(PARSE_LOCATION+1),
/*5424*/ PARSE_ESCAPE=(PARSE_SECURITY_DOMAIN+1),
/*5425*/ PARSE_UNESCAPE=(PARSE_ESCAPE+1)
/*5426*/ }PARSEACTION;
/*5428*/ typedef
/*5429*/ enum _tagPSUACTION
/*5430*/ {PSU_DEFAULT=1,
/*5431*/ PSU_SECURITY_URL_ONLY=(PSU_DEFAULT+1)
/*5432*/ }PSUACTION;
/*5434*/ typedef
/*5435*/ enum _tagQUERYOPTION
/*5436*/ {QUERY_EXPIRATION_DATE=1,
/*5437*/ QUERY_TIME_OF_LAST_CHANGE=(QUERY_EXPIRATION_DATE+1),
/*5438*/ QUERY_CONTENT_ENCODING=(QUERY_TIME_OF_LAST_CHANGE+1),
/*5439*/ QUERY_CONTENT_TYPE=(QUERY_CONTENT_ENCODING+1),
/*5440*/ QUERY_REFRESH=(QUERY_CONTENT_TYPE+1),
/*5441*/ QUERY_RECOMBINE=(QUERY_REFRESH+1),
/*5442*/ QUERY_CAN_NAVIGATE=(QUERY_RECOMBINE+1),
/*5443*/ QUERY_USES_NETWORK=(QUERY_CAN_NAVIGATE+1),
/*5444*/ QUERY_IS_CACHED=(QUERY_USES_NETWORK+1),
/*5445*/ QUERY_IS_INSTALLEDENTRY=(QUERY_IS_CACHED+1),
/*5446*/ QUERY_IS_CACHED_OR_MAPPED=(QUERY_IS_INSTALLEDENTRY+1),
/*5447*/ QUERY_USES_CACHE=(QUERY_IS_CACHED_OR_MAPPED+1),
/*5448*/ QUERY_IS_SECURE=(QUERY_USES_CACHE+1),
/*5449*/ QUERY_IS_SAFE=(QUERY_IS_SECURE+1),
/*5450*/ QUERY_USES_HISTORYFOLDER=(QUERY_IS_SAFE+1)
/*5451*/ }QUERYOPTION;
/*5454*/ extern const IID IID_IInternetProtocolInfo;
/*5498*/ typedef struct IInternetProtocolInfoVtbl
/*5499*/ {
/*5500*/ 
/*5502*/ HRESULT(__stdcall*QueryInterface)(
/*5503*/ IInternetProtocolInfo*This,
/*5504*/ const IID*const riid,
/*5506*/ void**ppvObject);
/*5508*/ ULONG(__stdcall*AddRef)(
/*5509*/ IInternetProtocolInfo*This);
/*5511*/ ULONG(__stdcall*Release)(
/*5512*/ IInternetProtocolInfo*This);
/*5514*/ HRESULT(__stdcall*ParseUrl)(
/*5515*/ IInternetProtocolInfo*This,
/*5516*/ LPCWSTR pwzUrl,
/*5517*/ PARSEACTION ParseAction,
/*5518*/ DWORD dwParseFlags,
/*5519*/ LPWSTR pwzResult,
/*5520*/ DWORD cchResult,
/*5521*/ DWORD*pcchResult,
/*5522*/ DWORD dwReserved);
/*5524*/ HRESULT(__stdcall*CombineUrl)(
/*5525*/ IInternetProtocolInfo*This,
/*5526*/ LPCWSTR pwzBaseUrl,
/*5527*/ LPCWSTR pwzRelativeUrl,
/*5528*/ DWORD dwCombineFlags,
/*5529*/ LPWSTR pwzResult,
/*5530*/ DWORD cchResult,
/*5531*/ DWORD*pcchResult,
/*5532*/ DWORD dwReserved);
/*5534*/ HRESULT(__stdcall*CompareUrl)(
/*5535*/ IInternetProtocolInfo*This,
/*5536*/ LPCWSTR pwzUrl1,
/*5537*/ LPCWSTR pwzUrl2,
/*5538*/ DWORD dwCompareFlags);
/*5540*/ HRESULT(__stdcall*QueryInfo)(
/*5541*/ IInternetProtocolInfo*This,
/*5542*/ LPCWSTR pwzUrl,
/*5543*/ QUERYOPTION OueryOption,
/*5544*/ DWORD dwQueryFlags,
/*5545*/ LPVOID pBuffer,
/*5546*/ DWORD cbBuffer,
/*5547*/ DWORD*pcbBuf,
/*5548*/ DWORD dwReserved);
/*5550*/ 
/*5551*/ }IInternetProtocolInfoVtbl;
/*5553*/ struct IInternetProtocolInfo
/*5554*/ {
/*5555*/ struct IInternetProtocolInfoVtbl*lpVtbl;
/*5556*/ };
/*5640*/ extern HRESULT __stdcall CoInternetParseUrl(
/*5641*/ LPCWSTR pwzUrl,
/*5642*/ PARSEACTION ParseAction,
/*5643*/ DWORD dwFlags,
/*5644*/ typ typ typ typ typ typ typ LPWSTR pszResult,
/*5645*/ DWORD cchResult,
/*5646*/ typ typ typ typ typ DWORD*pcchResult,
/*5647*/ DWORD dwReserved
/*5648*/ );
/*5650*/ extern HRESULT __stdcall CoInternetParseIUri(
/*5651*/ typ typ typ typ typ IUri*pIUri,
/*5652*/ PARSEACTION ParseAction,
/*5653*/ DWORD dwFlags,
/*5654*/ typ typ typ typ typ typ typ LPWSTR pwzResult,
/*5655*/ DWORD cchResult,
/*5656*/ typ typ typ typ typ DWORD*pcchResult,
/*5657*/ DWORD_PTR dwReserved
/*5658*/ );
/*5660*/ extern HRESULT __stdcall CoInternetCombineUrl(
/*5661*/ LPCWSTR pwzBaseUrl,
/*5662*/ LPCWSTR pwzRelativeUrl,
/*5663*/ DWORD dwCombineFlags,
/*5664*/ typ typ typ typ typ typ typ LPWSTR pszResult,
/*5665*/ DWORD cchResult,
/*5666*/ typ typ typ typ typ typ typ DWORD*pcchResult,
/*5667*/ typ typ DWORD dwReserved
/*5668*/ );
/*5670*/ extern HRESULT __stdcall CoInternetCombineUrlEx(
/*5671*/ typ typ typ typ typ typ typ IUri*pBaseUri,
/*5672*/ typ typ typ typ typ typ typ LPCWSTR pwzRelativeUrl,
/*5673*/ DWORD dwCombineFlags,
/*5674*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUri**ppCombinedUri,
/*5675*/ typ typ typ typ typ typ typ DWORD_PTR dwReserved
/*5676*/ );
/*5677*/ extern HRESULT __stdcall CoInternetCombineIUri(
/*5678*/ typ typ typ typ typ IUri*pBaseUri,
/*5679*/ typ typ typ typ typ IUri*pRelativeUri,
/*5680*/ DWORD dwCombineFlags,
/*5681*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUri**ppCombinedUri,
/*5682*/ typ typ typ typ typ typ typ DWORD_PTR dwReserved
/*5683*/ );
/*5685*/ extern HRESULT __stdcall CoInternetCompareUrl(
/*5686*/ LPCWSTR pwzUrl1,
/*5687*/ LPCWSTR pwzUrl2,
/*5688*/ DWORD dwFlags
/*5689*/ );
/*5690*/ extern HRESULT __stdcall CoInternetGetProtocolFlags(
/*5691*/ LPCWSTR pwzUrl,
/*5692*/ DWORD*pdwFlags,
/*5693*/ DWORD dwReserved
/*5694*/ );
/*5695*/ extern HRESULT __stdcall CoInternetQueryInfo(
/*5696*/ LPCWSTR pwzUrl,
/*5697*/ QUERYOPTION QueryOptions,
/*5698*/ DWORD dwQueryFlags,
/*5699*/ LPVOID pvBuffer,
/*5700*/ DWORD cbBuffer,
/*5701*/ DWORD*pcbBuffer,
/*5702*/ DWORD dwReserved
/*5703*/ );
/*5704*/ extern HRESULT __stdcall CoInternetGetSession(
/*5705*/ DWORD dwSessionMode,
/*5706*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IInternetSession**ppIInternetSession,
/*5707*/ DWORD dwReserved
/*5708*/ );
/*5709*/ extern HRESULT __stdcall CoInternetGetSecurityUrl(
/*5710*/ LPCWSTR pwszUrl,
/*5711*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPWSTR*ppwszSecUrl,
/*5712*/ typ typ typ typ typ PSUACTION psuAction,
/*5713*/ typ typ DWORD dwReserved
/*5714*/ );
/*5715*/ extern HRESULT __stdcall AsyncInstallDistributionUnit(
/*5716*/ LPCWSTR szDistUnit,
/*5717*/ LPCWSTR szTYPE,
/*5718*/ LPCWSTR szExt,
/*5719*/ DWORD dwFileVersionMS,
/*5720*/ DWORD dwFileVersionLS,
/*5721*/ LPCWSTR szURL,
/*5722*/ IBindCtx*pbc,
/*5723*/ LPVOID pvReserved,
/*5724*/ DWORD flags
/*5725*/ );
/*5727*/ extern HRESULT __stdcall CoInternetGetSecurityUrlEx(
/*5728*/ typ typ typ typ typ IUri*pUri,
/*5729*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IUri**ppSecUri,
/*5730*/ PSUACTION psuAction,
/*5731*/ typ typ DWORD_PTR dwReserved
/*5734*/ );
/*5739*/ typedef
/*5740*/ enum _tagINTERNETFEATURELIST
/*5741*/ {FEATURE_OBJECT_CACHING=0,
/*5742*/ FEATURE_ZONE_ELEVATION=(FEATURE_OBJECT_CACHING+1),
/*5743*/ FEATURE_MIME_HANDLING=(FEATURE_ZONE_ELEVATION+1),
/*5744*/ FEATURE_MIME_SNIFFING=(FEATURE_MIME_HANDLING+1),
/*5745*/ FEATURE_WINDOW_RESTRICTIONS=(FEATURE_MIME_SNIFFING+1),
/*5746*/ FEATURE_WEBOC_POPUPMANAGEMENT=(FEATURE_WINDOW_RESTRICTIONS+1),
/*5747*/ FEATURE_BEHAVIORS=(FEATURE_WEBOC_POPUPMANAGEMENT+1),
/*5748*/ FEATURE_DISABLE_MK_PROTOCOL=(FEATURE_BEHAVIORS+1),
/*5749*/ FEATURE_LOCALMACHINE_LOCKDOWN=(FEATURE_DISABLE_MK_PROTOCOL+1),
/*5750*/ FEATURE_SECURITYBAND=(FEATURE_LOCALMACHINE_LOCKDOWN+1),
/*5751*/ FEATURE_RESTRICT_ACTIVEXINSTALL=(FEATURE_SECURITYBAND+1),
/*5752*/ FEATURE_VALIDATE_NAVIGATE_URL=(FEATURE_RESTRICT_ACTIVEXINSTALL+1),
/*5753*/ FEATURE_RESTRICT_FILEDOWNLOAD=(FEATURE_VALIDATE_NAVIGATE_URL+1),
/*5754*/ FEATURE_ADDON_MANAGEMENT=(FEATURE_RESTRICT_FILEDOWNLOAD+1),
/*5755*/ FEATURE_PROTOCOL_LOCKDOWN=(FEATURE_ADDON_MANAGEMENT+1),
/*5756*/ FEATURE_HTTP_USERNAME_PASSWORD_DISABLE=(FEATURE_PROTOCOL_LOCKDOWN+1),
/*5757*/ FEATURE_SAFE_BINDTOOBJECT=(FEATURE_HTTP_USERNAME_PASSWORD_DISABLE+1),
/*5758*/ FEATURE_UNC_SAVEDFILECHECK=(FEATURE_SAFE_BINDTOOBJECT+1),
/*5759*/ FEATURE_GET_URL_DOM_FILEPATH_UNENCODED=(FEATURE_UNC_SAVEDFILECHECK+1),
/*5760*/ FEATURE_TABBED_BROWSING=(FEATURE_GET_URL_DOM_FILEPATH_UNENCODED+1),
/*5761*/ FEATURE_SSLUX=(FEATURE_TABBED_BROWSING+1),
/*5762*/ FEATURE_DISABLE_NAVIGATION_SOUNDS=(FEATURE_SSLUX+1),
/*5763*/ FEATURE_DISABLE_LEGACY_COMPRESSION=(FEATURE_DISABLE_NAVIGATION_SOUNDS+1),
/*5764*/ FEATURE_FORCE_ADDR_AND_STATUS=(FEATURE_DISABLE_LEGACY_COMPRESSION+1),
/*5765*/ FEATURE_XMLHTTP=(FEATURE_FORCE_ADDR_AND_STATUS+1),
/*5766*/ FEATURE_DISABLE_TELNET_PROTOCOL=(FEATURE_XMLHTTP+1),
/*5767*/ FEATURE_FEEDS=(FEATURE_DISABLE_TELNET_PROTOCOL+1),
/*5768*/ FEATURE_BLOCK_INPUT_PROMPTS=(FEATURE_FEEDS+1),
/*5769*/ FEATURE_ENTRY_COUNT=(FEATURE_BLOCK_INPUT_PROMPTS+1)
/*5770*/ }INTERNETFEATURELIST;
/*5798*/ extern HRESULT __stdcall CoInternetSetFeatureEnabled(
/*5799*/ INTERNETFEATURELIST FeatureEntry,
/*5800*/ DWORD dwFlags,
/*5801*/ BOOL fEnable
/*5802*/ );
/*5803*/ extern HRESULT __stdcall CoInternetIsFeatureEnabled(
/*5804*/ INTERNETFEATURELIST FeatureEntry,
/*5805*/ DWORD dwFlags
/*5806*/ );
/*5807*/ extern HRESULT __stdcall CoInternetIsFeatureEnabledForUrl(
/*5808*/ INTERNETFEATURELIST FeatureEntry,
/*5809*/ DWORD dwFlags,
/*5810*/ LPCWSTR szURL,
/*5811*/ IInternetSecurityManager*pSecMgr
/*5812*/ );
/*5813*/ extern HRESULT __stdcall CoInternetIsFeatureEnabledForIUri(
/*5814*/ INTERNETFEATURELIST FeatureEntry,
/*5815*/ DWORD dwFlags,
/*5816*/ IUri*pIUri,
/*5817*/ IInternetSecurityManagerEx2*pSecMgr
/*5818*/ );
/*5819*/ extern HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled(
/*5820*/ LPCWSTR szFromURL,
/*5821*/ LPCWSTR szToURL,
/*5822*/ IInternetSecurityManager*pSecMgr,
/*5823*/ DWORD dwFlags
/*5824*/ );
/*5827*/ extern HRESULT __stdcall CopyStgMedium(const STGMEDIUM*pcstgmedSrc,
/*5828*/ STGMEDIUM*pstgmedDest);
/*5829*/ extern HRESULT __stdcall CopyBindInfo(const BINDINFO*pcbiSrc,
/*5830*/ BINDINFO*pbiDest);
/*5831*/ extern void __stdcall ReleaseBindInfo(BINDINFO*pbindinfo);
/*5855*/ extern HRESULT __stdcall CoInternetCreateSecurityManager(IServiceProvider*pSP,IInternetSecurityManager**ppSM,DWORD dwReserved);
/*5857*/ extern HRESULT __stdcall CoInternetCreateZoneManager(IServiceProvider*pSP,IInternetZoneManager**ppZM,DWORD dwReserved);
/*5861*/ extern const IID CLSID_InternetSecurityManager;
/*5862*/ extern const IID CLSID_InternetZoneManager;
/*5864*/ extern const IID CLSID_PersistentZoneIdentifier;
/*5883*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
/*5884*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;
/*5893*/ extern const IID IID_IInternetSecurityMgrSite;
/*5911*/ typedef struct IInternetSecurityMgrSiteVtbl
/*5912*/ {
/*5913*/ 
/*5915*/ HRESULT(__stdcall*QueryInterface)(
/*5916*/ IInternetSecurityMgrSite*This,
/*5917*/ const IID*const riid,
/*5919*/ void**ppvObject);
/*5921*/ ULONG(__stdcall*AddRef)(
/*5922*/ IInternetSecurityMgrSite*This);
/*5924*/ ULONG(__stdcall*Release)(
/*5925*/ IInternetSecurityMgrSite*This);
/*5927*/ HRESULT(__stdcall*GetWindow)(
/*5928*/ IInternetSecurityMgrSite*This,
/*5929*/ HWND*phwnd);
/*5931*/ HRESULT(__stdcall*EnableModeless)(
/*5932*/ IInternetSecurityMgrSite*This,
/*5933*/ BOOL fEnable);
/*5935*/ 
/*5936*/ }IInternetSecurityMgrSiteVtbl;
/*5938*/ struct IInternetSecurityMgrSite
/*5939*/ {
/*5940*/ struct IInternetSecurityMgrSiteVtbl*lpVtbl;
/*5941*/ };
/*5983*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
/*5984*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;
/*6004*/ typedef
/*6005*/ enum __MIDL_IInternetSecurityManager_0001
/*6006*/ {PUAF_DEFAULT=0,
/*6007*/ PUAF_NOUI=0x1,
/*6008*/ PUAF_ISFILE=0x2,
/*6009*/ PUAF_WARN_IF_DENIED=0x4,
/*6010*/ PUAF_FORCEUI_FOREGROUND=0x8,
/*6011*/ PUAF_CHECK_TIFS=0x10,
/*6012*/ PUAF_DONTCHECKBOXINDIALOG=0x20,
/*6013*/ PUAF_TRUSTED=0x40,
/*6014*/ PUAF_ACCEPT_WILDCARD_SCHEME=0x80,
/*6015*/ PUAF_ENFORCERESTRICTED=0x100,
/*6016*/ PUAF_NOSAVEDFILECHECK=0x200,
/*6017*/ PUAF_REQUIRESAVEDFILECHECK=0x400,
/*6018*/ PUAF_DONT_USE_CACHE=0x1000,
/*6019*/ PUAF_RESERVED1=0x2000,
/*6020*/ PUAF_RESERVED2=0x4000,
/*6021*/ PUAF_LMZ_UNLOCKED=0x10000,
/*6022*/ PUAF_LMZ_LOCKED=0x20000,
/*6023*/ PUAF_DEFAULTZONEPOL=0x40000,
/*6024*/ PUAF_NPL_USE_LOCKED_IF_RESTRICTED=0x80000,
/*6025*/ PUAF_NOUIIFLOCKED=0x100000,
/*6026*/ PUAF_DRAGPROTOCOLCHECK=0x200000
/*6027*/ }PUAF;
/*6029*/ typedef
/*6030*/ enum __MIDL_IInternetSecurityManager_0002
/*6031*/ {PUAFOUT_DEFAULT=0,
/*6032*/ PUAFOUT_ISLOCKZONEPOLICY=0x1
/*6033*/ }PUAFOUT;
/*6041*/ typedef
/*6042*/ enum __MIDL_IInternetSecurityManager_0003
/*6043*/ {SZM_CREATE=0,
/*6044*/ SZM_DELETE=0x1
/*6045*/ }SZM_FLAGS;
/*6062*/ extern const IID IID_IInternetSecurityManager;
/*6120*/ typedef struct IInternetSecurityManagerVtbl
/*6121*/ {
/*6122*/ 
/*6124*/ HRESULT(__stdcall*QueryInterface)(
/*6125*/ IInternetSecurityManager*This,
/*6126*/ const IID*const riid,
/*6128*/ void**ppvObject);
/*6130*/ ULONG(__stdcall*AddRef)(
/*6131*/ IInternetSecurityManager*This);
/*6133*/ ULONG(__stdcall*Release)(
/*6134*/ IInternetSecurityManager*This);
/*6136*/ HRESULT(__stdcall*SetSecuritySite)(
/*6137*/ IInternetSecurityManager*This,
/*6138*/ IInternetSecurityMgrSite*pSite);
/*6140*/ HRESULT(__stdcall*GetSecuritySite)(
/*6141*/ IInternetSecurityManager*This,
/*6142*/ IInternetSecurityMgrSite**ppSite);
/*6144*/ HRESULT(__stdcall*MapUrlToZone)(
/*6145*/ IInternetSecurityManager*This,
/*6146*/ LPCWSTR pwszUrl,
/*6147*/ DWORD*pdwZone,
/*6148*/ DWORD dwFlags);
/*6150*/ HRESULT(__stdcall*GetSecurityId)(
/*6151*/ IInternetSecurityManager*This,
/*6152*/ LPCWSTR pwszUrl,
/*6153*/ BYTE*pbSecurityId,
/*6154*/ DWORD*pcbSecurityId,
/*6155*/ DWORD_PTR dwReserved);
/*6157*/ HRESULT(__stdcall*ProcessUrlAction)(
/*6158*/ IInternetSecurityManager*This,
/*6159*/ LPCWSTR pwszUrl,
/*6160*/ DWORD dwAction,
/*6161*/ BYTE*pPolicy,
/*6162*/ DWORD cbPolicy,
/*6163*/ BYTE*pContext,
/*6164*/ DWORD cbContext,
/*6165*/ DWORD dwFlags,
/*6166*/ DWORD dwReserved);
/*6168*/ HRESULT(__stdcall*QueryCustomPolicy)(
/*6169*/ IInternetSecurityManager*This,
/*6170*/ LPCWSTR pwszUrl,
/*6171*/ const GUID*const guidKey,
/*6172*/ BYTE**ppPolicy,
/*6173*/ DWORD*pcbPolicy,
/*6174*/ BYTE*pContext,
/*6175*/ DWORD cbContext,
/*6176*/ DWORD dwReserved);
/*6178*/ HRESULT(__stdcall*SetZoneMapping)(
/*6179*/ IInternetSecurityManager*This,
/*6180*/ DWORD dwZone,
/*6181*/ LPCWSTR lpszPattern,
/*6182*/ DWORD dwFlags);
/*6184*/ HRESULT(__stdcall*GetZoneMappings)(
/*6185*/ IInternetSecurityManager*This,
/*6186*/ DWORD dwZone,
/*6187*/ IEnumString**ppenumString,
/*6188*/ DWORD dwFlags);
/*6190*/ 
/*6191*/ }IInternetSecurityManagerVtbl;
/*6193*/ struct IInternetSecurityManager
/*6194*/ {
/*6195*/ struct IInternetSecurityManagerVtbl*lpVtbl;
/*6196*/ };
/*6257*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
/*6258*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;
/*6272*/ extern const IID IID_IInternetSecurityManagerEx;
/*6295*/ typedef struct IInternetSecurityManagerExVtbl
/*6296*/ {
/*6297*/ 
/*6299*/ HRESULT(__stdcall*QueryInterface)(
/*6300*/ IInternetSecurityManagerEx*This,
/*6301*/ const IID*const riid,
/*6303*/ void**ppvObject);
/*6305*/ ULONG(__stdcall*AddRef)(
/*6306*/ IInternetSecurityManagerEx*This);
/*6308*/ ULONG(__stdcall*Release)(
/*6309*/ IInternetSecurityManagerEx*This);
/*6311*/ HRESULT(__stdcall*SetSecuritySite)(
/*6312*/ IInternetSecurityManagerEx*This,
/*6313*/ IInternetSecurityMgrSite*pSite);
/*6315*/ HRESULT(__stdcall*GetSecuritySite)(
/*6316*/ IInternetSecurityManagerEx*This,
/*6317*/ IInternetSecurityMgrSite**ppSite);
/*6319*/ HRESULT(__stdcall*MapUrlToZone)(
/*6320*/ IInternetSecurityManagerEx*This,
/*6321*/ LPCWSTR pwszUrl,
/*6322*/ DWORD*pdwZone,
/*6323*/ DWORD dwFlags);
/*6325*/ HRESULT(__stdcall*GetSecurityId)(
/*6326*/ IInternetSecurityManagerEx*This,
/*6327*/ LPCWSTR pwszUrl,
/*6328*/ BYTE*pbSecurityId,
/*6329*/ DWORD*pcbSecurityId,
/*6330*/ DWORD_PTR dwReserved);
/*6332*/ HRESULT(__stdcall*ProcessUrlAction)(
/*6333*/ IInternetSecurityManagerEx*This,
/*6334*/ LPCWSTR pwszUrl,
/*6335*/ DWORD dwAction,
/*6336*/ BYTE*pPolicy,
/*6337*/ DWORD cbPolicy,
/*6338*/ BYTE*pContext,
/*6339*/ DWORD cbContext,
/*6340*/ DWORD dwFlags,
/*6341*/ DWORD dwReserved);
/*6343*/ HRESULT(__stdcall*QueryCustomPolicy)(
/*6344*/ IInternetSecurityManagerEx*This,
/*6345*/ LPCWSTR pwszUrl,
/*6346*/ const GUID*const guidKey,
/*6347*/ BYTE**ppPolicy,
/*6348*/ DWORD*pcbPolicy,
/*6349*/ BYTE*pContext,
/*6350*/ DWORD cbContext,
/*6351*/ DWORD dwReserved);
/*6353*/ HRESULT(__stdcall*SetZoneMapping)(
/*6354*/ IInternetSecurityManagerEx*This,
/*6355*/ DWORD dwZone,
/*6356*/ LPCWSTR lpszPattern,
/*6357*/ DWORD dwFlags);
/*6359*/ HRESULT(__stdcall*GetZoneMappings)(
/*6360*/ IInternetSecurityManagerEx*This,
/*6361*/ DWORD dwZone,
/*6362*/ IEnumString**ppenumString,
/*6363*/ DWORD dwFlags);
/*6365*/ HRESULT(__stdcall*ProcessUrlActionEx)(
/*6366*/ IInternetSecurityManagerEx*This,
/*6367*/ LPCWSTR pwszUrl,
/*6368*/ DWORD dwAction,
/*6369*/ BYTE*pPolicy,
/*6370*/ DWORD cbPolicy,
/*6371*/ BYTE*pContext,
/*6372*/ DWORD cbContext,
/*6373*/ DWORD dwFlags,
/*6374*/ DWORD dwReserved,
/*6375*/ DWORD*pdwOutFlags);
/*6377*/ 
/*6378*/ }IInternetSecurityManagerExVtbl;
/*6380*/ struct IInternetSecurityManagerEx
/*6381*/ {
/*6382*/ struct IInternetSecurityManagerExVtbl*lpVtbl;
/*6383*/ };
/*6449*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
/*6450*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;
/*6459*/ extern const IID IID_IInternetSecurityManagerEx2;
/*6504*/ typedef struct IInternetSecurityManagerEx2Vtbl
/*6505*/ {
/*6506*/ 
/*6508*/ HRESULT(__stdcall*QueryInterface)(
/*6509*/ IInternetSecurityManagerEx2*This,
/*6510*/ const IID*const riid,
/*6512*/ void**ppvObject);
/*6514*/ ULONG(__stdcall*AddRef)(
/*6515*/ IInternetSecurityManagerEx2*This);
/*6517*/ ULONG(__stdcall*Release)(
/*6518*/ IInternetSecurityManagerEx2*This);
/*6520*/ HRESULT(__stdcall*SetSecuritySite)(
/*6521*/ IInternetSecurityManagerEx2*This,
/*6522*/ IInternetSecurityMgrSite*pSite);
/*6524*/ HRESULT(__stdcall*GetSecuritySite)(
/*6525*/ IInternetSecurityManagerEx2*This,
/*6526*/ IInternetSecurityMgrSite**ppSite);
/*6528*/ HRESULT(__stdcall*MapUrlToZone)(
/*6529*/ IInternetSecurityManagerEx2*This,
/*6530*/ LPCWSTR pwszUrl,
/*6531*/ DWORD*pdwZone,
/*6532*/ DWORD dwFlags);
/*6534*/ HRESULT(__stdcall*GetSecurityId)(
/*6535*/ IInternetSecurityManagerEx2*This,
/*6536*/ LPCWSTR pwszUrl,
/*6537*/ BYTE*pbSecurityId,
/*6538*/ DWORD*pcbSecurityId,
/*6539*/ DWORD_PTR dwReserved);
/*6541*/ HRESULT(__stdcall*ProcessUrlAction)(
/*6542*/ IInternetSecurityManagerEx2*This,
/*6543*/ LPCWSTR pwszUrl,
/*6544*/ DWORD dwAction,
/*6545*/ BYTE*pPolicy,
/*6546*/ DWORD cbPolicy,
/*6547*/ BYTE*pContext,
/*6548*/ DWORD cbContext,
/*6549*/ DWORD dwFlags,
/*6550*/ DWORD dwReserved);
/*6552*/ HRESULT(__stdcall*QueryCustomPolicy)(
/*6553*/ IInternetSecurityManagerEx2*This,
/*6554*/ LPCWSTR pwszUrl,
/*6555*/ const GUID*const guidKey,
/*6556*/ BYTE**ppPolicy,
/*6557*/ DWORD*pcbPolicy,
/*6558*/ BYTE*pContext,
/*6559*/ DWORD cbContext,
/*6560*/ DWORD dwReserved);
/*6562*/ HRESULT(__stdcall*SetZoneMapping)(
/*6563*/ IInternetSecurityManagerEx2*This,
/*6564*/ DWORD dwZone,
/*6565*/ LPCWSTR lpszPattern,
/*6566*/ DWORD dwFlags);
/*6568*/ HRESULT(__stdcall*GetZoneMappings)(
/*6569*/ IInternetSecurityManagerEx2*This,
/*6570*/ DWORD dwZone,
/*6571*/ IEnumString**ppenumString,
/*6572*/ DWORD dwFlags);
/*6574*/ HRESULT(__stdcall*ProcessUrlActionEx)(
/*6575*/ IInternetSecurityManagerEx2*This,
/*6576*/ LPCWSTR pwszUrl,
/*6577*/ DWORD dwAction,
/*6578*/ BYTE*pPolicy,
/*6579*/ DWORD cbPolicy,
/*6580*/ BYTE*pContext,
/*6581*/ DWORD cbContext,
/*6582*/ DWORD dwFlags,
/*6583*/ DWORD dwReserved,
/*6584*/ DWORD*pdwOutFlags);
/*6586*/ HRESULT(__stdcall*MapUrlToZoneEx2)(
/*6587*/ IInternetSecurityManagerEx2*This,
/*6588*/ IUri*pUri,
/*6589*/ DWORD*pdwZone,
/*6590*/ DWORD dwFlags,
/*6591*/ LPWSTR*ppwszMappedUrl,
/*6592*/ DWORD*pdwOutFlags);
/*6594*/ HRESULT(__stdcall*ProcessUrlActionEx2)(
/*6595*/ IInternetSecurityManagerEx2*This,
/*6596*/ IUri*pUri,
/*6597*/ DWORD dwAction,
/*6598*/ BYTE*pPolicy,
/*6599*/ DWORD cbPolicy,
/*6600*/ BYTE*pContext,
/*6601*/ DWORD cbContext,
/*6602*/ DWORD dwFlags,
/*6603*/ DWORD_PTR dwReserved,
/*6604*/ DWORD*pdwOutFlags);
/*6606*/ HRESULT(__stdcall*GetSecurityIdEx2)(
/*6607*/ IInternetSecurityManagerEx2*This,
/*6608*/ IUri*pUri,
/*6609*/ BYTE*pbSecurityId,
/*6610*/ DWORD*pcbSecurityId,
/*6611*/ DWORD_PTR dwReserved);
/*6613*/ HRESULT(__stdcall*QueryCustomPolicyEx2)(
/*6614*/ IInternetSecurityManagerEx2*This,
/*6615*/ IUri*pUri,
/*6616*/ const GUID*const guidKey,
/*6617*/ BYTE**ppPolicy,
/*6618*/ DWORD*pcbPolicy,
/*6619*/ BYTE*pContext,
/*6620*/ DWORD cbContext,
/*6621*/ DWORD_PTR dwReserved);
/*6623*/ 
/*6624*/ }IInternetSecurityManagerEx2Vtbl;
/*6626*/ struct IInternetSecurityManagerEx2
/*6627*/ {
/*6628*/ struct IInternetSecurityManagerEx2Vtbl*lpVtbl;
/*6629*/ };
/*6706*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
/*6707*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;
/*6716*/ extern const IID IID_IZoneIdentifier;
/*6736*/ typedef struct IZoneIdentifierVtbl
/*6737*/ {
/*6738*/ 
/*6740*/ HRESULT(__stdcall*QueryInterface)(
/*6741*/ IZoneIdentifier*This,
/*6742*/ const IID*const riid,
/*6744*/ void**ppvObject);
/*6746*/ ULONG(__stdcall*AddRef)(
/*6747*/ IZoneIdentifier*This);
/*6749*/ ULONG(__stdcall*Release)(
/*6750*/ IZoneIdentifier*This);
/*6752*/ HRESULT(__stdcall*GetId)(
/*6753*/ IZoneIdentifier*This,
/*6754*/ DWORD*pdwZone);
/*6756*/ HRESULT(__stdcall*SetId)(
/*6757*/ IZoneIdentifier*This,
/*6758*/ DWORD dwZone);
/*6760*/ HRESULT(__stdcall*Remove)(
/*6761*/ IZoneIdentifier*This);
/*6763*/ 
/*6764*/ }IZoneIdentifierVtbl;
/*6766*/ struct IZoneIdentifier
/*6767*/ {
/*6768*/ struct IZoneIdentifierVtbl*lpVtbl;
/*6769*/ };
/*6817*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
/*6818*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;
/*6827*/ extern const IID IID_IInternetHostSecurityManager;
/*6861*/ typedef struct IInternetHostSecurityManagerVtbl
/*6862*/ {
/*6863*/ 
/*6865*/ HRESULT(__stdcall*QueryInterface)(
/*6866*/ IInternetHostSecurityManager*This,
/*6867*/ const IID*const riid,
/*6869*/ void**ppvObject);
/*6871*/ ULONG(__stdcall*AddRef)(
/*6872*/ IInternetHostSecurityManager*This);
/*6874*/ ULONG(__stdcall*Release)(
/*6875*/ IInternetHostSecurityManager*This);
/*6877*/ HRESULT(__stdcall*GetSecurityId)(
/*6878*/ IInternetHostSecurityManager*This,
/*6879*/ BYTE*pbSecurityId,
/*6880*/ DWORD*pcbSecurityId,
/*6881*/ DWORD_PTR dwReserved);
/*6883*/ HRESULT(__stdcall*ProcessUrlAction)(
/*6884*/ IInternetHostSecurityManager*This,
/*6885*/ DWORD dwAction,
/*6886*/ BYTE*pPolicy,
/*6887*/ DWORD cbPolicy,
/*6888*/ BYTE*pContext,
/*6889*/ DWORD cbContext,
/*6890*/ DWORD dwFlags,
/*6891*/ DWORD dwReserved);
/*6893*/ HRESULT(__stdcall*QueryCustomPolicy)(
/*6894*/ IInternetHostSecurityManager*This,
/*6895*/ const GUID*const guidKey,
/*6896*/ BYTE**ppPolicy,
/*6897*/ DWORD*pcbPolicy,
/*6898*/ BYTE*pContext,
/*6899*/ DWORD cbContext,
/*6900*/ DWORD dwReserved);
/*6902*/ 
/*6903*/ }IInternetHostSecurityManagerVtbl;
/*6905*/ struct IInternetHostSecurityManager
/*6906*/ {
/*6907*/ struct IInternetHostSecurityManagerVtbl*lpVtbl;
/*6908*/ };
/*7153*/ extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED;
/*7159*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
/*7160*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;
/*7168*/ typedef IInternetZoneManager*LPURLZONEMANAGER;
/*7170*/ typedef
/*7171*/ enum tagURLZONE
/*7172*/ {URLZONE_INVALID=-1,
/*7173*/ URLZONE_PREDEFINED_MIN=0,
/*7174*/ URLZONE_LOCAL_MACHINE=0,
/*7175*/ URLZONE_INTRANET=(URLZONE_LOCAL_MACHINE+1),
/*7176*/ URLZONE_TRUSTED=(URLZONE_INTRANET+1),
/*7177*/ URLZONE_INTERNET=(URLZONE_TRUSTED+1),
/*7178*/ URLZONE_UNTRUSTED=(URLZONE_INTERNET+1),
/*7179*/ URLZONE_PREDEFINED_MAX=999,
/*7180*/ URLZONE_USER_MIN=1000,
/*7181*/ URLZONE_USER_MAX=10000
/*7182*/ }URLZONE;
/*7186*/ typedef
/*7187*/ enum tagURLTEMPLATE
/*7188*/ {URLTEMPLATE_CUSTOM=0,
/*7189*/ URLTEMPLATE_PREDEFINED_MIN=0x10000,
/*7190*/ URLTEMPLATE_LOW=0x10000,
/*7191*/ URLTEMPLATE_MEDLOW=0x10500,
/*7192*/ URLTEMPLATE_MEDIUM=0x11000,
/*7193*/ URLTEMPLATE_MEDHIGH=0x11500,
/*7194*/ URLTEMPLATE_HIGH=0x12000,
/*7195*/ URLTEMPLATE_PREDEFINED_MAX=0x20000
/*7196*/ }URLTEMPLATE;
/*7199*/ enum __MIDL_IInternetZoneManager_0001
/*7200*/ {MAX_ZONE_PATH=260,
/*7201*/ MAX_ZONE_DESCRIPTION=200
/*7202*/ };
/*7203*/ typedef
/*7204*/ enum __MIDL_IInternetZoneManager_0002
/*7205*/ {ZAFLAGS_CUSTOM_EDIT=0x1,
/*7206*/ ZAFLAGS_ADD_SITES=0x2,
/*7207*/ ZAFLAGS_REQUIRE_VERIFICATION=0x4,
/*7208*/ ZAFLAGS_INCLUDE_PROXY_OVERRIDE=0x8,
/*7209*/ ZAFLAGS_INCLUDE_INTRANET_SITES=0x10,
/*7210*/ ZAFLAGS_NO_UI=0x20,
/*7211*/ ZAFLAGS_SUPPORTS_VERIFICATION=0x40,
/*7212*/ ZAFLAGS_UNC_AS_INTRANET=0x80,
/*7213*/ ZAFLAGS_DETECT_INTRANET=0x100,
/*7214*/ ZAFLAGS_USE_LOCKED_ZONES=0x10000,
/*7215*/ ZAFLAGS_VERIFY_TEMPLATE_SETTINGS=0x20000,
/*7216*/ ZAFLAGS_NO_CACHE=0x40000
/*7217*/ }ZAFLAGS;
/*7219*/ typedef struct _ZONEATTRIBUTES
/*7220*/ {
/*7221*/ ULONG cbSize;
/*7222*/ WCHAR szDisplayName[260];
/*7223*/ WCHAR szDescription[200];
/*7224*/ WCHAR szIconPath[260];
/*7225*/ DWORD dwTemplateMinLevel;
/*7226*/ DWORD dwTemplateRecommended;
/*7227*/ DWORD dwTemplateCurrentLevel;
/*7228*/ DWORD dwFlags;
/*7229*/ }ZONEATTRIBUTES;
/*7231*/ typedef struct _ZONEATTRIBUTES*LPZONEATTRIBUTES;
/*7249*/ typedef
/*7250*/ enum _URLZONEREG
/*7251*/ {URLZONEREG_DEFAULT=0,
/*7252*/ URLZONEREG_HKLM=(URLZONEREG_DEFAULT+1),
/*7253*/ URLZONEREG_HKCU=(URLZONEREG_HKLM+1)
/*7254*/ }URLZONEREG;
/*7287*/ extern const IID IID_IInternetZoneManager;
/*7366*/ typedef struct IInternetZoneManagerVtbl
/*7367*/ {
/*7368*/ 
/*7370*/ HRESULT(__stdcall*QueryInterface)(
/*7371*/ IInternetZoneManager*This,
/*7372*/ const IID*const riid,
/*7374*/ void**ppvObject);
/*7376*/ ULONG(__stdcall*AddRef)(
/*7377*/ IInternetZoneManager*This);
/*7379*/ ULONG(__stdcall*Release)(
/*7380*/ IInternetZoneManager*This);
/*7382*/ HRESULT(__stdcall*GetZoneAttributes)(
/*7383*/ IInternetZoneManager*This,
/*7384*/ DWORD dwZone,
/*7385*/ ZONEATTRIBUTES*pZoneAttributes);
/*7387*/ HRESULT(__stdcall*SetZoneAttributes)(
/*7388*/ IInternetZoneManager*This,
/*7389*/ DWORD dwZone,
/*7390*/ ZONEATTRIBUTES*pZoneAttributes);
/*7392*/ HRESULT(__stdcall*GetZoneCustomPolicy)(
/*7393*/ IInternetZoneManager*This,
/*7394*/ DWORD dwZone,
/*7395*/ const GUID*const guidKey,
/*7396*/ BYTE**ppPolicy,
/*7397*/ DWORD*pcbPolicy,
/*7398*/ URLZONEREG urlZoneReg);
/*7400*/ HRESULT(__stdcall*SetZoneCustomPolicy)(
/*7401*/ IInternetZoneManager*This,
/*7402*/ DWORD dwZone,
/*7403*/ const GUID*const guidKey,
/*7404*/ BYTE*pPolicy,
/*7405*/ DWORD cbPolicy,
/*7406*/ URLZONEREG urlZoneReg);
/*7408*/ HRESULT(__stdcall*GetZoneActionPolicy)(
/*7409*/ IInternetZoneManager*This,
/*7410*/ DWORD dwZone,
/*7411*/ DWORD dwAction,
/*7412*/ BYTE*pPolicy,
/*7413*/ DWORD cbPolicy,
/*7414*/ URLZONEREG urlZoneReg);
/*7416*/ HRESULT(__stdcall*SetZoneActionPolicy)(
/*7417*/ IInternetZoneManager*This,
/*7418*/ DWORD dwZone,
/*7419*/ DWORD dwAction,
/*7420*/ BYTE*pPolicy,
/*7421*/ DWORD cbPolicy,
/*7422*/ URLZONEREG urlZoneReg);
/*7424*/ HRESULT(__stdcall*PromptAction)(
/*7425*/ IInternetZoneManager*This,
/*7426*/ DWORD dwAction,
/*7427*/ HWND hwndParent,
/*7428*/ LPCWSTR pwszUrl,
/*7429*/ LPCWSTR pwszText,
/*7430*/ DWORD dwPromptFlags);
/*7432*/ HRESULT(__stdcall*LogAction)(
/*7433*/ IInternetZoneManager*This,
/*7434*/ DWORD dwAction,
/*7435*/ LPCWSTR pwszUrl,
/*7436*/ LPCWSTR pwszText,
/*7437*/ DWORD dwLogFlags);
/*7439*/ HRESULT(__stdcall*CreateZoneEnumerator)(
/*7440*/ IInternetZoneManager*This,
/*7441*/ DWORD*pdwEnum,
/*7442*/ DWORD*pdwCount,
/*7443*/ DWORD dwFlags);
/*7445*/ HRESULT(__stdcall*GetZoneAt)(
/*7446*/ IInternetZoneManager*This,
/*7447*/ DWORD dwEnum,
/*7448*/ DWORD dwIndex,
/*7449*/ DWORD*pdwZone);
/*7451*/ HRESULT(__stdcall*DestroyZoneEnumerator)(
/*7452*/ IInternetZoneManager*This,
/*7453*/ DWORD dwEnum);
/*7455*/ HRESULT(__stdcall*CopyTemplatePoliciesToZone)(
/*7456*/ IInternetZoneManager*This,
/*7457*/ DWORD dwTemplate,
/*7458*/ DWORD dwZone,
/*7459*/ DWORD dwReserved);
/*7461*/ 
/*7462*/ }IInternetZoneManagerVtbl;
/*7464*/ struct IInternetZoneManager
/*7465*/ {
/*7466*/ struct IInternetZoneManagerVtbl*lpVtbl;
/*7467*/ };
/*7540*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec;
/*7541*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec;
/*7558*/ extern const IID IID_IInternetZoneManagerEx;
/*7586*/ typedef struct IInternetZoneManagerExVtbl
/*7587*/ {
/*7588*/ 
/*7590*/ HRESULT(__stdcall*QueryInterface)(
/*7591*/ IInternetZoneManagerEx*This,
/*7592*/ const IID*const riid,
/*7594*/ void**ppvObject);
/*7596*/ ULONG(__stdcall*AddRef)(
/*7597*/ IInternetZoneManagerEx*This);
/*7599*/ ULONG(__stdcall*Release)(
/*7600*/ IInternetZoneManagerEx*This);
/*7602*/ HRESULT(__stdcall*GetZoneAttributes)(
/*7603*/ IInternetZoneManagerEx*This,
/*7604*/ DWORD dwZone,
/*7605*/ ZONEATTRIBUTES*pZoneAttributes);
/*7607*/ HRESULT(__stdcall*SetZoneAttributes)(
/*7608*/ IInternetZoneManagerEx*This,
/*7609*/ DWORD dwZone,
/*7610*/ ZONEATTRIBUTES*pZoneAttributes);
/*7612*/ HRESULT(__stdcall*GetZoneCustomPolicy)(
/*7613*/ IInternetZoneManagerEx*This,
/*7614*/ DWORD dwZone,
/*7615*/ const GUID*const guidKey,
/*7616*/ BYTE**ppPolicy,
/*7617*/ DWORD*pcbPolicy,
/*7618*/ URLZONEREG urlZoneReg);
/*7620*/ HRESULT(__stdcall*SetZoneCustomPolicy)(
/*7621*/ IInternetZoneManagerEx*This,
/*7622*/ DWORD dwZone,
/*7623*/ const GUID*const guidKey,
/*7624*/ BYTE*pPolicy,
/*7625*/ DWORD cbPolicy,
/*7626*/ URLZONEREG urlZoneReg);
/*7628*/ HRESULT(__stdcall*GetZoneActionPolicy)(
/*7629*/ IInternetZoneManagerEx*This,
/*7630*/ DWORD dwZone,
/*7631*/ DWORD dwAction,
/*7632*/ BYTE*pPolicy,
/*7633*/ DWORD cbPolicy,
/*7634*/ URLZONEREG urlZoneReg);
/*7636*/ HRESULT(__stdcall*SetZoneActionPolicy)(
/*7637*/ IInternetZoneManagerEx*This,
/*7638*/ DWORD dwZone,
/*7639*/ DWORD dwAction,
/*7640*/ BYTE*pPolicy,
/*7641*/ DWORD cbPolicy,
/*7642*/ URLZONEREG urlZoneReg);
/*7644*/ HRESULT(__stdcall*PromptAction)(
/*7645*/ IInternetZoneManagerEx*This,
/*7646*/ DWORD dwAction,
/*7647*/ HWND hwndParent,
/*7648*/ LPCWSTR pwszUrl,
/*7649*/ LPCWSTR pwszText,
/*7650*/ DWORD dwPromptFlags);
/*7652*/ HRESULT(__stdcall*LogAction)(
/*7653*/ IInternetZoneManagerEx*This,
/*7654*/ DWORD dwAction,
/*7655*/ LPCWSTR pwszUrl,
/*7656*/ LPCWSTR pwszText,
/*7657*/ DWORD dwLogFlags);
/*7659*/ HRESULT(__stdcall*CreateZoneEnumerator)(
/*7660*/ IInternetZoneManagerEx*This,
/*7661*/ DWORD*pdwEnum,
/*7662*/ DWORD*pdwCount,
/*7663*/ DWORD dwFlags);
/*7665*/ HRESULT(__stdcall*GetZoneAt)(
/*7666*/ IInternetZoneManagerEx*This,
/*7667*/ DWORD dwEnum,
/*7668*/ DWORD dwIndex,
/*7669*/ DWORD*pdwZone);
/*7671*/ HRESULT(__stdcall*DestroyZoneEnumerator)(
/*7672*/ IInternetZoneManagerEx*This,
/*7673*/ DWORD dwEnum);
/*7675*/ HRESULT(__stdcall*CopyTemplatePoliciesToZone)(
/*7676*/ IInternetZoneManagerEx*This,
/*7677*/ DWORD dwTemplate,
/*7678*/ DWORD dwZone,
/*7679*/ DWORD dwReserved);
/*7681*/ HRESULT(__stdcall*GetZoneActionPolicyEx)(
/*7682*/ IInternetZoneManagerEx*This,
/*7683*/ DWORD dwZone,
/*7684*/ DWORD dwAction,
/*7685*/ BYTE*pPolicy,
/*7686*/ DWORD cbPolicy,
/*7687*/ URLZONEREG urlZoneReg,
/*7688*/ DWORD dwFlags);
/*7690*/ HRESULT(__stdcall*SetZoneActionPolicyEx)(
/*7691*/ IInternetZoneManagerEx*This,
/*7692*/ DWORD dwZone,
/*7693*/ DWORD dwAction,
/*7694*/ BYTE*pPolicy,
/*7695*/ DWORD cbPolicy,
/*7696*/ URLZONEREG urlZoneReg,
/*7697*/ DWORD dwFlags);
/*7699*/ 
/*7700*/ }IInternetZoneManagerExVtbl;
/*7702*/ struct IInternetZoneManagerEx
/*7703*/ {
/*7704*/ struct IInternetZoneManagerExVtbl*lpVtbl;
/*7705*/ };
/*7788*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec;
/*7789*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec;
/*7801*/ extern const IID IID_IInternetZoneManagerEx2;
/*7832*/ typedef struct IInternetZoneManagerEx2Vtbl
/*7833*/ {
/*7834*/ 
/*7836*/ HRESULT(__stdcall*QueryInterface)(
/*7837*/ IInternetZoneManagerEx2*This,
/*7838*/ const IID*const riid,
/*7840*/ void**ppvObject);
/*7842*/ ULONG(__stdcall*AddRef)(
/*7843*/ IInternetZoneManagerEx2*This);
/*7845*/ ULONG(__stdcall*Release)(
/*7846*/ IInternetZoneManagerEx2*This);
/*7848*/ HRESULT(__stdcall*GetZoneAttributes)(
/*7849*/ IInternetZoneManagerEx2*This,
/*7850*/ DWORD dwZone,
/*7851*/ ZONEATTRIBUTES*pZoneAttributes);
/*7853*/ HRESULT(__stdcall*SetZoneAttributes)(
/*7854*/ IInternetZoneManagerEx2*This,
/*7855*/ DWORD dwZone,
/*7856*/ ZONEATTRIBUTES*pZoneAttributes);
/*7858*/ HRESULT(__stdcall*GetZoneCustomPolicy)(
/*7859*/ IInternetZoneManagerEx2*This,
/*7860*/ DWORD dwZone,
/*7861*/ const GUID*const guidKey,
/*7862*/ BYTE**ppPolicy,
/*7863*/ DWORD*pcbPolicy,
/*7864*/ URLZONEREG urlZoneReg);
/*7866*/ HRESULT(__stdcall*SetZoneCustomPolicy)(
/*7867*/ IInternetZoneManagerEx2*This,
/*7868*/ DWORD dwZone,
/*7869*/ const GUID*const guidKey,
/*7870*/ BYTE*pPolicy,
/*7871*/ DWORD cbPolicy,
/*7872*/ URLZONEREG urlZoneReg);
/*7874*/ HRESULT(__stdcall*GetZoneActionPolicy)(
/*7875*/ IInternetZoneManagerEx2*This,
/*7876*/ DWORD dwZone,
/*7877*/ DWORD dwAction,
/*7878*/ BYTE*pPolicy,
/*7879*/ DWORD cbPolicy,
/*7880*/ URLZONEREG urlZoneReg);
/*7882*/ HRESULT(__stdcall*SetZoneActionPolicy)(
/*7883*/ IInternetZoneManagerEx2*This,
/*7884*/ DWORD dwZone,
/*7885*/ DWORD dwAction,
/*7886*/ BYTE*pPolicy,
/*7887*/ DWORD cbPolicy,
/*7888*/ URLZONEREG urlZoneReg);
/*7890*/ HRESULT(__stdcall*PromptAction)(
/*7891*/ IInternetZoneManagerEx2*This,
/*7892*/ DWORD dwAction,
/*7893*/ HWND hwndParent,
/*7894*/ LPCWSTR pwszUrl,
/*7895*/ LPCWSTR pwszText,
/*7896*/ DWORD dwPromptFlags);
/*7898*/ HRESULT(__stdcall*LogAction)(
/*7899*/ IInternetZoneManagerEx2*This,
/*7900*/ DWORD dwAction,
/*7901*/ LPCWSTR pwszUrl,
/*7902*/ LPCWSTR pwszText,
/*7903*/ DWORD dwLogFlags);
/*7905*/ HRESULT(__stdcall*CreateZoneEnumerator)(
/*7906*/ IInternetZoneManagerEx2*This,
/*7907*/ DWORD*pdwEnum,
/*7908*/ DWORD*pdwCount,
/*7909*/ DWORD dwFlags);
/*7911*/ HRESULT(__stdcall*GetZoneAt)(
/*7912*/ IInternetZoneManagerEx2*This,
/*7913*/ DWORD dwEnum,
/*7914*/ DWORD dwIndex,
/*7915*/ DWORD*pdwZone);
/*7917*/ HRESULT(__stdcall*DestroyZoneEnumerator)(
/*7918*/ IInternetZoneManagerEx2*This,
/*7919*/ DWORD dwEnum);
/*7921*/ HRESULT(__stdcall*CopyTemplatePoliciesToZone)(
/*7922*/ IInternetZoneManagerEx2*This,
/*7923*/ DWORD dwTemplate,
/*7924*/ DWORD dwZone,
/*7925*/ DWORD dwReserved);
/*7927*/ HRESULT(__stdcall*GetZoneActionPolicyEx)(
/*7928*/ IInternetZoneManagerEx2*This,
/*7929*/ DWORD dwZone,
/*7930*/ DWORD dwAction,
/*7931*/ BYTE*pPolicy,
/*7932*/ DWORD cbPolicy,
/*7933*/ URLZONEREG urlZoneReg,
/*7934*/ DWORD dwFlags);
/*7936*/ HRESULT(__stdcall*SetZoneActionPolicyEx)(
/*7937*/ IInternetZoneManagerEx2*This,
/*7938*/ DWORD dwZone,
/*7939*/ DWORD dwAction,
/*7940*/ BYTE*pPolicy,
/*7941*/ DWORD cbPolicy,
/*7942*/ URLZONEREG urlZoneReg,
/*7943*/ DWORD dwFlags);
/*7945*/ HRESULT(__stdcall*GetZoneAttributesEx)(
/*7946*/ IInternetZoneManagerEx2*This,
/*7947*/ DWORD dwZone,
/*7948*/ ZONEATTRIBUTES*pZoneAttributes,
/*7949*/ DWORD dwFlags);
/*7951*/ HRESULT(__stdcall*GetZoneSecurityState)(
/*7952*/ IInternetZoneManagerEx2*This,
/*7953*/ DWORD dwZoneIndex,
/*7954*/ BOOL fRespectPolicy,
/*7955*/ LPDWORD pdwState,
/*7956*/ BOOL*pfPolicyEncountered);
/*7958*/ HRESULT(__stdcall*GetIESecurityState)(
/*7959*/ IInternetZoneManagerEx2*This,
/*7960*/ BOOL fRespectPolicy,
/*7961*/ LPDWORD pdwState,
/*7962*/ BOOL*pfPolicyEncountered,
/*7963*/ BOOL fNoCache);
/*7965*/ HRESULT(__stdcall*FixUnsecureSettings)(
/*7966*/ IInternetZoneManagerEx2*This);
/*7968*/ 
/*7969*/ }IInternetZoneManagerEx2Vtbl;
/*7971*/ struct IInternetZoneManagerEx2
/*7972*/ {
/*7973*/ struct IInternetZoneManagerEx2Vtbl*lpVtbl;
/*7974*/ };
/*8063*/ extern const IID CLSID_SoftDistExt;
/*8078*/ typedef struct _tagCODEBASEHOLD
/*8079*/ {
/*8080*/ ULONG cbSize;
/*8081*/ LPWSTR szDistUnit;
/*8082*/ LPWSTR szCodeBase;
/*8083*/ DWORD dwVersionMS;
/*8084*/ DWORD dwVersionLS;
/*8085*/ DWORD dwStyle;
/*8086*/ }CODEBASEHOLD;
/*8088*/ typedef struct _tagCODEBASEHOLD*LPCODEBASEHOLD;
/*8090*/ typedef struct _tagSOFTDISTINFO
/*8091*/ {
/*8092*/ ULONG cbSize;
/*8093*/ DWORD dwFlags;
/*8094*/ DWORD dwAdState;
/*8095*/ LPWSTR szTitle;
/*8096*/ LPWSTR szAbstract;
/*8097*/ LPWSTR szHREF;
/*8098*/ DWORD dwInstalledVersionMS;
/*8099*/ DWORD dwInstalledVersionLS;
/*8100*/ DWORD dwUpdateVersionMS;
/*8101*/ DWORD dwUpdateVersionLS;
/*8102*/ DWORD dwAdvertisedVersionMS;
/*8103*/ DWORD dwAdvertisedVersionLS;
/*8104*/ DWORD dwReserved;
/*8105*/ }SOFTDISTINFO;
/*8107*/ typedef struct _tagSOFTDISTINFO*LPSOFTDISTINFO;
/*8111*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec;
/*8112*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec;
/*8121*/ extern const IID IID_ISoftDistExt;
/*8152*/ typedef struct ISoftDistExtVtbl
/*8153*/ {
/*8154*/ 
/*8156*/ HRESULT(__stdcall*QueryInterface)(
/*8157*/ ISoftDistExt*This,
/*8158*/ const IID*const riid,
/*8160*/ void**ppvObject);
/*8162*/ ULONG(__stdcall*AddRef)(
/*8163*/ ISoftDistExt*This);
/*8165*/ ULONG(__stdcall*Release)(
/*8166*/ ISoftDistExt*This);
/*8168*/ HRESULT(__stdcall*ProcessSoftDist)(
/*8169*/ ISoftDistExt*This,
/*8170*/ LPCWSTR szCDFURL,
/*8171*/ IXMLElement*pSoftDistElement,
/*8172*/ LPSOFTDISTINFO lpsdi);
/*8174*/ HRESULT(__stdcall*GetFirstCodeBase)(
/*8175*/ ISoftDistExt*This,
/*8176*/ LPWSTR*szCodeBase,
/*8177*/ LPDWORD dwMaxSize);
/*8179*/ HRESULT(__stdcall*GetNextCodeBase)(
/*8180*/ ISoftDistExt*This,
/*8181*/ LPWSTR*szCodeBase,
/*8182*/ LPDWORD dwMaxSize);
/*8184*/ HRESULT(__stdcall*AsyncInstallDistributionUnit)(
/*8185*/ ISoftDistExt*This,
/*8186*/ IBindCtx*pbc,
/*8187*/ LPVOID pvReserved,
/*8188*/ DWORD flags,
/*8189*/ LPCODEBASEHOLD lpcbh);
/*8191*/ 
/*8192*/ }ISoftDistExtVtbl;
/*8194*/ struct ISoftDistExt
/*8195*/ {
/*8196*/ struct ISoftDistExtVtbl*lpVtbl;
/*8197*/ };
/*8240*/ extern HRESULT __stdcall GetSoftwareUpdateInfo(LPCWSTR szDistUnit,LPSOFTDISTINFO psdi);
/*8241*/ extern HRESULT __stdcall SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit,DWORD dwAdState,DWORD dwAdvertisedVersionMS,DWORD dwAdvertisedVersionLS);
/*8247*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec;
/*8248*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec;
/*8256*/ typedef ICatalogFileInfo*LPCATALOGFILEINFO;
/*8259*/ extern const IID IID_ICatalogFileInfo;
/*8277*/ typedef struct ICatalogFileInfoVtbl
/*8278*/ {
/*8279*/ 
/*8281*/ HRESULT(__stdcall*QueryInterface)(
/*8282*/ ICatalogFileInfo*This,
/*8283*/ const IID*const riid,
/*8285*/ void**ppvObject);
/*8287*/ ULONG(__stdcall*AddRef)(
/*8288*/ ICatalogFileInfo*This);
/*8290*/ ULONG(__stdcall*Release)(
/*8291*/ ICatalogFileInfo*This);
/*8293*/ HRESULT(__stdcall*GetCatalogFile)(
/*8294*/ ICatalogFileInfo*This,
/*8295*/ LPSTR*ppszCatalogFile);
/*8297*/ HRESULT(__stdcall*GetJavaTrust)(
/*8298*/ ICatalogFileInfo*This,
/*8299*/ void**ppJavaTrust);
/*8301*/ 
/*8302*/ }ICatalogFileInfoVtbl;
/*8304*/ struct ICatalogFileInfo
/*8305*/ {
/*8306*/ struct ICatalogFileInfoVtbl*lpVtbl;
/*8307*/ };
/*8349*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
/*8350*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;
/*8358*/ typedef IDataFilter*LPDATAFILTER;
/*8361*/ extern const IID IID_IDataFilter;
/*8398*/ typedef struct IDataFilterVtbl
/*8399*/ {
/*8400*/ 
/*8402*/ HRESULT(__stdcall*QueryInterface)(
/*8403*/ IDataFilter*This,
/*8404*/ const IID*const riid,
/*8406*/ void**ppvObject);
/*8408*/ ULONG(__stdcall*AddRef)(
/*8409*/ IDataFilter*This);
/*8411*/ ULONG(__stdcall*Release)(
/*8412*/ IDataFilter*This);
/*8414*/ HRESULT(__stdcall*DoEncode)(
/*8415*/ IDataFilter*This,
/*8416*/ DWORD dwFlags,
/*8417*/ LONG lInBufferSize,
/*8418*/ BYTE*pbInBuffer,
/*8419*/ LONG lOutBufferSize,
/*8420*/ BYTE*pbOutBuffer,
/*8421*/ LONG lInBytesAvailable,
/*8422*/ LONG*plInBytesRead,
/*8423*/ LONG*plOutBytesWritten,
/*8424*/ DWORD dwReserved);
/*8426*/ HRESULT(__stdcall*DoDecode)(
/*8427*/ IDataFilter*This,
/*8428*/ DWORD dwFlags,
/*8429*/ LONG lInBufferSize,
/*8430*/ BYTE*pbInBuffer,
/*8431*/ LONG lOutBufferSize,
/*8432*/ BYTE*pbOutBuffer,
/*8433*/ LONG lInBytesAvailable,
/*8434*/ LONG*plInBytesRead,
/*8435*/ LONG*plOutBytesWritten,
/*8436*/ DWORD dwReserved);
/*8438*/ HRESULT(__stdcall*SetEncodingLevel)(
/*8439*/ IDataFilter*This,
/*8440*/ DWORD dwEncLevel);
/*8442*/ 
/*8443*/ }IDataFilterVtbl;
/*8445*/ struct IDataFilter
/*8446*/ {
/*8447*/ struct IDataFilterVtbl*lpVtbl;
/*8448*/ };
/*8491*/ typedef struct _tagPROTOCOLFILTERDATA
/*8492*/ {
/*8493*/ DWORD cbSize;
/*8494*/ IInternetProtocolSink*pProtocolSink;
/*8495*/ IInternetProtocol*pProtocol;
/*8496*/ IUnknown*pUnk;
/*8497*/ DWORD dwFilterFlags;
/*8498*/ }PROTOCOLFILTERDATA;
/*8502*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
/*8503*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;
/*8511*/ typedef IEncodingFilterFactory*LPENCODINGFILTERFACTORY;
/*8513*/ typedef struct _tagDATAINFO
/*8514*/ {
/*8515*/ ULONG ulTotalSize;
/*8516*/ ULONG ulavrPacketSize;
/*8517*/ ULONG ulConnectSpeed;
/*8518*/ ULONG ulProcessorSpeed;
/*8519*/ }DATAINFO;
/*8522*/ extern const IID IID_IEncodingFilterFactory;
/*8545*/ typedef struct IEncodingFilterFactoryVtbl
/*8546*/ {
/*8547*/ 
/*8549*/ HRESULT(__stdcall*QueryInterface)(
/*8550*/ IEncodingFilterFactory*This,
/*8551*/ const IID*const riid,
/*8553*/ void**ppvObject);
/*8555*/ ULONG(__stdcall*AddRef)(
/*8556*/ IEncodingFilterFactory*This);
/*8558*/ ULONG(__stdcall*Release)(
/*8559*/ IEncodingFilterFactory*This);
/*8561*/ HRESULT(__stdcall*FindBestFilter)(
/*8562*/ IEncodingFilterFactory*This,
/*8563*/ LPCWSTR pwzCodeIn,
/*8564*/ LPCWSTR pwzCodeOut,
/*8565*/ DATAINFO info,
/*8566*/ IDataFilter**ppDF);
/*8568*/ HRESULT(__stdcall*GetDefaultFilter)(
/*8569*/ IEncodingFilterFactory*This,
/*8570*/ LPCWSTR pwzCodeIn,
/*8571*/ LPCWSTR pwzCodeOut,
/*8572*/ IDataFilter**ppDF);
/*8574*/ 
/*8575*/ }IEncodingFilterFactoryVtbl;
/*8577*/ struct IEncodingFilterFactory
/*8578*/ {
/*8579*/ struct IEncodingFilterFactoryVtbl*lpVtbl;
/*8580*/ };
/*8621*/ BOOL typ IsLoggingEnabledA(typ LPCSTR pszUrl);
/*8622*/ BOOL typ IsLoggingEnabledW(typ LPCWSTR pwszUrl);
/*8628*/ typedef struct _tagHIT_LOGGING_INFO
/*8629*/ {
/*8630*/ DWORD dwStructSize;
/*8631*/ LPSTR lpszLoggedUrlName;
/*8632*/ SYSTEMTIME StartTime;
/*8633*/ SYSTEMTIME EndTime;
/*8634*/ LPSTR lpszExtendedInfo;
/*8635*/ }HIT_LOGGING_INFO;
/*8637*/ typedef struct _tagHIT_LOGGING_INFO*LPHIT_LOGGING_INFO;
/*8639*/ BOOL typ WriteHitLogging(typ LPHIT_LOGGING_INFO lpLogginginfo);
/*8641*/ struct CONFIRMSAFETY
/*8642*/ {
/*8643*/ CLSID clsid;
/*8644*/ IUnknown*pUnk;
/*8645*/ DWORD dwFlags;
/*8646*/ };
/*8647*/ extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;
/*8653*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec;
/*8654*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec;
/*8662*/ typedef IWrappedProtocol*LPIWRAPPEDPROTOCOL;
/*8665*/ extern const IID IID_IWrappedProtocol;
/*8681*/ typedef struct IWrappedProtocolVtbl
/*8682*/ {
/*8683*/ 
/*8685*/ HRESULT(__stdcall*QueryInterface)(
/*8686*/ IWrappedProtocol*This,
/*8687*/ const IID*const riid,
/*8689*/ void**ppvObject);
/*8691*/ ULONG(__stdcall*AddRef)(
/*8692*/ IWrappedProtocol*This);
/*8694*/ ULONG(__stdcall*Release)(
/*8695*/ IWrappedProtocol*This);
/*8697*/ HRESULT(__stdcall*GetWrapperCode)(
/*8698*/ IWrappedProtocol*This,
/*8699*/ LONG*pnCode,
/*8700*/ DWORD_PTR dwReserved);
/*8702*/ 
/*8703*/ }IWrappedProtocolVtbl;
/*8705*/ struct IWrappedProtocol
/*8706*/ {
/*8707*/ struct IWrappedProtocolVtbl*lpVtbl;
/*8708*/ };
/*8745*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec;
/*8746*/ extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec;
/*8750*/ unsigned long BSTR_UserSize(unsigned long*,unsigned long,BSTR*);
/*8751*/ unsigned char*BSTR_UserMarshal(unsigned long*,unsigned char*,BSTR*);
/*8752*/ unsigned char*BSTR_UserUnmarshal(unsigned long*,unsigned char*,BSTR*);
/*8753*/ void BSTR_UserFree(unsigned long*,BSTR*);
/*8755*/ unsigned long HWND_UserSize(unsigned long*,unsigned long,HWND*);
/*8756*/ unsigned char*HWND_UserMarshal(unsigned long*,unsigned char*,HWND*);
/*8757*/ unsigned char*HWND_UserUnmarshal(unsigned long*,unsigned char*,HWND*);
/*8758*/ void HWND_UserFree(unsigned long*,HWND*);
/*8760*/ unsigned long BSTR_UserSize64(unsigned long*,unsigned long,BSTR*);
/*8761*/ unsigned char*BSTR_UserMarshal64(unsigned long*,unsigned char*,BSTR*);
/*8762*/ unsigned char*BSTR_UserUnmarshal64(unsigned long*,unsigned char*,BSTR*);
/*8763*/ void BSTR_UserFree64(unsigned long*,BSTR*);
/*8765*/ unsigned long HWND_UserSize64(unsigned long*,unsigned long,HWND*);
/*8766*/ unsigned char*HWND_UserMarshal64(unsigned long*,unsigned char*,HWND*);
/*8767*/ unsigned char*HWND_UserUnmarshal64(unsigned long*,unsigned char*,HWND*);
/*8768*/ void HWND_UserFree64(unsigned long*,HWND*);
/*8770*/ HRESULT __stdcall IBinding_GetBindResult_Proxy(
/*8771*/ IBinding*This,
/*8772*/ CLSID*pclsidProtocol,
/*8773*/ DWORD*pdwResult,
/*8774*/ LPOLESTR*pszResult,
/*8775*/ DWORD*pdwReserved);
/*8778*/ HRESULT __stdcall IBinding_GetBindResult_Stub(
/*8779*/ IBinding*This,
/*8780*/ CLSID*pclsidProtocol,
/*8781*/ DWORD*pdwResult,
/*8782*/ LPOLESTR*pszResult,
/*8783*/ DWORD dwReserved);
/*8785*/ HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy(
/*8786*/ IBindStatusCallback*This,
/*8787*/ DWORD*grfBINDF,
/*8788*/ BINDINFO*pbindinfo);
/*8791*/ HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub(
/*8792*/ IBindStatusCallback*This,
/*8793*/ DWORD*grfBINDF,
/*8794*/ RemBINDINFO*pbindinfo,
/*8795*/ RemSTGMEDIUM*pstgmed);
/*8797*/ HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy(
/*8798*/ IBindStatusCallback*This,
/*8799*/ DWORD grfBSCF,
/*8800*/ DWORD dwSize,
/*8801*/ FORMATETC*pformatetc,
/*8802*/ STGMEDIUM*pstgmed);
/*8805*/ HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub(
/*8806*/ IBindStatusCallback*This,
/*8807*/ DWORD grfBSCF,
/*8808*/ DWORD dwSize,
/*8809*/ RemFORMATETC*pformatetc,
/*8810*/ RemSTGMEDIUM*pstgmed);
/*8812*/ HRESULT __stdcall IWinInetInfo_QueryOption_Proxy(
/*8813*/ IWinInetInfo*This,
/*8814*/ DWORD dwOption,
/*8815*/ LPVOID pBuffer,
/*8816*/ DWORD*pcbBuf);
/*8819*/ HRESULT __stdcall IWinInetInfo_QueryOption_Stub(
/*8820*/ IWinInetInfo*This,
/*8821*/ DWORD dwOption,
/*8822*/ BYTE*pBuffer,
/*8823*/ DWORD*pcbBuf);
/*8825*/ HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy(
/*8826*/ IWinInetHttpInfo*This,
/*8827*/ DWORD dwOption,
/*8828*/ LPVOID pBuffer,
/*8829*/ DWORD*pcbBuf,
/*8830*/ DWORD*pdwFlags,
/*8831*/ DWORD*pdwReserved);
/*8834*/ HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub(
/*8835*/ IWinInetHttpInfo*This,
/*8836*/ DWORD dwOption,
/*8837*/ BYTE*pBuffer,
/*8838*/ DWORD*pcbBuf,
/*8839*/ DWORD*pdwFlags,
/*8840*/ DWORD*pdwReserved);
/*8842*/ HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy(
/*8843*/ IBindHost*This,
/*8844*/ IMoniker*pMk,
/*8845*/ IBindCtx*pBC,
/*8846*/ IBindStatusCallback*pBSC,
/*8847*/ const IID*const riid,
/*8848*/ void**ppvObj);
/*8851*/ HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub(
/*8852*/ IBindHost*This,
/*8853*/ IMoniker*pMk,
/*8854*/ IBindCtx*pBC,
/*8855*/ IBindStatusCallback*pBSC,
/*8856*/ const IID*const riid,
/*8857*/ IUnknown**ppvObj);
/*8859*/ HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy(
/*8860*/ IBindHost*This,
/*8861*/ IMoniker*pMk,
/*8862*/ IBindCtx*pBC,
/*8863*/ IBindStatusCallback*pBSC,
/*8864*/ const IID*const riid,
/*8865*/ void**ppvObj);
/*8868*/ HRESULT __stdcall IBindHost_MonikerBindToObject_Stub(
/*8869*/ IBindHost*This,
/*8870*/ IMoniker*pMk,
/*8871*/ IBindCtx*pBC,
/*8872*/ IBindStatusCallback*pBSC,
/*8873*/ const IID*const riid,
/*8874*/ IUnknown**ppvObj);
/*53*/ typedef struct IPropertyStorage IPropertyStorage;
/*59*/ typedef struct IPropertySetStorage IPropertySetStorage;
/*65*/ typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;
/*71*/ typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
/*106*/ typedef struct tagVersionedStream
/*107*/ {
/*108*/ GUID guidVersion;
/*109*/ IStream*pStream;
/*110*/ }VERSIONEDSTREAM;
/*112*/ typedef struct tagVersionedStream*LPVERSIONEDSTREAM;
/*138*/ typedef struct tagPROPVARIANT PROPVARIANT;
/*140*/ typedef struct tagCAC
/*141*/ {
/*142*/ ULONG cElems;
/*143*/ CHAR*pElems;
/*144*/ }CAC;
/*146*/ typedef struct tagCAUB
/*147*/ {
/*148*/ ULONG cElems;
/*149*/ UCHAR*pElems;
/*150*/ }CAUB;
/*152*/ typedef struct tagCAI
/*153*/ {
/*154*/ ULONG cElems;
/*155*/ SHORT*pElems;
/*156*/ }CAI;
/*158*/ typedef struct tagCAUI
/*159*/ {
/*160*/ ULONG cElems;
/*161*/ USHORT*pElems;
/*162*/ }CAUI;
/*164*/ typedef struct tagCAL
/*165*/ {
/*166*/ ULONG cElems;
/*167*/ LONG*pElems;
/*168*/ }CAL;
/*170*/ typedef struct tagCAUL
/*171*/ {
/*172*/ ULONG cElems;
/*173*/ ULONG*pElems;
/*174*/ }CAUL;
/*176*/ typedef struct tagCAFLT
/*177*/ {
/*178*/ ULONG cElems;
/*179*/ FLOAT*pElems;
/*180*/ }CAFLT;
/*182*/ typedef struct tagCADBL
/*183*/ {
/*184*/ ULONG cElems;
/*185*/ DOUBLE*pElems;
/*186*/ }CADBL;
/*188*/ typedef struct tagCACY
/*189*/ {
/*190*/ ULONG cElems;
/*191*/ CY*pElems;
/*192*/ }CACY;
/*194*/ typedef struct tagCADATE
/*195*/ {
/*196*/ ULONG cElems;
/*197*/ DATE*pElems;
/*198*/ }CADATE;
/*200*/ typedef struct tagCABSTR
/*201*/ {
/*202*/ ULONG cElems;
/*203*/ BSTR*pElems;
/*204*/ }CABSTR;
/*206*/ typedef struct tagCABSTRBLOB
/*207*/ {
/*208*/ ULONG cElems;
/*209*/ BSTRBLOB*pElems;
/*210*/ }CABSTRBLOB;
/*212*/ typedef struct tagCABOOL
/*213*/ {
/*214*/ ULONG cElems;
/*215*/ VARIANT_BOOL*pElems;
/*216*/ }CABOOL;
/*218*/ typedef struct tagCASCODE
/*219*/ {
/*220*/ ULONG cElems;
/*221*/ SCODE*pElems;
/*222*/ }CASCODE;
/*224*/ typedef struct tagCAPROPVARIANT
/*225*/ {
/*226*/ ULONG cElems;
/*227*/ PROPVARIANT*pElems;
/*228*/ }CAPROPVARIANT;
/*230*/ typedef struct tagCAH
/*231*/ {
/*232*/ ULONG cElems;
/*233*/ LARGE_INTEGER*pElems;
/*234*/ }CAH;
/*236*/ typedef struct tagCAUH
/*237*/ {
/*238*/ ULONG cElems;
/*239*/ ULARGE_INTEGER*pElems;
/*240*/ }CAUH;
/*242*/ typedef struct tagCALPSTR
/*243*/ {
/*244*/ ULONG cElems;
/*245*/ LPSTR*pElems;
/*246*/ }CALPSTR;
/*248*/ typedef struct tagCALPWSTR
/*249*/ {
/*250*/ ULONG cElems;
/*251*/ LPWSTR*pElems;
/*252*/ }CALPWSTR;
/*254*/ typedef struct tagCAFILETIME
/*255*/ {
/*256*/ ULONG cElems;
/*257*/ FILETIME*pElems;
/*258*/ }CAFILETIME;
/*260*/ typedef struct tagCACLIPDATA
/*261*/ {
/*262*/ ULONG cElems;
/*263*/ CLIPDATA*pElems;
/*264*/ }CACLIPDATA;
/*266*/ typedef struct tagCACLSID
/*267*/ {
/*268*/ ULONG cElems;
/*269*/ CLSID*pElems;
/*270*/ }CACLSID;
/*282*/ typedef WORD PROPVAR_PAD1;
/*283*/ typedef WORD PROPVAR_PAD2;
/*284*/ typedef WORD PROPVAR_PAD3;
/*290*/ struct tagPROPVARIANT;
/*398*/ typedef struct tagPROPVARIANT*LPPROPVARIANT;
/*494*/ enum PIDMSI_STATUS_VALUE
/*495*/ {PIDMSI_STATUS_NORMAL=0,
/*496*/ PIDMSI_STATUS_NEW=(PIDMSI_STATUS_NORMAL+1),
/*497*/ PIDMSI_STATUS_PRELIM=(PIDMSI_STATUS_NEW+1),
/*498*/ PIDMSI_STATUS_DRAFT=(PIDMSI_STATUS_PRELIM+1),
/*499*/ PIDMSI_STATUS_INPROGRESS=(PIDMSI_STATUS_DRAFT+1),
/*500*/ PIDMSI_STATUS_EDIT=(PIDMSI_STATUS_INPROGRESS+1),
/*501*/ PIDMSI_STATUS_REVIEW=(PIDMSI_STATUS_EDIT+1),
/*502*/ PIDMSI_STATUS_PROOF=(PIDMSI_STATUS_REVIEW+1),
/*503*/ PIDMSI_STATUS_FINAL=(PIDMSI_STATUS_PROOF+1),
/*504*/ PIDMSI_STATUS_OTHER=0x7fff
/*505*/ };
/*512*/ typedef struct tagPROPSPEC
/*513*/ {
/*514*/ ULONG ulKind;
/*515*/ union
/*516*/ {
/*517*/ PROPID propid;
/*518*/ LPOLESTR lpwstr;
/*520*/ }u;
/*521*/ }PROPSPEC;
/*523*/ typedef struct tagSTATPROPSTG
/*524*/ {
/*525*/ LPOLESTR lpwstrName;
/*526*/ PROPID propid;
/*527*/ VARTYPE vt;
/*528*/ }STATPROPSTG;
/*535*/ typedef struct tagSTATPROPSETSTG
/*536*/ {
/*537*/ FMTID fmtid;
/*538*/ CLSID clsid;
/*539*/ DWORD grfFlags;
/*540*/ FILETIME mtime;
/*541*/ FILETIME ctime;
/*542*/ FILETIME atime;
/*543*/ DWORD dwOSVersion;
/*544*/ }STATPROPSETSTG;
/*548*/ extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_c_ifspec;
/*549*/ extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_s_ifspec;
/*558*/ extern const IID IID_IPropertyStorage;
/*618*/ typedef struct IPropertyStorageVtbl
/*619*/ {
/*620*/ 
/*622*/ HRESULT(__stdcall*QueryInterface)(
/*623*/ IPropertyStorage*This,
/*624*/ const IID*const riid,
/*626*/ void**ppvObject);
/*628*/ ULONG(__stdcall*AddRef)(
/*629*/ IPropertyStorage*This);
/*631*/ ULONG(__stdcall*Release)(
/*632*/ IPropertyStorage*This);
/*634*/ HRESULT(__stdcall*ReadMultiple)(
/*635*/ IPropertyStorage*This,
/*636*/ ULONG cpspec,
/*637*/ const PROPSPEC rgpspec[],
/*638*/ PROPVARIANT rgpropvar[]);
/*640*/ HRESULT(__stdcall*WriteMultiple)(
/*641*/ IPropertyStorage*This,
/*642*/ ULONG cpspec,
/*643*/ const PROPSPEC rgpspec[],
/*644*/ const PROPVARIANT rgpropvar[],
/*645*/ PROPID propidNameFirst);
/*647*/ HRESULT(__stdcall*DeleteMultiple)(
/*648*/ IPropertyStorage*This,
/*649*/ ULONG cpspec,
/*650*/ const PROPSPEC rgpspec[]);
/*652*/ HRESULT(__stdcall*ReadPropertyNames)(
/*653*/ IPropertyStorage*This,
/*654*/ ULONG cpropid,
/*655*/ const PROPID rgpropid[],
/*656*/ LPOLESTR rglpwstrName[]);
/*658*/ HRESULT(__stdcall*WritePropertyNames)(
/*659*/ IPropertyStorage*This,
/*660*/ ULONG cpropid,
/*661*/ const PROPID rgpropid[],
/*662*/ const LPOLESTR rglpwstrName[]);
/*664*/ HRESULT(__stdcall*DeletePropertyNames)(
/*665*/ IPropertyStorage*This,
/*666*/ ULONG cpropid,
/*667*/ const PROPID rgpropid[]);
/*669*/ HRESULT(__stdcall*Commit)(
/*670*/ IPropertyStorage*This,
/*671*/ DWORD grfCommitFlags);
/*673*/ HRESULT(__stdcall*Revert)(
/*674*/ IPropertyStorage*This);
/*676*/ HRESULT(__stdcall*Enum)(
/*677*/ IPropertyStorage*This,
/*678*/ IEnumSTATPROPSTG**ppenum);
/*680*/ HRESULT(__stdcall*SetTimes)(
/*681*/ IPropertyStorage*This,
/*682*/ const FILETIME*pctime,
/*683*/ const FILETIME*patime,
/*684*/ const FILETIME*pmtime);
/*686*/ HRESULT(__stdcall*SetClass)(
/*687*/ IPropertyStorage*This,
/*688*/ const IID*const clsid);
/*690*/ HRESULT(__stdcall*Stat)(
/*691*/ IPropertyStorage*This,
/*692*/ STATPROPSETSTG*pstatpsstg);
/*694*/ 
/*695*/ }IPropertyStorageVtbl;
/*697*/ struct IPropertyStorage
/*698*/ {
/*699*/ struct IPropertyStorageVtbl*lpVtbl;
/*700*/ };
/*770*/ typedef IPropertySetStorage*LPPROPERTYSETSTORAGE;
/*773*/ extern const IID IID_IPropertySetStorage;
/*803*/ typedef struct IPropertySetStorageVtbl
/*804*/ {
/*805*/ 
/*807*/ HRESULT(__stdcall*QueryInterface)(
/*808*/ IPropertySetStorage*This,
/*809*/ const IID*const riid,
/*811*/ void**ppvObject);
/*813*/ ULONG(__stdcall*AddRef)(
/*814*/ IPropertySetStorage*This);
/*816*/ ULONG(__stdcall*Release)(
/*817*/ IPropertySetStorage*This);
/*819*/ HRESULT(__stdcall*Create)(
/*820*/ IPropertySetStorage*This,
/*821*/ const IID*const rfmtid,
/*822*/ const CLSID*pclsid,
/*823*/ DWORD grfFlags,
/*824*/ DWORD grfMode,
/*825*/ IPropertyStorage**ppprstg);
/*827*/ HRESULT(__stdcall*Open)(
/*828*/ IPropertySetStorage*This,
/*829*/ const IID*const rfmtid,
/*830*/ DWORD grfMode,
/*831*/ IPropertyStorage**ppprstg);
/*833*/ HRESULT(__stdcall*Delete)(
/*834*/ IPropertySetStorage*This,
/*835*/ const IID*const rfmtid);
/*837*/ HRESULT(__stdcall*Enum)(
/*838*/ IPropertySetStorage*This,
/*839*/ IEnumSTATPROPSETSTG**ppenum);
/*841*/ 
/*842*/ }IPropertySetStorageVtbl;
/*844*/ struct IPropertySetStorage
/*845*/ {
/*846*/ struct IPropertySetStorageVtbl*lpVtbl;
/*847*/ };
/*893*/ typedef IEnumSTATPROPSTG*LPENUMSTATPROPSTG;
/*896*/ extern const IID IID_IEnumSTATPROPSTG;
/*921*/ typedef struct IEnumSTATPROPSTGVtbl
/*922*/ {
/*923*/ 
/*925*/ HRESULT(__stdcall*QueryInterface)(
/*926*/ IEnumSTATPROPSTG*This,
/*927*/ const IID*const riid,
/*929*/ void**ppvObject);
/*931*/ ULONG(__stdcall*AddRef)(
/*932*/ IEnumSTATPROPSTG*This);
/*934*/ ULONG(__stdcall*Release)(
/*935*/ IEnumSTATPROPSTG*This);
/*937*/ HRESULT(__stdcall*Next)(
/*938*/ IEnumSTATPROPSTG*This,
/*939*/ ULONG celt,
/*940*/ STATPROPSTG*rgelt,
/*941*/ ULONG*pceltFetched);
/*943*/ HRESULT(__stdcall*Skip)(
/*944*/ IEnumSTATPROPSTG*This,
/*945*/ ULONG celt);
/*947*/ HRESULT(__stdcall*Reset)(
/*948*/ IEnumSTATPROPSTG*This);
/*950*/ HRESULT(__stdcall*Clone)(
/*951*/ IEnumSTATPROPSTG*This,
/*952*/ IEnumSTATPROPSTG**ppenum);
/*954*/ 
/*955*/ }IEnumSTATPROPSTGVtbl;
/*957*/ struct IEnumSTATPROPSTG
/*958*/ {
/*959*/ struct IEnumSTATPROPSTGVtbl*lpVtbl;
/*960*/ };
/*996*/ HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy(
/*997*/ IEnumSTATPROPSTG*This,
/*998*/ ULONG celt,
/*999*/ STATPROPSTG*rgelt,
/*1000*/ ULONG*pceltFetched);
/*1003*/ void IEnumSTATPROPSTG_RemoteNext_Stub(
/*1004*/ IRpcStubBuffer*This,
/*1005*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*1006*/ PRPC_MESSAGE _pRpcMessage,
/*1007*/ DWORD*_pdwStubPhase);
/*1020*/ typedef IEnumSTATPROPSETSTG*LPENUMSTATPROPSETSTG;
/*1023*/ extern const IID IID_IEnumSTATPROPSETSTG;
/*1048*/ typedef struct IEnumSTATPROPSETSTGVtbl
/*1049*/ {
/*1050*/ 
/*1052*/ HRESULT(__stdcall*QueryInterface)(
/*1053*/ IEnumSTATPROPSETSTG*This,
/*1054*/ const IID*const riid,
/*1056*/ void**ppvObject);
/*1058*/ ULONG(__stdcall*AddRef)(
/*1059*/ IEnumSTATPROPSETSTG*This);
/*1061*/ ULONG(__stdcall*Release)(
/*1062*/ IEnumSTATPROPSETSTG*This);
/*1064*/ HRESULT(__stdcall*Next)(
/*1065*/ IEnumSTATPROPSETSTG*This,
/*1066*/ ULONG celt,
/*1067*/ STATPROPSETSTG*rgelt,
/*1068*/ ULONG*pceltFetched);
/*1070*/ HRESULT(__stdcall*Skip)(
/*1071*/ IEnumSTATPROPSETSTG*This,
/*1072*/ ULONG celt);
/*1074*/ HRESULT(__stdcall*Reset)(
/*1075*/ IEnumSTATPROPSETSTG*This);
/*1077*/ HRESULT(__stdcall*Clone)(
/*1078*/ IEnumSTATPROPSETSTG*This,
/*1079*/ IEnumSTATPROPSETSTG**ppenum);
/*1081*/ 
/*1082*/ }IEnumSTATPROPSETSTGVtbl;
/*1084*/ struct IEnumSTATPROPSETSTG
/*1085*/ {
/*1086*/ struct IEnumSTATPROPSETSTGVtbl*lpVtbl;
/*1087*/ };
/*1123*/ HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy(
/*1124*/ IEnumSTATPROPSETSTG*This,
/*1125*/ ULONG celt,
/*1126*/ STATPROPSETSTG*rgelt,
/*1127*/ ULONG*pceltFetched);
/*1130*/ void IEnumSTATPROPSETSTG_RemoteNext_Stub(
/*1131*/ IRpcStubBuffer*This,
/*1132*/ IRpcChannelBuffer*_pRpcChannelBuffer,
/*1133*/ PRPC_MESSAGE _pRpcMessage,
/*1134*/ DWORD*_pdwStubPhase);
/*1144*/ typedef IPropertyStorage*LPPROPERTYSTORAGE;
/*1146*/ extern HRESULT __stdcall PropVariantCopy(PROPVARIANT*pvarDest,const PROPVARIANT*pvarSrc);
/*1147*/ extern HRESULT __stdcall PropVariantClear(PROPVARIANT*pvar);
/*1148*/ extern HRESULT __stdcall FreePropVariantArray(ULONG cVariants,PROPVARIANT*rgvars);
/*1167*/ extern HRESULT __stdcall StgCreatePropStg(IUnknown*pUnk,const IID*const fmtid,const CLSID*pclsid,DWORD grfFlags,DWORD dwReserved,IPropertyStorage**ppPropStg);
/*1168*/ extern HRESULT __stdcall StgOpenPropStg(IUnknown*pUnk,const IID*const fmtid,DWORD grfFlags,DWORD dwReserved,IPropertyStorage**ppPropStg);
/*1169*/ extern HRESULT __stdcall StgCreatePropSetStg(IStorage*pStorage,DWORD dwReserved,IPropertySetStorage**ppPropSetStg);
/*1172*/ typ __inner_checkReturn extern HRESULT __stdcall FmtIdToPropStgName(const FMTID*pfmtid,typ typ typ typ typ LPOLESTR oszName);
/*1173*/ extern HRESULT __stdcall PropStgNameToFmtId(typ typ typ typ typ typ const LPOLESTR oszName,FMTID*pfmtid);
/*1177*/ typedef struct tagSERIALIZEDPROPERTYVALUE
/*1178*/ {
/*1179*/ DWORD dwType;
/*1180*/ BYTE rgb[1];
/*1181*/ }SERIALIZEDPROPERTYVALUE;
/*1184*/ extern SERIALIZEDPROPERTYVALUE*__stdcall
/*1185*/ StgConvertVariantToProperty(
/*1186*/ typ typ typ typ typ const PROPVARIANT*pvar,
/*1187*/ USHORT CodePage,
/*1188*/ typ typ typ typ typ typ typ SERIALIZEDPROPERTYVALUE*pprop,
/*1189*/ typ typ typ typ typ ULONG*pcb,
/*1190*/ PROPID pid,
/*1191*/ typ typ BOOLEAN fReserved,
/*1192*/ typ typ typ typ typ typ typ ULONG*pcIndirect);
/*1212*/ extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
/*1213*/ extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;
/*1217*/ unsigned long BSTR_UserSize(unsigned long*,unsigned long,BSTR*);
/*1218*/ unsigned char*BSTR_UserMarshal(unsigned long*,unsigned char*,BSTR*);
/*1219*/ unsigned char*BSTR_UserUnmarshal(unsigned long*,unsigned char*,BSTR*);
/*1220*/ void BSTR_UserFree(unsigned long*,BSTR*);
/*1222*/ unsigned long LPSAFEARRAY_UserSize(unsigned long*,unsigned long,LPSAFEARRAY*);
/*1223*/ unsigned char*LPSAFEARRAY_UserMarshal(unsigned long*,unsigned char*,LPSAFEARRAY*);
/*1224*/ unsigned char*LPSAFEARRAY_UserUnmarshal(unsigned long*,unsigned char*,LPSAFEARRAY*);
/*1225*/ void LPSAFEARRAY_UserFree(unsigned long*,LPSAFEARRAY*);
/*1227*/ unsigned long BSTR_UserSize64(unsigned long*,unsigned long,BSTR*);
/*1228*/ unsigned char*BSTR_UserMarshal64(unsigned long*,unsigned char*,BSTR*);
/*1229*/ unsigned char*BSTR_UserUnmarshal64(unsigned long*,unsigned char*,BSTR*);
/*1230*/ void BSTR_UserFree64(unsigned long*,BSTR*);
/*1232*/ unsigned long LPSAFEARRAY_UserSize64(unsigned long*,unsigned long,LPSAFEARRAY*);
/*1233*/ unsigned char*LPSAFEARRAY_UserMarshal64(unsigned long*,unsigned char*,LPSAFEARRAY*);
/*1234*/ unsigned char*LPSAFEARRAY_UserUnmarshal64(unsigned long*,unsigned char*,LPSAFEARRAY*);
/*1235*/ void LPSAFEARRAY_UserFree64(unsigned long*,LPSAFEARRAY*);
/*1237*/ HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(
/*1238*/ IEnumSTATPROPSTG*This,
/*1239*/ ULONG celt,
/*1240*/ STATPROPSTG*rgelt,
/*1241*/ ULONG*pceltFetched);
/*1244*/ HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(
/*1245*/ IEnumSTATPROPSTG*This,
/*1246*/ ULONG celt,
/*1247*/ STATPROPSTG*rgelt,
/*1248*/ ULONG*pceltFetched);
/*1250*/ HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
/*1251*/ IEnumSTATPROPSETSTG*This,
/*1252*/ ULONG celt,
/*1253*/ STATPROPSETSTG*rgelt,
/*1254*/ ULONG*pceltFetched);
/*1257*/ HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(
/*1258*/ IEnumSTATPROPSETSTG*This,
/*1259*/ ULONG celt,
/*1260*/ STATPROPSETSTG*rgelt,
/*1261*/ ULONG*pceltFetched);
/*"objbase.h"1003*/ extern HRESULT __stdcall CreateStdProgressIndicator(typ typ typ typ typ HWND hwndParent,
/*1004*/ typ typ typ typ typ LPCOLESTR pszTitle,
/*1005*/ typ typ typ typ typ IBindStatusCallback*pIbscCaller,
/*1006*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ IBindStatusCallback**ppIbsc);
/*34*/ extern const IID IID_StdOle;
/*64*/ extern BSTR __stdcall SysAllocString(typ typ typ typ typ typ typ typ typ const OLECHAR*psz);
/*65*/ extern INT __stdcall SysReAllocString(typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ BSTR*pbstr,typ typ typ typ typ typ typ typ typ const OLECHAR*psz);
/*66*/ extern BSTR __stdcall SysAllocStringLen(typ typ typ typ typ typ typ typ typ const OLECHAR*strIn,UINT ui);
/*67*/ typ __inner_checkReturn extern INT __stdcall SysReAllocStringLen(typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ BSTR*pbstr,typ typ typ typ typ typ typ typ typ const OLECHAR*psz,typ typ typ typ typ unsigned int len);
/*68*/ extern void __stdcall SysFreeString(typ typ typ typ typ typ typ BSTR bstrString);
/*69*/ extern UINT __stdcall SysStringLen(typ typ typ typ typ typ typ BSTR);
/*72*/ extern UINT __stdcall SysStringByteLen(typ typ typ typ typ typ typ BSTR bstr);
/*73*/ extern BSTR __stdcall SysAllocStringByteLen(typ typ typ typ typ typ typ typ typ LPCSTR psz,typ typ typ typ typ UINT len);
/*80*/ extern INT __stdcall DosDateTimeToVariantTime(typ typ typ typ typ USHORT wDosDate,typ typ typ typ typ USHORT wDosTime,typ typ typ typ typ DOUBLE*pvtime);
/*82*/ extern INT __stdcall VariantTimeToDosDateTime(typ typ typ typ typ DOUBLE vtime,typ typ typ typ typ USHORT*pwDosDate,typ typ typ typ typ USHORT*pwDosTime);
/*85*/ extern INT __stdcall SystemTimeToVariantTime(typ typ typ typ typ LPSYSTEMTIME lpSystemTime,typ typ typ typ typ DOUBLE*pvtime);
/*86*/ extern INT __stdcall VariantTimeToSystemTime(typ typ typ typ typ DOUBLE vtime,typ typ typ typ typ LPSYSTEMTIME lpSystemTime);
/*94*/ extern HRESULT __stdcall SafeArrayAllocDescriptor(typ typ typ typ typ UINT cDims,typ typ typ typ typ typ typ typ typ typ typ typ typ typ SAFEARRAY**ppsaOut);
/*95*/ extern HRESULT __stdcall SafeArrayAllocDescriptorEx(typ typ typ typ typ VARTYPE vt,typ typ typ typ typ UINT cDims,typ typ typ typ typ typ typ typ typ typ typ typ typ typ SAFEARRAY**ppsaOut);
/*96*/ extern HRESULT __stdcall SafeArrayAllocData(typ typ typ typ typ SAFEARRAY*psa);
/*97*/ extern SAFEARRAY*__stdcall SafeArrayCreate(typ typ typ typ typ VARTYPE vt,typ typ typ typ typ UINT cDims,typ typ typ typ typ SAFEARRAYBOUND*rgsabound);
/*98*/ extern SAFEARRAY*__stdcall SafeArrayCreateEx(typ typ typ typ typ VARTYPE vt,typ typ typ typ typ UINT cDims,typ typ typ typ typ SAFEARRAYBOUND*rgsabound,typ typ typ typ typ PVOID pvExtra);
/*99*/ extern HRESULT __stdcall SafeArrayCopyData(typ typ typ typ typ SAFEARRAY*psaSource,typ typ typ typ typ SAFEARRAY*psaTarget);
/*100*/ extern HRESULT __stdcall SafeArrayDestroyDescriptor(typ typ typ typ typ SAFEARRAY*psa);
/*101*/ extern HRESULT __stdcall SafeArrayDestroyData(typ typ typ typ typ SAFEARRAY*psa);
/*102*/ extern HRESULT __stdcall SafeArrayDestroy(typ typ typ typ typ SAFEARRAY*psa);
/*103*/ extern HRESULT __stdcall SafeArrayRedim(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ SAFEARRAYBOUND*psaboundNew);
/*104*/ extern UINT __stdcall SafeArrayGetDim(typ typ typ typ typ SAFEARRAY*psa);
/*105*/ extern UINT __stdcall SafeArrayGetElemsize(typ typ typ typ typ SAFEARRAY*psa);
/*106*/ extern HRESULT __stdcall SafeArrayGetUBound(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ UINT nDim,typ typ typ typ typ LONG*plUbound);
/*107*/ extern HRESULT __stdcall SafeArrayGetLBound(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ UINT nDim,typ typ typ typ typ LONG*plLbound);
/*108*/ extern HRESULT __stdcall SafeArrayLock(typ typ typ typ typ SAFEARRAY*psa);
/*109*/ extern HRESULT __stdcall SafeArrayUnlock(typ typ typ typ typ SAFEARRAY*psa);
/*110*/ extern HRESULT __stdcall SafeArrayAccessData(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppvData);
/*111*/ extern HRESULT __stdcall SafeArrayUnaccessData(typ typ typ typ typ SAFEARRAY*psa);
/*112*/ extern HRESULT __stdcall SafeArrayGetElement(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ typ typ LONG*rgIndices,typ typ typ typ typ void*pv);
/*113*/ extern HRESULT __stdcall SafeArrayPutElement(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ typ typ LONG*rgIndices,typ typ typ typ typ void*pv);
/*114*/ extern HRESULT __stdcall SafeArrayCopy(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ typ typ typ typ typ typ typ typ typ SAFEARRAY**ppsaOut);
/*115*/ extern HRESULT __stdcall SafeArrayPtrOfIndex(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ LONG*rgIndices,typ typ typ typ typ typ typ typ typ typ typ typ typ typ void**ppvData);
/*116*/ extern HRESULT __stdcall SafeArraySetRecordInfo(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ IRecordInfo*prinfo);
/*117*/ extern HRESULT __stdcall SafeArrayGetRecordInfo(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ typ typ typ typ typ typ typ typ typ IRecordInfo**prinfo);
/*118*/ extern HRESULT __stdcall SafeArraySetIID(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ const GUID*const guid);
/*119*/ extern HRESULT __stdcall SafeArrayGetIID(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ GUID*pguid);
/*120*/ extern HRESULT __stdcall SafeArrayGetVartype(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ VARTYPE*pvt);
/*121*/ extern SAFEARRAY*__stdcall SafeArrayCreateVector(typ typ typ typ typ VARTYPE vt,typ typ typ typ typ LONG lLbound,typ typ typ typ typ ULONG cElements);
/*122*/ extern SAFEARRAY*__stdcall SafeArrayCreateVectorEx(typ typ typ typ typ VARTYPE vt,typ typ typ typ typ LONG lLbound,typ typ typ typ typ ULONG cElements,typ typ typ typ typ PVOID pvExtra);
/*128*/ extern void __stdcall VariantInit(typ typ typ typ typ VARIANTARG*pvarg);
/*129*/ extern HRESULT __stdcall VariantClear(typ typ typ typ typ VARIANTARG*pvarg);
/*130*/ extern HRESULT __stdcall VariantCopy(typ typ typ typ typ VARIANTARG*pvargDest,typ typ typ typ typ const VARIANTARG*pvargSrc);
/*131*/ extern HRESULT __stdcall VariantCopyInd(typ typ typ typ typ VARIANT*pvarDest,typ typ typ typ typ const VARIANTARG*pvargSrc);
/*132*/ extern HRESULT __stdcall VariantChangeType(typ typ typ typ typ VARIANTARG*pvargDest,
/*133*/ typ typ typ typ typ const VARIANTARG*pvarSrc,typ typ typ typ typ USHORT wFlags,typ typ typ typ typ VARTYPE vt);
/*134*/ extern HRESULT __stdcall VariantChangeTypeEx(typ typ typ typ typ VARIANTARG*pvargDest,
/*135*/ typ typ typ typ typ const VARIANTARG*pvarSrc,typ typ typ typ typ LCID lcid,typ typ typ typ typ USHORT wFlags,typ typ typ typ typ VARTYPE vt);
/*156*/ extern HRESULT __stdcall VectorFromBstr(typ typ typ typ typ BSTR bstr,typ typ typ typ typ typ typ typ typ typ typ typ typ typ SAFEARRAY**ppsa);
/*157*/ extern HRESULT __stdcall BstrFromVector(typ typ typ typ typ SAFEARRAY*psa,typ typ typ typ typ BSTR*pbstr);
/*227*/ extern HRESULT __stdcall VarUI1FromI2(SHORT sIn,typ typ typ typ typ BYTE*pbOut);
/*228*/ extern HRESULT __stdcall VarUI1FromI4(LONG lIn,typ typ typ typ typ BYTE*pbOut);
/*229*/ extern HRESULT __stdcall VarUI1FromI8(LONG64 i64In,typ typ typ typ typ BYTE typ*pbOut);
/*230*/ extern HRESULT __stdcall VarUI1FromR4(FLOAT fltIn,BYTE*pbOut);
/*231*/ extern HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn,typ typ typ typ typ BYTE*pbOut);
/*232*/ extern HRESULT __stdcall VarUI1FromCy(CY cyIn,typ typ typ typ typ BYTE*pbOut);
/*233*/ extern HRESULT __stdcall VarUI1FromDate(DATE dateIn,typ typ typ typ typ BYTE*pbOut);
/*234*/ extern HRESULT __stdcall VarUI1FromStr(typ typ typ typ typ LPCOLESTR strIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BYTE*pbOut);
/*235*/ extern HRESULT __stdcall VarUI1FromDisp(IDispatch*pdispIn,LCID lcid,typ typ typ typ typ BYTE*pbOut);
/*236*/ extern HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ BYTE*pbOut);
/*237*/ extern HRESULT __stdcall VarUI1FromI1(CHAR cIn,typ typ typ typ typ BYTE*pbOut);
/*238*/ extern HRESULT __stdcall VarUI1FromUI2(USHORT uiIn,typ typ typ typ typ BYTE*pbOut);
/*239*/ extern HRESULT __stdcall VarUI1FromUI4(ULONG ulIn,typ typ typ typ typ BYTE*pbOut);
/*240*/ extern HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In,typ typ typ typ typ BYTE typ*pbOut);
/*241*/ extern HRESULT __stdcall VarUI1FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ BYTE*pbOut);
/*243*/ extern HRESULT __stdcall VarI2FromUI1(BYTE bIn,typ typ typ typ typ SHORT*psOut);
/*244*/ extern HRESULT __stdcall VarI2FromI4(LONG lIn,typ typ typ typ typ SHORT*psOut);
/*245*/ extern HRESULT __stdcall VarI2FromI8(LONG64 i64In,typ typ typ typ typ SHORT typ*psOut);
/*246*/ extern HRESULT __stdcall VarI2FromR4(FLOAT fltIn,typ typ typ typ typ SHORT*psOut);
/*247*/ extern HRESULT __stdcall VarI2FromR8(DOUBLE dblIn,typ typ typ typ typ SHORT*psOut);
/*248*/ extern HRESULT __stdcall VarI2FromCy(CY cyIn,SHORT*psOut);
/*249*/ extern HRESULT __stdcall VarI2FromDate(DATE dateIn,typ typ typ typ typ SHORT*psOut);
/*250*/ extern HRESULT __stdcall VarI2FromStr(typ typ typ typ typ LPCOLESTR strIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ SHORT*psOut);
/*251*/ extern HRESULT __stdcall VarI2FromDisp(IDispatch*pdispIn,LCID lcid,typ typ typ typ typ SHORT*psOut);
/*252*/ extern HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ SHORT*psOut);
/*253*/ extern HRESULT __stdcall VarI2FromI1(CHAR cIn,typ typ typ typ typ SHORT*psOut);
/*254*/ extern HRESULT __stdcall VarI2FromUI2(USHORT uiIn,typ typ typ typ typ SHORT*psOut);
/*255*/ extern HRESULT __stdcall VarI2FromUI4(ULONG ulIn,typ typ typ typ typ SHORT*psOut);
/*256*/ extern HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In,typ typ typ typ typ SHORT typ*psOut);
/*257*/ extern HRESULT __stdcall VarI2FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ SHORT*psOut);
/*259*/ extern HRESULT __stdcall VarI4FromUI1(BYTE bIn,typ typ typ typ typ LONG*plOut);
/*260*/ extern HRESULT __stdcall VarI4FromI2(SHORT sIn,typ typ typ typ typ LONG*plOut);
/*261*/ extern HRESULT __stdcall VarI4FromI8(LONG64 i64In,typ typ typ typ typ LONG typ*plOut);
/*262*/ extern HRESULT __stdcall VarI4FromR4(FLOAT fltIn,typ typ typ typ typ LONG*plOut);
/*263*/ extern HRESULT __stdcall VarI4FromR8(DOUBLE dblIn,typ typ typ typ typ LONG*plOut);
/*264*/ extern HRESULT __stdcall VarI4FromCy(CY cyIn,typ typ typ typ typ LONG*plOut);
/*265*/ extern HRESULT __stdcall VarI4FromDate(DATE dateIn,typ typ typ typ typ LONG*plOut);
/*266*/ extern HRESULT __stdcall VarI4FromStr(typ typ typ typ typ LPCOLESTR strIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ LONG*plOut);
/*267*/ extern HRESULT __stdcall VarI4FromDisp(IDispatch*pdispIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ LONG*plOut);
/*268*/ extern HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ LONG*plOut);
/*269*/ extern HRESULT __stdcall VarI4FromI1(CHAR cIn,typ typ typ typ typ LONG*plOut);
/*270*/ extern HRESULT __stdcall VarI4FromUI2(USHORT uiIn,typ typ typ typ typ LONG*plOut);
/*271*/ extern HRESULT __stdcall VarI4FromUI4(ULONG ulIn,typ typ typ typ typ LONG*plOut);
/*272*/ extern HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In,typ typ typ typ typ LONG typ*plOut);
/*273*/ extern HRESULT __stdcall VarI4FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ LONG*plOut);
/*274*/ extern HRESULT __stdcall VarI4FromInt(INT intIn,typ typ typ typ typ LONG*plOut);
/*278*/ extern HRESULT __stdcall VarI8FromUI1(BYTE bIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*279*/ extern HRESULT __stdcall VarI8FromI2(SHORT sIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*280*/ extern HRESULT __stdcall VarI8FromI4(LONG lIn,LONG64 typ*pi64Out);
/*281*/ extern HRESULT __stdcall VarI8FromR4(FLOAT fltIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*282*/ extern HRESULT __stdcall VarI8FromR8(DOUBLE dblIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*283*/ extern HRESULT __stdcall VarI8FromCy(typ typ typ typ typ CY cyIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*284*/ extern HRESULT __stdcall VarI8FromDate(DATE dateIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*285*/ extern HRESULT __stdcall VarI8FromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ unsigned long dwFlags,typ typ typ typ typ LONG64 typ*pi64Out);
/*286*/ extern HRESULT __stdcall VarI8FromDisp(IDispatch typ*pdispIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ LONG64 typ*pi64Out);
/*287*/ extern HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*288*/ extern HRESULT __stdcall VarI8FromI1(CHAR cIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*289*/ extern HRESULT __stdcall VarI8FromUI2(USHORT uiIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*290*/ extern HRESULT __stdcall VarI8FromUI4(ULONG ulIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*291*/ extern HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In,typ typ typ typ typ LONG64 typ*pi64Out);
/*292*/ extern HRESULT __stdcall VarI8FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ LONG64 typ*pi64Out);
/*293*/ extern HRESULT __stdcall VarI8FromInt(INT intIn,LONG64 typ*pi64Out);
/*299*/ extern HRESULT __stdcall VarR4FromUI1(BYTE bIn,typ typ typ typ typ FLOAT*pfltOut);
/*300*/ extern HRESULT __stdcall VarR4FromI2(SHORT sIn,typ typ typ typ typ FLOAT*pfltOut);
/*301*/ extern HRESULT __stdcall VarR4FromI4(LONG lIn,typ typ typ typ typ FLOAT*pfltOut);
/*302*/ extern HRESULT __stdcall VarR4FromI8(LONG64 i64In,typ typ typ typ typ FLOAT typ*pfltOut);
/*303*/ extern HRESULT __stdcall VarR4FromR8(DOUBLE dblIn,typ typ typ typ typ FLOAT*pfltOut);
/*304*/ extern HRESULT __stdcall VarR4FromCy(CY cyIn,FLOAT*pfltOut);
/*305*/ extern HRESULT __stdcall VarR4FromDate(DATE dateIn,typ typ typ typ typ FLOAT*pfltOut);
/*306*/ extern HRESULT __stdcall VarR4FromStr(typ typ typ typ typ LPCOLESTR strIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ FLOAT*pfltOut);
/*307*/ extern HRESULT __stdcall VarR4FromDisp(IDispatch*pdispIn,LCID lcid,typ typ typ typ typ FLOAT*pfltOut);
/*308*/ extern HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ FLOAT*pfltOut);
/*309*/ extern HRESULT __stdcall VarR4FromI1(CHAR cIn,typ typ typ typ typ FLOAT*pfltOut);
/*310*/ extern HRESULT __stdcall VarR4FromUI2(USHORT uiIn,typ typ typ typ typ FLOAT*pfltOut);
/*311*/ extern HRESULT __stdcall VarR4FromUI4(ULONG ulIn,typ typ typ typ typ FLOAT*pfltOut);
/*312*/ extern HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In,typ typ typ typ typ FLOAT typ*pfltOut);
/*313*/ extern HRESULT __stdcall VarR4FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ FLOAT*pfltOut);
/*315*/ extern HRESULT __stdcall VarR8FromUI1(BYTE bIn,typ typ typ typ typ DOUBLE*pdblOut);
/*316*/ extern HRESULT __stdcall VarR8FromI2(SHORT sIn,typ typ typ typ typ DOUBLE*pdblOut);
/*317*/ extern HRESULT __stdcall VarR8FromI4(LONG lIn,typ typ typ typ typ DOUBLE*pdblOut);
/*318*/ extern HRESULT __stdcall VarR8FromI8(LONG64 i64In,typ typ typ typ typ DOUBLE typ*pdblOut);
/*319*/ extern HRESULT __stdcall VarR8FromR4(FLOAT fltIn,typ typ typ typ typ DOUBLE*pdblOut);
/*320*/ extern HRESULT __stdcall VarR8FromCy(CY cyIn,DOUBLE*pdblOut);
/*321*/ extern HRESULT __stdcall VarR8FromDate(DATE dateIn,typ typ typ typ typ DOUBLE*pdblOut);
/*322*/ extern HRESULT __stdcall VarR8FromStr(typ typ typ typ typ LPCOLESTR strIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ DOUBLE*pdblOut);
/*323*/ extern HRESULT __stdcall VarR8FromDisp(IDispatch*pdispIn,LCID lcid,typ typ typ typ typ DOUBLE*pdblOut);
/*324*/ extern HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ DOUBLE*pdblOut);
/*325*/ extern HRESULT __stdcall VarR8FromI1(CHAR cIn,DOUBLE*pdblOut);
/*326*/ extern HRESULT __stdcall VarR8FromUI2(USHORT uiIn,typ typ typ typ typ DOUBLE*pdblOut);
/*327*/ extern HRESULT __stdcall VarR8FromUI4(ULONG ulIn,typ typ typ typ typ DOUBLE*pdblOut);
/*328*/ extern HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In,typ typ typ typ typ DOUBLE typ*pdblOut);
/*329*/ extern HRESULT __stdcall VarR8FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ DOUBLE*pdblOut);
/*331*/ extern HRESULT __stdcall VarDateFromUI1(BYTE bIn,typ typ typ typ typ DATE*pdateOut);
/*332*/ extern HRESULT __stdcall VarDateFromI2(SHORT sIn,typ typ typ typ typ DATE*pdateOut);
/*333*/ extern HRESULT __stdcall VarDateFromI4(LONG lIn,typ typ typ typ typ DATE*pdateOut);
/*334*/ extern HRESULT __stdcall VarDateFromI8(LONG64 i64In,typ typ typ typ typ DATE typ*pdateOut);
/*335*/ extern HRESULT __stdcall VarDateFromR4(FLOAT fltIn,typ typ typ typ typ DATE*pdateOut);
/*336*/ extern HRESULT __stdcall VarDateFromR8(DOUBLE dblIn,typ typ typ typ typ DATE*pdateOut);
/*337*/ extern HRESULT __stdcall VarDateFromCy(CY cyIn,typ typ typ typ typ DATE*pdateOut);
/*338*/ extern HRESULT __stdcall VarDateFromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ DATE*pdateOut);
/*339*/ extern HRESULT __stdcall VarDateFromDisp(IDispatch*pdispIn,LCID lcid,typ typ typ typ typ DATE*pdateOut);
/*340*/ extern HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn,typ typ typ typ typ DATE*pdateOut);
/*341*/ extern HRESULT __stdcall VarDateFromI1(CHAR cIn,typ typ typ typ typ DATE*pdateOut);
/*342*/ extern HRESULT __stdcall VarDateFromUI2(USHORT uiIn,typ typ typ typ typ DATE*pdateOut);
/*343*/ extern HRESULT __stdcall VarDateFromUI4(ULONG ulIn,typ typ typ typ typ DATE*pdateOut);
/*344*/ extern HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In,typ typ typ typ typ DATE typ*pdateOut);
/*345*/ extern HRESULT __stdcall VarDateFromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ DATE*pdateOut);
/*347*/ extern HRESULT __stdcall VarCyFromUI1(BYTE bIn,typ typ typ typ typ CY*pcyOut);
/*348*/ extern HRESULT __stdcall VarCyFromI2(SHORT sIn,typ typ typ typ typ CY*pcyOut);
/*349*/ extern HRESULT __stdcall VarCyFromI4(LONG lIn,typ typ typ typ typ CY*pcyOut);
/*350*/ extern HRESULT __stdcall VarCyFromI8(LONG64 i64In,typ typ typ typ typ CY typ*pcyOut);
/*351*/ extern HRESULT __stdcall VarCyFromR4(FLOAT fltIn,typ typ typ typ typ CY*pcyOut);
/*352*/ extern HRESULT __stdcall VarCyFromR8(DOUBLE dblIn,typ typ typ typ typ CY*pcyOut);
/*353*/ extern HRESULT __stdcall VarCyFromDate(DATE dateIn,typ typ typ typ typ CY*pcyOut);
/*354*/ extern HRESULT __stdcall VarCyFromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ CY*pcyOut);
/*355*/ extern HRESULT __stdcall VarCyFromDisp(typ typ typ typ typ IDispatch*pdispIn,LCID lcid,typ typ typ typ typ CY*pcyOut);
/*356*/ extern HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn,typ typ typ typ typ CY*pcyOut);
/*357*/ extern HRESULT __stdcall VarCyFromI1(CHAR cIn,typ typ typ typ typ CY*pcyOut);
/*358*/ extern HRESULT __stdcall VarCyFromUI2(USHORT uiIn,typ typ typ typ typ CY*pcyOut);
/*359*/ extern HRESULT __stdcall VarCyFromUI4(ULONG ulIn,typ typ typ typ typ CY*pcyOut);
/*360*/ extern HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In,typ typ typ typ typ CY typ*pcyOut);
/*361*/ extern HRESULT __stdcall VarCyFromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ CY*pcyOut);
/*363*/ extern HRESULT __stdcall VarBstrFromUI1(BYTE bVal,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*364*/ extern HRESULT __stdcall VarBstrFromI2(SHORT iVal,LCID lcid,ULONG dwFlags,BSTR*pbstrOut);
/*365*/ extern HRESULT __stdcall VarBstrFromI4(LONG lIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*366*/ extern HRESULT __stdcall VarBstrFromI8(LONG64 i64In,LCID lcid,unsigned long dwFlags,typ typ typ typ typ BSTR typ*pbstrOut);
/*367*/ extern HRESULT __stdcall VarBstrFromR4(FLOAT fltIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*368*/ extern HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*369*/ extern HRESULT __stdcall VarBstrFromCy(CY cyIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*370*/ extern HRESULT __stdcall VarBstrFromDate(typ typ typ typ typ DATE dateIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*371*/ extern HRESULT __stdcall VarBstrFromDisp(IDispatch*pdispIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*372*/ extern HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*373*/ extern HRESULT __stdcall VarBstrFromI1(CHAR cIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*374*/ extern HRESULT __stdcall VarBstrFromUI2(USHORT uiIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*375*/ extern HRESULT __stdcall VarBstrFromUI4(ULONG ulIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*376*/ extern HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In,LCID lcid,unsigned long dwFlags,typ typ typ typ typ BSTR typ*pbstrOut);
/*377*/ extern HRESULT __stdcall VarBstrFromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ BSTR*pbstrOut);
/*379*/ extern HRESULT __stdcall VarBoolFromUI1(BYTE bIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*380*/ typ __inner_checkReturn extern HRESULT __stdcall VarBoolFromI2(typ typ typ typ typ SHORT sIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*381*/ extern HRESULT __stdcall VarBoolFromI4(LONG lIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*382*/ extern HRESULT __stdcall VarBoolFromI8(LONG64 i64In,typ typ typ typ typ VARIANT_BOOL typ*pboolOut);
/*383*/ extern HRESULT __stdcall VarBoolFromR4(FLOAT fltIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*384*/ extern HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*385*/ extern HRESULT __stdcall VarBoolFromDate(DATE dateIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*386*/ extern HRESULT __stdcall VarBoolFromCy(CY cyIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*387*/ extern HRESULT __stdcall VarBoolFromStr(typ typ typ typ typ LPCOLESTR strIn,LCID lcid,ULONG dwFlags,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*388*/ extern HRESULT __stdcall VarBoolFromDisp(IDispatch*pdispIn,LCID lcid,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*389*/ extern HRESULT __stdcall VarBoolFromI1(CHAR cIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*390*/ extern HRESULT __stdcall VarBoolFromUI2(USHORT uiIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*391*/ extern HRESULT __stdcall VarBoolFromUI4(ULONG ulIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*392*/ extern HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In,typ typ typ typ typ VARIANT_BOOL typ*pboolOut);
/*393*/ extern HRESULT __stdcall VarBoolFromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ VARIANT_BOOL*pboolOut);
/*395*/ extern HRESULT __stdcall
/*396*/ VarI1FromUI1(
/*397*/ typ typ typ typ typ BYTE bIn,
/*398*/ typ typ typ typ typ CHAR*pcOut
/*399*/ );
/*401*/ extern HRESULT __stdcall
/*402*/ VarI1FromI2(
/*403*/ typ typ typ typ typ SHORT uiIn,
/*404*/ typ typ typ typ typ CHAR*pcOut
/*405*/ );
/*407*/ extern HRESULT __stdcall
/*408*/ VarI1FromI4(
/*409*/ typ typ typ typ typ LONG lIn,
/*410*/ typ typ typ typ typ CHAR*pcOut
/*411*/ );
/*413*/ extern HRESULT __stdcall
/*414*/ VarI1FromI8(
/*415*/ typ typ typ typ typ LONG64 i64In,
/*416*/ typ typ typ typ typ CHAR*pcOut
/*417*/ );
/*419*/ extern HRESULT __stdcall
/*420*/ VarI1FromR4(
/*421*/ typ typ typ typ typ FLOAT fltIn,
/*422*/ typ typ typ typ typ CHAR*pcOut
/*423*/ );
/*425*/ extern HRESULT __stdcall
/*426*/ VarI1FromR8(
/*427*/ typ typ typ typ typ DOUBLE dblIn,
/*428*/ typ typ typ typ typ CHAR*pcOut
/*429*/ );
/*431*/ extern HRESULT __stdcall
/*432*/ VarI1FromDate(
/*433*/ typ typ typ typ typ DATE dateIn,
/*434*/ typ typ typ typ typ CHAR*pcOut
/*435*/ );
/*437*/ extern HRESULT __stdcall
/*438*/ VarI1FromCy(
/*439*/ typ typ typ typ typ CY cyIn,
/*440*/ typ typ typ typ typ CHAR*pcOut
/*441*/ );
/*443*/ extern HRESULT __stdcall
/*444*/ VarI1FromStr(
/*445*/ typ typ typ typ typ LPCOLESTR strIn,
/*446*/ typ typ typ typ typ LCID lcid,
/*447*/ typ typ typ typ typ ULONG dwFlags,
/*448*/ typ typ typ typ typ CHAR*pcOut
/*449*/ );
/*451*/ extern HRESULT __stdcall
/*452*/ VarI1FromDisp(
/*453*/ typ typ typ typ typ IDispatch*pdispIn,
/*454*/ typ typ typ typ typ LCID lcid,
/*455*/ typ typ typ typ typ CHAR*pcOut
/*456*/ );
/*458*/ extern HRESULT __stdcall
/*459*/ VarI1FromBool(
/*460*/ typ typ typ typ typ VARIANT_BOOL boolIn,
/*461*/ typ typ typ typ typ CHAR*pcOut
/*462*/ );
/*464*/ extern HRESULT __stdcall
/*465*/ VarI1FromUI2(
/*466*/ typ typ typ typ typ USHORT uiIn,
/*467*/ typ typ typ typ typ CHAR*pcOut
/*468*/ );
/*470*/ extern HRESULT __stdcall
/*471*/ VarI1FromUI4(
/*472*/ typ typ typ typ typ ULONG ulIn,
/*473*/ typ typ typ typ typ CHAR*pcOut
/*474*/ );
/*476*/ extern HRESULT __stdcall
/*477*/ VarI1FromUI8(
/*478*/ typ typ typ typ typ ULONG64 i64In,
/*479*/ typ typ typ typ typ CHAR*pcOut
/*480*/ );
/*482*/ extern HRESULT __stdcall
/*483*/ VarI1FromDec(
/*484*/ typ typ typ typ typ const DECIMAL*pdecIn,
/*485*/ typ typ typ typ typ CHAR*pcOut
/*486*/ );
/*488*/ extern HRESULT __stdcall VarUI2FromUI1(BYTE bIn,typ typ typ typ typ USHORT*puiOut);
/*489*/ extern HRESULT __stdcall VarUI2FromI2(SHORT uiIn,typ typ typ typ typ USHORT*puiOut);
/*490*/ extern HRESULT __stdcall VarUI2FromI4(LONG lIn,typ typ typ typ typ USHORT*puiOut);
/*491*/ extern HRESULT __stdcall VarUI2FromI8(LONG64 i64In,typ typ typ typ typ USHORT*puiOut);
/*492*/ extern HRESULT __stdcall VarUI2FromR4(FLOAT fltIn,typ typ typ typ typ USHORT*puiOut);
/*493*/ extern HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn,USHORT*puiOut);
/*494*/ extern HRESULT __stdcall VarUI2FromDate(DATE dateIn,typ typ typ typ typ USHORT*puiOut);
/*495*/ extern HRESULT __stdcall VarUI2FromCy(CY cyIn,typ typ typ typ typ USHORT*puiOut);
/*496*/ extern HRESULT __stdcall VarUI2FromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ USHORT*puiOut);
/*497*/ extern HRESULT __stdcall VarUI2FromDisp(typ typ typ typ typ IDispatch*pdispIn,LCID lcid,typ typ typ typ typ USHORT*puiOut);
/*498*/ extern HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ USHORT*puiOut);
/*499*/ extern HRESULT __stdcall VarUI2FromI1(CHAR cIn,typ typ typ typ typ USHORT*puiOut);
/*500*/ extern HRESULT __stdcall VarUI2FromUI4(ULONG ulIn,typ typ typ typ typ USHORT*puiOut);
/*501*/ extern HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In,typ typ typ typ typ USHORT*puiOut);
/*502*/ extern HRESULT __stdcall VarUI2FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ USHORT*puiOut);
/*504*/ extern HRESULT __stdcall VarUI4FromUI1(BYTE bIn,typ typ typ typ typ ULONG*pulOut);
/*505*/ extern HRESULT __stdcall VarUI4FromI2(typ typ typ typ typ SHORT uiIn,typ typ typ typ typ ULONG*pulOut);
/*506*/ extern HRESULT __stdcall VarUI4FromI4(LONG lIn,typ typ typ typ typ ULONG*pulOut);
/*507*/ extern HRESULT __stdcall VarUI4FromI8(LONG64 i64In,typ typ typ typ typ ULONG*plOut);
/*508*/ extern HRESULT __stdcall VarUI4FromR4(FLOAT fltIn,typ typ typ typ typ ULONG*pulOut);
/*509*/ extern HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn,typ typ typ typ typ ULONG*pulOut);
/*510*/ extern HRESULT __stdcall VarUI4FromDate(DATE dateIn,typ typ typ typ typ ULONG*pulOut);
/*511*/ extern HRESULT __stdcall VarUI4FromCy(CY cyIn,typ typ typ typ typ ULONG*pulOut);
/*512*/ extern HRESULT __stdcall VarUI4FromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ ULONG*pulOut);
/*513*/ extern HRESULT __stdcall VarUI4FromDisp(typ typ typ typ typ IDispatch*pdispIn,LCID lcid,typ typ typ typ typ ULONG*pulOut);
/*514*/ extern HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ ULONG*pulOut);
/*515*/ extern HRESULT __stdcall VarUI4FromI1(CHAR cIn,typ typ typ typ typ ULONG*pulOut);
/*516*/ extern HRESULT __stdcall VarUI4FromUI2(USHORT uiIn,typ typ typ typ typ ULONG*pulOut);
/*517*/ extern HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In,typ typ typ typ typ ULONG*plOut);
/*518*/ extern HRESULT __stdcall VarUI4FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ ULONG*pulOut);
/*522*/ extern HRESULT __stdcall VarUI8FromUI1(BYTE bIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*523*/ extern HRESULT __stdcall VarUI8FromI2(SHORT sIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*524*/ extern HRESULT __stdcall VarUI8FromI4(LONG lIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*525*/ extern HRESULT __stdcall VarUI8FromI8(LONG64 ui64In,typ typ typ typ typ ULONG64 typ*pi64Out);
/*526*/ extern HRESULT __stdcall VarUI8FromR4(FLOAT fltIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*527*/ extern HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*528*/ extern HRESULT __stdcall VarUI8FromCy(CY cyIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*529*/ extern HRESULT __stdcall VarUI8FromDate(DATE dateIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*530*/ extern HRESULT __stdcall VarUI8FromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ unsigned long dwFlags,typ typ typ typ typ ULONG64 typ*pi64Out);
/*531*/ extern HRESULT __stdcall VarUI8FromDisp(typ typ typ typ typ IDispatch typ*pdispIn,LCID lcid,typ typ typ typ typ ULONG64 typ*pi64Out);
/*532*/ extern HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*533*/ extern HRESULT __stdcall VarUI8FromI1(CHAR cIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*534*/ extern HRESULT __stdcall VarUI8FromUI2(USHORT uiIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*535*/ extern HRESULT __stdcall VarUI8FromUI4(ULONG ulIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*536*/ extern HRESULT __stdcall VarUI8FromDec(typ typ typ typ typ const DECIMAL*pdecIn,typ typ typ typ typ ULONG64 typ*pi64Out);
/*537*/ extern HRESULT __stdcall VarUI8FromInt(INT intIn,ULONG64 typ*pi64Out);
/*543*/ extern HRESULT __stdcall VarDecFromUI1(typ typ typ typ typ BYTE bIn,typ typ typ typ typ DECIMAL*pdecOut);
/*544*/ extern HRESULT __stdcall VarDecFromI2(typ typ typ typ typ SHORT uiIn,typ typ typ typ typ DECIMAL*pdecOut);
/*545*/ extern HRESULT __stdcall VarDecFromI4(typ typ typ typ typ LONG lIn,typ typ typ typ typ DECIMAL*pdecOut);
/*546*/ extern HRESULT __stdcall VarDecFromI8(LONG64 i64In,typ typ typ typ typ DECIMAL*pdecOut);
/*547*/ extern HRESULT __stdcall VarDecFromR4(typ typ typ typ typ FLOAT fltIn,typ typ typ typ typ DECIMAL*pdecOut);
/*548*/ extern HRESULT __stdcall VarDecFromR8(typ typ typ typ typ DOUBLE dblIn,typ typ typ typ typ DECIMAL*pdecOut);
/*549*/ extern HRESULT __stdcall VarDecFromDate(typ typ typ typ typ DATE dateIn,typ typ typ typ typ DECIMAL*pdecOut);
/*550*/ extern HRESULT __stdcall VarDecFromCy(typ typ typ typ typ CY cyIn,typ typ typ typ typ DECIMAL*pdecOut);
/*551*/ extern HRESULT __stdcall VarDecFromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ DECIMAL*pdecOut);
/*552*/ extern HRESULT __stdcall VarDecFromDisp(typ typ typ typ typ IDispatch*pdispIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ DECIMAL*pdecOut);
/*553*/ extern HRESULT __stdcall VarDecFromBool(typ typ typ typ typ VARIANT_BOOL boolIn,typ typ typ typ typ DECIMAL*pdecOut);
/*554*/ extern HRESULT __stdcall VarDecFromI1(typ typ typ typ typ CHAR cIn,typ typ typ typ typ DECIMAL*pdecOut);
/*555*/ extern HRESULT __stdcall VarDecFromUI2(typ typ typ typ typ USHORT uiIn,typ typ typ typ typ DECIMAL*pdecOut);
/*556*/ extern HRESULT __stdcall VarDecFromUI4(typ typ typ typ typ ULONG ulIn,typ typ typ typ typ DECIMAL*pdecOut);
/*557*/ extern HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In,typ typ typ typ typ DECIMAL*pdecOut);
/*562*/ extern HRESULT __stdcall VarI4FromI8(LONG64 i64In,LONG*plOut);
/*563*/ extern HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In,LONG*plOut);
/*643*/ typedef struct{
/*644*/ INT cDig;
/*645*/ ULONG dwInFlags;
/*646*/ ULONG dwOutFlags;
/*647*/ INT cchUsed;
/*648*/ INT nBaseShift;
/*649*/ INT nPwr10;
/*650*/ }NUMPARSE;
/*690*/ extern HRESULT __stdcall VarParseNumFromStr(typ typ typ typ typ LPCOLESTR strIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,
/*691*/ typ typ typ typ typ NUMPARSE*pnumprs,typ typ typ typ typ BYTE*rgbDig);
/*693*/ extern HRESULT __stdcall VarNumFromParseNum(typ typ typ typ typ NUMPARSE*pnumprs,typ typ typ typ typ BYTE*rgbDig,
/*694*/ typ typ typ typ typ ULONG dwVtBits,typ typ typ typ typ VARIANT*pvar);
/*700*/ extern HRESULT __stdcall VarAdd(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*701*/ extern HRESULT __stdcall VarAnd(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*702*/ extern HRESULT __stdcall VarCat(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*703*/ extern HRESULT __stdcall VarDiv(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*704*/ extern HRESULT __stdcall VarEqv(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*705*/ extern HRESULT __stdcall VarIdiv(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*706*/ extern HRESULT __stdcall VarImp(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*707*/ extern HRESULT __stdcall VarMod(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*708*/ extern HRESULT __stdcall VarMul(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*709*/ extern HRESULT __stdcall VarOr(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*710*/ extern HRESULT __stdcall VarPow(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*711*/ extern HRESULT __stdcall VarSub(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*712*/ extern HRESULT __stdcall VarXor(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LPVARIANT pvarResult);
/*714*/ extern HRESULT __stdcall VarAbs(typ typ typ typ typ LPVARIANT pvarIn,typ typ typ typ typ LPVARIANT pvarResult);
/*715*/ extern HRESULT __stdcall VarFix(typ typ typ typ typ LPVARIANT pvarIn,typ typ typ typ typ LPVARIANT pvarResult);
/*716*/ extern HRESULT __stdcall VarInt(typ typ typ typ typ LPVARIANT pvarIn,typ typ typ typ typ LPVARIANT pvarResult);
/*717*/ extern HRESULT __stdcall VarNeg(typ typ typ typ typ LPVARIANT pvarIn,typ typ typ typ typ LPVARIANT pvarResult);
/*718*/ extern HRESULT __stdcall VarNot(typ typ typ typ typ LPVARIANT pvarIn,typ typ typ typ typ LPVARIANT pvarResult);
/*720*/ extern HRESULT __stdcall VarRound(typ typ typ typ typ LPVARIANT pvarIn,typ typ typ typ typ int cDecimals,typ typ typ typ typ LPVARIANT pvarResult);
/*723*/ extern HRESULT __stdcall VarCmp(typ typ typ typ typ LPVARIANT pvarLeft,typ typ typ typ typ LPVARIANT pvarRight,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags);
/*742*/ extern HRESULT __stdcall VarDecAdd(typ typ typ typ typ LPDECIMAL pdecLeft,typ typ typ typ typ LPDECIMAL pdecRight,typ typ typ typ typ LPDECIMAL pdecResult);
/*743*/ extern HRESULT __stdcall VarDecDiv(typ typ typ typ typ LPDECIMAL pdecLeft,typ typ typ typ typ LPDECIMAL pdecRight,typ typ typ typ typ LPDECIMAL pdecResult);
/*744*/ extern HRESULT __stdcall VarDecMul(typ typ typ typ typ LPDECIMAL pdecLeft,typ typ typ typ typ LPDECIMAL pdecRight,typ typ typ typ typ LPDECIMAL pdecResult);
/*745*/ extern HRESULT __stdcall VarDecSub(typ typ typ typ typ LPDECIMAL pdecLeft,typ typ typ typ typ LPDECIMAL pdecRight,typ typ typ typ typ LPDECIMAL pdecResult);
/*747*/ extern HRESULT __stdcall VarDecAbs(typ typ typ typ typ LPDECIMAL pdecIn,typ typ typ typ typ LPDECIMAL pdecResult);
/*748*/ extern HRESULT __stdcall VarDecFix(typ typ typ typ typ LPDECIMAL pdecIn,typ typ typ typ typ LPDECIMAL pdecResult);
/*749*/ extern HRESULT __stdcall VarDecInt(typ typ typ typ typ LPDECIMAL pdecIn,typ typ typ typ typ LPDECIMAL pdecResult);
/*750*/ extern HRESULT __stdcall VarDecNeg(typ typ typ typ typ LPDECIMAL pdecIn,typ typ typ typ typ LPDECIMAL pdecResult);
/*752*/ extern HRESULT __stdcall VarDecRound(typ typ typ typ typ LPDECIMAL pdecIn,int cDecimals,typ typ typ typ typ LPDECIMAL pdecResult);
/*754*/ extern HRESULT __stdcall VarDecCmp(typ typ typ typ typ LPDECIMAL pdecLeft,typ typ typ typ typ LPDECIMAL pdecRight);
/*755*/ extern HRESULT __stdcall VarDecCmpR8(typ typ typ typ typ LPDECIMAL pdecLeft,typ typ typ typ typ double dblRight);
/*760*/ extern HRESULT __stdcall VarCyAdd(typ typ typ typ typ CY cyLeft,typ typ typ typ typ CY cyRight,typ typ typ typ typ LPCY pcyResult);
/*761*/ extern HRESULT __stdcall VarCyMul(typ typ typ typ typ CY cyLeft,typ typ typ typ typ CY cyRight,typ typ typ typ typ LPCY pcyResult);
/*762*/ extern HRESULT __stdcall VarCyMulI4(typ typ typ typ typ CY cyLeft,typ typ typ typ typ long lRight,typ typ typ typ typ LPCY pcyResult);
/*763*/ extern HRESULT __stdcall VarCyMulI8(typ typ typ typ typ CY cyLeft,typ typ typ typ typ LONG64 lRight,typ typ typ typ typ LPCY pcyResult);
/*764*/ extern HRESULT __stdcall VarCySub(typ typ typ typ typ CY cyLeft,typ typ typ typ typ CY cyRight,typ typ typ typ typ LPCY pcyResult);
/*766*/ extern HRESULT __stdcall VarCyAbs(typ typ typ typ typ CY cyIn,typ typ typ typ typ LPCY pcyResult);
/*767*/ extern HRESULT __stdcall VarCyFix(typ typ typ typ typ CY cyIn,typ typ typ typ typ LPCY pcyResult);
/*768*/ extern HRESULT __stdcall VarCyInt(typ typ typ typ typ CY cyIn,typ typ typ typ typ LPCY pcyResult);
/*769*/ extern HRESULT __stdcall VarCyNeg(typ typ typ typ typ CY cyIn,typ typ typ typ typ LPCY pcyResult);
/*771*/ extern HRESULT __stdcall VarCyRound(typ typ typ typ typ CY cyIn,typ typ typ typ typ int cDecimals,typ typ typ typ typ LPCY pcyResult);
/*773*/ extern HRESULT __stdcall VarCyCmp(typ typ typ typ typ CY cyLeft,typ typ typ typ typ CY cyRight);
/*774*/ extern HRESULT __stdcall VarCyCmpR8(typ typ typ typ typ CY cyLeft,typ typ typ typ typ double dblRight);
/*779*/ extern HRESULT __stdcall VarBstrCat(typ typ typ typ typ BSTR bstrLeft,typ typ typ typ typ BSTR bstrRight,typ typ typ typ typ LPBSTR pbstrResult);
/*780*/ extern HRESULT __stdcall VarBstrCmp(typ typ typ typ typ BSTR bstrLeft,typ typ typ typ typ BSTR bstrRight,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags);
/*781*/ extern HRESULT __stdcall VarR8Pow(typ typ typ typ typ double dblLeft,typ typ typ typ typ double dblRight,typ typ typ typ typ double*pdblResult);
/*782*/ extern HRESULT __stdcall VarR4CmpR8(typ typ typ typ typ float fltLeft,typ typ typ typ typ double dblRight);
/*783*/ extern HRESULT __stdcall VarR8Round(typ typ typ typ typ double dblIn,typ typ typ typ typ int cDecimals,typ typ typ typ typ double*pdblResult);
/*810*/ typedef struct{
/*811*/ SYSTEMTIME st;
/*812*/ USHORT wDayOfYear;
/*813*/ }UDATE;
/*819*/ extern HRESULT __stdcall VarDateFromUdate(typ typ typ typ typ UDATE*pudateIn,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ DATE*pdateOut);
/*820*/ extern HRESULT __stdcall VarDateFromUdateEx(typ typ typ typ typ UDATE*pudateIn,typ typ typ typ typ LCID lcid,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ DATE*pdateOut);
/*821*/ extern HRESULT __stdcall VarUdateFromDate(typ typ typ typ typ DATE dateIn,typ typ typ typ typ ULONG dwFlags,typ typ typ typ typ UDATE*pudateOut);
/*826*/ extern HRESULT __stdcall GetAltMonthNames(LCID lcid,typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPOLESTR**prgp);
/*832*/ extern HRESULT __stdcall VarFormat(
/*833*/ typ typ typ typ typ LPVARIANT pvarIn,
/*834*/ typ typ typ typ typ typ typ LPOLESTR pstrFormat,
/*835*/ int iFirstDay,
/*836*/ int iFirstWeek,
/*837*/ ULONG dwFlags,
/*838*/ typ typ typ typ typ BSTR*pbstrOut
/*839*/ );
/*841*/ extern HRESULT __stdcall VarFormatDateTime(
/*842*/ typ typ typ typ typ LPVARIANT pvarIn,
/*843*/ int iNamedFormat,
/*844*/ ULONG dwFlags,
/*845*/ typ typ typ typ typ BSTR*pbstrOut
/*846*/ );
/*848*/ extern HRESULT __stdcall VarFormatNumber(
/*849*/ typ typ typ typ typ LPVARIANT pvarIn,
/*850*/ int iNumDig,
/*851*/ int iIncLead,
/*852*/ int iUseParens,
/*853*/ int iGroup,
/*854*/ ULONG dwFlags,
/*855*/ typ typ typ typ typ BSTR*pbstrOut
/*856*/ );
/*858*/ extern HRESULT __stdcall VarFormatPercent(
/*859*/ typ typ typ typ typ LPVARIANT pvarIn,
/*860*/ int iNumDig,
/*861*/ int iIncLead,
/*862*/ int iUseParens,
/*863*/ int iGroup,
/*864*/ ULONG dwFlags,
/*865*/ typ typ typ typ typ BSTR*pbstrOut
/*866*/ );
/*868*/ extern HRESULT __stdcall VarFormatCurrency(
/*869*/ typ typ typ typ typ LPVARIANT pvarIn,
/*870*/ int iNumDig,
/*871*/ int iIncLead,
/*872*/ int iUseParens,
/*873*/ int iGroup,
/*874*/ ULONG dwFlags,
/*875*/ typ typ typ typ typ BSTR*pbstrOut
/*876*/ );
/*878*/ extern HRESULT __stdcall VarWeekdayName(
/*879*/ int iWeekday,
/*880*/ int fAbbrev,
/*881*/ int iFirstDay,
/*882*/ ULONG dwFlags,
/*883*/ typ typ typ typ typ BSTR*pbstrOut
/*884*/ );
/*886*/ extern HRESULT __stdcall VarMonthName(
/*887*/ int iMonth,
/*888*/ int fAbbrev,
/*889*/ ULONG dwFlags,
/*890*/ typ typ typ typ typ BSTR*pbstrOut
/*891*/ );
/*893*/ extern HRESULT __stdcall VarFormatFromTokens(
/*894*/ typ typ typ typ typ LPVARIANT pvarIn,
/*895*/ typ typ typ typ typ typ typ LPOLESTR pstrFormat,
/*896*/ LPBYTE pbTokCur,
/*897*/ ULONG dwFlags,
/*898*/ typ typ typ typ typ BSTR*pbstrOut,
/*899*/ LCID lcid
/*900*/ );
/*902*/ extern HRESULT __stdcall VarTokenizeFormatString(
/*903*/ typ typ typ typ typ typ typ LPOLESTR pstrFormat,
/*904*/ typ typ typ typ typ LPBYTE rgbTok,
/*905*/ int cbTok,
/*906*/ int iFirstDay,
/*907*/ int iFirstWeek,
/*908*/ LCID lcid,
/*909*/ typ typ typ typ typ typ typ int*pcbActual
/*910*/ );
/*916*/ typedef ITypeLib*LPTYPELIB;
/*924*/ typedef LONG DISPID;
/*925*/ typedef DISPID MEMBERID;
/*937*/ typedef ITypeInfo*LPTYPEINFO;
/*944*/ typedef ITypeComp*LPTYPECOMP;
/*951*/ typedef ICreateTypeLib*LPCREATETYPELIB;
/*953*/ typedef ICreateTypeInfo*LPCREATETYPEINFO;
/*962*/ extern ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind,LCID lcid,
/*963*/ LPCSTR szName);
/*966*/ extern ULONG __stdcall
/*967*/ LHashValOfNameSys(SYSKIND syskind,LCID lcid,const OLECHAR*szName);
/*980*/ extern HRESULT __stdcall LoadTypeLib(typ LPCOLESTR szFile,ITypeLib**pptlib);
/*984*/ typedef enum tagREGKIND
/*985*/ {
/*986*/ REGKIND_DEFAULT,
/*987*/ REGKIND_REGISTER,
/*988*/ REGKIND_NONE
/*989*/ }REGKIND;
/*998*/ extern HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile,REGKIND regkind,
/*999*/ ITypeLib**pptlib);
/*1003*/ extern HRESULT __stdcall LoadRegTypeLib(const GUID*const rguid,WORD wVerMajor,WORD wVerMinor,
/*1004*/ LCID lcid,ITypeLib**pptlib);
/*1008*/ extern HRESULT __stdcall QueryPathOfRegTypeLib(const GUID*const guid,USHORT wMaj,USHORT wMin,
/*1009*/ LCID lcid,typ typ typ typ typ LPBSTR lpbstrPathName);
/*1013*/ extern HRESULT __stdcall RegisterTypeLib(ITypeLib*ptlib,typ typ typ typ typ LPCOLESTR szFullPath,
/*1014*/ typ typ typ typ typ typ typ LPCOLESTR szHelpDir);
/*1019*/ extern HRESULT __stdcall UnRegisterTypeLib(const GUID*const libID,WORD wVerMajor,
/*1020*/ WORD wVerMinor,LCID lcid,SYSKIND syskind);
/*1024*/ extern HRESULT __stdcall RegisterTypeLibForUser(ITypeLib*ptlib,typ typ typ typ typ OLECHAR*szFullPath,
/*1025*/ typ typ typ typ typ typ typ OLECHAR*szHelpDir);
/*1029*/ extern HRESULT __stdcall UnRegisterTypeLibForUser(
/*1030*/ const GUID*const libID,
/*1031*/ WORD wMajorVerNum,
/*1032*/ WORD wMinorVerNum,
/*1033*/ LCID lcid,
/*1034*/ SYSKIND syskind);
/*1036*/ extern HRESULT __stdcall CreateTypeLib(SYSKIND syskind,LPCOLESTR szFile,
/*1037*/ ICreateTypeLib**ppctlib);
/*1039*/ extern HRESULT __stdcall CreateTypeLib2(SYSKIND syskind,LPCOLESTR szFile,
/*1040*/ ICreateTypeLib2**ppctlib);
/*1047*/ typedef IDispatch*LPDISPATCH;
/*1049*/ typedef struct tagPARAMDATA{
/*1050*/ OLECHAR*szName;
/*1051*/ VARTYPE vt;
/*1052*/ }PARAMDATA,*LPPARAMDATA;
/*1054*/ typedef struct tagMETHODDATA{
/*1055*/ OLECHAR*szName;
/*1056*/ PARAMDATA*ppdata;
/*1057*/ DISPID dispid;
/*1058*/ UINT iMeth;
/*1059*/ CALLCONV cc;
/*1060*/ UINT cArgs;
/*1061*/ WORD wFlags;
/*1062*/ VARTYPE vtReturn;
/*1063*/ }METHODDATA,*LPMETHODDATA;
/*1065*/ typedef struct tagINTERFACEDATA{
/*1066*/ METHODDATA*pmethdata;
/*1067*/ UINT cMembers;
/*1068*/ }INTERFACEDATA,*LPINTERFACEDATA;
/*1075*/ extern HRESULT __stdcall DispGetParam(
/*1076*/ typ typ typ typ typ DISPPARAMS*pdispparams,
/*1077*/ UINT position,
/*1078*/ VARTYPE vtTarg,
/*1079*/ typ typ typ typ typ VARIANT*pvarResult,
/*1080*/ typ typ typ typ typ typ typ UINT*puArgErr
/*1081*/ );
/*1085*/ typ __inner_checkReturn extern HRESULT __stdcall DispGetIDsOfNames(ITypeInfo*ptinfo,typ typ typ typ typ typ typ OLECHAR**rgszNames,
/*1086*/ UINT cNames,typ typ typ typ typ DISPID*rgdispid);
/*1090*/ extern HRESULT __stdcall DispInvoke(void*_this,ITypeInfo*ptinfo,DISPID dispidMember,
/*1091*/ WORD wFlags,DISPPARAMS*pparams,VARIANT*pvarResult,
/*1092*/ EXCEPINFO*pexcepinfo,UINT*puArgErr);
/*1096*/ extern HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA*pidata,LCID lcid,
/*1097*/ ITypeInfo**pptinfo);
/*1102*/ extern HRESULT __stdcall CreateStdDispatch(IUnknown*punkOuter,void*pvThis,
/*1103*/ ITypeInfo*ptinfo,IUnknown**ppunkStdDisp);
/*1108*/ extern HRESULT __stdcall DispCallFunc(void*pvInstance,ULONG_PTR oVft,CALLCONV cc,
/*1109*/ VARTYPE vtReturn,UINT cActuals,VARTYPE*prgvt,
/*1110*/ VARIANTARG**prgpvarg,VARIANT*pvargResult);
/*1121*/ extern HRESULT __stdcall RegisterActiveObject(IUnknown*punk,const IID*const rclsid,
/*1122*/ DWORD dwFlags,DWORD*pdwRegister);
/*1124*/ extern HRESULT __stdcall RevokeActiveObject(DWORD dwRegister,void*pvReserved);
/*1126*/ extern HRESULT __stdcall GetActiveObject(const IID*const rclsid,void*pvReserved,
/*1127*/ IUnknown**ppunk);
/*1133*/ extern HRESULT __stdcall SetErrorInfo(typ typ typ typ typ ULONG dwReserved,typ typ typ typ typ IErrorInfo*perrinfo);
/*1134*/ extern HRESULT __stdcall GetErrorInfo(typ typ typ typ typ ULONG dwReserved,typ typ typ typ typ typ typ typ typ typ typ typ typ typ IErrorInfo**pperrinfo);
/*1135*/ extern HRESULT __stdcall CreateErrorInfo(typ typ typ typ typ typ typ typ typ typ typ typ typ typ ICreateErrorInfo**pperrinfo);
/*1141*/ extern HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo*pTypeInfo,
/*1142*/ IRecordInfo**ppRecInfo);
/*1144*/ extern HRESULT __stdcall GetRecordInfoFromGuids(const GUID*const rGuidTypeLib,
/*1145*/ ULONG uVerMajor,ULONG uVerMinor,LCID lcid,
/*1146*/ const GUID*const rGuidTypeInfo,IRecordInfo**ppRecInfo);
/*1152*/ extern ULONG __stdcall OaBuildVersion(void);
/*1154*/ extern void __stdcall ClearCustData(LPCUSTDATA pCustData);
/*1157*/ extern void __stdcall OaEnablePerUserTLibRegistration(void);
/*"ole2.h"121*/ extern HRESULT __stdcall CreateDataAdviseHolder(typ LPDATAADVISEHOLDER typ*ppDAHolder);
/*127*/ extern DWORD __stdcall OleBuildVersion(void);
/*130*/ extern HRESULT __stdcall ReadClassStg(typ LPSTORAGE pStg,typ CLSID typ*pclsid);
/*131*/ extern HRESULT __stdcall WriteClassStg(typ LPSTORAGE pStg,typ const IID*const rclsid);
/*132*/ extern HRESULT __stdcall ReadClassStm(typ LPSTREAM pStm,typ CLSID typ*pclsid);
/*133*/ extern HRESULT __stdcall WriteClassStm(typ LPSTREAM pStm,typ const IID*const rclsid);
/*134*/ typ __inner_checkReturn extern HRESULT __stdcall WriteFmtUserTypeStg(typ LPSTORAGE pstg,typ CLIPFORMAT cf,typ typ typ typ typ typ typ LPOLESTR lpszUserType);
/*135*/ extern HRESULT __stdcall ReadFmtUserTypeStg(typ LPSTORAGE pstg,typ CLIPFORMAT typ*pcf,typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPOLESTR typ*lplpszUserType);
/*140*/ typ __inner_checkReturn extern HRESULT __stdcall OleInitialize(typ LPVOID pvReserved);
/*141*/ extern void __stdcall OleUninitialize(void);
/*147*/ extern HRESULT __stdcall OleQueryLinkFromData(typ LPDATAOBJECT pSrcDataObject);
/*148*/ extern HRESULT __stdcall OleQueryCreateFromData(typ LPDATAOBJECT pSrcDataObject);
/*153*/ extern HRESULT __stdcall OleCreate(typ const IID*const rclsid,typ const IID*const riid,typ DWORD renderopt,
/*154*/ typ LPFORMATETC pFormatEtc,typ LPOLECLIENTSITE pClientSite,
/*155*/ typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*157*/ extern HRESULT __stdcall OleCreateEx(typ const IID*const rclsid,typ const IID*const riid,typ DWORD dwFlags,
/*158*/ typ DWORD renderopt,typ ULONG cFormats,typ DWORD*rgAdvf,
/*159*/ typ LPFORMATETC rgFormatEtc,typ IAdviseSink typ*lpAdviseSink,
/*160*/ typ DWORD typ*rgdwConnection,typ LPOLECLIENTSITE pClientSite,
/*161*/ typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*163*/ extern HRESULT __stdcall OleCreateFromData(typ LPDATAOBJECT pSrcDataObj,typ const IID*const riid,
/*164*/ typ DWORD renderopt,typ LPFORMATETC pFormatEtc,
/*165*/ typ LPOLECLIENTSITE pClientSite,typ LPSTORAGE pStg,
/*166*/ typ LPVOID typ*ppvObj);
/*168*/ extern HRESULT __stdcall OleCreateFromDataEx(typ LPDATAOBJECT pSrcDataObj,typ const IID*const riid,
/*169*/ typ DWORD dwFlags,typ DWORD renderopt,typ ULONG cFormats,typ DWORD*rgAdvf,
/*170*/ typ LPFORMATETC rgFormatEtc,typ IAdviseSink typ*lpAdviseSink,
/*171*/ typ DWORD typ*rgdwConnection,typ LPOLECLIENTSITE pClientSite,
/*172*/ typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*174*/ extern HRESULT __stdcall OleCreateLinkFromData(typ LPDATAOBJECT pSrcDataObj,typ const IID*const riid,
/*175*/ typ DWORD renderopt,typ LPFORMATETC pFormatEtc,
/*176*/ typ LPOLECLIENTSITE pClientSite,typ LPSTORAGE pStg,
/*177*/ typ LPVOID typ*ppvObj);
/*179*/ extern HRESULT __stdcall OleCreateLinkFromDataEx(typ LPDATAOBJECT pSrcDataObj,typ const IID*const riid,
/*180*/ typ DWORD dwFlags,typ DWORD renderopt,typ ULONG cFormats,typ DWORD*rgAdvf,
/*181*/ typ LPFORMATETC rgFormatEtc,typ IAdviseSink typ*lpAdviseSink,
/*182*/ typ typ DWORD typ*rgdwConnection,typ LPOLECLIENTSITE pClientSite,
/*183*/ typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*185*/ extern HRESULT __stdcall OleCreateStaticFromData(typ LPDATAOBJECT pSrcDataObj,typ const IID*const iid,
/*186*/ typ DWORD renderopt,typ LPFORMATETC pFormatEtc,
/*187*/ typ LPOLECLIENTSITE pClientSite,typ LPSTORAGE pStg,
/*188*/ typ LPVOID typ*ppvObj);
/*191*/ extern HRESULT __stdcall OleCreateLink(typ LPMONIKER pmkLinkSrc,typ const IID*const riid,
/*192*/ typ DWORD renderopt,typ LPFORMATETC lpFormatEtc,
/*193*/ typ LPOLECLIENTSITE pClientSite,typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*195*/ extern HRESULT __stdcall OleCreateLinkEx(typ LPMONIKER pmkLinkSrc,typ const IID*const riid,
/*196*/ typ DWORD dwFlags,typ DWORD renderopt,typ ULONG cFormats,typ DWORD*rgAdvf,
/*197*/ typ LPFORMATETC rgFormatEtc,typ IAdviseSink typ*lpAdviseSink,
/*198*/ typ DWORD typ*rgdwConnection,typ LPOLECLIENTSITE pClientSite,
/*199*/ typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*201*/ extern HRESULT __stdcall OleCreateLinkToFile(typ LPCOLESTR lpszFileName,typ const IID*const riid,
/*202*/ typ DWORD renderopt,typ LPFORMATETC lpFormatEtc,
/*203*/ typ LPOLECLIENTSITE pClientSite,typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*205*/ extern HRESULT __stdcall OleCreateLinkToFileEx(typ LPCOLESTR lpszFileName,typ const IID*const riid,
/*206*/ typ DWORD dwFlags,typ DWORD renderopt,typ ULONG cFormats,typ DWORD*rgAdvf,
/*207*/ typ LPFORMATETC rgFormatEtc,typ IAdviseSink typ*lpAdviseSink,
/*208*/ typ DWORD typ*rgdwConnection,typ LPOLECLIENTSITE pClientSite,
/*209*/ typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*211*/ extern HRESULT __stdcall OleCreateFromFile(typ const IID*const rclsid,typ LPCOLESTR lpszFileName,typ const IID*const riid,
/*212*/ typ DWORD renderopt,typ LPFORMATETC lpFormatEtc,
/*213*/ typ LPOLECLIENTSITE pClientSite,typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*215*/ extern HRESULT __stdcall OleCreateFromFileEx(typ const IID*const rclsid,typ LPCOLESTR lpszFileName,typ const IID*const riid,
/*216*/ typ DWORD dwFlags,typ DWORD renderopt,typ ULONG cFormats,typ DWORD*rgAdvf,
/*217*/ typ LPFORMATETC rgFormatEtc,typ IAdviseSink typ*lpAdviseSink,
/*218*/ typ DWORD typ*rgdwConnection,typ LPOLECLIENTSITE pClientSite,
/*219*/ typ LPSTORAGE pStg,typ LPVOID typ*ppvObj);
/*221*/ extern HRESULT __stdcall OleLoad(typ LPSTORAGE pStg,typ const IID*const riid,typ LPOLECLIENTSITE pClientSite,
/*222*/ typ LPVOID typ*ppvObj);
/*224*/ extern HRESULT __stdcall OleSave(typ LPPERSISTSTORAGE pPS,typ LPSTORAGE pStg,typ BOOL fSameAsLoad);
/*226*/ extern HRESULT __stdcall OleLoadFromStream(typ LPSTREAM pStm,typ const IID*const iidInterface,typ LPVOID typ*ppvObj);
/*227*/ extern HRESULT __stdcall OleSaveToStream(typ LPPERSISTSTREAM pPStm,typ LPSTREAM pStm);
/*230*/ extern HRESULT __stdcall OleSetContainedObject(typ LPUNKNOWN pUnknown,typ BOOL fContained);
/*231*/ extern HRESULT __stdcall OleNoteObjectVisible(typ LPUNKNOWN pUnknown,typ BOOL fVisible);
/*236*/ extern HRESULT __stdcall RegisterDragDrop(typ HWND hwnd,typ LPDROPTARGET pDropTarget);
/*237*/ extern HRESULT __stdcall RevokeDragDrop(typ HWND hwnd);
/*238*/ extern HRESULT __stdcall DoDragDrop(typ LPDATAOBJECT pDataObj,typ LPDROPSOURCE pDropSource,
/*239*/ typ DWORD dwOKEffects,typ LPDWORD pdwEffect);
/*243*/ extern HRESULT __stdcall OleSetClipboard(typ LPDATAOBJECT pDataObj);
/*244*/ extern HRESULT __stdcall OleGetClipboard(typ LPDATAOBJECT typ*ppDataObj);
/*245*/ extern HRESULT __stdcall OleFlushClipboard(void);
/*246*/ extern HRESULT __stdcall OleIsCurrentClipboard(typ LPDATAOBJECT pDataObj);
/*251*/ extern HOLEMENU __stdcall OleCreateMenuDescriptor(typ HMENU hmenuCombined,
/*252*/ typ LPOLEMENUGROUPWIDTHS lpMenuWidths);
/*253*/ extern HRESULT __stdcall OleSetMenuDescriptor(typ HOLEMENU holemenu,typ HWND hwndFrame,
/*254*/ typ HWND hwndActiveObject,
/*255*/ typ LPOLEINPLACEFRAME lpFrame,
/*256*/ typ LPOLEINPLACEACTIVEOBJECT lpActiveObj);
/*257*/ extern HRESULT __stdcall OleDestroyMenuDescriptor(typ HOLEMENU holemenu);
/*259*/ extern HRESULT __stdcall OleTranslateAccelerator(typ LPOLEINPLACEFRAME lpFrame,
/*260*/ typ LPOLEINPLACEFRAMEINFO lpFrameInfo,typ LPMSG lpmsg);
/*264*/ extern HANDLE __stdcall OleDuplicateData(typ HANDLE hSrc,typ CLIPFORMAT cfFormat,
/*265*/ typ UINT uiFlags);
/*267*/ extern HRESULT __stdcall OleDraw(typ LPUNKNOWN pUnknown,typ DWORD dwAspect,typ HDC hdcDraw,
/*268*/ typ LPCRECT lprcBounds);
/*270*/ typ __inner_checkReturn extern HRESULT __stdcall OleRun(typ LPUNKNOWN pUnknown);
/*271*/ extern BOOL __stdcall OleIsRunning(typ LPOLEOBJECT pObject);
/*272*/ extern HRESULT __stdcall OleLockRunning(typ LPUNKNOWN pUnknown,typ BOOL fLock,typ BOOL fLastUnlockCloses);
/*273*/ extern void __stdcall ReleaseStgMedium(typ LPSTGMEDIUM);
/*274*/ extern HRESULT __stdcall CreateOleAdviseHolder(typ LPOLEADVISEHOLDER typ*ppOAHolder);
/*276*/ extern HRESULT __stdcall OleCreateDefaultHandler(typ const IID*const clsid,typ LPUNKNOWN pUnkOuter,
/*277*/ typ const IID*const riid,typ LPVOID typ*lplpObj);
/*279*/ extern HRESULT __stdcall OleCreateEmbeddingHelper(typ const IID*const clsid,typ LPUNKNOWN pUnkOuter,
/*280*/ typ DWORD flags,typ LPCLASSFACTORY pCF,
/*281*/ typ const IID*const riid,typ LPVOID typ*lplpObj);
/*283*/ extern BOOL __stdcall IsAccelerator(typ HACCEL hAccel,typ int cAccelEntries,typ LPMSG lpMsg,
/*284*/ typ WORD typ*lpwCmd);
/*287*/ extern HGLOBAL __stdcall OleGetIconOfFile(typ typ typ typ typ LPOLESTR lpszPath,typ BOOL fUseFileAsLabel);
/*289*/ extern HGLOBAL __stdcall OleGetIconOfClass(typ const IID*const rclsid,typ typ typ typ typ typ typ LPOLESTR lpszLabel,
/*290*/ typ BOOL fUseTypeAsLabel);
/*292*/ extern HGLOBAL __stdcall OleMetafilePictFromIconAndLabel(typ HICON hIcon,typ typ typ typ typ LPOLESTR lpszLabel,
/*293*/ typ typ typ typ typ LPOLESTR lpszSourceFile,typ UINT iIconIndex);
/*299*/ typ __inner_checkReturn extern HRESULT __stdcall OleRegGetUserType(typ const IID*const clsid,typ DWORD dwFormOfType,
/*300*/ typ typ typ typ typ typ typ typ typ typ typ typ typ typ LPOLESTR typ*pszUserType);
/*302*/ extern HRESULT __stdcall OleRegGetMiscStatus(typ const IID*const clsid,typ DWORD dwAspect,
/*303*/ typ DWORD typ*pdwStatus);
/*305*/ extern HRESULT __stdcall OleRegEnumFormatEtc(typ const IID*const clsid,typ DWORD dwDirection,
/*306*/ typ LPENUMFORMATETC typ*ppenum);
/*308*/ extern HRESULT __stdcall OleRegEnumVerbs(typ const IID*const clsid,typ LPENUMOLEVERB typ*ppenum);
/*335*/ typedef struct _OLESTREAM typ*LPOLESTREAM;
/*337*/ typedef struct _OLESTREAMVTBL
/*338*/ {
/*339*/ DWORD(typ*Get)(LPOLESTREAM,void typ*,DWORD);
/*340*/ DWORD(typ*Put)(LPOLESTREAM,const void typ*,DWORD);
/*341*/ }OLESTREAMVTBL;
/*342*/ typedef OLESTREAMVTBL typ*LPOLESTREAMVTBL;
/*344*/ typedef struct _OLESTREAM
/*345*/ {
/*346*/ LPOLESTREAMVTBL lpstbl;
/*347*/ }OLESTREAM;
/*350*/ extern HRESULT __stdcall OleConvertOLESTREAMToIStorage
/*351*/ (typ LPOLESTREAM lpolestream,
/*352*/ typ LPSTORAGE pstg,
/*353*/ typ const DVTARGETDEVICE typ*ptd);
/*355*/ extern HRESULT __stdcall OleConvertIStorageToOLESTREAM
/*356*/ (typ LPSTORAGE pstg,
/*357*/ typ LPOLESTREAM lpolestream);
/*361*/ typ __inner_checkReturn extern HRESULT __stdcall GetHGlobalFromILockBytes(typ LPLOCKBYTES plkbyt,typ HGLOBAL typ*phglobal);
/*362*/ typ __inner_checkReturn extern HRESULT __stdcall CreateILockBytesOnHGlobal(typ HGLOBAL hGlobal,typ BOOL fDeleteOnRelease,
/*363*/ typ LPLOCKBYTES typ*pplkbyt);
/*365*/ typ __inner_checkReturn extern HRESULT __stdcall GetHGlobalFromStream(typ LPSTREAM pstm,typ HGLOBAL typ*phglobal);
/*366*/ typ __inner_checkReturn extern HRESULT __stdcall CreateStreamOnHGlobal(typ HGLOBAL hGlobal,typ BOOL fDeleteOnRelease,
/*367*/ typ LPSTREAM typ*ppstm);
/*372*/ extern HRESULT __stdcall OleDoAutoConvert(typ LPSTORAGE pStg,typ LPCLSID pClsidNew);
/*373*/ extern HRESULT __stdcall OleGetAutoConvert(typ const IID*const clsidOld,typ LPCLSID pClsidNew);
/*374*/ extern HRESULT __stdcall OleSetAutoConvert(typ const IID*const clsidOld,typ const IID*const clsidNew);
/*375*/ extern HRESULT __stdcall GetConvertStg(typ LPSTORAGE pStg);
/*376*/ extern HRESULT __stdcall SetConvertStg(typ LPSTORAGE pStg,typ BOOL fConvert);
/*379*/ extern HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
/*380*/ (typ LPSTORAGE pstg,
/*382*/ typ CLIPFORMAT cfFormat,
/*383*/ typ LONG lWidth,
/*384*/ typ LONG lHeight,
/*385*/ typ DWORD dwSize,
/*386*/ typ LPSTGMEDIUM pmedium,
/*387*/ typ LPOLESTREAM polestm);
/*389*/ extern HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
/*390*/ (typ LPOLESTREAM polestm,
/*391*/ typ LPSTORAGE pstg,
/*393*/ typ CLIPFORMAT typ*pcfFormat,
/*394*/ typ LONG typ*plwWidth,
/*395*/ typ LONG typ*plHeight,
/*396*/ typ DWORD typ*pdwSize,
/*397*/ typ LPSTGMEDIUM pmedium);
/*23*/ extern const GUID typ IID_IPrintDialogCallback;
/*30*/ extern const GUID typ IID_IPrintDialogServices;
/*"prsht.h"196*/ typedef struct _PROPSHEETPAGEA_V1
/*197*/ {
/*198*/ DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCSTR pszIcon;}u2;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT*pcRefParent;"define"PROPSHEETPAGEW_V1_FIELDS DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCWSTR pszIcon;}u2;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT*pcRefParent;"if"_WIN32_WINNT>=0x0600
/*199*/ }PROPSHEETPAGEA_V1,*LPPROPSHEETPAGEA_V1;
/*200*/ typedef const PROPSHEETPAGEA_V1*LPCPROPSHEETPAGEA_V1;
/*202*/ typedef struct _PROPSHEETPAGEA
/*203*/ {
/*204*/ DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCSTR pszIcon;}u2;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT*pcRefParent;"define"PROPSHEETPAGEW_V1_FIELDS DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCWSTR pszIcon;}u2;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT*pcRefParent;"if"_WIN32_WINNT>=0x0600
/*206*/ LPCSTR pszHeaderTitle;
/*207*/ LPCSTR pszHeaderSubTitle;
/*208*/ }PROPSHEETPAGEA_V2,*LPPROPSHEETPAGEA_V2;
/*209*/ typedef const PROPSHEETPAGEA_V2*LPCPROPSHEETPAGEA_V2;
/*211*/ typedef struct _PROPSHEETPAGEA_V3
/*212*/ {
/*213*/ DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCSTR pszIcon;}u2;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT*pcRefParent;"define"PROPSHEETPAGEW_V1_FIELDS DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union{LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;}u;union{HICON hIcon;LPCWSTR pszIcon;}u2;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT*pcRefParent;"if"_WIN32_WINNT>=0x0600
/*215*/ LPCSTR pszHeaderTitle;
/*216*/ LPCSTR pszHeaderSubTitle;
/*218*/ HANDLE hActCtx;
/*219*/ }PROPSHEETPAGEA_V3,*LPPROPSHEETPAGEA_V3;
/*220*/ typedef const PROPSHEETPAGEA_V3*LPCPROPSHEETPAGEA_V3;
/*242*/ typedef struct _PROPSHEETPAGEW_V1
/*243*/ {
/*244*/ PROPSHEETPAGEW_V1_FIELDS
/*245*/ }PROPSHEETPAGEW_V1,*LPPROPSHEETPAGEW_V1;
/*246*/ typedef const PROPSHEETPAGEW_V1*LPCPROPSHEETPAGEW_V1;
/*248*/ typedef struct _PROPSHEETPAGEW
/*249*/ {
/*250*/ PROPSHEETPAGEW_V1_FIELDS
/*252*/ LPCWSTR pszHeaderTitle;
/*253*/ LPCWSTR pszHeaderSubTitle;
/*254*/ }PROPSHEETPAGEW_V2,*LPPROPSHEETPAGEW_V2;
/*255*/ typedef const PROPSHEETPAGEW_V2*LPCPROPSHEETPAGEW_V2;
/*257*/ typedef struct _PROPSHEETPAGEW_V3
/*258*/ {
/*259*/ PROPSHEETPAGEW_V1_FIELDS
/*261*/ LPCWSTR pszHeaderTitle;
/*262*/ LPCWSTR pszHeaderSubTitle;
/*264*/ HANDLE hActCtx;
/*265*/ }PROPSHEETPAGEW_V3,*LPPROPSHEETPAGEW_V3;
/*266*/ typedef const PROPSHEETPAGEW_V3*LPCPROPSHEETPAGEW_V3;
/*311*/ typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA_LATEST;
/*312*/ typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW_LATEST;
/*313*/ typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA_LATEST;
/*314*/ typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW_LATEST;
/*315*/ typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
/*316*/ typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;
/*335*/ typedef PROPSHEETPAGEA_V2 PROPSHEETPAGEA;
/*336*/ typedef PROPSHEETPAGEW_V2 PROPSHEETPAGEW;
/*337*/ typedef LPPROPSHEETPAGEA_V2 LPPROPSHEETPAGEA;
/*338*/ typedef LPPROPSHEETPAGEW_V2 LPPROPSHEETPAGEW;
/*339*/ typedef LPCPROPSHEETPAGEA_V2 LPCPROPSHEETPAGEA;
/*340*/ typedef LPCPROPSHEETPAGEW_V2 LPCPROPSHEETPAGEW;
/*466*/ typedef int(typ*PFNPROPSHEETCALLBACK)(HWND,UINT,LPARAM);
/*492*/ typedef struct _PROPSHEETHEADERA_V1
/*493*/ {
/*494*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCSTR pszIcon;}u;LPCSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCSTR pStartPage;}u2;union{LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*495*/ }PROPSHEETHEADERA_V1,*LPPROPSHEETHEADERA_V1;
/*496*/ typedef const PROPSHEETHEADERA_V1*LPCPROPSHEETHEADERA_V1;
/*499*/ typedef struct _PROPSHEETHEADERA_V2
/*500*/ {
/*501*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCSTR pszIcon;}u;LPCSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCSTR pStartPage;}u2;union{LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*502*/ union
/*503*/ {
/*504*/ HBITMAP hbmWatermark;
/*505*/ LPCSTR pszbmWatermark;
/*506*/ }u4;
/*507*/ HPALETTE hplWatermark;
/*508*/ union
/*509*/ {
/*510*/ HBITMAP hbmHeader;
/*511*/ LPCSTR pszbmHeader;
/*512*/ }u5;
/*513*/ }PROPSHEETHEADERA_V2,*LPPROPSHEETHEADERA_V2;
/*514*/ typedef const PROPSHEETHEADERA_V2*LPCPROPSHEETHEADERA_V2;
/*541*/ typedef struct _PROPSHEETHEADERW_V1
/*542*/ {
/*543*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCWSTR pszIcon;}u;LPCWSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCWSTR pStartPage;}u2;union{LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*544*/ }PROPSHEETHEADERW_V1,*LPPROPSHEETHEADERW_V1;
/*545*/ typedef const PROPSHEETHEADERW_V1*LPCPROPSHEETHEADERW_V1;
/*548*/ typedef struct _PROPSHEETHEADERW_V2
/*549*/ {
/*550*/ DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union{HICON hIcon;LPCWSTR pszIcon;}u;LPCWSTR pszCaption;UINT nPages;union{UINT nStartPage;LPCWSTR pStartPage;}u2;union{LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE*phpage;}u3;PFNPROPSHEETCALLBACK pfnCallback;
/*551*/ union
/*552*/ {
/*553*/ HBITMAP hbmWatermark;
/*554*/ LPCWSTR pszbmWatermark;
/*555*/ }u4;
/*556*/ HPALETTE hplWatermark;
/*557*/ union
/*558*/ {
/*559*/ HBITMAP hbmHeader;
/*560*/ LPCWSTR pszbmHeader;
/*561*/ }u5;
/*562*/ }PROPSHEETHEADERW_V2,*LPPROPSHEETHEADERW_V2;
/*563*/ typedef const PROPSHEETHEADERW_V2*LPCPROPSHEETHEADERW_V2;
/*590*/ typedef PROPSHEETHEADERA_V2 PROPSHEETHEADERA;
/*591*/ typedef PROPSHEETHEADERW_V2 PROPSHEETHEADERW;
/*592*/ typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA;
/*593*/ typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW;
/*594*/ typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA;
/*595*/ typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW;
/*642*/ HPROPSHEETPAGE typ CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
/*643*/ HPROPSHEETPAGE typ CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
/*644*/ BOOL typ DestroyPropertySheetPage(HPROPSHEETPAGE);
/*646*/ INT_PTR typ PropertySheetA(LPCPROPSHEETHEADERA);
/*648*/ INT_PTR typ PropertySheetW(LPCPROPSHEETHEADERW);
/*660*/ typedef BOOL(typ*LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE,LPARAM);
/*661*/ typedef BOOL(typ*LPFNADDPROPSHEETPAGES)(LPVOID,LPFNADDPROPSHEETPAGE,LPARAM);
/*664*/ typedef struct _PSHNOTIFY
/*665*/ {
/*666*/ NMHDR hdr;
/*667*/ LPARAM lParam;
/*668*/ }PSHNOTIFY,*LPPSHNOTIFY;
/*"commdlg.h"93*/ typedef UINT_PTR(typ*LPOFNHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
/*109*/ typedef struct tagOFN_NT4A{
/*110*/ DWORD lStructSize;
/*111*/ HWND hwndOwner;
/*112*/ HINSTANCE hInstance;
/*113*/ LPCSTR lpstrFilter;
/*114*/ LPSTR lpstrCustomFilter;
/*115*/ DWORD nMaxCustFilter;
/*116*/ DWORD nFilterIndex;
/*117*/ LPSTR lpstrFile;
/*118*/ DWORD nMaxFile;
/*119*/ LPSTR lpstrFileTitle;
/*120*/ DWORD nMaxFileTitle;
/*121*/ LPCSTR lpstrInitialDir;
/*122*/ LPCSTR lpstrTitle;
/*123*/ DWORD Flags;
/*124*/ WORD nFileOffset;
/*125*/ WORD nFileExtension;
/*126*/ LPCSTR lpstrDefExt;
/*127*/ LPARAM lCustData;
/*128*/ LPOFNHOOKPROC lpfnHook;
/*129*/ LPCSTR lpTemplateName;
/*130*/ }OPENFILENAME_NT4A,*LPOPENFILENAME_NT4A;
/*131*/ typedef struct tagOFN_NT4W{
/*132*/ DWORD lStructSize;
/*133*/ HWND hwndOwner;
/*134*/ HINSTANCE hInstance;
/*135*/ LPCWSTR lpstrFilter;
/*136*/ LPWSTR lpstrCustomFilter;
/*137*/ DWORD nMaxCustFilter;
/*138*/ DWORD nFilterIndex;
/*139*/ LPWSTR lpstrFile;
/*140*/ DWORD nMaxFile;
/*141*/ LPWSTR lpstrFileTitle;
/*142*/ DWORD nMaxFileTitle;
/*143*/ LPCWSTR lpstrInitialDir;
/*144*/ LPCWSTR lpstrTitle;
/*145*/ DWORD Flags;
/*146*/ WORD nFileOffset;
/*147*/ WORD nFileExtension;
/*148*/ LPCWSTR lpstrDefExt;
/*149*/ LPARAM lCustData;
/*150*/ LPOFNHOOKPROC lpfnHook;
/*151*/ LPCWSTR lpTemplateName;
/*152*/ }OPENFILENAME_NT4W,*LPOPENFILENAME_NT4W;
/*157*/ typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
/*158*/ typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;
/*161*/ typedef struct tagOFNA{
/*162*/ DWORD lStructSize;
/*163*/ HWND hwndOwner;
/*164*/ HINSTANCE hInstance;
/*165*/ LPCSTR lpstrFilter;
/*166*/ LPSTR lpstrCustomFilter;
/*167*/ DWORD nMaxCustFilter;
/*168*/ DWORD nFilterIndex;
/*169*/ LPSTR lpstrFile;
/*170*/ DWORD nMaxFile;
/*171*/ LPSTR lpstrFileTitle;
/*172*/ DWORD nMaxFileTitle;
/*173*/ LPCSTR lpstrInitialDir;
/*174*/ LPCSTR lpstrTitle;
/*175*/ DWORD Flags;
/*176*/ WORD nFileOffset;
/*177*/ WORD nFileExtension;
/*178*/ LPCSTR lpstrDefExt;
/*179*/ LPARAM lCustData;
/*180*/ LPOFNHOOKPROC lpfnHook;
/*181*/ LPCSTR lpTemplateName;
/*191*/ }OPENFILENAMEA,*LPOPENFILENAMEA;
/*192*/ typedef struct tagOFNW{
/*193*/ DWORD lStructSize;
/*194*/ HWND hwndOwner;
/*195*/ HINSTANCE hInstance;
/*196*/ LPCWSTR lpstrFilter;
/*197*/ LPWSTR lpstrCustomFilter;
/*198*/ DWORD nMaxCustFilter;
/*199*/ DWORD nFilterIndex;
/*200*/ LPWSTR lpstrFile;
/*201*/ DWORD nMaxFile;
/*202*/ LPWSTR lpstrFileTitle;
/*203*/ DWORD nMaxFileTitle;
/*204*/ LPCWSTR lpstrInitialDir;
/*205*/ LPCWSTR lpstrTitle;
/*206*/ DWORD Flags;
/*207*/ WORD nFileOffset;
/*208*/ WORD nFileExtension;
/*209*/ LPCWSTR lpstrDefExt;
/*210*/ LPARAM lCustData;
/*211*/ LPOFNHOOKPROC lpfnHook;
/*212*/ LPCWSTR lpTemplateName;
/*222*/ }OPENFILENAMEW,*LPOPENFILENAMEW;
/*227*/ typedef OPENFILENAMEA OPENFILENAME;
/*228*/ typedef LPOPENFILENAMEA LPOPENFILENAME;
/*242*/ BOOL typ GetOpenFileNameA(LPOPENFILENAMEA);
/*243*/ BOOL typ GetOpenFileNameW(LPOPENFILENAMEW);
/*249*/ BOOL typ GetSaveFileNameA(LPOPENFILENAMEA);
/*250*/ BOOL typ GetSaveFileNameW(LPOPENFILENAMEW);
/*258*/ short typ GetFileTitleA(LPCSTR,typ typ typ typ typ LPSTR Buf,typ typ typ typ typ WORD cchSize);
/*259*/ short typ GetFileTitleW(LPCWSTR,typ typ typ typ typ LPWSTR Buf,typ typ typ typ typ WORD cchSize);
/*318*/ typedef UINT_PTR(typ*LPCCHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
/*322*/ typedef struct _OFNOTIFYA
/*323*/ {
/*324*/ NMHDR hdr;
/*325*/ LPOPENFILENAMEA lpOFN;
/*326*/ LPSTR pszFile;
/*327*/ }OFNOTIFYA,*LPOFNOTIFYA;
/*329*/ typedef struct _OFNOTIFYW
/*330*/ {
/*331*/ NMHDR hdr;
/*332*/ LPOPENFILENAMEW lpOFN;
/*333*/ LPWSTR pszFile;
/*334*/ }OFNOTIFYW,*LPOFNOTIFYW;
/*339*/ typedef OFNOTIFYA OFNOTIFY;
/*340*/ typedef LPOFNOTIFYA LPOFNOTIFY;
/*345*/ typedef struct _OFNOTIFYEXA
/*346*/ {
/*347*/ NMHDR hdr;
/*348*/ LPOPENFILENAMEA lpOFN;
/*349*/ LPVOID psf;
/*350*/ LPVOID pidl;
/*351*/ }OFNOTIFYEXA,*LPOFNOTIFYEXA;
/*353*/ typedef struct _OFNOTIFYEXW
/*354*/ {
/*355*/ NMHDR hdr;
/*356*/ LPOPENFILENAMEW lpOFN;
/*357*/ LPVOID psf;
/*358*/ LPVOID pidl;
/*359*/ }OFNOTIFYEXW,*LPOFNOTIFYEXW;
/*364*/ typedef OFNOTIFYEXA OFNOTIFYEX;
/*365*/ typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
/*462*/ typedef struct tagCHOOSECOLORA{
/*463*/ DWORD lStructSize;
/*464*/ HWND hwndOwner;
/*465*/ HWND hInstance;
/*466*/ COLORREF rgbResult;
/*467*/ COLORREF*lpCustColors;
/*468*/ DWORD Flags;
/*469*/ LPARAM lCustData;
/*470*/ LPCCHOOKPROC lpfnHook;
/*471*/ LPCSTR lpTemplateName;
/*472*/ }CHOOSECOLORA,*LPCHOOSECOLORA;
/*473*/ typedef struct tagCHOOSECOLORW{
/*474*/ DWORD lStructSize;
/*475*/ HWND hwndOwner;
/*476*/ HWND hInstance;
/*477*/ COLORREF rgbResult;
/*478*/ COLORREF*lpCustColors;
/*479*/ DWORD Flags;
/*480*/ LPARAM lCustData;
/*481*/ LPCCHOOKPROC lpfnHook;
/*482*/ LPCWSTR lpTemplateName;
/*483*/ }CHOOSECOLORW,*LPCHOOSECOLORW;
/*488*/ typedef CHOOSECOLORA CHOOSECOLOR;
/*489*/ typedef LPCHOOSECOLORA LPCHOOSECOLOR;
/*525*/ BOOL typ ChooseColorA(LPCHOOSECOLORA);
/*526*/ BOOL typ ChooseColorW(LPCHOOSECOLORW);
/*545*/ typedef UINT_PTR(typ*LPFRHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
/*547*/ typedef struct tagFINDREPLACEA{
/*548*/ DWORD lStructSize;
/*549*/ HWND hwndOwner;
/*550*/ HINSTANCE hInstance;
/*552*/ DWORD Flags;
/*553*/ LPSTR lpstrFindWhat;
/*554*/ LPSTR lpstrReplaceWith;
/*555*/ WORD wFindWhatLen;
/*556*/ WORD wReplaceWithLen;
/*557*/ LPARAM lCustData;
/*558*/ LPFRHOOKPROC lpfnHook;
/*559*/ LPCSTR lpTemplateName;
/*560*/ }FINDREPLACEA,*LPFINDREPLACEA;
/*561*/ typedef struct tagFINDREPLACEW{
/*562*/ DWORD lStructSize;
/*563*/ HWND hwndOwner;
/*564*/ HINSTANCE hInstance;
/*566*/ DWORD Flags;
/*567*/ LPWSTR lpstrFindWhat;
/*568*/ LPWSTR lpstrReplaceWith;
/*569*/ WORD wFindWhatLen;
/*570*/ WORD wReplaceWithLen;
/*571*/ LPARAM lCustData;
/*572*/ LPFRHOOKPROC lpfnHook;
/*573*/ LPCWSTR lpTemplateName;
/*574*/ }FINDREPLACEW,*LPFINDREPLACEW;
/*579*/ typedef FINDREPLACEA FINDREPLACE;
/*580*/ typedef LPFINDREPLACEA LPFINDREPLACE;
/*607*/ HWND typ FindTextA(LPFINDREPLACEA);
/*608*/ HWND typ FindTextW(LPFINDREPLACEW);
/*615*/ HWND typ ReplaceTextA(LPFINDREPLACEA);
/*616*/ HWND typ ReplaceTextW(LPFINDREPLACEW);
/*632*/ typedef UINT_PTR(typ*LPCFHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
/*634*/ typedef struct tagCHOOSEFONTA{
/*635*/ DWORD lStructSize;
/*636*/ HWND hwndOwner;
/*637*/ HDC hDC;
/*638*/ LPLOGFONTA lpLogFont;
/*639*/ INT iPointSize;
/*640*/ DWORD Flags;
/*641*/ COLORREF rgbColors;
/*642*/ LPARAM lCustData;
/*643*/ LPCFHOOKPROC lpfnHook;
/*644*/ LPCSTR lpTemplateName;
/*645*/ HINSTANCE hInstance;
/*647*/ LPSTR lpszStyle;
/*649*/ WORD nFontType;
/*652*/ WORD ___MISSING_ALIGNMENT__;
/*653*/ INT nSizeMin;
/*654*/ INT nSizeMax;
/*656*/ }CHOOSEFONTA;
/*657*/ typedef struct tagCHOOSEFONTW{
/*658*/ DWORD lStructSize;
/*659*/ HWND hwndOwner;
/*660*/ HDC hDC;
/*661*/ LPLOGFONTW lpLogFont;
/*662*/ INT iPointSize;
/*663*/ DWORD Flags;
/*664*/ COLORREF rgbColors;
/*665*/ LPARAM lCustData;
/*666*/ LPCFHOOKPROC lpfnHook;
/*667*/ LPCWSTR lpTemplateName;
/*668*/ HINSTANCE hInstance;
/*670*/ LPWSTR lpszStyle;
/*672*/ WORD nFontType;
/*675*/ WORD ___MISSING_ALIGNMENT__;
/*676*/ INT nSizeMin;
/*677*/ INT nSizeMax;
/*679*/ }CHOOSEFONTW;
/*683*/ typedef CHOOSEFONTA CHOOSEFONT;
/*685*/ typedef CHOOSEFONTA*LPCHOOSEFONTA;
/*686*/ typedef CHOOSEFONTW*LPCHOOSEFONTW;
/*690*/ typedef LPCHOOSEFONTA LPCHOOSEFONT;
/*692*/ typedef const CHOOSEFONTA*PCCHOOSEFONTA;
/*693*/ typedef const CHOOSEFONTW*PCCHOOSEFONTW;
/*698*/ typedef CHOOSEFONTA CHOOSEFONT;
/*699*/ typedef PCCHOOSEFONTA PCCHOOSEFONT;
/*702*/ BOOL typ ChooseFontA(LPCHOOSEFONTA);
/*703*/ BOOL typ ChooseFontW(LPCHOOSEFONTW);
/*814*/ typedef UINT_PTR(typ*LPPRINTHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
/*815*/ typedef UINT_PTR(typ*LPSETUPHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
/*817*/ typedef struct tagPDA{
/*818*/ DWORD lStructSize;
/*819*/ HWND hwndOwner;
/*820*/ HGLOBAL hDevMode;
/*821*/ HGLOBAL hDevNames;
/*822*/ HDC hDC;
/*823*/ DWORD Flags;
/*824*/ WORD nFromPage;
/*825*/ WORD nToPage;
/*826*/ WORD nMinPage;
/*827*/ WORD nMaxPage;
/*828*/ WORD nCopies;
/*829*/ HINSTANCE hInstance;
/*830*/ LPARAM lCustData;
/*831*/ LPPRINTHOOKPROC lpfnPrintHook;
/*832*/ LPSETUPHOOKPROC lpfnSetupHook;
/*833*/ LPCSTR lpPrintTemplateName;
/*834*/ LPCSTR lpSetupTemplateName;
/*835*/ HGLOBAL hPrintTemplate;
/*836*/ HGLOBAL hSetupTemplate;
/*837*/ }PRINTDLGA,*LPPRINTDLGA;
/*838*/ typedef struct tagPDW{
/*839*/ DWORD lStructSize;
/*840*/ HWND hwndOwner;
/*841*/ HGLOBAL hDevMode;
/*842*/ HGLOBAL hDevNames;
/*843*/ HDC hDC;
/*844*/ DWORD Flags;
/*845*/ WORD nFromPage;
/*846*/ WORD nToPage;
/*847*/ WORD nMinPage;
/*848*/ WORD nMaxPage;
/*849*/ WORD nCopies;
/*850*/ HINSTANCE hInstance;
/*851*/ LPARAM lCustData;
/*852*/ LPPRINTHOOKPROC lpfnPrintHook;
/*853*/ LPSETUPHOOKPROC lpfnSetupHook;
/*854*/ LPCWSTR lpPrintTemplateName;
/*855*/ LPCWSTR lpSetupTemplateName;
/*856*/ HGLOBAL hPrintTemplate;
/*857*/ HGLOBAL hSetupTemplate;
/*858*/ }PRINTDLGW,*LPPRINTDLGW;
/*863*/ typedef PRINTDLGA PRINTDLG;
/*864*/ typedef LPPRINTDLGA LPPRINTDLG;
/*867*/ BOOL typ PrintDlgA(LPPRINTDLGA);
/*868*/ BOOL typ PrintDlgW(LPPRINTDLGW);
/*912*/ typedef struct IPrintDialogCallback{struct IPrintDialogCallbackVtbl typ*lpVtbl;}IPrintDialogCallback;typedef struct IPrintDialogCallbackVtbl IPrintDialogCallbackVtbl;struct IPrintDialogCallbackVtbl
/*913*/ {
/*915*/ HRESULT(__stdcall*QueryInterface)(IPrintDialogCallback typ*This,const IID*const riid,LPVOID*ppvObj);
/*916*/ ULONG(__stdcall*AddRef)(IPrintDialogCallback typ*This);
/*917*/ ULONG(__stdcall*Release)(IPrintDialogCallback typ*This);
/*920*/ HRESULT(__stdcall*InitDone)(IPrintDialogCallback typ*This);
/*921*/ HRESULT(__stdcall*SelectionChange)(IPrintDialogCallback typ*This);
/*922*/ HRESULT(__stdcall*HandleMessage)(IPrintDialogCallback typ*This,HWND hDlg,UINT uMsg,WPARAM wParam,LPARAM lParam,LRESULT*pResult);
/*923*/ };
/*944*/ typedef struct IPrintDialogServices{struct IPrintDialogServicesVtbl typ*lpVtbl;}IPrintDialogServices;typedef struct IPrintDialogServicesVtbl IPrintDialogServicesVtbl;struct IPrintDialogServicesVtbl
/*945*/ {
/*947*/ HRESULT(__stdcall*QueryInterface)(IPrintDialogServices typ*This,const IID*const riid,LPVOID*ppvObj);
/*948*/ ULONG(__stdcall*AddRef)(IPrintDialogServices typ*This);
/*949*/ ULONG(__stdcall*Release)(IPrintDialogServices typ*This);
/*952*/ HRESULT(__stdcall*GetCurrentDevMode)(IPrintDialogServices typ*This,typ typ typ typ typ LPDEVMODE pDevMode,typ typ typ typ typ UINT*pcbSize);
/*953*/ HRESULT(__stdcall*GetCurrentPrinterName)(IPrintDialogServices typ*This,typ typ typ typ typ typ typ LPWSTR pPrinterName,typ typ typ typ typ UINT*pcchSize);
/*954*/ HRESULT(__stdcall*GetCurrentPortName)(IPrintDialogServices typ*This,typ typ typ typ typ typ typ LPWSTR pPortName,typ typ typ typ typ UINT*pcchSize);
/*955*/ };
/*961*/ typedef struct tagPRINTPAGERANGE{
/*962*/ DWORD nFromPage;
/*963*/ DWORD nToPage;
/*964*/ }PRINTPAGERANGE;
/*965*/ typedef PRINTPAGERANGE*LPPRINTPAGERANGE;
/*966*/ typedef const PRINTPAGERANGE*PCPRINTPAGERANGE;
/*972*/ typedef struct tagPDEXA{
/*973*/ DWORD lStructSize;
/*974*/ HWND hwndOwner;
/*975*/ HGLOBAL hDevMode;
/*976*/ HGLOBAL hDevNames;
/*977*/ HDC hDC;
/*978*/ DWORD Flags;
/*979*/ DWORD Flags2;
/*980*/ DWORD ExclusionFlags;
/*981*/ DWORD nPageRanges;
/*982*/ DWORD nMaxPageRanges;
/*983*/ LPPRINTPAGERANGE lpPageRanges;
/*984*/ DWORD nMinPage;
/*985*/ DWORD nMaxPage;
/*986*/ DWORD nCopies;
/*987*/ HINSTANCE hInstance;
/*988*/ LPCSTR lpPrintTemplateName;
/*989*/ LPUNKNOWN lpCallback;
/*990*/ DWORD nPropertyPages;
/*991*/ HPROPSHEETPAGE*lphPropertyPages;
/*992*/ DWORD nStartPage;
/*993*/ DWORD dwResultAction;
/*994*/ }PRINTDLGEXA,*LPPRINTDLGEXA;
/*998*/ typedef struct tagPDEXW{
/*999*/ DWORD lStructSize;
/*1000*/ HWND hwndOwner;
/*1001*/ HGLOBAL hDevMode;
/*1002*/ HGLOBAL hDevNames;
/*1003*/ HDC hDC;
/*1004*/ DWORD Flags;
/*1005*/ DWORD Flags2;
/*1006*/ DWORD ExclusionFlags;
/*1007*/ DWORD nPageRanges;
/*1008*/ DWORD nMaxPageRanges;
/*1009*/ LPPRINTPAGERANGE lpPageRanges;
/*1010*/ DWORD nMinPage;
/*1011*/ DWORD nMaxPage;
/*1012*/ DWORD nCopies;
/*1013*/ HINSTANCE hInstance;
/*1014*/ LPCWSTR lpPrintTemplateName;
/*1015*/ LPUNKNOWN lpCallback;
/*1016*/ DWORD nPropertyPages;
/*1017*/ HPROPSHEETPAGE*lphPropertyPages;
/*1018*/ DWORD nStartPage;
/*1019*/ DWORD dwResultAction;
/*1020*/ }PRINTDLGEXW,*LPPRINTDLGEXW;
/*1025*/ typedef PRINTDLGEXA PRINTDLGEX;
/*1026*/ typedef LPPRINTDLGEXA LPPRINTDLGEX;
/*1031*/ HRESULT typ PrintDlgExA(LPPRINTDLGEXA);
/*1032*/ HRESULT typ PrintDlgExW(LPPRINTDLGEXW);
/*1104*/ typedef struct tagDEVNAMES{
/*1105*/ WORD wDriverOffset;
/*1106*/ WORD wDeviceOffset;
/*1107*/ WORD wOutputOffset;
/*1108*/ WORD wDefault;
/*1109*/ }DEVNAMES;
/*1110*/ typedef DEVNAMES*LPDEVNAMES;
/*1111*/ typedef const DEVNAMES*PCDEVNAMES;
/*1116*/ DWORD typ CommDlgExtendedError(void);
/*1127*/ typedef UINT_PTR(typ*LPPAGEPAINTHOOK)(HWND,UINT,WPARAM,LPARAM);
/*1128*/ typedef UINT_PTR(typ*LPPAGESETUPHOOK)(HWND,UINT,WPARAM,LPARAM);
/*1130*/ typedef struct tagPSDA
/*1131*/ {
/*1132*/ DWORD lStructSize;
/*1133*/ HWND hwndOwner;
/*1134*/ HGLOBAL hDevMode;
/*1135*/ HGLOBAL hDevNames;
/*1136*/ DWORD Flags;
/*1137*/ POINT ptPaperSize;
/*1138*/ RECT rtMinMargin;
/*1139*/ RECT rtMargin;
/*1140*/ HINSTANCE hInstance;
/*1141*/ LPARAM lCustData;
/*1142*/ LPPAGESETUPHOOK lpfnPageSetupHook;
/*1143*/ LPPAGEPAINTHOOK lpfnPagePaintHook;
/*1144*/ LPCSTR lpPageSetupTemplateName;
/*1145*/ HGLOBAL hPageSetupTemplate;
/*1146*/ }PAGESETUPDLGA,*LPPAGESETUPDLGA;
/*1147*/ typedef struct tagPSDW
/*1148*/ {
/*1149*/ DWORD lStructSize;
/*1150*/ HWND hwndOwner;
/*1151*/ HGLOBAL hDevMode;
/*1152*/ HGLOBAL hDevNames;
/*1153*/ DWORD Flags;
/*1154*/ POINT ptPaperSize;
/*1155*/ RECT rtMinMargin;
/*1156*/ RECT rtMargin;
/*1157*/ HINSTANCE hInstance;
/*1158*/ LPARAM lCustData;
/*1159*/ LPPAGESETUPHOOK lpfnPageSetupHook;
/*1160*/ LPPAGEPAINTHOOK lpfnPagePaintHook;
/*1161*/ LPCWSTR lpPageSetupTemplateName;
/*1162*/ HGLOBAL hPageSetupTemplate;
/*1163*/ }PAGESETUPDLGW,*LPPAGESETUPDLGW;
/*1168*/ typedef PAGESETUPDLGA PAGESETUPDLG;
/*1169*/ typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
/*1172*/ BOOL typ PageSetupDlgA(LPPAGESETUPDLGA);
/*1173*/ BOOL typ PageSetupDlgW(LPPAGESETUPDLGW);
/*289*/ typedef struct _SERVICE_DESCRIPTIONA{
/*290*/ LPSTR lpDescription;
/*291*/ }SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;
/*295*/ typedef struct _SERVICE_DESCRIPTIONW{
/*296*/ LPWSTR lpDescription;
/*297*/ }SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;
/*302*/ typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
/*303*/ typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
/*309*/ typedef enum _SC_ACTION_TYPE{
/*310*/ SC_ACTION_NONE=0,
/*311*/ SC_ACTION_RESTART=1,
/*312*/ SC_ACTION_REBOOT=2,
/*313*/ SC_ACTION_RUN_COMMAND=3
/*314*/ }SC_ACTION_TYPE;
/*316*/ typedef struct _SC_ACTION{
/*317*/ SC_ACTION_TYPE Type;
/*318*/ DWORD Delay;
/*319*/ }SC_ACTION,*LPSC_ACTION;
/*321*/ typedef struct _SERVICE_FAILURE_ACTIONSA{
/*322*/ DWORD dwResetPeriod;
/*323*/ LPSTR lpRebootMsg;
/*324*/ LPSTR lpCommand;
/*328*/ DWORD cActions;
/*332*/ SC_ACTION*lpsaActions;
/*333*/ }SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;
/*334*/ typedef struct _SERVICE_FAILURE_ACTIONSW{
/*335*/ DWORD dwResetPeriod;
/*336*/ LPWSTR lpRebootMsg;
/*337*/ LPWSTR lpCommand;
/*341*/ DWORD cActions;
/*345*/ SC_ACTION*lpsaActions;
/*346*/ }SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;
/*351*/ typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
/*352*/ typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
/*358*/ typedef struct _SERVICE_DELAYED_AUTO_START_INFO{
/*359*/ BOOL fDelayedAutostart;
/*360*/ }SERVICE_DELAYED_AUTO_START_INFO,*LPSERVICE_DELAYED_AUTO_START_INFO;
/*365*/ typedef struct _SERVICE_FAILURE_ACTIONS_FLAG{
/*366*/ BOOL fFailureActionsOnNonCrashFailures;
/*367*/ }SERVICE_FAILURE_ACTIONS_FLAG,*LPSERVICE_FAILURE_ACTIONS_FLAG;
/*372*/ typedef struct _SERVICE_SID_INFO{
/*373*/ DWORD dwServiceSidType;
/*374*/ }SERVICE_SID_INFO,*LPSERVICE_SID_INFO;
/*379*/ typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA{
/*380*/ LPSTR pmszRequiredPrivileges;
/*381*/ }SERVICE_REQUIRED_PRIVILEGES_INFOA,*LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
/*385*/ typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW{
/*386*/ LPWSTR pmszRequiredPrivileges;
/*387*/ }SERVICE_REQUIRED_PRIVILEGES_INFOW,*LPSERVICE_REQUIRED_PRIVILEGES_INFOW;
/*392*/ typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
/*393*/ typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;
/*399*/ typedef struct _SERVICE_PRESHUTDOWN_INFO{
/*400*/ DWORD dwPreshutdownTimeout;
/*401*/ }SERVICE_PRESHUTDOWN_INFO,*LPSERVICE_PRESHUTDOWN_INFO;
/*407*/ struct SC_HANDLE__{int unused;};typedef struct SC_HANDLE__*SC_HANDLE;
/*408*/ typedef SC_HANDLE*LPSC_HANDLE;
/*410*/ struct SERVICE_STATUS_HANDLE__{int unused;};typedef struct SERVICE_STATUS_HANDLE__*SERVICE_STATUS_HANDLE;
/*416*/ typedef enum _SC_STATUS_TYPE{
/*417*/ SC_STATUS_PROCESS_INFO=0
/*418*/ }SC_STATUS_TYPE;
/*423*/ typedef enum _SC_ENUM_TYPE{
/*424*/ SC_ENUM_PROCESS_INFO=0
/*425*/ }SC_ENUM_TYPE;
/*432*/ typedef struct _SERVICE_STATUS{
/*433*/ DWORD dwServiceType;
/*434*/ DWORD dwCurrentState;
/*435*/ DWORD dwControlsAccepted;
/*436*/ DWORD dwWin32ExitCode;
/*437*/ DWORD dwServiceSpecificExitCode;
/*438*/ DWORD dwCheckPoint;
/*439*/ DWORD dwWaitHint;
/*440*/ }SERVICE_STATUS,*LPSERVICE_STATUS;
/*442*/ typedef struct _SERVICE_STATUS_PROCESS{
/*443*/ DWORD dwServiceType;
/*444*/ DWORD dwCurrentState;
/*445*/ DWORD dwControlsAccepted;
/*446*/ DWORD dwWin32ExitCode;
/*447*/ DWORD dwServiceSpecificExitCode;
/*448*/ DWORD dwCheckPoint;
/*449*/ DWORD dwWaitHint;
/*450*/ DWORD dwProcessId;
/*451*/ DWORD dwServiceFlags;
/*452*/ }SERVICE_STATUS_PROCESS,*LPSERVICE_STATUS_PROCESS;
/*459*/ typedef struct _ENUM_SERVICE_STATUSA{
/*460*/ LPSTR lpServiceName;
/*461*/ LPSTR lpDisplayName;
/*462*/ SERVICE_STATUS ServiceStatus;
/*463*/ }ENUM_SERVICE_STATUSA,*LPENUM_SERVICE_STATUSA;
/*464*/ typedef struct _ENUM_SERVICE_STATUSW{
/*465*/ LPWSTR lpServiceName;
/*466*/ LPWSTR lpDisplayName;
/*467*/ SERVICE_STATUS ServiceStatus;
/*468*/ }ENUM_SERVICE_STATUSW,*LPENUM_SERVICE_STATUSW;
/*473*/ typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
/*474*/ typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
/*477*/ typedef struct _ENUM_SERVICE_STATUS_PROCESSA{
/*478*/ LPSTR lpServiceName;
/*479*/ LPSTR lpDisplayName;
/*480*/ SERVICE_STATUS_PROCESS ServiceStatusProcess;
/*481*/ }ENUM_SERVICE_STATUS_PROCESSA,*LPENUM_SERVICE_STATUS_PROCESSA;
/*482*/ typedef struct _ENUM_SERVICE_STATUS_PROCESSW{
/*483*/ LPWSTR lpServiceName;
/*484*/ LPWSTR lpDisplayName;
/*485*/ SERVICE_STATUS_PROCESS ServiceStatusProcess;
/*486*/ }ENUM_SERVICE_STATUS_PROCESSW,*LPENUM_SERVICE_STATUS_PROCESSW;
/*491*/ typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
/*492*/ typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
/*499*/ typedef LPVOID SC_LOCK;
/*501*/ typedef struct _QUERY_SERVICE_LOCK_STATUSA{
/*502*/ DWORD fIsLocked;
/*503*/ LPSTR lpLockOwner;
/*504*/ DWORD dwLockDuration;
/*505*/ }QUERY_SERVICE_LOCK_STATUSA,*LPQUERY_SERVICE_LOCK_STATUSA;
/*506*/ typedef struct _QUERY_SERVICE_LOCK_STATUSW{
/*507*/ DWORD fIsLocked;
/*508*/ LPWSTR lpLockOwner;
/*509*/ DWORD dwLockDuration;
/*510*/ }QUERY_SERVICE_LOCK_STATUSW,*LPQUERY_SERVICE_LOCK_STATUSW;
/*515*/ typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
/*516*/ typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
/*525*/ typedef struct _QUERY_SERVICE_CONFIGA{
/*526*/ DWORD dwServiceType;
/*527*/ DWORD dwStartType;
/*528*/ DWORD dwErrorControl;
/*529*/ LPSTR lpBinaryPathName;
/*530*/ LPSTR lpLoadOrderGroup;
/*531*/ DWORD dwTagId;
/*532*/ LPSTR lpDependencies;
/*533*/ LPSTR lpServiceStartName;
/*534*/ LPSTR lpDisplayName;
/*535*/ }QUERY_SERVICE_CONFIGA,*LPQUERY_SERVICE_CONFIGA;
/*536*/ typedef struct _QUERY_SERVICE_CONFIGW{
/*537*/ DWORD dwServiceType;
/*538*/ DWORD dwStartType;
/*539*/ DWORD dwErrorControl;
/*540*/ LPWSTR lpBinaryPathName;
/*541*/ LPWSTR lpLoadOrderGroup;
/*542*/ DWORD dwTagId;
/*543*/ LPWSTR lpDependencies;
/*544*/ LPWSTR lpServiceStartName;
/*545*/ LPWSTR lpDisplayName;
/*546*/ }QUERY_SERVICE_CONFIGW,*LPQUERY_SERVICE_CONFIGW;
/*551*/ typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
/*552*/ typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
/*561*/ typedef void(typ*LPSERVICE_MAIN_FUNCTIONW)(
/*562*/ DWORD dwNumServicesArgs,
/*563*/ LPWSTR*lpServiceArgVectors
/*564*/ );
/*566*/ typedef void(typ*LPSERVICE_MAIN_FUNCTIONA)(
/*567*/ DWORD dwNumServicesArgs,
/*568*/ LPSTR*lpServiceArgVectors
/*569*/ );
/*582*/ typedef struct _SERVICE_TABLE_ENTRYA{
/*583*/ LPSTR lpServiceName;
/*584*/ LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
/*585*/ }SERVICE_TABLE_ENTRYA,*LPSERVICE_TABLE_ENTRYA;
/*586*/ typedef struct _SERVICE_TABLE_ENTRYW{
/*587*/ LPWSTR lpServiceName;
/*588*/ LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
/*589*/ }SERVICE_TABLE_ENTRYW,*LPSERVICE_TABLE_ENTRYW;
/*594*/ typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
/*595*/ typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
/*602*/ typedef void(typ*LPHANDLER_FUNCTION)(
/*603*/ DWORD dwControl
/*604*/ );
/*606*/ typedef DWORD(typ*LPHANDLER_FUNCTION_EX)(
/*607*/ DWORD dwControl,
/*608*/ DWORD dwEventType,
/*609*/ LPVOID lpEventData,
/*610*/ LPVOID lpContext
/*611*/ );
/*616*/ typedef
/*617*/ void
/*618*/ (typ*PFN_SC_NOTIFY_CALLBACK)(
/*619*/ typ PVOID pParameter
/*620*/ );
/*625*/ typedef struct _SERVICE_NOTIFY_1{
/*626*/ DWORD dwVersion;
/*627*/ PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
/*628*/ PVOID pContext;
/*629*/ DWORD dwNotificationStatus;
/*630*/ SERVICE_STATUS_PROCESS ServiceStatus;
/*631*/ }SERVICE_NOTIFY_1,*PSERVICE_NOTIFY_1;
/*633*/ typedef struct _SERVICE_NOTIFY_2A{
/*634*/ DWORD dwVersion;
/*635*/ PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
/*636*/ PVOID pContext;
/*637*/ DWORD dwNotificationStatus;
/*638*/ SERVICE_STATUS_PROCESS ServiceStatus;
/*639*/ DWORD dwNotificationTriggered;
/*640*/ LPSTR pszServiceNames;
/*641*/ }SERVICE_NOTIFY_2A,*PSERVICE_NOTIFY_2A;
/*642*/ typedef struct _SERVICE_NOTIFY_2W{
/*643*/ DWORD dwVersion;
/*644*/ PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
/*645*/ PVOID pContext;
/*646*/ DWORD dwNotificationStatus;
/*647*/ SERVICE_STATUS_PROCESS ServiceStatus;
/*648*/ DWORD dwNotificationTriggered;
/*649*/ LPWSTR pszServiceNames;
/*650*/ }SERVICE_NOTIFY_2W,*PSERVICE_NOTIFY_2W;
/*655*/ typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
/*656*/ typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;
/*659*/ typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA,*PSERVICE_NOTIFYA;
/*660*/ typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW,*PSERVICE_NOTIFYW;
/*665*/ typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
/*666*/ typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;
/*672*/ typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA{
/*673*/ DWORD dwReason;
/*674*/ LPSTR pszComment;
/*675*/ SERVICE_STATUS_PROCESS ServiceStatus;
/*676*/ }SERVICE_CONTROL_STATUS_REASON_PARAMSA,*PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
/*680*/ typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW{
/*681*/ DWORD dwReason;
/*682*/ LPWSTR pszComment;
/*683*/ SERVICE_STATUS_PROCESS ServiceStatus;
/*684*/ }SERVICE_CONTROL_STATUS_REASON_PARAMSW,*PSERVICE_CONTROL_STATUS_REASON_PARAMSW;
/*689*/ typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
/*690*/ typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;
/*697*/ 
/*698*/ BOOL
/*699*/ typ
/*700*/ ChangeServiceConfigA(
/*701*/ typ typ typ typ typ SC_HANDLE hService,
/*702*/ typ typ typ typ typ DWORD dwServiceType,
/*703*/ typ typ typ typ typ DWORD dwStartType,
/*704*/ typ typ typ typ typ DWORD dwErrorControl,
/*705*/ typ typ typ typ typ typ typ LPCSTR lpBinaryPathName,
/*706*/ typ typ typ typ typ typ typ LPCSTR lpLoadOrderGroup,
/*707*/ typ typ typ typ typ typ typ LPDWORD lpdwTagId,
/*708*/ typ typ typ typ typ typ typ LPCSTR lpDependencies,
/*709*/ typ typ typ typ typ typ typ LPCSTR lpServiceStartName,
/*710*/ typ typ typ typ typ typ typ LPCSTR lpPassword,
/*711*/ typ typ typ typ typ typ typ LPCSTR lpDisplayName
/*712*/ );
/*713*/ 
/*714*/ BOOL
/*715*/ typ
/*716*/ ChangeServiceConfigW(
/*717*/ typ typ typ typ typ SC_HANDLE hService,
/*718*/ typ typ typ typ typ DWORD dwServiceType,
/*719*/ typ typ typ typ typ DWORD dwStartType,
/*720*/ typ typ typ typ typ DWORD dwErrorControl,
/*721*/ typ typ typ typ typ typ typ LPCWSTR lpBinaryPathName,
/*722*/ typ typ typ typ typ typ typ LPCWSTR lpLoadOrderGroup,
/*723*/ typ typ typ typ typ typ typ LPDWORD lpdwTagId,
/*724*/ typ typ typ typ typ typ typ LPCWSTR lpDependencies,
/*725*/ typ typ typ typ typ typ typ LPCWSTR lpServiceStartName,
/*726*/ typ typ typ typ typ typ typ LPCWSTR lpPassword,
/*727*/ typ typ typ typ typ typ typ LPCWSTR lpDisplayName
/*728*/ );
/*735*/ 
/*736*/ BOOL
/*737*/ typ
/*738*/ ChangeServiceConfig2A(
/*739*/ typ typ typ typ typ SC_HANDLE hService,
/*740*/ typ typ typ typ typ DWORD dwInfoLevel,
/*741*/ typ typ typ typ typ typ typ LPVOID lpInfo
/*742*/ );
/*743*/ 
/*744*/ BOOL
/*745*/ typ
/*746*/ ChangeServiceConfig2W(
/*747*/ typ typ typ typ typ SC_HANDLE hService,
/*748*/ typ typ typ typ typ DWORD dwInfoLevel,
/*749*/ typ typ typ typ typ typ typ LPVOID lpInfo
/*750*/ );
/*757*/ 
/*758*/ BOOL
/*759*/ typ
/*760*/ CloseServiceHandle(
/*761*/ typ typ typ typ typ SC_HANDLE hSCObject
/*762*/ );
/*764*/ 
/*765*/ BOOL
/*766*/ typ
/*767*/ ControlService(
/*768*/ typ typ typ typ typ SC_HANDLE hService,
/*769*/ typ typ typ typ typ DWORD dwControl,
/*770*/ typ typ typ typ typ LPSERVICE_STATUS lpServiceStatus
/*771*/ );
/*773*/ typ __inner_checkReturn
/*774*/ 
/*775*/ SC_HANDLE
/*776*/ typ
/*777*/ CreateServiceA(
/*778*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*779*/ typ typ typ typ typ LPCSTR lpServiceName,
/*780*/ typ typ typ typ typ typ typ LPCSTR lpDisplayName,
/*781*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*782*/ typ typ typ typ typ DWORD dwServiceType,
/*783*/ typ typ typ typ typ DWORD dwStartType,
/*784*/ typ typ typ typ typ DWORD dwErrorControl,
/*785*/ typ typ typ typ typ typ typ LPCSTR lpBinaryPathName,
/*786*/ typ typ typ typ typ typ typ LPCSTR lpLoadOrderGroup,
/*787*/ typ typ typ typ typ typ typ LPDWORD lpdwTagId,
/*788*/ typ typ typ typ typ typ typ LPCSTR lpDependencies,
/*789*/ typ typ typ typ typ typ typ LPCSTR lpServiceStartName,
/*790*/ typ typ typ typ typ typ typ LPCSTR lpPassword
/*791*/ );
/*792*/ typ __inner_checkReturn
/*793*/ 
/*794*/ SC_HANDLE
/*795*/ typ
/*796*/ CreateServiceW(
/*797*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*798*/ typ typ typ typ typ LPCWSTR lpServiceName,
/*799*/ typ typ typ typ typ typ typ LPCWSTR lpDisplayName,
/*800*/ typ typ typ typ typ DWORD dwDesiredAccess,
/*801*/ typ typ typ typ typ DWORD dwServiceType,
/*802*/ typ typ typ typ typ DWORD dwStartType,
/*803*/ typ typ typ typ typ DWORD dwErrorControl,
/*804*/ typ typ typ typ typ typ typ LPCWSTR lpBinaryPathName,
/*805*/ typ typ typ typ typ typ typ LPCWSTR lpLoadOrderGroup,
/*806*/ typ typ typ typ typ typ typ LPDWORD lpdwTagId,
/*807*/ typ typ typ typ typ typ typ LPCWSTR lpDependencies,
/*808*/ typ typ typ typ typ typ typ LPCWSTR lpServiceStartName,
/*809*/ typ typ typ typ typ typ typ LPCWSTR lpPassword
/*810*/ );
/*817*/ 
/*818*/ BOOL
/*819*/ typ
/*820*/ DeleteService(
/*821*/ typ typ typ typ typ SC_HANDLE hService
/*822*/ );
/*824*/ typ __inner_checkReturn
/*825*/ 
/*826*/ BOOL
/*827*/ typ
/*828*/ EnumDependentServicesA(
/*829*/ typ typ typ typ typ SC_HANDLE hService,
/*830*/ typ typ typ typ typ DWORD dwServiceState,
/*831*/ typ typ typ typ typ typ typ
/*832*/ LPENUM_SERVICE_STATUSA lpServices,
/*833*/ typ typ typ typ typ DWORD cbBufSize,
/*834*/ typ typ typ typ typ LPDWORD pcbBytesNeeded,
/*835*/ typ typ typ typ typ LPDWORD lpServicesReturned
/*836*/ );
/*837*/ typ __inner_checkReturn
/*838*/ 
/*839*/ BOOL
/*840*/ typ
/*841*/ EnumDependentServicesW(
/*842*/ typ typ typ typ typ SC_HANDLE hService,
/*843*/ typ typ typ typ typ DWORD dwServiceState,
/*844*/ typ typ typ typ typ typ typ
/*845*/ LPENUM_SERVICE_STATUSW lpServices,
/*846*/ typ typ typ typ typ DWORD cbBufSize,
/*847*/ typ typ typ typ typ LPDWORD pcbBytesNeeded,
/*848*/ typ typ typ typ typ LPDWORD lpServicesReturned
/*849*/ );
/*856*/ typ __inner_checkReturn
/*857*/ 
/*858*/ BOOL
/*859*/ typ
/*860*/ EnumServicesStatusA(
/*861*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*862*/ typ typ typ typ typ DWORD dwServiceType,
/*863*/ typ typ typ typ typ DWORD dwServiceState,
/*864*/ typ typ typ typ typ typ typ
/*865*/ LPENUM_SERVICE_STATUSA lpServices,
/*866*/ typ typ typ typ typ DWORD cbBufSize,
/*867*/ typ typ typ typ typ LPDWORD pcbBytesNeeded,
/*868*/ typ typ typ typ typ LPDWORD lpServicesReturned,
/*869*/ typ typ typ typ typ typ typ LPDWORD lpResumeHandle
/*870*/ );
/*871*/ typ __inner_checkReturn
/*872*/ 
/*873*/ BOOL
/*874*/ typ
/*875*/ EnumServicesStatusW(
/*876*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*877*/ typ typ typ typ typ DWORD dwServiceType,
/*878*/ typ typ typ typ typ DWORD dwServiceState,
/*879*/ typ typ typ typ typ typ typ
/*880*/ LPENUM_SERVICE_STATUSW lpServices,
/*881*/ typ typ typ typ typ DWORD cbBufSize,
/*882*/ typ typ typ typ typ LPDWORD pcbBytesNeeded,
/*883*/ typ typ typ typ typ LPDWORD lpServicesReturned,
/*884*/ typ typ typ typ typ typ typ LPDWORD lpResumeHandle
/*885*/ );
/*892*/ typ __inner_checkReturn
/*893*/ 
/*894*/ BOOL
/*895*/ typ
/*896*/ EnumServicesStatusExA(
/*897*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*898*/ typ typ typ typ typ SC_ENUM_TYPE InfoLevel,
/*899*/ typ typ typ typ typ DWORD dwServiceType,
/*900*/ typ typ typ typ typ DWORD dwServiceState,
/*901*/ typ typ typ typ typ typ typ
/*902*/ LPBYTE lpServices,
/*903*/ typ typ typ typ typ DWORD cbBufSize,
/*904*/ typ typ typ typ typ LPDWORD pcbBytesNeeded,
/*905*/ typ typ typ typ typ LPDWORD lpServicesReturned,
/*906*/ typ typ typ typ typ typ typ LPDWORD lpResumeHandle,
/*907*/ typ typ typ typ typ typ typ LPCSTR pszGroupName
/*908*/ );
/*909*/ typ __inner_checkReturn
/*910*/ 
/*911*/ BOOL
/*912*/ typ
/*913*/ EnumServicesStatusExW(
/*914*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*915*/ typ typ typ typ typ SC_ENUM_TYPE InfoLevel,
/*916*/ typ typ typ typ typ DWORD dwServiceType,
/*917*/ typ typ typ typ typ DWORD dwServiceState,
/*918*/ typ typ typ typ typ typ typ
/*919*/ LPBYTE lpServices,
/*920*/ typ typ typ typ typ DWORD cbBufSize,
/*921*/ typ typ typ typ typ LPDWORD pcbBytesNeeded,
/*922*/ typ typ typ typ typ LPDWORD lpServicesReturned,
/*923*/ typ typ typ typ typ typ typ LPDWORD lpResumeHandle,
/*924*/ typ typ typ typ typ typ typ LPCWSTR pszGroupName
/*925*/ );
/*932*/ typ __inner_checkReturn
/*933*/ 
/*934*/ BOOL
/*935*/ typ
/*936*/ GetServiceKeyNameA(
/*937*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*938*/ typ typ typ typ typ LPCSTR lpDisplayName,
/*939*/ typ typ typ typ typ typ typ
/*940*/ LPSTR lpServiceName,
/*941*/ typ typ typ typ typ LPDWORD lpcchBuffer
/*942*/ );
/*943*/ typ __inner_checkReturn
/*944*/ 
/*945*/ BOOL
/*946*/ typ
/*947*/ GetServiceKeyNameW(
/*948*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*949*/ typ typ typ typ typ LPCWSTR lpDisplayName,
/*950*/ typ typ typ typ typ typ typ
/*951*/ LPWSTR lpServiceName,
/*952*/ typ typ typ typ typ LPDWORD lpcchBuffer
/*953*/ );
/*960*/ typ __inner_checkReturn
/*961*/ 
/*962*/ BOOL
/*963*/ typ
/*964*/ GetServiceDisplayNameA(
/*965*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*966*/ typ typ typ typ typ LPCSTR lpServiceName,
/*967*/ typ typ typ typ typ typ typ
/*968*/ LPSTR lpDisplayName,
/*969*/ typ typ typ typ typ LPDWORD lpcchBuffer
/*970*/ );
/*971*/ typ __inner_checkReturn
/*972*/ 
/*973*/ BOOL
/*974*/ typ
/*975*/ GetServiceDisplayNameW(
/*976*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*977*/ typ typ typ typ typ LPCWSTR lpServiceName,
/*978*/ typ typ typ typ typ typ typ
/*979*/ LPWSTR lpDisplayName,
/*980*/ typ typ typ typ typ LPDWORD lpcchBuffer
/*981*/ );
/*988*/ 
/*989*/ SC_LOCK
/*990*/ typ
/*991*/ LockServiceDatabase(
/*992*/ typ typ typ typ typ SC_HANDLE hSCManager
/*993*/ );
/*995*/ 
/*996*/ BOOL
/*997*/ typ
/*998*/ NotifyBootConfigStatus(
/*999*/ typ typ typ typ typ BOOL BootAcceptable
/*1000*/ );
/*1002*/ typ __inner_checkReturn
/*1003*/ 
/*1004*/ SC_HANDLE
/*1005*/ typ
/*1006*/ OpenSCManagerA(
/*1007*/ typ typ typ typ typ typ typ LPCSTR lpMachineName,
/*1008*/ typ typ typ typ typ typ typ LPCSTR lpDatabaseName,
/*1009*/ typ typ typ typ typ DWORD dwDesiredAccess
/*1010*/ );
/*1011*/ typ __inner_checkReturn
/*1012*/ 
/*1013*/ SC_HANDLE
/*1014*/ typ
/*1015*/ OpenSCManagerW(
/*1016*/ typ typ typ typ typ typ typ LPCWSTR lpMachineName,
/*1017*/ typ typ typ typ typ typ typ LPCWSTR lpDatabaseName,
/*1018*/ typ typ typ typ typ DWORD dwDesiredAccess
/*1019*/ );
/*1026*/ typ __inner_checkReturn
/*1027*/ 
/*1028*/ SC_HANDLE
/*1029*/ typ
/*1030*/ OpenServiceA(
/*1031*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*1032*/ typ typ typ typ typ LPCSTR lpServiceName,
/*1033*/ typ typ typ typ typ DWORD dwDesiredAccess
/*1034*/ );
/*1035*/ typ __inner_checkReturn
/*1036*/ 
/*1037*/ SC_HANDLE
/*1038*/ typ
/*1039*/ OpenServiceW(
/*1040*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*1041*/ typ typ typ typ typ LPCWSTR lpServiceName,
/*1042*/ typ typ typ typ typ DWORD dwDesiredAccess
/*1043*/ );
/*1050*/ typ __inner_checkReturn
/*1051*/ 
/*1052*/ BOOL
/*1053*/ typ
/*1054*/ QueryServiceConfigA(
/*1055*/ typ typ typ typ typ SC_HANDLE hService,
/*1056*/ typ typ typ typ typ typ typ
/*1057*/ LPQUERY_SERVICE_CONFIGA lpServiceConfig,
/*1058*/ typ typ typ typ typ DWORD cbBufSize,
/*1059*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1060*/ );
/*1061*/ typ __inner_checkReturn
/*1062*/ 
/*1063*/ BOOL
/*1064*/ typ
/*1065*/ QueryServiceConfigW(
/*1066*/ typ typ typ typ typ SC_HANDLE hService,
/*1067*/ typ typ typ typ typ typ typ
/*1068*/ LPQUERY_SERVICE_CONFIGW lpServiceConfig,
/*1069*/ typ typ typ typ typ DWORD cbBufSize,
/*1070*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1071*/ );
/*1078*/ typ __inner_checkReturn
/*1079*/ 
/*1080*/ BOOL
/*1081*/ typ
/*1082*/ QueryServiceConfig2A(
/*1083*/ typ typ typ typ typ SC_HANDLE hService,
/*1084*/ typ typ typ typ typ DWORD dwInfoLevel,
/*1085*/ typ typ typ typ typ typ typ
/*1086*/ LPBYTE lpBuffer,
/*1087*/ typ typ typ typ typ DWORD cbBufSize,
/*1088*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1089*/ );
/*1090*/ typ __inner_checkReturn
/*1091*/ 
/*1092*/ BOOL
/*1093*/ typ
/*1094*/ QueryServiceConfig2W(
/*1095*/ typ typ typ typ typ SC_HANDLE hService,
/*1096*/ typ typ typ typ typ DWORD dwInfoLevel,
/*1097*/ typ typ typ typ typ typ typ
/*1098*/ LPBYTE lpBuffer,
/*1099*/ typ typ typ typ typ DWORD cbBufSize,
/*1100*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1101*/ );
/*1108*/ typ __inner_checkReturn
/*1109*/ 
/*1110*/ BOOL
/*1111*/ typ
/*1112*/ QueryServiceLockStatusA(
/*1113*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*1114*/ typ typ typ typ typ typ typ
/*1115*/ LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,
/*1116*/ typ typ typ typ typ DWORD cbBufSize,
/*1117*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1118*/ );
/*1119*/ typ __inner_checkReturn
/*1120*/ 
/*1121*/ BOOL
/*1122*/ typ
/*1123*/ QueryServiceLockStatusW(
/*1124*/ typ typ typ typ typ SC_HANDLE hSCManager,
/*1125*/ typ typ typ typ typ typ typ
/*1126*/ LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,
/*1127*/ typ typ typ typ typ DWORD cbBufSize,
/*1128*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1129*/ );
/*1136*/ typ __inner_checkReturn
/*1137*/ 
/*1138*/ BOOL
/*1139*/ typ
/*1140*/ QueryServiceObjectSecurity(
/*1141*/ typ typ typ typ typ SC_HANDLE hService,
/*1142*/ typ typ typ typ typ SECURITY_INFORMATION dwSecurityInformation,
/*1143*/ typ typ typ typ typ typ typ
/*1144*/ PSECURITY_DESCRIPTOR lpSecurityDescriptor,
/*1145*/ typ typ typ typ typ DWORD cbBufSize,
/*1146*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1147*/ );
/*1149*/ typ __inner_checkReturn
/*1150*/ 
/*1151*/ BOOL
/*1152*/ typ
/*1153*/ QueryServiceStatus(
/*1154*/ typ typ typ typ typ SC_HANDLE hService,
/*1155*/ typ typ typ typ typ LPSERVICE_STATUS lpServiceStatus
/*1156*/ );
/*1158*/ typ __inner_checkReturn
/*1159*/ 
/*1160*/ BOOL
/*1161*/ typ
/*1162*/ QueryServiceStatusEx(
/*1163*/ typ typ typ typ typ SC_HANDLE hService,
/*1164*/ typ typ typ typ typ SC_STATUS_TYPE InfoLevel,
/*1165*/ typ typ typ typ typ typ typ
/*1166*/ LPBYTE lpBuffer,
/*1167*/ typ typ typ typ typ DWORD cbBufSize,
/*1168*/ typ typ typ typ typ LPDWORD pcbBytesNeeded
/*1169*/ );
/*1171*/ typ __inner_checkReturn
/*1172*/ 
/*1173*/ SERVICE_STATUS_HANDLE
/*1174*/ typ
/*1175*/ RegisterServiceCtrlHandlerA(
/*1176*/ typ typ typ typ typ LPCSTR lpServiceName,
/*1177*/ typ typ typ typ typ typ
/*1178*/ LPHANDLER_FUNCTION lpHandlerProc
/*1179*/ );
/*1180*/ typ __inner_checkReturn
/*1181*/ 
/*1182*/ SERVICE_STATUS_HANDLE
/*1183*/ typ
/*1184*/ RegisterServiceCtrlHandlerW(
/*1185*/ typ typ typ typ typ LPCWSTR lpServiceName,
/*1186*/ typ typ typ typ typ typ
/*1187*/ LPHANDLER_FUNCTION lpHandlerProc
/*1188*/ );
/*1195*/ typ __inner_checkReturn
/*1196*/ 
/*1197*/ SERVICE_STATUS_HANDLE
/*1198*/ typ
/*1199*/ RegisterServiceCtrlHandlerExA(
/*1200*/ typ typ typ typ typ LPCSTR lpServiceName,
/*1201*/ typ typ typ typ typ typ
/*1202*/ LPHANDLER_FUNCTION_EX lpHandlerProc,
/*1203*/ typ typ typ typ typ typ typ LPVOID lpContext
/*1204*/ );
/*1205*/ typ __inner_checkReturn
/*1206*/ 
/*1207*/ SERVICE_STATUS_HANDLE
/*1208*/ typ
/*1209*/ RegisterServiceCtrlHandlerExW(
/*1210*/ typ typ typ typ typ LPCWSTR lpServiceName,
/*1211*/ typ typ typ typ typ typ
/*1212*/ LPHANDLER_FUNCTION_EX lpHandlerProc,
/*1213*/ typ typ typ typ typ typ typ LPVOID lpContext
/*1214*/ );
/*1221*/ 
/*1222*/ BOOL
/*1223*/ typ
/*1224*/ SetServiceObjectSecurity(
/*1225*/ typ typ typ typ typ SC_HANDLE hService,
/*1226*/ typ typ typ typ typ SECURITY_INFORMATION dwSecurityInformation,
/*1227*/ typ typ typ typ typ PSECURITY_DESCRIPTOR lpSecurityDescriptor
/*1228*/ );
/*1230*/ 
/*1231*/ BOOL
/*1232*/ typ
/*1233*/ SetServiceStatus(
/*1234*/ typ typ typ typ typ SERVICE_STATUS_HANDLE hServiceStatus,
/*1235*/ typ typ typ typ typ LPSERVICE_STATUS lpServiceStatus
/*1236*/ );
/*1238*/ 
/*1239*/ BOOL
/*1240*/ typ
/*1241*/ StartServiceCtrlDispatcherA(
/*1242*/ typ typ typ typ typ const SERVICE_TABLE_ENTRYA*lpServiceStartTable
/*1243*/ );
/*1244*/ 
/*1245*/ BOOL
/*1246*/ typ
/*1247*/ StartServiceCtrlDispatcherW(
/*1248*/ typ typ typ typ typ const SERVICE_TABLE_ENTRYW*lpServiceStartTable
/*1249*/ );
/*1257*/ 
/*1258*/ BOOL
/*1259*/ typ
/*1260*/ StartServiceA(
/*1261*/ typ typ typ typ typ SC_HANDLE hService,
/*1262*/ typ typ typ typ typ DWORD dwNumServiceArgs,
/*1263*/ typ typ typ typ typ typ typ typ typ
/*1264*/ LPCSTR*lpServiceArgVectors
/*1265*/ );
/*1266*/ 
/*1267*/ BOOL
/*1268*/ typ
/*1269*/ StartServiceW(
/*1270*/ typ typ typ typ typ SC_HANDLE hService,
/*1271*/ typ typ typ typ typ DWORD dwNumServiceArgs,
/*1272*/ typ typ typ typ typ typ typ typ typ
/*1273*/ LPCWSTR*lpServiceArgVectors
/*1274*/ );
/*1281*/ 
/*1282*/ BOOL
/*1283*/ typ
/*1284*/ UnlockServiceDatabase(
/*1285*/ typ typ typ typ typ SC_LOCK ScLock
/*1286*/ );
/*1290*/ 
/*1291*/ DWORD
/*1292*/ typ
/*1293*/ NotifyServiceStatusChangeA(
/*1294*/ typ typ typ typ typ SC_HANDLE hService,
/*1295*/ typ typ typ typ typ DWORD dwNotifyMask,
/*1296*/ typ typ typ typ typ PSERVICE_NOTIFYA pNotifyBuffer
/*1297*/ );
/*1298*/ 
/*1299*/ DWORD
/*1300*/ typ
/*1301*/ NotifyServiceStatusChangeW(
/*1302*/ typ typ typ typ typ SC_HANDLE hService,
/*1303*/ typ typ typ typ typ DWORD dwNotifyMask,
/*1304*/ typ typ typ typ typ PSERVICE_NOTIFYW pNotifyBuffer
/*1305*/ );
/*1312*/ 
/*1313*/ BOOL
/*1314*/ typ
/*1315*/ ControlServiceExA(
/*1316*/ typ typ typ typ typ SC_HANDLE hService,
/*1317*/ typ typ typ typ typ DWORD dwControl,
/*1318*/ typ typ typ typ typ DWORD dwInfoLevel,
/*1319*/ typ typ typ typ typ PVOID pControlParams
/*1320*/ );
/*1321*/ 
/*1322*/ BOOL
/*1323*/ typ
/*1324*/ ControlServiceExW(
/*1325*/ typ typ typ typ typ SC_HANDLE hService,
/*1326*/ typ typ typ typ typ DWORD dwControl,
/*1327*/ typ typ typ typ typ DWORD dwInfoLevel,
/*1328*/ typ typ typ typ typ PVOID pControlParams
/*1329*/ );
/*16*/ typedef struct _MODEMDEVCAPS{
/*17*/ DWORD dwActualSize;
/*18*/ DWORD dwRequiredSize;
/*19*/ DWORD dwDevSpecificOffset;
/*20*/ DWORD dwDevSpecificSize;
/*23*/ DWORD dwModemProviderVersion;
/*24*/ DWORD dwModemManufacturerOffset;
/*25*/ DWORD dwModemManufacturerSize;
/*26*/ DWORD dwModemModelOffset;
/*27*/ DWORD dwModemModelSize;
/*28*/ DWORD dwModemVersionOffset;
/*29*/ DWORD dwModemVersionSize;
/*32*/ DWORD dwDialOptions;
/*33*/ DWORD dwCallSetupFailTimer;
/*34*/ DWORD dwInactivityTimeout;
/*35*/ DWORD dwSpeakerVolume;
/*36*/ DWORD dwSpeakerMode;
/*37*/ DWORD dwModemOptions;
/*38*/ DWORD dwMaxDTERate;
/*39*/ DWORD dwMaxDCERate;
/*42*/ BYTE abVariablePortion[1];
/*43*/ }MODEMDEVCAPS,*PMODEMDEVCAPS,*LPMODEMDEVCAPS;
/*45*/ typedef struct _MODEMSETTINGS{
/*46*/ DWORD dwActualSize;
/*47*/ DWORD dwRequiredSize;
/*48*/ DWORD dwDevSpecificOffset;
/*49*/ DWORD dwDevSpecificSize;
/*52*/ DWORD dwCallSetupFailTimer;
/*53*/ DWORD dwInactivityTimeout;
/*54*/ DWORD dwSpeakerVolume;
/*55*/ DWORD dwSpeakerMode;
/*56*/ DWORD dwPreferredModemOptions;
/*59*/ DWORD dwNegotiatedModemOptions;
/*60*/ DWORD dwNegotiatedDCERate;
/*63*/ BYTE abVariablePortion[1];
/*64*/ }MODEMSETTINGS,*PMODEMSETTINGS,*LPMODEMSETTINGS;
/*20*/ struct HIMC__{int unused;};typedef struct HIMC__*HIMC;
/*21*/ struct HIMCC__{int unused;};typedef struct HIMCC__*HIMCC;
/*27*/ typedef HKL typ*LPHKL;
/*28*/ typedef UINT typ*LPUINT;
/*30*/ typedef struct tagCOMPOSITIONFORM{
/*31*/ DWORD dwStyle;
/*32*/ POINT ptCurrentPos;
/*33*/ RECT rcArea;
/*34*/ }COMPOSITIONFORM,*PCOMPOSITIONFORM,typ*NPCOMPOSITIONFORM,typ*LPCOMPOSITIONFORM;
/*37*/ typedef struct tagCANDIDATEFORM{
/*38*/ DWORD dwIndex;
/*39*/ DWORD dwStyle;
/*40*/ POINT ptCurrentPos;
/*41*/ RECT rcArea;
/*42*/ }CANDIDATEFORM,*PCANDIDATEFORM,typ*NPCANDIDATEFORM,typ*LPCANDIDATEFORM;
/*45*/ typedef struct tagCANDIDATELIST{
/*46*/ DWORD dwSize;
/*47*/ DWORD dwStyle;
/*48*/ DWORD dwCount;
/*49*/ DWORD dwSelection;
/*50*/ DWORD dwPageStart;
/*51*/ DWORD dwPageSize;
/*52*/ DWORD dwOffset[1];
/*53*/ }CANDIDATELIST,*PCANDIDATELIST,typ*NPCANDIDATELIST,typ*LPCANDIDATELIST;
/*55*/ typedef struct tagREGISTERWORDA{
/*56*/ LPSTR lpReading;
/*57*/ LPSTR lpWord;
/*58*/ }REGISTERWORDA,*PREGISTERWORDA,typ*NPREGISTERWORDA,typ*LPREGISTERWORDA;
/*59*/ typedef struct tagREGISTERWORDW{
/*60*/ LPWSTR lpReading;
/*61*/ LPWSTR lpWord;
/*62*/ }REGISTERWORDW,*PREGISTERWORDW,typ*NPREGISTERWORDW,typ*LPREGISTERWORDW;
/*69*/ typedef REGISTERWORDA REGISTERWORD;
/*70*/ typedef PREGISTERWORDA PREGISTERWORD;
/*71*/ typedef NPREGISTERWORDA NPREGISTERWORD;
/*72*/ typedef LPREGISTERWORDA LPREGISTERWORD;
/*77*/ typedef struct tagRECONVERTSTRING{
/*78*/ DWORD dwSize;
/*79*/ DWORD dwVersion;
/*80*/ DWORD dwStrLen;
/*81*/ DWORD dwStrOffset;
/*82*/ DWORD dwCompStrLen;
/*83*/ DWORD dwCompStrOffset;
/*84*/ DWORD dwTargetStrLen;
/*85*/ DWORD dwTargetStrOffset;
/*86*/ }RECONVERTSTRING,*PRECONVERTSTRING,typ*NPRECONVERTSTRING,typ*LPRECONVERTSTRING;
/*92*/ typedef struct tagSTYLEBUFA{
/*93*/ DWORD dwStyle;
/*94*/ CHAR szDescription[32];
/*95*/ }STYLEBUFA,*PSTYLEBUFA,typ*NPSTYLEBUFA,typ*LPSTYLEBUFA;
/*96*/ typedef struct tagSTYLEBUFW{
/*97*/ DWORD dwStyle;
/*98*/ WCHAR szDescription[32];
/*99*/ }STYLEBUFW,*PSTYLEBUFW,typ*NPSTYLEBUFW,typ*LPSTYLEBUFW;
/*106*/ typedef STYLEBUFA STYLEBUF;
/*107*/ typedef PSTYLEBUFA PSTYLEBUF;
/*108*/ typedef NPSTYLEBUFA NPSTYLEBUF;
/*109*/ typedef LPSTYLEBUFA LPSTYLEBUF;
/*117*/ typedef struct tagIMEMENUITEMINFOA{
/*118*/ UINT cbSize;
/*119*/ UINT fType;
/*120*/ UINT fState;
/*121*/ UINT wID;
/*122*/ HBITMAP hbmpChecked;
/*123*/ HBITMAP hbmpUnchecked;
/*124*/ DWORD dwItemData;
/*125*/ CHAR szString[80];
/*126*/ HBITMAP hbmpItem;
/*127*/ }IMEMENUITEMINFOA,*PIMEMENUITEMINFOA,typ*NPIMEMENUITEMINFOA,typ*LPIMEMENUITEMINFOA;
/*128*/ typedef struct tagIMEMENUITEMINFOW{
/*129*/ UINT cbSize;
/*130*/ UINT fType;
/*131*/ UINT fState;
/*132*/ UINT wID;
/*133*/ HBITMAP hbmpChecked;
/*134*/ HBITMAP hbmpUnchecked;
/*135*/ DWORD dwItemData;
/*136*/ WCHAR szString[80];
/*137*/ HBITMAP hbmpItem;
/*138*/ }IMEMENUITEMINFOW,*PIMEMENUITEMINFOW,typ*NPIMEMENUITEMINFOW,typ*LPIMEMENUITEMINFOW;
/*145*/ typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
/*146*/ typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
/*147*/ typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
/*148*/ typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
/*151*/ typedef struct tagIMECHARPOSITION{
/*152*/ DWORD dwSize;
/*153*/ DWORD dwCharPos;
/*154*/ POINT pt;
/*155*/ UINT cLineHeight;
/*156*/ RECT rcDocument;
/*157*/ }IMECHARPOSITION,*PIMECHARPOSITION,typ*NPIMECHARPOSITION,typ*LPIMECHARPOSITION;
/*159*/ typedef BOOL(typ*IMCENUMPROC)(HIMC,LPARAM);
/*167*/ HKL typ ImmInstallIMEA(typ typ typ typ typ LPCSTR lpszIMEFileName,typ typ typ typ typ LPCSTR lpszLayoutText);
/*168*/ HKL typ ImmInstallIMEW(typ typ typ typ typ LPCWSTR lpszIMEFileName,typ typ typ typ typ LPCWSTR lpszLayoutText);
/*175*/ HWND typ ImmGetDefaultIMEWnd(typ HWND);
/*177*/ UINT typ ImmGetDescriptionA(typ HKL,typ typ typ typ typ typ typ LPSTR lpszDescription,typ UINT uBufLen);
/*178*/ UINT typ ImmGetDescriptionW(typ HKL,typ typ typ typ typ typ typ LPWSTR lpszDescription,typ UINT uBufLen);
/*185*/ UINT typ ImmGetIMEFileNameA(typ HKL,typ typ typ typ typ typ typ LPSTR lpszFileName,typ UINT uBufLen);
/*186*/ UINT typ ImmGetIMEFileNameW(typ HKL,typ typ typ typ typ typ typ LPWSTR lpszFileName,typ UINT uBufLen);
/*193*/ DWORD typ ImmGetProperty(typ HKL,typ DWORD);
/*195*/ BOOL typ ImmIsIME(typ HKL);
/*197*/ BOOL typ ImmSimulateHotKey(typ HWND,typ DWORD);
/*199*/ HIMC typ ImmCreateContext(void);
/*200*/ BOOL typ ImmDestroyContext(typ HIMC);
/*201*/ HIMC typ ImmGetContext(typ HWND);
/*202*/ BOOL typ ImmReleaseContext(typ HWND,typ HIMC);
/*203*/ HIMC typ ImmAssociateContext(typ HWND,typ HIMC);
/*205*/ BOOL typ ImmAssociateContextEx(typ HWND,typ HIMC,typ DWORD);
/*208*/ LONG typ ImmGetCompositionStringA(typ HIMC,typ DWORD,typ typ typ typ typ typ typ LPVOID lpBuf,typ DWORD dwBufLen);
/*209*/ LONG typ ImmGetCompositionStringW(typ HIMC,typ DWORD,typ typ typ typ typ typ typ LPVOID lpBuf,typ DWORD dwBufLen);
/*216*/ BOOL typ ImmSetCompositionStringA(typ HIMC,typ DWORD dwIndex,typ typ typ typ typ typ typ typ typ LPVOID lpComp,typ DWORD dwCompLen,typ typ typ typ typ typ typ typ typ LPVOID lpRead,typ DWORD dwReadLen);
/*217*/ BOOL typ ImmSetCompositionStringW(typ HIMC,typ DWORD dwIndex,typ typ typ typ typ typ typ typ typ LPVOID lpComp,typ DWORD dwCompLen,typ typ typ typ typ typ typ typ typ LPVOID lpRead,typ DWORD dwReadLen);
/*224*/ DWORD typ ImmGetCandidateListCountA(typ HIMC,typ typ typ typ typ LPDWORD lpdwListCount);
/*225*/ DWORD typ ImmGetCandidateListCountW(typ HIMC,typ typ typ typ typ LPDWORD lpdwListCount);
/*232*/ DWORD typ ImmGetCandidateListA(typ HIMC,typ DWORD deIndex,typ typ typ typ typ typ typ LPCANDIDATELIST lpCandList,typ DWORD dwBufLen);
/*233*/ DWORD typ ImmGetCandidateListW(typ HIMC,typ DWORD deIndex,typ typ typ typ typ typ typ LPCANDIDATELIST lpCandList,typ DWORD dwBufLen);
/*240*/ DWORD typ ImmGetGuideLineA(typ typ typ typ typ HIMC,typ typ typ typ typ DWORD dwIndex,typ typ typ typ typ typ typ LPSTR lpBuf,typ typ typ typ typ DWORD dwBufLen);
/*241*/ DWORD typ ImmGetGuideLineW(typ typ typ typ typ HIMC,typ typ typ typ typ DWORD dwIndex,typ typ typ typ typ typ typ LPWSTR lpBuf,typ typ typ typ typ DWORD dwBufLen);
/*248*/ BOOL typ ImmGetConversionStatus(typ HIMC,typ typ typ typ typ LPDWORD lpfdwConversion,typ typ typ typ typ LPDWORD lpfdwSentence);
/*249*/ BOOL typ ImmSetConversionStatus(typ HIMC,typ DWORD,typ DWORD);
/*250*/ BOOL typ ImmGetOpenStatus(typ HIMC);
/*251*/ BOOL typ ImmSetOpenStatus(typ HIMC,typ BOOL);
/*271*/ BOOL typ ImmConfigureIMEA(typ HKL,typ HWND,typ DWORD,typ LPVOID);
/*272*/ BOOL typ ImmConfigureIMEW(typ HKL,typ HWND,typ DWORD,typ LPVOID);
/*279*/ LRESULT typ ImmEscapeA(typ HKL,typ HIMC,typ UINT,typ LPVOID);
/*280*/ LRESULT typ ImmEscapeW(typ HKL,typ HIMC,typ UINT,typ LPVOID);
/*287*/ DWORD typ ImmGetConversionListA(typ HKL,typ HIMC,typ typ typ typ typ LPCSTR lpSrc,typ typ typ typ typ LPCANDIDATELIST lpDst,typ DWORD dwBufLen,typ UINT uFlag);
/*288*/ DWORD typ ImmGetConversionListW(typ HKL,typ HIMC,typ typ typ typ typ LPCWSTR lpSrc,typ typ typ typ typ LPCANDIDATELIST lpDst,typ DWORD dwBufLen,typ UINT uFlag);
/*295*/ BOOL typ ImmNotifyIME(typ HIMC,typ DWORD dwAction,typ DWORD dwIndex,typ DWORD dwValue);
/*297*/ BOOL typ ImmGetStatusWindowPos(typ HIMC,typ typ typ typ typ LPPOINT lpptPos);
/*298*/ BOOL typ ImmSetStatusWindowPos(typ HIMC,typ typ typ typ typ LPPOINT lpptPos);
/*299*/ BOOL typ ImmGetCompositionWindow(typ HIMC,typ typ typ typ typ LPCOMPOSITIONFORM lpCompForm);
/*300*/ BOOL typ ImmSetCompositionWindow(typ HIMC,typ typ typ typ typ LPCOMPOSITIONFORM lpCompForm);
/*301*/ BOOL typ ImmGetCandidateWindow(typ HIMC,typ DWORD,typ typ typ typ typ LPCANDIDATEFORM lpCandidate);
/*302*/ BOOL typ ImmSetCandidateWindow(typ HIMC,typ typ typ typ typ LPCANDIDATEFORM lpCandidate);
/*304*/ BOOL typ ImmIsUIMessageA(typ HWND,typ UINT,typ WPARAM,typ LPARAM);
/*305*/ BOOL typ ImmIsUIMessageW(typ HWND,typ UINT,typ WPARAM,typ LPARAM);
/*313*/ UINT typ ImmGetVirtualKey(typ HWND);
/*315*/ typedef int(typ*REGISTERWORDENUMPROCA)(typ typ typ typ typ LPCSTR lpszReading,DWORD,typ typ typ typ typ LPCSTR lpszString,LPVOID);
/*316*/ typedef int(typ*REGISTERWORDENUMPROCW)(typ typ typ typ typ LPCWSTR lpszReading,DWORD,typ typ typ typ typ LPCWSTR lpszString,LPVOID);
/*323*/ BOOL typ ImmRegisterWordA(typ HKL,typ typ typ typ typ LPCSTR lpszReading,typ DWORD,typ typ typ typ typ LPCSTR lpszRegister);
/*324*/ BOOL typ ImmRegisterWordW(typ HKL,typ typ typ typ typ LPCWSTR lpszReading,typ DWORD,typ typ typ typ typ LPCWSTR lpszRegister);
/*331*/ BOOL typ ImmUnregisterWordA(typ HKL,typ typ typ typ typ LPCSTR lpszReading,typ DWORD,typ typ typ typ typ LPCSTR lpszUnregister);
/*332*/ BOOL typ ImmUnregisterWordW(typ HKL,typ typ typ typ typ LPCWSTR lpszReading,typ DWORD,typ typ typ typ typ LPCWSTR lpszUnregister);
/*339*/ UINT typ ImmGetRegisterWordStyleA(typ HKL,typ UINT nItem,typ typ typ typ typ LPSTYLEBUFA lpStyleBuf);
/*340*/ UINT typ ImmGetRegisterWordStyleW(typ HKL,typ UINT nItem,typ typ typ typ typ LPSTYLEBUFW lpStyleBuf);
/*347*/ UINT typ ImmEnumRegisterWordA(typ HKL,typ REGISTERWORDENUMPROCA,typ typ typ typ typ typ typ LPCSTR lpszReading,typ DWORD,typ typ typ typ typ typ typ LPCSTR lpszRegister,typ LPVOID);
/*348*/ UINT typ ImmEnumRegisterWordW(typ HKL,typ REGISTERWORDENUMPROCW,typ typ typ typ typ typ typ LPCWSTR lpszReading,typ DWORD,typ typ typ typ typ typ typ LPCWSTR lpszRegister,typ LPVOID);
/*356*/ BOOL typ ImmDisableIME(typ DWORD);
/*357*/ BOOL typ ImmEnumInputContext(DWORD idThread,IMCENUMPROC lpfn,LPARAM lParam);
/*358*/ DWORD typ ImmGetImeMenuItemsA(typ HIMC,typ DWORD,typ DWORD,typ typ typ typ typ typ typ LPIMEMENUITEMINFOA lpImeParentMenu,typ typ typ typ typ typ typ LPIMEMENUITEMINFOA lpImeMenu,typ DWORD dwSize);
/*359*/ DWORD typ ImmGetImeMenuItemsW(typ HIMC,typ DWORD,typ DWORD,typ typ typ typ typ typ typ LPIMEMENUITEMINFOW lpImeParentMenu,typ typ typ typ typ typ typ LPIMEMENUITEMINFOW lpImeMenu,typ DWORD dwSize);
/*366*/ BOOL typ ImmDisableTextFrameService(DWORD idThread);
