; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG2468	DB	'test', 0aH, 00H
	ORG $+2
$SG2469	DB	'fibtst %d %d', 0aH, 00H
	ORG $+2
$SG2470	DB	'foobarbaz', 00H
	ORG $+6
$SG2471	DB	'hashtst %d', 0aH, 00H
$SG2473	DB	'LI-Z', 0aH, 00H
	ORG $+6
$SG2479	DB	'%d %fms', 0aH, 00H
	ORG $+7
$SG2480	DB	'foobarbaz', 00H
	ORG $+6
$SG2481	DB	'hashtst %d', 0aH, 00H
_DATA	ENDS
PUBLIC	fib
pdata	SEGMENT
$pdata$fib DD	imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$fib
pdata	ENDS
xdata	SEGMENT
$unwind$fib DD	010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
tv65 = 32
x$ = 64
fib	PROC
; File j:\bgb.proj.pdsys41\bscc\fibtst.c
; Line 16
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 17
	cmp	DWORD PTR x$[rsp], 2
	jle	SHORT $LN1@fib
	mov	eax, DWORD PTR x$[rsp]
	sub	eax, 1
	mov	ecx, eax
	call	fib
	mov	DWORD PTR tv65[rsp], eax
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, 2
	call	fib
	mov	ecx, DWORD PTR tv65[rsp]
	add	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN2@fib
$LN1@fib:
; Line 18
	mov	eax, 1
$LN2@fib:
; Line 19
	add	rsp, 56					; 00000038H
	ret	0
fib	ENDP
_TEXT	ENDS
PUBLIC	hash_str
pdata	SEGMENT
$pdata$hash_str DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$hash_str
pdata	ENDS
xdata	SEGMENT
$unwind$hash_str DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
i$ = 0
s$ = 32
hash_str PROC
; Line 58
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 61
	mov	DWORD PTR i$[rsp], 0
$LN2@hash_str:
; Line 62
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN1@hash_str
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, 251				; 000000fbH
	mov	rcx, QWORD PTR s$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	add	eax, ecx
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 1
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN2@hash_str
$LN1@hash_str:
; Line 63
	mov	eax, DWORD PTR i$[rsp]
	and	eax, 4095				; 00000fffH
; Line 64
	add	rsp, 24
	ret	0
hash_str ENDP
_TEXT	ENDS
PUBLIC	bscc_main
EXTRN	clock:PROC
EXTRN	printf:PROC
pdata	SEGMENT
$pdata$bscc_main DD imagerel $LN4
	DD	imagerel $LN4+135
	DD	imagerel $unwind$bscc_main
pdata	ENDS
xdata	SEGMENT
$unwind$bscc_main DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
i$ = 32
li$ = 40
dt$ = 48
t$ = 52
bscc_main PROC
; Line 67
$LN4:
	sub	rsp, 72					; 00000048H
; Line 71
	lea	rcx, OFFSET FLAT:$SG2468
	call	printf
; Line 73
	call	clock
	mov	DWORD PTR t$[rsp], eax
; Line 74
	mov	ecx, 36					; 00000024H
	call	fib
	mov	DWORD PTR i$[rsp], eax
; Line 75
	call	clock
	sub	eax, DWORD PTR t$[rsp]
	mov	DWORD PTR dt$[rsp], eax
; Line 77
	mov	r8d, DWORD PTR dt$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG2469
	call	printf
; Line 79
	lea	rcx, OFFSET FLAT:$SG2470
	call	hash_str
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG2471
	call	printf
; Line 81
	mov	QWORD PTR li$[rsp], 0
; Line 83
	cmp	QWORD PTR li$[rsp], 0
	jne	SHORT $LN1@bscc_main
	lea	rcx, OFFSET FLAT:$SG2473
	call	printf
$LN1@bscc_main:
; Line 87
	xor	eax, eax
; Line 88
	add	rsp, 72					; 00000048H
	ret	0
bscc_main ENDP
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	main
EXTRN	_fltused:DWORD
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$main
pdata	ENDS
xdata	SEGMENT
$unwind$main DD	010401H
	DD	06204H
xdata	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
i$ = 32
dt$ = 36
t$ = 40
main	PROC
; Line 91
$LN3:
	sub	rsp, 56					; 00000038H
; Line 94
	call	clock
	mov	DWORD PTR t$[rsp], eax
; Line 98
	mov	ecx, 36					; 00000024H
	call	fib
	mov	DWORD PTR i$[rsp], eax
; Line 101
	call	clock
	sub	eax, DWORD PTR t$[rsp]
	mov	DWORD PTR dt$[rsp], eax
; Line 102
	cvtsi2sd xmm0, DWORD PTR dt$[rsp]
	mulsd	xmm0, QWORD PTR __real@408f400000000000
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsdx	xmm2, xmm0
	movd	r8, xmm2
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG2479
	call	printf
; Line 104
	lea	rcx, OFFSET FLAT:$SG2480
	call	hash_str
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG2481
	call	printf
; Line 105
	xor	eax, eax
	add	rsp, 56					; 00000038H
	ret	0
main	ENDP
_TEXT	ENDS
END
