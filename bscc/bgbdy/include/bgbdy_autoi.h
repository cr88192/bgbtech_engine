//AHSRC:base/prng.c
void bgbrng_minemult();
void bgbrng_mineupdate();
void bgbrng_minedump();
void bgbrng_mineload();
int bgbrng_loop(void *p);
int bgbrng_init();
iv128_t bgbrng_mulM107(iv128_t a);
iv128_t bgbrng_mulP96(iv128_t a);
//AHSRC:base/int128.c
//AHSRC:base/float128.c
fv128_t fv128_atof(char *str);
char *fv128_ftoa(fv128_t val);
int fv128_getExponent(fv128_t val);
void fv128_setExponent(fv128_t *val, int i);
int fv128_getSign(fv128_t val);
void fv128_setSign(fv128_t *val, int i);
iv128_t fv128_getMantissa(fv128_t val);
void fv128_setMantissa(fv128_t *val, iv128_t fr);
fv128_t fv128_neg(fv128_t a);
fv128_t fv128_abs(fv128_t a);
fv128_t fv128_pow2x(fv128_t a, int x);
double fv128_toDouble(fv128_t a);
fv128_t fv128_fromDouble(double val);
int fv128_zerop(fv128_t a);
int fv128_eqp(fv128_t a, fv128_t b);
int fv128_eq1p(fv128_t a);
int fv128_cmp(fv128_t a, fv128_t b);
int fv128_gtp(fv128_t a, fv128_t b);
int fv128_ltp(fv128_t a, fv128_t b);
int fv128_gep(fv128_t a, fv128_t b);
int fv128_lep(fv128_t a, fv128_t b);
int fv128_ge1p(fv128_t a);
fv128_t fv128_add(fv128_t a, fv128_t b);
fv128_t fv128_sub(fv128_t a, fv128_t b);
int fv128_infp(fv128_t a);
int fv128_nanp(fv128_t a);
fv128_t fv128_mul(fv128_t a, fv128_t b);
fv128_t fv128_rcp(fv128_t a);
fv128_t fv128_rcp(fv128_t a);
fv128_t fv128_div(fv128_t a, fv128_t b);
fv128_t fv128_mod(fv128_t a, fv128_t b);
fv128_t fv128_pow(fv128_t a, fv128_t b);
fv128_t fv128_floor(fv128_t a);
fv128_t fv128_scale(fv128_t a, double b);
fv128_t fv128_sin(fv128_t q);
fv128_t fv128_cos(fv128_t q);
fv128_t fv128_tan(fv128_t q);
fv128_t fv128_cot(fv128_t q);
//AHSRC:base/vfile2.c
void vf_lock();
void vf_unlock();
void vfdir_init();
void vf_init();
dyt vf_fd_method(dyt obj, dyt sym, dyt *args, int nargs);
//AHSRC:base/vfile2_buffer.c
int vfbuf_vfread(void *buf, int s1, int s2, VFILE *fd);
int vfbuf_vfwrite(void *buf, int s1, int s2, VFILE *fd);
int vfbuf_vfgetc(VFILE *fd);
int vfbuf_vfputc(int c, VFILE *fd);
int vfbuf_vfflush(VFILE *fd);
vfoffs_t vfbuf_vfseek(VFILE *fd, vfoffs_t rel, int pos);
vfoffs_t vfbuf_vftell(VFILE *fd);
int vfbuf_vfeof(VFILE *fd);
int vfbuf_vfclose(VFILE *fd);
VFILE *vfbuf_vfopen_w(VFILE_Mount *mnt, char *name, char *mode);
VFILE *vfbuf_vfopen(VFILE_Mount *mnt, char *name, char *mode);
//AHSRC:base/vfile2_dir.c
int vfdir_vfread(void *buf, int s1, int s2, VFILE *fd);
int vfdir_vfwrite(void *buf, int s1, int s2, VFILE *fd);
int vfdir_vfgetc(VFILE *fd);
int vfdir_vfputc(int c, VFILE *fd);
int vfdir_vfflush(VFILE *fd);
vfoffs_t vfdir_vfseek(VFILE *fd, vfoffs_t rel, int pos);
vfoffs_t vfdir_vftell(VFILE *fd);
int vfdir_vfeof(VFILE *fd);
int vfdir_vfclose(VFILE *fd);
VFILE *vfdir_vfopen(VFILE_Mount *mnt, char *name, char *mode);
VFILE *vfdir_vfopen_ro(VFILE_Mount *mnt, char *name, char *mode);
VFILE *vfdir_open_os(char *name, char *mode);
VFILE_Mount *vfdir_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
int vfdir_mkdir(VFILE_Mount *mnt, char *name, int flags);
void *vfdir_opendir(VFILE_Mount *mnt, char *name);
void vfdir_closedir(VFILE_Mount *mnt, void *dir);
char *vfdir_readdir(VFILE_Mount *mnt, void *dir);
int vfdir_statflags(VFILE_Mount *mnt, char *name);
void *vfdir_opendir_os(char *name);
void vfdir_closedir_os(void *dir);
char *vfdir_readdir_os(void *dir);
int vfdir_statflags_os(char *name);
int vfdir_mkdir_os(char *name, int mode);
void *vfdir_opendir(VFILE_Mount *mnt, char *name);
void vfdir_closedir(VFILE_Mount *mnt, void *dir);
char *vfdir_readdir(VFILE_Mount *mnt, void *dir);
int vfdir_statflags(VFILE_Mount *mnt, char *name);
void *vfdir_opendir_os(char *name);
void vfdir_closedir_os(void *dir);
char *vfdir_readdir_os(void *dir);
int vfdir_statflags_os(char *name);
int vfdir_mkdir_os(char *name, int mode);
void vfdir_init();
//AHSRC:base/vfile2_zip.c
int VFZIP_ReadUInt16(FILE *fd);
int VFZIP_ReadUInt32(FILE *fd);
void VFZIP_WriteUInt16(FILE *fd, int v);
void VFZIP_WriteUInt32(FILE *fd, int v);
u32 VFZIP_CRC32(void *buf, int sz, u32 lcrc);
int VFZIP_IsText(byte *buf, int sz);
VFZIP_Context *VFZIP_OpenZip(char *fname, int rrw);
int VFZIP_WriteZip(VFZIP_Context *ctx, char *name);
VFZIP_Entry *VFZIP_LocateFile(VFZIP_Context *ctx, char *name);
VFZIP_Entry *VFZIP_CreateFile(VFZIP_Context *ctx, char *name);
void VFZIP_ReadInFile(VFZIP_Context *ctx, VFZIP_Entry *tmp);
int VFZIP_UncacheFile(VFZIP_Context *ctx);
void VFZIP_CacheFile(VFZIP_Context *ctx, char *name);
void VFZIP_ReCacheFile(VFZIP_Context *ctx, VFZIP_Entry *ent);
int vfzip_vfread(void *buf, int s1, int s2, VFILE *fd);
int vfzip_vfwrite(void *buf, int s1, int s2, VFILE *fd);
int vfzip_vfgetc(VFILE *fd);
int vfzip_vfputc(int c, VFILE *fd);
int vfzip_vfflush(VFILE *fd);
vfoffs_t vfzip_vfseek(VFILE *fd, vfoffs_t rel, int pos);
vfoffs_t vfzip_vftell(VFILE *fd);
int vfzip_vfeof(VFILE *fd);
int vfzip_vfclose(VFILE *fd);
VFILE *vfzip_vfopen_w(VFILE_Mount *mnt, char *name, char *mode);
VFILE *vfzip_vfopen(VFILE_Mount *mnt, char *name, char *mode);
VFILE_Mount *vfzip_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
void vfzip_init();
//AHSRC:base/vfile2_zpak.c
int vfzpak_vfread(void *buf, int s1, int s2, VFILE *fd);
int vfzpak_vfwrite(void *buf, int s1, int s2, VFILE *fd);
int vfzpak_vfgetc(VFILE *fd);
int vfzpak_vfputc(int c, VFILE *fd);
int vfzpak_vfflush(VFILE *fd);
vfoffs_t vfzpak_vfseek(VFILE *fd, vfoffs_t pos, int rel);
vfoffs_t vfzpak_vftell(VFILE *fd);
int vfzpak_vfeof(VFILE *fd);
int vfzpak_vfclose(VFILE *fd);
VFILE *vfzpak_vfopen(VFILE_Mount *mnt, char *name, char *mode);
VFILE_Mount *vfzpak_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
VFILE_Mount *vfzpak_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
VFILE_Mount *vfzpak_vfmount2(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
int vfzpak_vfumount(VFILE_Mount *mnt);
void *vfzpak_opendir(VFILE_Mount *mnt, char *name);
void vfzpak_closedir(VFILE_Mount *mnt, void *dir);
char *vfzpak_readdir(VFILE_Mount *mnt, void *dir);
int vfzpak_statflags(VFILE_Mount *mnt, char *name);
void vfzpak_init();
//AHSRC:base/inflate.c
int PDUNZ_ReadBit();
int PDUNZ_Read2Bits();
int PDUNZ_Read3Bits();
int PDUNZ_Read4Bits();
int PDUNZ_Read5Bits();
int PDUNZ_ReadNBits(int n);
void PDUNZ_SkipNBits(int n);
int PDUNZ_PeekWord();
void PDUNZ_AlignByte();
int PDUNZ_ReadAlignedByte();
int PDUNZ_ReadAlignedWord();
int PDUNZ_TransposeByte(int v);
int PDUNZ_TransposeWord(int v);
int PDUNZ_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int PDUNZ_SetupStatic();
int PDUNZ_DecodeSymbol();
int PDUNZ_DecodeDistance();
int PDUNZ_DecodeCodeLengths(byte *cl, int ncl);
int PDUNZ_DecodeHeader();
int PDUNZ_DecodeRun(int sym);
int PDUNZ_DecodeBlockData();
int PDUNZ_DecodeBlock();
int PDUNZ_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:base/deflate.c
void PDZ2_WriteBit(int i);
void PDZ2_Write2Bits(int i);
void PDZ2_Write3Bits(int i);
void PDZ2_Write4Bits(int i);
void PDZ2_Write5Bits(int i);
void PDZ2_WriteNBits(int i, int n);
void PDZ2_FlushBits();
int PDZ2_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDZ2_CalcLengths_r(short *nodes, byte *cl, int root, int h);
void PDZ2_BuildLengths(int *stat, int nc, byte *cl, int ml);
void PDZ2_BuildLengths2(int *stat, int nc, byte *cl, int ml);
void PDZ2_UpdateWindowByte(byte *s);
void PDZ2_UpdateWindowString(byte *s, int l);
int PDZ2_LookupString(byte *cs, byte *ce, int *rl, int *rd);
int PDZ2_LZCompressBuffer(byte *ibuf, byte *obuf, byte *mbuf, int sz);
void PDZ2_StatLZRun(byte *cs, int *lstat, int *dstat);
void PDZ2_StatLZBuffer(byte *tbuf, byte *mbuf, int n,int *lstat, int *dstat);
void PDZ2_StatLengths(byte *cl, int nc, int *stat);
void PDZ2_EncodeSymbol(int v);
void PDZ2_EncodeLengths(byte *cl, int nc);
void PDZ2_EncodeLZRun(byte *cs);
void PDZ2_EncodeLZBuffer(byte *tbuf, byte *mbuf, int n);
int PDZ2_EncodeBlockStatic(byte *ibuf, int isz, int last);
int PDZ2_EncodeBlock(byte *ibuf, int isz, int last);
int PDZ2_EncodeStream_I(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream64(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStreamLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
//AHSRC:base/vfile2_exwad.c
int vfexwad_vfread(void *buf, int s1, int s2, VFILE *fd);
int vfexwad_vfwrite(void *buf, int s1, int s2, VFILE *fd);
int vfexwad_vfgetc(VFILE *fd);
int vfexwad_vfputc(int c, VFILE *fd);
int vfexwad_vfflush(VFILE *fd);
vfoffs_t vfexwad_vfseek(VFILE *fd, vfoffs_t rel, int pos);
vfoffs_t vfexwad_vftell(VFILE *fd);
int vfexwad_vfeof(VFILE *fd);
int vfexwad_vfclose(VFILE *fd);
VFILE *vfexwad_vfopen(VFILE_Mount *mnt, char *name, char *mode);
VFILE_Mount *vfexwad_vfmount(VFILE_Mount_Interface *iface,char *src, char *dst, char **ops);
void vfexwad_init();
//AHSRC:base/inflate2.c
void pdunz2_lock(void);
void pdunz2_unlock(void);
PDUNZ2_Context *PDUNZ2_AllocContext(void);
void PDUNZ2_FreeContext(PDUNZ2_Context *ctx);
int PDUNZ2_ReadBit(PDUNZ2_Context *ctx);
int PDUNZ2_Read2Bits(PDUNZ2_Context *ctx);
int PDUNZ2_Read3Bits(PDUNZ2_Context *ctx);
int PDUNZ2_Read4Bits(PDUNZ2_Context *ctx);
int PDUNZ2_Read5Bits(PDUNZ2_Context *ctx);
int PDUNZ2_ReadNBits(PDUNZ2_Context *ctx, int n);
void PDUNZ2_SkipNBits(PDUNZ2_Context *ctx, int n);
int PDUNZ2_PeekWord(PDUNZ2_Context *ctx);
void PDUNZ2_AlignByte(PDUNZ2_Context *ctx);
int PDUNZ2_ReadAlignedByte(PDUNZ2_Context *ctx);
int PDUNZ2_ReadAlignedWord(PDUNZ2_Context *ctx);
int PDUNZ2_TransposeByte(int v);
int PDUNZ2_TransposeWord(int v);
int PDUNZ2_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int PDUNZ2_SetupStatic(PDUNZ2_Context *ctx);
int PDUNZ2_DecodeSymbol(PDUNZ2_Context *ctx);
int PDUNZ2_DecodeDistance(PDUNZ2_Context *ctx);
int PDUNZ2_DecodeCodeLengths(PDUNZ2_Context *ctx, byte *cl, int ncl);
int PDUNZ2_DecodeHeader(PDUNZ2_Context *ctx);
int PDUNZ2_DecodeRun(PDUNZ2_Context *ctx, int sym);
int PDUNZ2_DecodeBlockData(PDUNZ2_Context *ctx);
int PDUNZ2_DecodeBlock(PDUNZ2_Context *ctx);
int PDUNZ2_DecodeStreamCtx(PDUNZ2_Context *ctx, byte *ibuf, byte *obuf, int isz, int osz);
int PDUNZ2_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:base/netval.c
int BGBDY_IsPRange(byte *p, byte *addr, int rng);
int BGBDY_IsFixnumFP(byte *p);
int BGBDY_IsFlonumFP(byte *p);
int BGBDY_IsFixRealFP(byte *p);
char *BGBDY_GetVType(byte *p);
char *BGBDY_HashSymbol(void **tab, char *ty, char *str);
char *BGBDY_HashSymbolQuick(void **tab, char *ty, char *str);
int bgbdy_wstrlen(u16 *str);
int bgbdy_wstrcmp(u16 *s0, u16 *s1);
void bgbdy_wstrcpy(u16 *sdst, u16 *ssrc);
u16 *BGBDY_HashSymbol16Quick(void **tab, char *ty, u16 *str);
void *BGBDY_WrapInt(int i);
void *BGBDY_WrapInt64(s64 i);
void *BGBDY_TryWrapInt64(s64 i);
void *BGBDY_WrapChar(int i);
void *BGBDY_HashString(char *s);
void *BGBDY_WrapSymbol(char *s);
void *BGBDY_WrapKeyword(char *s);
void *BGBDY_HashString16(u16 *s);
void *BGBDY_WrapFixedSymbol(char *s);
int BGBDY_EncUStrChar(int i);
int BGBDY_DecUStrChar(int i);
int BGBDY_EncodeUChars(char *s);
char *BGBDY_DecodeUChars(int v);
void *BGBDY_WrapUString(char *s);
void *BGBDY_WrapUSymbol(char *s);
char *BGBDY_UnwrapUString(void *p);
char *BGBDY_UnwrapUSymbol(void *p);
double bgbdy_pow2(int i);
void *BGBDY_WrapMiniFloat28(double f);
double BGBDY_UnwrapMiniFloat28(void *p);
void *BGBDY_WrapMiniFloat28(double v);
double BGBDY_UnwrapMiniFloat28(void *p);
void *BGBDY_WrapMiniFloat24(double f);
double BGBDY_UnwrapMiniFloat24(void *p);
void *BGBDY_WrapFlonum(double f);
void *BGBDY_WrapFloat(double f);
void *BGBDY_WrapDouble(double f);
void *BGBDY_WrapArray(void *a);
void *BGBDY_WrapDArray(void *a);
void *BGBDY_WrapNDArray(void *a, int n);
int BGBDY_GetDArraySize(void *arr);
void *BGBDY_GetDArrayIndex(void *arr, int idx);
int BGBDY_SetDArrayIndex(void *arr, int idx, void *val);
int BGBDY_UnwrapInt(void *a);
s64 BGBDY_UnwrapInt64(void *a);
int BGBDY_UnwrapBool(void *a);
double BGBDY_UnwrapFloat(void *a);
void **BGBDY_UnwrapArray(void *a);
void **BGBDY_UnwrapDArray(void *a);
int BGBDY_IsNumber(void *p);
int BGBDY_InitTypes();
//AHSRC:base/dyll_func.c
char *dyll_func_toString(dyt obj);
void BGBGC_InitDyLL_Func();
int dyllRepackBufRawFuncV(BGBGC_RawFunc *inf,char *sig, byte *buf, va_list lst);
void *bgbdyll_rawfunc_ApplyV_self(void *obj,dyt mth, char *sig, va_list args);
void *bgbdyll_rawfunc_ApplyU(void *obj,dyt mth, char *sig, void **args, int szargs);
void *bgbdyll_rawfunc_ApplyV(void *obj,dyt mth, char *sig, va_list args);
BGBDYC_ApplyU_t dyllGetRawFuncApplyU(BGBGC_RawFunc *inf);
BGBDYC_ApplyV_t dyllGetRawFuncApplyV(BGBGC_RawFunc *inf);
//AHSRC:base/dyll_func2.c
int DYLL_StepCalcSigID(char **str);
int DYLL_CalcSigID(char *sig);
//AHSRC:base/dyll_func2_auto.c
//AHSRC:base/dyll_sig.c
char *dyll_SigReadQName(char **sig);
//AHSRC:base/dyll_sig_arg.c
//AHSRC:base/dyll_sig_flags.c
int DYLL_GetArch();
int DYLL_FlagSig_ModifierChar(s64 i);
char *DYLL_FlagSig_FlattenModifiers2(char *t, int fl);
char *DYLL_VarTypeFlagsString(s64 fl);
//AHSRC:base/dyll_sig_trans.c
void DYLL_CopyValueBufI(dycValue *v, void *p);
void DYLL_CopyValueBufL(dycValue *v, void *p);
void DYLL_CopyValueBufF(dycValue *v, void *p);
void DYLL_CopyValueBufD(dycValue *v, void *p);
void DYLL_CopyValueBufP(dycValue *v, void *p);
void DYLL_CopyBufValueI(void *p, dycValue *v);
void DYLL_CopyBufValueL(void *p, dycValue *v);
void DYLL_CopyBufValueF(void *p, dycValue *v);
void DYLL_CopyBufValueD(void *p, dycValue *v);
void DYLL_CopyBufValueP(void *p, dycValue *v);
void DYLL_CopyValueBufV2F(dycValue *v, void *p);
void DYLL_CopyValueBufV3F(dycValue *v, void *p);
void DYLL_CopyValueBufV4F(dycValue *v, void *p);
void DYLL_CopyValueBufV2D(dycValue *v, void *p);
void DYLL_CopyValueBufV3D(dycValue *v, void *p);
void DYLL_CopyValueBufV4D(dycValue *v, void *p);
void DYLL_CopyBufValueV2F(void *p, dycValue *v);
void DYLL_CopyBufValueV3F(void *p, dycValue *v);
void DYLL_CopyBufValueV4F(void *p, dycValue *v);
void DYLL_CopyBufValueV2D(void *p, dycValue *v);
void DYLL_CopyBufValueV3D(void *p, dycValue *v);
void DYLL_CopyBufValueV4D(void *p, dycValue *v);
void DYLL_CopyValuesBuf0(DYLL_ArgList *ctx, dycValue *args, byte *buf);
void DYLL_CopyValuesBuf1(DYLL_ArgList *ctx, dycValue *args, byte *buf);
void DYLL_CopyValuesBuf2(DYLL_ArgList *ctx, dycValue *args, byte *buf);
void DYLL_CopyValuesBuf3(DYLL_ArgList *ctx, dycValue *args, byte *buf);
void DYLL_CopyValuesBuf4(DYLL_ArgList *ctx, dycValue *args, byte *buf);
void DYLL_CopyValuesBufN(DYLL_ArgList *ctx, dycValue *args, byte *buf);
void DYLL_CopyBufValues0(DYLL_ArgList *ctx, byte *buf, dycValue *args);
void DYLL_CopyBufValues1(DYLL_ArgList *ctx, byte *buf, dycValue *args);
void DYLL_CopyBufValues2(DYLL_ArgList *ctx, byte *buf, dycValue *args);
void DYLL_CopyBufValues3(DYLL_ArgList *ctx, byte *buf, dycValue *args);
void DYLL_CopyBufValues4(DYLL_ArgList *ctx, byte *buf, dycValue *args);
void DYLL_CopyBufValuesN(DYLL_ArgList *ctx, byte *buf, dycValue *args);
int DYLL_CompileSigArgList_Item(DYLL_ArgList *ctx,DYLL_ValueTransfer *item, char **rsig, int *rsz);
int DYLL_CompileSigArgListI(DYLL_ArgList *ctx, char *sig);
//AHSRC:base/dyll_addr.c
void dyll_lock(void);
void dyll_unlock(void);
int DYLL_LoadLibraryI(char *name);
int DYLL_LoadLibraryI2(char *name);
int DYLL_LoadLibrary(char *name);
//AHSRC:base/dyll_sigcache.c
void BGBGC_InitSig();
void BGBGC_SaveSig();
int BGBGC_HashSigName(char *str);
char *BGBGC_LookupSig(char *name);
int BGBGC_BindSig(char *name, char *value);
//AHSRC:base/dyll_metapath.c
BGBDYC_MetaNode *DYLL_MetaPath_LookupNodeR2(BGBDYC_MetaBiNode *node, char *name);
BGBDYC_MetaNode *DYLL_MetaPath_LookupNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_LookupNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
int DYLL_MetaPath_AdjustBiDepth(BGBDYC_MetaBiNode *node);
int DYLL_MetaPath_BalanceBiNode(BGBDYC_MetaBiNode *node);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR2(BGBDYC_MetaBiNode *node, char *name);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_LookupNode(char *path);
BGBDYC_MetaNode *DYLL_MetaPath_GetNode(char *path);
BGBDYC_MetaLeaf *DYLL_MetaPath_LookupNodeLeaf(BGBDYC_MetaNode *node, char *key);
BGBDYC_MetaLeaf *DYLL_MetaPath_GetNodeLeaf(BGBDYC_MetaNode *node, char *key);
char *DYLL_MetaPath_GetNodePathR(BGBDYC_MetaNode *node, char *t);
char *DYLL_MetaPath_GetNodePath(BGBDYC_MetaNode *node);
void DYLL_MetaPath_SplitKey(char *path, char *nb, char *kb);
char *DYLL_MetaPath_LookupKey(char *path);
char *DYLL_MetaPath_LookupKey2(char *path);
void DYLL_MetaPath_BindKey(char *path, char *val);
void DYLL_MetaPath_BindKeyAlt(char *path, char *key, char *val);
int DYLL_MetaPath_LoadDB(char *name);
int DYLL_MetaPath_LoadDB2(char *name, char *base);
int DYLL_MetaPath_LoadBufferDB(char *name, char *base,char *buf, int szbuf);
void DYLL_MetaPath_LoadAll();
void DYLL_MetaPath_SaveNode(VFILE *fd,BGBDYC_MetaNode *node, char *path, int ind);
void DYLL_MetaPath_SaveAll();
int DYLL_MetaPath_SaveDB(char *name);
int DYLL_MetaPath_AddSearchPath(char *name);
int DYLL_MetaPath_ParseSearchPath(char *path);
int DYLL_MetaPath_ParseEnvString(char *str);
//AHSRC:base/dyll_catch.c
//AHSRC:base/dyll_thunk.c
s64 DYLL_ThunkGen_GetRegsMask(char *nosv, char **args);
void DYLL_ThunkGen_SaveRegs(char *nosv, char **args);
void DYLL_ThunkGen_RestoreRegs(char *nosv, char **args);
void *dyll_meta_classslot(char *sym, char *name, char **args);
void *dyll_meta_classmethod(char *sym, char *name, char **args);
void *dyll_meta_fieldref(char *sym, char *name, char **args);
void *dyll_meta_staticfieldref(char *sym, char *name, char **args);
void *dyll_meta_methodref(char *sym, char *name, char **args);
void *dyll_meta_staticmethodref(char *sym, char *name, char **args);
void *dyll_meta_loadint(char *sym, char *name, char **args);
void *dyll_meta_loadflonum(char *sym, char *name, char **args);
void *dyll_meta_loadsymbol(char *sym, char *name, char **args);
void *dyll_meta_unaryop(char *sym, char *name, char **args);
void *dyll_meta_binaryop(char *sym, char *name, char **args);
void *dyll_meta_trinaryop(char *sym, char *name, char **args);
void *dyll_meta_dygetslot(char *sym, char *name, char **args);
void *dyll_meta_dysetslot(char *sym, char *name, char **args);
void *dyll_meta_dymethodcall(char *sym, char *name, char **args);
void *dyll_meta_dyapplymethod(char *sym, char *name, char **args);
void *dyll_meta_dyapply(char *sym, char *name, char **args);
void *dyll_meta_dycall(char *sym, char *name, char **args);
void BGBGC_InitDyLL_Thunk();
//AHSRC:base/dyll_typebox.c
char *dyll_typebox_sig_toString(dyt obj);
char *dyll_typebox_boxval_toString(dyt obj);
char *dyll_typebox_boxptr_toString(dyt obj);
dyt dyll_ctop_GetSlot(dyt obj, char *key);
dyt dyll_ctop_SetSlot(dyt obj, char *key, dyt val);
dyt dyll_ctop_CallMethod(dyt obj, dyt sym, dyt *args, int nargs);
dyt dyll_typebox_boxval_GetSlot(dyt obj, char *key);
dyt dyll_typebox_boxval_SetSlot(dyt obj, char *key, dyt val);
dyt dyll_typebox_boxptr_GetSlot(dyt obj, char *key);
dyt dyll_typebox_boxptr_SetSlot(dyt obj, char *key, dyt val);
dyt dyll_typebox_boxval_copyvalue(dyt obj);
dyt dyll_typebox_boxptr_copyvalue(dyt obj);
int dyll_typebox_boxval_dropvalue(dyt p);
int dyll_typebox_boxptr_dropvalue(dyt p);
dyt dyll_typebox_int_copyvalue(dyt p);
dyt dyll_typebox_long_copyvalue(dyt p);
dyt dyll_typebox_float_copyvalue(dyt p);
dyt dyll_typebox_double_copyvalue(dyt p);
dyt dyll_typebox_int128_copyvalue(dyt p);
dyt dyll_typebox_float128_copyvalue(dyt p);
int dyll_typebox_int_dropvalue(dyt p);
int dyll_typebox_long_dropvalue(dyt p);
int dyll_typebox_float_dropvalue(dyt p);
int dyll_typebox_double_dropvalue(dyt p);
int dyll_typebox_int128_dropvalue(dyt p);
int dyll_typebox_float128_dropvalue(dyt p);
dyt dyll_typebox_vec2_copyvalue(dyt p);
dyt dyll_typebox_vec3_copyvalue(dyt p);
dyt dyll_typebox_vec4_copyvalue(dyt p);
dyt dyll_typebox_quat_copyvalue(dyt p);
int dyll_typebox_vec2_dropvalue(dyt p);
int dyll_typebox_vec3_dropvalue(dyt p);
int dyll_typebox_vec4_dropvalue(dyt p);
int dyll_typebox_quat_dropvalue(dyt p);
dyt dyll_typebox_vec2d_copyvalue(dyt p);
dyt dyll_typebox_vec3d_copyvalue(dyt p);
dyt dyll_typebox_vec4d_copyvalue(dyt p);
dyt dyll_typebox_quatd_copyvalue(dyt p);
int dyll_typebox_vec2d_dropvalue(dyt p);
int dyll_typebox_vec3d_dropvalue(dyt p);
int dyll_typebox_vec4d_dropvalue(dyt p);
int dyll_typebox_quatd_dropvalue(dyt p);
void BGBGC_InitDyLL_Typebox();
dyt dyllTypeboxPtrGetIndex(dyt obj, int idx);
dyt dyllTypeboxPtrSetIndex(dyt obj, int idx, dyt val);
dyt dyllTypeboxPtrAddIndex(dyt obj, int idx);
dyt DYLL_CTopGetHash(char *name);
void DYLL_CTopSetHash(char *name, dyt val);
//AHSRC:base/dyll_mrbc2.c
int DYLL_MRBC2_ParseHexData(char **rcs, byte **rct, int *rsz);
int DYLL_MRBC2_ParseBase64Data(char **rcs, byte **rct, int *rsz);
int DYLL_MRBC2_ParseBase85Data(char **rcs, byte **rct, int *rsz);
DYLL_MRBC2_Context *DYLL_MRBC2_AllocContext();
int DYLL_MRBC2_FreeContext(DYLL_MRBC2_Context *tmp);
void DYLL_MRBC2_Push(DYLL_MRBC2_Context *ctx, dytf val);
dytf DYLL_MRBC2_Pop(DYLL_MRBC2_Context *ctx);
void DYLL_MRBC2_PushInt(DYLL_MRBC2_Context *ctx, s64 val);
s64 DYLL_MRBC2_PopInt(DYLL_MRBC2_Context *ctx);
void DYLL_MRBC2_PushFloat(DYLL_MRBC2_Context *ctx, double val);
double DYLL_MRBC2_PopFloat(DYLL_MRBC2_Context *ctx);
void DYLL_MRBC2_PushMark(DYLL_MRBC2_Context *ctx);
void DYLL_MRBC2_PopMark(DYLL_MRBC2_Context *ctx);
void DYLL_MRBC2_CallBlock(DYLL_MRBC2_Context *ctx, char *ip);
int DYLL_MRBC2_RetBlock(DYLL_MRBC2_Context *ctx);
char *DYLL_MRBC2_ReadString(DYLL_MRBC2_Context *ctx);
char *DYLL_MRBC2_BlockString(DYLL_MRBC2_Context *ctx, char *str);
char *DYLL_MRBC2_ReadBlock(DYLL_MRBC2_Context *ctx);
dytf DYLL_MRBC2_ReadData(DYLL_MRBC2_Context *ctx);
int DYLL_MRBC2_ReadInt(DYLL_MRBC2_Context *ctx);
int DYLL_MRBC2_StepInt(DYLL_MRBC2_Context *ctx);
double DYLL_MRBC2_ReadFloat(DYLL_MRBC2_Context *ctx);
dytf DYLL_MRBC2_ReadNumber(DYLL_MRBC2_Context *ctx);
int DYLL_MRBC2_StepFloat(DYLL_MRBC2_Context *ctx);
int DYLL_MRBC2_Step(DYLL_MRBC2_Context *ctx);
//AHSRC:base/dyll_iface.c
//AHSRC:base/dyll_struct.c
//AHSRC:base/dyll_exwad.c
u16 exwad_getu16(byte *b);
u32 exwad_getu32(byte *b);
void exwad_setu16(byte *b, u16 a);
void exwad_setu32(byte *b, u32 a);
void ExWAD_MarkRangeResv(ExWAD_Context *ctx, int base, int sz);
void ExWAD_MarkRangeUsed(ExWAD_Context *ctx, int base, int sz);
void ExWAD_MarkRangeFree(ExWAD_Context *ctx, int base, int sz);
void ExWAD_CheckExpandImage(ExWAD_Context *img, int sz);
int ExWAD_FindFreeRange(ExWAD_Context *ctx, int sz);
int ExWAD_AllocRange(ExWAD_Context *ctx, int sz);
int ExWAD_FindLastCell(ExWAD_Context *ctx);
void ExWAD_FixupEXE(ExWAD_Context *ctx);
void ExWAD_FixupImage(ExWAD_Context *ctx);
int ExWAD_GetDirEntIndexName(ExWAD_Context *ctx,int idx, char *nbuf);
int ExWAD_LookupDirEnt(ExWAD_Context *ctx, char *name);
void ExWAD_CheckExpandDir(ExWAD_Context *ctx, int num);
int ExWAD_GetStringRVA(ExWAD_Context *ctx, char *str);
int ExWAD_GetDirEnt(ExWAD_Context *ctx, char *name);
void ExWAD_ReCacheFile(ExWAD_Context *ctx, ExWAD_CachedFile *ent);
//AHSRC:base/ty_complex.c
fcomplex dtyFComplex(float r, float i);
float dtyFCreal(fcomplex a);
float dtyFCimag(fcomplex a);
fcomplex dtyFCadd(fcomplex a, fcomplex b);
fcomplex dtyFCsub(fcomplex a, fcomplex b);
fcomplex dtyFCmul(fcomplex a, fcomplex b);
fcomplex dtyFCscale(fcomplex a, float x);
fcomplex dtyFCrscale(float x, fcomplex a);
fcomplex dtyFConj(fcomplex z);
fcomplex dtyFCdiv(fcomplex a, fcomplex b);
float dtyFCabs(fcomplex a);
fcomplex dtyFCsqrt(fcomplex z);
dcomplex dtyDComplex(double r, double i);
double dtyDCreal(dcomplex a);
double dtyDCimag(dcomplex a);
dcomplex dtyDCadd(dcomplex a, dcomplex b);
dcomplex dtyDCsub(dcomplex a, dcomplex b);
dcomplex dtyDCmul(dcomplex a, dcomplex b);
dcomplex dtyDCscale(dcomplex a, double x);
dcomplex dtyDCrscale(double x, dcomplex a);
dcomplex dtyDConj(dcomplex z);
dcomplex dtyDCdiv(dcomplex a, dcomplex b);
double dtyDCabs(dcomplex a);
dcomplex dtyDCsqrt(dcomplex z);
//AHSRC:base/ty_quat.c
//AHSRC:base/ty_matrix.c
void dtyMat_Inverse(float *a, float *b, int n);
//AHSRC:base/dy_wref.c
void WRef_Init();
u64 WRef_GenSeg();
dyWRefCtx *WRef_LookupSegLin(u64 seg);
dyWRefCtx *WRef_LookupSegHash(u64 seg);
dyWRefCtx *WRef_LookupSeg(u64 seg);
void WRef_SplitRef(iv128_t wp, dyWRefCtx **cur, u64 *seg, u64 *offs);
iv128_t WRef_MergeRef(dyWRefCtx *cur, u64 offs);
void *WRef_CastPtr(iv128_t wp);
iv128_t WRef_LocalPtr(void *p);
int WRef_LocalPtrP(iv128_t wp);
int WRef_ReadMem(void *buf, int sz, iv128_t wp, int disp);
int WRef_WriteMem(void *buf, int sz, iv128_t wp, int disp);
int WRef_CopyMem(iv128_t dst, iv128_t src, u64 sz);
iv128_t WRef_AllocMem(u64 seg, u64 sz);
int WRef_FreeMem(iv128_t wp);
iv128_t WRef_ReallocMem(iv128_t wp, u64 sz);
char *WRef_GetType(iv128_t wp);
//AHSRC:base/dy_strarith.c
int DYS_DumpBuf(char *tb, int sz);
int DYS_InvertBuf(char *tb, int sz);
int DYS_NegBuf(char *tb, int sz);
int DYS_Shl10Buf(char *tb, int sz, int sh);
int DYS_Shr10Buf(char *tb, int sz, int sh);
int DYS_Shl2Buf1(char *tb, int sz);
int DYS_Shr2Buf1(char *tb, int sz);
void DYS_Shl2Buf(char *tb, int sz, int sh);
void DYS_Shr2Buf(char *tb, int sz, int sh);
int DYS_AddBufInt(char *tb, int sz, int v);
int DYS_AddBuf(char *sa, int sza, char *sb, int szb);
int DYS_SubBuf(char *sa, int sza, char *sb, int szb);
int DYS_AddBufScaleInt(char *sa, int sza, char *sb, int szb, int sc);
int DYS_CmpBuf(char *sa, int sza, char *sb, int szb);
int DYS_CopyStrBuf(char *tb, int sz, char *sa);
int DYS_CopyBufStr(char *tb, char *sa, int sz, int pt);
//AHSRC:base/dy_chan.c
//AHSRC:base/dy_dytf2.c
//AHSRC:base/dy_method.c
dyt dyFunc(dyt (*fcn)(dyt *args, int nargs));
dyt dyMethod(dyt (*fcn)(dyt self, dyt *args, int nargs));
dyt dyFuncData(dyt data, dyt (*fcn)(dyt data, dyt *args, int nargs));
dyt dyMethodData(dyt data, dyt (*fcn)(dyt self, dyt data, dyt *args, int nargs));
dyt dyStubMethod(dyt data, dyt method,void *(*fcn)(BGBGC_StubMethod *inf, dyt self, char *sig, void **args, int szargs));
dyt dyFunc_NN(void *fcn, int n);
dyt dyMethod_NN(void *fcn, int n);
dyt dyFunc_NND(void *fcn, int n, void *data);
dyt dyMethod_NND(void *fcn, int n, void *data);
dyt dyFunc0(dyt (*fcn)());
dyt dyFunc1(dyt (*fcn)(dyt));
dyt dyFunc2(dyt (*fcn)(dyt, dyt));
dyt dyFunc3(dyt (*fcn)(dyt, dyt, dyt));
dyt dyFunc4(dyt (*fcn)(dyt, dyt, dyt, dyt));
dyt dyFunc5(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt));
dyt dyFunc6(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt, dyt));
dyt dyFunc7(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt, dyt, dyt));
dyt dyFunc8(dyt (*fcn)(dyt, dyt, dyt, dyt, dyt, dyt, dyt, dyt));
dyt dyMethod0(dyt (*fcn)(dyt self));
dyt dyMethod1(dyt (*fcn)(dyt self, dyt));
dyt dyMethod2(dyt (*fcn)(dyt self, dyt, dyt));
dyt dyMethod3(dyt (*fcn)(dyt self, dyt, dyt, dyt));
dyt dyMethod4(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt));
dyt dyMethod5(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt));
dyt dyMethod6(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt, dyt));
dyt dyMethod7(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt, dyt, dyt));
dyt dyMethod8(dyt (*fcn)(dyt self, dyt, dyt, dyt, dyt, dyt, dyt, dyt, dyt));
dyt dyMethodN(dyt (*fcn)(dyt self, dyt));
dyt dyMethod1N(dyt (*fcn)(dyt self, dyt,dyt));
dyt dyMethod2N(dyt (*fcn)(dyt self, dyt,dyt,dyt));
dyt dyMethod3N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt));
dyt dyMethod4N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt));
dyt dyMethod5N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt));
dyt dyMethod6N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt,dyt));
dyt dyMethod7N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt));
dyt dyMethod8N(dyt (*fcn)(dyt self, dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt,dyt));
void *bgbdyc_rawfunc_ApplyU(void *obj,dyt mth, char *sig, void **args, int szargs);
void *bgbdyc_stubmethod_ApplyU(void *obj,dyt mth, char *sig, void **args, int szargs);
void *bgbdyc_rawfunc_ApplyV(void *obj,dyt mth, char *sig, va_list args);
void *bgbdyc_stubmethod_ApplyV(void *obj,dyt mth, char *sig, va_list args);
BGBDYC_ApplyU_t dycGetMethodApplyU(dyt mth);
BGBDYC_ApplyV_t dycGetMethodApplyV(dyt mth);
void *DYLL_ConvObjCFunc_Ip(void *data, ...);
s64 DYLL_ConvObjCFunc_Il(void *data, ...);
double DYLL_ConvObjCFunc_Id(void *data, ...);
//AHSRC:base/dy_oo.c
void dyoo_init();
BGBDY_ObjVTab *BGBDY_GetTypeVTab(char *str);
BGBDY_ObjVTab *BGBDY_GetObjVTab(void *obj);
BGBDY_ObjVTab *BGBDY_GetObjVTabFast(void *obj);
int BGBDY_SetGetSlot(char *type, void *(*fn)(void *p, char *sym));
int BGBDY_SetSetSlot(char *type, void *(*fn)(void *p, char *sym, void *val));
int BGBDY_SetNextSlot(char *type, char *(*fn)(void *p, char *sym));
int BGBDY_SetGetDel(char *type, void *(*fn)(void *p, char *sym));
int BGBDY_SetSetDel(char *type, void *(*fn)(void *p, char *sym, void *val));
int BGBDY_SetNextDel(char *type, char *(*fn)(void *p, char *sym));
int BGBDY_SetTrySetSlot(char *type, void *(*fn)(void *p, char *sym, void *val));
int BGBDY_SetCallMethod(char *type, void *(*fn)(void *p, char *sym, void **args, int n));
int BGBDY_SetApply(char *type, void *(*fn)(void *p, void **args, int n));
int BGBDY_SetApplyObj(char *type,void *(*fn)(void *p, void *o, void **args, int n));
int BGBDY_SetToString(char *type, char *(*fn)(void *p));
int BGBDY_SetVtabMethod(char *type, char *name, void *func);
void *BGBDY_GetTypeVtabMethod(char *type, char *name);
void *BGBDY_GetVtabMethod(void *obj, char *name);
void *BGBDY_GetSlot(void *p, char *s);
void *BGBDY_SetSlot(void *p, char *s, void *v);
char *BGBDY_NextSlot(void *p, char *s);
void *BGBDY_GetDel(void *p, char *s);
void *BGBDY_SetDel(void *p, char *s, void *v);
char *BGBDY_NextDel(void *p, char *s);
void *BGBDY_TrySetSlot(void *p, char *s, void *v);
void *BGBDY_CallMethod(void *p, char *s, void **a, int n);
void *BGBDY_Apply(void *p, void **a, int n);
int BGBDY_CanApplyP(void *p);
void *BGBDY_ApplyObj(void *p, void *o, void **a, int n);
int BGBDY_CanApplyObjP(void *p);
char *BGBDY_ToString(void *p);
int BGBDY_SetCopyValue(char *type, dyt (*fn)(dyt p));
int BGBDY_SetDropValue(char *type, int (*fn)(dyt p));
dyt dyGetInner(dyt obj, char *str);
dytf dyGet_I(dyt obj, char *str);
void dyBindRehash_I(dyt obj);
dytf dyBind_I(dyt obj, char *var, dytf val);
dytf dyBindInfo_I(dyt obj, dycSlot var, dytf val);
dytf dyTrySet_I(dyt obj, char *var, dytf val);
dyt dyTryGetRef_I(dyt obj, char *var);
dycSlot dyTryGetInfo_I(dyt obj, char *var);
dyt dyGetInner2(dyt obj, char *str);
dytf dyGet_I2(dyt obj, char *sym);
dytf dySetR_I2(dyt obj, char *sym, dytf val);
dytf dySetRB(dyt obj, char *sym, dytf val);
dyt dySetR(dyt obj, char *sym, dyt val);
dyt dyCall_I(dyt obj, char *sym, dyt *args, int nargs);
//AHSRC:base/dy_dyo.c
void dyo_init();
void *DYO_GetCtx(void);
void DYO_RecursivePush(dyt obj);
dyt DYO_RecursivePop(void);
bool DYO_RecursiveCheck(dyt obj);
dyt dyoThis();
void dyoSetThis(dyt obj);
void dyoPushThis(dyt obj);
void dyoPopThis();
void dyoPushThis2(dyt obj, int *stk);
void dyoPopThis2(int j);
dyt dyoGet(char *name);
void dyoSet(char *name, dyt val);
dyt dyoG(char *name);
void dyoS(char *name, dyt val);
char *dyoGs(char *name);
int dyoGi(char *name);
s64 dyoGl(char *name);
double dyoGf(char *name);
double dyoGd(char *name);
vec2 dyoGv2(char *name);
vec3 dyoGv3(char *name);
vec4 dyoGv4(char *name);
void dyoSs(char *name, char *str);
void dyoSi(char *name, int val);
void dyoSl(char *name, s64 val);
void dyoSf(char *name, double val);
void dyoSd(char *name, double val);
void dyoSv2(char *name, vec2 val);
void dyoSv3(char *name, vec3 val);
void dyoSv4(char *name, vec4 val);
dyt dyoC(char *name);
dyt dyoC1(char *name, dyt a);
dyt dyoC2(char *name, dyt a, dyt b);
dyt dyoC3(char *name, dyt a, dyt b, dyt c);
dyt dyoC4(char *name, dyt a, dyt b, dyt c, dyt d);
dyt dyoC5(char *name, dyt a, dyt b, dyt c, dyt d, dyt e);
dyt dyoC6(char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
dyt dyoC7(char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
dyt dyoC8(char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
dyt dyoM(dyt obj, char *name);
dyt dyoM1(dyt obj, char *name, dyt a);
dyt dyoM2(dyt obj, char *name, dyt a, dyt b);
dyt dyoM3(dyt obj, char *name, dyt a, dyt b, dyt c);
dyt dyoM4(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d);
dyt dyoM5(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e);
dyt dyoM6(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
dyt dyoM7(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g);
dyt dyoM8(dyt obj, char *name, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h);
//AHSRC:base/dy_access.c
//AHSRC:base/dyc_class.c
dyt bgbdyc_classobj_copyvalue(dyt p);
int bgbdyc_classobj_dropvalue(dyt p);
void BGBDYC_Init();
void BGBDYC_RegisterClassResolver(BGBGC_ClassInfo *(*fn)(char *name));
void BGBDYC_RegisterClassAlias(char *name, char *altname);
char *BGBDYC_LookupClassAlias(char *name);
BGBGC_ClassInfo *BGBDYC_LookupClassSName(BGBGC_ClassInfo *last, char *name);
BGBGC_ClassInfo *BGBDYC_LookupClassQName(BGBGC_ClassInfo *last, char *name, int fl);
BGBGC_ClassInfo *BGBDYC_FindClassQNameFl(char *name, int fl);
BGBGC_ClassInfo *BGBDYC_FindClassQName(char *name);
int BGBDYC_IndexClassSuper(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
int BGBDYC_InheritMulti(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
int BGBDYC_EnumClassSlots(BGBGC_ClassInfo *inf,BGBGC_ClassSlot **arr, int num);
int BGBDYC_EnumClassMinf(BGBGC_ClassInfo *inf,BGBGC_ClassMinf **arr, int num);
BGBGC_ClassSlot *BGBDYC_InheritMultiSlot(BGBGC_ClassInfo *inf,BGBGC_ClassSlot *idx);
BGBGC_ClassMinf *BGBDYC_InheritMultiMinf(BGBGC_ClassInfo *inf,BGBGC_ClassMinf *idx);
int BGBDYC_InheritMulti(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
int BGBDYC_InheritSingle(BGBGC_ClassInfo *inf, BGBGC_ClassInfo *super);
int BGBDYC_InheritNone(BGBGC_ClassInfo *inf);
BGBGC_ClassInfo *BGBDYC_CreateClassI(char *qname, char *super, int type);
BGBGC_ClassInfo *BGBDYC_CreateClass(char *qname, char *super);
BGBGC_ClassInfo *BGBDYC_CreateInterface(char *qname, char *super);
BGBGC_ClassInfo *BGBDYC_CreateClassAnon(BGBGC_ClassInfo *super);
BGBGC_ClassInfo *BGBDYC_CreateClassAnon2(char *super);
BGBGC_ClassInfo *BGBDYC_CreateStruct(char *qname);
int BGBDYC_AddClassInterface(BGBGC_ClassInfo *info, BGBGC_ClassInfo *iface);
int BGBDYC_AlignClassLength(BGBGC_ClassInfo *info, int align);
int BGBDYC_CheckAddSlot(BGBGC_ClassInfo *inf);
int BGBDYC_CheckAddMinf(BGBGC_ClassInfo *inf);
BGBGC_ClassSlot *BGBDYC_AddSlotAbstract(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassSlot *BGBDYC_AddSlot(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassSlot *BGBDYC_AddSlotInit(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassSlot *BGBDYC_AddSlotStatic(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassSlot *BGBDYC_AddSlotDelegate(BGBGC_ClassInfo *inf, char *name, char *cname);
BGBGC_ClassSlot *BGBDYC_AddSlotStaticDelegate(BGBGC_ClassInfo *inf, char *name, char *cname);
BGBGC_ClassSlot *BGBDYC_AddSlotIface(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_AddMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_AddSlotMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_AddStaticSlotMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
int BGBDYC_CheckInitData(BGBGC_ClassInfo *inf);
int BGBDYC_TouchMinfMethod(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *minf);
BGBGC_ClassBase *BGBDYC_CreateInstance(BGBGC_ClassInfo *inf);
BGBGC_ObjProto *BGBDYC_CreateInstanceProto(BGBGC_ClassInfo *inf);
BGBGC_ClassBase *BGBDYC_CloneInstance(BGBGC_ClassBase *obj);
void BGBDYC_FreeInstance(BGBGC_ClassBase *obj);
void BGBDYC_SetInstance(BGBGC_ClassBase *dst, BGBGC_ClassBase *src);
int BGBDYC_SubclassP(BGBGC_ClassInfo *info, BGBGC_ClassInfo *super);
int BGBDYC_SubclassOrImplP(BGBGC_ClassInfo *info, BGBGC_ClassInfo *super);
int BGBDYC_InstanceP(BGBGC_ClassInfo *info, BGBGC_ClassInfo *super);
void *BGBDYC_GetObjectSlotIdxPtr_MI(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
BGBGC_ClassVinf *BGBDYC_GetClassSlotVInfo(BGBGC_ClassInfo *info, BGBGC_ClassSlot *idx);
BGBGC_ClassVinf *BGBDYC_GetObjectSlotVInfo(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
int BGBDYC_GetClassSlotVIdx(BGBGC_ClassInfo *info, BGBGC_ClassSlot *idx);
int BGBDYC_GetObjectSlotVIdx(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
int *BGBDYC_GetClassSlotVOffsTab(BGBGC_ClassInfo *info, BGBGC_ClassSlot *idx);
int *BGBDYC_GetObjectSlotVOffsTab(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
void *BGBDYC_GetObjectSlotIdxPtr_MI(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
void *BGBDYC_GetInitIdxPtr_MI(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
void *BGBDYC_GetObjectSlotIdxPtr(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
void *BGBDYC_GetInitIdxPtr(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
void *BGBDYC_GetObjectSlotIdxPtrTH(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
void *BGBDYC_GetInitIdxPtrTH(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
//AHSRC:base/dyc_lookup.c
BGBGC_ClassSlot *BGBDYC_LookupSlotBasic(BGBGC_ClassInfo *inf, char *name);
BGBGC_ClassSlot *BGBDYC_LookupSlotRA(BGBGC_ClassInfo *inf, char *name, int nhi);
BGBGC_ClassSlot *BGBDYC_LookupSlotRB(BGBGC_ClassInfo *inf, char *name, int nhi);
BGBGC_ClassSlot *BGBDYC_LookupSlot(BGBGC_ClassInfo *inf, char *name);
BGBGC_ClassSlot *BGBDYC_LookupSlotR(BGBGC_ClassInfo *inf, char *name, int nhi);
BGBGC_ClassSlot *BGBDYC_LookupSlot(BGBGC_ClassInfo *inf, char *name);
BGBGC_ClassSlot *BGBDYC_LookupSlotIface(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
BGBGC_ClassMinf *BGBDYC_LookupMethodSigRA(BGBGC_ClassInfo *inf, char *name, char *sig, int nhi);
BGBGC_ClassMinf *BGBDYC_LookupMethodSigRB(BGBGC_ClassInfo *inf, char *name, char *sig, int nhi);
char *BGBDYC_RemapNameSpecial(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_LookupMethodSigRS(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_LookupMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_GetMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_GetIfaceMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_LookupMethodIface(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *idx);
BGBGC_ClassSlot *BGBDYC_LookupObjectSlot(BGBGC_ClassBase *obj, char *name);
void *BGBDYC_LookupObjectSlotPtr(BGBGC_ClassBase *obj, char *name);
char *BGBDYC_LookupObjectSlotSig(BGBGC_ClassBase *obj, char *name);
BGBGC_ClassMinf *BGBDYC_LookupObjectMethodSig(BGBGC_ClassBase *obj, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_LookupClassMethodSig(char *cname, char *sname, char *sig);
BGBGC_ClassSlot *BGBDYC_LookupObjectSlotIface(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
BGBGC_ClassMinf *BGBDYC_LookupObjectMethodIface(BGBGC_ClassBase *obj, BGBGC_ClassMinf *idx);
int *BGBDYC_GetClassMinfOffsTab(BGBGC_ClassInfo *info, BGBGC_ClassMinf *idx);
int *BGBDYC_GetObjectMinfOffsTab(BGBGC_ClassBase *obj, BGBGC_ClassMinf *idx);
dyt BGBDYC_GetStaticMinfFunc(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *minf);
void BGBDYC_SetStaticMinfFunc(BGBGC_ClassInfo *inf,BGBGC_ClassMinf *minf, dyt fcn);
dyt BGBDYC_GetMinfFunc(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf);
void BGBDYC_SetMinfFunc(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf, dyt fcn);
dyt BGBDYC_GetMinfFunc2(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf,BGBGC_ClassBase **robj);
dyt BGBDYC_GetMinfFunc3U(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf,BGBDYC_ApplyU_t *apply);
dyt BGBDYC_GetMinfFunc3V(BGBGC_ClassBase *obj, BGBGC_ClassMinf *minf,BGBDYC_ApplyV_t *apply);
int BGBDYC_GetClassSlotArrayBuf(BGBGC_ClassInfo *inf, BGBGC_ClassSlot **arr);
int BGBDYC_GetClassMinfArrayBuf(BGBGC_ClassInfo *inf, BGBGC_ClassMinf **arr);
BGBGC_ClassSlot **BGBDYC_GetClassSlotArray(BGBGC_ClassInfo *inf);
BGBGC_ClassMinf **BGBDYC_GetClassMinfArray(BGBGC_ClassInfo *inf);
BGBGC_ClassSlot **BGBDYC_GetClassDelegateSlotArray(BGBGC_ClassInfo *inf);
//AHSRC:base/dyc_hash.c
void BGBDYC_InitHash();
int BGBDYC_CalcHashName(char *name);
int BGBDYC_CalcHashNameSig(char *name, char *sig);
void BGBDYC_SortHashItems_Swap(void **h_data, void **h_class, int *h_cnt, int i, int j);
void BGBDYC_SortHashItems(void **h_data, void **h_class, int *h_cnt, int base, int lim);
void BGBDYC_ResizeSlotHash();
void BGBDYC_ResizeMinfHash();
BGBGC_ClassSlot *BGBDYC_CheckHashSlot(BGBGC_ClassInfo *inf, char *name, int hi);
void BGBDYC_AddHashSlot(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *sinf, int hi);
BGBGC_ClassMinf *BGBDYC_CheckHashMethodSig(BGBGC_ClassInfo *inf, char *name, char *sig, int hi);
void BGBDYC_AddHashMethod(BGBGC_ClassInfo *inf, BGBGC_ClassMinf *minf, int hi);
BGBGC_ClassSlot *BGBDYC_CheckHashSlot2(BGBGC_ClassInfo *inf, char *name, int hi);
BGBGC_ClassMinf *BGBDYC_CheckHashMethodSig2(BGBGC_ClassInfo *inf, char *name, char *sig, int hi);
//AHSRC:base/dyc_proto.c
void BGBDYC_InitProto();
int BGBDYC_CheckAddProtoSlot();
int BGBDYC_CheckAddProtoMinf();
BGBGC_ClassSlot *BGBDYC_LookupProtoSlotFl(char *name, char *sig,s64 fl, dyAccessMode acc);
BGBGC_ClassSlot *BGBDYC_LookupProtoSlot(char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_LookupProtoMinfFl(char *name, char *sig,s64 fl, dyAccessMode acc);
BGBGC_ClassMinf *BGBDYC_LookupProtoMinf(char *name, char *sig);
BGBGC_ClassSlot *BGBDYC_GetProtoSlotFl(char *name, char *sig,s64 fl, dyAccessMode acc);
BGBGC_ClassSlot *BGBDYC_GetProtoSlot(char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_GetProtoMinfFl(char *name, char *sig,s64 fl, dyAccessMode acc);
BGBGC_ClassMinf *BGBDYC_GetProtoMinf(char *name, char *sig);
BGBGC_ObjProto *BGBDYC_AllocProtoObj();
BGBGC_ObjProto *BGBDYC_CloneProtoObj(BGBGC_ObjProto *obj);
void BGBDYC_FreeProtoObj(BGBGC_ObjProto *obj);
void *BGBDYC_LookupProtoSlotIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassSlot *idx);
dyt *BGBDYC_LookupProtoMinfIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassMinf *idx);
void *BGBDYC_GetProtoSlotIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassSlot *idx);
dyt *BGBDYC_GetProtoMinfIdxPtr(BGBGC_ObjProto *obj, BGBGC_ClassMinf *idx);
BGBGC_ClassSlot *BGBDYC_LookupObjProtoSlot(BGBGC_ObjProto *obj, char *name);
BGBGC_ClassSlot *BGBDYC_LookupObjProtoSlotIface(BGBGC_ObjProto *obj, BGBGC_ClassSlot *idx);
BGBGC_ClassMinf *BGBDYC_LookupObjProtoMethodSig(BGBGC_ObjProto *obj, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_LookupObjProtoMethodIface(BGBGC_ObjProto *obj, BGBGC_ClassMinf *idx);
BGBGC_ClassSlot *BGBDYC_AddObjProtoSlot(BGBGC_ObjProto *obj, char *name, char *sig);
BGBGC_ClassMinf *BGBDYC_AddObjProtoMethodSig(BGBGC_ObjProto *obj, char *name, char *sig);
int BGBDYC_EnumClassDelegateSlots(BGBGC_ClassInfo *inf,BGBGC_ClassSlot **arr, int num, int lim);
void *BGBDYC_GetObjectSlotIdxPtr_DI(BGBGC_ClassBase *obj, BGBGC_ClassSlot *idx);
dyt BGBDYC_GetMinfFunc_DI(BGBGC_ClassBase *obj,BGBGC_ClassMinf *idx, BGBGC_ClassBase **robj);
BGBGC_ClassBase *BGBDYC_GetObjectDelegate(BGBGC_ClassBase *obj,char *name);
void BGBDYC_SetObjectDelegate(BGBGC_ClassBase *obj,char *name, BGBGC_ClassBase *obj1);
//AHSRC:base/dyc_struct.c
int *BGBDYC_GetStructSlotVOffsTab(BGBGC_ClassVinf *vinf, BGBGC_ClassSlot *idx);
int *BGBDYC_GetStructMinfOffsTab(BGBGC_ClassVinf *vinf, BGBGC_ClassMinf *idx);
void *BGBDYC_GetStructSlotIdxPtr(BGBGC_ClassVinf *vinf, void *obj, BGBGC_ClassSlot *idx);
void *BGBDYC_GetStructSlotIdxPtrTH(BGBGC_ClassVinf *vinf, void *obj, BGBGC_ClassSlot *idx);
dyt BGBDYC_GetStructMinfFunc(BGBGC_ClassVinf *vinf, BGBGC_ClassMinf *minf);
void BGBDYC_SetStructMinfFunc(BGBGC_ClassVinf *vinf,BGBGC_ClassMinf *minf, dyt fcn);
void BGBDYC_InitStruct(BGBGC_ClassVinf *vinf, void *obj);
void *BGBDYC_GetDynSlotIdxPtrTH(dyt obj, BGBGC_ClassSlot *idx);
int BGBDYC_GetStructSlotOffset(BGBGC_ClassVinf *vinf, BGBGC_ClassSlot *idx);
int BGBDYC_GetSlotOffset(BGBGC_ClassInfo *inf, BGBGC_ClassSlot *idx);
//AHSRC:base/dyc_ns.c
BGBGC_Namespace *BGBDYC_LookupNamespaceInner(BGBGC_Namespace *ns, char *name);
BGBGC_Namespace *BGBDYC_GetNamespaceInner(BGBGC_Namespace *ns, char *name);
BGBGC_Namespace *BGBDYC_LookupNamespace(BGBGC_Namespace *ns, char *name);
BGBGC_Namespace *BGBDYC_GetNamespace(BGBGC_Namespace *ns, char *name);
BGBGC_Namespace *BGBDYC_LookupNamespaceGlobal(char *name);
BGBGC_Namespace *BGBDYC_GetNamespaceGlobal(char *name);
void BGBDYC_LinkClassNamespace(BGBGC_ClassInfo *inf);
BGBGC_NamespaceSlot *BGBDYC_LookupNamespaceSlot(BGBGC_Namespace *ns, char *name);
BGBGC_NamespaceSlot *BGBDYC_GetNamespaceSlot(BGBGC_Namespace *ns, char *name, char *sig);
BGBGC_NamespaceSlot *BGBDYC_LookupNamespaceFunc(BGBGC_Namespace *ns, char *name, char *sig);
BGBGC_NamespaceSlot *BGBDYC_GetNamespaceFunc(BGBGC_Namespace *ns, char *name, char *sig);
//AHSRC:base/dyc_array.c
void BGBDYC_Array_Lock(void);
void BGBDYC_Array_Unlock(void);
dycArray dycAllocArrayHeader(void);
void dycFreeArrayHeader(dycArray arr);
//AHSRC:base/dyc_api.c
//AHSRC:base/dyc_dyii.c
//AHSRC:base/dyc_jni_fcn.c
//AHSRC:base/dyc_jni_iface.c
//AHSRC:base/dyc_jvmti_fcn.c
//AHSRC:base/dyc_jvmti_iface.c
//AHSRC:base/dy_opr.c
void dyopr_init();
BGBDY_Operator *dyopr_lookupopr(int opr, char *lty, char *rty);
BGBDY_Operator *dyopr_getopr(int opr, char *lty, char *rty);
void dyRegisterBinary(int opr, char *lty, char *rty,dyt (*fcn)(dyt a, dyt b));
void dyRegisterUnary(int opr, char *ty, dyt (*fcn)(dyt a));
void dyRegisterBinaryName(char *opr, char *lty, char *rty,dyt (*fcn)(dyt a, dyt b));
void dyRegisterUnaryName(char *opr, char *ty, dyt (*fcn)(dyt a));
dyt dyopr_stradd(dyt a, dyt b);
dyt dyopr_doBinary(int opr, char *lty, char *rty, dyt a, dyt b);
dyt dyopr_doUnary(int opr, char *ty, dyt a);
//AHSRC:base/dy_cons.c
dyt dylist10(dyt a, dyt b, dyt c, dyt d, dyt e, dyt f, dyt g, dyt h, dyt i, dyt j);
//AHSRC:base/dy_sparse.c
dyt dyNewSparse();
int dySparseP(dyt obj);
dyt BGBGC_SparseGetIdx(dyt arr, int idx);
dyt *BGBGC_SparseGetPtrIdx(dyt *pp, int idx);
int BGBGC_SparseSetIdx(dyt arr, int idx, dyt val);
//AHSRC:base/dy_smxl.c
dyt dyqsym(char *ns, char *name);
dyt dyqsymns(dyt p);
dyt dyqsymn(dyt p);
int dyqsymp(dyt p);
dyt dytlAttr(dyt var, dyt val);
dyt dytlAttrS(char *var, dyt val);
dyt dytlAttrNS(char *ns, char *var, dyt val);
dyt dytlAttrVar(dyt p);
dyt dytlAttrVal(dyt p);
void dytlAttrSetVal(dyt p, dyt val);
int dytlAttrP(dyt p);
dyt dytlTag(dyt tag, dyt attr, dyt rest);
dyt dytlTagGetAttr(dyt tl, dyt var);
void dytlTagSetAttr(dyt tl, dyt var, dyt val);
void dytlTagAddFirst(dyt tl, dyt val);
void dytlTagAddLast(dyt tl, dyt val);
dyt dytlTagGetAttrS(dyt tl, char *var);
dyt dytlTagGetAttrNS(dyt tl, char *ns, char *var);
void dytlTagSetAttrS(dyt tl, char *var, dyt val);
void dytlTagSetAttrNS(dyt tl, char *ns, char *var, dyt val);
dyt dytlTagS(char *tag, dyt attr, dyt rest);
dyt dytlTagNS(char *ns, char *tag, dyt attr, dyt rest);
dyt dytlTag0S(char *tag, dyt attr);
dyt dytlTag1S(char *tag, dyt attr, dyt a);
dyt dytlTag2S(char *tag, dyt attr, dyt a, dyt b);
dyt dytlTag3S(char *tag, dyt attr, dyt a, dyt b, dyt c);
dyt dytlTag4S(char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d);
dyt dytlTag5S(char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d, dyt e);
dyt dytlTag6S(char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
dyt dytlTag0NS(char *ns, char *tag, dyt attr);
dyt dytlTag1NS(char *ns, char *tag, dyt attr, dyt a);
dyt dytlTag2NS(char *ns, char *tag, dyt attr, dyt a, dyt b);
dyt dytlTag3NS(char *ns, char *tag, dyt attr, dyt a, dyt b, dyt c);
dyt dytlTag4NS(char *ns, char *tag, dyt attr, dyt a, dyt b, dyt c, dyt d);
dyt dytlTagA0S(char *tag);
dyt dytlTagA1S(char *tag, dyt a);
dyt dytlTagA2S(char *tag, dyt a, dyt b);
dyt dytlTagA3S(char *tag, dyt a, dyt b, dyt c);
dyt dytlTagA4S(char *tag, dyt a, dyt b, dyt c, dyt d);
dyt dytlTagA5S(char *tag, dyt a, dyt b, dyt c, dyt d, dyt e);
dyt dytlTagA6S(char *tag, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
dyt dytlTagA0NS(char *ns, char *tag);
dyt dytlTagA1NS(char *ns, char *tag, dyt a);
dyt dytlTagA2NS(char *ns, char *tag, dyt a, dyt b);
dyt dytlTagA3NS(char *ns, char *tag, dyt a, dyt b, dyt c);
dyt dytlTagA4NS(char *ns, char *tag, dyt a, dyt b, dyt c, dyt d);
dyt dytlTagA5NS(char *ns, char *tag, dyt a, dyt b, dyt c, dyt d, dyt e);
dyt dytlTagA6NS(char *ns, char *tag, dyt a, dyt b, dyt c, dyt d, dyt e, dyt f);
//AHSRC:base/dy_array.c
char *bgbdy_vec2_toString(dyt obj);
char *bgbdy_vec3_toString(dyt obj);
char *bgbdy_vec4_toString(dyt obj);
char *bgbdy_quat_toString(dyt obj);
char *bgbdy_complex_toString(dyt obj);
dyt bgbdy_vec_GetSlot(dyt obj, char *key);
dyt bgbdy_vec_SetSlot(dyt obj, char *key, dyt val);
dyt dyll_array_copyvalue(dyt p);
int dyll_array_dropvalue(dyt p);
int BGBDY_InitArrayTypes();
dyt bgbdy_vec2_add(dyt a, dyt b);
dyt bgbdy_vec3_add(dyt a, dyt b);
dyt bgbdy_vec4_add(dyt a, dyt b);
dyt bgbdy_quat_add(dyt a, dyt b);
//AHSRC:base/dy_string.c
dyt bgbdy_string_length(dyt obj);
dyt bgbdy_string_split(dyt obj);
dyt bgbdy_string_toLower(dyt obj);
dyt bgbdy_string_toUpper(dyt obj);
dyt bgbdy_string_hash(dyt obj);
int BGBDY_InitStringTypes();
//AHSRC:base/dytf_cons.c
//AHSRC:base/dytf_oo.c
//AHSRC:base/dytf_opr.c
//AHSRC:base/dytf_packvec.c
//AHSRC:base/dy_xml.c
//AHSRC:base/dy_print.c
int BGBGC_PeekChar(char **str);
int BGBGC_ParseChar(char **str);
int BGBGC_EmitChar(char **str, int j);
int BGBGC_ParseChar16(u16 **str);
void BGBGC_EmitChar16(u16 **str, int i);
int BGBGC_ParseNibble(char **str);
int BGBGC_ParseHex(char **str);
int BGBGC_ParseHex8(char **str);
int BGBGC_ParseHex16(char **str);
int BGBGC_ParseHex32(char **str);
int BGBGC_EmitNibble(char **str, int i);
int BGBGC_EmitHex8(char **str, int i);
int BGBGC_EmitHex16(char **str, int i);
int BGBGC_EmitHex32(char **str, int i);
char *BGBGC_FlattenString(char *str);
int BGBGC_PrintSpecialP(char *s);
int BGBGC_PrintSymbolEscapeP(char *str);
//AHSRC:base/dy_vli.c
//AHSRC:base/dys_binenc.c
int BinEnc_LookupValue(dysObjectStream ctx, dyt value);
int BinEnc_IndexValue(dysObjectStream ctx, dyt value);
void BinEnc_EncodeBinaryObject(dysObjectStream ctx, dyt val);
void BinEnc_EncodeBinaryGeneric(dysObjectStream ctx, dyt val);
void BinEnc_FlattenLump(dysObjectStream ctx, int idx);
void BinEnc_FlattenImage(dysObjectStream ctx);
void BinEnc_CheckEmitBytes(dysObjectStream ctx, int cnt);
//AHSRC:base/dys_bindec.c
void BinDec_ReserveIndexLump(dysObjectStream ctx, int idx);
int BinDec_CommitIndexLump(dysObjectStream ctx, int idx);
char *BinDec_GetIndexStrSym(dysObjectStream ctx, int idx);
dyt BinDec_GetIndexValue(dysObjectStream ctx, int idx);
char *BinDec_ReadLumpASCII(dysObjectStream ctx);
dyt BinDec_DecodeBinaryGeneric(dysObjectStream ctx, char *tyn);
dyt BinDec_DecodeLump(dysObjectStream ctx, int idx);
//AHSRC:base/dys_parse.c
//AHSRC:base/dys_print.c
void BGBDY_PrintFlattenItem(dysPrintStream strm, dyt obj);
void BGBDY_PrintDycObject(dysPrintStream strm, dycObject obj);
void BGBDY_PrintItemI(dysPrintStream strm, dyt obj);
//AHSRC:base/dyx_parse.c
//AHSRC:base/dyx_print.c
char *DYX_PrintText(char *s, char *t);
//AHSRC:base/dyx_sbxe.c
void *sbxe_malloc(int sz);
void *sbxe_tmalloc(char *ty, int sz);
void sbxe_free(void *ptr);
char *sbxe_strdup(char *str);
//AHSRC:base/dyx_print_ze.c
char *DYX_PrintZeText(char *s, char *t);
//AHSRC:base/dysh_console.c
DYSH_Console *DYSH_NewConsole(int width, int szcon, int szhist);
void DYSH_FreeBuf(void *buf);
char *DYSH_StrCopy(char *str);
void DYSH_PrintAddLineClr(DYSH_Console *tmp,char *str, byte *clr, byte *eff);
void DYSH_PrintAddLine(DYSH_Console *tmp, char *str);
//AHSRC:base/dysh_shell.c
dyshShell DYSH_AllocShell(int szhist);
void DYSH_ConsolePuts(DYSH_Console *con, char *str);
void DYSH_Puts(dyshShell shell, char *str);
void DYSH_AddHistory(dyshShell shell, char *str);
char *DYSH_GetHistory(dyshShell shell, int idx);
int DYSH_ExecuteCmd(dyshShell shell, char *str);
char *DYSH_Complete(dyshShell shell, char *str);
char *DYSH_FindLabel(dyshShell shell, char *str, char *lbl);
int DYSH_ExecuteScript(dyshShell shell, char *str);
//AHSRC:base/bgbdy_api.c
int dy_init2_i(int (*fcn)());
//AHSRC:bgal/bgal_main.c
void bgal_free_default(bgalContext *ctx, bgalMember *obj);
bgalMember *bgal_pick_default(bgalContext *ctx, bgalMember *skip);
int bgal_noisebytemask(float m);
byte *bgal_breedprogbytes(bgalMember *tmp, byte *pa, byte *pb);
bgalMember *bgal_breed_default(bgalContext *ctx,bgalMember *obja, bgalMember *objb);
void bgal_step_test_default(bgalContext *ctx, void *data);
void bgal_step_select_min_default(bgalContext *ctx);
void bgal_step_select_max_default(bgalContext *ctx);
void bgal_step_breed_default(bgalContext *ctx);
void bgal_step_default(bgalContext *ctx);
void bgal_setup_default(bgalContext *ctx, void *data);
void bgal_evolve_default(bgalContext *ctx, void *data);
//AHSRC:bgal/bgal_interp.c
void BGAL_InterpInit();
float BGAL_InterpPop(BGAL_ICtx *ctx);
int BGAL_InterpPopI(BGAL_ICtx *ctx);
int BGAL_InterpPush(BGAL_ICtx *ctx, float f);
int BGAL_StepCall(BGAL_ICtx *ctx, int idx);
int BGAL_StepTCall(BGAL_ICtx *ctx, int idx);
int BGAL_StepCallSub(BGAL_ICtx *ctx, int idx);
int BGAL_StepJmp(BGAL_ICtx *ctx, int idx);
int BGAL_Step(BGAL_ICtx *ctx);
//AHSRC:bgal/bgal_neuron.c
void bgal_nn_spawn_generic(bgalNeuron *self);
void bgal_nn_fire_generic(bgalNeuron *self);
void bgal_nn_pulse_generic(bgalNeuron *self, bgalNeuron *other,bgalNeuronLink *link, float value);
void BGAL_InitNeuron();
