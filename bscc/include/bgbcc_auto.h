//AHSRC:cparse/cparse_token.c
int BGBCP_GetLinenum();
char *BGBCP_GetFilename();
int BGBCP_CalcLinenum(char *se);
int BGBCP_SetLinenum(char *fname, char *base, int num);
int BGBCP_PushLinenum();
int BGBCP_PopLinenum();
int BGBCP_SkimLinenum(char *s, char **rfn, int *rln);
char *BGBCP_GetLastFileName();
int BGBCP_GetLastLineNumber();
char *BGBCP_EatWhiteOnly(char *s);
char *BGBCP_EatWhiteOnly2(char *s);
char *BGBCP_EatWhite(char *s);
int BGBCP_IsWhiteOnly(char *s);
int BGBCP_IsLineBreak(char *se);
int BGBCP_OpChar(int c);
int BGBCP_PeekChar(char **str);
int BGBCP_ParseChar(char **str);
int BGBCP_EmitChar(char **str, int j);
int BGBCP_NameInitChar(int c);
int BGBCP_NameChar(int c);
char *BGBCP_TokenI(char *s, char *b, int *ty, int lang, int sz);
char *BGBCP_Token(char *s, char *b, int *ty);
void BGBCP_FlushToken(char *s);
char *BGBCP_Token(char *s, char *b, int *ty);
void BGBCP_FlushToken(char *s);
char *BGBCP_TokenGen(char *s, char *b, int *ty);
char *BGBCP_TokenLang(char *s, char *b, int *ty, int lang);
char *BGBCP_TokenCtx(BGBCP_ParseState *ctx, char *s, char *b, int *ty);
char *BGBCP_ReadToken(BGBCP_ParseState *ctx, char **str, int *ty);
//AHSRC:cparse/cparse_misc.c
BCCX_Node *BGBCP_FunArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_GenArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
int BGBCP_LangForName(char *name);
char *BGBCP_NameForLang(int lang);
int BGBCP_ArchForName(char *name);
char *BGBCP_NameForArch(int arch);
BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
//AHSRC:cparse/cparse_type.c
BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
int BGBCP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupStruct(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupType(BGBCP_ParseState *ctx, char *name);
int BGBCP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
BCCX_Node *BGBCP_GetStruct(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetUnion(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetEnum(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetStructJ(BGBCP_ParseState *ctx, char *name, int ty);
int BGBCP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
int BGBCP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
BCCX_Node *BGBCP_DefClassC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DeclAttributeC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefTypeC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefClassJ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefTypeJ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefType(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_def.c
BCCX_Node *BGBCP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
BCCX_Node *BGBCP_FunVarsList(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefName(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefName2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_VarDefinition(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
BCCX_Node *BGBCP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Definition(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_expr2.c
int BGBCP_AddExpression(char *name, BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
BCCX_Node *BGBCP_Number(BGBCP_ParseState *ctx, char *str);
BCCX_Node *BGBCP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
BCCX_Node *BGBCP_UnaryExpr(char *op, BCCX_Node *v);
BCCX_Node *BGBCP_IfExpr(BCCX_Node *cond, BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Expression(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Expression2(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_stmt.c
void BGBCP_Warn(char *se, char *str, ...);
void BGBCP_Error(char *se, char *str, ...);
int BGBCP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
int BGBCP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
char *BGBCP_EatSemicolon(char *s);
BCCX_Node *BGBCP_Statement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ParseComment(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ParseDocComment(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Block(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/preproc.c
int BGBPP_AddIncludePathFront(char *str);
int BGBPP_AddIncludePathBack(char *str);
char *BGBPP_EmitString(char *t, char *s);
char *BGBPP_EmitCharString(char *t, char *s);
void BGBPP_Trigraphs(BGBCP_ParseState *ctx, char *str);
void BGBPP_UniEscape(BGBCP_ParseState *ctx, char *str);
int BGBPP_Error(BGBCP_ParseState *ctx, char *str, ...);
BGBPP_Def *BGBPP_LookupDefine(BGBCP_ParseState *ctx, char *name);
void BGBPP_DeleteDefine(BGBCP_ParseState *ctx, char *name);
void BGBPP_CleanupDefines(BGBCP_ParseState *ctx);
void BGBPP_AddDefine(BGBCP_ParseState *ctx, char *name, char *str);
void BGBPP_AddDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
void BGBPP_AddStaticDefine(BGBCP_ParseState *ctx,char *name, char *str);
void BGBPP_AddStaticDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
void BGBPP_SendDefines(BGBCP_ParseState *ctx);
char *BGBPP_LoadInclude(BGBCP_ParseState *ctx, char *name, int *rsz);
void BGBPP_Include(BGBCP_ParseState *ctx, char *str);
void BGBPP_Directive2(BGBCP_ParseState *ctx, char *str);
void BGBPP_Directive(BGBCP_ParseState *ctx, char *str);
char *BGBPP_ParseArg(BGBCP_ParseState *ctx, char *s, char *b);
char *BGBPP_PrintName(char *t, char *s);
char *BGBPP_PrintToken(char *t, char *s, int ty);
int BGBPP_Expand(BGBCP_ParseState *ctx, char **src, char **dst, char *op);
int BGBPP_Line(BGBCP_ParseState *ctx, char *str);
int BGBPP_LineDigraph(BGBCP_ParseState *ctx, char *str);
int BGBPP_LinePostFilter(BGBCP_ParseState *ctx, char *str);
char *BGBPP_ParseLine(BGBCP_ParseState *ctx, char *s, char *b);
void BGBPP_BufferLine(BGBCP_ParseState *ctx, char *b);
void BGBPP_Buffer(BGBCP_ParseState *ctx, char *ibuf);
int BGBPP_Filter(BGBCP_ParseState *ctx, char *ibuf, char *obuf);
//AHSRC:jparse/jp_token2.c
int BGBJP_GetLinenum();
char *BGBJP_GetFilename();
int BGBJP_CalcLinenum(char *se);
int BGBJP_SetLinenum(char *fname, char *base, int num);
int BGBJP_PushLinenum();
int BGBJP_PopLinenum();
int BGBJP_SkimLinenum(char *s, char **rfn, int *rln);
char *BGBJP_GetLastFileName();
int BGBJP_GetLastLineNumber();
char *BGBJP_EatWhiteOnly(char *s);
char *BGBJP_EatWhiteOnly2(char *s);
char *BGBJP_EatWhite(char *s);
int BGBJP_IsWhiteOnly(char *s);
int BGBJP_IsLineBreak(char *se);
int BGBJP_OpChar(int c);
int BGBJP_PeekChar(char **str);
int BGBJP_ParseChar(char **str);
int BGBJP_EmitChar(char **str, int j);
int BGBJP_NameChar(int c);
char *BGBJP_Token(char *s, char *b, int *ty);
void BGBJP_FlushToken(char *s);
char *BGBJP_TokenGen(char *s, char *b, int *ty);
//AHSRC:jparse/jp_misc.c
BCCX_Node *BGBJP_FunArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_FunArgs2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ModuleBuffer(char *name, char *modname, char *buf);
//AHSRC:jparse/jp_type.c
int BGBJP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBJP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBJP_LookupType(BGBCP_ParseState *ctx, char *name);
int BGBJP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
BCCX_Node *BGBJP_NewStructJ(BGBCP_ParseState *ctx, char *name, int ty);
int BGBJP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBJP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
int BGBJP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
BCCX_Node *BGBJP_DefClass(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_DeclAttribute(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_DefType(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_FlagsBlock(BGBCP_ParseState *ctx, char **str);
//AHSRC:jparse/jp_def.c
BCCX_Node *BGBJP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
BCCX_Node *BGBJP_FunVarsList(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_DefName(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_DefName2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_VarDefinition(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn, int mfl);
BCCX_Node *BGBJP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_Definition(BGBCP_ParseState *ctx, char **str);
//AHSRC:jparse/jp_tyexpr.c
BCCX_Node *BGBJP_TypeArgExpression(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_TypeArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_TypeExpressionLit(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_TypeExpressionPE(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_TypeExpressionUnary(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_TypeExpressionBinary(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_TypeExpression(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_CastTypeExpression(BGBCP_ParseState *ctx, char **str);
//AHSRC:jparse/jp_expr2.c
int BGBJP_AddExpression(char *name, BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBJP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
BCCX_Node *BGBJP_Number(BGBCP_ParseState *ctx, char *str);
BCCX_Node *BGBJP_ExpressionFunction(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
BCCX_Node *BGBJP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_Expression(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_Expression2(BGBCP_ParseState *ctx, char **str);
//AHSRC:jparse/jp_stmt.c
void BGBJP_Warn(char *se, char *str, ...);
void BGBJP_Error(char *se, char *str, ...);
int BGBJP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBJP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
int BGBJP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBJP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
char *BGBJP_EatSemicolon(char *s);
BCCX_Node *BGBJP_Statement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_BlockStatement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_Block(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBJP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
//AHSRC:cc/cc_compile.c
void BGBCC_Warn(char *str, ...);
void BGBCC_Error(char *str, ...);
char *BGBCC_GenSym();
char *BGBCC_GenSym2();
void bgbcc_puts(BGBCC_State *ctx, char *str);
void bgbcc_print(BGBCC_State *ctx, char *str, ...);
int BGBCC_CompileSwitch(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileStatement(BGBCC_State *ctx, BCCX_Node *l);
char *BGBCC_VarTypeString_FlattenExpr(BGBCC_State *ctx,char *dst, BCCX_Node *l, int fl);
char *BGBCC_VarTypeString_FlattenName(BGBCC_State *ctx,char *t, char *s, int i);
int BGBCC_VarTypeString_ModifierChar(BGBCC_State *ctx, int i);
char *BGBCC_VarTypeString_FlattenModifiers(BGBCC_State *ctx,char *t, int fl);
char *BGBCC_VarTypeString_FlattenModifiers2(BGBCC_State *ctx,char *t, int fl);
char *BGBCC_VarTypeString(BGBCC_State *ctx, BCCX_Node *ty);
char *BGBCC_VarTypeFlagsString(BGBCC_State *ctx, BCCX_Node *ty);
void BGBCC_EmitVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_EmitVar2(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_EmitVar3(BGBCC_State *ctx, char *name, char *ty);
void BGBCC_EmitVarProperty(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileVarProperty(BGBCC_State *ctx, BCCX_Node *l);
int BGBCC_CompileVarDummyP(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileVarStatement(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileVarStatement2(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
char *BGBCC_GenProtoSig(BGBCC_State *ctx,BCCX_Node *type, BCCX_Node *args);
void BGBCC_EmitSigProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
BCCX_Node *BGBCC_CompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
void BGBCC_CompileStruct(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileUnion(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileClass(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileEnum(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CompileSProto(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_GetNodeAttribute(BGBCC_State *ctx,BCCX_Node *l, char *name);
char *BGBCC_GetNodeAttributeString(BGBCC_State *ctx,BCCX_Node *l, char *name);
void BGBCC_CompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileStructs(BGBCC_State *ctx);
void BGBCC_EmitVarValue(BGBCC_State *ctx, BCCX_Node *v);
void BGBCC_EmitVarValueR(BGBCC_State *ctx, BCCX_Node *v);
void BGBCC_EmitVarValueR2(BGBCC_State *ctx, BCCX_Node *v);
char *BGBCC_QualifyNameNS(BGBCC_State *ctx, char *name);
void BGBCC_EmitTopArray(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_EmitTopVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
char *BGBCC_CompileModule(char *name, BCCX_Node *l);
//AHSRC:cc/cc_expr.c
char *BGBCC_CIfy(char *s);
void BGBCC_CompileAssign(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileExprList(BGBCC_State *ctx, BCCX_Node *lst);
void BGBCC_CompileExprListReverse(BGBCC_State *ctx, BCCX_Node *lst);
void BGBCC_CompileArgsList(BGBCC_State *ctx, BCCX_Node *lst);
void BGBCC_CompileFuncall(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileForm(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileExprT(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileExpr(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_CompileExprTail(BGBCC_State *ctx, BCCX_Node *l);
//AHSRC:cc/cc_index.c
void BGBCC_EmitLabel(BGBCC_State *ctx, char *name);
void BGBCC_CompileBreak(BGBCC_State *ctx);
void BGBCC_CompileContinue(BGBCC_State *ctx);
void BGBCC_CompileBreakFalse(BGBCC_State *ctx);
void BGBCC_CompileBreakTrue(BGBCC_State *ctx);
void BGBCC_CompileContinueFalse(BGBCC_State *ctx);
void BGBCC_CompileContinueTrue(BGBCC_State *ctx);
void BGBCC_CompileJmp(BGBCC_State *ctx, char *s);
void BGBCC_CompileJmpFalse(BGBCC_State *ctx, char *s);
void BGBCC_CompileJmpTrue(BGBCC_State *ctx, char *s);
void BGBCC_CompileJmpCond(BGBCC_State *ctx, char *op, char *s);
void BGBCC_CompileJCO(BGBCC_State *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn, char *s);
void BGBCC_CompileJCT(BGBCC_State *ctx, BCCX_Node *l, char *s);
void BGBCC_CompileJCF(BGBCC_State *ctx, BCCX_Node *l, char *s);
int BGBCC_TryGetSizeofType(BGBCC_State *ctx, BCCX_Node *ty);
//AHSRC:cc/cc_reduce.c
int BGBCC_IsUnaryP(BCCX_Node *l, char *op);
int BGBCC_IsBinaryP(BCCX_Node *l, char *op);
int BGBCC_BoolExpr(BGBCC_State *ctx, BCCX_Node *l);
int BGBCC_IsExpr(BCCX_Node *l);
int BGBCC_BoolExpr(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_WrapIntSuf(s64 i, char *suf);
BCCX_Node *BGBCC_WrapRealSuf(double f, char *suf);
BCCX_Node *BGBCC_WrapInt(s64 i);
BCCX_Node *BGBCC_WrapReal(double f);
int BGBCC_IsIntP(BGBCC_State *ctx, BCCX_Node *l);
int BGBCC_IsRealP(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_Boolify(BGBCC_State *ctx, BCCX_Node *l);
char *BGBCC_BinaryTySuf(BGBCC_State *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCC_ReduceForm(BGBCC_State *ctx, BCCX_Node *l);
int BGBCC_SetLine(BGBCC_State *ctx, BCCX_Node *l,char *fn, int ln);
BCCX_Node *BGBCC_ReduceStatementForm(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_ReduceExpr(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_ReduceStatement(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_InferTypeBase(BCCX_Node *l);
int BGBCC_InferIsIntP(BCCX_Node *t);
int BGBCC_InferIsLongP(BCCX_Node *t);
int BGBCC_InferIsFloatP(BCCX_Node *t);
int BGBCC_InferIsDoubleP(BCCX_Node *t);
int BGBCC_InferIsNumP(BCCX_Node *t);
BCCX_Node *BGBCC_InferIsInt(BCCX_Node *t);
BCCX_Node *BGBCC_InferIsLong(BCCX_Node *t);
BCCX_Node *BGBCC_InferIsNum(BCCX_Node *t);
BCCX_Node *BGBCC_InferForm(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_InferExpr(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_InferExprClean(BGBCC_State *ctx, BCCX_Node *l, int *cp);
int BGBCC_GuessCloseForm(BGBCC_State *ctx, BCCX_Node *l);
int BGBCC_GuessCloseExpr(BGBCC_State *ctx, BCCX_Node *l);
int BGBCC_GuessCloseBlock(BGBCC_State *ctx, BCCX_Node *l);
//AHSRC:cc/ccm_compile.c
void BGBCC_MetaCompileStatement(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_MetaEmitVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_MetaEmitVar2(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_MetaCompileVarStatement(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_MetaCompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
char *BGBCC_GenProtoSig(BGBCC_State *ctx,BCCX_Node *type, BCCX_Node *args);
void BGBCC_MetaEmitSigProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
BCCX_Node *BGBCC_MetaCompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
void BGBCC_MetaCompileStruct(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_MetaCompileUnion(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_MetaCompileEnum(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_MetaCompileSProto(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_MetaCompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_MetaCompileStructs(BGBCC_State *ctx);
void BGBCC_MetaEmitVarValue(BGBCC_State *ctx, BCCX_Node *v);
void BGBCC_MetaEmitVarValueR(BGBCC_State *ctx, BCCX_Node *v);
void BGBCC_MetaEmitTopArray(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_MetaEmitTopVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_MetaCompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
char *BGBCC_MetaCompileModule(char *name, BCCX_Node *l);
//AHSRC:cc/cc_gast.c
BCCX_Node *BGBCC_GAstCompileStatementList(BGBCC_State *ctx, char *tag,BCCX_Node *lst);
BCCX_Node *BGBCC_GAstCompileStatementBody(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_GAstCompileStatement(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_GAstCompileType(BGBCC_State *ctx, BCCX_Node *ty);
BCCX_Node *BGBCC_GAstCompileVar(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_GAstCompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
BCCX_Node *BGBCC_GAstCompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
BCCX_Node *BGBCC_GAstCompileStruct(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_GAstCompileUnion(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_GAstCompileSProto(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_GAstCompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_GAstCompileStructs(BGBCC_State *ctx);
BCCX_Node *BGBCC_GAstCompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
byte *BGBCC_GAstCompileModule(char *name, BCCX_Node *l, int *rsz);
//AHSRC:cc/bs2cc_compile.c
int BGBCC_BS2IL_CompileSwitch(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileStatement(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_EmitVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_BS2IL_EmitVar2(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_BS2IL_EmitVar3(BGBCC_State *ctx, char *name, char *ty);
void BGBCC_BS2IL_EmitVar4(BGBCC_State *ctx, char *name, BCCX_Node *ty);
void BGBCC_BS2IL_EmitVarProperty(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileVarProperty(BGBCC_State *ctx, BCCX_Node *l);
int BGBCC_BS2IL_CompileVarDummyP(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileVarStatement(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileVarStatement2(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_BS2IL_CompileBlock(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
void BGBCC_BS2IL_EmitSigProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
BCCX_Node *BGBCC_BS2IL_CompileProto(BGBCC_State *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
void BGBCC_BS2IL_CompileStruct(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileUnion(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileClass(BGBCC_State *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_BS2IL_CompileSProto(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileTypedef(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileStructs(BGBCC_State *ctx);
void BGBCC_BS2IL_EmitVarValue(BGBCC_State *ctx, BCCX_Node *v);
void BGBCC_BS2IL_EmitVarValueR(BGBCC_State *ctx, BCCX_Node *v);
void BGBCC_BS2IL_EmitVarValueR2(BGBCC_State *ctx, BCCX_Node *v);
void BGBCC_BS2IL_EmitTopArray(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_BS2IL_EmitTopVar(BGBCC_State *ctx, char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_BS2IL_CompileTopStatement(BGBCC_State *ctx, BCCX_Node *l);
char *BGBCC_BS2IL_CompileModule(char *name, BCCX_Node *l);
//AHSRC:cc/bs2cc_expr.c
void BGBCC_BS2IL_CompileAssign(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileExprList(BGBCC_State *ctx, BCCX_Node *lst);
void BGBCC_BS2IL_CompileExprListReverse(BGBCC_State *ctx, BCCX_Node *lst);
void BGBCC_BS2IL_CompileArgsList(BGBCC_State *ctx, BCCX_Node *lst);
void BGBCC_BS2IL_CompileFuncall(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileForm(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileExprT(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileExpr(BGBCC_State *ctx, BCCX_Node *l);
void BGBCC_BS2IL_CompileExprTail(BGBCC_State *ctx, BCCX_Node *l);
//AHSRC:cc/bs2cc_index.c
void BGBCC_BS2IL_EmitLabel(BGBCC_State *ctx, char *name);
void BGBCC_BS2IL_CompileBreak(BGBCC_State *ctx);
void BGBCC_BS2IL_CompileContinue(BGBCC_State *ctx);
void BGBCC_BS2IL_CompileBreakFalse(BGBCC_State *ctx);
void BGBCC_BS2IL_CompileBreakTrue(BGBCC_State *ctx);
void BGBCC_BS2IL_CompileContinueFalse(BGBCC_State *ctx);
void BGBCC_BS2IL_CompileContinueTrue(BGBCC_State *ctx);
void BGBCC_BS2IL_CompileJmp(BGBCC_State *ctx, char *s);
void BGBCC_BS2IL_CompileJmpFalse(BGBCC_State *ctx, char *s);
void BGBCC_BS2IL_CompileJmpTrue(BGBCC_State *ctx, char *s);
void BGBCC_BS2IL_CompileJmpCond(BGBCC_State *ctx, char *op, char *s);
void BGBCC_BS2IL_CompileJCO(BGBCC_State *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn, char *s);
void BGBCC_BS2IL_CompileJCT(BGBCC_State *ctx, BCCX_Node *l, char *s);
void BGBCC_BS2IL_CompileJCF(BGBCC_State *ctx, BCCX_Node *l, char *s);
//AHSRC:mm/cc_tokord.c
//AHSRC:mm/ccx_node.c
BCCX_Attr *BCCX_LookupAttr(BCCX_Node *n, char *var);
BCCX_Attr *BCCX_LookupAttrNS(BCCX_Node *n, char *ns, char *var);
BCCX_Attr *BCCX_NewAttr();
BCCX_Attr *BCCX_FetchAttr(BCCX_Node *n, char *var);
BCCX_Attr *BCCX_FetchAttrNS(BCCX_Node *n, char *ns, char *var);
char *BCCX_Get(BCCX_Node *n, char *var);
char *BCCX_Get_SI(BCCX_Node *n, char *var);
int BCCX_GetInt(BCCX_Node *n, char *var);
double BCCX_GetFloat(BCCX_Node *n, char *var);
char *BCCX_GetNS(BCCX_Node *n, char *ns, char *var);
int BCCX_GetIntNS(BCCX_Node *n, char *ns, char *var);
double BCCX_GetFloatNS(BCCX_Node *n, char *ns, char *var);
void BCCX_Set(BCCX_Node *n, char *var, char *val);
void BCCX_SetInt(BCCX_Node *n, char *var, int val);
void BCCX_SetFloat(BCCX_Node *n, char *var, double val);
void BCCX_SetNS(BCCX_Node *n, char *ns, char *var, char *val);
void BCCX_SetIntNS(BCCX_Node *n, char *ns, char *var, int val);
void BCCX_SetFloatNS(BCCX_Node *n, char *ns, char *var, double val);
char *BCCX_NSURI(BCCX_Node *n, char *ns);
char *BCCX_URINS(BCCX_Node *n, char *uri);
char *BCCX_GetURI(BCCX_Node *n, char *uri, char *var);
int BCCX_GetIntURI(BCCX_Node *n, char *uri, char *var);
double BCCX_GetFloatURI(BCCX_Node *n, char *uri, char *var);
void BCCX_SetURI(BCCX_Node *n, char *uri, char *var, char *val);
void BCCX_SetIntURI(BCCX_Node *n, char *uri, char *var, int val);
void BCCX_SetFloatURI(BCCX_Node *n, char *uri, char *var, double val);
BCCX_Node *BCCX_New(char *tag);
BCCX_Node *BCCX_NewNS(char *ns, char *tag);
BCCX_Node *BCCX_NewText(char *text);
void BCCX_Add(BCCX_Node *parent, BCCX_Node *child);
BCCX_Node *BCCX_AddEnd(BCCX_Node *lst, BCCX_Node *n);
BCCX_Node *BCCX_AddEnd2(BCCX_Node *fst, BCCX_Node **rlst, BCCX_Node *n);
BCCX_Node *BCCX_New1(char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New2(char *tag, BCCX_Node *a, BCCX_Node *b);
BCCX_Node *BCCX_New3(char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c);
BCCX_Node *BCCX_New4(char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
BCCX_Node *BCCX_New1NS(char *ns, char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New2NS(char *ns, char *tag, BCCX_Node *a, BCCX_Node *b);
BCCX_Node *BCCX_New3NS(char *ns, char *tag, BCCX_Node *a, BCCX_Node *b, BCCX_Node *c);
BCCX_Node *BCCX_New4NS(char *ns, char *tag,BCCX_Node *a, BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
int BCCX_NodeP(BCCX_Node *n);
int BCCX_TextP(BCCX_Node *n);
int BCCX_LeafP(BCCX_Node *n);
int BCCX_ChildP(BCCX_Node *n);
BCCX_Node *BCCX_Next(BCCX_Node *n);
BCCX_Node *BCCX_Prev(BCCX_Node *n);
BCCX_Node *BCCX_Parent(BCCX_Node *n);
BCCX_Node *BCCX_Child(BCCX_Node *n);
char *BCCX_NS(BCCX_Node *n);
char *BCCX_URI(BCCX_Node *n);
char *BCCX_Tag(BCCX_Node *n);
char *BCCX_Text(BCCX_Node *n);
void BCCX_SetTag(BCCX_Node *n, char *s);
int BCCX_TagIsP(BCCX_Node *n, char *str);
int BCCX_AttrIsP(BCCX_Node *n, char *var, char *val);
int BCCX_TagAttrIsP(BCCX_Node *n, char *tag, char *var, char *val);
BCCX_Node *BCCX_FindNextTag(BCCX_Node *last, char *tag);
BCCX_Node *BCCX_FindNextAttr(BCCX_Node *last, char *var, char *val);
BCCX_Node *BCCX_FindNextTagAttr(BCCX_Node *last,char *tag, char *var, char *val);
BCCX_Node *BCCX_FindTag(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_FindAttr(BCCX_Node *parent, char *var, char *val);
BCCX_Node *BCCX_FindTagAttr(BCCX_Node *parent, char *tag, char *var, char *val);
BCCX_Node *BCCX_Fetch(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_Clone(BCCX_Node *n);
BCCX_Node *BCCX_CloneList(BCCX_Node *n);
void BCCX_Unlink(BCCX_Node *n);
//AHSRC:mm/ccx_print.c
char *BCCX_PrintText(char *s, char *t);
void BCCX_PrintBufSpecial(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
void BCCX_PrintBuf(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
void BCCX_DumpFD(FILE *fd, BCCX_Node *node);
void BCCX_PrintFD(FILE *fd, BCCX_Node *node);
char *BCCX_DumpStr(char *buf, BCCX_Node *node);
char *BCCX_PrintStr(char *buf, BCCX_Node *node);
void BCCX_Print(BCCX_Node *node);
//AHSRC:mm/ccx_parse.c
BCCX_ReadStream BCCX_NewReadStreamBuf(char *buf);
BCCX_ReadPos BCCX_GetPos(BCCX_ReadStream strm);
void BCCX_SetPos(BCCX_ReadStream strm, BCCX_ReadPos pos);
int BCCX_PeekChar(BCCX_ReadStream strm);
int BCCX_ReadChar(BCCX_ReadStream strm);
int BCCX_PeekCharIdx(BCCX_ReadStream strm, int idx);
int BCCX_ParseEatWhite(BCCX_ReadStream strm);
int BCCX_ParseSpecialP(BCCX_ReadStream strm);
int BCCX_ParseContSpecialP(BCCX_ReadStream strm);
char *BCCX_ParseToken(BCCX_ReadStream strm, int *ty);
char *BCCX_PeekToken(BCCX_ReadStream strm, int *ty);
char *BCCX_ParseText(BCCX_ReadStream strm);
BCCX_Attr *BCCX_ParseOpts(BCCX_ReadStream strm);
BCCX_Node *BCCX_ParseTag(BCCX_ReadStream strm, int *rgrp);
BCCX_Node *BCCX_ParseExprR(BCCX_ReadStream strm, int *rgrp);
BCCX_Node *BCCX_ParseExpr(BCCX_ReadStream strm);
BCCX_Node *BCCX_ParseExprStr(char *str);
//AHSRC:mm/ccx_sbxe.c
void *sbxe_malloc(int sz);
void *sbxe_tmalloc(char *ty, int sz);
void sbxe_free(void *ptr);
int SBXE_WriteNodeList(byte *buf, BCCX_Node *expr);
BCCX_Node *SBXE_ReadNodeList(byte *buf);
//AHSRC:mm/cc_malloc.c
void BGBCC_DieError();
void BGBCC_DieFatal();
void BGBCC_CleanupAll();
void *bgbcc_tmalloc(char *ty, int sz);
void *bgbcc_malloc(int sz);
void *bgbcc_tmalloc2(char *ty, int sz);
void *bgbcc_malloc2(int sz);
void bgbcc_free(void *p);
char *bgbcc_strdup(char *str);
int bgbcc_strdup_i(char *str);
char *bgbcc_strtab_i(int i);
char *bgbcc_strdup(char *str);
void *bgbcc_ralloc(int sz);
char *bgbcc_rstrdup(char *s);
char **bgbcc_split(char *s);
char *bgbcc_rstradd(char *s0, char *s1);
char *bgbcc_rstradd2(char *s0, char *s1, char *s2);
char *bgbcc_rstradd3(char *s0, char *s1, char *s2, char *s3);
void *bgbcc_neword(char **tab);
int bgbcc_strord(char *str, void *tab);
int BGBCC_GetOrdinal(char *str);
int BGBCC_CheckOrdinalFlag(int i, int ty);
int BGBCC_GetOrdinalLang(char *str, int lang);
int BGBCC_GetOrdinalLangType(char *str, int lang, int ty);
double BGBCC_ParseNumber(char *str);
//AHSRC:cc_api.c
void BCCX_DumpVF(void *fd, BCCX_Node *node);
void BCCX_PrintVF(void *fd, BCCX_Node *node);
int BGBCC_BindSig(BGBCC_State *ctx, char *name, char *sig);
int BGBCC_BindTypeSig(BGBCC_State *ctx, char *name, char *sig);
int BGBCC_BindVarSig(BGBCC_State *ctx, char *name, char *sig);
int BGBCC_BindVarInfo(BGBCC_State *ctx, char *name, char *key, char *val);
int BGBCC_BindTypeInfo(BGBCC_State *ctx, char *name, char *key, char *val);
int BGBCC_BindDyTypeSig(BGBCC_State *ctx, char *name, char *sig);
char *BGBCP_LookupSig(BGBCP_ParseState *ctx, char *name);
char *BGBCP_LookupTypeSig(BGBCP_ParseState *ctx, char *name);
int BGBCC_BindStructSig(BGBCC_State *ctx, char *name, char *sig);
int BGBCC_BindStructInfo(BGBCC_State *ctx, char *name, char *key, char *val);
int BGBCC_BindStructInfoIdx(BGBCC_State *ctx,char *name, char *key, int idx, char *val);
int BGBCC_BindFieldSig(BGBCC_State *ctx, char *cls, char *name, char *sig);
int BGBCC_BindFieldInfo(BGBCC_State *ctx,char *cls, char *name, char *key, char *val);
int BGBCC_BindStructInfoI(BGBCC_State *ctx,char *name, char *key, int val);
int BGBCC_BindFieldInfoI(BGBCC_State *ctx,char *cls, char *name, char *key, int val);
char *BGBCP_LookupPPKey(BGBCP_ParseState *ctx, char *name);
int BGBCC_BindPPKey(BGBCP_ParseState *ctx, char *name, char *sig);
int BGBCC_StoreTextFile(char *name, char *buf);
int BGBCC_StoreFile(char *name, void *buf, int sz);
int BGBCC_GetArch();
char *bgbcc_loadfile(char *name, int *rsz);
char *BGBCC_ReadFile(char *name, int *rsz);
int BGBCC_LoadCSourceBuffer(char *name, char *buf);
int BGBCC_LoadCSource(char *name, char *out);
int BGBCC_LoadCHeader(char *name);
int BGBCC_LoadLibrary(char *name);
int BGBCC_LoadLibrary2(char *name);
int BGBCC_LoadLibraryGeneric(char *name);
int BGBCC_LoadModule(char *name);
int BGBCC_LoadModuleMulti(char *name, char **arg);
int BGBCC_CompileFile(char *name, char *out);
int BGBCC_LoadCompileScript(char *name);
BCCX_Node *BGBCC_LoadCSourceGast(char *name);
int BGBCC_LoadCSourceGastSBXE(char *name, byte *obuf, int *rsz);
int BGBCC_LoadCSourceBSVM(char *name);
int BGBCC_LoadModuleBSVM(char *name);
int BGBCC_InitEnv(int argc, char **argv, char **env);
int BGBCC_Init();
int BGBCC_InitEnv(int argc, char **argv, char **env);
int BGBCC_Init();
BGBCC_API void ccBindKey(char *key, char *val);
BGBCC_API char *ccLookupKey(char *key);
BGBCC_API void ccAddInclude(char *path);
BGBCC_API void ccAddLibrary(char *path);
BGBCC_API void ccAddSource(char *path);
void ccAddDefineString(char *str);
BGBCC_API int ccLoadModule(char *file);
BGBCC_API int ccLoadModuleMulti(char *name, char **args);
BGBCC_API int ccCompileModule(char *file, char *out);
BGBCC_API int ccLoadLibrary(char *name);
BGBCC_API int ccPrecompileModule(char *file);
BGBCC_API int ccLoadCompilerScript(char *file);
BGBCC_API int ccLoadModuleBSVM(char *file);
BGBCC_API int ccSubmitCSource(char *name, char *buf);
BGBCC_API void *ccGetAddr(char *sym);
BGBCC_API void ccSetAddr(char *sym, void *ptr);
BGBCC_API void *ccGetPtr(char *sym);
BGBCC_API void ccSetPtr(char *sym, void *v);
BGBCC_API int ccGetInt(char *sym);
BGBCC_API void ccSetInt(char *sym, int v);
BGBCC_API s64 ccGetLongLong(char *sym);
BGBCC_API void ccSetLongLong(char *sym, s64 v);
BGBCC_API float ccGetFloat(char *sym);
BGBCC_API void ccSetFloat(char *sym, float v);
BGBCC_API double ccGetDouble(char *sym);
BGBCC_API void ccSetDouble(char *sym, double v);
//AHSRC:cc_cache.c
void BGBCC_LoadCache();
void BGBCC_StoreCache();
int BGBCC_CacheAllocNode();
int BGBCC_CacheLookupFile(char *name);
int BGBCC_CacheGetFile(char *name);
int BGBCC_CacheCheckDepNodes(int node);
int BGBCC_CacheUpdateDepNodes(int node);
int BGBCC_CacheCheckFile(char *name);
int BGBCC_UpdateCheckFile(char *name);
