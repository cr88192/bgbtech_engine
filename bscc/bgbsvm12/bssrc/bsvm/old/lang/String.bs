package bsvm.lang;

public final class String extends Object
	// implements Serializable, Comparable
{
private char[] value;
private int offset;
private int count;

// public static Comparator CASE_INSENSITIVE_ORDER;

public String()
	{ value=new char[0]; offset=0; count=0; }

public String(byte[] bytes)
	{ this(bytes, 0, 0, bytes.length); }
public String(byte[] ascii, int hibyte)
	{ this(ascii, hibyte, 0, ascii.length); }
public String(byte[] bytes, int offset, int length)
	{ this(bytes, 0, 0, length); }

public String(byte[] ascii, int hibyte, int offset, int count)
{
	int i;

	this.value=new char[count];
	this.count=count;
	this.offset=0;

	for(i=0; i<count; i++)
		this.value[i]=(char)((hibyte<<8)|ascii[offset+i]);
}

public String(byte[] bytes, int offset, int length, String enc)
	{ this(bytes, 0, offset, length); }
public String(byte[] bytes, String enc)
	{ this(bytes, 0, 0, bytes.length); }

public String(char[] value)
	{ this(value, 0, value.length); }

public String(char[] value, int offset, int count)
{
	this.value=new char[count];
	this.count=count;
	this.offset=0;
	System.arraycopy(value, offset, this.value, 0, count);
}

public String(String value)
{
	count=value.length();
	this.value=new char[count];
	value.getChars(0, count, this.value, 0);
}

public String(StringBuffer buffer)
{
	//FIXME: poor, creates a wasted string
	this(buffer.toString());
}

public char charAt(int index)
	{ return value[index]; }

public int compareTo(Object o)
	{ return compareTo(o.toString()); }

public int compareTo(String anotherString)
{
	int n1, n2, o1, o2;
	char c1, c2;
	int i, n;

	o1=this.offset;
	o2=anotherString.offset;
	n1=this.count;
	n2=anotherString.count;
	n=Math.min(n1, n2);

	for(i=0; i<n; i++)
	{
		c1=this.value[o1+i];
		c2=anotherString.value[o2+i];
		if(c1!=c2)return c1-c2;
	}
	return n1-n2;
}

public int compareToIgnoreCase(String str)
{
	int n1, n2, o1, o2;
	char c1, c2;
	int i, n;

	o1=this.offset;
	o2=str.offset;
	n1=this.count;
	n2=str.count;
	n=Math.min(n1, n2);

	for(i=0; i<n; i++)
	{
		c1=Character.toLowerCase(this.value[o1+i]);
		c2=Character.toLowerCase(str.value[o2+i]);
		if(c1!=c2)return c1-c2;
	}
	return n1-n2;
}

public String concat(String str)
{
	char[] buf;
	int len, n1, n2;

	n1=this.count;
	n2=str.count;
	len=n1+n2;
	buf=new char[len];

	System.arraycopy(this.value, this.offset, buf, 0, n1);
	System.arraycopy(str.value, str.offset, buf, n1, n2);
	return new String(buf, 0, len);
}

public static String copyValueOf(char[] data)
	{ return new String(data); }
public static String copyValueOf(char[] data, int offset, int count)
	{ return new String(data, offset, count); }

public boolean endsWith(String suffix)
	{ return false; }
public boolean equals(Object anObject)
	{ return compareTo(anObject)==0; }
public boolean equalsIgnoreCase(String anotherString)
	{ return compareToIgnoreCase(anotherString)==0; }

public byte[] getBytes()
{
	byte[] buf;
	int len;

	len=this.count;

	buf=new byte[len];
	getBytes(0, len, buf, 0);
	return(buf);
}

public void getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)
{
	int i, n;

	n=srcEnd-srcBegin;
	for(i=0; i<n; i++)
		dst[dstBegin+i]=(byte)(value[offset+srcBegin+i]);
}

public byte[] getBytes(String enc)
	{ return getBytes(); }

public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
{
	int i, n;

	n=srcEnd-srcBegin;
	for(i=0; i<n; i++)
		dst[dstBegin+i]=value[offset+srcBegin+i];
}

public int hashCode()
{
	int i, hi;

	hi=0;
	for(i=0; i<count; i++)
		hi=hi*251+value[offset+i];
	return(hi);
}

public int indexOf(int ch)
	{ return 0; }
public int indexOf(int ch, int fromIndex)
	{ return 0; }
public int indexOf(String str)
	{ return 0; }
public int indexOf(String str, int fromIndex)
	{ return 0; }

public String intern()
{
	//FIXME: make actually work
	return this;
}

public int lastIndexOf(int ch)
	{ return 0; }
public int lastIndexOf(int ch, int fromIndex)
	{ return 0; }
public int lastIndexOf(String str)
	{ return 0; }
public int lastIndexOf(String str, int fromIndex)
	{ return 0; }
public int length()
	{ return count; }
public boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)
	{ return false; }
public boolean regionMatches(int toffset, String other, int ooffset, int len)
	{ return false; }
public String replace(char oldChar, char newChar)
	{ return null; }
public boolean startsWith(String prefix)
	{ return false; }
public boolean startsWith(String prefix, int toffset)
	{ return false; }

public String substring(int beginIndex)
	{ return new String(value, offset+beginIndex, count-beginIndex); }
public String substring(int beginIndex, int endIndex)
	{ return new String(value, offset+beginIndex, endIndex-beginIndex); }

public char[] toCharArray()
{
	char[] buf = new char[count];
	int i;

//	getChars(0, count, buf, 0);
	for(i=0; i<count; i++)
		buf[i]=value[i];
	return buf;
}

public String toLowerCase()
{
	char[] buf = new char[count];
	int i;

	getChars(0, count, buf, 0);
	for(i=0; i<count; i++)
		buf[i]=Character.toLowerCase(buf[i]);
	return new String(buf);
}

// public String toLowerCase(Locale locale)
//	{ return toLowerCase(); }

public String toString()
	{ return this; }

public String toUpperCase()
{
	char[] buf = new char[count];
	int i;

	getChars(0, count, buf, 0);
	for(i=0; i<count; i++)
		buf[i]=Character.toUpperCase(buf[i]);
	return new String(buf);
}

// public String toUpperCase(Locale locale)
//	{ return toUpperCase(); }

public String trim()
{
	int i, j;

	for(i=0; i<count; i++)
		if(value[offset+i]>' ')
			break;
	for(j=count; j>i; j--)
		if(value[offset+j-1]>' ')
			break;
	return substring(i, j);
}

public static String valueOf(boolean b)
	{ return b?"true":"false"; }

public static String valueOf(char c)
{
	char[] buf={c};
	return new String(buf);
}

public static String valueOf(char[] data)
	{ return new String(data); }
public static String valueOf(char[] data, int offset, int count)
	{ return new String(data, offset, count); }
public static String valueOf(double d)
	{ return Double.toString(d); }
public static String valueOf(float f)
	{ return Float.toString(f); }
public static String valueOf(int i)
	{ return Integer.toString(i); }
public static String valueOf(long l)
	{ return Long.toString(l); }
public static String valueOf(Object obj)
	{ return obj.toString(); }
}
