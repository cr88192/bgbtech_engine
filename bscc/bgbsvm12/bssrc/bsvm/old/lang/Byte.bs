package bsvm.lang;

public final class Byte extends Number // implements Comparable
{
public static final byte MAX_VALUE = 127;
public static final byte MIN_VALUE = -128;

private final byte value;

public Byte(byte value)
	{ this.value=value; }
public Byte(String s)
	{ this.value=parseByte(s); }

public byte byteValue()
	{ return value; }
public int compareTo(Byte anotherByte)
	{ return value-anotherByte.value; }
public int compareTo(Object o)
	{ return compareTo((Byte)o); }
public static Byte decode(String nm)
	{ return new Byte(nm); }
public double doubleValue()
	{ return (double)value; }
public boolean equals(Object obj)
	{ return compareTo(obj)==0; }
public float floatValue()
	{ return (float)value; }
public int hashCode()
	{ return (int)value; }
public int intValue()
	{ return (int)value; }
public long longValue()
	{ return (long)value; }
public static byte parseByte(String s)
	{ return parseByte(s, 10); }
public static byte parseByte(String s, int radix)
	{ return (byte)Integer.parseInt(s, radix); }
//	{ return 0; }
public short shortValue()
	{ return (short)value; }
public String toString()
	{ return toString(value); }
public static String toString(byte b)
	{ return Integer.toString((int)b); }
//	{ return null; }
public static Byte valueOf(String s)
	{ return new Byte(s); }
public static Byte valueOf(String s, int radix)
	{ return new Byte(parseByte(s, radix)); }
}
