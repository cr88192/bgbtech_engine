package bsvm.lang;

public final class Character extends Object
{
public static byte COMBINING_SPACING_MARK = 8;
public static byte CONNECTOR_PUNCTUATION = 23;
public static byte CONTROL = 15;
public static byte CURRENCY_SYMBOL = 26;
public static byte DASH_PUNCTUATION = 20;
public static byte DECIMAL_DIGIT_NUMBER = 9;
public static byte ENCLOSING_MARK = 7;
public static byte END_PUNCTUATION = 22;
public static byte FORMAT = 16;
public static byte LETTER_NUMBER = 10;
public static byte LINE_SEPARATOR = 13;
public static byte LOWERCASE_LETTER = 2;
public static byte MATH_SYMBOL = 25;
public static int MAX_RADIX = 36;
public static char MAX_VALUE = '\uFFFF';
public static int MIN_RADIX = 2;
public static char MIN_VALUE = '\u0000';
public static byte MODIFIER_LETTER = 4;
public static byte MODIFIER_SYMBOL = 27;
public static byte NON_SPACING_MARK = 6;
public static byte OTHER_LETTER = 5;
public static byte OTHER_NUMBER = 11;
public static byte OTHER_PUNCTUATION = 24;
public static byte OTHER_SYMBOL = 28;
public static byte PARAGRAPH_SEPARATOR = 14;
public static byte PRIVATE_USE = 18;
public static byte SPACE_SEPARATOR = 12;
public static byte START_PUNCTUATION = 21;
public static byte SURROGATE = 19;
public static byte TITLECASE_LETTER = 3;
public static byte UNASSIGNED = 0;
public static byte UPPERCASE_LETTER = 1;

private final char value;

public Character(char value) 
	{ this.value=value; }

public char charValue()
	{ return value; }

public static int digit(char ch, int radix)
{
	int v;

	if((radix<MIN_RADIX)||(radix>MAX_RADIX))
		return(-1);

	v=-1;
	if((ch>='0') && (ch<='9'))	v=ch-'0';
	if((ch>='A') && (ch<='Z'))	v=ch-'A'+10;
	if((ch>='a') && (ch<='z'))	v=ch-'a'+10;

	if(v>radix)return(-1);
	return(v);
}

public boolean equals(Object obj)
{
	return (obj==this) ||
		((obj instanceof Character) &&
			(this.value==((Character)obj).value));
}

public static char forDigit(int digit, int radix)
{
	if((digit<0)||(digit>=radix))
		return('\0');
	if((radix<MIN_RADIX)||(radix>MAX_RADIX))
		return('\0');
	if(digit<10)return((char)('0'+digit));
	return((char)('a'+(digit-10)));
}

public int hashCode()
	{ return (int)value; }
public static boolean isDefined(char ch)
	{ return true; }

public static boolean isDigit(char ch)
	{ return((ch>='0') && (ch<='9')); }

public static boolean isJavaLetter(char ch)
	{ return((ch=='_')||isLetter(ch)); }
public static boolean isJavaLetterOrDigit(char ch)
	{ return((ch=='_')||isLetter(ch)||isDigit(ch)); }
public static boolean isLetter(char ch)
	{ return(((ch>='A') && (ch<='Z')) || ((ch>='a') && (ch<='z'))); }
public static boolean isLetterOrDigit(char ch)
	{ return(isLetter(ch)||isDigit(ch)); }
public static boolean isLowerCase(char ch)
	{ return((ch>='a') && (ch<='z')); }

public static boolean isSpace(char ch)
{
	if((ch>'\0') && (ch<=' '))
		return(true);
	return(false);
}

public static boolean isTitleCase(char ch)
	{ return false; }
public static boolean isUpperCase(char ch)
	{ return((ch>='A') && (ch<='Z')); }

public static char toLowerCase(char ch)
{
	if((ch>='A') && (ch<='Z'))
		return((char)(ch-'A'+'a'));
	return ch;
}

public String toString()
{
	char[] buf={value};
	return new String(buf);
}

public static String toString(char ch)
{
	char[] buf={ch};
	return new String(buf);
}

public static char toTitleCase(char ch)
	{ return ch; }

public static char toUpperCase(char ch)
{
	if((ch>='a') && (ch<='z'))
		return((char)(ch-'a'+'A'));
	return ch;
}

}

