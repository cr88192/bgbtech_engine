NOP\0\-\=\//do nothing
BLOCK\1\-\=\//blocks if limit!=0
DBGMARK\2\TW\=\//sets the filename and line number
CGENAST\3\I\-\//syntax to be passed to code generator
FN\4\T\=\//filename
LN\5\W\=\//line number
LABEL\6\S\=\//label

PUSH\16\I\=v\//push item on the stack
POP\17\-\v=\//pop item from the stack
LOAD\18\S\=v\//load item from variable onto stack
STORE\19\S\v=\//store item on stack into variable
BIND\20\S\v=\//bind item on stack to new variable
DYNBIND\21\S\v=\//dynamically bind an item on the stack
LEXBIND\22\S\v=\//lexically bind an item on the stack
LOADINDEX\23\-\vv=v\//load an index into an object (arr, idx)
STOREINDEX\24\-\vvv=\//store into an index in an object (val, arr, idx)
PUSH_SELF\25\-\=v\//push 'self' onto stack
CLEARENV\26\-\=\//clear lexical bindings to mark
BINDPATTERN\27\-\vv=\//bind vars to a pattern
LOADMINDEX\28\-\-\//(deprecated) load multi-index
STOREMINDEX\29\-\-\//(deprecated) store multi-index
TRYLOAD\30\S\=v\//try to load an item
CAST_S\31\S\v=v\//cast to a specific type
MARK\32\-\=\//mark the current stack location
CALL\33\-\M*v=v\//call a given function
TAILCALL\34\-\M*v=\//tail call a given function
CALL_S\35\S\M*=v\//call a given function (named)
TAILCALL_S\36\S\M*=\//tail call a given function (named)
METHODCALL\37\-\M*vv=v\//call a given method
METHODTAILCALL\38\-\M*vv=\//tail-call a given method
METHODCALL_S\39\S\M*v=v\//call a given method (named)
METHODTAILCALL_S\40\S\M*v=\//tail-call a given method (named)
RET\41\-\v=\//return from current function
PUSHENV\42\-\=\//push a new level of dynamic bindings
POPENV\43\-\=\//pop a level of dynamic bindings
BEGINCC\44\A\=v\//begin block with current continuation
BEGINOBJ\45\A\=\//begin a block with a new object
FRAME\46\A\=\//create a new frame
NEW_S\47\S\M*=v\//create new object instance
DUP\48\-\x=xx\//dup items on stack
EXCH\49\-\xy=yx\//swap items on stack
INDEX\50\N\=v\//refer to an item on stack
RINDEX\51\N\=v\//refer to an item relative to mark
SETINDEX\52\N\v=\//set an item on the stack
SETRINDEX\53\N\v=\//set an item on the stack
DUP_F\54\-\x=xx\//dup items on stack (fast)
DUP_R\55\B\v=v\//copy an item on stack into a register
DUP_RF\56\B\v=v\//copy into a register (fast)
PUSH_R\57\B\=v\//push an item on the stack (reg)
PUSH_RF\58\B\=v\//push an item on the stack (reg, fast)
POP_R\59\B\v=\//pop an item from the stack (reg)
EXCH_SELF\60\-\x=y\//swap 'self' with value on stack
PUSH_CTV\61\B\=v\//push a special value
DELETE\62\-\v=b\//delete an object, push a bool
CAST\63\-\vv=v\//cast a value to a given type
UNARYOP\64\u\v=v\//unary operation
BINARYOP\65\b\vv=v\//binary operation
PUSH_NULL\66\-\=v\//push a null
PUSH_TRUE\67\-\=v\//push a true
PUSH_FALSE\68\-\=v\//push a false
PUSH_SV\69\K\=i\//push a small fixnum
PUSH_0\70\-\=i\//push 0
PUSH_1\71\-\=i\//push 1
PUSH_2\72\-\=i\//push 2
PUSH_3\73\-\=i\//push 3
PUSH_4\74\-\=i\//push 4
PUSH_5\75\-\=i\//push 5
PUSH_6\76\-\=i\//push 6
PUSH_7\77\-\=i\//push 7
PUSH_CF\78\-\=v\//push current function
CALL_CF\79\-\M*=v\//call current function
TAILCALL_CF\80\-\M*=\//tailcall current function
CAR\81\-\v=v\//head of a list
CDR\82\-\v=v\//tail of a list
CAAR\83\-\v=v\//list ops
CDAR\84\-\v=v\//list ops
CADR\85\-\v=v\//list ops
CDDR\86\-\v=v\//list ops
PUSH_SV_P\87\B\=i\//push a small fixnum (positive)
PUSH_SV_N\88\B\=i\//push a small fixnum (negative)
PUSH_SV_F\89\H\=f\//push a small flonum (fixed 100)
LLOAD\90\B\=v\//load an item from the lexical env
LSTORE\91\B\=v\//store an item to the lexical env
LLOAD_F\92\B\=v\//load an item from the lexical env
LSTORE_F\93\B\=v\//store an item to the lexical env
LPOSTINC\94\B\=v\//post-increment lexical var
LPOSTDEC\95\B\=v\//post-decrement lexical var
LINC_FN\96\B\=\//i+1\-> i
LDEC_FN\97\B\=\//i-1\-> i
LPREINC\98\B\=v\//pre-increment lexical var
LPREDEC\99\B\=v\//pre-decrement lexical var
LOADINDEX_S\100\S\v=v\//load an index from an object
STOREINDEX_S\101\S\vv=\//store into an object slot (val obj)
LOADINDEX_I\102\B\v=v\//load an index from an object
STOREINDEX_I\103\B\vv=\//store into an object index (val obj)
LOADINDEX_0\104\-\v=v\//load an index from an object
LOADINDEX_1\105\-\v=v\//load an index from an object
LOADINDEX_2\106\-\v=v\//load an index from an object
LOADINDEX_3\107\-\v=v\//load an index from an object
STOREINDEX_0\108\-\vv=\//store into an object index (val obj)
STOREINDEX_1\109\-\vv=\//store into an object index (val obj)
STOREINDEX_2\110\-\vv=\//store into an object index (val obj)
STOREINDEX_3\111\-\vv=\//store into an object index (val obj)
THROW_S\112\S\-\//throw exception (simple name)
BEGIN_TRY\113\-\-\//begins the body of a try block
END_TRY\114\-\-\//ends the body of a try block
CATCH\115\SA\-\//add exception handler
THROW_OBJ\116\-\v=\//throw exception object

JMP\118\A\=\//jump to rel offset
JMP_TRUE\119\A\v=\//jump to rel offset if true
JMP_FALSE\120\A\v=\//jump to rel offset if false
JMP_COND_U\121\uA\v=\//jump to rel offset (unary condition)
JMP_COND_B\122\bA\vv=\//jump to rel offset (binary condition)
BEGIN_CATCH\123\S\=v\//begins the body of a catch block
END_CATCH\124\-\=\//ends the body of a catch block
BEGIN_CATCH_FINAL\125\-\=\//begins the body of a finally block
ARRAY\128\-\M*=v\//new array from values
DICT\129\-\M*=v\//new dict from values
ATTR\130\-\xy=v\//new attribute from name and value (name=y)
OBJECT\131\-\M*=v\//new empty object
VECTOR\132\-\M*=v\//new vector from values
TERMINAL\133\-\-\//new terminal from value
COMPLEX\134\-\ff=v\//new complex from values
MATRIX\135\-\M*=v\//new matrix from values
LIST\136\-\M*=v\//new list from values
COMPLEX_I\137\-\f=v\//new imaginary number from flonum
CLOSE\138\-\v=v\//close over a block making a lambda
CLOSE2\139\-\v=v\//close, but have it bound in self (?)
FLINK\140\-\vv=v\//link functions together
CONS\141\-\vv=v\//new cons cell
QUAT\142\-\ffff=v\//construct a quaternion (WXYZ)

NEG\144\-\v=w\//negate
LNOT\145\-\v=w\//logical not
DEFER\146\-\v=w\//deference / unary-multiply
PUSH_SV_C\147\W\=v\//push a character codepoint
ARRAY_S\148\S\M*=v\//new array from values (typed)
CLONE\149\-\v=w\//clone an object
TOSTRING\150\-\v=w\//convert object to a string
TYBIND\151\SSS\v=\//bind new variable (name, sig, flags)
TYDYNBIND\152\SSS\v=\//dynamically bind item on the stack
TYLEXBIND\153\SSS\v=\//lexically bind item on the stack
IMPORT\154\SS\=\//begin package (name, flags)
LOADA_S\155\S\=p\//push pointer to a variable
LOADINDEXA\156\-\vv=v\//load address of array index
CLASS_IFACE\157\SS\=\//implement interface (name, flags)
INSTANCEOF_S\158\S\v=b\//check if value is of a given type
ADD\159\-\vv=v\//add operator
SUB\160\-\vv=v\//sub operator
MUL\161\-\vv=v\//mul operator
DIV\162\-\vv=v\//div operator
MOD\163\-\vv=v\//mod operator
AND\164\-\vv=v\//and operator
OR\165\-\vv=v\//or operator
XOR\166\-\vv=v\//xor operator
POSTINC_S\167\S\=v\//post-increment variable
POSTDEC_S\168\S\=v\//post-decrement variable
PREINC_S\169\S\=v\//pre-increment variable
PREDEC_S\170\S\=v\//pre-decrement variable
INC_S\171\S\=\//increment variable
DEC_S\172\S\=\//decrement variable
SETDEFER\173\-\vw=\//set deference (val ref)
NOT\174\-\v=w\//not
INC\175\-\v=w\//increment
DEC\176\-\v=w\//decrement
PUSH_SV_FB\177\G\=f\//push a small flonum (fixed 10000)
ROLL_I\178\NM\-\//rotate stack elements by a count
COPY_I\179\N\-\//duplicate the N top stack elements
EXCH_YXZ\180\-\xyz=yxz
EXCH_YZX\181\-\xyz=yzx
EXCH_ZXY\182\-\xyz=zxy
EXCH_ZYX\183\-\xyz=zyx
PUSH_I\184\V\=i\//push a literal integer
PUSH_L\185\V\=i\//push a literal long

JMP_L_FN\256\A\ii=\//i<j
JMP_G_FN\257\A\ii=\//i>j
JMP_LE_FN\258\A\ii=\//i<=j
JMP_GE_FN\259\A\ii=\//i>=j
JMP_L_FL\260\A\ff=\//f<g
JMP_G_FL\261\A\ff=\//f>g
JMP_LE_FL\262\A\ff=\//f<=g
JMP_GE_FL\263\A\ff=\//f>=g
JMP_E_LFN\264\BBA\=\//i==j
JMP_NE_LFN\265\BBA\=\//i!=j
JMP_L_LFN\266\BBA\=\//i<j
JMP_G_LFN\267\BBA\=\//i>j
JMP_LE_LFN\268\BBA\=\//i<=j
JMP_GE_LFN\269\BBA\=\//i>=j
JMP_E_ZFN\270\A\i=\//i==0
JMP_NE_ZFN\271\A\i=\//i!=0
JMP_L_ZFN\272\A\i=\//i<0
JMP_G_ZFN\273\A\i=\//i>0
JMP_LE_ZFN\274\A\i=\//i<=0
JMP_GE_ZFN\275\A\i=\//i>=0
JMP_E_LZFN\276\BA\=\//i==0
JMP_NE_LZFN\277\BA\=\//i!=0
JMP_L_LZFN\278\BA\=\//i<0
JMP_G_LZFN\279\BA\=\//i>0
JMP_LE_LZFN\280\BA\=\//i<=0
JMP_GE_LZFN\281\BA\=\//i>=0
JMP_E_FNC\282\CA\=\//i==c
JMP_NE_FNC\283\CA\i=\//i!=c
JMP_L_FNC\284\CA\i=\//i<c
JMP_G_FNC\285\CA\i=\//i>c
JMP_LE_FNC\286\CA\i=\//i<=c
JMP_GE_FNC\287\CA\i=\//i>=c
JMP_E_LFNC\288\BCA\=\//i==c
JMP_NE_LFNC\289\BCA\=\//i!=c
JMP_L_LFNC\290\BCA\=\//i<c
JMP_G_LFNC\291\BCA\=\//i>c
JMP_LE_LFNC\292\BCA\=\//i<=c
JMP_GE_LFNC\293\BCA\=\//i>=c
INC_FN\294\-\i=i\//i+1
DEC_FN\295\-\i=i\//i-1
INC2_FN\296\-\i=i\//i+2
DEC2_FN\297\-\i=i\//i-2
ADD_FN\298\-\ii=i\//i+j
SUB_FN\299\-\ii=i\//i-j
MUL_FN\300\-\ii=i\//i*j
DIV_FN\301\-\ii=i\//i/j
IDIV_FN\302\-\ii=i\//i/j
MOD_FN\303\-\ii=i\//i%j
AND_FN\304\-\ii=i\//i&j
OR_FN\305\-\ii=i\//i|j
XOR_FN\306\-\ii=i\//i^j
CMP_L_FN\307\-\ii=b\//i<j
CMP_G_FN\308\-\ii=b\//i>j
CMP_LE_FN\309\-\ii=b\//i<=j
CMP_GE_FN\310\-\ii=b\//i>=j
CMP_E_FN\311\-\ii=b\//i==j
CMP_NE_FN\312\-\ii=b\//i!=j
NEG_FN\313\-\i=i\//-i
NOT_FN\314\-\i=i\//~i
ADD_FN_C\315\B\i=i\//i+c
SUB_FN_C\316\B\i=i\//i-c
MUL_FN_C\317\B\i=i\//i*c
CONV_FN2FL\318\-\i=f\//convert fixnum to flonum (i+f, ...)
CONV_FL2FN\319\-\f=i\//convert flonum to fixnum (int f, ...)
ADD_FL\320\-\ff=f\//f+g
SUB_FL\321\-\ff=f\//f-g
MUL_FL\322\-\ff=f\//f*g
DIV_FL\323\-\ff=f\//f/g
CMP_L_FL\324\-\ff=b\//f<g
CMP_G_FL\325\-\ff=b\//f>g
CMP_LE_FL\326\-\ff=b\//f<=g
CMP_GE_FL\327\-\ff=b\//f>=g
CMP_E_FL\328\-\ff=b\//f==g
CMP_NE_FL\329\-\ff=b\//f!=g
NEG_FL\330\-\f=f\//-f
JMP_E_FN\331\A\ii=\//i==j
JMP_NE_FN\332\A\ii=\//i!=j
JMP_E_FL\333\A\ff=\//f==g
JMP_NE_FL\334\A\ff=\//f!=g
SHL_FN\335\-\ii=i\//i<<j
SHR_FN\336\-\ii=i\//i>>j
EXP_FN\337\-\ii=i\//i**j
SHL_FN_C\338\B\i=i\//i<<c
SHR_FN_C\339\B\i=i\//i>>c
EXP_FN_C\340\B\i=i\//i**c

JMP_EQ\464\A\xy=\//i==j
JMP_NE\465\A\xy=\//i!=j
JMP_L\466\A\xy=\//f<g
JMP_G\467\A\xy=\//f>g
JMP_LE\468\A\xy=\//f<=g
JMP_GE\469\A\xy=\//f>=g
CMP_EQ\470\-\xy=b\//f==g
CMP_NE\471\-\xy=b\//f!=g
CMP_L\472\-\xy=b\//f<g
CMP_G\473\-\xy=b\//f>g
CMP_LE\474\-\xy=b\//f<=g
CMP_GE\475\-\xy=b\//f>=g
SHL\476\-\xy=z\//shift left
SHR\477\-\xy=z\//shift right
INC2\478\-\v=w\//increment
DEC2\479\-\v=w\//decrement
EXCH_WXYZ\480\-\wxyz=wxyz\//
EXCH_WXZY\481\-\wxyz=wxzy\//
EXCH_WYXZ\482\-\wxyz=wyxz\//
EXCH_WYZX\483\-\wxyz=wyzx\//
EXCH_WZXY\484\-\wxyz=wzxy\//
EXCH_WZYX\485\-\wxyz=wzyx\//
EXCH_XWYZ\486\-\wxyz=xwyz\//
EXCH_XWZY\487\-\wxyz=xwzy\//
EXCH_XYWZ\488\-\wxyz=xywz\//
EXCH_XYZW\489\-\wxyz=xyz\//
EXCH_XZWY\490\-\wxyz=xzwy\//
EXCH_XZYW\491\-\wxyz=xyz\//
EXCH_YWXZ\492\-\wxyz=wxyz\//
EXCH_YWZX\493\-\wxyz=wxyz\//
EXCH_YXWZ\494\-\wxyz=wxyz\//
EXCH_YXZW\495\-\wxyz=wxyz\//
EXCH_YZWX\496\-\wxyz=wxyz\//
EXCH_YZXW\497\-\wxyz=wxyz\//
EXCH_ZWXY\498\-\wxyz=wxyz\//
EXCH_ZWYX\499\-\wxyz=wxyz\//
EXCH_ZXWY\500\-\wxyz=wxyz\//
EXCH_ZXYW\501\-\wxyz=wxyz\//
EXCH_ZYWX\502\-\wxyz=wxyz\//
EXCH_ZYXW\503\-\wxyz=wxyz\//
SLEEP\504\-\v=v\//sleep (milliseconds)
SLEEP_SV\505\W\=v\//sleep constant (milliseconds)
UNQUOTE\506\-\v=v\//evaluate expression
LOCK_OBJ\507\-\v=\//lock object (generic)
UNLOCK_OBJ\508\-\v=\//unlock object (generic)
BEGIN_PACKAGE\512\SS\=v\//begin package (name, flags)
BEGIN_STRUCT\513\SSS\=v\//begin struct
BEGIN_CLASS\514\SSS\=v\//begin class (name, super, flags)
BEGIN_IFACE\515\SSS\=v\//begin interface
END_PACKAGE\516\-\v=w\//end package
END_STRUCT\517\-\v=w\//end struct
END_CLASS\518\-\v=w\//end class
END_IFACE\519\-\v=w\//end interface
OFFSETOF\520\SS\=i\//offsetof (type, slot)
SIZEOF\521\-\v=i\//sizeof (expression)
SIZEOF_S\522\S\=i\//sizeof (type)
NEWARRAY_S\523\S\i=v\//create a new array
NEWMARRAY_S\524\S\M*=v\//create a new multi-dimensional array
CALL_THIS\525\-\M*=v\//call another constructor in "this"
CALL_SUPER\526\-\M*=v\//call another constructor in "super"
NEW\527\-\M*v=w\//create new object
PUSH_ERROR\528\-\=v\//push related to compiler error
POP_ERROR\529\-\v=\//pop related to compiler error
INSTANCEOF\530\-\vw=b\//check if value is of a given type
LDJMP\531\A\=v\//load a jump-target address
JMPIA\532\-\v=\//jump to an indirect address
EXCH_TOP\533\-\x=y\//swap 'top' with value on stack
CALL_ASYNC\534\-\M*v=v\//call an async block
CALL_IFDEF\535\S\M*v=v\//call a block if S is defined
CALL_IFNDEF\536\S\M*v=v\//call a block if S is not defined
BEGIN_SYNC\537\-\=\//begin critical section
END_SYNC\538\-\=\//end critical section
BEGIN_SYNC_OBJ\539\-\v=\//lock object (via "synchronized")
END_SYNC_OBJ\540\-\v=\//unlock object (via "synchronized")
