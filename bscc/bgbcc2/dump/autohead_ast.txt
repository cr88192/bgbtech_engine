<module lang="C" arch="x86">
  <types>
    <var name="uintptr_t">
      <type flags="1179648" ind="0" name="int"/>
    </var>
    <var name="va_list">
      <type flags="0" ind="1" name="char"/>
    </var>
    <var name="size_t">
      <type flags="1179648" ind="0" name="int"/>
    </var>
    <var name="rsize_t">
      <type flags="1179648" ind="0" name="int"/>
    </var>
    <var name="intptr_t">
      <type flags="1048576" ind="0" name="int"/>
    </var>
    <var name="ptrdiff_t">
      <type flags="1048576" ind="0" name="int"/>
    </var>
    <var name="wchar_t">
      <type flags="131072" ind="0" name="short"/>
    </var>
    <var name="wint_t">
      <type flags="131072" ind="0" name="short"/>
    </var>
    <var name="wctype_t">
      <type flags="131072" ind="0" name="short"/>
    </var>
    <var name="errno_t">
      <type flags="0" ind="0" name="int"/>
    </var>
    <var name="__time32_t">
      <type flags="1048576" ind="0" name="long"/>
    </var>
    <var name="__time64_t">
      <type flags="0" ind="0" name="int64"/>
    </var>
    <var name="time_t">
      <type flags="0" ind="0" name="int64"/>
    </var>
    <var name="pthreadlocinfo">
      <type flags="0" ind="1" name="threadlocaleinfostruct"/>
    </var>
    <var name="pthreadmbcinfo">
      <type flags="0" ind="1" name="threadmbcinfostruct"/>
    </var>
    <var name="_locale_tstruct">
      <type flags="0" ind="0" name="localeinfo_struct"/>
    </var>
    <var name="_locale_t">
      <type flags="0" ind="1" name="localeinfo_struct"/>
    </var>
    <var name="locrefcount">
      <type flags="0" ind="0" name="localerefcount"/>
    </var>
    <var name="threadlocinfo">
      <type flags="0" ind="0" name="threadlocaleinfostruct"/>
    </var>
    <var name="FILE">
      <type flags="0" ind="0" name="_iobuf"/>
    </var>
    <var name="fpos_t">
      <type flags="0" ind="0" name="int64"/>
    </var>
    <var name="_onexit_t">
      <type flags="67108864" ind="1" name="HSG0009ECE8"/>
    </var>
    <var name="div_t">
      <type flags="0" ind="0" name="_div_t"/>
    </var>
    <var name="ldiv_t">
      <type flags="0" ind="0" name="_ldiv_t"/>
    </var>
    <var name="lldiv_t">
      <type flags="0" ind="0" name="_lldiv_t"/>
    </var>
    <var name="_LDOUBLE">
      <type flags="0" ind="0" name="HTX0151DFF4"/>
    </var>
    <var name="_CRT_DOUBLE">
      <type flags="0" ind="0" name="HTX881DB926"/>
    </var>
    <var name="_CRT_FLOAT">
      <type flags="0" ind="0" name="HTX157A91A7"/>
    </var>
    <var name="_LONGDOUBLE">
      <type flags="0" ind="0" name="HTXD08B7666"/>
    </var>
    <var name="_LDBL12">
      <type flags="0" ind="0" name="HTXCB1F3AA9"/>
    </var>
    <var name="_purecall_handler">
      <type flags="67108864" ind="1" name="HSG0009ECF5"/>
    </var>
    <var name="_invalid_parameter_handler">
      <type flags="67108864" ind="1" name="HSGB91CB661"/>
    </var>
  </types>
  <structs>
    <struct name="threadlocaleinfostruct" flags="0">
      <body>
        <vars fn="crtdefs.h" ln="2093">
          <var name="refcount">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2094">
          <var name="lc_codepage">
            <type flags="131072" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2095">
          <var name="lc_collate_cp">
            <type flags="131072" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2096">
          <var name="lc_time_cp">
            <type flags="131072" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2097">
          <var name="lc_category">
            <type flags="0" ind="0" name="localerefcount">
              <size>
                <int value="6"/>
              </size>
            </type>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2098">
          <var name="lc_clike">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2099">
          <var name="mb_cur_max">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2100">
          <var name="lconv_intl_refcount">
            <type flags="0" ind="1" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2101">
          <var name="lconv_num_refcount">
            <type flags="0" ind="1" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2102">
          <var name="lconv_mon_refcount">
            <type flags="0" ind="1" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2103">
          <var name="lconv">
            <type flags="0" ind="1" name="lconv"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2104">
          <var name="ctype1_refcount">
            <type flags="0" ind="1" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2105">
          <var name="ctype1">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2106">
          <var name="pctype">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2107">
          <var name="pclmap">
            <type flags="655360" ind="1" name="char"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2108">
          <var name="pcumap">
            <type flags="655360" ind="1" name="char"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2109">
          <var name="lc_time_curr">
            <type flags="0" ind="1" name="__lc_time_data"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2110">
          <var name="locale_name">
            <type flags="131072" ind="1" name="short">
              <size>
                <int value="6"/>
              </size>
            </type>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="threadmbcinfostruct" flags="0"/>
    <struct name="__lc_time_data" flags="0"/>
    <struct name="localeinfo_struct" flags="0">
      <body>
        <vars fn="crtdefs.h" ln="2080">
          <var name="locinfo">
            <type flags="0" ind="1" name="threadlocaleinfostruct"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2081">
          <var name="mbcinfo">
            <type flags="0" ind="1" name="threadmbcinfostruct"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="localerefcount" flags="0">
      <body>
        <vars fn="crtdefs.h" ln="2086">
          <var name="locale">
            <type flags="0" ind="1" name="char"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2087">
          <var name="wlocale">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2088">
          <var name="refcount">
            <type flags="0" ind="1" name="int"/>
          </var>
        </vars>
        <vars fn="crtdefs.h" ln="2089">
          <var name="wrefcount">
            <type flags="0" ind="1" name="int"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="lconv" flags="0"/>
    <struct name="_iobuf" flags="0">
      <body>
        <vars fn="stdio.h" ln="64">
          <var name="_ptr">
            <type flags="0" ind="1" name="char"/>
          </var>
        </vars>
        <vars fn="stdio.h" ln="65">
          <var name="_cnt">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="stdio.h" ln="66">
          <var name="_base">
            <type flags="0" ind="1" name="char"/>
          </var>
        </vars>
        <vars fn="stdio.h" ln="67">
          <var name="_flag">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="stdio.h" ln="68">
          <var name="_file">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="stdio.h" ln="69">
          <var name="_charbuf">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="stdio.h" ln="70">
          <var name="_bufsiz">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="stdio.h" ln="71">
          <var name="_tmpfname">
            <type flags="0" ind="1" name="char"/>
          </var>
        </vars>
      </body>
    </struct>
    <func name="HSG0009ECE8" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args/>
    </func>
    <func name="HSG0009ECE8" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args/>
    </func>
    <struct name="_div_t" flags="0">
      <body>
        <vars fn="stdlib.h" ln="76">
          <var name="quot">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
        <vars fn="stdlib.h" ln="77">
          <var name="rem">
            <type flags="0" ind="0" name="int"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="_ldiv_t" flags="0">
      <body>
        <vars fn="stdlib.h" ln="81">
          <var name="quot">
            <type flags="0" ind="0" name="long"/>
          </var>
        </vars>
        <vars fn="stdlib.h" ln="82">
          <var name="rem">
            <type flags="0" ind="0" name="long"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="_lldiv_t" flags="0">
      <body>
        <vars fn="stdlib.h" ln="86">
          <var name="quot">
            <type flags="0" ind="0" name="llong"/>
          </var>
        </vars>
        <vars fn="stdlib.h" ln="87">
          <var name="rem">
            <type flags="0" ind="0" name="llong"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="HTX0151DFF4" flags="0">
      <body>
        <vars fn="autohead.c" ln="104">
          <var name="ld">
            <type flags="131072" ind="0" name="char">
              <size>
                <int value="10"/>
              </size>
            </type>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="HTX881DB926" flags="0">
      <body>
        <vars fn="autohead.c" ln="123">
          <var name="x">
            <type flags="0" ind="0" name="double"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="HTX157A91A7" flags="0">
      <body>
        <vars fn="autohead.c" ln="127">
          <var name="f">
            <type flags="0" ind="0" name="float"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="HTXD08B7666" flags="0">
      <body>
        <vars fn="autohead.c" ln="138">
          <var name="x">
            <type flags="0" ind="0" name="double"/>
          </var>
        </vars>
      </body>
    </struct>
    <struct name="HTXCB1F3AA9" flags="0">
      <body>
        <vars fn="autohead.c" ln="145">
          <var name="ld12">
            <type flags="131072" ind="0" name="char">
              <size>
                <int value="12"/>
              </size>
            </type>
          </var>
        </vars>
      </body>
    </struct>
    <func name="HSG0009ECF5" flags="0" ind="0">
      <type name="void" flags="0" ind="0"/>
      <args/>
    </func>
    <func name="HSG0009ECF5" flags="0" ind="0">
      <type name="void" flags="0" ind="0"/>
      <args/>
    </func>
    <func name="HSGB91CB661" flags="0" ind="0">
      <type name="void" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var>
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var>
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var>
          <type name="int" flags="131072" ind="0"/>
        </var>
        <var>
          <type flags="1179648" ind="0" name="int"/>
        </var>
      </args>
    </func>
    <func name="HSGB91CB661" flags="0" ind="0">
      <type name="void" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var>
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var>
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var>
          <type name="int" flags="131072" ind="0"/>
        </var>
        <var>
          <type flags="1179648" ind="0" name="int"/>
        </var>
      </args>
    </func>
    <func name="HSG0009ECF5" flags="0" ind="0">
      <type name="void" flags="0" ind="0"/>
      <args/>
    </func>
    <func name="HSG0009ECF5" flags="0" ind="0">
      <type name="void" flags="0" ind="0"/>
      <args/>
    </func>
    <func name="HSG52F8095A" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="0" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
    <func name="HSG52F8095A" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="0" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
    <func name="HSGAF5FFB34" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
    <func name="HSGAF5FFB34" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
    <func name="HSG52F8095A" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="0" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
    <func name="HSG52F8095A" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="0" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
    <func name="HSGAF5FFB34" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
    <func name="HSGAF5FFB34" flags="0" ind="0">
      <type name="int" flags="0" ind="0"/>
      <args>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
        <var>
          <type flags="524288" ind="1" name="void"/>
        </var>
      </args>
    </func>
  </structs>
  <body>
    <blockcomment value="**&#10;*stdio.h - definitions/declarations for standard I/O routines&#10;*&#10;* &#32;&#32;&#32;&#32;&#32;&#32;Copyright (c) Microsoft Corporation. All rights reserved.&#10;*&#10;*Purpose:&#10;* &#32;&#32;&#32;&#32;&#32;&#32;This file defines the structures, values, macros, and functions&#10;* &#32;&#32;&#32;&#32;&#32;&#32;used by the level 2 I/O (&quot;standard I/O&quot;) routines.&#10;* &#32;&#32;&#32;&#32;&#32;&#32;[ANSI/System V]&#10;*&#10;* &#32;&#32;&#32;&#32;&#32;&#32;[Public]&#10;*&#10;***" fn="vadefs.h" ln="50"/>
    <blockcomment value="**&#10;*crtdefs.h - definitions/declarations common to all CRT&#10;*&#10;* &#32;&#32;&#32;&#32;&#32;&#32;Copyright (c) Microsoft Corporation. All rights reserved.&#10;*&#10;*Purpose:&#10;* &#32;&#32;&#32;&#32;&#32;&#32;This file has mostly defines used by the entire CRT.&#10;*&#10;* &#32;&#32;&#32;&#32;&#32;&#32;[Public]&#10;*&#10;***" fn="vadefs.h" ln="50"/>
    <blockcomment value="**&#10;*sal.h - markers for documenting the semantics of APIs&#10;*&#10;* &#32;&#32;&#32;&#32;&#32;&#32;Copyright (c) Microsoft Corporation. All rights reserved.&#10;*&#10;*Purpose:&#10;* &#32;&#32;&#32;&#32;&#32;&#32;sal.h provides a set of annotations to describe how a function uses its&#10;* &#32;&#32;&#32;&#32;&#32;&#32;parameters - the assumptions it makes about them, and the guarantees it makes&#10;* &#32;&#32;&#32;&#32;&#32;&#32;upon finishing.&#10;*&#10;* &#32;&#32;&#32;&#32;&#32;&#32;[Public]&#10;*&#10;***" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;choose attribute or __declspec implementation" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Disable expansion of SAL macros in non-Prefast mode to " fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;improve compiler throughput." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;safeguard for MIDL and RC builds" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Special enum type for Y/N/M" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Some annotations aren&apos;t officially SAL2 yet." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Some annotations aren&apos;t officially SAL2 yet." fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;Structural SAL:" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;These annotations modify the use of other annotations. &#32;They may" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;express the annotation target (i.e. what parameter/field the annotation" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;applies to) or the condition under which the annotation is applicable." fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_At_(target, annos) specifies that the annotations listed in &apos;annos&apos; is to" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;be applied to &apos;target&apos; rather than to the identifier which is the current" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;lexical target." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_At_buffer_(target, iter, bound, annos) is similar to _At_, except that" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;target names a buffer, and each annotation in annos is applied to each" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;element of target up to bound, with the variable named in iter usable" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;by the annotations to refer to relevant offsets within target." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_When_(expr, annos) specifies that the annotations listed in &apos;annos&apos; only" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;apply when &apos;expr&apos; evaluates to non-zero." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&lt;expr&gt; indicates whether normal post conditions apply to a function" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&lt;expr&gt; indicates whether post conditions apply to a function returning" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;the type that this annotation is applied to" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Establish postconditions that apply only if the function does not succeed" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Establish postconditions that apply in both success and failure cases." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Only applicable with functions that have &#32;_Success_ or _Return_type_succss_." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Usable on a function defintion. Asserts that a function declaration is" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;in scope, and its annotations are to be used. There are no other annotations" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;allowed on the function definition." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Notref_ may precede a _Deref_ or &quot;real&quot; annotation, and removes one" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;level of dereference if the parameter is a C++ reference (&amp;). &#32;If the" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;net deref on a &quot;real&quot; annotation is negative, it is simply discarded." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for defensive programming styles." fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;_In_\_Out_ Layer:" fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Reserved pointer parameters, must always be NULL." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Const_ allows specification that any namable memory location is considered" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;readonly for a given call." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Input parameters --------------------------" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;_In_ - Annotations for parameters where data is passed into the function, but not modified." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_In_ by itself can be used with non-pointer types (although it is redundant)." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void SetPoint( _In_ const POINT* pPT );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;nullterminated &apos;in&apos; parameters." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void CopyStr( _In_z_ const char* szFrom, _Out_z_cap_(cchTo) char* szTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&apos;input&apos; buffers with given size" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&apos;input&apos; buffers valid to the given end pointer" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Output parameters --------------------------" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;_Out_ - Annotations for pointer or reference parameters where data passed back to the caller." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;These are mostly used where the pointer/reference is to a non-pointer type." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Outptr_/_Outref) (see below) are typically used to return pointers via parameters." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void GetPoint( _Out_ POINT* pPT );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Inout parameters ----------------------------" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;_Inout_ - Annotations for pointer or reference parameters where data is passed in and" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;potentially modified." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void ModifyPoint( _Inout_ POINT* pPT );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void ModifyPointByRef( _Inout_ POINT&amp; pPT );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;For modifying string buffers" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;void toupper( _Inout_z_ char* sz );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;For modifying buffers with explicit element size" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;For modifying buffers with explicit byte size" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Pointer to pointer parameters -------------------------" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;_Outptr_ - Annotations for output params returning pointers" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;These describe parameters where the called function provides the buffer:" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HRESULT SHStrDupW(_In_ LPCWSTR psz, _Outptr_ LPWSTR *ppwsz);" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;The caller passes the address of an LPWSTR variable as ppwsz, and SHStrDupW allocates" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;and initializes memory and returns the pointer to the new LPWSTR in *ppwsz." fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;_Outptr_opt_ - describes parameters that are allowed to be NULL." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;_Outptr_*_result_maybenull_ - describes parameters where the called function might return NULL to the caller." fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;Example:" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;void MyFunc(_Outptr_opt_ int **ppData1, _Outptr_result_maybenull_ int **ppData2);" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;Callers:" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;MyFunc(NULL, NULL); &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;// error: parameter 2, ppData2, should not be NULL" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;MyFunc(&amp;pData1, &amp;pData2); &#32;&#32;&#32;&#32;// ok: both non-NULL" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;&#32;&#32;&#32;if (*pData1 == *pData2) ... &#32;&#32;// error: pData2 might be NULL after call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for _Outptr_ parameters returning pointers to null terminated strings." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for _Outptr_ parameters where the output pointer is set to NULL if the function fails. " fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for _Outptr_ parameters which return a pointer to a ref-counted COM object," fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;following the COM convention of setting the output to NULL on failure." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;The current implementation is identical to _Outptr_result_nullonfailure_." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;For pointers to types that are not COM objects, _Outptr_result_nullonfailure_ is preferred." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for _Outptr_ parameters returning a pointer to buffer with a specified number of elements/bytes" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for output reference to pointer parameters." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for output reference to pointer parameters that guarantee" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;that the pointer is set to NULL on failure." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Generic annotations to set output value of a by-pointer or by-reference parameter to null/zero on failure." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;return values -------------------------------" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Ret_ annotations" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;describing conditions that hold for return values after the call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. _Ret_z_ CString::operator const wchar_t*() const throw();" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;used with allocated but not yet initialized objects" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;used with allocated and initialized objects" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;returns single valid object" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;returns pointer to initialized buffer of specified size" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;&#32;returns pointer to partially initialized buffer, with total size &apos;size&apos; and initialized size &apos;count&apos;" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations for strict type checking" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Check the return value of a function e.g. _Check_return_ ErrorCode Foo();" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. MyPrintF( _Printf_format_string_ const wchar_t* wzFormat, ... );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;annotations to express value of integral or pointer parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;annotation to express that a value (usually a field of a mutable class)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;is not changed by a function call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations to allow expressing generalized pre and post conditions." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&apos;cond&apos; may be any valid SAL expression that is considered to be true as a precondition" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;or postcondition (respsectively)." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Annotations to express struct, class and field invariants" fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;_Pre_\_Post_ Layer:" fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Raw Pre/Post for declaring custom pre/post conditions" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Validity property" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Buffer size properties" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Expressing buffer sizes without specifying pre or post condition" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Expressing buffer size as pre or post condition" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Pointer null-ness properties" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Pre_ annotations ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;describing conditions that must be met before the call of the function" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. int strlen( _Pre_z_ const char* sz );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer is a zero terminated string" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;valid size unknown or indicated by type (e.g.:LPSTR)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Overrides recursive valid when some field is not yet initialized when using _Inout_" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;used with allocated but not yet initialized objects" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Post_ annotations ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;describing conditions that hold after the function call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;void CopyStr( _In_z_ const char* szFrom, _Pre_cap_(cch) _Post_z_ char* szFrom, size_t cchFrom );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer will be a zero-terminated string after the call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. HRESULT InitStruct( _Post_valid_ Struct* pobj );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void free( _Post_ptr_invalid_ void* pv );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void ThrowExceptionIfNull( _Post_notnull_ const void* pv );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. HRESULT GetObject(_Outptr_ _On_failure_(_At_(*p, _Post_null_)) T **p);" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void SetCharRange( _In_count_(cch) const char* rgch, size_t cch )" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;valid buffer extent described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;valid buffer extent described by a constant extression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;nullterminated &#32;&apos;input&apos; buffers with given size" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void SetCharRange( _In_count_(cch) const char* rgch, size_t cch )" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;nullterminated valid buffer extent described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;nullterminated valid buffer extent described by a constant extression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another pointer" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void Foo( _In_ptrdiff_count_(pchMax) const char* pch, const char* pchMax ) { while pch &lt;&#32;pchMax ) pch++; }" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&apos;x&apos; version for complex expressions that are not supported by the current compiler version" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void Set3ColMatrix( _In_count_x_(3*cRows) const Elem* matrix, int cRows );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&apos;out&apos; with buffer size" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void GetIndeces( _Out_cap_(cIndeces) int* rgIndeces, size_t cIndices );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another parameter multiplied by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another pointer" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void Foo( _Out_ptrdiff_cap_(pchMax) char* pch, const char* pchMax ) { while pch &lt;&#32;pchMax ) pch++; }" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a complex expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;a zero terminated string is filled into a buffer of given capacity" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void CopyStr( _In_z_ const char* szFrom, _Out_z_cap_(cchTo) char* szTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a complex expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;a zero terminated string is filled into a buffer of given capacity" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. size_t CopyCharRange( _In_count_(cchFrom) const char* rgchFrom, size_t cchFrom, _Out_cap_post_count_(cchTo,return)) char* rgchTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;a zero terminated string is filled into a buffer of given capacity" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. size_t CopyStr( _In_z_ const char* szFrom, _Out_z_cap_post_count_(cchTo,return+1) char* szTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;only use with dereferenced arguments e.g. &apos;*pcch&apos; " fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. GetString( _Out_z_capcount_(*pLen+1) char* sz, size_t* pLen );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&apos;inout&apos; buffers with initialized elements before and after the call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void ModifyIndices( _Inout_count_(cIndices) int* rgIndeces, size_t cIndices );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;nullterminated &apos;inout&apos; buffers with initialized elements before and after the call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void ModifyIndices( _Inout_count_(cIndices) int* rgIndeces, size_t cIndices );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void AppendToLPSTR( _In_ LPCSTR szFrom, _Inout_cap_(cchTo) LPSTR* szTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;inout string buffers with writable size" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void AppendStr( _In_z_ const char* szFrom, _Inout_z_cap_(cchTo) char* szTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;returning pointers to valid objects" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;annotations to express &apos;boundedness&apos; of integral value parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. &#32;HRESULT HrCreatePoint( _Deref_out_opt_ POINT** ppPT );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. &#32;void CloneString( _In_z_ const wchar_t* wzFrom, _Deref_out_z_ wchar_t** pWzTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Deref_pre_ ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;describing conditions for array elements of dereferenced pointer parameters that must be met before the call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void SaveStringArray( _In_count_(cStrings) _Deref_pre_z_ const wchar_t* const rgpwch[] );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void FillInArrayOfStr32( _In_count_(cStrings) _Deref_pre_cap_c_(32) _Deref_post_z_ wchar_t* const rgpwch[] );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a complex condition" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;convenience macros for nullterminated buffers with given capacity" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;known capacity and valid but unknown readable extent" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void SaveMatrix( _In_count_(n) _Deref_pre_count_(n) const Elem** matrix, size_t n ); " fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;valid buffer extent is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;valid buffer extent is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;valid buffer extent is described by a complex expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void PrintStringArray( _In_count_(cElems) _Deref_pre_valid_ LPCSTR rgStr[], size_t cElems );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;restrict access rights" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Deref_post_ ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;describing conditions for array elements or dereferenced pointer parameters that hold after the call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void CloneString( _In_z_ const Wchar_t* wzIn _Out_ _Deref_post_z_ wchar_t** pWzOut );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. HRESULT HrAllocateMemory( size_t cb, _Out_ _Deref_post_bytecap_(cb) void** ppv );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a complex expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;convenience macros for nullterminated buffers with given capacity" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;known capacity and valid but unknown readable extent" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. HRESULT HrAllocateZeroInitializedMemory( size_t cb, _Out_ _Deref_post_bytecount_(cb) void** ppv );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;valid buffer extent is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by a complex expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void GetStrings( _Out_count_(cElems) _Deref_post_valid_ LPSTR const rgStr[], size_t cElems );" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Deref_ret_ ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;special _Deref_ ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Ret_ ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. _Ret_opt_valid_ LPSTR void* CloneSTR( _Pre_valid_ LPSTR src );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. _Ret_opt_bytecap_(cb) void* AllocateMemory( size_t cb );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Buffer capacity is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Buffer capacity is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Buffer capacity is described by a complex condition" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;return value is nullterminated and capacity is given by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. _Ret_opt_bytecount_(cb) void* AllocateZeroInitializedMemory( size_t cb );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Valid Buffer extent is described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Valid Buffer extent is described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Valid Buffer extent is described by a complex expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;return value is nullterminated and length is given by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Pre_ annotations ---" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;restrict access rights" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void FreeMemory( _Pre_bytecap_(cb) _Post_ptr_invalid_ void* pv, size_t cb );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity is described by another parameter multiplied by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity described by size of other buffer, only used by dangerous legacy APIs" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. int strcpy(_Pre_cap_for_(src) char* dst, const char* src);" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity described by a complex condition" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer capacity described by the difference to another pointer parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void AppendStr( _Pre_z_ const char* szFrom, _Pre_z_cap_(cchTo) _Post_z_ char* szTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;known capacity and valid but unknown readable extent" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. void AppendCharRange( _Pre_count_(cchFrom) const char* rgFrom, size_t cchFrom, _Out_z_cap_(cchTo) char* szTo, size_t cchTo );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Valid buffer extent described by another parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Valid buffer extent described by a constant expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Valid buffer extent described by a complex expression" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Valid buffer extent described by the difference to another pointer parameter" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;char * strncpy(_Out_cap_(_Count) _Post_maybez_ char * _Dest, _In_z_ const char * _Source, _In_ size_t _Count)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;buffer maybe zero-terminated after the call" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. SIZE_T HeapSize( _In_ HANDLE hHeap, DWORD dwFlags, _Pre_notnull_ _Post_bytecap_(return) LPCVOID lpMem );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. int strlen( _In_z_ _Post_count_(return+1) const char* sz );" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;e.g. size_t CopyStr( _In_z_ const char* szFrom, _Pre_cap_(cch) _Post_z_count_(return+1) char* szFrom, size_t cchFrom );" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Prepost_ ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;describing conditions that hold before and after the function call" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Deref_&lt;both&gt; ---" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;short version for _Deref_pre_&lt;ann&gt; _Deref_post_&lt;ann&gt;" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;describing conditions for array elements or dereferenced pointer parameters that hold before and after the call" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_Deref_&lt;miscellaneous&gt;" fn="vadefs.h" ln="50"/>
    <linecomment value="" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;used with references to arrays" fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;&#32;&#32;Implementation Layer:" fn="vadefs.h" ln="50"/>
    <linecomment value="============================================================================" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Naming conventions:" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;A symbol the begins with _SA_ is for the machinery of creating any" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;annotations; many of those come from sourceannotations.h in the case" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;of attributes." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;A symbol that ends with _impl is the very lowest level macro. &#32;It is" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;not required to be a legal standalone annotation, and in the case" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;of attribute annotations, usually is not. &#32;(In the case of some declspec" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;annotations, it might be, but it should not be assumed so.) &#32;Those" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;symols will be used in the _PreN..., _PostN... and _RetN... annotations " fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;to build up more complete annotations." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;A symbol ending in _impl_ is reserved to the implementation as well," fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;but it does form a complete annotation; usually they are used to build" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;up even higher level annotations." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Sharable &quot;_impl&quot; macros: these can be shared between the various annotation" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;forms but are part of the implementation of the macros. &#32;These are collected" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;here to assure that only necessary differences in the annotations" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;exist." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;The following are for the implementation machinery, and are not" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;suitable for annotating general code." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;We&apos;re tying to phase this out, someday. &#32;The parser quotes the param." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Normally the parser does some simple type checking of annotation params," fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;defer that check to the plugin." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Using attributes for sal" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Declare a function to be an annotation or primop (respectively)." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Done this way so that they don&apos;t appear in the regular compiler&apos;s" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;namespace." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Benign declspec needed here for WindowsPREfast" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Using declspecs for sal" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Declare a function to be an annotation or primop (respectively)." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Done this way so that they don&apos;t appear in the regular compiler&apos;s" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;namespace." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Using &quot;nothing&quot; for sal" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Declare annotations that need to be declared." fn="vadefs.h" ln="50"/>
    <linecomment value="??? resolve with PFD" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Only appears in model files, but needs to be declared." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;To be declared well-known soon." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;For SAL2, we need to expect general expressions." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;this is a special case!" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Obsolete -- may be needed for transition to attributes." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_SA_annotes1(SAL_null, __yes)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_SA_annotes1(SAL_null, __no)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_SA_annotes1(SAL_null, __maybe)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_SA_annotes1(SAL_valid, __yes)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_SA_annotes1(SAL_valid, __no)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;_SA_annotes1(SAL_valid, __maybe)" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;this is a special case!" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;minimum attribute expansion for foreground build" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;!__cplusplus // ][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;!__cplusplus // ]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="[__P_impl(__d_=0)]" fn="vadefs.h" ln="50"/>
    <linecomment value="[__P_impl(__d_=0)]" fn="vadefs.h" ln="50"/>
    <linecomment value="[__P_impl(__d_=0)]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;Obsolete -- may be needed for transition to attributes." fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;This section contains the deprecated annotations" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;][" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;]" fn="vadefs.h" ln="50"/>
    <linecomment value="&#32;[" fn="vadefs.h" ln="50"/>
    <vars fn="crtdefs.h" ln="637">
      <proto name="_invalid_parameter_noinfo">
        <type flags="67108864" ind="0" name="void"/>
        <args/>
      </proto>
    </vars>
    <vars fn="crtdefs.h" ln="638">
      <proto name="_invalid_parameter_noinfo_noreturn">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="noreturn"/>
          </declspec>
        </type>
        <args/>
      </proto>
    </vars>
    <vars fn="crtdefs.h" ln="641">
      <proto name="_invoke_watson">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="noreturn"/>
          </declspec>
        </type>
        <args>
          <var>
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var>
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var>
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var>
            <type name="int" flags="131072" ind="0"/>
          </var>
          <var>
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="crtdefs.h" ln="2072"/>
    <vars fn="crtdefs.h" ln="2073"/>
    <vars fn="crtdefs.h" ln="2076"/>
    <vars fn="stdio.h" ln="63"/>
    <vars fn="stdio.h" ln="137">
      <proto name="__iob_func">
        <type flags="67108864" ind="1" name="_iobuf"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="175">
      <proto name="_filbuf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="176">
      <proto name="_flsbuf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="178">
      <proto name="_fsopen">
        <type flags="67108864" ind="1" name="_iobuf"/>
        <args>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Mode">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ShFlag">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="180">
      <proto name="clearerr">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="182">
      <proto name="clearerr_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="184">
      <proto name="fclose">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="185">
      <proto name="_fcloseall">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="187">
      <proto name="_fdopen">
        <type flags="67108864" ind="1" name="_iobuf"/>
        <args>
          <var name="_FileHandle">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Mode">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="189">
      <proto name="feof">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="190">
      <proto name="ferror">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="191">
      <proto name="fflush">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="192">
      <proto name="fgetc">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="193">
      <proto name="_fgetchar">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="194">
      <proto name="fgetpos">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Pos">
            <type flags="0" ind="1" name="int64"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="195">
      <proto name="fgets">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Buf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="197">
      <proto name="_fileno">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="204">
      <proto name="_tempnam">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_DirName">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_FilePrefix">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="210">
      <proto name="_flushall">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="211">
      <proto name="fopen">
        <type flags="67108864" ind="1" name="_iobuf">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Mode">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="213">
      <proto name="fopen_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="2" name="_iobuf"/>
          </var>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Mode">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="215">
      <proto name="fprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="217">
      <proto name="fprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="219">
      <proto name="fputc">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="220">
      <proto name="_fputchar">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="221">
      <proto name="fputs">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="222">
      <proto name="fread">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_ElementSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="224">
      <proto name="fread_s">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_ElementSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="226">
      <proto name="freopen">
        <type flags="67108864" ind="1" name="_iobuf">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Mode">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="228">
      <proto name="freopen_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="2" name="_iobuf"/>
          </var>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Mode">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_OldFile">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="230">
      <proto name="fscanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="231">
      <proto name="_fscanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="235">
      <proto name="fscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="237">
      <proto name="_fscanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="239">
      <proto name="fsetpos">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Pos">
            <type flags="524288" ind="1" name="int64"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="240">
      <proto name="fseek">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Offset">
            <type flags="0" ind="0" name="long"/>
          </var>
          <var name="_Origin">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="241">
      <proto name="ftell">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="243">
      <proto name="_fseeki64">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Offset">
            <type flags="0" ind="0" name="int64"/>
          </var>
          <var name="_Origin">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="244">
      <proto name="_ftelli64">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="246">
      <proto name="fwrite">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="247">
      <proto name="getc">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="248">
      <proto name="getchar">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="249">
      <proto name="_getmaxstdio">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="251">
      <proto name="gets_s">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Buf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="254">
      <proto name="gets">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using gets_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Buffer">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="255">
      <proto name="_getw">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="258">
      <proto name="perror">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_ErrMsg">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="261">
      <proto name="_pclose">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="262">
      <proto name="_popen">
        <type flags="67108864" ind="1" name="_iobuf"/>
        <args>
          <var name="_Command">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Mode">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="264">
      <proto name="printf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="266">
      <proto name="printf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="268">
      <proto name="putc">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="269">
      <proto name="putchar">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="270">
      <proto name="puts">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="271">
      <proto name="_putw">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Word">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="274">
      <proto name="remove">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="275">
      <proto name="rename">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_OldFilename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_NewFilename">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="276">
      <proto name="_unlink">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="281">
      <proto name="rewind">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="282">
      <proto name="_rmtmp">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="283">
      <proto name="scanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="284">
      <proto name="_scanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="288">
      <proto name="scanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="290">
      <proto name="_scanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="292">
      <proto name="setbuf">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Buffer">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="293">
      <proto name="_setmaxstdio">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Max">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="294">
      <proto name="_set_output_format">
        <type flags="67239936" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="131072" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="295">
      <proto name="_get_output_format">
        <type flags="67239936" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="296">
      <proto name="setvbuf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Buf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Mode">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="297">
      <proto name="_snprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="300">
      <proto name="sprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="303">
      <proto name="_scprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="304">
      <proto name="sscanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="305">
      <proto name="_sscanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="309">
      <proto name="sscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="311">
      <proto name="_sscanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="312">
      <proto name="_snscanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="313">
      <proto name="_snscanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="314">
      <proto name="_snscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="315">
      <proto name="_snscanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="317">
      <proto name="tmpfile">
        <type flags="67108864" ind="1" name="_iobuf">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="319">
      <proto name="tmpfile_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="2" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="320">
      <proto name="tmpnam_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="323">
      <proto name="tmpnam">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Buffer">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="324">
      <proto name="ungetc">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="325">
      <proto name="vfprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="326">
      <proto name="vfscanf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="328">
      <proto name="vfprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="329">
      <proto name="vfscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="331">
      <proto name="vprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="332">
      <proto name="vscanf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="334">
      <proto name="vprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="335">
      <proto name="vscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="337">
      <proto name="vsnprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="339">
      <proto name="vsnprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="342">
      <proto name="_vsnprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="346">
      <proto name="_snprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="346">
      <proto name="_vsnprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Args">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="349">
      <proto name="vsprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="351">
      <proto name="vsscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="356">
      <proto name="sprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="356">
      <proto name="vsprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Args">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="357">
      <proto name="vsscanf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_srcBuf">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="359">
      <proto name="_vscprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="360">
      <proto name="_snprintf_c">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="361">
      <proto name="_vsnprintf_c">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="363">
      <proto name="_fprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="364">
      <proto name="_printf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="365">
      <proto name="_sprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="366">
      <proto name="_vfprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="367">
      <proto name="_vprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="368">
      <proto name="_vsprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="369">
      <proto name="_scprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="370">
      <proto name="_vscprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="371">
      <proto name="_set_printf_count_output">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="372">
      <proto name="_get_printf_count_output">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="374">
      <proto name="_printf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="375">
      <proto name="_printf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="376">
      <proto name="_printf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="377">
      <proto name="_vprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="378">
      <proto name="_vprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="379">
      <proto name="_vprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="381">
      <proto name="_fprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="382">
      <proto name="_fprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="383">
      <proto name="_fprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="384">
      <proto name="_vfprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="385">
      <proto name="_vfprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="386">
      <proto name="_vfprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="388">
      <proto name="_sprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="389">
      <proto name="_sprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="390">
      <proto name="_sprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="391">
      <proto name="_vsprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var>
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="392">
      <proto name="_vsprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="393">
      <proto name="_vsprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="395">
      <proto name="_scprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="396">
      <proto name="_scprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="397">
      <proto name="_vscprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="398">
      <proto name="_vscprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="400">
      <proto name="_snprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="401">
      <proto name="_snprintf_c_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="402">
      <proto name="_snprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="403">
      <proto name="_vsnprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="404">
      <proto name="_vsnprintf_c_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var>
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="405">
      <proto name="_vsnprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="415">
      <proto name="_wfsopen">
        <type flags="67108864" ind="1" name="_iobuf"/>
        <args>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Mode">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ShFlag">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="417">
      <proto name="fgetwc">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="418">
      <proto name="_fgetwchar">
        <type flags="67239936" ind="0" name="short"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="419">
      <proto name="fputwc">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="420">
      <proto name="_fputwchar">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="421">
      <proto name="getwc">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="422">
      <proto name="getwchar">
        <type flags="67239936" ind="0" name="short"/>
        <args/>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="423">
      <proto name="putwc">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="424">
      <proto name="putwchar">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="425">
      <proto name="ungetwc">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="427">
      <proto name="fgetws">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="428">
      <proto name="fputws">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="429">
      <proto name="_getws_s">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="431">
      <proto name="_getws">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _getws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="432">
      <proto name="_putws">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="434">
      <proto name="fwprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="436">
      <proto name="fwprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="438">
      <proto name="wprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="440">
      <proto name="wprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="442">
      <proto name="_scwprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="443">
      <proto name="vfwprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="444">
      <proto name="vfwscanf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="446">
      <proto name="vfwprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="447">
      <proto name="vfwscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="449">
      <proto name="vwprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="450">
      <proto name="vwscanf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="452">
      <proto name="vwprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="453">
      <proto name="vwscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="457">
      <proto name="swprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="461">
      <proto name="vswprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="462">
      <proto name="vswscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="466">
      <proto name="vswscanf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_srcBuf">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="468">
      <proto name="_swprintf_c">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="469">
      <proto name="_vswprintf_c">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="471">
      <proto name="_snwprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="473">
      <proto name="_vsnwprintf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="477">
      <proto name="_snwprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="477">
      <proto name="_vsnwprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Args">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="480">
      <proto name="_fwprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="481">
      <proto name="_wprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="482">
      <proto name="_vfwprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="483">
      <proto name="_vwprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="484">
      <proto name="_swprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="485">
      <proto name="_vswprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="486">
      <proto name="_scwprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="487">
      <proto name="_vscwprintf_p">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="489">
      <proto name="_wprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="490">
      <proto name="_wprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="491">
      <proto name="_wprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="492">
      <proto name="_vwprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="493">
      <proto name="_vwprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="494">
      <proto name="_vwprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="496">
      <proto name="_fwprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="497">
      <proto name="_fwprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="498">
      <proto name="_fwprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="499">
      <proto name="_vfwprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="500">
      <proto name="_vfwprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="501">
      <proto name="_vfwprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="503">
      <proto name="_swprintf_c_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="504">
      <proto name="_swprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="505">
      <proto name="_swprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="506">
      <proto name="_vswprintf_c_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="507">
      <proto name="_vswprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="508">
      <proto name="_vswprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="510">
      <proto name="_scwprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="511">
      <proto name="_scwprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="512">
      <proto name="_vscwprintf_p_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="514">
      <proto name="_snwprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="515">
      <proto name="_snwprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="516">
      <proto name="_vsnwprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="517">
      <proto name="_vsnwprintf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="533">
      <proto name="_swprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="533">
      <proto name="_vswprintf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Args">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="534">
      <proto name="__swprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Plocinfo">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="534">
      <proto name="__vswprintf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Plocinfo">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_Args">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <defun name="swprintf" fn="swprintf.inl" ln="36">
      <type flags="1048584" ind="0" name="int"/>
      <args>
        <var name="_String">
          <type flags="131072" ind="1" name="short"/>
        </var>
        <var name="_Count">
          <type flags="1179648" ind="0" name="int"/>
        </var>
        <var name="_Format">
          <type flags="655360" ind="1" name="short"/>
        </var>
        <rest/>
      </args>
      <body>
        <begin>
          <vars fn="swprintf.inl" ln="38">
            <var name="_Arglist">
              <type flags="0" ind="1" name="char"/>
            </var>
          </vars>
          <vars fn="swprintf.inl" ln="39">
            <var name="_Ret">
              <type flags="0" ind="0" name="int"/>
            </var>
          </vars>
          <assign fn="swprintf.inl" ln="40">
            <left>
              <ref name="_Arglist"/>
            </left>
            <right>
              <binary op="+">
                <left>
                  <cast>
                    <type flags="0" ind="1" name="char"/>
                    <value>
                      <unary op="&amp;">
                        <value>
                          <ref name="_Format"/>
                        </value>
                      </unary>
                    </value>
                  </cast>
                </left>
                <right>
                  <binary op="&amp;">
                    <left>
                      <binary op="-">
                        <left>
                          <binary op="+">
                            <left>
                              <sizeof_expr>
                                <value>
                                  <ref name="_Format"/>
                                </value>
                              </sizeof_expr>
                            </left>
                            <right>
                              <sizeof>
                                <tyexpr>
                                  <var>
                                    <type flags="0" ind="0" name="int"/>
                                  </var>
                                </tyexpr>
                              </sizeof>
                            </right>
                          </binary>
                        </left>
                        <right>
                          <int value="1"/>
                        </right>
                      </binary>
                    </left>
                    <right>
                      <unary op="~">
                        <value>
                          <binary op="-">
                            <left>
                              <sizeof>
                                <tyexpr>
                                  <var>
                                    <type flags="0" ind="0" name="int"/>
                                  </var>
                                </tyexpr>
                              </sizeof>
                            </left>
                            <right>
                              <int value="1"/>
                            </right>
                          </binary>
                        </value>
                      </unary>
                    </right>
                  </binary>
                </right>
              </binary>
            </right>
          </assign>
          <assign fn="swprintf.inl" ln="41">
            <left>
              <ref name="_Ret"/>
            </left>
            <right>
              <funcall name="_vswprintf_c_l">
                <args>
                  <ref name="_String"/>
                  <ref name="_Count"/>
                  <ref name="_Format"/>
                  <cast>
                    <type flags="0" ind="1" name="void"/>
                    <value>
                      <int value="0"/>
                    </value>
                  </cast>
                  <ref name="_Arglist"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="swprintf.inl" ln="42">
            <left>
              <ref name="_Arglist"/>
            </left>
            <right>
              <cast>
                <type flags="0" ind="1" name="char"/>
                <value>
                  <int value="0"/>
                </value>
              </cast>
            </right>
          </assign>
          <return fn="swprintf.inl" ln="43">
            <value>
              <ref name="_Ret"/>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <defun name="vswprintf" fn="swprintf.inl" ln="49">
      <type flags="68157448" ind="0" name="int"/>
      <args>
        <var name="_String">
          <type flags="131072" ind="1" name="short"/>
        </var>
        <var name="_Count">
          <type flags="1179648" ind="0" name="int"/>
        </var>
        <var name="_Format">
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var name="_Ap">
          <type flags="0" ind="1" name="char"/>
        </var>
      </args>
      <body>
        <begin>
          <return fn="swprintf.inl" ln="51">
            <value>
              <funcall name="_vswprintf_c_l">
                <args>
                  <ref name="_String"/>
                  <ref name="_Count"/>
                  <ref name="_Format"/>
                  <cast>
                    <type flags="0" ind="1" name="void"/>
                    <value>
                      <int value="0"/>
                    </value>
                  </cast>
                  <ref name="_Ap"/>
                </args>
              </funcall>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <defun name="_swprintf_l" fn="swprintf.inl" ln="60">
      <type flags="1048584" ind="0" name="int"/>
      <args>
        <var name="_String">
          <type flags="131072" ind="1" name="short"/>
        </var>
        <var name="_Count">
          <type flags="1179648" ind="0" name="int"/>
        </var>
        <var name="_Format">
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var name="_Plocinfo">
          <type flags="0" ind="1" name="localeinfo_struct"/>
        </var>
        <rest/>
      </args>
      <body>
        <begin>
          <vars fn="swprintf.inl" ln="62">
            <var name="_Arglist">
              <type flags="0" ind="1" name="char"/>
            </var>
          </vars>
          <vars fn="swprintf.inl" ln="63">
            <var name="_Ret">
              <type flags="0" ind="0" name="int"/>
            </var>
          </vars>
          <assign fn="swprintf.inl" ln="64">
            <left>
              <ref name="_Arglist"/>
            </left>
            <right>
              <binary op="+">
                <left>
                  <cast>
                    <type flags="0" ind="1" name="char"/>
                    <value>
                      <unary op="&amp;">
                        <value>
                          <ref name="_Plocinfo"/>
                        </value>
                      </unary>
                    </value>
                  </cast>
                </left>
                <right>
                  <binary op="&amp;">
                    <left>
                      <binary op="-">
                        <left>
                          <binary op="+">
                            <left>
                              <sizeof_expr>
                                <value>
                                  <ref name="_Plocinfo"/>
                                </value>
                              </sizeof_expr>
                            </left>
                            <right>
                              <sizeof>
                                <tyexpr>
                                  <var>
                                    <type flags="0" ind="0" name="int"/>
                                  </var>
                                </tyexpr>
                              </sizeof>
                            </right>
                          </binary>
                        </left>
                        <right>
                          <int value="1"/>
                        </right>
                      </binary>
                    </left>
                    <right>
                      <unary op="~">
                        <value>
                          <binary op="-">
                            <left>
                              <sizeof>
                                <tyexpr>
                                  <var>
                                    <type flags="0" ind="0" name="int"/>
                                  </var>
                                </tyexpr>
                              </sizeof>
                            </left>
                            <right>
                              <int value="1"/>
                            </right>
                          </binary>
                        </value>
                      </unary>
                    </right>
                  </binary>
                </right>
              </binary>
            </right>
          </assign>
          <assign fn="swprintf.inl" ln="65">
            <left>
              <ref name="_Ret"/>
            </left>
            <right>
              <funcall name="_vswprintf_c_l">
                <args>
                  <ref name="_String"/>
                  <ref name="_Count"/>
                  <ref name="_Format"/>
                  <ref name="_Plocinfo"/>
                  <ref name="_Arglist"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="swprintf.inl" ln="66">
            <left>
              <ref name="_Arglist"/>
            </left>
            <right>
              <cast>
                <type flags="0" ind="1" name="char"/>
                <value>
                  <int value="0"/>
                </value>
              </cast>
            </right>
          </assign>
          <return fn="swprintf.inl" ln="67">
            <value>
              <ref name="_Ret"/>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <defun name="_vswprintf_l" fn="swprintf.inl" ln="73">
      <type flags="68157448" ind="0" name="int"/>
      <args>
        <var name="_String">
          <type flags="131072" ind="1" name="short"/>
        </var>
        <var name="_Count">
          <type flags="1179648" ind="0" name="int"/>
        </var>
        <var name="_Format">
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var name="_Plocinfo">
          <type flags="0" ind="1" name="localeinfo_struct"/>
        </var>
        <var name="_Ap">
          <type flags="0" ind="1" name="char"/>
        </var>
      </args>
      <body>
        <begin>
          <return fn="swprintf.inl" ln="75">
            <value>
              <funcall name="_vswprintf_c_l">
                <args>
                  <ref name="_String"/>
                  <ref name="_Count"/>
                  <ref name="_Format"/>
                  <ref name="_Plocinfo"/>
                  <ref name="_Ap"/>
                </args>
              </funcall>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <vars fn="stdio.h" ln="555">
      <proto name="_wtempnam">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Directory">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_FilePrefix">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="561">
      <proto name="_vscwprintf">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="562">
      <proto name="_vscwprintf_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <var name="_ArgList">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="563">
      <proto name="fwscanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="564">
      <proto name="_fwscanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="568">
      <proto name="fwscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="570">
      <proto name="_fwscanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="571">
      <proto name="swscanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="572">
      <proto name="_swscanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="574">
      <proto name="swscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="576">
      <proto name="_swscanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="577">
      <proto name="_snwscanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="578">
      <proto name="_snwscanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="579">
      <proto name="_snwscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="580">
      <proto name="_snwscanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="581">
      <proto name="wscanf">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="582">
      <proto name="_wscanf_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="584">
      <proto name="wscanf_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="586">
      <proto name="_wscanf_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Format">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
          <rest/>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="589">
      <proto name="_wfdopen">
        <type flags="67108864" ind="1" name="_iobuf"/>
        <args>
          <var name="_FileHandle">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Mode">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="590">
      <proto name="_wfopen">
        <type flags="67108864" ind="1" name="_iobuf">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Mode">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="591">
      <proto name="_wfopen_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="2" name="_iobuf"/>
          </var>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Mode">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="592">
      <proto name="_wfreopen">
        <type flags="67108864" ind="1" name="_iobuf">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Mode">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_OldFile">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="593">
      <proto name="_wfreopen_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="2" name="_iobuf"/>
          </var>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Mode">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_OldFile">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="597">
      <proto name="_wperror">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_ErrMsg">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="600">
      <proto name="_wpopen">
        <type flags="67108864" ind="1" name="_iobuf"/>
        <args>
          <var name="_Command">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Mode">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="602">
      <proto name="_wremove">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="603">
      <proto name="_wtmpnam_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="605">
      <proto name="_wtmpnam">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Buffer">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="607">
      <proto name="_fgetwc_nolock">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="608">
      <proto name="_fputwc_nolock">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="609">
      <proto name="_ungetwc_nolock">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="670">
      <proto name="_lock_file">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="671">
      <proto name="_unlock_file">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="673">
      <proto name="_fclose_nolock">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="674">
      <proto name="_fflush_nolock">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="675">
      <proto name="_fread_nolock">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_ElementSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="676">
      <proto name="_fread_nolock_s">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_ElementSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="677">
      <proto name="_fseek_nolock">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Offset">
            <type flags="0" ind="0" name="long"/>
          </var>
          <var name="_Origin">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="678">
      <proto name="_ftell_nolock">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="679">
      <proto name="_fseeki64_nolock">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
          <var name="_Offset">
            <type flags="0" ind="0" name="int64"/>
          </var>
          <var name="_Origin">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="680">
      <proto name="_ftelli64_nolock">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="681">
      <proto name="_fwrite_nolock">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="stdio.h" ln="682">
      <proto name="_ungetc_nolock">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_File">
            <type flags="0" ind="1" name="_iobuf"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="170">
      <var name="__mb_cur_max">
        <type flags="262144" ind="0" name="int"/>
      </var>
    </vars>
    <vars fn="autohead.c" ln="175">
      <proto name="___mb_cur_max_func">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="176">
      <proto name="___mb_cur_max_l_func">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var>
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="218">
      <proto name="_set_purecall_handler">
        <type flags="67108864" ind="1" name="HSG0009ECF5"/>
        <args>
          <var name="_Handler">
            <type flags="67108864" ind="1" name="HSG0009ECF5"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="219">
      <proto name="_get_purecall_handler">
        <type flags="67108864" ind="1" name="HSG0009ECF5"/>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="238">
      <proto name="_set_invalid_parameter_handler">
        <type flags="67108864" ind="1" name="HSGB91CB661"/>
        <args>
          <var name="_Handler">
            <type flags="67108864" ind="1" name="HSGB91CB661"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="239">
      <proto name="_get_invalid_parameter_handler">
        <type flags="67108864" ind="1" name="HSGB91CB661"/>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="245">
      <proto name="_errno">
        <type flags="67371008" ind="1" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="248">
      <proto name="_set_errno">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="249">
      <proto name="_get_errno">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="0" ind="1" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="252">
      <proto name="__doserrno">
        <type flags="67239936" ind="1" name="long"/>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="255">
      <proto name="_set_doserrno">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="131072" ind="0" name="long"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="256">
      <proto name="_get_doserrno">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="131072" ind="1" name="long"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="259">
      <proto name="__sys_errlist">
        <type flags="67108864" ind="2" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="262">
      <proto name="__sys_nerr">
        <type flags="67108864" ind="1" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="288">
      <var name="__argc">
        <type flags="262144" ind="0" name="int"/>
      </var>
    </vars>
    <vars fn="autohead.c" ln="289">
      <var name="__argv">
        <type flags="262144" ind="2" name="char"/>
      </var>
    </vars>
    <vars fn="autohead.c" ln="290">
      <var name="__wargv">
        <type flags="393216" ind="2" name="short"/>
      </var>
    </vars>
    <vars fn="autohead.c" ln="306">
      <var name="_environ">
        <type flags="262144" ind="2" name="char"/>
      </var>
    </vars>
    <vars fn="autohead.c" ln="307">
      <var name="_wenviron">
        <type flags="393216" ind="2" name="short"/>
      </var>
    </vars>
    <vars fn="autohead.c" ln="311">
      <var name="_pgmptr">
        <type flags="262144" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
      </var>
    </vars>
    <vars fn="autohead.c" ln="312">
      <var name="_wpgmptr">
        <type flags="393216" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
      </var>
    </vars>
    <vars fn="autohead.c" ln="339">
      <proto name="_get_pgmptr">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="0" ind="2" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="340">
      <proto name="_get_wpgmptr">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="131072" ind="2" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="346">
      <var name="_fmode">
        <type flags="262144" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
      </var>
    </vars>
    <vars fn="autohead.c" ln="353">
      <proto name="_set_fmode">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Mode">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="354">
      <proto name="_get_fmode">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PMode">
            <type flags="0" ind="1" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="376">
      <proto name="exit">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="noreturn"/>
          </declspec>
        </type>
        <args>
          <var name="_Code">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="378">
      <proto name="_exit">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="noreturn"/>
          </declspec>
        </type>
        <args>
          <var name="_Code">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="379">
      <proto name="abort">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="noreturn"/>
          </declspec>
        </type>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="382">
      <proto name="_set_abort_behavior">
        <type flags="67239936" ind="0" name="int"/>
        <args>
          <var name="_Flags">
            <type flags="131072" ind="0" name="int"/>
          </var>
          <var name="_Mask">
            <type flags="131072" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="384">
      <proto name="abs">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_X">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="385">
      <proto name="labs">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_X">
            <type flags="0" ind="0" name="long"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="386">
      <proto name="llabs">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_X">
            <type flags="0" ind="0" name="llong"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="388">
      <proto name="_abs64">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var>
            <type flags="0" ind="0" name="int64"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="426">
      <proto name="atexit">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var>
            <type flags="67108864" ind="1" name="HSG0009ECF5"/>
          </var>
          <type flags="0" ind="0"/>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="428">
      <proto name="atof">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="429">
      <proto name="_atof_l">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="430">
      <proto name="atoi">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="431">
      <proto name="_atoi_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="432">
      <proto name="atol">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="433">
      <proto name="_atol_l">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="434">
      <proto name="atoll">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="435">
      <proto name="_atoll_l">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="439">
      <proto name="bsearch_s">
        <type flags="67108864" ind="1" name="void"/>
        <args>
          <var name="_Key">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Base">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_NumOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_SizeOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_PtFuncCompare">
            <type flags="67108864" ind="1" name="HSG52F8095A"/>
          </var>
          <type flags="0" ind="0"/>
          <var name="_Context">
            <type flags="0" ind="1" name="void"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="443">
      <proto name="bsearch">
        <type flags="67108864" ind="1" name="void"/>
        <args>
          <var name="_Key">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Base">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_NumOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_SizeOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_PtFuncCompare">
            <type flags="67108864" ind="1" name="HSGAF5FFB34"/>
          </var>
          <type flags="0" ind="0"/>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="448">
      <proto name="qsort_s">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_Base">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_NumOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_SizeOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_PtFuncCompare">
            <type flags="67108864" ind="1" name="HSG52F8095A"/>
          </var>
          <type flags="0" ind="0"/>
          <var name="_Context">
            <type flags="0" ind="1" name="void"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="452">
      <proto name="qsort">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_Base">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_NumOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_SizeOfElements">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_PtFuncCompare">
            <type flags="67108864" ind="1" name="HSGAF5FFB34"/>
          </var>
          <type flags="0" ind="0"/>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="456">
      <proto name="_byteswap_ushort">
        <type flags="67239936" ind="0" name="short"/>
        <args>
          <var name="_Short">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="457">
      <proto name="_byteswap_ulong">
        <type flags="67239936" ind="0" name="long"/>
        <args>
          <var name="_Long">
            <type flags="131072" ind="0" name="long"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="458">
      <proto name="_byteswap_uint64">
        <type flags="67239936" ind="0" name="int64"/>
        <args>
          <var name="_Int64">
            <type flags="131072" ind="0" name="int64"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="459">
      <proto name="div">
        <type flags="67108864" ind="0" name="_div_t"/>
        <args>
          <var name="_Numerator">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Denominator">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="462">
      <proto name="getenv">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_VarName">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="464">
      <proto name="getenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_ReturnSize">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_VarName">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="472">
      <proto name="_dupenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PBuffer">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_PBufferSizeInBytes">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_VarName">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="479">
      <proto name="_itoa_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Value">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="481">
      <proto name="_itoa">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Value">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="482">
      <proto name="_i64toa_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="483">
      <proto name="_i64toa">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="484">
      <proto name="_ui64toa_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="485">
      <proto name="_ui64toa">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="486">
      <proto name="_atoi64">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="487">
      <proto name="_atoi64_l">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="488">
      <proto name="_strtoi64">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="489">
      <proto name="_strtoi64_l">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="490">
      <proto name="_strtoui64">
        <type flags="67239936" ind="0" name="int64"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="491">
      <proto name="_strtoui64_l">
        <type flags="67239936" ind="0" name="int64"/>
        <args>
          <var name="_String">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="492">
      <proto name="ldiv">
        <type flags="67108864" ind="0" name="_ldiv_t"/>
        <args>
          <var name="_Numerator">
            <type flags="0" ind="0" name="long"/>
          </var>
          <var name="_Denominator">
            <type flags="0" ind="0" name="long"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="493">
      <proto name="lldiv">
        <type flags="67108864" ind="0" name="_lldiv_t"/>
        <args>
          <var name="_Numerator">
            <type flags="0" ind="0" name="llong"/>
          </var>
          <var name="_Denominator">
            <type flags="0" ind="0" name="llong"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="515">
      <proto name="_ltoa_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="long"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="517">
      <proto name="_ltoa">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Value">
            <type flags="0" ind="0" name="long"/>
          </var>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="518">
      <proto name="mblen">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="519">
      <proto name="_mblen_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Ch">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="520">
      <proto name="_mbstrlen">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="521">
      <proto name="_mbstrlen_l">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="522">
      <proto name="_mbstrnlen">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="523">
      <proto name="_mbstrnlen_l">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="524">
      <proto name="mbtowc">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstCh">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SrcCh">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_SrcSizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="525">
      <proto name="_mbtowc_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstCh">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SrcCh">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_SrcSizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="526">
      <proto name="mbstowcs_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PtNumOfCharConverted">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_SrcBuf">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="528">
      <proto name="mbstowcs">
        <type flags="68288512" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Source">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="530">
      <proto name="_mbstowcs_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PtNumOfCharConverted">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_SrcBuf">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="532">
      <proto name="_mbstowcs_l">
        <type flags="68288512" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Source">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="534">
      <proto name="rand">
        <type flags="67108864" ind="0" name="int"/>
        <args/>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="539">
      <proto name="_set_error_mode">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Mode">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="541">
      <proto name="srand">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_Seed">
            <type flags="131072" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="542">
      <proto name="strtod">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="543">
      <proto name="_strtod_l">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="544">
      <proto name="strtol">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="545">
      <proto name="_strtol_l">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="546">
      <proto name="strtoll">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="547">
      <proto name="_strtoll_l">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="548">
      <proto name="strtoul">
        <type flags="67239936" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="549">
      <proto name="_strtoul_l">
        <type flags="67239936" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="550">
      <proto name="strtoull">
        <type flags="67239936" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="551">
      <proto name="_strtoull_l">
        <type flags="67239936" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="552">
      <proto name="strtold">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="553">
      <proto name="_strtold_l">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="554">
      <proto name="strtof">
        <type flags="67108864" ind="0" name="float"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="555">
      <proto name="_strtof_l">
        <type flags="67108864" ind="0" name="float"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EndPtr">
            <type flags="0" ind="2" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="560">
      <proto name="system">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Command">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="564">
      <proto name="_ultoa_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="long"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="566">
      <proto name="_ultoa">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Value">
            <type flags="131072" ind="0" name="long"/>
          </var>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="567">
      <proto name="wctomb">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_MbCh">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_WCh">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="568">
      <proto name="_wctomb_l">
        <type flags="67108864" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_MbCh">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_WCh">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="570">
      <proto name="wctomb_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_SizeConverted">
            <type flags="0" ind="1" name="int"/>
          </var>
          <var name="_MbCh">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_WCh">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="572">
      <proto name="_wctomb_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_SizeConverted">
            <type flags="0" ind="1" name="int"/>
          </var>
          <var name="_MbCh">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_WCh">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="573">
      <proto name="wcstombs_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PtNumOfCharConverted">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCountInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="575">
      <proto name="wcstombs">
        <type flags="68288512" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Source">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="576">
      <proto name="_wcstombs_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PtNumOfCharConverted">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCountInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="578">
      <proto name="_wcstombs_l">
        <type flags="68288512" ind="0" name="int">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Source">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="640">
      <proto name="calloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="641">
      <proto name="free">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="642">
      <proto name="malloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="644">
      <proto name="realloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_NewSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="646">
      <proto name="_recalloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="647">
      <proto name="_aligned_free">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="648">
      <proto name="_aligned_malloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Alignment">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="649">
      <proto name="_aligned_offset_malloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Alignment">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Offset">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="651">
      <proto name="_aligned_realloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_NewSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Alignment">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="653">
      <proto name="_aligned_recalloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Alignment">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="655">
      <proto name="_aligned_offset_realloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_NewSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Alignment">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Offset">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="657">
      <proto name="_aligned_offset_recalloc">
        <type flags="67108864" ind="1" name="void">
          <declspec>
            <attr name="noalias"/>
          </declspec>
          <declspec>
            <attr name="restrict"/>
          </declspec>
        </type>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Alignment">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Offset">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="658">
      <proto name="_aligned_msize">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Memory">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Alignment">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Offset">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="685">
      <proto name="_itow_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="687">
      <proto name="_itow">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Value">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="688">
      <proto name="_ltow_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="long"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="690">
      <proto name="_ltow">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Value">
            <type flags="0" ind="0" name="long"/>
          </var>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="691">
      <proto name="_ultow_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="long"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="693">
      <proto name="_ultow">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Value">
            <type flags="131072" ind="0" name="long"/>
          </var>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="694">
      <proto name="wcstod">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="695">
      <proto name="_wcstod_l">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="696">
      <proto name="wcstol">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="697">
      <proto name="_wcstol_l">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="698">
      <proto name="wcstoll">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="699">
      <proto name="_wcstoll_l">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="700">
      <proto name="wcstoul">
        <type flags="67239936" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="701">
      <proto name="_wcstoul_l">
        <type flags="67239936" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="702">
      <proto name="wcstoull">
        <type flags="67239936" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="703">
      <proto name="_wcstoull_l">
        <type flags="67239936" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="704">
      <proto name="wcstold">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="705">
      <proto name="_wcstold_l">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="706">
      <proto name="wcstof">
        <type flags="67108864" ind="0" name="float"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="707">
      <proto name="_wcstof_l">
        <type flags="67108864" ind="0" name="float"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="711">
      <proto name="_wgetenv">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_VarName">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="712">
      <proto name="_wgetenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_ReturnSize">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_DstSizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_VarName">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="720">
      <proto name="_wdupenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buffer">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_BufferSizeInWords">
            <type flags="1179648" ind="1" name="int"/>
          </var>
          <var name="_VarName">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="728">
      <proto name="_wsystem">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Command">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="733">
      <proto name="_wtof">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="734">
      <proto name="_wtof_l">
        <type flags="67108864" ind="0" name="double"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="735">
      <proto name="_wtoi">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="736">
      <proto name="_wtoi_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="737">
      <proto name="_wtol">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="738">
      <proto name="_wtol_l">
        <type flags="67108864" ind="0" name="long"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="739">
      <proto name="_wtoll">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="740">
      <proto name="_wtoll_l">
        <type flags="67108864" ind="0" name="llong"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="742">
      <proto name="_i64tow_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="743">
      <proto name="_i64tow">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="744">
      <proto name="_ui64tow_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="745">
      <proto name="_ui64tow">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int64"/>
          </var>
          <var name="_DstBuf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="746">
      <proto name="_wtoi64">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="747">
      <proto name="_wtoi64_l">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="748">
      <proto name="_wcstoi64">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="749">
      <proto name="_wcstoi64_l">
        <type flags="67108864" ind="0" name="int64"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="750">
      <proto name="_wcstoui64">
        <type flags="67239936" ind="0" name="int64"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="751">
      <proto name="_wcstoui64_l">
        <type flags="67239936" ind="0" name="int64"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EndPtr">
            <type flags="131072" ind="2" name="short"/>
          </var>
          <var name="_Radix">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="770">
      <proto name="_fullpath">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_FullPath">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Path">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="778">
      <proto name="_ecvt_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="double"/>
          </var>
          <var name="_NumOfDights">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_PtDec">
            <type flags="0" ind="1" name="int"/>
          </var>
          <var name="_PtSign">
            <type flags="0" ind="1" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="780">
      <proto name="_ecvt">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="double"/>
          </var>
          <var name="_NumOfDigits">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_PtDec">
            <type flags="0" ind="1" name="int"/>
          </var>
          <var name="_PtSign">
            <type flags="0" ind="1" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="781">
      <proto name="_fcvt_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="double"/>
          </var>
          <var name="_NumOfDec">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_PtDec">
            <type flags="0" ind="1" name="int"/>
          </var>
          <var name="_PtSign">
            <type flags="0" ind="1" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="783">
      <proto name="_fcvt">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="double"/>
          </var>
          <var name="_NumOfDec">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_PtDec">
            <type flags="0" ind="1" name="int"/>
          </var>
          <var name="_PtSign">
            <type flags="0" ind="1" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="784">
      <proto name="_gcvt_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="double"/>
          </var>
          <var name="_NumOfDigits">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="786">
      <proto name="_gcvt">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Val">
            <type flags="0" ind="0" name="double"/>
          </var>
          <var name="_NumOfDigits">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_DstBuf">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="788">
      <proto name="_atodbl">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Result">
            <type flags="0" ind="1" name="HTX881DB926"/>
          </var>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="789">
      <proto name="_atoldbl">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Result">
            <type flags="0" ind="1" name="HTX0151DFF4"/>
          </var>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="790">
      <proto name="_atoflt">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Result">
            <type flags="0" ind="1" name="HTX157A91A7"/>
          </var>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="791">
      <proto name="_atodbl_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Result">
            <type flags="0" ind="1" name="HTX881DB926"/>
          </var>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="792">
      <proto name="_atoldbl_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Result">
            <type flags="0" ind="1" name="HTX0151DFF4"/>
          </var>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="793">
      <proto name="_atoflt_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Result">
            <type flags="0" ind="1" name="HTX157A91A7"/>
          </var>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="794">
      <proto name="_lrotl">
        <type flags="67239936" ind="0" name="long"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="long"/>
          </var>
          <var name="_Shift">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="795">
      <proto name="_lrotr">
        <type flags="67239936" ind="0" name="long"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="long"/>
          </var>
          <var name="_Shift">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="796">
      <proto name="_makepath_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PathResult">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Drive">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Dir">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Ext">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="799">
      <proto name="_makepath">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Path">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Drive">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Dir">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Ext">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="826">
      <proto name="_onexit">
        <type flags="67108864" ind="1" name="HSG0009ECE8"/>
        <args>
          <var name="_Func">
            <type flags="67108864" ind="1" name="HSG0009ECE8"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="838">
      <proto name="_putenv">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_EnvString">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="839">
      <proto name="_putenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Name">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Value">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="842">
      <proto name="_rotl">
        <type flags="67239936" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int"/>
          </var>
          <var name="_Shift">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="843">
      <proto name="_rotl64">
        <type flags="67239936" ind="0" name="int64"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int64"/>
          </var>
          <var name="_Shift">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="844">
      <proto name="_rotr">
        <type flags="67239936" ind="0" name="int"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int"/>
          </var>
          <var name="_Shift">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="845">
      <proto name="_rotr64">
        <type flags="67239936" ind="0" name="int64"/>
        <args>
          <var name="_Val">
            <type flags="131072" ind="0" name="int64"/>
          </var>
          <var name="_Shift">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="849">
      <proto name="_searchenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EnvVar">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ResultPath">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="851">
      <proto name="_searchenv">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Filename">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_EnvVar">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_ResultPath">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="854">
      <proto name="_splitpath">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_FullPath">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Drive">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Dir">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Filename">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Ext">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="855">
      <proto name="_splitpath_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_FullPath">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Drive">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DriveSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Dir">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DirSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Filename">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_FilenameSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Ext">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_ExtSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="862">
      <proto name="_swab">
        <type flags="67108864" ind="0" name="void"/>
        <args>
          <var name="_Buf1">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Buf2">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="873">
      <proto name="_wfullpath">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_FullPath">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Path">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="879">
      <proto name="_wmakepath_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_PathResult">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SIZE">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Drive">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Dir">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Ext">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="882">
      <proto name="_wmakepath">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_ResultPath">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Drive">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Dir">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Ext">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="889">
      <proto name="_wputenv">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_EnvString">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="890">
      <proto name="_wputenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Name">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Value">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="891">
      <proto name="_wsearchenv_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EnvVar">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ResultPath">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="893">
      <proto name="_wsearchenv">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Filename">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_EnvVar">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_ResultPath">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="896">
      <proto name="_wsplitpath">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_FullPath">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Drive">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Dir">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Filename">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Ext">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="897">
      <proto name="_wsplitpath_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_FullPath">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Drive">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_DriveSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Dir">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_DirSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Filename">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_FilenameSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Ext">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_ExtSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="909">
      <proto name="_seterrormode">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Mode">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="910">
      <proto name="_beep">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Frequency">
            <type flags="131072" ind="0" name="int"/>
          </var>
          <var name="_Duration">
            <type flags="131072" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="911">
      <proto name="_sleep">
        <type flags="67108864" ind="0" name="void">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Duration">
            <type flags="131072" ind="0" name="long"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="47">
      <proto name="_memccpy">
        <type flags="67108864" ind="1" name="void"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="48">
      <proto name="memchr">
        <type flags="67108864" ind="1" name="void"/>
        <args>
          <var name="_Buf">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="49">
      <proto name="_memicmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buf1">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Buf2">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="50">
      <proto name="_memicmp_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buf1">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Buf2">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="51">
      <proto name="memcmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buf1">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Buf2">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="55">
      <proto name="memcpy">
        <type flags="67108864" ind="1" name="void"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="57">
      <proto name="memcpy_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="94">
      <proto name="memset">
        <type flags="67108864" ind="1" name="void"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="105">
      <proto name="_strset_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Value">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="107">
      <proto name="_strset">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Value">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="109">
      <proto name="strcpy_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="112">
      <proto name="strcpy">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Source">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="114">
      <proto name="strcat_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="118">
      <proto name="strcat">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Source">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="120">
      <proto name="strcmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="121">
      <proto name="strlen">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="125">
      <proto name="strnlen">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <defun name="strnlen_s" fn="string.h" ln="127">
      <type flags="68288520" ind="0" name="int"/>
      <args>
        <var name="_Str">
          <type flags="524288" ind="1" name="char"/>
        </var>
        <var name="_MaxCount">
          <type flags="1179648" ind="0" name="int"/>
        </var>
      </args>
      <body>
        <begin>
          <return fn="string.h" ln="132">
            <value>
              <if>
                <cond>
                  <binary op="==">
                    <left>
                      <ref name="_Str"/>
                    </left>
                    <right>
                      <int value="0"/>
                    </right>
                  </binary>
                </cond>
                <then>
                  <int value="0"/>
                </then>
                <else>
                  <funcall name="strnlen">
                    <args>
                      <ref name="_Str"/>
                      <ref name="_MaxCount"/>
                    </args>
                  </funcall>
                </else>
              </if>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <vars fn="string.h" ln="136">
      <proto name="memmove_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_DstSize">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="139">
      <proto name="memmove">
        <type flags="67108864" ind="1" name="void"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="void"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="void"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="146">
      <proto name="_strdup">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="152">
      <proto name="strchr">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="153">
      <proto name="_stricmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="154">
      <proto name="_strcmpi">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="155">
      <proto name="_stricmp_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="156">
      <proto name="strcoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="157">
      <proto name="_strcoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="158">
      <proto name="_stricoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="159">
      <proto name="_stricoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="160">
      <proto name="_strncoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="161">
      <proto name="_strncoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="162">
      <proto name="_strnicoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="163">
      <proto name="_strnicoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="164">
      <proto name="strcspn">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Control">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="165">
      <proto name="_strerror">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_ErrMsg">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="166">
      <proto name="_strerror_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_ErrMsg">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="168">
      <proto name="strerror">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var>
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="170">
      <proto name="strerror_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buf">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_ErrNum">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="173">
      <proto name="_strlwr_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="175">
      <proto name="_strlwr">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="176">
      <proto name="_strlwr_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="178">
      <proto name="_strlwr_l">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="180">
      <proto name="strncat_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="186">
      <proto name="strncat">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Source">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="188">
      <proto name="strncmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="189">
      <proto name="_strnicmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="190">
      <proto name="_strnicmp_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Str2">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="192">
      <proto name="strncpy_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="195">
      <proto name="strncpy">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Source">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="196">
      <proto name="_strnset_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_SizeInBytes">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="198">
      <proto name="_strnset">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Val">
            <type flags="0" ind="0" name="int"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="199">
      <proto name="strpbrk">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Control">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="200">
      <proto name="strrchr">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Ch">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="201">
      <proto name="_strrev">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="202">
      <proto name="strspn">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Control">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="203">
      <proto name="strstr">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Str">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_SubStr">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="204">
      <proto name="strtok">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Delim">
            <type flags="524288" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="206">
      <proto name="strtok_s">
        <type flags="67108864" ind="1" name="char"/>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Delim">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_Context">
            <type flags="0" ind="2" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="208">
      <proto name="_strupr_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="210">
      <proto name="_strupr">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="0" ind="1" name="char"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="211">
      <proto name="_strupr_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="213">
      <proto name="_strupr_l">
        <type flags="67108864" ind="1" name="char">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="214">
      <proto name="strxfrm">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="215">
      <proto name="_strxfrm_l">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="0" ind="1" name="char"/>
          </var>
          <var name="_Src">
            <type flags="524288" ind="1" name="char"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="273">
      <proto name="_wcsdup">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="280">
      <proto name="wcscat_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="284">
      <proto name="wcscat">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Source">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="288">
      <proto name="wcschr">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="289">
      <proto name="wcscmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="291">
      <proto name="wcscpy_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="294">
      <proto name="wcscpy">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Source">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="295">
      <proto name="wcscspn">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Control">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="296">
      <proto name="wcslen">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="300">
      <proto name="wcsnlen">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <defun name="wcsnlen_s" fn="string.h" ln="302">
      <type flags="68288520" ind="0" name="int"/>
      <args>
        <var name="_Src">
          <type flags="655360" ind="1" name="short"/>
        </var>
        <var name="_MaxCount">
          <type flags="1179648" ind="0" name="int"/>
        </var>
      </args>
      <body>
        <begin>
          <return fn="string.h" ln="307">
            <value>
              <if>
                <cond>
                  <binary op="==">
                    <left>
                      <ref name="_Src"/>
                    </left>
                    <right>
                      <cast>
                        <type flags="0" ind="1" name="void"/>
                        <value>
                          <int value="0"/>
                        </value>
                      </cast>
                    </right>
                  </binary>
                </cond>
                <then>
                  <int value="0"/>
                </then>
                <else>
                  <funcall name="wcsnlen">
                    <args>
                      <ref name="_Src"/>
                      <ref name="_MaxCount"/>
                    </args>
                  </funcall>
                </else>
              </if>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <vars fn="string.h" ln="311">
      <proto name="wcsncat_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="316">
      <proto name="wcsncat">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Source">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="318">
      <proto name="wcsncmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="320">
      <proto name="wcsncpy_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="323">
      <proto name="wcsncpy">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Dest">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Source">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Count">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="324">
      <proto name="wcspbrk">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Control">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="325">
      <proto name="wcsrchr">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Ch">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="326">
      <proto name="wcsspn">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Control">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="329">
      <proto name="wcsstr">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_SubStr">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="330">
      <proto name="wcstok">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Delim">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="332">
      <proto name="wcstok_s">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Delim">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Context">
            <type flags="131072" ind="2" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="334">
      <proto name="_wcserror">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_ErrNum">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="335">
      <proto name="_wcserror_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buf">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_ErrNum">
            <type flags="0" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="337">
      <proto name="__wcserror">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Str">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="338">
      <proto name="__wcserror_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Buffer">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_ErrMsg">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="341">
      <proto name="_wcsicmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="342">
      <proto name="_wcsicmp_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="343">
      <proto name="_wcsnicmp">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="344">
      <proto name="_wcsnicmp_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="345">
      <proto name="_wcsnset_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Val">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="347">
      <proto name="_wcsnset">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Val">
            <type flags="131072" ind="0" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="348">
      <proto name="_wcsrev">
        <type flags="67239936" ind="1" name="short"/>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="349">
      <proto name="_wcsset_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Value">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="351">
      <proto name="_wcsset">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Val">
            <type flags="131072" ind="0" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="353">
      <proto name="_wcslwr_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="355">
      <proto name="_wcslwr">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="356">
      <proto name="_wcslwr_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_SizeInWords">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="358">
      <proto name="_wcslwr_l">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="359">
      <proto name="_wcsupr_s">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="361">
      <proto name="_wcsupr">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="131072" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="362">
      <proto name="_wcsupr_s_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Size">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="364">
      <proto name="_wcsupr_l">
        <type flags="67239936" ind="1" name="short">
          <declspec>
            <attr name="deprecated">
              <args>
                <string value="This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."/>
              </args>
            </attr>
          </declspec>
        </type>
        <args>
          <var name="_String">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="365">
      <proto name="wcsxfrm">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="366">
      <proto name="_wcsxfrm_l">
        <type flags="68288512" ind="0" name="int"/>
        <args>
          <var name="_Dst">
            <type flags="131072" ind="1" name="short"/>
          </var>
          <var name="_Src">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="367">
      <proto name="wcscoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="368">
      <proto name="_wcscoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="369">
      <proto name="_wcsicoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="370">
      <proto name="_wcsicoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="371">
      <proto name="_wcsncoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="372">
      <proto name="_wcsncoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="373">
      <proto name="_wcsnicoll">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="string.h" ln="374">
      <proto name="_wcsnicoll_l">
        <type flags="67108864" ind="0" name="int"/>
        <args>
          <var name="_Str1">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_Str2">
            <type flags="655360" ind="1" name="short"/>
          </var>
          <var name="_MaxCount">
            <type flags="1179648" ind="0" name="int"/>
          </var>
          <var name="_Locale">
            <type flags="0" ind="1" name="localeinfo_struct"/>
          </var>
        </args>
      </proto>
    </vars>
    <vars fn="autohead.c" ln="10">
      <var name="doc">
        <type flags="0" ind="0" name="int"/>
      </var>
      <var name="pds">
        <type flags="0" ind="0" name="int"/>
      </var>
      <var name="amod">
        <type flags="0" ind="0" name="int"/>
      </var>
      <var name="prx">
        <type flags="0" ind="0" name="int"/>
      </var>
    </vars>
    <defun name="symchar" fn="autohead.c" ln="12">
      <type flags="0" ind="0" name="int"/>
      <args>
        <var name="c">
          <type flags="0" ind="0" name="int"/>
        </var>
      </args>
      <body>
        <begin>
          <if fn="autohead.c" ln="14">
            <cond>
              <binary op="&amp;&amp;">
                <left>
                  <binary op="&gt;=">
                    <left>
                      <ref name="c"/>
                    </left>
                    <right>
                      <charstring value="a"/>
                    </right>
                  </binary>
                </left>
                <right>
                  <binary op="&lt;=">
                    <left>
                      <ref name="c"/>
                    </left>
                    <right>
                      <charstring value="z"/>
                    </right>
                  </binary>
                </right>
              </binary>
            </cond>
            <then>
              <return fn="autohead.c" ln="14">
                <value>
                  <int value="1"/>
                </value>
              </return>
            </then>
          </if>
          <if fn="autohead.c" ln="15">
            <cond>
              <binary op="&amp;&amp;">
                <left>
                  <binary op="&gt;=">
                    <left>
                      <ref name="c"/>
                    </left>
                    <right>
                      <charstring value="A"/>
                    </right>
                  </binary>
                </left>
                <right>
                  <binary op="&lt;=">
                    <left>
                      <ref name="c"/>
                    </left>
                    <right>
                      <charstring value="Z"/>
                    </right>
                  </binary>
                </right>
              </binary>
            </cond>
            <then>
              <return fn="autohead.c" ln="15">
                <value>
                  <int value="1"/>
                </value>
              </return>
            </then>
          </if>
          <if fn="autohead.c" ln="16">
            <cond>
              <binary op="&amp;&amp;">
                <left>
                  <binary op="&gt;=">
                    <left>
                      <ref name="c"/>
                    </left>
                    <right>
                      <charstring value="0"/>
                    </right>
                  </binary>
                </left>
                <right>
                  <binary op="&lt;=">
                    <left>
                      <ref name="c"/>
                    </left>
                    <right>
                      <charstring value="9"/>
                    </right>
                  </binary>
                </right>
              </binary>
            </cond>
            <then>
              <return fn="autohead.c" ln="16">
                <value>
                  <int value="1"/>
                </value>
              </return>
            </then>
          </if>
          <if fn="autohead.c" ln="17">
            <cond>
              <binary op="==">
                <left>
                  <ref name="c"/>
                </left>
                <right>
                  <charstring value="_"/>
                </right>
              </binary>
            </cond>
            <then>
              <return fn="autohead.c" ln="17">
                <value>
                  <int value="1"/>
                </value>
              </return>
            </then>
          </if>
          <return fn="autohead.c" ln="18">
            <value>
              <int value="0"/>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <defun name="id_arch" fn="autohead.c" ln="21">
      <type flags="0" ind="1" name="char"/>
      <args/>
      <body>
        <begin>
          <return fn="autohead.c" ln="24">
            <value>
              <string value="x86"/>
            </value>
          </return>
          <return fn="autohead.c" ln="30">
            <value>
              <string value="x86"/>
            </value>
          </return>
          <return fn="autohead.c" ln="38">
            <value>
              <string value="unk"/>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <defun name="id_wsuf" fn="autohead.c" ln="41">
      <type flags="0" ind="1" name="char"/>
      <args/>
      <body>
        <begin>
          <return fn="autohead.c" ln="44">
            <value>
              <string value="32"/>
            </value>
          </return>
          <return fn="autohead.c" ln="50">
            <value>
              <string value="32"/>
            </value>
          </return>
          <return fn="autohead.c" ln="61">
            <value>
              <string value=""/>
            </value>
          </return>
        </begin>
      </body>
    </defun>
    <defun name="prx_def" fn="autohead.c" ln="64">
      <type flags="0" ind="0" name="void"/>
      <args>
        <var name="buf">
          <type flags="0" ind="1" name="char"/>
        </var>
      </args>
      <body>
        <begin>
          <vars fn="autohead.c" ln="66">
            <var name="tb">
              <type flags="0" ind="0" name="char">
                <size>
                  <int value="256"/>
                </size>
              </type>
            </var>
            <var name="tbn">
              <type flags="0" ind="0" name="char">
                <size>
                  <int value="256"/>
                </size>
              </type>
            </var>
            <var name="tty">
              <type flags="0" ind="0" name="char">
                <size>
                  <int value="256"/>
                </size>
              </type>
            </var>
          </vars>
          <vars fn="autohead.c" ln="67">
            <var name="s">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="t">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="t1">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="sa">
              <type flags="0" ind="1" name="char"/>
            </var>
          </vars>
          <vars fn="autohead.c" ln="68">
            <var name="ind">
              <type flags="0" ind="0" name="int"/>
            </var>
          </vars>
          <assign fn="autohead.c" ln="70">
            <left>
              <ref name="s"/>
            </left>
            <right>
              <ref name="buf"/>
            </right>
          </assign>
          <assign fn="autohead.c" ln="70">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <ref name="tb"/>
            </right>
          </assign>
          <funcall name="sprintf" fn="autohead.c" ln="73">
            <args>
              <ref name="t"/>
              <string value="__declspec(dllexport) "/>
            </args>
          </funcall>
          <assign op="+" fn="autohead.c" ln="73">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <funcall name="strlen">
                <args>
                  <ref name="t"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="autohead.c" ln="76">
            <left>
              <ref name="t1"/>
            </left>
            <right>
              <ref name="tty"/>
            </right>
          </assign>
          <while fn="autohead.c" ln="77">
            <cond>
              <funcall name="symchar">
                <args>
                  <unary op="*">
                    <value>
                      <ref name="s"/>
                    </value>
                  </unary>
                </args>
              </funcall>
            </cond>
            <body>
              <assign fn="autohead.c" ln="77">
                <left>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="t1"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </left>
                <right>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="s"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </right>
              </assign>
            </body>
          </while>
          <assign fn="autohead.c" ln="78">
            <left>
              <unary op="*">
                <value>
                  <postinc>
                    <expr>
                      <ref name="t1"/>
                    </expr>
                  </postinc>
                </value>
              </unary>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <funcall name="sprintf" fn="autohead.c" ln="79">
            <args>
              <ref name="t"/>
              <string value="%s"/>
              <ref name="tty"/>
            </args>
          </funcall>
          <assign op="+" fn="autohead.c" ln="79">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <funcall name="strlen">
                <args>
                  <ref name="t"/>
                </args>
              </funcall>
            </right>
          </assign>
          <while fn="autohead.c" ln="81">
            <cond>
              <binary op="&amp;&amp;">
                <left>
                  <unary op="*">
                    <value>
                      <ref name="s"/>
                    </value>
                  </unary>
                </left>
                <right>
                  <binary op="&lt;=">
                    <left>
                      <unary op="*">
                        <value>
                          <ref name="s"/>
                        </value>
                      </unary>
                    </left>
                    <right>
                      <charstring value="&#32;"/>
                    </right>
                  </binary>
                </right>
              </binary>
            </cond>
            <body>
              <assign fn="autohead.c" ln="81">
                <left>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="t"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </left>
                <right>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="s"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </right>
              </assign>
            </body>
          </while>
          <assign fn="autohead.c" ln="83">
            <left>
              <ref name="ind"/>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <while fn="autohead.c" ln="84">
            <cond>
              <binary op="==">
                <left>
                  <unary op="*">
                    <value>
                      <ref name="s"/>
                    </value>
                  </unary>
                </left>
                <right>
                  <charstring value="*"/>
                </right>
              </binary>
            </cond>
            <body>
              <begin>
                <assign fn="autohead.c" ln="84">
                  <left>
                    <unary op="*">
                      <value>
                        <postinc>
                          <expr>
                            <ref name="t"/>
                          </expr>
                        </postinc>
                      </value>
                    </unary>
                  </left>
                  <right>
                    <unary op="*">
                      <value>
                        <postinc>
                          <expr>
                            <ref name="s"/>
                          </expr>
                        </postinc>
                      </value>
                    </unary>
                  </right>
                </assign>
                <postinc fn="autohead.c" ln="84">
                  <expr>
                    <ref name="ind"/>
                  </expr>
                </postinc>
              </begin>
            </body>
          </while>
          <assign fn="autohead.c" ln="86">
            <left>
              <ref name="t1"/>
            </left>
            <right>
              <ref name="tbn"/>
            </right>
          </assign>
          <while fn="autohead.c" ln="87">
            <cond>
              <binary op="&amp;&amp;">
                <left>
                  <unary op="*">
                    <value>
                      <ref name="s"/>
                    </value>
                  </unary>
                </left>
                <right>
                  <funcall name="symchar">
                    <args>
                      <unary op="*">
                        <value>
                          <ref name="s"/>
                        </value>
                      </unary>
                    </args>
                  </funcall>
                </right>
              </binary>
            </cond>
            <body>
              <assign fn="autohead.c" ln="87">
                <left>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="t1"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </left>
                <right>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="s"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </right>
              </assign>
            </body>
          </while>
          <assign fn="autohead.c" ln="88">
            <left>
              <unary op="*">
                <value>
                  <postinc>
                    <expr>
                      <ref name="t1"/>
                    </expr>
                  </postinc>
                </value>
              </unary>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <funcall name="sprintf" fn="autohead.c" ln="90">
            <args>
              <ref name="t"/>
              <string value="(*_iproxy_%s)"/>
              <ref name="tbn"/>
            </args>
          </funcall>
          <assign op="+" fn="autohead.c" ln="90">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <funcall name="strlen">
                <args>
                  <ref name="t"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="autohead.c" ln="92">
            <left>
              <ref name="sa"/>
            </left>
            <right>
              <ref name="s"/>
            </right>
          </assign>
          <while fn="autohead.c" ln="93">
            <cond>
              <unary op="*">
                <value>
                  <ref name="s"/>
                </value>
              </unary>
            </cond>
            <body>
              <assign fn="autohead.c" ln="93">
                <left>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="t"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </left>
                <right>
                  <unary op="*">
                    <value>
                      <postinc>
                        <expr>
                          <ref name="s"/>
                        </expr>
                      </postinc>
                    </value>
                  </unary>
                </right>
              </assign>
            </body>
          </while>
          <assign fn="autohead.c" ln="94">
            <left>
              <unary op="*">
                <value>
                  <postinc>
                    <expr>
                      <ref name="t"/>
                    </expr>
                  </postinc>
                </value>
              </unary>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <funcall name="printf" fn="autohead.c" ln="96">
            <args>
              <string value="%s;&#10;"/>
              <ref name="tb"/>
            </args>
          </funcall>
          <assign fn="autohead.c" ln="98">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <ref name="tb"/>
            </right>
          </assign>
          <funcall name="sprintf" fn="autohead.c" ln="99">
            <args>
              <ref name="tb"/>
              <string value="%s&#10;&#9;{ "/>
              <ref name="buf"/>
            </args>
          </funcall>
          <assign op="+" fn="autohead.c" ln="99">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <funcall name="strlen">
                <args>
                  <ref name="t"/>
                </args>
              </funcall>
            </right>
          </assign>
          <if fn="autohead.c" ln="100">
            <cond>
              <binary op="||">
                <left>
                  <funcall name="strcmp">
                    <args>
                      <ref name="tty"/>
                      <string value="void"/>
                    </args>
                  </funcall>
                </left>
                <right>
                  <ref name="ind"/>
                </right>
              </binary>
            </cond>
            <then>
              <begin>
                <funcall name="sprintf" fn="autohead.c" ln="101">
                  <args>
                    <ref name="t"/>
                    <string value="return "/>
                  </args>
                </funcall>
                <assign op="+" fn="autohead.c" ln="101">
                  <left>
                    <ref name="t"/>
                  </left>
                  <right>
                    <funcall name="strlen">
                      <args>
                        <ref name="t"/>
                      </args>
                    </funcall>
                  </right>
                </assign>
              </begin>
            </then>
          </if>
          <funcall name="sprintf" fn="autohead.c" ln="102">
            <args>
              <ref name="t"/>
              <string value="_iproxy_%s("/>
              <ref name="tbn"/>
            </args>
          </funcall>
          <assign op="+" fn="autohead.c" ln="102">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <funcall name="strlen">
                <args>
                  <ref name="t"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="autohead.c" ln="104">
            <left>
              <ref name="s"/>
            </left>
            <right>
              <ref name="sa"/>
            </right>
          </assign>
          <while fn="autohead.c" ln="105">
            <cond>
              <binary op="&amp;&amp;">
                <left>
                  <ref name="s"/>
                </left>
                <right>
                  <binary op="!=">
                    <left>
                      <unary op="*">
                        <value>
                          <ref name="s"/>
                        </value>
                      </unary>
                    </left>
                    <right>
                      <charstring value=")"/>
                    </right>
                  </binary>
                </right>
              </binary>
            </cond>
            <body>
              <begin>
                <while fn="autohead.c" ln="107">
                  <cond>
                    <binary op="&amp;&amp;">
                      <left>
                        <binary op="&amp;&amp;">
                          <left>
                            <unary op="*">
                              <value>
                                <ref name="s"/>
                              </value>
                            </unary>
                          </left>
                          <right>
                            <binary op="!=">
                              <left>
                                <unary op="*">
                                  <value>
                                    <ref name="s"/>
                                  </value>
                                </unary>
                              </left>
                              <right>
                                <charstring value=")"/>
                              </right>
                            </binary>
                          </right>
                        </binary>
                      </left>
                      <right>
                        <binary op="!=">
                          <left>
                            <unary op="*">
                              <value>
                                <ref name="s"/>
                              </value>
                            </unary>
                          </left>
                          <right>
                            <charstring value=","/>
                          </right>
                        </binary>
                      </right>
                    </binary>
                  </cond>
                  <body>
                    <postinc fn="autohead.c" ln="107">
                      <expr>
                        <ref name="s"/>
                      </expr>
                    </postinc>
                  </body>
                </while>
                <while fn="autohead.c" ln="108">
                  <cond>
                    <unary op="!">
                      <value>
                        <funcall name="symchar">
                          <args>
                            <unary op="*">
                              <value>
                                <binary op="-">
                                  <left>
                                    <ref name="s"/>
                                  </left>
                                  <right>
                                    <int value="1"/>
                                  </right>
                                </binary>
                              </value>
                            </unary>
                          </args>
                        </funcall>
                      </value>
                    </unary>
                  </cond>
                  <body>
                    <postdec fn="autohead.c" ln="108">
                      <expr>
                        <ref name="s"/>
                      </expr>
                    </postdec>
                  </body>
                </while>
                <while fn="autohead.c" ln="109">
                  <cond>
                    <funcall name="symchar">
                      <args>
                        <unary op="*">
                          <value>
                            <binary op="-">
                              <left>
                                <ref name="s"/>
                              </left>
                              <right>
                                <int value="1"/>
                              </right>
                            </binary>
                          </value>
                        </unary>
                      </args>
                    </funcall>
                  </cond>
                  <body>
                    <postdec fn="autohead.c" ln="109">
                      <expr>
                        <ref name="s"/>
                      </expr>
                    </postdec>
                  </body>
                </while>
                <if fn="autohead.c" ln="110">
                  <cond>
                    <unary op="!">
                      <value>
                        <funcall name="strncmp">
                          <args>
                            <ref name="s"/>
                            <string value="void)"/>
                            <int value="5"/>
                          </args>
                        </funcall>
                      </value>
                    </unary>
                  </cond>
                  <then>
                    <break fn="autohead.c" ln="110"/>
                  </then>
                </if>
                <while fn="autohead.c" ln="111">
                  <cond>
                    <funcall name="symchar">
                      <args>
                        <unary op="*">
                          <value>
                            <ref name="s"/>
                          </value>
                        </unary>
                      </args>
                    </funcall>
                  </cond>
                  <body>
                    <assign fn="autohead.c" ln="111">
                      <left>
                        <unary op="*">
                          <value>
                            <postinc>
                              <expr>
                                <ref name="t"/>
                              </expr>
                            </postinc>
                          </value>
                        </unary>
                      </left>
                      <right>
                        <unary op="*">
                          <value>
                            <postinc>
                              <expr>
                                <ref name="s"/>
                              </expr>
                            </postinc>
                          </value>
                        </unary>
                      </right>
                    </assign>
                  </body>
                </while>
                <while fn="autohead.c" ln="112">
                  <cond>
                    <binary op="&amp;&amp;">
                      <left>
                        <binary op="&amp;&amp;">
                          <left>
                            <unary op="*">
                              <value>
                                <ref name="s"/>
                              </value>
                            </unary>
                          </left>
                          <right>
                            <binary op="!=">
                              <left>
                                <unary op="*">
                                  <value>
                                    <ref name="s"/>
                                  </value>
                                </unary>
                              </left>
                              <right>
                                <charstring value=")"/>
                              </right>
                            </binary>
                          </right>
                        </binary>
                      </left>
                      <right>
                        <binary op="!=">
                          <left>
                            <unary op="*">
                              <value>
                                <ref name="s"/>
                              </value>
                            </unary>
                          </left>
                          <right>
                            <charstring value=","/>
                          </right>
                        </binary>
                      </right>
                    </binary>
                  </cond>
                  <body>
                    <postinc fn="autohead.c" ln="112">
                      <expr>
                        <ref name="s"/>
                      </expr>
                    </postinc>
                  </body>
                </while>
                <if fn="autohead.c" ln="113">
                  <cond>
                    <binary op="==">
                      <left>
                        <unary op="*">
                          <value>
                            <ref name="s"/>
                          </value>
                        </unary>
                      </left>
                      <right>
                        <charstring value=","/>
                      </right>
                    </binary>
                  </cond>
                  <then>
                    <begin>
                      <postinc fn="autohead.c" ln="113">
                        <expr>
                          <ref name="s"/>
                        </expr>
                      </postinc>
                      <assign fn="autohead.c" ln="113">
                        <left>
                          <unary op="*">
                            <value>
                              <postinc>
                                <expr>
                                  <ref name="t"/>
                                </expr>
                              </postinc>
                            </value>
                          </unary>
                        </left>
                        <right>
                          <charstring value=","/>
                        </right>
                      </assign>
                      <assign fn="autohead.c" ln="113">
                        <left>
                          <unary op="*">
                            <value>
                              <postinc>
                                <expr>
                                  <ref name="t"/>
                                </expr>
                              </postinc>
                            </value>
                          </unary>
                        </left>
                        <right>
                          <charstring value="&#32;"/>
                        </right>
                      </assign>
                    </begin>
                  </then>
                </if>
              </begin>
            </body>
          </while>
          <funcall name="sprintf" fn="autohead.c" ln="116">
            <args>
              <ref name="t"/>
              <string value="); }&#10;"/>
            </args>
          </funcall>
          <assign op="+" fn="autohead.c" ln="116">
            <left>
              <ref name="t"/>
            </left>
            <right>
              <funcall name="strlen">
                <args>
                  <ref name="t"/>
                </args>
              </funcall>
            </right>
          </assign>
          <funcall name="printf" fn="autohead.c" ln="117">
            <args>
              <string value="%s&#10;"/>
              <ref name="tb"/>
            </args>
          </funcall>
        </begin>
      </body>
    </defun>
    <defun name="main" fn="autohead.c" ln="120">
      <type flags="0" ind="0" name="int"/>
      <args>
        <var name="argc">
          <type flags="0" ind="0" name="int"/>
        </var>
        <var name="argv">
          <type flags="0" ind="1" name="char">
            <size>
              <int value="0"/>
            </size>
          </type>
        </var>
      </args>
      <body>
        <begin>
          <vars fn="autohead.c" ln="122">
            <var name="i">
              <type flags="0" ind="0" name="int"/>
            </var>
            <var name="j">
              <type flags="0" ind="0" name="int"/>
            </var>
            <var name="l">
              <type flags="0" ind="0" name="int"/>
            </var>
            <var name="isapi">
              <type flags="0" ind="0" name="int"/>
            </var>
          </vars>
          <vars fn="autohead.c" ln="123">
            <var name="fd">
              <type flags="0" ind="1" name="_iobuf"/>
            </var>
          </vars>
          <vars fn="autohead.c" ln="124">
            <var name="buf">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="buf2">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="buf3">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="buf4">
              <type flags="0" ind="1" name="char"/>
            </var>
          </vars>
          <vars fn="autohead.c" ln="125">
            <var name="s">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="s2">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="t">
              <type flags="0" ind="1" name="char"/>
            </var>
          </vars>
          <vars fn="autohead.c" ln="126">
            <var name="cat">
              <type flags="0" ind="1" name="char"/>
            </var>
            <var name="api">
              <type flags="0" ind="1" name="char"/>
            </var>
          </vars>
          <assign fn="autohead.c" ln="128">
            <left>
              <ref name="buf"/>
            </left>
            <right>
              <funcall name="malloc">
                <args>
                  <int value="16384"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="autohead.c" ln="129">
            <left>
              <ref name="buf2"/>
            </left>
            <right>
              <funcall name="malloc">
                <args>
                  <int value="16384"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="autohead.c" ln="130">
            <left>
              <ref name="buf3"/>
            </left>
            <right>
              <funcall name="malloc">
                <args>
                  <int value="256"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="autohead.c" ln="131">
            <left>
              <ref name="buf4"/>
            </left>
            <right>
              <funcall name="malloc">
                <args>
                  <int value="256"/>
                </args>
              </funcall>
            </right>
          </assign>
          <assign fn="autohead.c" ln="133">
            <left>
              <ref name="doc"/>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <assign fn="autohead.c" ln="133">
            <left>
              <ref name="pds"/>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <assign fn="autohead.c" ln="133">
            <left>
              <ref name="amod"/>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <assign fn="autohead.c" ln="133">
            <left>
              <ref name="prx"/>
            </left>
            <right>
              <int value="0"/>
            </right>
          </assign>
          <assign fn="autohead.c" ln="134">
            <left>
              <ref name="api"/>
            </left>
            <right>
              <cast>
                <type flags="0" ind="1" name="void"/>
                <value>
                  <int value="0"/>
                </value>
              </cast>
            </right>
          </assign>
          <for fn="autohead.c" ln="136">
            <init>
              <assign>
                <left>
                  <ref name="i"/>
                </left>
                <right>
                  <int value="1"/>
                </right>
              </assign>
            </init>
            <cond>
              <binary op="&lt;">
                <left>
                  <ref name="i"/>
                </left>
                <right>
                  <ref name="argc"/>
                </right>
              </binary>
            </cond>
            <step>
              <postinc>
                <expr>
                  <ref name="i"/>
                </expr>
              </postinc>
            </step>
            <body>
              <begin>
                <if fn="autohead.c" ln="138">
                  <cond>
                    <binary op="==">
                      <left>
                        <getindex>
                          <array>
                            <getindex>
                              <array>
                                <ref name="argv"/>
                              </array>
                              <index>
                                <ref name="i"/>
                              </index>
                            </getindex>
                          </array>
                          <index>
                            <int value="0"/>
                          </index>
                        </getindex>
                      </left>
                      <right>
                        <charstring value="-"/>
                      </right>
                    </binary>
                  </cond>
                  <then>
                    <begin>
                      <if fn="autohead.c" ln="140">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-doc"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <assign fn="autohead.c" ln="142">
                              <left>
                                <ref name="doc"/>
                              </left>
                              <right>
                                <int value="1"/>
                              </right>
                            </assign>
                            <assign fn="autohead.c" ln="143">
                              <left>
                                <ref name="cat"/>
                              </left>
                              <right>
                                <getindex>
                                  <array>
                                    <ref name="argv"/>
                                  </array>
                                  <index>
                                    <binary op="+">
                                      <left>
                                        <ref name="i"/>
                                      </left>
                                      <right>
                                        <int value="1"/>
                                      </right>
                                    </binary>
                                  </index>
                                </getindex>
                              </right>
                            </assign>
                            <postinc fn="autohead.c" ln="144">
                              <expr>
                                <ref name="i"/>
                              </expr>
                            </postinc>
                            <continue fn="autohead.c" ln="145"/>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="147">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-pds"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <assign fn="autohead.c" ln="149">
                              <left>
                                <ref name="pds"/>
                              </left>
                              <right>
                                <int value="1"/>
                              </right>
                            </assign>
                            <assign fn="autohead.c" ln="150">
                              <left>
                                <ref name="cat"/>
                              </left>
                              <right>
                                <getindex>
                                  <array>
                                    <ref name="argv"/>
                                  </array>
                                  <index>
                                    <binary op="+">
                                      <left>
                                        <ref name="i"/>
                                      </left>
                                      <right>
                                        <int value="1"/>
                                      </right>
                                    </binary>
                                  </index>
                                </getindex>
                              </right>
                            </assign>
                            <postinc fn="autohead.c" ln="151">
                              <expr>
                                <ref name="i"/>
                              </expr>
                            </postinc>
                            <continue fn="autohead.c" ln="152"/>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="155">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-api"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <assign fn="autohead.c" ln="157">
                              <left>
                                <ref name="api"/>
                              </left>
                              <right>
                                <getindex>
                                  <array>
                                    <ref name="argv"/>
                                  </array>
                                  <index>
                                    <binary op="+">
                                      <left>
                                        <ref name="i"/>
                                      </left>
                                      <right>
                                        <int value="1"/>
                                      </right>
                                    </binary>
                                  </index>
                                </getindex>
                              </right>
                            </assign>
                            <postinc fn="autohead.c" ln="158">
                              <expr>
                                <ref name="i"/>
                              </expr>
                            </postinc>
                            <continue fn="autohead.c" ln="159"/>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="162">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-apionly"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <assign fn="autohead.c" ln="164">
                              <left>
                                <ref name="api"/>
                              </left>
                              <right>
                                <getindex>
                                  <array>
                                    <ref name="argv"/>
                                  </array>
                                  <index>
                                    <binary op="+">
                                      <left>
                                        <ref name="i"/>
                                      </left>
                                      <right>
                                        <int value="1"/>
                                      </right>
                                    </binary>
                                  </index>
                                </getindex>
                              </right>
                            </assign>
                            <assign fn="autohead.c" ln="164">
                              <left>
                                <ref name="amod"/>
                              </left>
                              <right>
                                <int value="1"/>
                              </right>
                            </assign>
                            <postinc fn="autohead.c" ln="165">
                              <expr>
                                <ref name="i"/>
                              </expr>
                            </postinc>
                            <continue fn="autohead.c" ln="166"/>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="169">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-noapi"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <assign fn="autohead.c" ln="171">
                              <left>
                                <ref name="api"/>
                              </left>
                              <right>
                                <getindex>
                                  <array>
                                    <ref name="argv"/>
                                  </array>
                                  <index>
                                    <binary op="+">
                                      <left>
                                        <ref name="i"/>
                                      </left>
                                      <right>
                                        <int value="1"/>
                                      </right>
                                    </binary>
                                  </index>
                                </getindex>
                              </right>
                            </assign>
                            <assign fn="autohead.c" ln="171">
                              <left>
                                <ref name="amod"/>
                              </left>
                              <right>
                                <int value="2"/>
                              </right>
                            </assign>
                            <postinc fn="autohead.c" ln="172">
                              <expr>
                                <ref name="i"/>
                              </expr>
                            </postinc>
                            <continue fn="autohead.c" ln="173"/>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="176">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-proxy"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <assign fn="autohead.c" ln="178">
                              <left>
                                <ref name="prx"/>
                              </left>
                              <right>
                                <int value="1"/>
                              </right>
                            </assign>
                            <continue fn="autohead.c" ln="179"/>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="182">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-idarch"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <funcall name="printf" fn="autohead.c" ln="184">
                              <args>
                                <string value="%s"/>
                                <funcall name="id_arch">
                                  <args/>
                                </funcall>
                              </args>
                            </funcall>
                            <funcall name="exit" fn="autohead.c" ln="185">
                              <args>
                                <int value="0"/>
                              </args>
                            </funcall>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="187">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strcmp">
                                <args>
                                  <getindex>
                                    <array>
                                      <ref name="argv"/>
                                    </array>
                                    <index>
                                      <ref name="i"/>
                                    </index>
                                  </getindex>
                                  <string value="-idwsuf"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <funcall name="printf" fn="autohead.c" ln="189">
                              <args>
                                <string value="%s"/>
                                <funcall name="id_wsuf">
                                  <args/>
                                </funcall>
                              </args>
                            </funcall>
                            <funcall name="exit" fn="autohead.c" ln="190">
                              <args>
                                <int value="0"/>
                              </args>
                            </funcall>
                          </begin>
                        </then>
                      </if>
                      <funcall name="fprintf" fn="autohead.c" ln="193">
                        <args>
                          <unary op="&amp;">
                            <value>
                              <getindex>
                                <array>
                                  <funcall name="__iob_func">
                                    <args/>
                                  </funcall>
                                </array>
                                <index>
                                  <int value="2"/>
                                </index>
                              </getindex>
                            </value>
                          </unary>
                          <string value="Unknown option &apos;%s&apos;&#10;"/>
                          <getindex>
                            <array>
                              <ref name="argv"/>
                            </array>
                            <index>
                              <ref name="i"/>
                            </index>
                          </getindex>
                        </args>
                      </funcall>
                      <funcall name="exit" fn="autohead.c" ln="194">
                        <args>
                          <unary op="-">
                            <value>
                              <int value="1"/>
                            </value>
                          </unary>
                        </args>
                      </funcall>
                    </begin>
                  </then>
                </if>
                <assign fn="autohead.c" ln="197">
                  <left>
                    <ref name="fd"/>
                  </left>
                  <right>
                    <funcall name="fopen">
                      <args>
                        <getindex>
                          <array>
                            <ref name="argv"/>
                          </array>
                          <index>
                            <ref name="i"/>
                          </index>
                        </getindex>
                        <string value="rt"/>
                      </args>
                    </funcall>
                  </right>
                </assign>
                <if fn="autohead.c" ln="198">
                  <cond>
                    <unary op="!">
                      <value>
                        <ref name="fd"/>
                      </value>
                    </unary>
                  </cond>
                  <then>
                    <continue fn="autohead.c" ln="198"/>
                  </then>
                </if>
                <funcall name="printf" fn="autohead.c" ln="200">
                  <args>
                    <string value="//AHSRC:%s&#10;"/>
                    <getindex>
                      <array>
                        <ref name="argv"/>
                      </array>
                      <index>
                        <ref name="i"/>
                      </index>
                    </getindex>
                  </args>
                </funcall>
                <assign fn="autohead.c" ln="201">
                  <left>
                    <ref name="l"/>
                  </left>
                  <right>
                    <int value="0"/>
                  </right>
                </assign>
                <while fn="autohead.c" ln="202">
                  <cond>
                    <unary op="!">
                      <value>
                        <funcall name="feof">
                          <args>
                            <ref name="fd"/>
                          </args>
                        </funcall>
                      </value>
                    </unary>
                  </cond>
                  <body>
                    <begin>
                      <funcall name="memset" fn="autohead.c" ln="204">
                        <args>
                          <ref name="buf"/>
                          <int value="0"/>
                          <int value="256"/>
                        </args>
                      </funcall>
                      <funcall name="fgets" fn="autohead.c" ln="205">
                        <args>
                          <ref name="buf"/>
                          <int value="255"/>
                          <ref name="fd"/>
                        </args>
                      </funcall>
                      <postinc fn="autohead.c" ln="206">
                        <expr>
                          <ref name="l"/>
                        </expr>
                      </postinc>
                      <assign fn="autohead.c" ln="208">
                        <left>
                          <ref name="s"/>
                        </left>
                        <right>
                          <ref name="buf"/>
                        </right>
                      </assign>
                      <while fn="autohead.c" ln="209">
                        <cond>
                          <binary op="&amp;&amp;">
                            <left>
                              <binary op="&amp;&amp;">
                                <left>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </left>
                                <right>
                                  <binary op="!=">
                                    <left>
                                      <unary op="*">
                                        <value>
                                          <ref name="s"/>
                                        </value>
                                      </unary>
                                    </left>
                                    <right>
                                      <charstring value="&#13;"/>
                                    </right>
                                  </binary>
                                </right>
                              </binary>
                            </left>
                            <right>
                              <binary op="!=">
                                <left>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </left>
                                <right>
                                  <charstring value="&#10;"/>
                                </right>
                              </binary>
                            </right>
                          </binary>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="209">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <if fn="autohead.c" ln="210">
                        <cond>
                          <binary op="==">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value="&#13;"/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <assign fn="autohead.c" ln="210">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <int value="0"/>
                            </right>
                          </assign>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="211">
                        <cond>
                          <binary op="==">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value="&#10;"/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <assign fn="autohead.c" ln="211">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <int value="0"/>
                            </right>
                          </assign>
                        </then>
                      </if>
                      <assign fn="autohead.c" ln="213">
                        <left>
                          <ref name="s"/>
                        </left>
                        <right>
                          <ref name="buf"/>
                        </right>
                      </assign>
                      <while fn="autohead.c" ln="214">
                        <cond>
                          <binary op="&amp;&amp;">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <binary op="&lt;=">
                                <left>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </left>
                                <right>
                                  <charstring value="&#32;"/>
                                </right>
                              </binary>
                            </right>
                          </binary>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="214">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <if fn="autohead.c" ln="215">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strncmp">
                                <args>
                                  <ref name="s"/>
                                  <string value="//AH:"/>
                                  <int value="5"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <linecomment value="&#9;&#9;&#9;&#9;fprintf(stderr, &quot;//AH tag %s %d\n&quot;," fn="autohead.c" ln="219"/>
                            <linecomment value="&#9;&#9;&#9;&#9;&#9;argv[i], l);" fn="autohead.c" ln="219"/>
                            <assign op="+" fn="autohead.c" ln="219">
                              <left>
                                <ref name="s"/>
                              </left>
                              <right>
                                <int value="5"/>
                              </right>
                            </assign>
                            <while fn="autohead.c" ln="220">
                              <cond>
                                <binary op="&amp;&amp;">
                                  <left>
                                    <unary op="*">
                                      <value>
                                        <ref name="s"/>
                                      </value>
                                    </unary>
                                  </left>
                                  <right>
                                    <binary op="&lt;=">
                                      <left>
                                        <unary op="*">
                                          <value>
                                            <ref name="s"/>
                                          </value>
                                        </unary>
                                      </left>
                                      <right>
                                        <charstring value="&#32;"/>
                                      </right>
                                    </binary>
                                  </right>
                                </binary>
                              </cond>
                              <body>
                                <postinc fn="autohead.c" ln="220">
                                  <expr>
                                    <ref name="s"/>
                                  </expr>
                                </postinc>
                              </body>
                            </while>
                            <if fn="autohead.c" ln="221">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <funcall name="strcmp">
                                      <args>
                                        <ref name="s"/>
                                        <string value="skip"/>
                                      </args>
                                    </funcall>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <break fn="autohead.c" ln="221"/>
                              </then>
                            </if>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="224">
                        <cond>
                          <ref name="pds"/>
                        </cond>
                        <then>
                          <if fn="autohead.c" ln="224">
                            <cond>
                              <unary op="!">
                                <value>
                                  <funcall name="strncmp">
                                    <args>
                                      <ref name="s"/>
                                      <string value="//PDSCAT:"/>
                                      <int value="9"/>
                                    </args>
                                  </funcall>
                                </value>
                              </unary>
                            </cond>
                            <then>
                              <begin>
                                <assign op="+" fn="autohead.c" ln="226">
                                  <left>
                                    <ref name="s"/>
                                  </left>
                                  <right>
                                    <int value="9"/>
                                  </right>
                                </assign>
                                <assign fn="autohead.c" ln="227">
                                  <left>
                                    <ref name="t"/>
                                  </left>
                                  <right>
                                    <ref name="buf3"/>
                                  </right>
                                </assign>
                                <while fn="autohead.c" ln="228">
                                  <cond>
                                    <unary op="*">
                                      <value>
                                        <ref name="s"/>
                                      </value>
                                    </unary>
                                  </cond>
                                  <body>
                                    <assign fn="autohead.c" ln="228">
                                      <left>
                                        <unary op="*">
                                          <value>
                                            <postinc>
                                              <expr>
                                                <ref name="t"/>
                                              </expr>
                                            </postinc>
                                          </value>
                                        </unary>
                                      </left>
                                      <right>
                                        <unary op="*">
                                          <value>
                                            <postinc>
                                              <expr>
                                                <ref name="s"/>
                                              </expr>
                                            </postinc>
                                          </value>
                                        </unary>
                                      </right>
                                    </assign>
                                  </body>
                                </while>
                                <assign fn="autohead.c" ln="229">
                                  <left>
                                    <unary op="*">
                                      <value>
                                        <postinc>
                                          <expr>
                                            <ref name="t"/>
                                          </expr>
                                        </postinc>
                                      </value>
                                    </unary>
                                  </left>
                                  <right>
                                    <int value="0"/>
                                  </right>
                                </assign>
                                <assign fn="autohead.c" ln="231">
                                  <left>
                                    <ref name="cat"/>
                                  </left>
                                  <right>
                                    <funcall name="strdup">
                                      <args>
                                        <ref name="buf3"/>
                                      </args>
                                    </funcall>
                                  </right>
                                </assign>
                              </begin>
                            </then>
                          </if>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="234">
                        <cond>
                          <ref name="pds"/>
                        </cond>
                        <then>
                          <if fn="autohead.c" ln="234">
                            <cond>
                              <unary op="!">
                                <value>
                                  <funcall name="strncmp">
                                    <args>
                                      <ref name="s"/>
                                      <string value="//PDS:"/>
                                      <int value="6"/>
                                    </args>
                                  </funcall>
                                </value>
                              </unary>
                            </cond>
                            <then>
                              <begin>
                                <assign op="+" fn="autohead.c" ln="236">
                                  <left>
                                    <ref name="s"/>
                                  </left>
                                  <right>
                                    <int value="6"/>
                                  </right>
                                </assign>
                                <while fn="autohead.c" ln="237">
                                  <cond>
                                    <binary op="&amp;&amp;">
                                      <left>
                                        <unary op="*">
                                          <value>
                                            <ref name="s"/>
                                          </value>
                                        </unary>
                                      </left>
                                      <right>
                                        <binary op="&lt;=">
                                          <left>
                                            <unary op="*">
                                              <value>
                                                <ref name="s"/>
                                              </value>
                                            </unary>
                                          </left>
                                          <right>
                                            <charstring value="&#32;"/>
                                          </right>
                                        </binary>
                                      </right>
                                    </binary>
                                  </cond>
                                  <body>
                                    <postinc fn="autohead.c" ln="237">
                                      <expr>
                                        <ref name="s"/>
                                      </expr>
                                    </postinc>
                                  </body>
                                </while>
                                <assign fn="autohead.c" ln="239">
                                  <left>
                                    <ref name="t"/>
                                  </left>
                                  <right>
                                    <ref name="buf3"/>
                                  </right>
                                </assign>
                                <while fn="autohead.c" ln="240">
                                  <cond>
                                    <binary op="&amp;&amp;">
                                      <left>
                                        <unary op="*">
                                          <value>
                                            <ref name="s"/>
                                          </value>
                                        </unary>
                                      </left>
                                      <right>
                                        <funcall name="strncmp">
                                          <args>
                                            <ref name="s"/>
                                            <string value="::"/>
                                            <int value="2"/>
                                          </args>
                                        </funcall>
                                      </right>
                                    </binary>
                                  </cond>
                                  <body>
                                    <begin>
                                      <if fn="autohead.c" ln="242">
                                        <cond>
                                          <binary op="&amp;&amp;">
                                            <left>
                                              <binary op="==">
                                                <left>
                                                  <getindex>
                                                    <array>
                                                      <ref name="s"/>
                                                    </array>
                                                    <index>
                                                      <int value="0"/>
                                                    </index>
                                                  </getindex>
                                                </left>
                                                <right>
                                                  <charstring value="\"/>
                                                </right>
                                              </binary>
                                            </left>
                                            <right>
                                              <binary op="&lt;=">
                                                <left>
                                                  <getindex>
                                                    <array>
                                                      <ref name="s"/>
                                                    </array>
                                                    <index>
                                                      <int value="1"/>
                                                    </index>
                                                  </getindex>
                                                </left>
                                                <right>
                                                  <charstring value="&#32;"/>
                                                </right>
                                              </binary>
                                            </right>
                                          </binary>
                                        </cond>
                                        <then>
                                          <begin>
                                            <funcall name="fgets" fn="autohead.c" ln="244">
                                              <args>
                                                <ref name="buf"/>
                                                <int value="255"/>
                                                <ref name="fd"/>
                                              </args>
                                            </funcall>
                                            <assign fn="autohead.c" ln="245">
                                              <left>
                                                <ref name="s"/>
                                              </left>
                                              <right>
                                                <ref name="buf"/>
                                              </right>
                                            </assign>
                                            <while fn="autohead.c" ln="246">
                                              <cond>
                                                <binary op="&amp;&amp;">
                                                  <left>
                                                    <unary op="*">
                                                      <value>
                                                        <ref name="s"/>
                                                      </value>
                                                    </unary>
                                                  </left>
                                                  <right>
                                                    <binary op="&lt;=">
                                                      <left>
                                                        <unary op="*">
                                                          <value>
                                                            <ref name="s"/>
                                                          </value>
                                                        </unary>
                                                      </left>
                                                      <right>
                                                        <charstring value="&#32;"/>
                                                      </right>
                                                    </binary>
                                                  </right>
                                                </binary>
                                              </cond>
                                              <body>
                                                <postinc fn="autohead.c" ln="246">
                                                  <expr>
                                                    <ref name="s"/>
                                                  </expr>
                                                </postinc>
                                              </body>
                                            </while>
                                            <if fn="autohead.c" ln="247">
                                              <cond>
                                                <unary op="!">
                                                  <value>
                                                    <funcall name="strncmp">
                                                      <args>
                                                        <ref name="s"/>
                                                        <string value="//"/>
                                                        <int value="2"/>
                                                      </args>
                                                    </funcall>
                                                  </value>
                                                </unary>
                                              </cond>
                                              <then>
                                                <assign op="+" fn="autohead.c" ln="247">
                                                  <left>
                                                    <ref name="s"/>
                                                  </left>
                                                  <right>
                                                    <int value="2"/>
                                                  </right>
                                                </assign>
                                              </then>
                                            </if>
                                            <continue fn="autohead.c" ln="248"/>
                                          </begin>
                                        </then>
                                      </if>
                                      <if fn="autohead.c" ln="250">
                                        <cond>
                                          <binary op="==">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="s"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#13;"/>
                                            </right>
                                          </binary>
                                        </cond>
                                        <then>
                                          <break fn="autohead.c" ln="250"/>
                                        </then>
                                      </if>
                                      <if fn="autohead.c" ln="251">
                                        <cond>
                                          <binary op="==">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="s"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#10;"/>
                                            </right>
                                          </binary>
                                        </cond>
                                        <then>
                                          <break fn="autohead.c" ln="251"/>
                                        </then>
                                      </if>
                                      <assign fn="autohead.c" ln="252">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <postinc>
                                                <expr>
                                                  <ref name="t"/>
                                                </expr>
                                              </postinc>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <unary op="*">
                                            <value>
                                              <postinc>
                                                <expr>
                                                  <ref name="s"/>
                                                </expr>
                                              </postinc>
                                            </value>
                                          </unary>
                                        </right>
                                      </assign>
                                    </begin>
                                  </body>
                                </while>
                                <assign fn="autohead.c" ln="254">
                                  <left>
                                    <unary op="*">
                                      <value>
                                        <postinc>
                                          <expr>
                                            <ref name="t"/>
                                          </expr>
                                        </postinc>
                                      </value>
                                    </unary>
                                  </left>
                                  <right>
                                    <int value="0"/>
                                  </right>
                                </assign>
                                <if fn="autohead.c" ln="256">
                                  <cond>
                                    <unary op="!">
                                      <value>
                                        <funcall name="strncmp">
                                          <args>
                                            <ref name="s"/>
                                            <string value="::"/>
                                            <int value="2"/>
                                          </args>
                                        </funcall>
                                      </value>
                                    </unary>
                                  </cond>
                                  <then>
                                    <assign op="+" fn="autohead.c" ln="256">
                                      <left>
                                        <ref name="s"/>
                                      </left>
                                      <right>
                                        <int value="2"/>
                                      </right>
                                    </assign>
                                  </then>
                                </if>
                                <assign fn="autohead.c" ln="258">
                                  <left>
                                    <ref name="t"/>
                                  </left>
                                  <right>
                                    <ref name="buf4"/>
                                  </right>
                                </assign>
                                <while fn="autohead.c" ln="259">
                                  <cond>
                                    <unary op="*">
                                      <value>
                                        <ref name="s"/>
                                      </value>
                                    </unary>
                                  </cond>
                                  <body>
                                    <begin>
                                      <if fn="autohead.c" ln="261">
                                        <cond>
                                          <binary op="&amp;&amp;">
                                            <left>
                                              <binary op="==">
                                                <left>
                                                  <getindex>
                                                    <array>
                                                      <ref name="s"/>
                                                    </array>
                                                    <index>
                                                      <int value="0"/>
                                                    </index>
                                                  </getindex>
                                                </left>
                                                <right>
                                                  <charstring value="\"/>
                                                </right>
                                              </binary>
                                            </left>
                                            <right>
                                              <binary op="&lt;=">
                                                <left>
                                                  <getindex>
                                                    <array>
                                                      <ref name="s"/>
                                                    </array>
                                                    <index>
                                                      <int value="1"/>
                                                    </index>
                                                  </getindex>
                                                </left>
                                                <right>
                                                  <charstring value="&#32;"/>
                                                </right>
                                              </binary>
                                            </right>
                                          </binary>
                                        </cond>
                                        <then>
                                          <begin>
                                            <funcall name="fgets" fn="autohead.c" ln="263">
                                              <args>
                                                <ref name="buf"/>
                                                <int value="255"/>
                                                <ref name="fd"/>
                                              </args>
                                            </funcall>
                                            <assign fn="autohead.c" ln="264">
                                              <left>
                                                <ref name="s"/>
                                              </left>
                                              <right>
                                                <ref name="buf"/>
                                              </right>
                                            </assign>
                                            <while fn="autohead.c" ln="265">
                                              <cond>
                                                <binary op="&amp;&amp;">
                                                  <left>
                                                    <unary op="*">
                                                      <value>
                                                        <ref name="s"/>
                                                      </value>
                                                    </unary>
                                                  </left>
                                                  <right>
                                                    <binary op="&lt;=">
                                                      <left>
                                                        <unary op="*">
                                                          <value>
                                                            <ref name="s"/>
                                                          </value>
                                                        </unary>
                                                      </left>
                                                      <right>
                                                        <charstring value="&#32;"/>
                                                      </right>
                                                    </binary>
                                                  </right>
                                                </binary>
                                              </cond>
                                              <body>
                                                <postinc fn="autohead.c" ln="265">
                                                  <expr>
                                                    <ref name="s"/>
                                                  </expr>
                                                </postinc>
                                              </body>
                                            </while>
                                            <if fn="autohead.c" ln="266">
                                              <cond>
                                                <unary op="!">
                                                  <value>
                                                    <funcall name="strncmp">
                                                      <args>
                                                        <ref name="s"/>
                                                        <string value="//"/>
                                                        <int value="2"/>
                                                      </args>
                                                    </funcall>
                                                  </value>
                                                </unary>
                                              </cond>
                                              <then>
                                                <assign op="+" fn="autohead.c" ln="266">
                                                  <left>
                                                    <ref name="s"/>
                                                  </left>
                                                  <right>
                                                    <int value="2"/>
                                                  </right>
                                                </assign>
                                              </then>
                                            </if>
                                            <continue fn="autohead.c" ln="267"/>
                                          </begin>
                                        </then>
                                      </if>
                                      <if fn="autohead.c" ln="269">
                                        <cond>
                                          <binary op="==">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="s"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#13;"/>
                                            </right>
                                          </binary>
                                        </cond>
                                        <then>
                                          <break fn="autohead.c" ln="269"/>
                                        </then>
                                      </if>
                                      <if fn="autohead.c" ln="270">
                                        <cond>
                                          <binary op="==">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="s"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#10;"/>
                                            </right>
                                          </binary>
                                        </cond>
                                        <then>
                                          <break fn="autohead.c" ln="270"/>
                                        </then>
                                      </if>
                                      <assign fn="autohead.c" ln="271">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <postinc>
                                                <expr>
                                                  <ref name="t"/>
                                                </expr>
                                              </postinc>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <unary op="*">
                                            <value>
                                              <postinc>
                                                <expr>
                                                  <ref name="s"/>
                                                </expr>
                                              </postinc>
                                            </value>
                                          </unary>
                                        </right>
                                      </assign>
                                    </begin>
                                  </body>
                                </while>
                                <assign fn="autohead.c" ln="273">
                                  <left>
                                    <unary op="*">
                                      <value>
                                        <postinc>
                                          <expr>
                                            <ref name="t"/>
                                          </expr>
                                        </postinc>
                                      </value>
                                    </unary>
                                  </left>
                                  <right>
                                    <int value="0"/>
                                  </right>
                                </assign>
                                <funcall name="printf" fn="autohead.c" ln="275">
                                  <args>
                                    <string value="/*--&#10;Cat %s&#10;Text&#10;&#9;%s&#10;&#9;%s&#10;--*/&#10;"/>
                                    <ref name="cat"/>
                                    <ref name="buf3"/>
                                    <ref name="buf4"/>
                                  </args>
                                </funcall>
                              </begin>
                            </then>
                          </if>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="285">
                        <cond>
                          <ref name="pds"/>
                        </cond>
                        <then>
                          <continue fn="autohead.c" ln="285"/>
                        </then>
                      </if>
                      <assign fn="autohead.c" ln="287">
                        <left>
                          <ref name="s"/>
                        </left>
                        <right>
                          <ref name="buf"/>
                        </right>
                      </assign>
                      <assign fn="autohead.c" ln="288">
                        <left>
                          <ref name="isapi"/>
                        </left>
                        <right>
                          <int value="0"/>
                        </right>
                      </assign>
                      <if fn="autohead.c" ln="290">
                        <cond>
                          <ref name="api"/>
                        </cond>
                        <then>
                          <begin>
                            <if fn="autohead.c" ln="292">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <funcall name="strncmp">
                                      <args>
                                        <ref name="s"/>
                                        <ref name="api"/>
                                        <funcall name="strlen">
                                          <args>
                                            <ref name="api"/>
                                          </args>
                                        </funcall>
                                      </args>
                                    </funcall>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <begin>
                                  <if fn="autohead.c" ln="294">
                                    <cond>
                                      <binary op="==">
                                        <left>
                                          <ref name="amod"/>
                                        </left>
                                        <right>
                                          <int value="2"/>
                                        </right>
                                      </binary>
                                    </cond>
                                    <then>
                                      <continue fn="autohead.c" ln="294"/>
                                    </then>
                                  </if>
                                  <assign op="+" fn="autohead.c" ln="296">
                                    <left>
                                      <ref name="s"/>
                                    </left>
                                    <right>
                                      <funcall name="strlen">
                                        <args>
                                          <ref name="api"/>
                                        </args>
                                      </funcall>
                                    </right>
                                  </assign>
                                  <while fn="autohead.c" ln="297">
                                    <cond>
                                      <binary op="&amp;&amp;">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <ref name="s"/>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <binary op="&lt;=">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="s"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#32;"/>
                                            </right>
                                          </binary>
                                        </right>
                                      </binary>
                                    </cond>
                                    <body>
                                      <postinc fn="autohead.c" ln="297">
                                        <expr>
                                          <ref name="s"/>
                                        </expr>
                                      </postinc>
                                    </body>
                                  </while>
                                  <assign fn="autohead.c" ln="298">
                                    <left>
                                      <ref name="isapi"/>
                                    </left>
                                    <right>
                                      <int value="1"/>
                                    </right>
                                  </assign>
                                </begin>
                              </then>
                              <else>
                                <begin>
                                  <if fn="autohead.c" ln="301">
                                    <cond>
                                      <binary op="==">
                                        <left>
                                          <ref name="amod"/>
                                        </left>
                                        <right>
                                          <int value="1"/>
                                        </right>
                                      </binary>
                                    </cond>
                                    <then>
                                      <continue fn="autohead.c" ln="301"/>
                                    </then>
                                  </if>
                                </begin>
                              </else>
                            </if>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="305">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strncmp">
                                <args>
                                  <ref name="s"/>
                                  <string value="static"/>
                                  <funcall name="strlen">
                                    <args>
                                      <string value="static"/>
                                    </args>
                                  </funcall>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <continue fn="autohead.c" ln="306"/>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="308">
                        <cond>
                          <binary op="&lt;=">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value="&#32;"/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <continue fn="autohead.c" ln="308"/>
                        </then>
                      </if>
                      <while fn="autohead.c" ln="309">
                        <cond>
                          <funcall name="symchar">
                            <args>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </args>
                          </funcall>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="309">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <while fn="autohead.c" ln="310">
                        <cond>
                          <binary op="&amp;&amp;">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <binary op="&lt;=">
                                <left>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </left>
                                <right>
                                  <charstring value="&#32;"/>
                                </right>
                              </binary>
                            </right>
                          </binary>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="310">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <while fn="autohead.c" ln="312">
                        <cond>
                          <binary op="==">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value="*"/>
                            </right>
                          </binary>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="312">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <if fn="autohead.c" ln="313">
                        <cond>
                          <binary op="||">
                            <left>
                              <unary op="!">
                                <value>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <binary op="==">
                                <left>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </left>
                                <right>
                                  <charstring value="("/>
                                </right>
                              </binary>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <continue fn="autohead.c" ln="313"/>
                        </then>
                      </if>
                      <while fn="autohead.c" ln="314">
                        <cond>
                          <binary op="&amp;&amp;">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <funcall name="symchar">
                                <args>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </args>
                              </funcall>
                            </right>
                          </binary>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="314">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <if fn="autohead.c" ln="316">
                        <cond>
                          <binary op="&amp;&amp;">
                            <left>
                              <binary op="||">
                                <left>
                                  <binary op="==">
                                    <left>
                                      <unary op="*">
                                        <value>
                                          <ref name="s"/>
                                        </value>
                                      </unary>
                                    </left>
                                    <right>
                                      <charstring value="="/>
                                    </right>
                                  </binary>
                                </left>
                                <right>
                                  <binary op="==">
                                    <left>
                                      <unary op="*">
                                        <value>
                                          <ref name="s"/>
                                        </value>
                                      </unary>
                                    </left>
                                    <right>
                                      <charstring value=";"/>
                                    </right>
                                  </binary>
                                </right>
                              </binary>
                            </left>
                            <right>
                              <ref name="isapi"/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <begin>
                            <linecomment value="special case: API variables are exported" fn="autohead.c" ln="319"/>
                            <assign fn="autohead.c" ln="319">
                              <left>
                                <ref name="t"/>
                              </left>
                              <right>
                                <ref name="s"/>
                              </right>
                            </assign>
                            <while fn="autohead.c" ln="320">
                              <cond>
                                <binary op="&amp;&amp;">
                                  <left>
                                    <unary op="*">
                                      <value>
                                        <ref name="s"/>
                                      </value>
                                    </unary>
                                  </left>
                                  <right>
                                    <binary op="!=">
                                      <left>
                                        <unary op="*">
                                          <value>
                                            <ref name="s"/>
                                          </value>
                                        </unary>
                                      </left>
                                      <right>
                                        <charstring value="/"/>
                                      </right>
                                    </binary>
                                  </right>
                                </binary>
                              </cond>
                              <body>
                                <postinc fn="autohead.c" ln="320">
                                  <expr>
                                    <ref name="s"/>
                                  </expr>
                                </postinc>
                              </body>
                            </while>
                            <if fn="autohead.c" ln="321">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <funcall name="strncmp">
                                      <args>
                                        <ref name="s"/>
                                        <string value="//AH:"/>
                                        <int value="5"/>
                                      </args>
                                    </funcall>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <begin>
                                  <assign op="+" fn="autohead.c" ln="323">
                                    <left>
                                      <ref name="s"/>
                                    </left>
                                    <right>
                                      <int value="5"/>
                                    </right>
                                  </assign>
                                  <while fn="autohead.c" ln="324">
                                    <cond>
                                      <binary op="&amp;&amp;">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <ref name="s"/>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <binary op="&lt;=">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="s"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#32;"/>
                                            </right>
                                          </binary>
                                        </right>
                                      </binary>
                                    </cond>
                                    <body>
                                      <postinc fn="autohead.c" ln="324">
                                        <expr>
                                          <ref name="s"/>
                                        </expr>
                                      </postinc>
                                    </body>
                                  </while>
                                  <if fn="autohead.c" ln="325">
                                    <cond>
                                      <unary op="!">
                                        <value>
                                          <funcall name="strcmp">
                                            <args>
                                              <ref name="s"/>
                                              <string value="ignore"/>
                                            </args>
                                          </funcall>
                                        </value>
                                      </unary>
                                    </cond>
                                    <then>
                                      <continue fn="autohead.c" ln="325"/>
                                    </then>
                                  </if>
                                </begin>
                              </then>
                            </if>
                            <assign fn="autohead.c" ln="327">
                              <left>
                                <ref name="s"/>
                              </left>
                              <right>
                                <ref name="t"/>
                              </right>
                            </assign>
                            <assign fn="autohead.c" ln="329">
                              <left>
                                <unary op="*">
                                  <value>
                                    <ref name="s"/>
                                  </value>
                                </unary>
                              </left>
                              <right>
                                <int value="0"/>
                              </right>
                            </assign>
                            <if fn="autohead.c" ln="330">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <ref name="doc"/>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <funcall name="printf" fn="autohead.c" ln="330">
                                  <args>
                                    <string value="%s;&#10;"/>
                                    <ref name="buf"/>
                                  </args>
                                </funcall>
                              </then>
                            </if>
                            <continue fn="autohead.c" ln="332"/>
                          </begin>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="335">
                        <cond>
                          <binary op="==">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value="&#32;"/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <postinc fn="autohead.c" ln="335">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </then>
                      </if>
                      <if fn="autohead.c" ln="336">
                        <cond>
                          <binary op="!=">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value="("/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <continue fn="autohead.c" ln="336"/>
                        </then>
                      </if>
                      <assign fn="autohead.c" ln="338">
                        <left>
                          <ref name="t"/>
                        </left>
                        <right>
                          <ref name="s"/>
                        </right>
                      </assign>
                      <while fn="autohead.c" ln="339">
                        <cond>
                          <binary op="&amp;&amp;">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <binary op="!=">
                                <left>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </left>
                                <right>
                                  <charstring value="/"/>
                                </right>
                              </binary>
                            </right>
                          </binary>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="339">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <if fn="autohead.c" ln="340">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strncmp">
                                <args>
                                  <ref name="s"/>
                                  <string value="//AH:"/>
                                  <int value="5"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <linecomment value="&#9;&#9;&#9;&#9;fprintf(stderr, &quot;//AH tag %s %d\n&quot;," fn="autohead.c" ln="344"/>
                            <linecomment value="&#9;&#9;&#9;&#9;&#9;argv[i], l);" fn="autohead.c" ln="344"/>
                            <assign op="+" fn="autohead.c" ln="344">
                              <left>
                                <ref name="s"/>
                              </left>
                              <right>
                                <int value="5"/>
                              </right>
                            </assign>
                            <while fn="autohead.c" ln="345">
                              <cond>
                                <binary op="&amp;&amp;">
                                  <left>
                                    <unary op="*">
                                      <value>
                                        <ref name="s"/>
                                      </value>
                                    </unary>
                                  </left>
                                  <right>
                                    <binary op="&lt;=">
                                      <left>
                                        <unary op="*">
                                          <value>
                                            <ref name="s"/>
                                          </value>
                                        </unary>
                                      </left>
                                      <right>
                                        <charstring value="&#32;"/>
                                      </right>
                                    </binary>
                                  </right>
                                </binary>
                              </cond>
                              <body>
                                <postinc fn="autohead.c" ln="345">
                                  <expr>
                                    <ref name="s"/>
                                  </expr>
                                </postinc>
                              </body>
                            </while>
                            <if fn="autohead.c" ln="346">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <funcall name="strcmp">
                                      <args>
                                        <ref name="s"/>
                                        <string value="ignore"/>
                                      </args>
                                    </funcall>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <continue fn="autohead.c" ln="346"/>
                              </then>
                            </if>
                          </begin>
                        </then>
                      </if>
                      <assign fn="autohead.c" ln="348">
                        <left>
                          <ref name="s"/>
                        </left>
                        <right>
                          <ref name="t"/>
                        </right>
                      </assign>
                      <if fn="autohead.c" ln="350">
                        <cond>
                          <binary op="==">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value="("/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <postinc fn="autohead.c" ln="350">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </then>
                      </if>
                      <assign fn="autohead.c" ln="351">
                        <left>
                          <ref name="j"/>
                        </left>
                        <right>
                          <int value="1"/>
                        </right>
                      </assign>
                      <while fn="autohead.c" ln="352">
                        <cond>
                          <ref name="j"/>
                        </cond>
                        <body>
                          <begin>
                            <if fn="autohead.c" ln="354">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <unary op="*">
                                      <value>
                                        <ref name="s"/>
                                      </value>
                                    </unary>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <begin>
                                  <funcall name="memset" fn="autohead.c" ln="356">
                                    <args>
                                      <ref name="buf2"/>
                                      <int value="0"/>
                                      <int value="256"/>
                                    </args>
                                  </funcall>
                                  <funcall name="fgets" fn="autohead.c" ln="357">
                                    <args>
                                      <ref name="buf2"/>
                                      <int value="255"/>
                                      <ref name="fd"/>
                                    </args>
                                  </funcall>
                                  <postinc fn="autohead.c" ln="358">
                                    <expr>
                                      <ref name="l"/>
                                    </expr>
                                  </postinc>
                                  <assign fn="autohead.c" ln="360">
                                    <left>
                                      <ref name="t"/>
                                    </left>
                                    <right>
                                      <ref name="buf2"/>
                                    </right>
                                  </assign>
                                  <while fn="autohead.c" ln="361">
                                    <cond>
                                      <binary op="&amp;&amp;">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <ref name="t"/>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <binary op="&lt;=">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="t"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#32;"/>
                                            </right>
                                          </binary>
                                        </right>
                                      </binary>
                                    </cond>
                                    <body>
                                      <postinc fn="autohead.c" ln="361">
                                        <expr>
                                          <ref name="t"/>
                                        </expr>
                                      </postinc>
                                    </body>
                                  </while>
                                  <assign fn="autohead.c" ln="363">
                                    <left>
                                      <ref name="s2"/>
                                    </left>
                                    <right>
                                      <ref name="t"/>
                                    </right>
                                  </assign>
                                  <assign fn="autohead.c" ln="364">
                                    <left>
                                      <ref name="t"/>
                                    </left>
                                    <right>
                                      <ref name="s"/>
                                    </right>
                                  </assign>
                                  <while fn="autohead.c" ln="365">
                                    <cond>
                                      <binary op="&amp;&amp;">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <ref name="s2"/>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <binary op="!=">
                                            <left>
                                              <unary op="*">
                                                <value>
                                                  <ref name="s2"/>
                                                </value>
                                              </unary>
                                            </left>
                                            <right>
                                              <charstring value="&#10;"/>
                                            </right>
                                          </binary>
                                        </right>
                                      </binary>
                                    </cond>
                                    <body>
                                      <assign fn="autohead.c" ln="365">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <postinc>
                                                <expr>
                                                  <ref name="t"/>
                                                </expr>
                                              </postinc>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <unary op="*">
                                            <value>
                                              <postinc>
                                                <expr>
                                                  <ref name="s2"/>
                                                </expr>
                                              </postinc>
                                            </value>
                                          </unary>
                                        </right>
                                      </assign>
                                    </body>
                                  </while>
                                  <assign fn="autohead.c" ln="366">
                                    <left>
                                      <unary op="*">
                                        <value>
                                          <postinc>
                                            <expr>
                                              <ref name="t"/>
                                            </expr>
                                          </postinc>
                                        </value>
                                      </unary>
                                    </left>
                                    <right>
                                      <charstring value="&#32;"/>
                                    </right>
                                  </assign>
                                  <assign fn="autohead.c" ln="367">
                                    <left>
                                      <unary op="*">
                                        <value>
                                          <postinc>
                                            <expr>
                                              <ref name="t"/>
                                            </expr>
                                          </postinc>
                                        </value>
                                      </unary>
                                    </left>
                                    <right>
                                      <int value="0"/>
                                    </right>
                                  </assign>
                                </begin>
                              </then>
                              <else>
                                <begin>
                                  <if fn="autohead.c" ln="370">
                                    <cond>
                                      <binary op="==">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <ref name="s"/>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <charstring value="("/>
                                        </right>
                                      </binary>
                                    </cond>
                                    <then>
                                      <postinc fn="autohead.c" ln="370">
                                        <expr>
                                          <ref name="j"/>
                                        </expr>
                                      </postinc>
                                    </then>
                                  </if>
                                  <if fn="autohead.c" ln="371">
                                    <cond>
                                      <binary op="==">
                                        <left>
                                          <unary op="*">
                                            <value>
                                              <ref name="s"/>
                                            </value>
                                          </unary>
                                        </left>
                                        <right>
                                          <charstring value=")"/>
                                        </right>
                                      </binary>
                                    </cond>
                                    <then>
                                      <postdec fn="autohead.c" ln="371">
                                        <expr>
                                          <ref name="j"/>
                                        </expr>
                                      </postdec>
                                    </then>
                                  </if>
                                  <postinc fn="autohead.c" ln="372">
                                    <expr>
                                      <ref name="s"/>
                                    </expr>
                                  </postinc>
                                </begin>
                              </else>
                            </if>
                          </begin>
                        </body>
                      </while>
                      <assign fn="autohead.c" ln="375">
                        <left>
                          <ref name="t"/>
                        </left>
                        <right>
                          <ref name="s"/>
                        </right>
                      </assign>
                      <while fn="autohead.c" ln="376">
                        <cond>
                          <binary op="&amp;&amp;">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <binary op="!=">
                                <left>
                                  <unary op="*">
                                    <value>
                                      <ref name="s"/>
                                    </value>
                                  </unary>
                                </left>
                                <right>
                                  <charstring value="/"/>
                                </right>
                              </binary>
                            </right>
                          </binary>
                        </cond>
                        <body>
                          <postinc fn="autohead.c" ln="376">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </body>
                      </while>
                      <if fn="autohead.c" ln="377">
                        <cond>
                          <unary op="!">
                            <value>
                              <funcall name="strncmp">
                                <args>
                                  <ref name="s"/>
                                  <string value="//AH:"/>
                                  <int value="5"/>
                                </args>
                              </funcall>
                            </value>
                          </unary>
                        </cond>
                        <then>
                          <begin>
                            <funcall name="fprintf" fn="autohead.c" ln="379">
                              <args>
                                <unary op="&amp;">
                                  <value>
                                    <getindex>
                                      <array>
                                        <funcall name="__iob_func">
                                          <args/>
                                        </funcall>
                                      </array>
                                      <index>
                                        <int value="2"/>
                                      </index>
                                    </getindex>
                                  </value>
                                </unary>
                                <string value="//AH tag %s %d&#10;"/>
                                <getindex>
                                  <array>
                                    <ref name="argv"/>
                                  </array>
                                  <index>
                                    <ref name="i"/>
                                  </index>
                                </getindex>
                                <ref name="l"/>
                              </args>
                            </funcall>
                            <assign op="+" fn="autohead.c" ln="381">
                              <left>
                                <ref name="s"/>
                              </left>
                              <right>
                                <int value="5"/>
                              </right>
                            </assign>
                            <while fn="autohead.c" ln="382">
                              <cond>
                                <binary op="&amp;&amp;">
                                  <left>
                                    <unary op="*">
                                      <value>
                                        <ref name="s"/>
                                      </value>
                                    </unary>
                                  </left>
                                  <right>
                                    <binary op="&lt;=">
                                      <left>
                                        <unary op="*">
                                          <value>
                                            <ref name="s"/>
                                          </value>
                                        </unary>
                                      </left>
                                      <right>
                                        <charstring value="&#32;"/>
                                      </right>
                                    </binary>
                                  </right>
                                </binary>
                              </cond>
                              <body>
                                <postinc fn="autohead.c" ln="382">
                                  <expr>
                                    <ref name="s"/>
                                  </expr>
                                </postinc>
                              </body>
                            </while>
                            <if fn="autohead.c" ln="383">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <funcall name="strncmp">
                                      <args>
                                        <ref name="s"/>
                                        <string value="ignore"/>
                                        <int value="6"/>
                                      </args>
                                    </funcall>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <continue fn="autohead.c" ln="383"/>
                              </then>
                            </if>
                            <if fn="autohead.c" ln="385">
                              <cond>
                                <binary op="&amp;&amp;">
                                  <left>
                                    <ref name="prx"/>
                                  </left>
                                  <right>
                                    <funcall name="strncmp">
                                      <args>
                                        <ref name="s"/>
                                        <string value="proxy"/>
                                        <int value="5"/>
                                      </args>
                                    </funcall>
                                  </right>
                                </binary>
                              </cond>
                              <then>
                                <continue fn="autohead.c" ln="385"/>
                              </then>
                            </if>
                            <if fn="autohead.c" ln="386">
                              <cond>
                                <unary op="!">
                                  <value>
                                    <funcall name="strncmp">
                                      <args>
                                        <ref name="s"/>
                                        <string value="proxy"/>
                                        <int value="5"/>
                                      </args>
                                    </funcall>
                                  </value>
                                </unary>
                              </cond>
                              <then>
                                <assign fn="autohead.c" ln="386">
                                  <left>
                                    <ref name="isapi"/>
                                  </left>
                                  <right>
                                    <int value="2"/>
                                  </right>
                                </assign>
                              </then>
                            </if>
                          </begin>
                        </then>
                        <else>
                          <begin>
                            <if fn="autohead.c" ln="389">
                              <cond>
                                <ref name="prx"/>
                              </cond>
                              <then>
                                <continue fn="autohead.c" ln="389"/>
                              </then>
                            </if>
                          </begin>
                        </else>
                      </if>
                      <assign fn="autohead.c" ln="391">
                        <left>
                          <ref name="s"/>
                        </left>
                        <right>
                          <ref name="t"/>
                        </right>
                      </assign>
                      <if fn="autohead.c" ln="393">
                        <cond>
                          <binary op="==">
                            <left>
                              <unary op="*">
                                <value>
                                  <ref name="s"/>
                                </value>
                              </unary>
                            </left>
                            <right>
                              <charstring value=")"/>
                            </right>
                          </binary>
                        </cond>
                        <then>
                          <postinc fn="autohead.c" ln="393">
                            <expr>
                              <ref name="s"/>
                            </expr>
                          </postinc>
                        </then>
                      </if>
                      <assign fn="autohead.c" ln="394">
                        <left>
                          <unary op="*">
                            <value>
                              <ref name="s"/>
                            </value>
                          </unary>
                        </left>
                        <right>
                          <int value="0"/>
                        </right>
                      </assign>
                      <if fn="autohead.c" ln="396">
                        <cond>
                          <ref name="doc"/>
                        </cond>
                        <then>
                          <begin>
                            <funcall name="printf" fn="autohead.c" ln="398">
                              <args>
                                <string value="/*--&#10;Cat %s&#10;Text&#10;&#9;%s;&#10;&#9;%s:%d&#10;--*/&#10;"/>
                                <ref name="cat"/>
                                <ref name="buf"/>
                                <getindex>
                                  <array>
                                    <ref name="argv"/>
                                  </array>
                                  <index>
                                    <ref name="i"/>
                                  </index>
                                </getindex>
                                <ref name="l"/>
                              </args>
                            </funcall>
                          </begin>
                        </then>
                        <else>
                          <begin>
                            <if fn="autohead.c" ln="408">
                              <cond>
                                <ref name="prx"/>
                              </cond>
                              <then>
                                <begin>
                                  <funcall name="prx_def" fn="autohead.c" ln="408">
                                    <args>
                                      <ref name="buf"/>
                                    </args>
                                  </funcall>
                                  <continue fn="autohead.c" ln="408"/>
                                </begin>
                              </then>
                            </if>
                            <if fn="autohead.c" ln="409">
                              <cond>
                                <binary op="==">
                                  <left>
                                    <ref name="isapi"/>
                                  </left>
                                  <right>
                                    <int value="2"/>
                                  </right>
                                </binary>
                              </cond>
                              <then>
                                <funcall name="printf" fn="autohead.c" ln="409">
                                  <args>
                                    <string value="/*AHPRX:*/ "/>
                                    <ref name="buf"/>
                                  </args>
                                </funcall>
                              </then>
                            </if>
                            <funcall name="printf" fn="autohead.c" ln="410">
                              <args>
                                <string value="%s;&#10;"/>
                                <ref name="buf"/>
                              </args>
                            </funcall>
                          </begin>
                        </else>
                      </if>
                    </begin>
                  </body>
                </while>
                <funcall name="fclose" fn="autohead.c" ln="413">
                  <args>
                    <ref name="fd"/>
                  </args>
                </funcall>
              </begin>
            </body>
          </for>
          <return fn="autohead.c" ln="415">
            <value>
              <int value="0"/>
            </value>
          </return>
        </begin>
      </body>
    </defun>
  </body>
</module>
