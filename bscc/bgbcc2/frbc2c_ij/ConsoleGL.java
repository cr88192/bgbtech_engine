import java.lang.*;

import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;

import org.lwjgl.*;
import java.nio.*;

import static org.lwjgl.opengl.GL11.*;

public class ConsoleGL
{
	public ConsoleGL(int sxs, int sys)
	{
		initStatic();
		
		conXs=sxs/8; conYs=sys/8;
		conChar=new char[conYs][conXs];
		conClr=new short[conYs][conXs];
		
		curX=0; curY=0;
		curClr=0x0007;
//		curClr=0x0070;
		
		emitString("Console Initialized\n");
	}

	private static void initStatic()
	{
		int[] texa=new int[1];
//		byte[] pixa=new byte[128*128*4];
		byte[] pixa;
		IntBuffer texb;
		ByteBuffer pixb;
		int i, j, k, l, c, d;
		
		if(conTex>=0)
			return;
		
		pixb=ByteBuffer.allocateDirect(128*128*4);
//		pixa=pixb.array();

		for(i=0; i<(128*128*4); i++)
			{ pixb.put(i, (byte)0); }

		for(i=0; i<16; i++)
			for(j=0; j<16; j++)
		{
			c=(i*16+j);
			if(c<0x20)
				continue;
			if(c>0x7F)
				continue;
			for(k=0; k<8; k++)
			{
				for(l=0; l<8; l++)
				{
//					if((conFont[c*8+k]&(0x80>>l))!=0)
					if(((conFont[c-0x20]>>((7-k)*8))&(0x80>>l))!=0)
					{
						d=((127-(i*8+k))*128+(j*8+l))*4;
//						d=((i*8+k)*128+(j*8+l))*4;
//						d=((i*8+(7-k))*128+(j*8+l))*4;

//						pixa[d+0]=(byte)255;	pixa[d+1]=(byte)255;
//						pixa[d+2]=(byte)255;	pixa[d+3]=(byte)255;

						pixb.put(d+0, (byte)255);	pixb.put(d+1, (byte)255);
						pixb.put(d+2, (byte)255);	pixb.put(d+3, (byte)255);
					}
				}
			}
		}
		
//		texb=IntBuffer.wrap(texa);
//		texb=IntBuffer.allocateDirect(1);
		texb=ByteBuffer.allocateDirect(4).asIntBuffer();
		glGenTextures(texb);
		conTex=texb.get(0);
				
		glBindTexture(GL_TEXTURE_2D, conTex);
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 128, 128, 0,
			GL_RGBA, GL_UNSIGNED_BYTE, pixb);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

//		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 128, 128, 0,
//			GL_RGBA, GL_UNSIGNED_BYTE, ByteBuffer.wrap(pixa));
	}

	public void setConFgColor16(int clr)
	{
		double f0, f1;
		
		if(((clr&0x80)!=0) && blinkState)
		{
			glColor4d(0.0, 0.0, 0.0, 0.0);
			return;
		}
		
		if((clr&0x08)!=0)
		{
			f1=1.00;
			f0=0.25;
		}else
		{
			f1=0.75;
			f0=0.00;
		}

		glColor4d(
			((clr&0x04)!=0)?f1:f0,
			((clr&0x02)!=0)?f1:f0,
			((clr&0x01)!=0)?f1:f0,
			1.0);
		
//		glColor4d(
//			((clr&0x04)!=0)?(((clr&0x08)!=0)?1.0:0.5):0.0,
//			((clr&0x02)!=0)?(((clr&0x08)!=0)?1.0:0.5):0.0,
//			((clr&0x01)!=0)?(((clr&0x08)!=0)?1.0:0.5):0.0,
//			1.0);
	}

	public void setConBgColor16(int clr)
	{
		glColor4d(
			((clr&0x40)!=0)?1.0:0.0,
			((clr&0x20)!=0)?1.0:0.0,
			((clr&0x10)!=0)?1.0:0.0,
			1.0);
	}

	public void render()
	{
		renderBackground();
		renderChars();
	}

	public void renderBackground()
	{
		double x, y;
		int i, j, k, c, ch, cv;

		glDisable(GL_TEXTURE_2D);

		x=-320; y=-240;

		glBegin(GL_QUADS);
		for(i=0; i<conYs; i++)
			for(j=0; j<conXs; j++)
		{
			//if(conChar[conYs-i-1][j]==0)
			//	continue;
		
			setConBgColor16((int)conClr[conYs-i-1][j]);
			glVertex2d(x+(j+0)*8.0, y+(i+0)*8.0);
			glVertex2d(x+(j+1)*8.0, y+(i+0)*8.0);
			glVertex2d(x+(j+1)*8.0, y+(i+1)*8.0);
			glVertex2d(x+(j+0)*8.0, y+(i+1)*8.0);
		}
		glEnd();
	}

	public void renderChars()
	{
		double x, y;
		int i, j, k, c, ch, cv;

		x=-320; y=-240;

		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, conTex);

		glBegin(GL_QUADS);
		for(i=0; i<conYs; i++)
			for(j=0; j<conXs; j++)
		{
			if(conChar[conYs-i-1][j]==0)
				continue;

			setConFgColor16((int)conClr[conYs-i-1][j]);
		
			c=conChar[conYs-i-1][j];
			ch=c&15;
			cv=(c>>4)&15;
			cv=15-cv;
		
			glTexCoord2d((ch+0)/16.0, (cv+0)/16.0);
			glVertex2d(x+(j+0)*8.0, y+(i+0)*8.0);

			glTexCoord2d((ch+1)/16.0, (cv+0)/16.0);
			glVertex2d(x+(j+1)*8.0, y+(i+0)*8.0);

			glTexCoord2d((ch+1)/16.0, (cv+1)/16.0);
			glVertex2d(x+(j+1)*8.0, y+(i+1)*8.0);

			glTexCoord2d((ch+0)/16.0, (cv+1)/16.0);
			glVertex2d(x+(j+0)*8.0, y+(i+1)*8.0);
		}
		
		if(true)
		{
			setConFgColor16(0x0087);

			i=conYs-curY-1; j=curX;
			c='_';
			ch=c&15;
			cv=(c>>4)&15;
			cv=15-cv;
		
			glTexCoord2d((ch+0)/16.0, (cv+0)/16.0);
			glVertex2d(x+(j+0)*8.0, y+(i+0)*8.0);
			glTexCoord2d((ch+1)/16.0, (cv+0)/16.0);
			glVertex2d(x+(j+1)*8.0, y+(i+0)*8.0);
			glTexCoord2d((ch+1)/16.0, (cv+1)/16.0);
			glVertex2d(x+(j+1)*8.0, y+(i+1)*8.0);
			glTexCoord2d((ch+0)/16.0, (cv+1)/16.0);
			glVertex2d(x+(j+0)*8.0, y+(i+1)*8.0);
		}

		glEnd();
		
//		glClearColor(color, color, color, 1f);
//		glClear(GL_COLOR_BUFFER_BIT);

//		color += direction * .05f;
	}

	public void conScrollUp()
	{
		int i, j, k;
		
		for(i=0; i<(conYs-1); i++)
			for(j=0; j<conXs; j++)
		{
			conChar[i][j]=conChar[i+1][j];
			conClr[i][j]=conClr[i+1][j];
		}
		curY--;
	}

	public void emitChar(char ch)
	{
		if(curEsc)
		{
			if(curCSI)
			{
				if((ch>='0') && (ch<='9'))
					{ curEscI=curEscI*10+(int)(ch-'0'); return; }
				if(ch==';')
				{
					curEscI2=curEscI1; curEscI1=curEscI0;
					curEscI0=curEscI; curEscI=0;
					return;
				}
				
				if((ch>='\u0040') && (ch<='\u007E'))
				{
					switch(ch)
					{
					case 'A':
						if(curEscI==0)
							curEscI=1;
						curY-=curEscI;
						if(curY<0)curY=0;
						break;
					case 'B':
						if(curEscI==0)
							curEscI=1;
						curY+=curEscI;
						if(curY>=conYs)curY=conYs-1;
						break;
					case 'C':
						if(curEscI==0)
							curEscI=1;
						curX+=curEscI;
						if(curX>=conXs)curX=conXs-1;
						break;
					case 'D':
						if(curEscI==0)
							curEscI=1;
						curX-=curEscI;
						if(curX<0)curX=0;
						break;
					case 'H':
					case 'f':
						curX=curEscI-1;
						curY=curEscI0-1;
						if(curX<0)curX=0;
						if(curY<0)curY=0;
						if(curX>=conXs)curX=conXs-1;
						if(curY>=conYs)curY=conYs-1;
						break;

					case 'm':
						switch(curEscI)
						{
						case 0: curClr=0x0007; break;
						case 1: curClr|=0x0008; break;
						case 5: curClr|=0x0080; break;
						case 22: curClr&=~0x0008; break;
						case 25: curClr&=~0x0080; break;
						case 30: curClr=(curClr&(~0x0007))|0x00; break;
						case 31: curClr=(curClr&(~0x0007))|0x04; break;
						case 32: curClr=(curClr&(~0x0007))|0x02; break;
						case 33: curClr=(curClr&(~0x0007))|0x06; break;
						case 34: curClr=(curClr&(~0x0007))|0x01; break;
						case 35: curClr=(curClr&(~0x0007))|0x05; break;
						case 36: curClr=(curClr&(~0x0007))|0x03; break;
						case 37: curClr=(curClr&(~0x0007))|0x07; break;
						case 39: curClr=(curClr&(~0x0007))|0x07; break;

						case 40: curClr=(curClr&(~0x0070))|0x00; break;
						case 41: curClr=(curClr&(~0x0070))|0x40; break;
						case 42: curClr=(curClr&(~0x0070))|0x20; break;
						case 43: curClr=(curClr&(~0x0070))|0x60; break;
						case 44: curClr=(curClr&(~0x0070))|0x10; break;
						case 45: curClr=(curClr&(~0x0070))|0x50; break;
						case 46: curClr=(curClr&(~0x0070))|0x30; break;
						case 47: curClr=(curClr&(~0x0070))|0x70; break;
						case 49: curClr=(curClr&(~0x0070))|0x00; break;
						}
						break;

					default:
						break;
					}
					
					curCSI=false;
					curEsc=false;
					return;
				}
			}

			if(ch=='[')
			{
				curCSI=true;
				curEscI=0; curEscI1=0; curEscI2=0;
				return;
			}

			if((ch>='\u0040') && (ch<='\u007E'))
			{
				curCSI=false;
				curEsc=false;
				return;
			}
			
			return;
		}
	
		switch(ch)
		{
		case '\u001F':
			curEsc=true; break;
		case '\b':
			curX--;
			if(curX<0)curX=0;
			conChar[curY][curX]=(char)0;
			break;
		case '\r':
			curX=0; break;
		case '\n':
			curX=0; curY++;
			while(curY>=conYs)
				conScrollUp();
			break;
		default:
			conChar[curY][curX]=ch;
			conClr[curY][curX]=(short)curClr;
			curX++;
			if(curX>=conXs)
				{ curX=0; curY++; }
			while(curY>=conYs)
				conScrollUp();
			break;
		}
	}

	public void emitString(String str)
	{
		int i, j, k;

		for(i=0; i<str.length(); i++)
			emitChar(str.charAt(i));
	}

	public void updateTick(double tick)
	{
		time+=tick;
		blinkState=(((int)(time*2))&1)!=0;
	}


	int curX, curY, curClr;
	int curEscI, curEscI0, curEscI1, curEscI2;
	boolean curEsc, curCSI;
	double time;
	boolean blinkState;

	char[][] conChar;
	short[][] conClr;
	int conXs, conYs;

	static int conTex=-1;

/*	static byte[] conFont={
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	//0x20 " "
		0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00,	//0x21 "!"
		0x00, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00,	//0x22 "\""
		0x00, 0x44, 0xFF, 0x44, 0x44, 0xFF, 0x44, 0x00,	//0x23 "#"
		0x10, 0x3C, 0x40, 0x3C, 0x04, 0x7C, 0x10, 0x00,	//0x24 "$"
		0x00, 0x44, 0x48, 0x10, 0x20, 0x44, 0x44, 0x00,	//0x25 "%"
		0x1C, 0x24, 0x1C, 0x38, 0x4F, 0x44, 0x3A, 0x00,	//0x26 "&"
		0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,	//0x27 "'"
		0x00, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x00,	//0x28 "("
		0x00, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x00,	//0x29 ")"
		0x00, 0x44, 0x3C, 0xFF, 0x3C, 0x44, 0x00, 0x00,	//0x2A "*"
		0x00, 0x10, 0x10, 0x7E, 0x10, 0x10, 0x00, 0x00,	//0x2B "+"
		0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20,	//0x2C ","
		0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,	//0x2D "-"
		0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00,	//0x2E "."
		0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00,	//0x2F "/"
		0x00, 0x38, 0x44, 0x4C, 0x74, 0x44, 0x38, 0x00,	//0x20 "0"
		0x00, 0x10, 0x30, 0x10, 0x10, 0x10, 0x7E, 0x00,	//0x31 "1"
		0x00, 0x3C, 0x44, 0x08, 0x10, 0x20, 0x7E, 0x00,	//0x32 "2"
		0x00, 0x7C, 0x08, 0x10, 0x08, 0x44, 0x3C, 0x00,	//0x33 "3"
		0x00, 0x08, 0x18, 0x3C, 0x48, 0x7E, 0x08, 0x00,	//0x34 "4"
		0x00, 0x7E, 0x40, 0x7C, 0x04, 0x44, 0x3C, 0x00,	//0x35 "5"
		0x00, 0x3C, 0x40, 0x7C, 0x44, 0x44, 0x38, 0x00,	//0x36 "6"
		0x00, 0x7E, 0x04, 0x08, 0x10, 0x20, 0x20, 0x00,	//0x37 "7"
		0x00, 0x3C, 0x44, 0x3C, 0x44, 0x44, 0x38, 0x00,	//0x38 "8"
		0x00, 0x3C, 0x44, 0x3E, 0x04, 0x08, 0x30, 0x00,	//0x39 "9"
		0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00,	//0x3A ":"
		0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x20,	//0x3B ";"
		0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,	//0x3C "<"
		0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00,	//0x3D "="
		0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40, 0x00,	//0x3E ">"
		0x00, 0x3C, 0x44, 0x08, 0x10, 0x00, 0x10, 0x00,	//0x3F "?"
		0x00, 0x3C, 0x44, 0x6E, 0x6E, 0x40, 0x3E, 0x00,	//0x40 "@"
		0x00, 0x10, 0x38, 0x44, 0x7C, 0x44, 0x44, 0x00,	//0x41 "A"
		0x00, 0x78, 0x44, 0x78, 0x44, 0x44, 0x78, 0x00,	//0x42 "B"
		0x00, 0x38, 0x44, 0x40, 0x40, 0x44, 0x38, 0x00,	//0x43 "C"
		0x00, 0x70, 0x48, 0x44, 0x44, 0x48, 0x70, 0x00,	//0x44 "D"
		0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x7E, 0x00,	//0x45 "E"
		0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x00,	//0x46 "F"
		0x00, 0x3E, 0x40, 0x40, 0x4E, 0x44, 0x3C, 0x00,	//0x47 "G"
		0x00, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x00,	//0x48 "H"
		0x00, 0x7E, 0x10, 0x10, 0x10, 0x10, 0x7E, 0x00,	//0x49 "I"
		0x00, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00,	//0x4A "J"
		0x00, 0x44, 0x48, 0x78, 0x70, 0x48, 0x44, 0x00,	//0x4B "K"
		0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00,	//0x4C "L"
		0x00, 0x42, 0x66, 0x6E, 0x4A, 0x42, 0x42, 0x00,	//0x4D "M"
		0x00, 0x44, 0x64, 0x54, 0x54, 0x4C, 0x44, 0x00,	//0x4E "N"
		0x00, 0x38, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,	//0x4F "O"
		0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x00,	//0x50 "P"
		0x00, 0x3C, 0x44, 0x44, 0x44, 0x48, 0x34, 0x00,	//0x51 "Q"
		0x00, 0x78, 0x44, 0x44, 0x78, 0x48, 0x44, 0x00,	//0x52 "R"
		0x00, 0x3C, 0x40, 0x3C, 0x04, 0x04, 0x78, 0x00,	//0x53 "S"
		0x00, 0x7E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00,	//0x54 "T"
		0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,	//0x55 "U"
		0x00, 0x44, 0x44, 0x44, 0x44, 0x38, 0x10, 0x00,	//0x56 "V"
		0x00, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x42, 0x00,	//0x57 "W"
		0x00, 0x44, 0x44, 0x38, 0x38, 0x44, 0x44, 0x00,	//0x58 "X"
		0x00, 0x44, 0x44, 0x38, 0x10, 0x10, 0x10, 0x00,	//0x59 "Y"
		0x00, 0x7C, 0x08, 0x10, 0x20, 0x40, 0x7C, 0x00,	//0x5A "Z"
		0x00, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x1E, 0x00,	//0x5B "["
		0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00,	//0x5C "\\"
		0x00, 0x78, 0x08, 0x08, 0x08, 0x08, 0x78, 0x00,	//0x5D "]"
		0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00,	//0x5E "^"
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,	//0x5F "_"
		0x00, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00,	//0x40 "`"
		0x00, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3E, 0x00,	//0x61 "a"
		0x00, 0x40, 0x40, 0x78, 0x44, 0x44, 0x78, 0x00,	//0x62 "b"
		0x00, 0x00, 0x38, 0x44, 0x40, 0x44, 0x38, 0x00,	//0x42 "c"
		0x00, 0x04, 0x04, 0x3C, 0x44, 0x44, 0x3C, 0x00,	//0x64 "d"
		0x00, 0x00, 0x38, 0x44, 0x7E, 0x40, 0x3C, 0x00,	//0x65 "e"
		0x00, 0x0E, 0x10, 0x3E, 0x10, 0x10, 0x10, 0x00,	//0x44 "f"
		0x00, 0x00, 0x38, 0x44, 0x44, 0x3C, 0x04, 0x78,	//0x67 "g"
		0x00, 0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x00,	//0x68 "h"
		0x00, 0x10, 0x00, 0x30, 0x10, 0x10, 0x38, 0x00,	//0x69 "i"
		0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x38,	//0x6A "j"
		0x00, 0x40, 0x44, 0x48, 0x70, 0x48, 0x44, 0x00,	//0x6B "k"
		0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00,	//0x48 "l"
		0x00, 0x00, 0x7C, 0x52, 0x52, 0x52, 0x42, 0x00,	//0x6D "m"
		0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00,	//0x6E "n"
		0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00,	//0x6F "o"
		0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40,	//0x70 "p"
		0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x04,	//0x71 "q"
		0x00, 0x40, 0x66, 0x70, 0x40, 0x40, 0x40, 0x00,	//0x72 "r"
		0x00, 0x00, 0x3C, 0x40, 0x38, 0x04, 0x78, 0x00,	//0x73 "s"
		0x00, 0x10, 0x7E, 0x10, 0x10, 0x10, 0x0E, 0x00,	//0x74 "t"
		0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00,	//0x75 "u"
		0x00, 0x00, 0x44, 0x44, 0x44, 0x38, 0x10, 0x00,	//0x76 "v"
		0x00, 0x00, 0x42, 0x52, 0x52, 0x3C, 0x24, 0x00,	//0x77 "w"
		0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00,	//0x78 "x"
		0x00, 0x00, 0x44, 0x44, 0x44, 0x38, 0x08, 0x70,	//0x79 "y"
		0x00, 0x00, 0x7C, 0x08, 0x10, 0x20, 0x7C, 0x00,	//0x7A "z"
		0x00, 0x0E, 0x10, 0x70, 0x10, 0x10, 0x0E, 0x00,	//0x7B "{"
		0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00,	//0x7C "|"
		0x00, 0x70, 0x10, 0x0E, 0x10, 0x10, 0x70, 0x00,	//0x7D "}"
		0x00, 0x77, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00,	//0x7E "~"
		0x00, 0x00, 0x00, 0x08, 0x1C, 0x36, 0x42, 0x7F	//0x7F "\x7F"
	}; */
	
	static final long[] conFont={
		0x0000000000000000L,	//0x20 " "
		0x0010101010001000L,	//0x21 "!"
		0x0044444400000000L,	//0x22 "\""
		0x0044FF4444FF4400L,	//0x23 "#"
		0x103C403C047C1000L,	//0x24 "$"
		0x0044481020444400L,	//0x25 "%"
		0x1C241C384F443A00L,	//0x26 "&"
		0x0010101000000000L,	//0x27 "'"
		0x0008101010100800L,	//0x28 "("
		0x0020101010102000L,	//0x29 ")"
		0x00443CFF3C440000L,	//0x2A "*"
		0x0010107E10100000L,	//0x2B "+"
		0x0000000000101020L,	//0x2C ","
		0x0000007E00000000L,	//0x2D "-"
		0x0000000000101000L,	//0x2E "."
		0x0002040810204000L,	//0x2F "/"
		0x0038444C74443800L,	//0x20 "0"
		0x0010301010107E00L,	//0x31 "1"
		0x003C440810207E00L,	//0x32 "2"
		0x007C081008443C00L,	//0x33 "3"
		0x0008183C487E0800L,	//0x34 "4"
		0x007E407C04443C00L,	//0x35 "5"
		0x003C407C44443800L,	//0x36 "6"
		0x007E040810202000L,	//0x37 "7"
		0x003C443C44443800L,	//0x38 "8"
		0x003C443E04083000L,	//0x39 "9"
		0x0000101000101000L,	//0x3A ":"
		0x0000101000101020L,	//0x3B ";"
		0x0408102010080400L,	//0x3C "<"
		0x00007E00007E0000L,	//0x3D "="
		0x4020100810204000L,	//0x3E ">"
		0x003C440810001000L,	//0x3F "?"
		0x003C446E6E403E00L,	//0x40 "@"
		0x001038447C444400L,	//0x41 "A"
		0x0078447844447800L,	//0x42 "B"
		0x0038444040443800L,	//0x43 "C"
		0x0070484444487000L,	//0x44 "D"
		0x007E407C40407E00L,	//0x45 "E"
		0x007E407C40404000L,	//0x46 "F"
		0x003E40404E443C00L,	//0x47 "G"
		0x0044447C44444400L,	//0x48 "H"
		0x007E101010107E00L,	//0x49 "I"
		0x0004040404443800L,	//0x4A "J"
		0x0044487870484400L,	//0x4B "K"
		0x0040404040407E00L,	//0x4C "L"
		0x0042666E4A424200L,	//0x4D "M"
		0x00446454544C4400L,	//0x4E "N"
		0x0038444444443800L,	//0x4F "O"
		0x0078444478404000L,	//0x50 "P"
		0x003C444444483400L,	//0x51 "Q"
		0x0078444478484400L,	//0x52 "R"
		0x003C403C04047800L,	//0x53 "S"
		0x007E101010101000L,	//0x54 "T"
		0x0044444444443800L,	//0x55 "U"
		0x0044444444381000L,	//0x56 "V"
		0x0042425A5A664200L,	//0x57 "W"
		0x0044443838444400L,	//0x58 "X"
		0x0044443810101000L,	//0x59 "Y"
		0x007C081020407C00L,	//0x5A "Z"
		0x001E101010101E00L,	//0x5B "["
		0x0040201008040200L,	//0x5C "\\"
		0x0078080808087800L,	//0x5D "]"
		0x0008142200000000L,	//0x5E "^"
		0x000000000000FF00L,	//0x5F "_"
		0x0020201000000000L,	//0x40 "`"
		0x000038043C443E00L,	//0x61 "a"
		0x0040407844447800L,	//0x62 "b"
		0x0000384440443800L,	//0x42 "c"
		0x0004043C44443C00L,	//0x64 "d"
		0x000038447E403C00L,	//0x65 "e"
		0x000E103E10101000L,	//0x44 "f"
		0x00003844443C0478L,	//0x67 "g"
		0x0040407844444400L,	//0x68 "h"
		0x0010003010103800L,	//0x69 "i"
		0x0004000404040438L,	//0x6A "j"
		0x0040444870484400L,	//0x6B "k"
		0x0030101010103800L,	//0x48 "l"
		0x00007C5252524200L,	//0x6D "m"
		0x0000784444444400L,	//0x6E "n"
		0x0000384444443800L,	//0x6F "o"
		0x0000784444784040L,	//0x70 "p"
		0x00003C44443C0404L,	//0x71 "q"
		0x0040667040404000L,	//0x72 "r"
		0x00003C4038047800L,	//0x73 "s"
		0x00107E1010100E00L,	//0x74 "t"
		0x0000444444443800L,	//0x75 "u"
		0x0000444444381000L,	//0x76 "v"
		0x00004252523C2400L,	//0x77 "w"
		0x0000442810284400L,	//0x78 "x"
		0x0000444444380870L,	//0x79 "y"
		0x00007C0810207C00L,	//0x7A "z"
		0x000E107010100E00L,	//0x7B "{"
		0x0010100010101000L,	//0x7C "|"
		0x0070100E10107000L,	//0x7D "}"
		0x0077DC0000000000L,	//0x7E "~"
		0x000000081C36427FL		//0x7F "\x7F"
	};

}
