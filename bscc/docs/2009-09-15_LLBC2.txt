Low Level ByteCode 2:

Idea:
Bytecode partially derived from EBC, and partially from x86 and x86-64.


Registers:
R0-R15, uniform 8/16/32/64 bit GPRs, with a width partially identified via a suffix.

R0B/R0W/R0D/R0Q
R0 will refer to a "neutral"/"defualt" size.


X0-X15 will be 128-bit registers.

R15/X15 will be aliased as a register 'Z', which in certain contexts may be used as a placeholder for "no register".

Reg=Z would indicate that Reg is required equal to Z.
Reg|=Z would indicate that Reg is unused if Z.


RMB: RegMem Block

Addressing:
Addressing will be based on an ModRM+SIB combined pair.


2.2.4:4.4: Mod.Sc.Idx:Base.Reg

Mod:
	0: Sc:
		0: Reg, Base[, Idx]
		1: Reg, [Base]
			Idx:
				0: [Base]
				1: [Base+Disp8]
				2: [Base+Disp32]
				3: [IP+Base]			(Base|=Z)
				4: [IP+Base+Disp8]		(Base|=Z)
				5: [IP+Base+Disp32]		(Base|=Z)
				6-15: (Resv)
		2/3: Resv
	1:	Reg, [Base+Idx*Scale+Disp32]		(Base,Idx|=Z)
	2:	Reg, [Base+Idx*Scale2+Disp32]		(Base,Idx|=Z)
	3:	(Resv)

Scale (SC): 0/1/2/3 -> 1/2/4/8
Scale2 (SC): 0/1/2/3 -> 16/Ptr/Resv/Resv


TCB: Type Config Byte

4.1.1.2 Type.Addr.Dir.Imm

Type:
	0: Int8
	1: Int16
	2: Int32
	3: Int64
	4: Float32
	5: Float64
	6: Float128
	7: Int128	/ WidePtr
	8: Packed Float
	9: Packed Double
	10: Native Int (pointer-sized)
	11-15: Resv

Addr: 0=Normal Addressing, 1=Wide Addressing
Dir: 0=Reg, RM; 1=RM, Reg
Imm: 0=None, 1=Imm8, 2=Imm(Size)


Change TCB is added via a prefix:
0x3F


Opcode:

0-191 (0x00-0xBF): Single byte opcodes
192-255 (0xC0-0xFF): 2-byte opcodes

op=*ip++;
if(op>191)op=((op-192)*256)+(*ip++);


Opcode Notation:
F00D: Opcode encoded in Hex
/R: RMB
/T: TCB


Arith Opcodes, common:
	Bit 5: Imm (if Bit 7=1)
	Bit 6: 0=32 bits; 1=64 bits
	Bit 7: 0=Reg, RM; 1=RM, Reg

Opcode List:
ADD		0C/R	r32, rm32
		4C/R	r64, rm64
		8C/R	rm32, r32
		CC/R	rm64, r64
		AC/R	rm32, imm32
		EC/R	rm64, imm64

AND		14/R	r32, rm32
		54/R	r64, rm64
		94/R	rm32, r32
		D4/R	rm64, r64
		B4/R	rm32, imm32
		F4/R	rm64, imm64

BREAK		00,ib
CALL		03/R

CMPEQ		05/R	r32, rm32
		45/R	r64, rm64
		85/R	rm32, r32
		C5/R	rm64, r64
		A5/R	rm32, imm32
		E5/R	rm64, imm64

CMPLE		06/R	r32, rm32
		46/R	r64, rm64
		86/R	rm32, r32
		C6/R	rm64, r64
		A6/R	rm32, imm32
		E6/R	rm64, imm64

CMPGE		07/R	r32, rm32
		47/R	r64, rm64
		87/R	rm32, r32
		C7/R	rm64, r64
		A7/R	rm32, imm32
		E7/R	rm64, imm64

CMPULE	08/R	r32, rm32
		48/R	r64, rm64
		88/R	rm32, r32
		C8/R	rm64, r64
		A8/R	rm32, imm32
		E8/R	rm64, imm64

CMPUGE	09/R	r32, rm32
		49/R	r64, rm64
		89/R	rm32, r32
		C9/R	rm64, r64
		A9/R	rm32, imm32
		E9/R	rm64, imm64

CMPU

DIV		10/R	r32, rm32
		50/R	r64, rm64
		90/R	rm32, r32
		D0/R	rm64, r64
		B0/R	rm32, imm32
		F0/R	rm64, imm64

DIVU		11/R	r32, rm32
		51/R	r64, rm64
		91/R	rm32, r32
		D1/R	rm64, r64
		B1/R	rm32, imm32
		F1/R	rm64, imm64

JMP		01/R
JMPCS		C1/R
JMPCC		81/R

JMP8		02,rb
JMP8CS	C2,rb
JMP8CC	82,rb

LEA		20/R

MOD		12/R	r32, rm32
		52/R	r64, rm64
		92/R	rm32, r32
		D2/R	rm64, r64
		B2/R	rm32, imm32
		F2/R	rm64, imm64

MODU		13/R	r32, rm32
		53/R	r64, rm64
		93/R	rm32, r32
		D3/R	rm64, r64
		B3/R	rm32, imm32
		F3/R	rm64, imm64

MOV		1D/R	r32, rm32
		5D/R	r64, rm64
		9D/R	rm32, r32
		DD/R	rm64, r64
		BD/R	rm32, imm32
		FD/R	rm64, imm64

MUL		0E/R	r32, rm32
		4E/R	r64, rm64
		8E/R	rm32, r32
		CE/R	rm64, r64
		AE/R	rm32, imm32
		EE/R	rm64, imm64

MULU		0F/R	r32, rm32
		4F/R	r64, rm64
		8F/R	rm32, r32
		CF/R	rm64, r64
		AF/R	rm32, imm32
		EF/R	rm64, imm64

NEG		0B/R	r32, rm32
		4B/R	r64, rm64
		8B/R	rm32, r32
		CB/R	rm64, r64

NOT		0A/R	r32, rm32
		4A/R	r64, rm64
		8A/R	rm32, r32
		CA/R	rm64, r64

OR		15/R	r32, rm32
		55/R	r64, rm64
		95/R	rm32, r32
		D5/R	rm64, r64
		B5/R	rm32, imm32
		F5/R	rm64, imm64

POP		1E/T/R
PUSH		1F/T/R
RET		04

SHL		17/R	r32, rm32
		57/R	r64, rm64
		97/R	rm32, r32
		D7/R	rm64, r64
		B7/R	rm32, imm8
		F7/R	rm64, imm8

SHR		18/R	r32, rm32
		58/R	r64, rm64
		98/R	rm32, r32
		D8/R	rm64, r64
		B8/R	rm32, imm8
		F8/R	rm64, imm8

SAR		19/R	r32, rm32
		59/R	r64, rm64
		99/R	rm32, r32
		D9/R	rm64, r64
		B9/R	rm32, imm32
		F9/R	rm64, imm64

SEXTB		1A/T/R
SEXTD		1C/T/R
SEXTW		1B/T/R

SUB		0D/R	r32, rm32
		4D/R	r64, rm64
		8D/R	rm32, r32
		CD/R	rm64, r64
		AD/R	rm32, imm32
		ED/R	rm64, imm64

XOR		16/R	r32, rm32
		56/R	r64, rm64
		96/R	rm32, r32
		D6/R	rm64, r64
		B6/R	rm32, imm32
		F6/R	rm64, imm64


Opcode Map

Group 0
00		01		02		03
BREAK		JMP		JMP8		CALL-

04		05		06		07
RET		CMPEQ		CMPLE		CMPGE

08		09		0A		0B
CMPULE	CMPUGE	NOT		NEG

0C		0D		0E		0F
ADD		SUB		MUL		MULU

10		11		12		13
DIV		DIVU		MOD		MODU

14		15		16		17
AND		OR		XOR		SHL

18		19		1A		1B
SHR		SAR		SEXTB		SEXTW

1C		1D		1E		1F
SEXTD		MOV		POP		PUSH

20		21		22		23
LEA		-		-		-

24		25		26		27
-		-		-		-

28		29		2A		2B
-		-		-		-

2C		2D		2E		2F
-		-		-		-

30		31		32		33
-		-		-		-

34		35		36		37
-		-		-		-

38		39		3A		3B
-		-		-		-

3C		3D		3E		3F
-		-		-		-


Group 1

40		41		42		43
-		-		-		-

44		45		46		47
-		CMPEQ.64	CMPLE.64	CMPGE.64

48		49		4A		4B
CMPULE.64	CMPUGE.64	NOT.64	NEG.64

4C		4D		4E		4F
ADD.64	SUB.64	MUL.64	MULU.64

50		51		52		53
DIV.64	DIVU.64	MOD.64	MODU.64

54		55		56		57
AND.64	OR.64		XOR.64	SHL.64

58		59		5A		5B
SHR.64	SAR.64	SEXTB-	SEXTW-

5C		5D		5E		5F
SEXTD-	MOV.64	POP.64	PUSH.64

60		61		62		63
LEA		-		-		-

64		65		66		67
-		-		-		-

68		69		6A		6B
-		-		-		-

6C		6D		6E		6F
-		-		-		-

70		71		72		73
-		-		-		-

74		75		76		77
-		-		-		-

78		79		7A		7B
-		-		-		-

7C		7D		7E		7F
-		-		-		-


Group 2
80		81		82		83
-		JMP.cc	JMP8.cc	CALL-

84		85		86		87
RET		CMPEQ		CMPLE		CMPGE

88		89		8A		8B
CMPULE	CMPUGE	NOT		NEG

8C		8D		8E		8F
ADD		SUB		MUL		MULU

90		91		92		93
DIV		DIVU		MOD		MODU

94		95		96		97
AND		OR		XOR		SHL

98		99		9A		9B
SHR		SAR		SEXTB		SEXTW

9C		9D		9E		9F
SEXTD		MOV		POP		PUSH

A0		A1		A2		A3
LEA		-		-		-

A4		A5		A6		A7
-		CMPEQ.imm	CMPLE.imm	CMPGE.imm

A8		A9		AA		AB
CMPULE.imm	CMPUGE.imm	-		-

AC		AD		AE		AF
ADD.imm	SUB.imm	MUL.imm	MULU.imm

B0		B1		B2		B3
DIV.imm	DIVU.imm	MOD.imm	MODU.imm

B4		B5		B6		B7
AND.imm	OR.imm	XOR.imm	SHL.imm

B8		B9		BA		BB
SHR.imm	SAR.imm	-		-

BC		BD		BE		BF
-		


Group 3

C0		C1		C2		C3
-		JMP.cs	JMP8.cs	CALL-

C4		C5		C6		C7
-		CMPEQ.64	CMPLE.64	CMPGE.64

C8		C9		CA		CB
CMPULE.64	CMPUGE.64	NOT.64	NEG.64

CC		CD		CE		CF
ADD.64	SUB.64	MUL.64	MULU.64

D0		D1		D2		D3
DIV.64	DIVU.64	MOD.64	MODU.64

D4		D5		D6		D7
AND.64	OR.64		XOR.64	SHL.64

D8		D9		DA		DB
SHR.64	SAR.64	SEXTB-	SEXTW-

DC		DD		DE		DF
SEXTD-	MOV.64	POP.64	PUSH.64

E0		E1		E2		E3
LEA		-		-		-

E4		E5		E6		E7
-		CMPEQ.i64	CMPLE.i64	CMPGE.i64

E8		E9		EA		EB
CMPULE.i64	CMPUGE.i64	-		-

EC		ED		EE		EF
ADD.i64	SUB.i64	MUL.i64	MULU.i64

F0		F1		F2		F3
DIV.i64	DIVU.i64	MOD.i64	MODU.i64

F4		F5		F6		F7
AND.i64	OR.i64	XOR.i64	SHL.i64

F8		F9		FA		FB
SHR.i64	SAR.i64	-		-

FC		FD		FE		FF
-		

